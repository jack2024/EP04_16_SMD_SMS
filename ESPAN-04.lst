CCS PCH C Compiler, Version 5.091, 5967               11-¡.Â.-21 23:53

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_16 - Delay - SP - SMD - SMS\ESPAN-04.lst

               ROM used:   45036 bytes (69%)
                           Largest free fragment is 20496
               RAM used:   3103 (80%) at main() level
                           3125 (80%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   A558
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.1
00056:  GOTO   0060
0005A:  BTFSC  F9E.1
0005C:  GOTO   057A
00060:  BTFSS  F9D.5
00062:  GOTO   006C
00066:  BTFSC  F9E.5
00068:  GOTO   056A
0006C:  MOVFF  0E,00
00070:  MOVFF  0F,01
00074:  MOVFF  10,02
00078:  MOVFF  11,03
0007C:  MOVFF  0C,FE9
00080:  MOVFF  07,FEA
00084:  BSF    07.7
00086:  MOVFF  08,FE1
0008A:  MOVFF  09,FE2
0008E:  MOVFF  0A,FD9
00092:  MOVFF  0B,FDA
00096:  MOVFF  12,FF3
0009A:  MOVFF  13,FF4
0009E:  MOVFF  14,FFA
000A2:  MOVFF  15,FF5
000A6:  MOVFF  16,FF6
000AA:  MOVFF  17,FF7
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
000BA:  CLRF   FF7
000BC:  ADDLW  CA
000BE:  MOVWF  FF6
000C0:  MOVLW  00
000C2:  ADDWFC FF7,F
000C4:  TBLRD*+
000C6:  MOVF   FF5,W
000C8:  RETURN 0
000CA:  DATA 00,C1
000CC:  DATA 81,40
000CE:  DATA 01,C0
000D0:  DATA 80,41
000D2:  DATA 01,C0
000D4:  DATA 80,41
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 00,C1
000E0:  DATA 81,40
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 01,C0
000EC:  DATA 80,41
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 00,C1
000F4:  DATA 81,40
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 01,C0
00100:  DATA 80,41
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 00,C1
00110:  DATA 81,40
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 01,C0
00120:  DATA 80,41
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 00,C1
0012C:  DATA 81,40
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 01,C0
00134:  DATA 80,41
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 00,C1
00140:  DATA 81,40
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 01,C0
0014C:  DATA 80,41
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 00,C1
00154:  DATA 81,40
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 01,C0
00160:  DATA 80,41
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 00,C1
0016C:  DATA 81,40
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 01,C0
00174:  DATA 80,41
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 00,C1
00180:  DATA 81,40
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 01,C0
00190:  DATA 80,41
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 00,C1
001A0:  DATA 81,40
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 01,C0
001AC:  DATA 80,41
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 00,C1
001B4:  DATA 81,40
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 01,C0
001C0:  DATA 80,41
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  CLRF   FF7
001CC:  ADDLW  DA
001CE:  MOVWF  FF6
001D0:  MOVLW  01
001D2:  ADDWFC FF7,F
001D4:  TBLRD*+
001D6:  MOVF   FF5,W
001D8:  RETURN 0
001DA:  DATA 00,C0
001DC:  DATA C1,01
001DE:  DATA C3,03
001E0:  DATA 02,C2
001E2:  DATA C6,06
001E4:  DATA 07,C7
001E6:  DATA 05,C5
001E8:  DATA C4,04
001EA:  DATA CC,0C
001EC:  DATA 0D,CD
001EE:  DATA 0F,CF
001F0:  DATA CE,0E
001F2:  DATA 0A,CA
001F4:  DATA CB,0B
001F6:  DATA C9,09
001F8:  DATA 08,C8
001FA:  DATA D8,18
001FC:  DATA 19,D9
001FE:  DATA 1B,DB
00200:  DATA DA,1A
00202:  DATA 1E,DE
00204:  DATA DF,1F
00206:  DATA DD,1D
00208:  DATA 1C,DC
0020A:  DATA 14,D4
0020C:  DATA D5,15
0020E:  DATA D7,17
00210:  DATA 16,D6
00212:  DATA D2,12
00214:  DATA 13,D3
00216:  DATA 11,D1
00218:  DATA D0,10
0021A:  DATA F0,30
0021C:  DATA 31,F1
0021E:  DATA 33,F3
00220:  DATA F2,32
00222:  DATA 36,F6
00224:  DATA F7,37
00226:  DATA F5,35
00228:  DATA 34,F4
0022A:  DATA 3C,FC
0022C:  DATA FD,3D
0022E:  DATA FF,3F
00230:  DATA 3E,FE
00232:  DATA FA,3A
00234:  DATA 3B,FB
00236:  DATA 39,F9
00238:  DATA F8,38
0023A:  DATA 28,E8
0023C:  DATA E9,29
0023E:  DATA EB,2B
00240:  DATA 2A,EA
00242:  DATA EE,2E
00244:  DATA 2F,EF
00246:  DATA 2D,ED
00248:  DATA EC,2C
0024A:  DATA E4,24
0024C:  DATA 25,E5
0024E:  DATA 27,E7
00250:  DATA E6,26
00252:  DATA 22,E2
00254:  DATA E3,23
00256:  DATA E1,21
00258:  DATA 20,E0
0025A:  DATA A0,60
0025C:  DATA 61,A1
0025E:  DATA 63,A3
00260:  DATA A2,62
00262:  DATA 66,A6
00264:  DATA A7,67
00266:  DATA A5,65
00268:  DATA 64,A4
0026A:  DATA 6C,AC
0026C:  DATA AD,6D
0026E:  DATA AF,6F
00270:  DATA 6E,AE
00272:  DATA AA,6A
00274:  DATA 6B,AB
00276:  DATA 69,A9
00278:  DATA A8,68
0027A:  DATA 78,B8
0027C:  DATA B9,79
0027E:  DATA BB,7B
00280:  DATA 7A,BA
00282:  DATA BE,7E
00284:  DATA 7F,BF
00286:  DATA 7D,BD
00288:  DATA BC,7C
0028A:  DATA B4,74
0028C:  DATA 75,B5
0028E:  DATA 77,B7
00290:  DATA B6,76
00292:  DATA 72,B2
00294:  DATA B3,73
00296:  DATA B1,71
00298:  DATA 70,B0
0029A:  DATA 50,90
0029C:  DATA 91,51
0029E:  DATA 93,53
002A0:  DATA 52,92
002A2:  DATA 96,56
002A4:  DATA 57,97
002A6:  DATA 55,95
002A8:  DATA 94,54
002AA:  DATA 9C,5C
002AC:  DATA 5D,9D
002AE:  DATA 5F,9F
002B0:  DATA 9E,5E
002B2:  DATA 5A,9A
002B4:  DATA 9B,5B
002B6:  DATA 99,59
002B8:  DATA 58,98
002BA:  DATA 88,48
002BC:  DATA 49,89
002BE:  DATA 4B,8B
002C0:  DATA 8A,4A
002C2:  DATA 4E,8E
002C4:  DATA 8F,4F
002C6:  DATA 8D,4D
002C8:  DATA 4C,8C
002CA:  DATA 44,84
002CC:  DATA 85,45
002CE:  DATA 87,47
002D0:  DATA 46,86
002D2:  DATA 82,42
002D4:  DATA 43,83
002D6:  DATA 41,81
002D8:  DATA 80,40
*
0060C:  DATA 41,54
0060E:  DATA 2B,43
00610:  DATA 4D,47
00612:  DATA 46,3D
00614:  DATA 31,00
00616:  DATA 41,54
00618:  DATA 2B,43
0061A:  DATA 4D,47
0061C:  DATA 53,3D
0061E:  DATA 22,00
00620:  DATA 41,54
00622:  DATA 2B,43
00624:  DATA 4D,47
00626:  DATA 46,3D
00628:  DATA 31,00
0062A:  DATA 41,54
0062C:  DATA 2B,43
0062E:  DATA 4D,47
00630:  DATA 53,3D
00632:  DATA 22,00
00634:  DATA 41,54
00636:  DATA 2B,43
00638:  DATA 4D,47
0063A:  DATA 46,3D
0063C:  DATA 31,00
0063E:  DATA 41,54
00640:  DATA 2B,43
00642:  DATA 4D,47
00644:  DATA 53,3D
00646:  DATA 22,00
00648:  DATA 41,54
0064A:  DATA 2B,43
0064C:  DATA 4D,47
0064E:  DATA 46,3D
00650:  DATA 31,00
00652:  DATA 41,54
00654:  DATA 2B,43
00656:  DATA 4D,47
00658:  DATA 53,3D
0065A:  DATA 22,00
0065C:  DATA 41,54
0065E:  DATA 2B,43
00660:  DATA 4D,47
00662:  DATA 46,3D
00664:  DATA 31,00
00666:  DATA 41,54
00668:  DATA 2B,43
0066A:  DATA 4D,47
0066C:  DATA 53,3D
0066E:  DATA 22,00
00670:  DATA 41,54
00672:  DATA 2B,43
00674:  DATA 4D,47
00676:  DATA 46,3D
00678:  DATA 31,00
0067A:  DATA 41,54
0067C:  DATA 2B,43
0067E:  DATA 4D,47
00680:  DATA 53,3D
00682:  DATA 22,00
00684:  DATA 41,54
00686:  DATA 2B,43
00688:  DATA 4D,47
0068A:  DATA 46,3D
0068C:  DATA 31,00
0068E:  DATA 41,54
00690:  DATA 2B,43
00692:  DATA 4D,47
00694:  DATA 53,3D
00696:  DATA 22,00
00698:  DATA 41,54
0069A:  DATA 2B,43
0069C:  DATA 4D,47
0069E:  DATA 46,3D
006A0:  DATA 31,00
006A2:  DATA 41,54
006A4:  DATA 2B,43
006A6:  DATA 4D,47
006A8:  DATA 53,3D
006AA:  DATA 22,00
006AC:  DATA 41,54
006AE:  DATA 2B,43
006B0:  DATA 4D,47
006B2:  DATA 46,3D
006B4:  DATA 31,00
006B6:  DATA 41,54
006B8:  DATA 2B,43
006BA:  DATA 4D,47
006BC:  DATA 53,3D
006BE:  DATA 22,00
006C0:  DATA 41,54
006C2:  DATA 2B,43
006C4:  DATA 4D,47
006C6:  DATA 46,3D
006C8:  DATA 31,00
006CA:  DATA 41,54
006CC:  DATA 2B,43
006CE:  DATA 4D,47
006D0:  DATA 53,3D
006D2:  DATA 22,00
006D4:  DATA 41,54
006D6:  DATA 2B,43
006D8:  DATA 4D,47
006DA:  DATA 46,3D
006DC:  DATA 31,00
006DE:  DATA 41,54
006E0:  DATA 2B,43
006E2:  DATA 4D,47
006E4:  DATA 53,3D
006E6:  DATA 22,00
006E8:  DATA 41,54
006EA:  DATA 2B,43
006EC:  DATA 4D,47
006EE:  DATA 46,3D
006F0:  DATA 31,00
006F2:  DATA 41,54
006F4:  DATA 2B,43
006F6:  DATA 4D,47
006F8:  DATA 53,3D
006FA:  DATA 22,00
006FC:  DATA 41,54
006FE:  DATA 2B,43
00700:  DATA 4D,47
00702:  DATA 46,3D
00704:  DATA 31,00
00706:  DATA 41,54
00708:  DATA 2B,43
0070A:  DATA 4D,47
0070C:  DATA 53,3D
0070E:  DATA 22,00
00710:  DATA 41,54
00712:  DATA 2B,43
00714:  DATA 4D,47
00716:  DATA 46,3D
00718:  DATA 31,00
0071A:  DATA 41,54
0071C:  DATA 2B,43
0071E:  DATA 4D,47
00720:  DATA 53,3D
00722:  DATA 22,00
00724:  DATA 41,54
00726:  DATA 2B,43
00728:  DATA 4D,47
0072A:  DATA 46,3D
0072C:  DATA 31,00
0072E:  DATA 41,54
00730:  DATA 2B,43
00732:  DATA 4D,47
00734:  DATA 53,3D
00736:  DATA 22,00
00738:  DATA 41,54
0073A:  DATA 2B,43
0073C:  DATA 4D,47
0073E:  DATA 46,3D
00740:  DATA 31,00
00742:  DATA 41,54
00744:  DATA 2B,43
00746:  DATA 4D,47
00748:  DATA 53,3D
0074A:  DATA 22,00
0074C:  DATA 41,54
0074E:  DATA 2B,43
00750:  DATA 4D,47
00752:  DATA 46,3D
00754:  DATA 31,00
00756:  DATA 41,54
00758:  DATA 2B,43
0075A:  DATA 4D,47
0075C:  DATA 53,3D
0075E:  DATA 22,00
00760:  DATA 41,54
00762:  DATA 2B,43
00764:  DATA 4D,47
00766:  DATA 46,3D
00768:  DATA 31,00
0076A:  DATA 41,54
0076C:  DATA 2B,43
0076E:  DATA 4D,47
00770:  DATA 53,3D
00772:  DATA 22,00
00774:  DATA 41,54
00776:  DATA 2B,43
00778:  DATA 4D,47
0077A:  DATA 46,3D
0077C:  DATA 31,00
0077E:  DATA 41,54
00780:  DATA 2B,43
00782:  DATA 4D,47
00784:  DATA 53,3D
00786:  DATA 22,00
00788:  DATA 41,54
0078A:  DATA 2B,43
0078C:  DATA 4D,47
0078E:  DATA 46,3D
00790:  DATA 31,00
00792:  DATA 41,54
00794:  DATA 2B,43
00796:  DATA 4D,47
00798:  DATA 53,3D
0079A:  DATA 22,00
0079C:  DATA 41,54
0079E:  DATA 2B,43
007A0:  DATA 4D,47
007A2:  DATA 46,3D
007A4:  DATA 31,00
007A6:  DATA 41,54
007A8:  DATA 2B,43
007AA:  DATA 4D,47
007AC:  DATA 53,3D
007AE:  DATA 22,00
007B0:  DATA 41,54
007B2:  DATA 2B,43
007B4:  DATA 4D,47
007B6:  DATA 46,3D
007B8:  DATA 31,00
007BA:  DATA 41,54
007BC:  DATA 2B,43
007BE:  DATA 4D,47
007C0:  DATA 53,3D
007C2:  DATA 22,00
007C4:  DATA 41,54
007C6:  DATA 2B,43
007C8:  DATA 4D,47
007CA:  DATA 46,3D
007CC:  DATA 31,00
007CE:  DATA 41,54
007D0:  DATA 2B,43
007D2:  DATA 4D,47
007D4:  DATA 53,3D
007D6:  DATA 22,00
007D8:  DATA 41,54
007DA:  DATA 2B,43
007DC:  DATA 4D,47
007DE:  DATA 46,3D
007E0:  DATA 31,00
007E2:  DATA 41,54
007E4:  DATA 2B,43
007E6:  DATA 4D,47
007E8:  DATA 53,3D
007EA:  DATA 22,00
007EC:  DATA 41,54
007EE:  DATA 2B,43
007F0:  DATA 4D,47
007F2:  DATA 46,3D
007F4:  DATA 31,00
007F6:  DATA 41,54
007F8:  DATA 2B,43
007FA:  DATA 4D,47
007FC:  DATA 53,3D
007FE:  DATA 22,00
00800:  DATA 41,54
00802:  DATA 2B,43
00804:  DATA 4D,47
00806:  DATA 46,3D
00808:  DATA 31,00
0080A:  DATA 41,54
0080C:  DATA 2B,43
0080E:  DATA 4D,47
00810:  DATA 53,3D
00812:  DATA 22,00
00814:  DATA 41,54
00816:  DATA 2B,43
00818:  DATA 4D,47
0081A:  DATA 46,3D
0081C:  DATA 31,00
0081E:  DATA 41,54
00820:  DATA 2B,43
00822:  DATA 4D,47
00824:  DATA 53,3D
00826:  DATA 22,00
00828:  DATA 41,54
0082A:  DATA 2B,43
0082C:  DATA 4D,47
0082E:  DATA 46,3D
00830:  DATA 31,00
00832:  DATA 41,54
00834:  DATA 2B,43
00836:  DATA 4D,47
00838:  DATA 53,3D
0083A:  DATA 22,00
0083C:  DATA 41,54
0083E:  DATA 2B,43
00840:  DATA 4D,47
00842:  DATA 46,3D
00844:  DATA 31,00
00846:  DATA 41,54
00848:  DATA 2B,43
0084A:  DATA 4D,47
0084C:  DATA 53,3D
0084E:  DATA 22,00
00850:  DATA 41,54
00852:  DATA 2B,43
00854:  DATA 4D,47
00856:  DATA 46,3D
00858:  DATA 31,00
0085A:  DATA 41,54
0085C:  DATA 2B,43
0085E:  DATA 4D,47
00860:  DATA 53,3D
00862:  DATA 22,00
00864:  DATA 41,54
00866:  DATA 2B,43
00868:  DATA 4D,47
0086A:  DATA 46,3D
0086C:  DATA 31,00
0086E:  DATA 41,54
00870:  DATA 2B,43
00872:  DATA 4D,47
00874:  DATA 53,3D
00876:  DATA 22,00
00878:  DATA 41,54
0087A:  DATA 2B,43
0087C:  DATA 4D,47
0087E:  DATA 46,3D
00880:  DATA 31,00
00882:  DATA 41,54
00884:  DATA 2B,43
00886:  DATA 4D,47
00888:  DATA 53,3D
0088A:  DATA 22,00
0088C:  DATA 41,54
0088E:  DATA 2B,43
00890:  DATA 4D,47
00892:  DATA 53,3D
00894:  DATA 22,00
00896:  DATA 41,54
00898:  DATA 2B,43
0089A:  DATA 4D,47
0089C:  DATA 53,3D
0089E:  DATA 22,00
008A0:  DATA 41,54
008A2:  DATA 2B,43
008A4:  DATA 4D,47
008A6:  DATA 53,3D
008A8:  DATA 22,00
008AA:  DATA 41,54
008AC:  DATA 2B,43
008AE:  DATA 4D,47
008B0:  DATA 53,3D
008B2:  DATA 22,00
008B4:  DATA 41,54
008B6:  DATA 2B,43
008B8:  DATA 4D,47
008BA:  DATA 53,3D
008BC:  DATA 22,00
008BE:  DATA 41,54
008C0:  DATA 2B,43
008C2:  DATA 4D,47
008C4:  DATA 53,3D
008C6:  DATA 22,00
008C8:  DATA 41,54
008CA:  DATA 2B,43
008CC:  DATA 4D,47
008CE:  DATA 53,3D
008D0:  DATA 22,00
008D2:  DATA 41,54
008D4:  DATA 2B,43
008D6:  DATA 4D,47
008D8:  DATA 53,3D
008DA:  DATA 22,00
008DC:  DATA 41,54
008DE:  DATA 2B,43
008E0:  DATA 4D,47
008E2:  DATA 53,3D
008E4:  DATA 22,00
008E6:  DATA 41,54
008E8:  DATA 2B,43
008EA:  DATA 4D,47
008EC:  DATA 53,3D
008EE:  DATA 22,00
008F0:  DATA 41,54
008F2:  DATA 2B,43
008F4:  DATA 4D,47
008F6:  DATA 53,3D
008F8:  DATA 22,00
008FA:  DATA 41,54
008FC:  DATA 2B,43
008FE:  DATA 4D,47
00900:  DATA 53,3D
00902:  DATA 22,00
00904:  DATA 41,54
00906:  DATA 2B,43
00908:  DATA 4D,47
0090A:  DATA 53,3D
0090C:  DATA 22,00
0090E:  DATA 41,54
00910:  DATA 2B,43
00912:  DATA 4D,47
00914:  DATA 53,3D
00916:  DATA 22,00
00918:  DATA 41,54
0091A:  DATA 2B,43
0091C:  DATA 4D,47
0091E:  DATA 53,3D
00920:  DATA 22,00
00922:  DATA 41,54
00924:  DATA 2B,43
00926:  DATA 4D,47
00928:  DATA 53,3D
0092A:  DATA 22,00
0092C:  DATA 41,54
0092E:  DATA 2B,43
00930:  DATA 4D,47
00932:  DATA 46,3D
00934:  DATA 31,00
*
01F68:  MOVLB  C
01F6A:  MOVF   x2C,W
01F6C:  ANDLW  07
01F6E:  MOVWF  00
01F70:  RRCF   x2C,W
01F72:  MOVWF  01
01F74:  RRCF   01,F
01F76:  RRCF   01,F
01F78:  MOVLW  1F
01F7A:  ANDWF  01,F
01F7C:  MOVF   01,W
01F7E:  ADDWF  x2D,W
01F80:  MOVWF  FE9
01F82:  MOVLW  00
01F84:  ADDWFC x2E,W
01F86:  MOVWF  FEA
01F88:  MOVFF  FEF,01
01F8C:  INCF   00,F
01F8E:  BRA    1F92
01F90:  RRCF   01,F
01F92:  DECFSZ 00,F
01F94:  BRA    1F90
01F96:  MOVLW  01
01F98:  ANDWF  01,F
01F9A:  MOVLB  0
01F9C:  RETURN 0
01F9E:  MOVLB  C
01FA0:  MOVF   x2D,W
01FA2:  MULWF  x2F
01FA4:  MOVFF  FF3,01
01FA8:  MOVFF  FF4,00
01FAC:  MULWF  x30
01FAE:  MOVF   FF3,W
01FB0:  ADDWF  00,F
01FB2:  MOVF   x2E,W
01FB4:  MULWF  x2F
01FB6:  MOVF   FF3,W
01FB8:  ADDWFC 00,W
01FBA:  MOVWF  02
01FBC:  MOVLB  0
01FBE:  RETURN 0
01FC0:  MOVLB  C
01FC2:  MOVF   x2C,W
01FC4:  ANDLW  07
01FC6:  MOVWF  00
01FC8:  RRCF   x2C,W
01FCA:  MOVWF  01
01FCC:  RRCF   01,F
01FCE:  RRCF   01,F
01FD0:  MOVLW  1F
01FD2:  ANDWF  01,F
01FD4:  MOVF   01,W
01FD6:  ADDWF  x2E,W
01FD8:  MOVWF  FE9
01FDA:  MOVLW  00
01FDC:  ADDWFC x2F,W
01FDE:  MOVWF  FEA
01FE0:  CLRF   01
01FE2:  INCF   01,F
01FE4:  INCF   00,F
01FE6:  BRA    1FEA
01FE8:  RLCF   01,F
01FEA:  DECFSZ 00,F
01FEC:  BRA    1FE8
01FEE:  MOVF   x2D,F
01FF0:  BZ    1FF8
01FF2:  MOVF   01,W
01FF4:  IORWF  FEF,F
01FF6:  BRA    1FFE
01FF8:  COMF   01,F
01FFA:  MOVF   01,W
01FFC:  ANDWF  FEF,F
01FFE:  MOVLB  0
02000:  RETURN 0
*
029B0:  ADDWF  FE8,W
029B2:  CLRF   FF7
029B4:  RLCF   FF7,F
029B6:  ADDLW  CB
029B8:  MOVWF  FF6
029BA:  MOVLW  29
029BC:  ADDWFC FF7,F
029BE:  TBLRD*-
029C0:  MOVF   FF5,W
029C2:  MOVWF  FFA
029C4:  TBLRD*
029C6:  MOVF   FF5,W
029C8:  MOVWF  FF9
029CA:  DATA E2,22
029CC:  DATA EA,22
029CE:  DATA F2,22
029D0:  DATA FA,22
029D2:  DATA 02,23
029D4:  DATA 0A,23
029D6:  DATA 12,23
029D8:  DATA 1A,23
029DA:  DATA 22,23
029DC:  DATA 2A,23
029DE:  DATA 32,23
029E0:  DATA 3A,23
029E2:  DATA 42,23
029E4:  DATA 4A,23
029E6:  DATA 52,23
029E8:  DATA 5A,23
029EA:  ADDWF  FE8,W
029EC:  CLRF   FF7
029EE:  RLCF   FF7,F
029F0:  ADDLW  05
029F2:  MOVWF  FF6
029F4:  MOVLW  2A
029F6:  ADDWFC FF7,F
029F8:  TBLRD*-
029FA:  MOVF   FF5,W
029FC:  MOVWF  FFA
029FE:  TBLRD*
02A00:  MOVF   FF5,W
02A02:  MOVWF  FF9
02A04:  DATA 42,24
02A06:  DATA 4A,24
02A08:  DATA 52,24
02A0A:  DATA 5A,24
02A0C:  DATA 62,24
02A0E:  DATA 6A,24
02A10:  DATA 72,24
02A12:  DATA 7A,24
02A14:  DATA 82,24
02A16:  DATA 8A,24
02A18:  DATA 92,24
02A1A:  DATA 9A,24
02A1C:  DATA A2,24
02A1E:  DATA AA,24
02A20:  DATA B2,24
02A22:  DATA BA,24
02A24:  ADDWF  FE8,W
02A26:  CLRF   FF7
02A28:  RLCF   FF7,F
02A2A:  ADDLW  3F
02A2C:  MOVWF  FF6
02A2E:  MOVLW  2A
02A30:  ADDWFC FF7,F
02A32:  TBLRD*-
02A34:  MOVF   FF5,W
02A36:  MOVWF  FFA
02A38:  TBLRD*
02A3A:  MOVF   FF5,W
02A3C:  MOVWF  FF9
02A3E:  DATA D6,25
02A40:  DATA DE,25
02A42:  DATA E6,25
02A44:  DATA EE,25
02A46:  DATA F6,25
02A48:  DATA FE,25
02A4A:  DATA 06,26
02A4C:  DATA 0E,26
02A4E:  DATA 16,26
02A50:  DATA 1E,26
02A52:  DATA 26,26
02A54:  DATA 2E,26
02A56:  DATA 36,26
02A58:  DATA 3E,26
02A5A:  DATA 46,26
02A5C:  DATA 4E,26
02A5E:  ADDWF  FE8,W
02A60:  CLRF   FF7
02A62:  RLCF   FF7,F
02A64:  ADDLW  79
02A66:  MOVWF  FF6
02A68:  MOVLW  2A
02A6A:  ADDWFC FF7,F
02A6C:  TBLRD*-
02A6E:  MOVF   FF5,W
02A70:  MOVWF  FFA
02A72:  TBLRD*
02A74:  MOVF   FF5,W
02A76:  MOVWF  FF9
02A78:  DATA 34,27
02A7A:  DATA 3C,27
02A7C:  DATA 44,27
02A7E:  DATA 4C,27
02A80:  DATA 54,27
02A82:  DATA 5C,27
02A84:  DATA 64,27
02A86:  DATA 6C,27
02A88:  DATA 74,27
02A8A:  DATA 7C,27
02A8C:  DATA 84,27
02A8E:  DATA 8C,27
02A90:  DATA 94,27
02A92:  DATA 9C,27
02A94:  DATA A4,27
02A96:  DATA AC,27
*
02EB4:  TBLRD*+
02EB6:  MOVF   FF5,F
02EB8:  BZ    2ED2
02EBA:  MOVFF  FF6,C23
02EBE:  MOVFF  FF7,C24
02EC2:  MOVFF  FF5,C25
02EC6:  RCALL  2E6E
02EC8:  MOVFF  C23,FF6
02ECC:  MOVFF  C24,FF7
02ED0:  BRA    2EB4
02ED2:  RETURN 0
*
06226:  MOVF   FEF,F
06228:  BZ    624A
0622A:  MOVFF  FEA,C24
0622E:  MOVFF  FE9,C23
06232:  MOVFF  FEF,C25
06236:  CALL   2E6E
0623A:  MOVFF  C24,FEA
0623E:  MOVFF  C23,FE9
06242:  INCF   FE9,F
06244:  BTFSC  FD8.2
06246:  INCF   FEA,F
06248:  BRA    6226
0624A:  RETURN 0
*
0AF7C:  ADDWF  FE8,W
0AF7E:  CLRF   FF7
0AF80:  RLCF   FF7,F
0AF82:  ADDLW  97
0AF84:  MOVWF  FF6
0AF86:  MOVLW  AF
0AF88:  ADDWFC FF7,F
0AF8A:  TBLRD*-
0AF8C:  MOVF   FF5,W
0AF8E:  MOVWF  FFA
0AF90:  TBLRD*
0AF92:  MOVF   FF5,W
0AF94:  MOVWF  FF9
0AF96:  DATA 44,AC
0AF98:  DATA 4C,AC
0AF9A:  DATA 54,AC
0AF9C:  DATA 5C,AC
0AF9E:  DATA 64,AC
0AFA0:  DATA 6C,AC
0AFA2:  DATA 74,AC
0AFA4:  DATA 7C,AC
0AFA6:  DATA 84,AC
0AFA8:  DATA 8C,AC
0AFAA:  DATA 94,AC
0AFAC:  DATA 9C,AC
0AFAE:  DATA A4,AC
0AFB0:  DATA AC,AC
0AFB2:  DATA B4,AC
0AFB4:  DATA BC,AC
0AFB6:  ADDWF  FE8,W
0AFB8:  CLRF   FF7
0AFBA:  RLCF   FF7,F
0AFBC:  ADDLW  D1
0AFBE:  MOVWF  FF6
0AFC0:  MOVLW  AF
0AFC2:  ADDWFC FF7,F
0AFC4:  TBLRD*-
0AFC6:  MOVF   FF5,W
0AFC8:  MOVWF  FFA
0AFCA:  TBLRD*
0AFCC:  MOVF   FF5,W
0AFCE:  MOVWF  FF9
0AFD0:  DATA DC,AC
0AFD2:  DATA E4,AC
0AFD4:  DATA EC,AC
0AFD6:  DATA F4,AC
0AFD8:  DATA FC,AC
0AFDA:  DATA 04,AD
0AFDC:  DATA 0C,AD
0AFDE:  DATA 14,AD
0AFE0:  DATA 1C,AD
0AFE2:  DATA 24,AD
0AFE4:  DATA 2C,AD
0AFE6:  DATA 34,AD
0AFE8:  DATA 3C,AD
0AFEA:  DATA 44,AD
0AFEC:  DATA 4C,AD
0AFEE:  DATA 54,AD
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#device icd = true
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
00936:  MOVLW  0C
00938:  MOVWF  FEA
0093A:  MOVLW  24
0093C:  MOVWF  FE9
0093E:  MOVF   FEF,W
00940:  BZ    0964
00942:  MOVLW  05
00944:  MOVWF  01
00946:  MOVLW  BF
00948:  MOVWF  00
0094A:  CLRWDT
0094C:  DECFSZ 00,F
0094E:  BRA    094A
00950:  DECFSZ 01,F
00952:  BRA    0946
00954:  MOVLW  2E
00956:  MOVWF  00
00958:  DECFSZ 00,F
0095A:  BRA    0958
0095C:  NOP   
0095E:  CLRWDT
00960:  DECFSZ FEF,F
00962:  BRA    0942
00964:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR    0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP     0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW    0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL    0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
00998:  BCF    F92.5
0099A:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
0099C:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
0099E:  MOVLB  C
009A0:  CLRF   x25
009A2:  MOVLW  0A
009A4:  MOVWF  x26
009A6:  MOVLW  AA
009A8:  MOVWF  x27
009AA:  MOVLB  0
009AC:  RCALL  0966
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
009AE:  MOVLW  02
009B0:  MOVLB  C
009B2:  MOVWF  x25
009B4:  MOVLW  0A
009B6:  MOVWF  x26
009B8:  MOVLW  AA
009BA:  MOVWF  x27
009BC:  MOVLB  0
009BE:  RCALL  0966
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
009C0:  MOVLW  04
009C2:  MOVLB  C
009C4:  MOVWF  x25
009C6:  MOVLW  0A
009C8:  MOVWF  x26
009CA:  MOVLW  AA
009CC:  MOVWF  x27
009CE:  MOVLB  0
009D0:  RCALL  0966
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
009D2:  MOVLW  06
009D4:  MOVLB  C
009D6:  MOVWF  x25
009D8:  MOVLW  0A
009DA:  MOVWF  x26
009DC:  MOVLW  AA
009DE:  MOVWF  x27
009E0:  MOVLB  0
009E2:  RCALL  0966
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
009E4:  MOVLW  08
009E6:  MOVLB  C
009E8:  MOVWF  x25
009EA:  MOVLW  0A
009EC:  MOVWF  x26
009EE:  MOVLW  AA
009F0:  MOVWF  x27
009F2:  MOVLB  0
009F4:  RCALL  0966
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
009F6:  MOVLW  0A
009F8:  MOVLB  C
009FA:  MOVWF  x25
009FC:  MOVWF  x26
009FE:  MOVLW  AA
00A00:  MOVWF  x27
00A02:  MOVLB  0
00A04:  RCALL  0966
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
00A06:  MOVLW  0C
00A08:  MOVLB  C
00A0A:  MOVWF  x25
00A0C:  MOVLW  0A
00A0E:  MOVWF  x26
00A10:  MOVLW  AA
00A12:  MOVWF  x27
00A14:  MOVLB  0
00A16:  RCALL  0966
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
00A18:  MOVLW  0E
00A1A:  MOVLB  C
00A1C:  MOVWF  x25
00A1E:  MOVLW  0A
00A20:  MOVWF  x26
00A22:  MOVLW  AA
00A24:  MOVWF  x27
00A26:  MOVLB  0
00A28:  RCALL  0966
....................    #endif
00A2A:  GOTO   A63C (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
00966:  BCF    F92.5
00968:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
0096A:  MOVLB  C
0096C:  MOVF   x25,W
0096E:  IORLW  40
00970:  MOVWF  x28
00972:  MOVF   FC9,W
00974:  MOVFF  C28,FC9
00978:  RRCF   FC7,W
0097A:  BNC   0978
....................    #endif
....................    
....................    spi_write(reg);
0097C:  MOVF   FC9,W
0097E:  MOVFF  C26,FC9
00982:  RRCF   FC7,W
00984:  BNC   0982
....................    spi_write(data);
00986:  MOVF   FC9,W
00988:  MOVFF  C27,FC9
0098C:  RRCF   FC7,W
0098E:  BNC   098C
....................    
....................    output_high(IO_CS_PIN);
00990:  BCF    F92.5
00992:  BSF    F89.5
00994:  MOVLB  0
00996:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
01EF8:  BCF    F92.5
01EFA:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
01EFC:  MOVLB  C
01EFE:  MOVF   x2B,W
01F00:  IORLW  41
01F02:  MOVWF  x2E
01F04:  MOVF   FC9,W
01F06:  MOVFF  C2E,FC9
01F0A:  RRCF   FC7,W
01F0C:  BNC   1F0A
....................    #endif
....................    
....................    spi_write(reg);
01F0E:  MOVF   FC9,W
01F10:  MOVFF  C2C,FC9
01F14:  RRCF   FC7,W
01F16:  BNC   1F14
....................    retVal = spi_read(0);
01F18:  MOVF   FC9,W
01F1A:  CLRF   FC9
01F1C:  RRCF   FC7,W
01F1E:  BNC   1F1C
01F20:  MOVFF  FC9,C2D
....................    
....................    output_high(IO_CS_PIN);
01F24:  BCF    F92.5
01F26:  BSF    F89.5
....................    
....................    return retVal;
01F28:  MOVFF  C2D,01
01F2C:  MOVLB  0
01F2E:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
02A98:  MOVFF  C23,C25
02A9C:  MOVLW  0A
02A9E:  MOVLB  C
02AA0:  MOVWF  x26
02AA2:  MOVFF  C24,C27
02AA6:  MOVLB  0
02AA8:  CALL   0966
....................    #endif
02AAC:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
02AAE:  MOVFF  C23,C25
02AB2:  MOVLW  1A
02AB4:  MOVLB  C
02AB6:  MOVWF  x26
02AB8:  MOVFF  C24,C27
02ABC:  MOVLB  0
02ABE:  CALL   0966
....................    #endif
02AC2:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
01F30:  MOVFF  C29,C2B
01F34:  MOVLW  09
01F36:  MOVLB  C
01F38:  MOVWF  x2C
01F3A:  MOVLB  0
01F3C:  RCALL  1EF8
01F3E:  MOVFF  01,C2A
....................    #endif
....................    
....................    return retVal;
01F42:  MOVLB  C
01F44:  MOVFF  C2A,01
01F48:  MOVLB  0
01F4A:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
01F4C:  MOVFF  C29,C2B
01F50:  MOVLW  19
01F52:  MOVLB  C
01F54:  MOVWF  x2C
01F56:  MOVLB  0
01F58:  RCALL  1EF8
01F5A:  MOVFF  01,C2A
....................    #endif
....................    
....................    return retVal;
01F5E:  MOVLB  C
01F60:  MOVFF  C2A,01
01F64:  MOVLB  0
01F66:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
00A2E:  MOVFF  C1B,C25
00A32:  MOVLB  C
00A34:  CLRF   x26
00A36:  MOVFF  C1C,C27
00A3A:  MOVLB  0
00A3C:  RCALL  0966
....................    #endif
00A3E:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
00A40:  MOVFF  C1B,C25
00A44:  MOVLW  10
00A46:  MOVLB  C
00A48:  MOVWF  x26
00A4A:  MOVFF  C1C,C27
00A4E:  MOVLB  0
00A50:  RCALL  0966
....................    #endif
00A52:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... 
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... 
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... 
.................... ///#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
02F2A:  BTFSS  F9E.4
02F2C:  BRA    2F2A
02F2E:  MOVWF  FAD
02F30:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... 
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_B1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
*
02E6E:  BCF    F93.0
02E70:  BCF    F8A.0
02E72:  MOVLW  08
02E74:  MOVWF  01
02E76:  BRA    2E78
02E78:  NOP   
02E7A:  BSF    01.7
02E7C:  BRA    2E9E
02E7E:  BCF    01.7
02E80:  MOVLB  C
02E82:  RRCF   x25,F
02E84:  MOVLB  0
02E86:  BTFSC  FD8.0
02E88:  BSF    F8A.0
02E8A:  BTFSS  FD8.0
02E8C:  BCF    F8A.0
02E8E:  BSF    01.6
02E90:  BRA    2E9E
02E92:  BCF    01.6
02E94:  DECFSZ 01,F
02E96:  BRA    2E80
02E98:  BRA    2E9A
02E9A:  NOP   
02E9C:  BSF    F8A.0
02E9E:  MOVLW  84
02EA0:  MOVWF  FE9
02EA2:  DECFSZ FE9,F
02EA4:  BRA    2EA2
02EA6:  BRA    2EA8
02EA8:  NOP   
02EAA:  BTFSC  01.7
02EAC:  BRA    2E7E
02EAE:  BTFSC  01.6
02EB0:  BRA    2E92
02EB2:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... /*
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_C1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
.................... */
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... //int8 Input1_8;
.................... //int8 Input9_16;
.................... 
.................... volatile int1 functointest_f = 0;
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... int8 Output595[4];
.................... 
.................... int8 tempdata;
.................... //int8 EEP_Config = 0x00;   //
.................... //int8 NUMBER_OF_595 ;
.................... 
.................... int8 EEpDat;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_16;
.................... 
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Red1_7;
.................... int8 Red8_8;
.................... int8 Red9_15;
.................... int8 Red16_16;
.................... 
.................... int8 Green1_7;
.................... int8 Green8_8;
.................... int8 Green9_15;
.................... int8 Green16_16;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_16;
.................... 
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... 
.................... int8 Green1_8 ;
.................... int8 Green9_16 ;
.................... 
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_16 ;
.................... 
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... 
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_16 ;
.................... 
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... 
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... int8 MasterSlaveSync;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... 
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////
.................... unsigned char const addr_sq = 0x10,end_sq = 0x11,code_sq = 0x12,start_addr_hi_sq = 0x13,start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15, ubyte_lo_sq = 0x16, crc_hi_sq = 0x17,second_numofdata = 0x18, byte_count_sq = 0x19, data_sq = 0x20;      //serial sequnce
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned char RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[255];
.................... unsigned char RxD_Buff[1024];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[1024];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;   //use for calculate RxD timeout
.................... int16 index = 0x00;         //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... volatile int16 MCP23_ReadError =0;
.................... 
.................... unsigned char sms_phonenumber[15];
.................... 
.................... //unsigned char SMS_Massage[20][20];
.................... 
.................... unsigned char SMS_Massage1[32];
.................... unsigned char SMS_Massage2[32];
.................... unsigned char SMS_Massage3[32];
.................... unsigned char SMS_Massage4[32];
.................... unsigned char SMS_Massage5[32];
.................... unsigned char SMS_Massage6[32];
.................... unsigned char SMS_Massage7[32];
.................... unsigned char SMS_Massage8[32];
.................... unsigned char SMS_Massage9[32];
.................... unsigned char SMS_Massage10[32];
.................... unsigned char SMS_Massage11[32];
.................... unsigned char SMS_Massage12[32];
.................... unsigned char SMS_Massage13[32];
.................... unsigned char SMS_Massage14[32];
.................... unsigned char SMS_Massage15[32];
.................... unsigned char SMS_Massage16[32];
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... } ; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Input
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8,B9,B10;
....................    int1 B11,B12,B13,B14,B15,B16;
....................    //int1 B21,B22,B23,B24,B25,B26,B27,B28,B29,B30;
....................    //int1 B31,B32,B33,B34,B35,B36,B37,B38,B39,B40;
....................    //int1 B41,B42,B43,B44,B45,B46,B47,B48,B49,B50;
....................    //int1 B51,B52,B53,B54,B55,B56,B57,B58,B59,B60;
....................    //int1 B61,B62,B63,B64;
.................... };
.................... 
.................... 
....................    //Output   (LED Lit = "0")
....................    //Input Type NO/NC (NO = "1" , NC = "0")
....................    //Fault Type Manual/Auto (Manual = "1" , Auto = "0")
....................    //Output Type Buz/Bell (Buzzer = "1" , Bell = "0")
....................    //Output Both (Normal = "1" , Both = "0")
....................    //Acknowledge flag (Acked = "1" , non Ack = "0")
.................... 
.................... //struct Bit64 Input,Output,InputType,FaultType,OutputType,OutputBoth;
.................... struct Bit64 Inputt;
.................... struct Bit64 Output;
.................... struct Bit64 InputType;
.................... struct Bit64 FaultType;
.................... struct Bit64 OutputType;
.................... struct Bit64 OutputBoth;
.................... 
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 LED_Colour,AckSend,RED_Colour,GREEN_Colour;
.................... 
.................... struct Bit64 SendSMS;
.................... 
.................... int1 FaultAgo[21];
.................... int1 FaultNow[21];
.................... int16 ReleaseTime[21];
.................... int16 FaultDelayTime[21];
.................... 
.................... int1 FaultNCNO[21];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //volatile int8 ReadIn_Count =0;
.................... //int1 ReadIn_flag = 0;
.................... 
.................... 
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void StoreReleaseFault()
*
02002:  MOVLB  C
02004:  CLRF   x29
.................... {
....................    Signed int8 i=0;
....................    for(i=1;i<=16;i++)
02006:  MOVLW  01
02008:  MOVWF  x29
0200A:  BTFSC  x29.7
0200C:  BRA    2014
0200E:  MOVF   x29,W
02010:  SUBLW  10
02012:  BNC   205A
....................    {
....................       FaultAgo[i] = FaultNow[i];
02014:  CLRF   03
02016:  MOVF   x29,W
02018:  MOVWF  00
0201A:  BTFSC  FE8.7
0201C:  DECF   03,F
0201E:  MOVWF  x2A
02020:  MOVFF  03,C2B
02024:  CLRF   03
02026:  MOVF   x29,W
02028:  MOVWF  00
0202A:  BTFSC  FE8.7
0202C:  DECF   03,F
0202E:  MOVWF  x2C
02030:  MOVLW  0B
02032:  MOVWF  x2E
02034:  MOVLW  BB
02036:  MOVWF  x2D
02038:  MOVLB  0
0203A:  RCALL  1F68
0203C:  MOVFF  C2A,C2C
02040:  MOVLB  C
02042:  CLRF   x2D
02044:  BTFSC  01.0
02046:  INCF   x2D,F
02048:  MOVLW  0B
0204A:  MOVWF  x2F
0204C:  MOVLW  B8
0204E:  MOVWF  x2E
02050:  MOVLB  0
02052:  RCALL  1FC0
02054:  MOVLB  C
02056:  INCF   x29,F
02058:  BRA    200A
....................    }
0205A:  MOVLB  0
0205C:  GOTO   27DE (RETURN)
.................... }
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
02ED4:  MOVLB  5
02ED6:  SETF   x7B
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
02ED8:  SETF   x7A
.................... 
....................    for(i = 0;i < usDataLen;i++)
02EDA:  MOVLB  C
02EDC:  CLRF   x29
02EDE:  MOVF   x27,W
02EE0:  SUBWF  x29,W
02EE2:  BC    2F26
....................    {
....................       restart_wdt();
02EE4:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
02EE6:  MOVF   x29,W
02EE8:  ADDWF  x25,W
02EEA:  MOVWF  FE9
02EEC:  MOVLW  00
02EEE:  ADDWFC x26,W
02EF0:  MOVWF  FEA
02EF2:  MOVF   FEF,W
02EF4:  MOVLB  5
02EF6:  XORWF  x7B,W
02EF8:  MOVLB  C
02EFA:  MOVWF  x28
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
02EFC:  CLRF   03
02EFE:  MOVF   x28,W
02F00:  MOVLB  0
02F02:  CALL   00BA
02F06:  MOVWF  01
02F08:  MOVLB  5
02F0A:  MOVF   x7A,W
02F0C:  XORWF  01,W
02F0E:  MOVWF  x7B
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
02F10:  CLRF   03
02F12:  MOVLB  C
02F14:  MOVF   x28,W
02F16:  MOVLB  0
02F18:  CALL   01CA
02F1C:  MOVFF  FE8,57A
02F20:  MOVLB  C
02F22:  INCF   x29,F
02F24:  BRA    2EDE
....................    }
02F26:  MOVLB  0
02F28:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... /*
.................... void Driver595()
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
....................     
....................     data_out = (~Input19_20);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input11_18);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input9_10);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input1_8);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................  
....................    output_high(EXP_OUT_ENABLE);
....................    delay_us(1);
....................    output_low(EXP_OUT_ENABLE);
.................... }
.................... */
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
02F32:  CLRF   1E
....................    Input9_16_Send = 0x00;
02F34:  CLRF   1F
....................    
....................    
....................    Ack1_8_Send = 0x00;
02F36:  CLRF   26
....................    Ack9_16_Send = 0x00;
02F38:  CLRF   27
.................... 
....................    
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
02F3A:  MOVLB  B
02F3C:  BTFSC  xAA.0
02F3E:  BRA    2F48
02F40:  BTFSC  x9C.0
02F42:  BRA    2F48
....................       AckSend.B1 = 1;
02F44:  BSF    xB0.0
02F46:  BRA    2F4A
....................    else
....................       AckSend.B1 = 0;
02F48:  BCF    xB0.0
....................    if((In.B2 == 0) && (Output.B2 ==0))
02F4A:  BTFSC  xAA.1
02F4C:  BRA    2F56
02F4E:  BTFSC  x9C.1
02F50:  BRA    2F56
....................       AckSend.B2 = 1;
02F52:  BSF    xB0.1
02F54:  BRA    2F58
....................    else
....................       AckSend.B2 = 0;
02F56:  BCF    xB0.1
....................    if((In.B3 == 0) && (Output.B3 ==0))
02F58:  BTFSC  xAA.2
02F5A:  BRA    2F64
02F5C:  BTFSC  x9C.2
02F5E:  BRA    2F64
....................       AckSend.B3 = 1;
02F60:  BSF    xB0.2
02F62:  BRA    2F66
....................    else
....................       AckSend.B3 = 0;
02F64:  BCF    xB0.2
....................    if((In.B4 == 0) && (Output.B4 ==0))
02F66:  BTFSC  xAA.3
02F68:  BRA    2F72
02F6A:  BTFSC  x9C.3
02F6C:  BRA    2F72
....................       AckSend.B4 = 1;
02F6E:  BSF    xB0.3
02F70:  BRA    2F74
....................    else
....................       AckSend.B4 = 0;
02F72:  BCF    xB0.3
....................    if((In.B5 == 0) && (Output.B5 ==0))
02F74:  BTFSC  xAA.4
02F76:  BRA    2F80
02F78:  BTFSC  x9C.4
02F7A:  BRA    2F80
....................       AckSend.B5 = 1;
02F7C:  BSF    xB0.4
02F7E:  BRA    2F82
....................    else
....................       AckSend.B5 = 0;
02F80:  BCF    xB0.4
....................    if((In.B6 == 0) && (Output.B6 ==0))
02F82:  BTFSC  xAA.5
02F84:  BRA    2F8E
02F86:  BTFSC  x9C.5
02F88:  BRA    2F8E
....................       AckSend.B6 = 1;
02F8A:  BSF    xB0.5
02F8C:  BRA    2F90
....................    else
....................       AckSend.B6 = 0;
02F8E:  BCF    xB0.5
....................    if((In.B7 == 0) && (Output.B7 ==0))
02F90:  BTFSC  xAA.6
02F92:  BRA    2F9C
02F94:  BTFSC  x9C.6
02F96:  BRA    2F9C
....................       AckSend.B7 = 1;
02F98:  BSF    xB0.6
02F9A:  BRA    2F9E
....................    else
....................       AckSend.B7 = 0;
02F9C:  BCF    xB0.6
....................    if((In.B8 == 0) && (Output.B8 ==0))
02F9E:  BTFSC  xAA.7
02FA0:  BRA    2FAA
02FA2:  BTFSC  x9C.7
02FA4:  BRA    2FAA
....................       AckSend.B8 = 1;
02FA6:  BSF    xB0.7
02FA8:  BRA    2FAC
....................    else
....................       AckSend.B8 = 0;
02FAA:  BCF    xB0.7
....................    if((In.B9 == 0) && (Output.B9 ==0))
02FAC:  BTFSC  xAB.0
02FAE:  BRA    2FB8
02FB0:  BTFSC  x9D.0
02FB2:  BRA    2FB8
....................       AckSend.B9 = 1;
02FB4:  BSF    xB1.0
02FB6:  BRA    2FBA
....................    else
....................       AckSend.B9 = 0;
02FB8:  BCF    xB1.0
....................    if((In.B10 == 0) && (Output.B10 ==0))
02FBA:  BTFSC  xAB.1
02FBC:  BRA    2FC6
02FBE:  BTFSC  x9D.1
02FC0:  BRA    2FC6
....................       AckSend.B10 = 1;
02FC2:  BSF    xB1.1
02FC4:  BRA    2FC8
....................    else
....................       AckSend.B10 = 0;
02FC6:  BCF    xB1.1
....................    if((In.B11 == 0) && (Output.B11 ==0))
02FC8:  BTFSC  xAB.2
02FCA:  BRA    2FD4
02FCC:  BTFSC  x9D.2
02FCE:  BRA    2FD4
....................       AckSend.B11 = 1;
02FD0:  BSF    xB1.2
02FD2:  BRA    2FD6
....................    else
....................       AckSend.B11 = 0;
02FD4:  BCF    xB1.2
....................    if((In.B12 == 0) && (Output.B12 ==0))
02FD6:  BTFSC  xAB.3
02FD8:  BRA    2FE2
02FDA:  BTFSC  x9D.3
02FDC:  BRA    2FE2
....................       AckSend.B12 = 1;
02FDE:  BSF    xB1.3
02FE0:  BRA    2FE4
....................    else
....................       AckSend.B12 = 0;
02FE2:  BCF    xB1.3
....................    if((In.B13 == 0) && (Output.B13 ==0))
02FE4:  BTFSC  xAB.4
02FE6:  BRA    2FF0
02FE8:  BTFSC  x9D.4
02FEA:  BRA    2FF0
....................       AckSend.B13 = 1;
02FEC:  BSF    xB1.4
02FEE:  BRA    2FF2
....................    else
....................       AckSend.B13 = 0;
02FF0:  BCF    xB1.4
....................    if((In.B14 == 0) && (Output.B14 ==0))
02FF2:  BTFSC  xAB.5
02FF4:  BRA    2FFE
02FF6:  BTFSC  x9D.5
02FF8:  BRA    2FFE
....................       AckSend.B14 = 1;
02FFA:  BSF    xB1.5
02FFC:  BRA    3000
....................    else
....................       AckSend.B14 = 0;
02FFE:  BCF    xB1.5
....................    if((In.B15 == 0) && (Output.B15 ==0))
03000:  BTFSC  xAB.6
03002:  BRA    300C
03004:  BTFSC  x9D.6
03006:  BRA    300C
....................       AckSend.B15 = 1;
03008:  BSF    xB1.6
0300A:  BRA    300E
....................    else
....................       AckSend.B15 = 0;
0300C:  BCF    xB1.6
....................    if((In.B16 == 0) && (Output.B16 ==0))
0300E:  BTFSC  xAB.7
03010:  BRA    301A
03012:  BTFSC  x9D.7
03014:  BRA    301A
....................       AckSend.B16 = 1;
03016:  BSF    xB1.7
03018:  BRA    301C
....................    else
....................       AckSend.B16 = 0;
0301A:  BCF    xB1.7
.................... 
....................       
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
0301C:  MOVLW  00
0301E:  BTFSC  xB0.7
03020:  MOVLW  01
03022:  IORWF  26,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
03024:  BCF    FD8.0
03026:  RLCF   26,W
03028:  MOVLB  C
0302A:  MOVWF  x25
0302C:  MOVLW  00
0302E:  MOVLB  B
03030:  BTFSC  xB0.6
03032:  MOVLW  01
03034:  MOVLB  C
03036:  IORWF  x25,W
03038:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
0303A:  BCF    FD8.0
0303C:  RLCF   26,W
0303E:  MOVWF  x25
03040:  MOVLW  00
03042:  MOVLB  B
03044:  BTFSC  xB0.5
03046:  MOVLW  01
03048:  MOVLB  C
0304A:  IORWF  x25,W
0304C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
0304E:  BCF    FD8.0
03050:  RLCF   26,W
03052:  MOVWF  x25
03054:  MOVLW  00
03056:  MOVLB  B
03058:  BTFSC  xB0.4
0305A:  MOVLW  01
0305C:  MOVLB  C
0305E:  IORWF  x25,W
03060:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
03062:  BCF    FD8.0
03064:  RLCF   26,W
03066:  MOVWF  x25
03068:  MOVLW  00
0306A:  MOVLB  B
0306C:  BTFSC  xB0.3
0306E:  MOVLW  01
03070:  MOVLB  C
03072:  IORWF  x25,W
03074:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
03076:  BCF    FD8.0
03078:  RLCF   26,W
0307A:  MOVWF  x25
0307C:  MOVLW  00
0307E:  MOVLB  B
03080:  BTFSC  xB0.2
03082:  MOVLW  01
03084:  MOVLB  C
03086:  IORWF  x25,W
03088:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
0308A:  BCF    FD8.0
0308C:  RLCF   26,W
0308E:  MOVWF  x25
03090:  MOVLW  00
03092:  MOVLB  B
03094:  BTFSC  xB0.1
03096:  MOVLW  01
03098:  MOVLB  C
0309A:  IORWF  x25,W
0309C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
0309E:  BCF    FD8.0
030A0:  RLCF   26,W
030A2:  MOVWF  x25
030A4:  MOVLW  00
030A6:  MOVLB  B
030A8:  BTFSC  xB0.0
030AA:  MOVLW  01
030AC:  MOVLB  C
030AE:  IORWF  x25,W
030B0:  MOVWF  26
....................    
....................    Ack9_16_Send = Ack9_16_Send | AckSend.B16;
030B2:  MOVLW  00
030B4:  MOVLB  B
030B6:  BTFSC  xB1.7
030B8:  MOVLW  01
030BA:  IORWF  27,F
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B15;
030BC:  BCF    FD8.0
030BE:  RLCF   27,W
030C0:  MOVLB  C
030C2:  MOVWF  x25
030C4:  MOVLW  00
030C6:  MOVLB  B
030C8:  BTFSC  xB1.6
030CA:  MOVLW  01
030CC:  MOVLB  C
030CE:  IORWF  x25,W
030D0:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B14;
030D2:  BCF    FD8.0
030D4:  RLCF   27,W
030D6:  MOVWF  x25
030D8:  MOVLW  00
030DA:  MOVLB  B
030DC:  BTFSC  xB1.5
030DE:  MOVLW  01
030E0:  MOVLB  C
030E2:  IORWF  x25,W
030E4:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B13;
030E6:  BCF    FD8.0
030E8:  RLCF   27,W
030EA:  MOVWF  x25
030EC:  MOVLW  00
030EE:  MOVLB  B
030F0:  BTFSC  xB1.4
030F2:  MOVLW  01
030F4:  MOVLB  C
030F6:  IORWF  x25,W
030F8:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B12;
030FA:  BCF    FD8.0
030FC:  RLCF   27,W
030FE:  MOVWF  x25
03100:  MOVLW  00
03102:  MOVLB  B
03104:  BTFSC  xB1.3
03106:  MOVLW  01
03108:  MOVLB  C
0310A:  IORWF  x25,W
0310C:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B11;
0310E:  BCF    FD8.0
03110:  RLCF   27,W
03112:  MOVWF  x25
03114:  MOVLW  00
03116:  MOVLB  B
03118:  BTFSC  xB1.2
0311A:  MOVLW  01
0311C:  MOVLB  C
0311E:  IORWF  x25,W
03120:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B10;
03122:  BCF    FD8.0
03124:  RLCF   27,W
03126:  MOVWF  x25
03128:  MOVLW  00
0312A:  MOVLB  B
0312C:  BTFSC  xB1.1
0312E:  MOVLW  01
03130:  MOVLB  C
03132:  IORWF  x25,W
03134:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B9;
03136:  BCF    FD8.0
03138:  RLCF   27,W
0313A:  MOVWF  x25
0313C:  MOVLW  00
0313E:  MOVLB  B
03140:  BTFSC  xB1.0
03142:  MOVLW  01
03144:  MOVLB  C
03146:  IORWF  x25,W
03148:  MOVWF  27
....................       
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
0314A:  MOVLW  00
0314C:  MOVLB  B
0314E:  BTFSC  xAA.7
03150:  MOVLW  01
03152:  IORWF  1E,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
03154:  BCF    FD8.0
03156:  RLCF   1E,W
03158:  MOVLB  C
0315A:  MOVWF  x25
0315C:  MOVLW  00
0315E:  MOVLB  B
03160:  BTFSC  xAA.6
03162:  MOVLW  01
03164:  MOVLB  C
03166:  IORWF  x25,W
03168:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
0316A:  BCF    FD8.0
0316C:  RLCF   1E,W
0316E:  MOVWF  x25
03170:  MOVLW  00
03172:  MOVLB  B
03174:  BTFSC  xAA.5
03176:  MOVLW  01
03178:  MOVLB  C
0317A:  IORWF  x25,W
0317C:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
0317E:  BCF    FD8.0
03180:  RLCF   1E,W
03182:  MOVWF  x25
03184:  MOVLW  00
03186:  MOVLB  B
03188:  BTFSC  xAA.4
0318A:  MOVLW  01
0318C:  MOVLB  C
0318E:  IORWF  x25,W
03190:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
03192:  BCF    FD8.0
03194:  RLCF   1E,W
03196:  MOVWF  x25
03198:  MOVLW  00
0319A:  MOVLB  B
0319C:  BTFSC  xAA.3
0319E:  MOVLW  01
031A0:  MOVLB  C
031A2:  IORWF  x25,W
031A4:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
031A6:  BCF    FD8.0
031A8:  RLCF   1E,W
031AA:  MOVWF  x25
031AC:  MOVLW  00
031AE:  MOVLB  B
031B0:  BTFSC  xAA.2
031B2:  MOVLW  01
031B4:  MOVLB  C
031B6:  IORWF  x25,W
031B8:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
031BA:  BCF    FD8.0
031BC:  RLCF   1E,W
031BE:  MOVWF  x25
031C0:  MOVLW  00
031C2:  MOVLB  B
031C4:  BTFSC  xAA.1
031C6:  MOVLW  01
031C8:  MOVLB  C
031CA:  IORWF  x25,W
031CC:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
031CE:  BCF    FD8.0
031D0:  RLCF   1E,W
031D2:  MOVWF  x25
031D4:  MOVLW  00
031D6:  MOVLB  B
031D8:  BTFSC  xAA.0
031DA:  MOVLW  01
031DC:  MOVLB  C
031DE:  IORWF  x25,W
031E0:  MOVWF  1E
....................    
....................    Input9_16_Send = Input9_16_Send | In.B16;
031E2:  MOVLW  00
031E4:  MOVLB  B
031E6:  BTFSC  xAB.7
031E8:  MOVLW  01
031EA:  IORWF  1F,F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B15;
031EC:  BCF    FD8.0
031EE:  RLCF   1F,W
031F0:  MOVLB  C
031F2:  MOVWF  x25
031F4:  MOVLW  00
031F6:  MOVLB  B
031F8:  BTFSC  xAB.6
031FA:  MOVLW  01
031FC:  MOVLB  C
031FE:  IORWF  x25,W
03200:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B14;
03202:  BCF    FD8.0
03204:  RLCF   1F,W
03206:  MOVWF  x25
03208:  MOVLW  00
0320A:  MOVLB  B
0320C:  BTFSC  xAB.5
0320E:  MOVLW  01
03210:  MOVLB  C
03212:  IORWF  x25,W
03214:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B13;
03216:  BCF    FD8.0
03218:  RLCF   1F,W
0321A:  MOVWF  x25
0321C:  MOVLW  00
0321E:  MOVLB  B
03220:  BTFSC  xAB.4
03222:  MOVLW  01
03224:  MOVLB  C
03226:  IORWF  x25,W
03228:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B12;
0322A:  BCF    FD8.0
0322C:  RLCF   1F,W
0322E:  MOVWF  x25
03230:  MOVLW  00
03232:  MOVLB  B
03234:  BTFSC  xAB.3
03236:  MOVLW  01
03238:  MOVLB  C
0323A:  IORWF  x25,W
0323C:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B11;
0323E:  BCF    FD8.0
03240:  RLCF   1F,W
03242:  MOVWF  x25
03244:  MOVLW  00
03246:  MOVLB  B
03248:  BTFSC  xAB.2
0324A:  MOVLW  01
0324C:  MOVLB  C
0324E:  IORWF  x25,W
03250:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B10;
03252:  BCF    FD8.0
03254:  RLCF   1F,W
03256:  MOVWF  x25
03258:  MOVLW  00
0325A:  MOVLB  B
0325C:  BTFSC  xAB.1
0325E:  MOVLW  01
03260:  MOVLB  C
03262:  IORWF  x25,W
03264:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B9;
03266:  BCF    FD8.0
03268:  RLCF   1F,W
0326A:  MOVWF  x25
0326C:  MOVLW  00
0326E:  MOVLB  B
03270:  BTFSC  xAB.0
03272:  MOVLW  01
03274:  MOVLB  C
03276:  IORWF  x25,W
03278:  MOVWF  1F
0327A:  MOVLB  0
0327C:  GOTO   3FC8 (RETURN)
....................    
....................    
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void checkCommand(void)
.................... {
....................    restart_wdt();
*
002DA:  CLRWDT
.................... 
....................    //if(sequence == end_sq && Address == SBUF)     //check Address
....................    if(sequence == end_sq )     //check Address
002DC:  MOVF   x6F,W
002DE:  SUBWF  x78,W
002E0:  BNZ   0308
....................    {
....................      RxD_DataLen = 0x00 ;
002E2:  CLRF   x7A
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002E4:  MOVLW  7A
002E6:  ADDWF  x7A,W
002E8:  MOVWF  FE9
002EA:  MOVLW  01
002EC:  MOVWF  FEA
002EE:  BTFSC  FD8.0
002F0:  INCF   FEA,F
002F2:  MOVFF  2E,FEF
....................      restart_wdt();
002F6:  CLRWDT
....................      RxD_DataLen ++ ;
002F8:  INCF   x7A,F
....................      sequence = addr_sq;
002FA:  MOVLW  10
002FC:  MOVWF  x78
....................      T_timeout = 0x14; //200ms
002FE:  MOVLW  14
00300:  MOVLB  9
00302:  MOVWF  x85
....................    }
00304:  BRA    0564
00306:  MOVLB  0
....................    else if(sequence == addr_sq)
00308:  MOVF   x78,W
0030A:  SUBLW  10
0030C:  BNZ   03C6
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
0030E:  MOVLW  7A
00310:  ADDWF  x7A,W
00312:  MOVWF  FE9
00314:  MOVLW  01
00316:  MOVWF  FEA
00318:  BTFSC  FD8.0
0031A:  INCF   FEA,F
0031C:  MOVFF  2E,FEF
....................       restart_wdt();
00320:  CLRWDT
....................       RxD_DataLen ++ ;
00322:  INCF   x7A,F
.................... 
....................        if(RxD_Buff[RxD_DataLen - 1] < 0x17)   //Function Code Must be less than 0x20
00324:  MOVLW  01
00326:  SUBWF  x7A,W
00328:  ADDLW  7A
0032A:  MOVWF  FE9
0032C:  MOVLW  01
0032E:  MOVWF  FEA
00330:  BTFSC  FD8.0
00332:  INCF   FEA,F
00334:  MOVF   FEF,W
00336:  SUBLW  16
00338:  BNC   0348
....................        {
....................            sequence = code_sq;
0033A:  MOVFF  70,78
....................            T_timeout = 0x14; //200ms
0033E:  MOVLW  14
00340:  MOVLB  9
00342:  MOVWF  x85
....................        }
00344:  BRA    03C2
00346:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x20)   /////Read Setting//////
00348:  MOVLW  01
0034A:  SUBWF  x7A,W
0034C:  ADDLW  7A
0034E:  MOVWF  FE9
00350:  MOVLW  01
00352:  MOVWF  FEA
00354:  BTFSC  FD8.0
00356:  INCF   FEA,F
00358:  MOVF   FEF,W
0035A:  SUBLW  20
0035C:  BNZ   036C
....................        {
....................           sequence = ubyte_lo_sq;
0035E:  MOVFF  73,78
....................           T_timeout = 0x14; //200ms
00362:  MOVLW  14
00364:  MOVLB  9
00366:  MOVWF  x85
....................        }
00368:  BRA    03C2
0036A:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x21)   /////Write setting/////
0036C:  MOVLW  01
0036E:  SUBWF  x7A,W
00370:  ADDLW  7A
00372:  MOVWF  FE9
00374:  MOVLW  01
00376:  MOVWF  FEA
00378:  BTFSC  FD8.0
0037A:  INCF   FEA,F
0037C:  MOVF   FEF,W
0037E:  SUBLW  21
00380:  BNZ   0390
....................        {
....................           sequence = byte_count_sq ;
00382:  MOVFF  76,78
....................           T_timeout = 0x14; //200ms
00386:  MOVLW  14
00388:  MOVLB  9
0038A:  MOVWF  x85
....................        }
0038C:  BRA    03C2
0038E:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x22)   /////SMS setting/////
00390:  MOVLW  01
00392:  SUBWF  x7A,W
00394:  ADDLW  7A
00396:  MOVWF  FE9
00398:  MOVLW  01
0039A:  MOVWF  FEA
0039C:  BTFSC  FD8.0
0039E:  INCF   FEA,F
003A0:  MOVF   FEF,W
003A2:  SUBLW  22
003A4:  BNZ   03B4
....................        {
....................           sequence = second_numofdata ;
003A6:  MOVFF  75,78
....................           T_timeout = 0x14; //200ms
003AA:  MOVLW  14
003AC:  MOVLB  9
003AE:  MOVWF  x85
....................        }
003B0:  BRA    03C2
003B2:  MOVLB  0
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
003B4:  CLRF   x7A
....................           sequence = end_sq;
003B6:  MOVFF  6F,78
....................           T_timeout = 0x00;
003BA:  MOVLB  9
003BC:  CLRF   x85
....................           output_bit(P485ctrl,0);
003BE:  BCF    F8A.3
003C0:  BCF    F93.3
....................        }
....................    }
003C2:  BRA    0564
003C4:  MOVLB  0
....................    else if(sequence == second_numofdata)
003C6:  MOVF   x75,W
003C8:  SUBWF  x78,W
003CA:  BNZ   03F0
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
003CC:  MOVLW  7A
003CE:  ADDWF  x7A,W
003D0:  MOVWF  FE9
003D2:  MOVLW  01
003D4:  MOVWF  FEA
003D6:  BTFSC  FD8.0
003D8:  INCF   FEA,F
003DA:  MOVFF  2E,FEF
....................       restart_wdt();
003DE:  CLRWDT
....................       RxD_DataLen ++ ;
003E0:  INCF   x7A,F
....................       sequence = byte_count_sq;
003E2:  MOVFF  76,78
....................       T_timeout = 0x14; //200ms
003E6:  MOVLW  14
003E8:  MOVLB  9
003EA:  MOVWF  x85
.................... 
....................    }
003EC:  BRA    0564
003EE:  MOVLB  0
....................    else if(sequence == byte_count_sq)
003F0:  MOVF   x76,W
003F2:  SUBWF  x78,W
003F4:  BNZ   0430
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
003F6:  MOVLW  7A
003F8:  ADDWF  x7A,W
003FA:  MOVWF  FE9
003FC:  MOVLW  01
003FE:  MOVWF  FEA
00400:  BTFSC  FD8.0
00402:  INCF   FEA,F
00404:  MOVFF  2E,FEF
....................       restart_wdt();
00408:  CLRWDT
....................       RxD_DataLen ++ ;
0040A:  INCF   x7A,F
....................       index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
0040C:  MOVLW  01
0040E:  SUBWF  x7A,W
00410:  ADDLW  7A
00412:  MOVWF  FE9
00414:  MOVLW  01
00416:  MOVWF  FEA
00418:  BTFSC  FD8.0
0041A:  INCF   FEA,F
0041C:  MOVLB  9
0041E:  CLRF   x87
00420:  MOVFF  FEF,986
....................       T_timeout = 0x14; //200ms
00424:  MOVLW  14
00426:  MOVWF  x85
....................       sequence = data_sq ;
00428:  MOVFF  77,78
....................    }
0042C:  BRA    0564
0042E:  MOVLB  0
....................    else if(sequence == data_sq)
00430:  MOVF   x77,W
00432:  SUBWF  x78,W
00434:  BNZ   046A
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
00436:  MOVLW  7A
00438:  ADDWF  x7A,W
0043A:  MOVWF  FE9
0043C:  MOVLW  01
0043E:  MOVWF  FEA
00440:  BTFSC  FD8.0
00442:  INCF   FEA,F
00444:  MOVFF  2E,FEF
....................       restart_wdt();
00448:  CLRWDT
....................       RxD_DataLen ++ ;
0044A:  INCF   x7A,F
....................       index -- ;                     //Data Byte Count
0044C:  MOVLB  9
0044E:  MOVF   x86,W
00450:  BTFSC  FD8.2
00452:  DECF   x87,F
00454:  DECF   x86,F
....................       if(index == 0x00)
00456:  MOVF   x86,F
00458:  BNZ   0462
0045A:  MOVF   x87,F
0045C:  BNZ   0462
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
0045E:  MOVFF  73,78
....................       }
....................       T_timeout = 0x14; //200ms
00462:  MOVLW  14
00464:  MOVWF  x85
....................    }
00466:  BRA    0564
00468:  MOVLB  0
....................    else if(sequence == code_sq)
0046A:  MOVF   x70,W
0046C:  SUBWF  x78,W
0046E:  BNZ   0494
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
00470:  MOVLW  7A
00472:  ADDWF  x7A,W
00474:  MOVWF  FE9
00476:  MOVLW  01
00478:  MOVWF  FEA
0047A:  BTFSC  FD8.0
0047C:  INCF   FEA,F
0047E:  MOVFF  2E,FEF
....................       restart_wdt();
00482:  CLRWDT
....................       RxD_DataLen ++ ;
00484:  INCF   x7A,F
....................       sequence = start_addr_hi_sq;
00486:  MOVFF  71,78
....................       T_timeout = 0x14; //200ms
0048A:  MOVLW  14
0048C:  MOVLB  9
0048E:  MOVWF  x85
....................    }
00490:  BRA    0564
00492:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
00494:  MOVF   x71,W
00496:  SUBWF  x78,W
00498:  BNZ   04BE
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
0049A:  MOVLW  7A
0049C:  ADDWF  x7A,W
0049E:  MOVWF  FE9
004A0:  MOVLW  01
004A2:  MOVWF  FEA
004A4:  BTFSC  FD8.0
004A6:  INCF   FEA,F
004A8:  MOVFF  2E,FEF
....................       restart_wdt();
004AC:  CLRWDT
....................       RxD_DataLen ++ ;
004AE:  INCF   x7A,F
....................       sequence = start_addr_lo_sq;
004B0:  MOVFF  72,78
....................       T_timeout = 0x14; //200ms
004B4:  MOVLW  14
004B6:  MOVLB  9
004B8:  MOVWF  x85
....................    }
004BA:  BRA    0564
004BC:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
004BE:  MOVF   x72,W
004C0:  SUBWF  x78,W
004C2:  BNZ   04E8
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
004C4:  MOVLW  7A
004C6:  ADDWF  x7A,W
004C8:  MOVWF  FE9
004CA:  MOVLW  01
004CC:  MOVWF  FEA
004CE:  BTFSC  FD8.0
004D0:  INCF   FEA,F
004D2:  MOVFF  2E,FEF
....................       restart_wdt();
004D6:  CLRWDT
....................       RxD_DataLen ++ ;
004D8:  INCF   x7A,F
....................       sequence = ubyte_hi_sq;
004DA:  MOVLW  15
004DC:  MOVWF  x78
....................       T_timeout = 0x14; //200ms
004DE:  MOVLW  14
004E0:  MOVLB  9
004E2:  MOVWF  x85
....................    }
004E4:  BRA    0564
004E6:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
004E8:  MOVF   x78,W
004EA:  SUBLW  15
004EC:  BNZ   0512
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
004EE:  MOVLW  7A
004F0:  ADDWF  x7A,W
004F2:  MOVWF  FE9
004F4:  MOVLW  01
004F6:  MOVWF  FEA
004F8:  BTFSC  FD8.0
004FA:  INCF   FEA,F
004FC:  MOVFF  2E,FEF
....................       restart_wdt();
00500:  CLRWDT
....................       RxD_DataLen ++ ;
00502:  INCF   x7A,F
....................       sequence = ubyte_lo_sq;
00504:  MOVFF  73,78
....................       T_timeout = 0x14; //200ms
00508:  MOVLW  14
0050A:  MOVLB  9
0050C:  MOVWF  x85
....................    }
0050E:  BRA    0564
00510:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
00512:  MOVF   x73,W
00514:  SUBWF  x78,W
00516:  BNZ   053C
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
00518:  MOVLW  7A
0051A:  ADDWF  x7A,W
0051C:  MOVWF  FE9
0051E:  MOVLW  01
00520:  MOVWF  FEA
00522:  BTFSC  FD8.0
00524:  INCF   FEA,F
00526:  MOVFF  2E,FEF
....................       restart_wdt();
0052A:  CLRWDT
....................       RxD_DataLen ++ ;
0052C:  INCF   x7A,F
....................       sequence = crc_hi_sq;
0052E:  MOVFF  74,78
....................       T_timeout = 0x14; //200ms
00532:  MOVLW  14
00534:  MOVLB  9
00536:  MOVWF  x85
....................    }
00538:  BRA    0564
0053A:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
0053C:  MOVF   x74,W
0053E:  SUBWF  x78,W
00540:  BNZ   0564
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
00542:  MOVLW  7A
00544:  ADDWF  x7A,W
00546:  MOVWF  FE9
00548:  MOVLW  01
0054A:  MOVWF  FEA
0054C:  BTFSC  FD8.0
0054E:  INCF   FEA,F
00550:  MOVFF  2E,FEF
....................       restart_wdt();
00554:  CLRWDT
....................       sequence = end_sq;
00556:  MOVFF  6F,78
....................       T_timeout = 0x00;
0055A:  MOVLB  9
0055C:  CLRF   x85
....................       //T_timeout = 0x14; //200ms
....................       recieve_completed = 1 ;            //Recieve completed then translate
0055E:  BSF    30.5
....................       output_bit(P485ctrl,0);
00560:  BCF    F8A.3
00562:  BCF    F93.3
00564:  MOVLB  0
....................    }
00566:  GOTO   0574 (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
03690:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
03692:  MOVLW  01
03694:  SUBWF  x7A,W
03696:  MOVLB  C
03698:  MOVWF  x24
0369A:  MOVLW  01
0369C:  MOVWF  x26
0369E:  MOVLW  7A
036A0:  MOVWF  x25
036A2:  MOVFF  C24,C27
036A6:  MOVLB  0
036A8:  RCALL  2ED4
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
036AA:  MOVLW  01
036AC:  SUBWF  x7A,W
036AE:  ADDLW  7A
036B0:  MOVWF  FE9
036B2:  MOVLW  01
036B4:  MOVWF  FEA
036B6:  BTFSC  FD8.0
036B8:  INCF   FEA,F
036BA:  MOVF   FEF,W
036BC:  MOVLB  5
036BE:  SUBWF  x7B,W
036C0:  BTFSS  FD8.2
036C2:  GOTO   6136
036C6:  MOVLW  7A
036C8:  MOVLB  0
036CA:  ADDWF  x7A,W
036CC:  MOVWF  FE9
036CE:  MOVLW  01
036D0:  MOVWF  FEA
036D2:  BTFSC  FD8.0
036D4:  INCF   FEA,F
036D6:  MOVF   FEF,W
036D8:  MOVLB  5
036DA:  SUBWF  x7A,W
036DC:  BTFSS  FD8.2
036DE:  GOTO   6136
....................    {
....................    
....................          
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
036E2:  MOVLB  1
036E4:  MOVF   x7A,W
036E6:  SUBLW  AA
036E8:  BTFSS  FD8.2
036EA:  BRA    3B84
036EC:  MOVF   x7B,W
036EE:  SUBLW  20
036F0:  BTFSS  FD8.2
036F2:  BRA    3B84
....................       {
....................          TxD_Buff[0] = Address ;         //Address
036F4:  MOVFF  79,7B
....................          TxD_Buff[1] = 0x20 ;            //function code
036F8:  MOVLW  20
036FA:  MOVLB  0
036FC:  MOVWF  x7C
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
036FE:  MOVLW  1C
03700:  MOVWF  x7D
....................          
....................          /////////////////////////////////////////////
....................          InputType1_8 = 0x00;
03702:  CLRF   3A
....................          InputType1_8 = InputType1_8 | FaultNCNO[8];
03704:  MOVLW  00
03706:  MOVLB  C
03708:  BTFSC  x13.0
0370A:  MOVLW  01
0370C:  IORWF  3A,F
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[7];
0370E:  BCF    FD8.0
03710:  RLCF   3A,W
03712:  MOVWF  x25
03714:  MOVLW  00
03716:  BTFSC  x12.7
03718:  MOVLW  01
0371A:  IORWF  x25,W
0371C:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[6];
0371E:  BCF    FD8.0
03720:  RLCF   3A,W
03722:  MOVWF  x25
03724:  MOVLW  00
03726:  BTFSC  x12.6
03728:  MOVLW  01
0372A:  IORWF  x25,W
0372C:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[5];
0372E:  BCF    FD8.0
03730:  RLCF   3A,W
03732:  MOVWF  x25
03734:  MOVLW  00
03736:  BTFSC  x12.5
03738:  MOVLW  01
0373A:  IORWF  x25,W
0373C:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[4];
0373E:  BCF    FD8.0
03740:  RLCF   3A,W
03742:  MOVWF  x25
03744:  MOVLW  00
03746:  BTFSC  x12.4
03748:  MOVLW  01
0374A:  IORWF  x25,W
0374C:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[3];
0374E:  BCF    FD8.0
03750:  RLCF   3A,W
03752:  MOVWF  x25
03754:  MOVLW  00
03756:  BTFSC  x12.3
03758:  MOVLW  01
0375A:  IORWF  x25,W
0375C:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[2];
0375E:  BCF    FD8.0
03760:  RLCF   3A,W
03762:  MOVWF  x25
03764:  MOVLW  00
03766:  BTFSC  x12.2
03768:  MOVLW  01
0376A:  IORWF  x25,W
0376C:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[1];
0376E:  BCF    FD8.0
03770:  RLCF   3A,W
03772:  MOVWF  x25
03774:  MOVLW  00
03776:  BTFSC  x12.1
03778:  MOVLW  01
0377A:  IORWF  x25,W
0377C:  MOVWF  3A
.................... 
....................          InputType9_16 = 0x00;
0377E:  CLRF   3B
....................          InputType9_16 = InputType9_16 | FaultNCNO[16];
03780:  MOVLW  00
03782:  BTFSC  x14.0
03784:  MOVLW  01
03786:  IORWF  3B,F
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[15];
03788:  BCF    FD8.0
0378A:  RLCF   3B,W
0378C:  MOVWF  x25
0378E:  MOVLW  00
03790:  BTFSC  x13.7
03792:  MOVLW  01
03794:  IORWF  x25,W
03796:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[14];
03798:  BCF    FD8.0
0379A:  RLCF   3B,W
0379C:  MOVWF  x25
0379E:  MOVLW  00
037A0:  BTFSC  x13.6
037A2:  MOVLW  01
037A4:  IORWF  x25,W
037A6:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[13];
037A8:  BCF    FD8.0
037AA:  RLCF   3B,W
037AC:  MOVWF  x25
037AE:  MOVLW  00
037B0:  BTFSC  x13.5
037B2:  MOVLW  01
037B4:  IORWF  x25,W
037B6:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[12];
037B8:  BCF    FD8.0
037BA:  RLCF   3B,W
037BC:  MOVWF  x25
037BE:  MOVLW  00
037C0:  BTFSC  x13.4
037C2:  MOVLW  01
037C4:  IORWF  x25,W
037C6:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[11];
037C8:  BCF    FD8.0
037CA:  RLCF   3B,W
037CC:  MOVWF  x25
037CE:  MOVLW  00
037D0:  BTFSC  x13.3
037D2:  MOVLW  01
037D4:  IORWF  x25,W
037D6:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[10];
037D8:  BCF    FD8.0
037DA:  RLCF   3B,W
037DC:  MOVWF  x25
037DE:  MOVLW  00
037E0:  BTFSC  x13.2
037E2:  MOVLW  01
037E4:  IORWF  x25,W
037E6:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[9];
037E8:  BCF    FD8.0
037EA:  RLCF   3B,W
037EC:  MOVWF  x25
037EE:  MOVLW  00
037F0:  BTFSC  x13.1
037F2:  MOVLW  01
037F4:  IORWF  x25,W
037F6:  MOVWF  3B
....................          
....................          FaultType17_24 = 0x00;
037F8:  CLRF   3F
....................          FaultType17_24 = FaultType17_24 | FaultNCNO[24];
037FA:  MOVLW  00
037FC:  BTFSC  x15.0
037FE:  MOVLW  01
03800:  IORWF  3F,F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[23];
03802:  BCF    FD8.0
03804:  RLCF   3F,W
03806:  MOVWF  x25
03808:  MOVLW  00
0380A:  BTFSC  x14.7
0380C:  MOVLW  01
0380E:  IORWF  x25,W
03810:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[22];
03812:  BCF    FD8.0
03814:  RLCF   3F,W
03816:  MOVWF  x25
03818:  MOVLW  00
0381A:  BTFSC  x14.6
0381C:  MOVLW  01
0381E:  IORWF  x25,W
03820:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[21];
03822:  BCF    FD8.0
03824:  RLCF   3F,W
03826:  MOVWF  x25
03828:  MOVLW  00
0382A:  BTFSC  x14.5
0382C:  MOVLW  01
0382E:  IORWF  x25,W
03830:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[20];
03832:  BCF    FD8.0
03834:  RLCF   3F,W
03836:  MOVWF  x25
03838:  MOVLW  00
0383A:  BTFSC  x14.4
0383C:  MOVLW  01
0383E:  IORWF  x25,W
03840:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[19];
03842:  BCF    FD8.0
03844:  RLCF   3F,W
03846:  MOVWF  x25
03848:  MOVLW  00
0384A:  BTFSC  x14.3
0384C:  MOVLW  01
0384E:  IORWF  x25,W
03850:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[18];
03852:  BCF    FD8.0
03854:  RLCF   3F,W
03856:  MOVWF  x25
03858:  MOVLW  00
0385A:  BTFSC  x14.2
0385C:  MOVLW  01
0385E:  IORWF  x25,W
03860:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[17];
03862:  BCF    FD8.0
03864:  RLCF   3F,W
03866:  MOVWF  x25
03868:  MOVLW  00
0386A:  BTFSC  x14.1
0386C:  MOVLW  01
0386E:  IORWF  x25,W
03870:  MOVWF  3F
....................          
....................          ///////////////////////////////////////////
....................          
....................          TxD_Buff[3] = InputType1_8 ;    //1
03872:  MOVFF  3A,7E
....................          TxD_Buff[4] = InputType9_16 ;  //2
03876:  MOVFF  3B,7F
....................          TxD_Buff[5] = InputType17_24 ;//3
0387A:  MOVFF  3C,80
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
0387E:  MOVFF  3D,81
....................          TxD_Buff[7] = FaultType9_16 ; //5
03882:  MOVFF  3E,82
....................          TxD_Buff[8] = FaultType17_24 ;   //6
03886:  MOVFF  3F,83
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
0388A:  MOVFF  40,84
....................          TxD_Buff[10] = OutputType9_16 ;  //8
0388E:  MOVFF  41,85
....................          TxD_Buff[11] = OutputType17_24 ; //9
03892:  MOVFF  42,86
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
03896:  MOVFF  43,87
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
0389A:  MOVFF  44,88
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
0389E:  MOVFF  45,89
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
038A2:  MOVFF  46,8A
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
038A6:  MOVFF  47,8B
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
038AA:  MOVFF  48,8C
....................         
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
038AE:  MOVFF  FF2,C24
038B2:  BCF    FF2.7
038B4:  CLRF   FAA
038B6:  MOVLW  10
038B8:  MOVWF  FA9
038BA:  BCF    FA6.6
038BC:  BCF    FA6.7
038BE:  BSF    FA6.0
038C0:  MOVF   FA8,W
038C2:  BTFSC  x24.7
038C4:  BSF    FF2.7
038C6:  MOVLB  0
038C8:  MOVWF  x8D
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
038CA:  MOVFF  FF2,C24
038CE:  BCF    FF2.7
038D0:  CLRF   FAA
038D2:  MOVLW  11
038D4:  MOVWF  FA9
038D6:  BCF    FA6.6
038D8:  BCF    FA6.7
038DA:  BSF    FA6.0
038DC:  MOVF   FA8,W
038DE:  MOVLB  C
038E0:  BTFSC  x24.7
038E2:  BSF    FF2.7
038E4:  MOVLB  0
038E6:  MOVWF  x8E
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
038E8:  MOVFF  FF2,C24
038EC:  BCF    FF2.7
038EE:  CLRF   FAA
038F0:  MOVLW  12
038F2:  MOVWF  FA9
038F4:  BCF    FA6.6
038F6:  BCF    FA6.7
038F8:  BSF    FA6.0
038FA:  MOVF   FA8,W
038FC:  MOVLB  C
038FE:  BTFSC  x24.7
03900:  BSF    FF2.7
03902:  MOVLB  0
03904:  MOVWF  x8F
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
03906:  MOVFF  FF2,C24
0390A:  BCF    FF2.7
0390C:  CLRF   FAA
0390E:  MOVLW  13
03910:  MOVWF  FA9
03912:  BCF    FA6.6
03914:  BCF    FA6.7
03916:  BSF    FA6.0
03918:  MOVF   FA8,W
0391A:  MOVLB  C
0391C:  BTFSC  x24.7
0391E:  BSF    FF2.7
03920:  MOVLB  0
03922:  MOVWF  x90
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
03924:  MOVFF  FF2,C24
03928:  BCF    FF2.7
0392A:  CLRF   FAA
0392C:  MOVLW  14
0392E:  MOVWF  FA9
03930:  BCF    FA6.6
03932:  BCF    FA6.7
03934:  BSF    FA6.0
03936:  MOVF   FA8,W
03938:  MOVLB  C
0393A:  BTFSC  x24.7
0393C:  BSF    FF2.7
0393E:  MOVLB  0
03940:  MOVWF  x91
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
03942:  MOVFF  FF2,C24
03946:  BCF    FF2.7
03948:  CLRF   FAA
0394A:  MOVLW  15
0394C:  MOVWF  FA9
0394E:  BCF    FA6.6
03950:  BCF    FA6.7
03952:  BSF    FA6.0
03954:  MOVF   FA8,W
03956:  MOVLB  C
03958:  BTFSC  x24.7
0395A:  BSF    FF2.7
0395C:  MOVLB  0
0395E:  MOVWF  x92
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
03960:  MOVFF  FF2,C24
03964:  BCF    FF2.7
03966:  CLRF   FAA
03968:  MOVLW  16
0396A:  MOVWF  FA9
0396C:  BCF    FA6.6
0396E:  BCF    FA6.7
03970:  BSF    FA6.0
03972:  MOVF   FA8,W
03974:  MOVLB  C
03976:  BTFSC  x24.7
03978:  BSF    FF2.7
0397A:  MOVLB  0
0397C:  MOVWF  x93
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
0397E:  MOVFF  FF2,C24
03982:  BCF    FF2.7
03984:  CLRF   FAA
03986:  MOVLW  17
03988:  MOVWF  FA9
0398A:  BCF    FA6.6
0398C:  BCF    FA6.7
0398E:  BSF    FA6.0
03990:  MOVF   FA8,W
03992:  MOVLB  C
03994:  BTFSC  x24.7
03996:  BSF    FF2.7
03998:  MOVLB  0
0399A:  MOVWF  x94
....................        
....................          ///////////////////////////////////////jj------------------
....................          
....................          /*
....................          Red1_8 = Red1_8 | RED_Colour.B8;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B7;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B6;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B5;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B4;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B3;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B2;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B1;
....................          
....................          Red9_10 = Red9_10 | RED_Colour.B10;
....................          Red9_10 = (Red9_10 << 1) | RED_Colour.B9;
....................          
....................          Red11_18 = Red11_18 | RED_Colour.B16;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B15;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B14;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B13;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B12;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B11;
....................          //Red11_18 = (Red11_18 << 1) | RED_Colour.B2;
....................          //Red11_18 = (Red11_18 << 1) | RED_Colour.B1;
....................         
....................          Green1_8 = Green1_8 | GREEN_Colour.B8;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B7;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B6;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B5;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B4;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B3;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B2;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B1;
....................          
....................          Green9_10 = Green9_10 | GREEN_Colour.B10;
....................          Green9_10 = (Green9_10 << 1) | GREEN_Colour.B9;
....................          
....................          Green11_18 = Green11_18 | GREEN_Colour.B16;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B15;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B14;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B13;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B12;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B11;
....................          
....................           //TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
....................           TxD_Buff[18] = Red1_8;//Red1_8;    //16
....................           
....................           TxD_Buff[19] = Red9_10;//Red9_10;      //17
....................           TxD_Buff[20] = Red11_18;//Red11_18;     //18
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
....................           
....................           //TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
....................           TxD_Buff[22] = Green1_8;//Green1_8;     //20
....................           
....................           TxD_Buff[23] = Green9_10;//Green9_10;    //21
....................           TxD_Buff[24] = Green11_18;//Green11_18;      //22
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
....................           */
....................           ///////////////////////////////////////jj------------------
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
0399C:  MOVFF  6A,95
....................          TxD_Buff[27] = AutoAckTime ;        //25
039A0:  MOVFF  6B,96
....................          TxD_Buff[28] = FlashingRate ;       //26
039A4:  MOVFF  6C,97
....................          TxD_Buff[29] = NoOfPoint ;          //27
039A8:  MOVFF  6D,98
....................          TxD_Buff[30] = FaultDelayTime ;    //28
039AC:  MOVLW  E8
039AE:  MOVWF  x99
....................          TxD_Buff[31] = Address ;            //29
039B0:  MOVFF  79,9A
.................... 
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
039B4:  MOVFF  BEA,9B
....................          TxD_Buff[33] = FaultDelayTime[2] ;
039B8:  MOVFF  BEC,9C
....................          TxD_Buff[34] = FaultDelayTime[3] ;
039BC:  MOVFF  BEE,9D
....................          TxD_Buff[35] = FaultDelayTime[4] ;
039C0:  MOVFF  BF0,9E
....................          TxD_Buff[36] = FaultDelayTime[5] ;
039C4:  MOVFF  BF2,9F
....................          TxD_Buff[37] = FaultDelayTime[6] ;
039C8:  MOVFF  BF4,A0
....................          TxD_Buff[38] = FaultDelayTime[7] ;
039CC:  MOVFF  BF6,A1
....................          TxD_Buff[39] = FaultDelayTime[8] ;
039D0:  MOVFF  BF8,A2
....................          TxD_Buff[40] = FaultDelayTime[9] ;
039D4:  MOVFF  BFA,A3
....................          TxD_Buff[41] = FaultDelayTime[10] ;
039D8:  MOVFF  BFC,A4
....................          TxD_Buff[42] = FaultDelayTime[11] ;
039DC:  MOVFF  BFE,A5
....................          TxD_Buff[43] = FaultDelayTime[12] ;
039E0:  MOVFF  C00,A6
....................          TxD_Buff[44] = FaultDelayTime[13] ;
039E4:  MOVFF  C02,A7
....................          TxD_Buff[45] = FaultDelayTime[14] ;
039E8:  MOVFF  C04,A8
....................          TxD_Buff[46] = FaultDelayTime[15] ;
039EC:  MOVFF  C06,A9
....................          TxD_Buff[47] = FaultDelayTime[16] ;
039F0:  MOVFF  C08,AA
....................          TxD_Buff[48] = FaultDelayTime[17] ;
039F4:  MOVFF  C0A,AB
....................          TxD_Buff[49] = FaultDelayTime[18] ;
039F8:  MOVFF  C0C,AC
....................          TxD_Buff[50] = FaultDelayTime[19] ;
039FC:  MOVFF  C0E,AD
....................          TxD_Buff[51] = FaultDelayTime[20] ;
03A00:  MOVFF  C10,AE
....................          
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
03A04:  MOVLB  C
03A06:  CLRF   x26
03A08:  MOVLW  7B
03A0A:  MOVWF  x25
03A0C:  MOVLW  34
03A0E:  MOVWF  x27
03A10:  MOVLB  0
03A12:  CALL   2ED4
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
03A16:  MOVFF  57B,AF
....................          TxD_Buff[53] = CRC_Lo ;
03A1A:  MOVFF  57A,B0
.................... 
....................          output_bit(P485ctrl,1);
03A1E:  BSF    F8A.3
03A20:  BCF    F93.3
....................          delay_ms(10);
03A22:  MOVLW  0A
03A24:  MOVLB  C
03A26:  MOVWF  x24
03A28:  MOVLB  0
03A2A:  CALL   0936
.................... 
....................          putc(Txd_Buff[0]);
03A2E:  MOVF   x7B,W
03A30:  CALL   2F2A
....................          putc(Txd_Buff[1]);
03A34:  MOVF   x7C,W
03A36:  CALL   2F2A
....................          putc(Txd_Buff[2]);
03A3A:  MOVF   x7D,W
03A3C:  CALL   2F2A
....................          putc(Txd_Buff[3]);
03A40:  MOVF   x7E,W
03A42:  CALL   2F2A
....................          putc(Txd_Buff[4]);
03A46:  MOVF   x7F,W
03A48:  CALL   2F2A
....................          putc(Txd_Buff[5]);
03A4C:  MOVF   x80,W
03A4E:  CALL   2F2A
....................          putc(Txd_Buff[6]);
03A52:  MOVF   x81,W
03A54:  CALL   2F2A
....................          putc(Txd_Buff[7]);
03A58:  MOVF   x82,W
03A5A:  CALL   2F2A
....................          putc(Txd_Buff[8]);
03A5E:  MOVF   x83,W
03A60:  CALL   2F2A
....................          putc(Txd_Buff[9]);
03A64:  MOVF   x84,W
03A66:  CALL   2F2A
....................          putc(Txd_Buff[10]);
03A6A:  MOVF   x85,W
03A6C:  CALL   2F2A
....................          putc(Txd_Buff[11]);
03A70:  MOVF   x86,W
03A72:  CALL   2F2A
....................          putc(Txd_Buff[12]);
03A76:  MOVF   x87,W
03A78:  CALL   2F2A
....................          putc(Txd_Buff[13]);
03A7C:  MOVF   x88,W
03A7E:  CALL   2F2A
....................          putc(Txd_Buff[14]);
03A82:  MOVF   x89,W
03A84:  CALL   2F2A
....................          putc(Txd_Buff[15]);
03A88:  MOVF   x8A,W
03A8A:  CALL   2F2A
....................          putc(Txd_Buff[16]);
03A8E:  MOVF   x8B,W
03A90:  CALL   2F2A
....................          putc(Txd_Buff[17]);
03A94:  MOVF   x8C,W
03A96:  CALL   2F2A
....................          putc(Txd_Buff[18]);
03A9A:  MOVF   x8D,W
03A9C:  CALL   2F2A
....................          putc(Txd_Buff[19]);
03AA0:  MOVF   x8E,W
03AA2:  CALL   2F2A
....................          putc(Txd_Buff[20]);
03AA6:  MOVF   x8F,W
03AA8:  CALL   2F2A
....................          putc(Txd_Buff[21]);
03AAC:  MOVF   x90,W
03AAE:  CALL   2F2A
....................          putc(Txd_Buff[22]);
03AB2:  MOVF   x91,W
03AB4:  CALL   2F2A
....................          putc(Txd_Buff[23]);
03AB8:  MOVF   x92,W
03ABA:  CALL   2F2A
....................          putc(Txd_Buff[24]);
03ABE:  MOVF   x93,W
03AC0:  CALL   2F2A
....................          putc(Txd_Buff[25]);
03AC4:  MOVF   x94,W
03AC6:  CALL   2F2A
....................          putc(Txd_Buff[26]);
03ACA:  MOVF   x95,W
03ACC:  CALL   2F2A
....................          putc(Txd_Buff[27]);
03AD0:  MOVF   x96,W
03AD2:  CALL   2F2A
....................          putc(Txd_Buff[28]);
03AD6:  MOVF   x97,W
03AD8:  CALL   2F2A
....................          putc(Txd_Buff[29]);
03ADC:  MOVF   x98,W
03ADE:  CALL   2F2A
....................          putc(Txd_Buff[30]);
03AE2:  MOVF   x99,W
03AE4:  CALL   2F2A
....................          putc(Txd_Buff[31]);
03AE8:  MOVF   x9A,W
03AEA:  CALL   2F2A
....................          
....................          putc(Txd_Buff[32]);
03AEE:  MOVF   x9B,W
03AF0:  CALL   2F2A
....................          putc(Txd_Buff[33]);
03AF4:  MOVF   x9C,W
03AF6:  CALL   2F2A
....................          putc(Txd_Buff[34]);
03AFA:  MOVF   x9D,W
03AFC:  CALL   2F2A
....................          putc(Txd_Buff[35]);
03B00:  MOVF   x9E,W
03B02:  CALL   2F2A
....................          putc(Txd_Buff[36]);
03B06:  MOVF   x9F,W
03B08:  CALL   2F2A
....................          putc(Txd_Buff[37]);
03B0C:  MOVF   xA0,W
03B0E:  CALL   2F2A
....................          putc(Txd_Buff[38]);
03B12:  MOVF   xA1,W
03B14:  CALL   2F2A
....................          putc(Txd_Buff[39]);
03B18:  MOVF   xA2,W
03B1A:  CALL   2F2A
....................          putc(Txd_Buff[40]);
03B1E:  MOVF   xA3,W
03B20:  CALL   2F2A
....................          putc(Txd_Buff[41]);
03B24:  MOVF   xA4,W
03B26:  CALL   2F2A
....................          
....................          putc(Txd_Buff[42]);
03B2A:  MOVF   xA5,W
03B2C:  CALL   2F2A
....................          putc(Txd_Buff[43]);
03B30:  MOVF   xA6,W
03B32:  CALL   2F2A
....................          putc(Txd_Buff[44]);
03B36:  MOVF   xA7,W
03B38:  CALL   2F2A
....................          putc(Txd_Buff[45]);
03B3C:  MOVF   xA8,W
03B3E:  CALL   2F2A
....................          putc(Txd_Buff[46]);
03B42:  MOVF   xA9,W
03B44:  CALL   2F2A
....................          putc(Txd_Buff[47]);
03B48:  MOVF   xAA,W
03B4A:  CALL   2F2A
....................          putc(Txd_Buff[48]);
03B4E:  MOVF   xAB,W
03B50:  CALL   2F2A
....................          putc(Txd_Buff[49]);
03B54:  MOVF   xAC,W
03B56:  CALL   2F2A
....................          putc(Txd_Buff[50]);
03B5A:  MOVF   xAD,W
03B5C:  CALL   2F2A
....................          putc(Txd_Buff[51]);
03B60:  MOVF   xAE,W
03B62:  CALL   2F2A
....................          
....................          putc(Txd_Buff[52]);
03B66:  MOVF   xAF,W
03B68:  CALL   2F2A
....................          putc(Txd_Buff[53]);
03B6C:  MOVF   xB0,W
03B6E:  CALL   2F2A
....................        
....................          delay_ms(3);
03B72:  MOVLW  03
03B74:  MOVLB  C
03B76:  MOVWF  x24
03B78:  MOVLB  0
03B7A:  CALL   0936
....................          output_bit(P485ctrl,0);        
03B7E:  BCF    F8A.3
03B80:  BCF    F93.3
03B82:  MOVLB  1
....................       }
....................    
....................    ///////////////////////////////////////////////////////////////
....................       if(RxD_Buff[0] == Address)
03B84:  MOVLB  0
03B86:  MOVF   x79,W
03B88:  MOVLB  1
03B8A:  SUBWF  x7A,W
03B8C:  BTFSS  FD8.2
03B8E:  GOTO   612C
....................       {
....................       
....................          if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
03B92:  DECFSZ x7B,W
03B94:  BRA    3FBA
....................          {
....................                //Do Read Coil
....................                Start_Address = RxD_Buff[2] ;
03B96:  MOVLB  5
03B98:  CLRF   x7F
03B9A:  MOVFF  17C,57E
....................                Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
03B9E:  MOVFF  57E,57F
03BA2:  MOVLB  C
03BA4:  CLRF   x24
03BA6:  MOVF   x24,W
03BA8:  MOVLB  1
03BAA:  IORWF  x7D,W
03BAC:  MOVLB  5
03BAE:  MOVWF  x7E
03BB0:  MOVLB  5
....................                No_PointCount = RxD_Buff[4] ;
03BB2:  CLRF   x81
03BB4:  MOVFF  17E,580
....................                No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //No. of Point 16 bit
03BB8:  MOVFF  580,581
03BBC:  MOVLB  C
03BBE:  CLRF   x24
03BC0:  MOVF   x24,W
03BC2:  MOVLB  1
03BC4:  IORWF  x7F,W
03BC6:  MOVLB  5
03BC8:  MOVWF  x80
03BCA:  MOVLB  5
....................    
....................                if(Start_Address < 0x10 && (Start_Address + No_PointCount) < 0x11)  //Valid point 0-15
03BCC:  MOVF   x7F,F
03BCE:  BTFSS  FD8.2
03BD0:  BRA    3F48
03BD2:  MOVF   x7E,W
03BD4:  SUBLW  0F
03BD6:  BTFSS  FD8.0
03BD8:  BRA    3F48
03BDA:  MOVF   x80,W
03BDC:  ADDWF  x7E,W
03BDE:  MOVLB  C
03BE0:  MOVWF  x24
03BE2:  MOVLB  5
03BE4:  MOVF   x81,W
03BE6:  ADDWFC x7F,W
03BE8:  MOVLB  C
03BEA:  MOVWF  x25
03BEC:  MOVF   x25,F
03BEE:  BTFSC  FD8.2
03BF0:  BRA    3BF6
03BF2:  MOVLB  5
03BF4:  BRA    3F48
03BF6:  MOVF   x24,W
03BF8:  SUBLW  10
03BFA:  BTFSC  FD8.0
03BFC:  BRA    3C02
03BFE:  MOVLB  5
03C00:  BRA    3F48
....................                {
....................                   if(No_PointCount < 9) Data_ByteCount = 0x01 ;
03C02:  MOVLB  5
03C04:  MOVF   x81,F
03C06:  BNZ   3C14
03C08:  MOVF   x80,W
03C0A:  SUBLW  08
03C0C:  BNC   3C14
03C0E:  MOVLW  01
03C10:  MOVWF  x82
03C12:  BRA    3C38
....................                   else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
03C14:  MOVF   x81,F
03C16:  BNZ   3C24
03C18:  MOVF   x80,W
03C1A:  SUBLW  10
03C1C:  BNC   3C24
03C1E:  MOVLW  02
03C20:  MOVWF  x82
03C22:  BRA    3C38
....................                   else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
03C24:  MOVF   x81,F
03C26:  BNZ   3C34
03C28:  MOVF   x80,W
03C2A:  SUBLW  18
03C2C:  BNC   3C34
03C2E:  MOVLW  03
03C30:  MOVWF  x82
03C32:  BRA    3C38
....................                   else   Data_ByteCount = 0x01 ; //----Jack
03C34:  MOVLW  01
03C36:  MOVWF  x82
....................    
....................                   if(Data_ByteCount == 0x01)
03C38:  DECFSZ x82,W
03C3A:  BRA    3D80
....................                   {
....................    
....................                      if(Start_Address < 0x09)
03C3C:  MOVF   x7F,F
03C3E:  BNZ   3C5A
03C40:  MOVF   x7E,W
03C42:  SUBLW  08
03C44:  BNC   3C5A
....................                      {
....................                         //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                         //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                         //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                          Data_Buff[0] = Input1_8 >> Start_Address ;
03C46:  MOVFF  49,583
03C4A:  MOVF   x7E,W
03C4C:  MOVWF  01
03C4E:  BZ    3C58
03C50:  BCF    FD8.0
03C52:  RRCF   x83,F
03C54:  DECFSZ 01,F
03C56:  BRA    3C50
....................                          //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                          //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                      }
03C58:  BRA    3C8E
....................                      else if(Start_Address > 0x08 && Start_Address < 0x10)
03C5A:  MOVF   x7F,F
03C5C:  BNZ   3C64
03C5E:  MOVF   x7E,W
03C60:  SUBLW  08
03C62:  BC    3C8E
03C64:  MOVF   x7F,F
03C66:  BNZ   3C8E
03C68:  MOVF   x7E,W
03C6A:  SUBLW  0F
03C6C:  BNC   3C8E
....................                      {
....................                         //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                         Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
03C6E:  MOVLW  08
03C70:  SUBWF  x7E,W
03C72:  MOVWF  00
03C74:  MOVLW  00
03C76:  SUBWFB x7F,W
03C78:  MOVWF  03
03C7A:  MOVFF  00,01
03C7E:  MOVFF  4A,583
03C82:  MOVF   01,F
03C84:  BZ    3C8E
03C86:  BCF    FD8.0
03C88:  RRCF   x83,F
03C8A:  DECFSZ 01,F
03C8C:  BRA    3C86
....................                      }
....................    
....................    
....................                      if(No_PointCount == 0x08)
03C8E:  MOVF   x80,W
03C90:  SUBLW  08
03C92:  BNZ   3C9A
03C94:  MOVF   x81,F
03C96:  BNZ   3C9A
....................                      {
....................                         Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                      }
03C98:  BRA    3D04
....................                      else if(No_PointCount == 0x07)
03C9A:  MOVF   x80,W
03C9C:  SUBLW  07
03C9E:  BNZ   3CA8
03CA0:  MOVF   x81,F
03CA2:  BNZ   3CA8
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
03CA4:  BCF    x83.7
....................                      }
03CA6:  BRA    3D04
....................                      else if(No_PointCount == 0x06)
03CA8:  MOVF   x80,W
03CAA:  SUBLW  06
03CAC:  BNZ   3CB8
03CAE:  MOVF   x81,F
03CB0:  BNZ   3CB8
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
03CB2:  MOVLW  3F
03CB4:  ANDWF  x83,F
....................                      }
03CB6:  BRA    3D04
....................                      else if(No_PointCount == 0x05)
03CB8:  MOVF   x80,W
03CBA:  SUBLW  05
03CBC:  BNZ   3CC8
03CBE:  MOVF   x81,F
03CC0:  BNZ   3CC8
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
03CC2:  MOVLW  1F
03CC4:  ANDWF  x83,F
....................                      }
03CC6:  BRA    3D04
....................                      else if(No_PointCount == 0x04)
03CC8:  MOVF   x80,W
03CCA:  SUBLW  04
03CCC:  BNZ   3CD8
03CCE:  MOVF   x81,F
03CD0:  BNZ   3CD8
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
03CD2:  MOVLW  0F
03CD4:  ANDWF  x83,F
....................                      }
03CD6:  BRA    3D04
....................                      else if(No_PointCount == 0x03)
03CD8:  MOVF   x80,W
03CDA:  SUBLW  03
03CDC:  BNZ   3CE8
03CDE:  MOVF   x81,F
03CE0:  BNZ   3CE8
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
03CE2:  MOVLW  07
03CE4:  ANDWF  x83,F
....................                      }
03CE6:  BRA    3D04
....................                      else if(No_PointCount == 0x02)
03CE8:  MOVF   x80,W
03CEA:  SUBLW  02
03CEC:  BNZ   3CF8
03CEE:  MOVF   x81,F
03CF0:  BNZ   3CF8
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
03CF2:  MOVLW  03
03CF4:  ANDWF  x83,F
....................                      }
03CF6:  BRA    3D04
....................                      else if(No_PointCount == 0x01)
03CF8:  DECFSZ x80,W
03CFA:  BRA    3D04
03CFC:  MOVF   x81,F
03CFE:  BNZ   3D04
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
03D00:  MOVLW  01
03D02:  ANDWF  x83,F
....................                      }
....................    
....................                      TxD_Buff[0] = Address ;         //Address
03D04:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x01 ;         //Function Code
03D08:  MOVLW  01
03D0A:  MOVLB  0
03D0C:  MOVWF  x7C
....................                      TxD_Buff[2] = Data_ByteCount ;   //Byte Count
03D0E:  MOVFF  582,7D
....................                      TxD_Buff[3] = Data_Buff[0] ;   //Data
03D12:  MOVFF  583,7E
....................    
....................                      CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
03D16:  MOVLB  C
03D18:  CLRF   x26
03D1A:  MOVLW  7B
03D1C:  MOVWF  x25
03D1E:  MOVLW  04
03D20:  MOVWF  x27
03D22:  MOVLB  0
03D24:  CALL   2ED4
....................    
....................                      TxD_Buff[4] = CRC_Hi ;
03D28:  MOVFF  57B,7F
....................                      TxD_Buff[5] = CRC_Lo ;
03D2C:  MOVFF  57A,80
....................    
....................                      //TxD_DataLen = 0x06 ;
....................                      //rs485_ctrl = 1;
....................                      //dmsec(4);
....................                      //send = 1;
....................                      //TI=1;
....................                      output_bit(P485ctrl,1);
03D30:  BSF    F8A.3
03D32:  BCF    F93.3
....................                      restart_wdt();
03D34:  CLRWDT
....................                      delay_ms(4);
03D36:  MOVLW  04
03D38:  MOVLB  C
03D3A:  MOVWF  x24
03D3C:  MOVLB  0
03D3E:  CALL   0936
....................                      restart_wdt();
03D42:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
03D44:  MOVF   x7B,W
03D46:  CALL   2F2A
....................                      putc(TxD_Buff[1]) ;               //Function Code
03D4A:  MOVF   x7C,W
03D4C:  CALL   2F2A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03D50:  MOVF   x7D,W
03D52:  CALL   2F2A
....................                      putc(TxD_Buff[3]) ;
03D56:  MOVF   x7E,W
03D58:  CALL   2F2A
....................                      putc(TxD_Buff[4]) ;
03D5C:  MOVF   x7F,W
03D5E:  CALL   2F2A
....................                      putc(TxD_Buff[5]) ;
03D62:  MOVF   x80,W
03D64:  CALL   2F2A
....................                      //putc(TxD_Buff[6]) ;
....................                      //putc(TxD_Buff[7]) ;
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................                   
....................                      restart_wdt();
03D68:  CLRWDT
....................                      delay_ms(3);
03D6A:  MOVLW  03
03D6C:  MOVLB  C
03D6E:  MOVWF  x24
03D70:  MOVLB  0
03D72:  CALL   0936
....................                      restart_wdt();
03D76:  CLRWDT
....................                      output_bit(P485ctrl,0);
03D78:  BCF    F8A.3
03D7A:  BCF    F93.3
....................                  
....................                   }
03D7C:  BRA    3F44
03D7E:  MOVLB  5
....................                   else if(Data_ByteCount == 0x02)
03D80:  MOVF   x82,W
03D82:  SUBLW  02
03D84:  BTFSS  FD8.2
03D86:  BRA    3F46
....................                   {
....................                      //Data_Buff[1] = ~output[1] >> Start_Address ;
....................                      //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                      //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                      
....................                      //Data_Buff[1] = Output9_16 >> Start_Address ;//jj
....................                      //DataTemp = Output9_16 << (0x08 - Start_Address) ;//jj
....................                      //Data_Buff[0] = (Output1_8 >> Start_Address) | DataTemp;   //Low Byte//jj
....................                      Data_Buff[0] = Input1_8 >> Start_Address ;
03D88:  MOVFF  49,583
03D8C:  MOVF   x7E,W
03D8E:  MOVWF  01
03D90:  BZ    3D9A
03D92:  BCF    FD8.0
03D94:  RRCF   x83,F
03D96:  DECFSZ 01,F
03D98:  BRA    3D92
....................                      Data_Buff[1] = Input9_16 ;// >> Start_Address ;
03D9A:  MOVFF  4A,584
....................    
....................    
....................                      if((No_PointCount - 0x07) == 0x08)
03D9E:  MOVLW  07
03DA0:  SUBWF  x80,W
03DA2:  MOVLB  C
03DA4:  MOVWF  x24
03DA6:  MOVLW  00
03DA8:  MOVLB  5
03DAA:  SUBWFB x81,W
03DAC:  MOVLB  C
03DAE:  MOVWF  x25
03DB0:  MOVF   x24,W
03DB2:  SUBLW  08
03DB4:  BNZ   3DBC
03DB6:  MOVF   x25,F
03DB8:  BNZ   3DBC
....................                      {
....................                         Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                      }
03DBA:  BRA    3EC2
....................                      else if((No_PointCount - 0x07) == 0x07)
03DBC:  MOVLW  07
03DBE:  MOVLB  5
03DC0:  SUBWF  x80,W
03DC2:  MOVLB  C
03DC4:  MOVWF  x24
03DC6:  MOVLW  00
03DC8:  MOVLB  5
03DCA:  SUBWFB x81,W
03DCC:  MOVLB  C
03DCE:  MOVWF  x25
03DD0:  MOVF   x24,W
03DD2:  SUBLW  07
03DD4:  BNZ   3DE0
03DD6:  MOVF   x25,F
03DD8:  BNZ   3DE0
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
03DDA:  MOVLB  5
03DDC:  BCF    x84.7
....................                      }
03DDE:  BRA    3EC0
....................                      else if((No_PointCount - 0x07) == 0x06)
03DE0:  MOVLW  07
03DE2:  MOVLB  5
03DE4:  SUBWF  x80,W
03DE6:  MOVLB  C
03DE8:  MOVWF  x24
03DEA:  MOVLW  00
03DEC:  MOVLB  5
03DEE:  SUBWFB x81,W
03DF0:  MOVLB  C
03DF2:  MOVWF  x25
03DF4:  MOVF   x24,W
03DF6:  SUBLW  06
03DF8:  BNZ   3E06
03DFA:  MOVF   x25,F
03DFC:  BNZ   3E06
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
03DFE:  MOVLW  3F
03E00:  MOVLB  5
03E02:  ANDWF  x84,F
....................                      }
03E04:  BRA    3EC0
....................                      else if((No_PointCount - 0x07) == 0x05)
03E06:  MOVLW  07
03E08:  MOVLB  5
03E0A:  SUBWF  x80,W
03E0C:  MOVLB  C
03E0E:  MOVWF  x24
03E10:  MOVLW  00
03E12:  MOVLB  5
03E14:  SUBWFB x81,W
03E16:  MOVLB  C
03E18:  MOVWF  x25
03E1A:  MOVF   x24,W
03E1C:  SUBLW  05
03E1E:  BNZ   3E2C
03E20:  MOVF   x25,F
03E22:  BNZ   3E2C
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
03E24:  MOVLW  1F
03E26:  MOVLB  5
03E28:  ANDWF  x84,F
....................                      }
03E2A:  BRA    3EC0
....................                      else if((No_PointCount - 0x07) == 0x04)
03E2C:  MOVLW  07
03E2E:  MOVLB  5
03E30:  SUBWF  x80,W
03E32:  MOVLB  C
03E34:  MOVWF  x24
03E36:  MOVLW  00
03E38:  MOVLB  5
03E3A:  SUBWFB x81,W
03E3C:  MOVLB  C
03E3E:  MOVWF  x25
03E40:  MOVF   x24,W
03E42:  SUBLW  04
03E44:  BNZ   3E52
03E46:  MOVF   x25,F
03E48:  BNZ   3E52
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
03E4A:  MOVLW  0F
03E4C:  MOVLB  5
03E4E:  ANDWF  x84,F
....................                      }
03E50:  BRA    3EC0
....................                      else if((No_PointCount - 0x07) == 0x03)
03E52:  MOVLW  07
03E54:  MOVLB  5
03E56:  SUBWF  x80,W
03E58:  MOVLB  C
03E5A:  MOVWF  x24
03E5C:  MOVLW  00
03E5E:  MOVLB  5
03E60:  SUBWFB x81,W
03E62:  MOVLB  C
03E64:  MOVWF  x25
03E66:  MOVF   x24,W
03E68:  SUBLW  03
03E6A:  BNZ   3E78
03E6C:  MOVF   x25,F
03E6E:  BNZ   3E78
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
03E70:  MOVLW  07
03E72:  MOVLB  5
03E74:  ANDWF  x84,F
....................                      }
03E76:  BRA    3EC0
....................                      else if((No_PointCount - 0x07) == 0x02)
03E78:  MOVLW  07
03E7A:  MOVLB  5
03E7C:  SUBWF  x80,W
03E7E:  MOVLB  C
03E80:  MOVWF  x24
03E82:  MOVLW  00
03E84:  MOVLB  5
03E86:  SUBWFB x81,W
03E88:  MOVLB  C
03E8A:  MOVWF  x25
03E8C:  MOVF   x24,W
03E8E:  SUBLW  02
03E90:  BNZ   3E9E
03E92:  MOVF   x25,F
03E94:  BNZ   3E9E
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
03E96:  MOVLW  03
03E98:  MOVLB  5
03E9A:  ANDWF  x84,F
....................                      }
03E9C:  BRA    3EC0
....................                      else if((No_PointCount - 0x07) == 0x01)
03E9E:  MOVLW  07
03EA0:  MOVLB  5
03EA2:  SUBWF  x80,W
03EA4:  MOVLB  C
03EA6:  MOVWF  x24
03EA8:  MOVLW  00
03EAA:  MOVLB  5
03EAC:  SUBWFB x81,W
03EAE:  MOVLB  C
03EB0:  MOVWF  x25
03EB2:  DECFSZ x24,W
03EB4:  BRA    3EC2
03EB6:  MOVF   x25,F
03EB8:  BNZ   3EC2
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
03EBA:  MOVLW  01
03EBC:  MOVLB  5
03EBE:  ANDWF  x84,F
03EC0:  MOVLB  C
....................                      }
....................    
....................                      TxD_Buff[0] = Address ;         //Address
03EC2:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x01 ;         //Function Code
03EC6:  MOVLW  01
03EC8:  MOVLB  0
03ECA:  MOVWF  x7C
....................                      TxD_Buff[2] = Data_ByteCount ;   //Byte Count
03ECC:  MOVFF  582,7D
....................                      TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
03ED0:  MOVFF  583,7E
....................                      TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
03ED4:  MOVFF  584,7F
....................    
....................                      CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
03ED8:  MOVLB  C
03EDA:  CLRF   x26
03EDC:  MOVLW  7B
03EDE:  MOVWF  x25
03EE0:  MOVLW  05
03EE2:  MOVWF  x27
03EE4:  MOVLB  0
03EE6:  CALL   2ED4
....................    
....................                      TxD_Buff[5] = CRC_Hi ;
03EEA:  MOVFF  57B,80
....................                      TxD_Buff[6] = CRC_Lo ;
03EEE:  MOVFF  57A,81
....................    
....................                      //TxD_DataLen = 0x07 ;
....................                      //rs485_ctrl = 1;
....................                      //dmsec(4);
....................                      //send = 1;
....................                      //TI=1;
....................                      output_bit(P485ctrl,1);
03EF2:  BSF    F8A.3
03EF4:  BCF    F93.3
....................                      restart_wdt();
03EF6:  CLRWDT
....................                      delay_ms(4);
03EF8:  MOVLW  04
03EFA:  MOVLB  C
03EFC:  MOVWF  x24
03EFE:  MOVLB  0
03F00:  CALL   0936
....................                      restart_wdt();
03F04:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
03F06:  MOVF   x7B,W
03F08:  CALL   2F2A
....................                      putc(TxD_Buff[1]) ;               //Function Code
03F0C:  MOVF   x7C,W
03F0E:  CALL   2F2A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03F12:  MOVF   x7D,W
03F14:  CALL   2F2A
....................                      putc(TxD_Buff[3]) ;
03F18:  MOVF   x7E,W
03F1A:  CALL   2F2A
....................                      putc(TxD_Buff[4]) ;
03F1E:  MOVF   x7F,W
03F20:  CALL   2F2A
....................                      putc(TxD_Buff[5]) ;
03F24:  MOVF   x80,W
03F26:  CALL   2F2A
....................                      putc(TxD_Buff[6]) ;
03F2A:  MOVF   x81,W
03F2C:  CALL   2F2A
....................                      //putc(TxD_Buff[7]) ;
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
03F30:  CLRWDT
....................                      delay_ms(3);
03F32:  MOVLW  03
03F34:  MOVLB  C
03F36:  MOVWF  x24
03F38:  MOVLB  0
03F3A:  CALL   0936
....................                      restart_wdt();
03F3E:  CLRWDT
....................                      output_bit(P485ctrl,0);
03F40:  BCF    F8A.3
03F42:  BCF    F93.3
03F44:  MOVLB  5
....................                  
....................                   }
....................                }
03F46:  BRA    3FB8
....................                else
....................                {
....................                   //invalid parameter
....................                   TxD_Buff[0] = Address ;         //Address
03F48:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x81 ;         //Function Code
03F4C:  MOVLW  81
03F4E:  MOVLB  0
03F50:  MOVWF  x7C
....................                   TxD_Buff[2] = 0x02 ;         //illegal data address
03F52:  MOVLW  02
03F54:  MOVWF  x7D
....................    
....................                   CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
03F56:  MOVLB  C
03F58:  CLRF   x26
03F5A:  MOVLW  7B
03F5C:  MOVWF  x25
03F5E:  MOVLW  03
03F60:  MOVWF  x27
03F62:  MOVLB  0
03F64:  CALL   2ED4
....................    
....................                   TxD_Buff[3] = CRC_Hi ;
03F68:  MOVFF  57B,7E
....................                   TxD_Buff[4] = CRC_Lo ;
03F6C:  MOVFF  57A,7F
....................    
....................                   //TxD_DataLen = 0x05 ;
....................                   //rs485_ctrl = 1;
....................                   //restart_wdt();
....................                   //dmsec(4);
....................                   //restart_wdt();
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
03F70:  BSF    F8A.3
03F72:  BCF    F93.3
....................                   restart_wdt();
03F74:  CLRWDT
....................                   delay_ms(4);
03F76:  MOVLW  04
03F78:  MOVLB  C
03F7A:  MOVWF  x24
03F7C:  MOVLB  0
03F7E:  CALL   0936
....................                   restart_wdt();
03F82:  CLRWDT
....................    
....................                   putc(TxD_Buff[0]) ;               //Address
03F84:  MOVF   x7B,W
03F86:  CALL   2F2A
....................                   putc(TxD_Buff[1]) ;               //Function Code
03F8A:  MOVF   x7C,W
03F8C:  CALL   2F2A
....................                   putc(TxD_Buff[2]) ;               //Byte Count
03F90:  MOVF   x7D,W
03F92:  CALL   2F2A
....................                   putc(TxD_Buff[3]) ;
03F96:  MOVF   x7E,W
03F98:  CALL   2F2A
....................                   putc(TxD_Buff[4]) ;
03F9C:  MOVF   x7F,W
03F9E:  CALL   2F2A
....................                  //putc(TxD_Buff[5]) ;
....................                   //putc(TxD_Buff[6]) ;
....................                   //putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
....................    
....................                   restart_wdt();
03FA2:  CLRWDT
....................                   delay_ms(3);
03FA4:  MOVLW  03
03FA6:  MOVLB  C
03FA8:  MOVWF  x24
03FAA:  MOVLB  0
03FAC:  CALL   0936
....................                   restart_wdt();
03FB0:  CLRWDT
....................                   output_bit(P485ctrl,0);
03FB2:  BCF    F8A.3
03FB4:  BCF    F93.3
03FB6:  MOVLB  5
03FB8:  MOVLB  1
....................                   
....................                }
....................             }
....................    
....................     
....................          if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
03FBA:  MOVF   x7B,W
03FBC:  SUBLW  07
03FBE:  BTFSS  FD8.2
03FC0:  BRA    4124
....................          {
....................             alarmtosend();
03FC2:  MOVLB  0
03FC4:  GOTO   2F32
....................             
....................             disable_interrupts(INT_TIMER2);
03FC8:  BCF    F9D.1
....................             //----------------------------------jj----------------------------//
....................             
....................                Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
03FCA:  MOVFF  1E,583
....................                Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
03FCE:  MOVFF  1F,584
....................                Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
03FD2:  MOVFF  20,585
....................                Data_Buff[3] = Input25_32_Send ;
03FD6:  MOVFF  21,586
....................                Data_Buff[4] = Input33_40_Send ;
03FDA:  MOVFF  22,587
....................                Data_Buff[5] = Input41_48_Send ;
03FDE:  MOVFF  23,588
....................                Data_Buff[6] = Input49_56_Send ;
03FE2:  MOVFF  24,589
....................                Data_Buff[7] = Input57_64_Send ;
03FE6:  MOVFF  25,58A
....................               
....................                Data_Buff[8] = Ack1_8_Send ;
03FEA:  MOVFF  26,58B
....................                Data_Buff[9] = Ack9_16_Send ;
03FEE:  MOVFF  27,58C
....................                Data_Buff[10] = Ack17_24_Send ;
03FF2:  MOVFF  28,58D
....................                Data_Buff[11] = Ack25_32_Send ;
03FF6:  MOVFF  29,58E
....................                Data_Buff[12] = Ack33_40_Send ;
03FFA:  MOVFF  2A,58F
....................                Data_Buff[13] = Ack41_48_Send ;
03FFE:  MOVFF  2B,590
....................                Data_Buff[14] = Ack49_56_Send ;
04002:  MOVFF  2C,591
....................                Data_Buff[15] = Ack57_64_Send ;
04006:  MOVFF  2D,592
....................       
....................                
....................                
....................                TxD_Buff[0] = Address ;         //Address
0400A:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x07 ;         //Function Code
0400E:  MOVLW  07
04010:  MOVWF  x7C
....................                TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
04012:  MOVLW  10
04014:  MOVLB  5
04016:  MOVWF  x82
04018:  MOVFF  582,7D
....................                TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
0401C:  MOVFF  583,7E
....................                TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
04020:  MOVFF  584,7F
....................                TxD_Buff[5] = Data_Buff[2] ;  
04024:  MOVFF  585,80
....................                TxD_Buff[6] = Data_Buff[3] ;
04028:  MOVFF  586,81
....................                TxD_Buff[7] = Data_Buff[4] ;
0402C:  MOVFF  587,82
....................                TxD_Buff[8] = Data_Buff[5] ;
04030:  MOVFF  588,83
....................                TxD_Buff[9] = Data_Buff[6] ;
04034:  MOVFF  589,84
....................                TxD_Buff[10] = Data_Buff[7] ;
04038:  MOVFF  58A,85
....................                  
....................               TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
0403C:  MOVFF  58B,86
....................               TxD_Buff[12] = Data_Buff[9] ;
04040:  MOVFF  58C,87
....................               TxD_Buff[13] = Data_Buff[10] ;
04044:  MOVFF  58D,88
....................               TxD_Buff[14] = Data_Buff[11] ;
04048:  MOVFF  58E,89
....................               TxD_Buff[15] = Data_Buff[12] ;
0404C:  MOVFF  58F,8A
....................               TxD_Buff[16] = Data_Buff[13] ;
04050:  MOVFF  590,8B
....................               TxD_Buff[17] = Data_Buff[14] ;
04054:  MOVFF  591,8C
....................               TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
04058:  MOVFF  592,8D
....................    
....................               CRC(TxD_Buff,19);            //Cal CRC 5 Byte
0405C:  MOVLB  C
0405E:  CLRF   x26
04060:  MOVLW  7B
04062:  MOVWF  x25
04064:  MOVLW  13
04066:  MOVWF  x27
04068:  MOVLB  0
0406A:  CALL   2ED4
....................    
....................              TxD_Buff[19] = CRC_Hi ;
0406E:  MOVFF  57B,8E
....................              TxD_Buff[20] = CRC_Lo ;
04072:  MOVFF  57A,8F
....................    
....................            
....................             output_bit(P485ctrl,1);
04076:  BSF    F8A.3
04078:  BCF    F93.3
....................             restart_wdt();
0407A:  CLRWDT
....................             delay_ms(4);
0407C:  MOVLW  04
0407E:  MOVLB  C
04080:  MOVWF  x24
04082:  MOVLB  0
04084:  CALL   0936
....................             restart_wdt();
04088:  CLRWDT
....................             
....................             
....................             
....................             putc(TxD_Buff[0]) ;               //Address
0408A:  MOVF   x7B,W
0408C:  CALL   2F2A
....................             putc(TxD_Buff[1]) ;               //Function Code
04090:  MOVF   x7C,W
04092:  CALL   2F2A
....................             putc(TxD_Buff[2]) ;               //Byte Count
04096:  MOVF   x7D,W
04098:  CALL   2F2A
....................             putc(TxD_Buff[3]) ;
0409C:  MOVF   x7E,W
0409E:  CALL   2F2A
....................             putc(TxD_Buff[4]) ;
040A2:  MOVF   x7F,W
040A4:  CALL   2F2A
....................             putc(TxD_Buff[5]) ;
040A8:  MOVF   x80,W
040AA:  CALL   2F2A
....................             putc(TxD_Buff[6]) ;
040AE:  MOVF   x81,W
040B0:  CALL   2F2A
....................             putc(TxD_Buff[7]) ;
040B4:  MOVF   x82,W
040B6:  CALL   2F2A
....................             putc(TxD_Buff[8]) ;
040BA:  MOVF   x83,W
040BC:  CALL   2F2A
....................             putc(TxD_Buff[9]) ;
040C0:  MOVF   x84,W
040C2:  CALL   2F2A
....................             putc(TxD_Buff[10]) ;
040C6:  MOVF   x85,W
040C8:  CALL   2F2A
....................             putc(TxD_Buff[11]) ;
040CC:  MOVF   x86,W
040CE:  CALL   2F2A
....................             putc(TxD_Buff[12]) ;
040D2:  MOVF   x87,W
040D4:  CALL   2F2A
....................             putc(TxD_Buff[13]) ;
040D8:  MOVF   x88,W
040DA:  CALL   2F2A
....................             putc(TxD_Buff[14]) ;
040DE:  MOVF   x89,W
040E0:  CALL   2F2A
....................             putc(TxD_Buff[15]) ;
040E4:  MOVF   x8A,W
040E6:  CALL   2F2A
....................             putc(TxD_Buff[16]) ;
040EA:  MOVF   x8B,W
040EC:  CALL   2F2A
....................             putc(TxD_Buff[17]) ;
040F0:  MOVF   x8C,W
040F2:  CALL   2F2A
....................             putc(TxD_Buff[18]) ;
040F6:  MOVF   x8D,W
040F8:  CALL   2F2A
....................             putc(TxD_Buff[19]) ;
040FC:  MOVF   x8E,W
040FE:  CALL   2F2A
....................             putc(TxD_Buff[20]) ;
04102:  MOVF   x8F,W
04104:  CALL   2F2A
....................    
....................             restart_wdt();
04108:  CLRWDT
....................             delay_ms(3);
0410A:  MOVLW  03
0410C:  MOVLB  C
0410E:  MOVWF  x24
04110:  MOVLB  0
04112:  CALL   0936
....................             restart_wdt();
04116:  CLRWDT
....................             output_bit(P485ctrl,0);
04118:  BCF    F8A.3
0411A:  BCF    F93.3
....................               
....................            
....................             /////////////////////////////////////////
....................             
....................            enable_interrupts(INT_TIMER2); 
0411C:  BSF    F9D.1
....................         
....................           }
0411E:  GOTO   6096
04122:  MOVLB  1
....................    
....................           else if(RxD_Buff[1] == 0x05)///////////// FORCE COIL /////////////////////
04124:  MOVF   x7B,W
04126:  SUBLW  05
04128:  BTFSS  FD8.2
0412A:  BRA    4618
....................           {
....................                //Do Force Coil
....................                Start_Address = RxD_Buff[2] ;
0412C:  MOVLB  5
0412E:  CLRF   x7F
04130:  MOVFF  17C,57E
....................                Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Coil Address 16 bit
04134:  MOVFF  57E,57F
04138:  MOVLB  C
0413A:  CLRF   x24
0413C:  MOVF   x24,W
0413E:  MOVLB  1
04140:  IORWF  x7D,W
04142:  MOVLB  5
04144:  MOVWF  x7E
04146:  MOVLB  5
....................                No_PointCount = RxD_Buff[4] ;
04148:  CLRF   x81
0414A:  MOVFF  17E,580
....................                No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //Force Data 16 bit FF00 = ON, 00FF = OFF
0414E:  MOVFF  580,581
04152:  MOVLB  C
04154:  CLRF   x24
04156:  MOVF   x24,W
04158:  MOVLB  1
0415A:  IORWF  x7F,W
0415C:  MOVLB  5
0415E:  MOVWF  x80
04160:  MOVLB  5
....................    
....................                if(Start_Address == 0x00)   ////// Acknowlegde //////
04162:  MOVF   x7E,F
04164:  BNZ   4204
04166:  MOVF   x7F,F
04168:  BNZ   4204
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
0416A:  MOVF   x80,F
0416C:  BNZ   4202
0416E:  INCFSZ x81,W
04170:  BRA    4202
....................                   {
....................                      //Modbus_ACK = 1 ;
....................                      AutoAckFlag = 1;
04172:  BSF    1A.2
....................    
....................                      TxD_Buff[0] = Address ;         //Address
04174:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
04178:  MOVLW  05
0417A:  MOVLB  0
0417C:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0417E:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04182:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04186:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
0418A:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6);            //Cal CRC 6 Byte
0418E:  MOVLB  C
04190:  CLRF   x26
04192:  MOVLW  7B
04194:  MOVWF  x25
04196:  MOVLW  06
04198:  MOVWF  x27
0419A:  MOVLB  0
0419C:  CALL   2ED4
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
041A0:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
041A4:  MOVFF  57A,82
....................    
....................                  output_bit(P485ctrl,1);
041A8:  BSF    F8A.3
041AA:  BCF    F93.3
....................                      restart_wdt();
041AC:  CLRWDT
....................                      delay_ms(4);
041AE:  MOVLW  04
041B0:  MOVLB  C
041B2:  MOVWF  x24
041B4:  MOVLB  0
041B6:  CALL   0936
....................                      restart_wdt();
041BA:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
041BC:  MOVF   x7B,W
041BE:  CALL   2F2A
....................                      putc(TxD_Buff[1]) ;               //Function Code
041C2:  MOVF   x7C,W
041C4:  CALL   2F2A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
041C8:  MOVF   x7D,W
041CA:  CALL   2F2A
....................                      putc(TxD_Buff[3]) ;
041CE:  MOVF   x7E,W
041D0:  CALL   2F2A
....................                      putc(TxD_Buff[4]) ;
041D4:  MOVF   x7F,W
041D6:  CALL   2F2A
....................                      putc(TxD_Buff[5]) ;
041DA:  MOVF   x80,W
041DC:  CALL   2F2A
....................                      putc(TxD_Buff[6]) ;
041E0:  MOVF   x81,W
041E2:  CALL   2F2A
....................                      putc(TxD_Buff[7]) ;
041E6:  MOVF   x82,W
041E8:  CALL   2F2A
....................    
....................                      restart_wdt();
041EC:  CLRWDT
....................                      delay_ms(3);
041EE:  MOVLW  03
041F0:  MOVLB  C
041F2:  MOVWF  x24
041F4:  MOVLB  0
041F6:  CALL   0936
....................                      restart_wdt();
041FA:  CLRWDT
....................                      output_bit(P485ctrl,0);
041FC:  BCF    F8A.3
041FE:  BCF    F93.3
04200:  MOVLB  5
....................                  
....................                   }
....................                }
04202:  BRA    4612
....................                else if(Start_Address == 0x01)   ///// Reset //////
04204:  DECFSZ x7E,W
04206:  BRA    42A6
04208:  MOVF   x7F,F
0420A:  BNZ   42A6
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
0420C:  MOVF   x80,F
0420E:  BNZ   42A4
04210:  INCFSZ x81,W
04212:  BRA    42A4
....................                   {
....................                      //Modbus_RET = 1 ;
....................                      AutoResetFlag = 1;
04214:  BSF    1A.3
....................                      
....................                      TxD_Buff[0] = Address ;         //Address
04216:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
0421A:  MOVLW  05
0421C:  MOVLB  0
0421E:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04220:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04224:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04228:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
0422C:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04230:  MOVLB  C
04232:  CLRF   x26
04234:  MOVLW  7B
04236:  MOVWF  x25
04238:  MOVLW  06
0423A:  MOVWF  x27
0423C:  MOVLB  0
0423E:  CALL   2ED4
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
04242:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
04246:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
0424A:  BSF    F8A.3
0424C:  BCF    F93.3
....................                      restart_wdt();
0424E:  CLRWDT
....................                      delay_ms(4);
04250:  MOVLW  04
04252:  MOVLB  C
04254:  MOVWF  x24
04256:  MOVLB  0
04258:  CALL   0936
....................                      restart_wdt();
0425C:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
0425E:  MOVF   x7B,W
04260:  CALL   2F2A
....................                      putc(TxD_Buff[1]) ;               //Function Code
04264:  MOVF   x7C,W
04266:  CALL   2F2A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
0426A:  MOVF   x7D,W
0426C:  CALL   2F2A
....................                      putc(TxD_Buff[3]) ;
04270:  MOVF   x7E,W
04272:  CALL   2F2A
....................                      putc(TxD_Buff[4]) ;
04276:  MOVF   x7F,W
04278:  CALL   2F2A
....................                      putc(TxD_Buff[5]) ;
0427C:  MOVF   x80,W
0427E:  CALL   2F2A
....................                      putc(TxD_Buff[6]) ;
04282:  MOVF   x81,W
04284:  CALL   2F2A
....................                      putc(TxD_Buff[7]) ;
04288:  MOVF   x82,W
0428A:  CALL   2F2A
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
0428E:  CLRWDT
....................                      delay_ms(3);
04290:  MOVLW  03
04292:  MOVLB  C
04294:  MOVWF  x24
04296:  MOVLB  0
04298:  CALL   0936
....................                      restart_wdt();
0429C:  CLRWDT
....................                      output_bit(P485ctrl,0);
0429E:  BCF    F8A.3
042A0:  BCF    F93.3
042A2:  MOVLB  5
....................                  
....................                   }
....................                }
042A4:  BRA    4612
....................                else if(Start_Address == 0x02)   ///// Test //////
042A6:  MOVF   x7E,W
042A8:  SUBLW  02
042AA:  BTFSS  FD8.2
042AC:  BRA    43F8
042AE:  MOVF   x7F,F
042B0:  BTFSS  FD8.2
042B2:  BRA    43F8
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
042B4:  MOVF   x80,F
042B6:  BNZ   434E
042B8:  INCFSZ x81,W
042BA:  BRA    434E
....................                   {
....................                      //Modbus_Lamp_Test = 1 ;
....................                      AutoTestFlag = 1;
042BC:  BSF    1A.4
....................    
....................                      TxD_Buff[0] = Address ;         //Address
042BE:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
042C2:  MOVLW  05
042C4:  MOVLB  0
042C6:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
042C8:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
042CC:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
042D0:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
042D4:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
042D8:  MOVLB  C
042DA:  CLRF   x26
042DC:  MOVLW  7B
042DE:  MOVWF  x25
042E0:  MOVLW  06
042E2:  MOVWF  x27
042E4:  MOVLB  0
042E6:  CALL   2ED4
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
042EA:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
042EE:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
042F2:  BSF    F8A.3
042F4:  BCF    F93.3
....................                      restart_wdt();
042F6:  CLRWDT
....................                      delay_ms(4);
042F8:  MOVLW  04
042FA:  MOVLB  C
042FC:  MOVWF  x24
042FE:  MOVLB  0
04300:  CALL   0936
....................                      restart_wdt();
04304:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
04306:  MOVF   x7B,W
04308:  CALL   2F2A
....................                      putc(TxD_Buff[1]) ;               //Function Code
0430C:  MOVF   x7C,W
0430E:  CALL   2F2A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
04312:  MOVF   x7D,W
04314:  CALL   2F2A
....................                      putc(TxD_Buff[3]) ;
04318:  MOVF   x7E,W
0431A:  CALL   2F2A
....................                      putc(TxD_Buff[4]) ;
0431E:  MOVF   x7F,W
04320:  CALL   2F2A
....................                      putc(TxD_Buff[5]) ;
04324:  MOVF   x80,W
04326:  CALL   2F2A
....................                      putc(TxD_Buff[6]) ;
0432A:  MOVF   x81,W
0432C:  CALL   2F2A
....................                      putc(TxD_Buff[7]) ;
04330:  MOVF   x82,W
04332:  CALL   2F2A
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
04336:  CLRWDT
....................                      delay_ms(3);
04338:  MOVLW  03
0433A:  MOVLB  C
0433C:  MOVWF  x24
0433E:  MOVLB  0
04340:  CALL   0936
....................                      restart_wdt();
04344:  CLRWDT
....................                      output_bit(P485ctrl,0);
04346:  BCF    F8A.3
04348:  BCF    F93.3
....................                 
....................                   }
0434A:  BRA    43F4
0434C:  MOVLB  5
....................                   else if(No_PointCount == 0x00)   //OFF
0434E:  MOVF   x80,F
04350:  BNZ   43F6
04352:  MOVF   x81,F
04354:  BNZ   43F6
....................                   {
....................                      //Modbus_Lamp_Test = 0 ;
....................                      AutoTestFlag = 0;
04356:  BCF    1A.4
....................                      Read_input();
04358:  MOVLB  0
0435A:  CALL   2060
....................                      AutoAckFlag = 1;
0435E:  BSF    1A.2
....................                      check_ack();
04360:  CALL   3280
....................                      AutoResetFlag = 1;
04364:  BSF    1A.3
....................                      check_reset();
04366:  CALL   33CE
....................    
....................                      TxD_Buff[0] = Address ;         //Address
0436A:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
0436E:  MOVLW  05
04370:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04372:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04376:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
0437A:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
0437E:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04382:  MOVLB  C
04384:  CLRF   x26
04386:  MOVLW  7B
04388:  MOVWF  x25
0438A:  MOVLW  06
0438C:  MOVWF  x27
0438E:  MOVLB  0
04390:  CALL   2ED4
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
04394:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
04398:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
0439C:  BSF    F8A.3
0439E:  BCF    F93.3
....................                      restart_wdt();
043A0:  CLRWDT
....................                      delay_ms(4);
043A2:  MOVLW  04
043A4:  MOVLB  C
043A6:  MOVWF  x24
043A8:  MOVLB  0
043AA:  CALL   0936
....................                      restart_wdt();
043AE:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
043B0:  MOVF   x7B,W
043B2:  CALL   2F2A
....................                      putc(TxD_Buff[1]) ;               //Function Code
043B6:  MOVF   x7C,W
043B8:  CALL   2F2A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
043BC:  MOVF   x7D,W
043BE:  CALL   2F2A
....................                      putc(TxD_Buff[3]) ;
043C2:  MOVF   x7E,W
043C4:  CALL   2F2A
....................                      putc(TxD_Buff[4]) ;
043C8:  MOVF   x7F,W
043CA:  CALL   2F2A
....................                      putc(TxD_Buff[5]) ;
043CE:  MOVF   x80,W
043D0:  CALL   2F2A
....................                      putc(TxD_Buff[6]) ;
043D4:  MOVF   x81,W
043D6:  CALL   2F2A
....................                      putc(TxD_Buff[7]) ;
043DA:  MOVF   x82,W
043DC:  CALL   2F2A
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
043E0:  CLRWDT
....................                      delay_ms(3);
043E2:  MOVLW  03
043E4:  MOVLB  C
043E6:  MOVWF  x24
043E8:  MOVLB  0
043EA:  CALL   0936
....................                      restart_wdt();
043EE:  CLRWDT
....................                      output_bit(P485ctrl,0);
043F0:  BCF    F8A.3
043F2:  BCF    F93.3
043F4:  MOVLB  5
....................                      
....................                   }
....................                }
043F6:  BRA    4612
....................                else if(Start_Address == 0x03)   ///// Function Test //////
043F8:  MOVF   x7E,W
043FA:  SUBLW  03
043FC:  BTFSS  FD8.2
043FE:  BRA    454A
04400:  MOVF   x7F,F
04402:  BTFSS  FD8.2
04404:  BRA    454A
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
04406:  MOVF   x80,F
04408:  BNZ   44A0
0440A:  INCFSZ x81,W
0440C:  BRA    44A0
....................                   {
....................                      //Modbus_Lamp_Test = 1 ;
....................                      Test_fault = 1 ;
0440E:  BSF    1A.5
....................    
....................                      TxD_Buff[0] = Address ;         //Address
04410:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
04414:  MOVLW  05
04416:  MOVLB  0
04418:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0441A:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
0441E:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04422:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04426:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
0442A:  MOVLB  C
0442C:  CLRF   x26
0442E:  MOVLW  7B
04430:  MOVWF  x25
04432:  MOVLW  06
04434:  MOVWF  x27
04436:  MOVLB  0
04438:  CALL   2ED4
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
0443C:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
04440:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
04444:  BSF    F8A.3
04446:  BCF    F93.3
....................                      restart_wdt();
04448:  CLRWDT
....................                      delay_ms(4);
0444A:  MOVLW  04
0444C:  MOVLB  C
0444E:  MOVWF  x24
04450:  MOVLB  0
04452:  CALL   0936
....................                      restart_wdt();
04456:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
04458:  MOVF   x7B,W
0445A:  CALL   2F2A
....................                      putc(TxD_Buff[1]) ;               //Function Code
0445E:  MOVF   x7C,W
04460:  CALL   2F2A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
04464:  MOVF   x7D,W
04466:  CALL   2F2A
....................                      putc(TxD_Buff[3]) ;
0446A:  MOVF   x7E,W
0446C:  CALL   2F2A
....................                      putc(TxD_Buff[4]) ;
04470:  MOVF   x7F,W
04472:  CALL   2F2A
....................                      putc(TxD_Buff[5]) ;
04476:  MOVF   x80,W
04478:  CALL   2F2A
....................                      putc(TxD_Buff[6]) ;
0447C:  MOVF   x81,W
0447E:  CALL   2F2A
....................                      putc(TxD_Buff[7]) ;
04482:  MOVF   x82,W
04484:  CALL   2F2A
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
04488:  CLRWDT
....................                      delay_ms(10);
0448A:  MOVLW  0A
0448C:  MOVLB  C
0448E:  MOVWF  x24
04490:  MOVLB  0
04492:  CALL   0936
....................                      restart_wdt();
04496:  CLRWDT
....................                      output_bit(P485ctrl,0);
04498:  BCF    F8A.3
0449A:  BCF    F93.3
....................                   }
0449C:  BRA    4546
0449E:  MOVLB  5
....................                   else if(No_PointCount == 0x00)   //OFF
044A0:  MOVF   x80,F
044A2:  BNZ   4548
044A4:  MOVF   x81,F
044A6:  BNZ   4548
....................                   {
....................                      //Modbus_Lamp_Test = 0 ;
....................                      Test_fault = 0;
044A8:  BCF    1A.5
....................                      Read_input();
044AA:  MOVLB  0
044AC:  CALL   2060
....................                      AutoAckFlag = 1;
044B0:  BSF    1A.2
....................                      check_ack();
044B2:  CALL   3280
....................                      AutoResetFlag = 1;
044B6:  BSF    1A.3
....................                      check_reset();
044B8:  CALL   33CE
....................    
....................                      TxD_Buff[0] = Address ;         //Address
044BC:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
044C0:  MOVLW  05
044C2:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
044C4:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
044C8:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
044CC:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
044D0:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
044D4:  MOVLB  C
044D6:  CLRF   x26
044D8:  MOVLW  7B
044DA:  MOVWF  x25
044DC:  MOVLW  06
044DE:  MOVWF  x27
044E0:  MOVLB  0
044E2:  CALL   2ED4
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
044E6:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
044EA:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
044EE:  BSF    F8A.3
044F0:  BCF    F93.3
....................                      restart_wdt();
044F2:  CLRWDT
....................                      delay_ms(4);
044F4:  MOVLW  04
044F6:  MOVLB  C
044F8:  MOVWF  x24
044FA:  MOVLB  0
044FC:  CALL   0936
....................                      restart_wdt();
04500:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
04502:  MOVF   x7B,W
04504:  CALL   2F2A
....................                      putc(TxD_Buff[1]) ;               //Function Code
04508:  MOVF   x7C,W
0450A:  CALL   2F2A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
0450E:  MOVF   x7D,W
04510:  CALL   2F2A
....................                      putc(TxD_Buff[3]) ;
04514:  MOVF   x7E,W
04516:  CALL   2F2A
....................                      putc(TxD_Buff[4]) ;
0451A:  MOVF   x7F,W
0451C:  CALL   2F2A
....................                      putc(TxD_Buff[5]) ;
04520:  MOVF   x80,W
04522:  CALL   2F2A
....................                      putc(TxD_Buff[6]) ;
04526:  MOVF   x81,W
04528:  CALL   2F2A
....................                      putc(TxD_Buff[7]) ;
0452C:  MOVF   x82,W
0452E:  CALL   2F2A
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
04532:  CLRWDT
....................                      delay_ms(3);
04534:  MOVLW  03
04536:  MOVLB  C
04538:  MOVWF  x24
0453A:  MOVLB  0
0453C:  CALL   0936
....................                      restart_wdt();
04540:  CLRWDT
....................                      output_bit(P485ctrl,0);
04542:  BCF    F8A.3
04544:  BCF    F93.3
04546:  MOVLB  5
....................                      
....................                   }
....................                }
04548:  BRA    4612
....................                else if(Start_Address == 0x64)   ///// Change Modbus Addr //////
0454A:  MOVF   x7E,W
0454C:  SUBLW  64
0454E:  BNZ   4612
04550:  MOVF   x7F,F
04552:  BNZ   4612
....................                {
....................                   Address = No_PointCount;
04554:  MOVFF  580,79
....................                   write_eeprom(0x1D,Address);   //Communication Address
04558:  MOVF   FF2,W
0455A:  MOVWF  00
0455C:  BCF    FF2.7
0455E:  CLRF   FAA
04560:  MOVLW  1D
04562:  MOVWF  FA9
04564:  MOVFF  79,FA8
04568:  BCF    FA6.6
0456A:  BCF    FA6.7
0456C:  BSF    FA6.2
0456E:  MOVLB  F
04570:  MOVLW  55
04572:  MOVWF  FA7
04574:  MOVLW  AA
04576:  MOVWF  FA7
04578:  BSF    FA6.1
0457A:  BTFSC  FA6.1
0457C:  BRA    457A
0457E:  BCF    FA6.2
04580:  MOVF   00,W
04582:  IORWF  FF2,F
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
04584:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
04588:  MOVLW  05
0458A:  MOVLB  0
0458C:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0458E:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04592:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04596:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
0459A:  MOVFF  17F,80
....................    
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
0459E:  MOVLB  C
045A0:  CLRF   x26
045A2:  MOVLW  7B
045A4:  MOVWF  x25
045A6:  MOVLW  06
045A8:  MOVWF  x27
045AA:  MOVLB  0
045AC:  CALL   2ED4
....................    
....................                   TxD_Buff[6] = CRC_Hi ;
045B0:  MOVFF  57B,81
....................                   TxD_Buff[7] = CRC_Lo ;
045B4:  MOVFF  57A,82
....................    
....................                   output_bit(P485ctrl,1);
045B8:  BSF    F8A.3
045BA:  BCF    F93.3
....................                   restart_wdt();
045BC:  CLRWDT
....................                   delay_ms(4);
045BE:  MOVLW  04
045C0:  MOVLB  C
045C2:  MOVWF  x24
045C4:  MOVLB  0
045C6:  CALL   0936
....................                   restart_wdt();
045CA:  CLRWDT
....................    
....................                   putc(TxD_Buff[0]) ;               //Address
045CC:  MOVF   x7B,W
045CE:  CALL   2F2A
....................                   putc(TxD_Buff[1]) ;               //Function Code
045D2:  MOVF   x7C,W
045D4:  CALL   2F2A
....................                   putc(TxD_Buff[2]) ;               //Byte Count
045D8:  MOVF   x7D,W
045DA:  CALL   2F2A
....................                   putc(TxD_Buff[3]) ;
045DE:  MOVF   x7E,W
045E0:  CALL   2F2A
....................                   putc(TxD_Buff[4]) ;
045E4:  MOVF   x7F,W
045E6:  CALL   2F2A
....................                   putc(TxD_Buff[5]) ;
045EA:  MOVF   x80,W
045EC:  CALL   2F2A
....................                   putc(TxD_Buff[6]) ;
045F0:  MOVF   x81,W
045F2:  CALL   2F2A
....................                   putc(TxD_Buff[7]) ;
045F6:  MOVF   x82,W
045F8:  CALL   2F2A
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
....................    
....................                   restart_wdt();
045FC:  CLRWDT
....................                   delay_ms(3);
045FE:  MOVLW  03
04600:  MOVLB  C
04602:  MOVWF  x24
04604:  MOVLB  0
04606:  CALL   0936
....................                   restart_wdt();
0460A:  CLRWDT
....................                   output_bit(P485ctrl,0);
0460C:  BCF    F8A.3
0460E:  BCF    F93.3
04610:  MOVLB  5
....................    
....................    
....................                   //save_addr();
....................                }
....................             }
04612:  GOTO   6098
04616:  MOVLB  1
....................             //--------------------------------------------------//
....................    
....................             else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
04618:  MOVF   x7B,W
0461A:  SUBLW  21
0461C:  BTFSS  FD8.2
0461E:  GOTO   4F86
....................             {
....................    
....................                write_eeprom(0x00,0x0F);
04622:  MOVF   FF2,W
04624:  MOVWF  00
04626:  BCF    FF2.7
04628:  CLRF   FAA
0462A:  CLRF   FA9
0462C:  MOVLW  0F
0462E:  MOVWF  FA8
04630:  BCF    FA6.6
04632:  BCF    FA6.7
04634:  BSF    FA6.2
04636:  MOVLB  F
04638:  MOVLW  55
0463A:  MOVWF  FA7
0463C:  MOVLW  AA
0463E:  MOVWF  FA7
04640:  BSF    FA6.1
04642:  BTFSC  FA6.1
04644:  BRA    4642
04646:  BCF    FA6.2
04648:  MOVF   00,W
0464A:  IORWF  FF2,F
....................    
....................                write_eeprom(0x01,RxD_Buff[3]);   //Input Type
0464C:  MOVFF  FF2,00
04650:  BCF    FF2.7
04652:  CLRF   FAA
04654:  MOVLW  01
04656:  MOVWF  FA9
04658:  MOVFF  17D,FA8
0465C:  BCF    FA6.6
0465E:  BCF    FA6.7
04660:  BSF    FA6.2
04662:  MOVLW  55
04664:  MOVWF  FA7
04666:  MOVLW  AA
04668:  MOVWF  FA7
0466A:  BSF    FA6.1
0466C:  BTFSC  FA6.1
0466E:  BRA    466C
04670:  BCF    FA6.2
04672:  MOVF   00,W
04674:  IORWF  FF2,F
....................                write_eeprom(0x02,RxD_Buff[4]);
04676:  MOVFF  FF2,00
0467A:  BCF    FF2.7
0467C:  CLRF   FAA
0467E:  MOVLW  02
04680:  MOVWF  FA9
04682:  MOVFF  17E,FA8
04686:  BCF    FA6.6
04688:  BCF    FA6.7
0468A:  BSF    FA6.2
0468C:  MOVLW  55
0468E:  MOVWF  FA7
04690:  MOVLW  AA
04692:  MOVWF  FA7
04694:  BSF    FA6.1
04696:  BTFSC  FA6.1
04698:  BRA    4696
0469A:  BCF    FA6.2
0469C:  MOVF   00,W
0469E:  IORWF  FF2,F
....................                write_eeprom(0x03,RxD_Buff[5]);
046A0:  MOVFF  FF2,00
046A4:  BCF    FF2.7
046A6:  CLRF   FAA
046A8:  MOVLW  03
046AA:  MOVWF  FA9
046AC:  MOVFF  17F,FA8
046B0:  BCF    FA6.6
046B2:  BCF    FA6.7
046B4:  BSF    FA6.2
046B6:  MOVLW  55
046B8:  MOVWF  FA7
046BA:  MOVLW  AA
046BC:  MOVWF  FA7
046BE:  BSF    FA6.1
046C0:  BTFSC  FA6.1
046C2:  BRA    46C0
046C4:  BCF    FA6.2
046C6:  MOVF   00,W
046C8:  IORWF  FF2,F
....................    
....................    
....................                write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
046CA:  MOVFF  FF2,00
046CE:  BCF    FF2.7
046D0:  CLRF   FAA
046D2:  MOVLW  04
046D4:  MOVWF  FA9
046D6:  MOVFF  180,FA8
046DA:  BCF    FA6.6
046DC:  BCF    FA6.7
046DE:  BSF    FA6.2
046E0:  MOVLW  55
046E2:  MOVWF  FA7
046E4:  MOVLW  AA
046E6:  MOVWF  FA7
046E8:  BSF    FA6.1
046EA:  BTFSC  FA6.1
046EC:  BRA    46EA
046EE:  BCF    FA6.2
046F0:  MOVF   00,W
046F2:  IORWF  FF2,F
....................                write_eeprom(0x05,RxD_Buff[7]);
046F4:  MOVFF  FF2,00
046F8:  BCF    FF2.7
046FA:  CLRF   FAA
046FC:  MOVLW  05
046FE:  MOVWF  FA9
04700:  MOVFF  181,FA8
04704:  BCF    FA6.6
04706:  BCF    FA6.7
04708:  BSF    FA6.2
0470A:  MOVLW  55
0470C:  MOVWF  FA7
0470E:  MOVLW  AA
04710:  MOVWF  FA7
04712:  BSF    FA6.1
04714:  BTFSC  FA6.1
04716:  BRA    4714
04718:  BCF    FA6.2
0471A:  MOVF   00,W
0471C:  IORWF  FF2,F
....................                write_eeprom(0x06,RxD_Buff[8]);
0471E:  MOVFF  FF2,00
04722:  BCF    FF2.7
04724:  CLRF   FAA
04726:  MOVLW  06
04728:  MOVWF  FA9
0472A:  MOVFF  182,FA8
0472E:  BCF    FA6.6
04730:  BCF    FA6.7
04732:  BSF    FA6.2
04734:  MOVLW  55
04736:  MOVWF  FA7
04738:  MOVLW  AA
0473A:  MOVWF  FA7
0473C:  BSF    FA6.1
0473E:  BTFSC  FA6.1
04740:  BRA    473E
04742:  BCF    FA6.2
04744:  MOVF   00,W
04746:  IORWF  FF2,F
....................    
....................                write_eeprom(0x07,RxD_Buff[9]);   //Output Type
04748:  MOVFF  FF2,00
0474C:  BCF    FF2.7
0474E:  CLRF   FAA
04750:  MOVLW  07
04752:  MOVWF  FA9
04754:  MOVFF  183,FA8
04758:  BCF    FA6.6
0475A:  BCF    FA6.7
0475C:  BSF    FA6.2
0475E:  MOVLW  55
04760:  MOVWF  FA7
04762:  MOVLW  AA
04764:  MOVWF  FA7
04766:  BSF    FA6.1
04768:  BTFSC  FA6.1
0476A:  BRA    4768
0476C:  BCF    FA6.2
0476E:  MOVF   00,W
04770:  IORWF  FF2,F
....................                write_eeprom(0x08,RxD_Buff[10]);
04772:  MOVFF  FF2,00
04776:  BCF    FF2.7
04778:  CLRF   FAA
0477A:  MOVLW  08
0477C:  MOVWF  FA9
0477E:  MOVFF  184,FA8
04782:  BCF    FA6.6
04784:  BCF    FA6.7
04786:  BSF    FA6.2
04788:  MOVLW  55
0478A:  MOVWF  FA7
0478C:  MOVLW  AA
0478E:  MOVWF  FA7
04790:  BSF    FA6.1
04792:  BTFSC  FA6.1
04794:  BRA    4792
04796:  BCF    FA6.2
04798:  MOVF   00,W
0479A:  IORWF  FF2,F
....................                write_eeprom(0x09,RxD_Buff[11]);
0479C:  MOVFF  FF2,00
047A0:  BCF    FF2.7
047A2:  CLRF   FAA
047A4:  MOVLW  09
047A6:  MOVWF  FA9
047A8:  MOVFF  185,FA8
047AC:  BCF    FA6.6
047AE:  BCF    FA6.7
047B0:  BSF    FA6.2
047B2:  MOVLW  55
047B4:  MOVWF  FA7
047B6:  MOVLW  AA
047B8:  MOVWF  FA7
047BA:  BSF    FA6.1
047BC:  BTFSC  FA6.1
047BE:  BRA    47BC
047C0:  BCF    FA6.2
047C2:  MOVF   00,W
047C4:  IORWF  FF2,F
....................    
....................                write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
047C6:  MOVFF  FF2,00
047CA:  BCF    FF2.7
047CC:  CLRF   FAA
047CE:  MOVLW  0A
047D0:  MOVWF  FA9
047D2:  MOVFF  186,FA8
047D6:  BCF    FA6.6
047D8:  BCF    FA6.7
047DA:  BSF    FA6.2
047DC:  MOVLW  55
047DE:  MOVWF  FA7
047E0:  MOVLW  AA
047E2:  MOVWF  FA7
047E4:  BSF    FA6.1
047E6:  BTFSC  FA6.1
047E8:  BRA    47E6
047EA:  BCF    FA6.2
047EC:  MOVF   00,W
047EE:  IORWF  FF2,F
....................                write_eeprom(0x0B,RxD_Buff[13]);
047F0:  MOVFF  FF2,00
047F4:  BCF    FF2.7
047F6:  CLRF   FAA
047F8:  MOVLW  0B
047FA:  MOVWF  FA9
047FC:  MOVFF  187,FA8
04800:  BCF    FA6.6
04802:  BCF    FA6.7
04804:  BSF    FA6.2
04806:  MOVLW  55
04808:  MOVWF  FA7
0480A:  MOVLW  AA
0480C:  MOVWF  FA7
0480E:  BSF    FA6.1
04810:  BTFSC  FA6.1
04812:  BRA    4810
04814:  BCF    FA6.2
04816:  MOVF   00,W
04818:  IORWF  FF2,F
....................                write_eeprom(0x0C,RxD_Buff[14]);
0481A:  MOVFF  FF2,00
0481E:  BCF    FF2.7
04820:  CLRF   FAA
04822:  MOVLW  0C
04824:  MOVWF  FA9
04826:  MOVFF  188,FA8
0482A:  BCF    FA6.6
0482C:  BCF    FA6.7
0482E:  BSF    FA6.2
04830:  MOVLW  55
04832:  MOVWF  FA7
04834:  MOVLW  AA
04836:  MOVWF  FA7
04838:  BSF    FA6.1
0483A:  BTFSC  FA6.1
0483C:  BRA    483A
0483E:  BCF    FA6.2
04840:  MOVF   00,W
04842:  IORWF  FF2,F
....................     
....................                write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
04844:  MOVFF  FF2,00
04848:  BCF    FF2.7
0484A:  CLRF   FAA
0484C:  MOVLW  0D
0484E:  MOVWF  FA9
04850:  MOVFF  189,FA8
04854:  BCF    FA6.6
04856:  BCF    FA6.7
04858:  BSF    FA6.2
0485A:  MOVLW  55
0485C:  MOVWF  FA7
0485E:  MOVLW  AA
04860:  MOVWF  FA7
04862:  BSF    FA6.1
04864:  BTFSC  FA6.1
04866:  BRA    4864
04868:  BCF    FA6.2
0486A:  MOVF   00,W
0486C:  IORWF  FF2,F
....................                write_eeprom(0x0E,RxD_Buff[16]);
0486E:  MOVFF  FF2,00
04872:  BCF    FF2.7
04874:  CLRF   FAA
04876:  MOVLW  0E
04878:  MOVWF  FA9
0487A:  MOVFF  18A,FA8
0487E:  BCF    FA6.6
04880:  BCF    FA6.7
04882:  BSF    FA6.2
04884:  MOVLW  55
04886:  MOVWF  FA7
04888:  MOVLW  AA
0488A:  MOVWF  FA7
0488C:  BSF    FA6.1
0488E:  BTFSC  FA6.1
04890:  BRA    488E
04892:  BCF    FA6.2
04894:  MOVF   00,W
04896:  IORWF  FF2,F
....................                write_eeprom(0x0F,RxD_Buff[17]);
04898:  MOVFF  FF2,00
0489C:  BCF    FF2.7
0489E:  CLRF   FAA
048A0:  MOVLW  0F
048A2:  MOVWF  FA9
048A4:  MOVFF  18B,FA8
048A8:  BCF    FA6.6
048AA:  BCF    FA6.7
048AC:  BSF    FA6.2
048AE:  MOVLW  55
048B0:  MOVWF  FA7
048B2:  MOVLW  AA
048B4:  MOVWF  FA7
048B6:  BSF    FA6.1
048B8:  BTFSC  FA6.1
048BA:  BRA    48B8
048BC:  BCF    FA6.2
048BE:  MOVF   00,W
048C0:  IORWF  FF2,F
....................    
....................                // LED Colour Config
....................                write_eeprom(0x10,RxD_Buff[18]); //Red1_8
048C2:  MOVFF  FF2,00
048C6:  BCF    FF2.7
048C8:  CLRF   FAA
048CA:  MOVLW  10
048CC:  MOVWF  FA9
048CE:  MOVFF  18C,FA8
048D2:  BCF    FA6.6
048D4:  BCF    FA6.7
048D6:  BSF    FA6.2
048D8:  MOVLW  55
048DA:  MOVWF  FA7
048DC:  MOVLW  AA
048DE:  MOVWF  FA7
048E0:  BSF    FA6.1
048E2:  BTFSC  FA6.1
048E4:  BRA    48E2
048E6:  BCF    FA6.2
048E8:  MOVF   00,W
048EA:  IORWF  FF2,F
....................                write_eeprom(0x11,RxD_Buff[19]); //Red9_10
048EC:  MOVFF  FF2,00
048F0:  BCF    FF2.7
048F2:  CLRF   FAA
048F4:  MOVLW  11
048F6:  MOVWF  FA9
048F8:  MOVFF  18D,FA8
048FC:  BCF    FA6.6
048FE:  BCF    FA6.7
04900:  BSF    FA6.2
04902:  MOVLW  55
04904:  MOVWF  FA7
04906:  MOVLW  AA
04908:  MOVWF  FA7
0490A:  BSF    FA6.1
0490C:  BTFSC  FA6.1
0490E:  BRA    490C
04910:  BCF    FA6.2
04912:  MOVF   00,W
04914:  IORWF  FF2,F
....................                write_eeprom(0x12,RxD_Buff[20]); //Red11_18
04916:  MOVFF  FF2,00
0491A:  BCF    FF2.7
0491C:  CLRF   FAA
0491E:  MOVLW  12
04920:  MOVWF  FA9
04922:  MOVFF  18E,FA8
04926:  BCF    FA6.6
04928:  BCF    FA6.7
0492A:  BSF    FA6.2
0492C:  MOVLW  55
0492E:  MOVWF  FA7
04930:  MOVLW  AA
04932:  MOVWF  FA7
04934:  BSF    FA6.1
04936:  BTFSC  FA6.1
04938:  BRA    4936
0493A:  BCF    FA6.2
0493C:  MOVF   00,W
0493E:  IORWF  FF2,F
....................                write_eeprom(0x13,RxD_Buff[21]); //Red19_20
04940:  MOVFF  FF2,00
04944:  BCF    FF2.7
04946:  CLRF   FAA
04948:  MOVLW  13
0494A:  MOVWF  FA9
0494C:  MOVFF  18F,FA8
04950:  BCF    FA6.6
04952:  BCF    FA6.7
04954:  BSF    FA6.2
04956:  MOVLW  55
04958:  MOVWF  FA7
0495A:  MOVLW  AA
0495C:  MOVWF  FA7
0495E:  BSF    FA6.1
04960:  BTFSC  FA6.1
04962:  BRA    4960
04964:  BCF    FA6.2
04966:  MOVF   00,W
04968:  IORWF  FF2,F
....................                write_eeprom(0x14,RxD_Buff[22]); //Green1_8
0496A:  MOVFF  FF2,00
0496E:  BCF    FF2.7
04970:  CLRF   FAA
04972:  MOVLW  14
04974:  MOVWF  FA9
04976:  MOVFF  190,FA8
0497A:  BCF    FA6.6
0497C:  BCF    FA6.7
0497E:  BSF    FA6.2
04980:  MOVLW  55
04982:  MOVWF  FA7
04984:  MOVLW  AA
04986:  MOVWF  FA7
04988:  BSF    FA6.1
0498A:  BTFSC  FA6.1
0498C:  BRA    498A
0498E:  BCF    FA6.2
04990:  MOVF   00,W
04992:  IORWF  FF2,F
....................                write_eeprom(0x15,RxD_Buff[23]); //Green9_10
04994:  MOVFF  FF2,00
04998:  BCF    FF2.7
0499A:  CLRF   FAA
0499C:  MOVLW  15
0499E:  MOVWF  FA9
049A0:  MOVFF  191,FA8
049A4:  BCF    FA6.6
049A6:  BCF    FA6.7
049A8:  BSF    FA6.2
049AA:  MOVLW  55
049AC:  MOVWF  FA7
049AE:  MOVLW  AA
049B0:  MOVWF  FA7
049B2:  BSF    FA6.1
049B4:  BTFSC  FA6.1
049B6:  BRA    49B4
049B8:  BCF    FA6.2
049BA:  MOVF   00,W
049BC:  IORWF  FF2,F
....................                write_eeprom(0x16,RxD_Buff[24]); //Green11_18
049BE:  MOVFF  FF2,00
049C2:  BCF    FF2.7
049C4:  CLRF   FAA
049C6:  MOVLW  16
049C8:  MOVWF  FA9
049CA:  MOVFF  192,FA8
049CE:  BCF    FA6.6
049D0:  BCF    FA6.7
049D2:  BSF    FA6.2
049D4:  MOVLW  55
049D6:  MOVWF  FA7
049D8:  MOVLW  AA
049DA:  MOVWF  FA7
049DC:  BSF    FA6.1
049DE:  BTFSC  FA6.1
049E0:  BRA    49DE
049E2:  BCF    FA6.2
049E4:  MOVF   00,W
049E6:  IORWF  FF2,F
....................                write_eeprom(0x17,RxD_Buff[25]); //Green19_20
049E8:  MOVFF  FF2,00
049EC:  BCF    FF2.7
049EE:  CLRF   FAA
049F0:  MOVLW  17
049F2:  MOVWF  FA9
049F4:  MOVFF  193,FA8
049F8:  BCF    FA6.6
049FA:  BCF    FA6.7
049FC:  BSF    FA6.2
049FE:  MOVLW  55
04A00:  MOVWF  FA7
04A02:  MOVLW  AA
04A04:  MOVWF  FA7
04A06:  BSF    FA6.1
04A08:  BTFSC  FA6.1
04A0A:  BRA    4A08
04A0C:  BCF    FA6.2
04A0E:  MOVF   00,W
04A10:  IORWF  FF2,F
....................                   
....................                write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
04A12:  MOVFF  FF2,00
04A16:  BCF    FF2.7
04A18:  CLRF   FAA
04A1A:  MOVLW  18
04A1C:  MOVWF  FA9
04A1E:  MOVFF  194,FA8
04A22:  BCF    FA6.6
04A24:  BCF    FA6.7
04A26:  BSF    FA6.2
04A28:  MOVLW  55
04A2A:  MOVWF  FA7
04A2C:  MOVLW  AA
04A2E:  MOVWF  FA7
04A30:  BSF    FA6.1
04A32:  BTFSC  FA6.1
04A34:  BRA    4A32
04A36:  BCF    FA6.2
04A38:  MOVF   00,W
04A3A:  IORWF  FF2,F
....................                write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
04A3C:  MOVFF  FF2,00
04A40:  BCF    FF2.7
04A42:  CLRF   FAA
04A44:  MOVLW  19
04A46:  MOVWF  FA9
04A48:  MOVFF  195,FA8
04A4C:  BCF    FA6.6
04A4E:  BCF    FA6.7
04A50:  BSF    FA6.2
04A52:  MOVLW  55
04A54:  MOVWF  FA7
04A56:  MOVLW  AA
04A58:  MOVWF  FA7
04A5A:  BSF    FA6.1
04A5C:  BTFSC  FA6.1
04A5E:  BRA    4A5C
04A60:  BCF    FA6.2
04A62:  MOVF   00,W
04A64:  IORWF  FF2,F
....................                write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
04A66:  MOVFF  FF2,00
04A6A:  BCF    FF2.7
04A6C:  CLRF   FAA
04A6E:  MOVLW  1A
04A70:  MOVWF  FA9
04A72:  MOVFF  196,FA8
04A76:  BCF    FA6.6
04A78:  BCF    FA6.7
04A7A:  BSF    FA6.2
04A7C:  MOVLW  55
04A7E:  MOVWF  FA7
04A80:  MOVLW  AA
04A82:  MOVWF  FA7
04A84:  BSF    FA6.1
04A86:  BTFSC  FA6.1
04A88:  BRA    4A86
04A8A:  BCF    FA6.2
04A8C:  MOVF   00,W
04A8E:  IORWF  FF2,F
....................                write_eeprom(0x1B,RxD_Buff[29]);   //No of point
04A90:  MOVFF  FF2,00
04A94:  BCF    FF2.7
04A96:  CLRF   FAA
04A98:  MOVLW  1B
04A9A:  MOVWF  FA9
04A9C:  MOVFF  197,FA8
04AA0:  BCF    FA6.6
04AA2:  BCF    FA6.7
04AA4:  BSF    FA6.2
04AA6:  MOVLW  55
04AA8:  MOVWF  FA7
04AAA:  MOVLW  AA
04AAC:  MOVWF  FA7
04AAE:  BSF    FA6.1
04AB0:  BTFSC  FA6.1
04AB2:  BRA    4AB0
04AB4:  BCF    FA6.2
04AB6:  MOVF   00,W
04AB8:  IORWF  FF2,F
....................                write_eeprom(0x1C,RxD_Buff[30]);   //Master / Slave
04ABA:  MOVFF  FF2,00
04ABE:  BCF    FF2.7
04AC0:  CLRF   FAA
04AC2:  MOVLW  1C
04AC4:  MOVWF  FA9
04AC6:  MOVFF  198,FA8
04ACA:  BCF    FA6.6
04ACC:  BCF    FA6.7
04ACE:  BSF    FA6.2
04AD0:  MOVLW  55
04AD2:  MOVWF  FA7
04AD4:  MOVLW  AA
04AD6:  MOVWF  FA7
04AD8:  BSF    FA6.1
04ADA:  BTFSC  FA6.1
04ADC:  BRA    4ADA
04ADE:  BCF    FA6.2
04AE0:  MOVF   00,W
04AE2:  IORWF  FF2,F
....................                write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
04AE4:  MOVFF  FF2,00
04AE8:  BCF    FF2.7
04AEA:  CLRF   FAA
04AEC:  MOVLW  1D
04AEE:  MOVWF  FA9
04AF0:  MOVFF  199,FA8
04AF4:  BCF    FA6.6
04AF6:  BCF    FA6.7
04AF8:  BSF    FA6.2
04AFA:  MOVLW  55
04AFC:  MOVWF  FA7
04AFE:  MOVLW  AA
04B00:  MOVWF  FA7
04B02:  BSF    FA6.1
04B04:  BTFSC  FA6.1
04B06:  BRA    4B04
04B08:  BCF    FA6.2
04B0A:  MOVF   00,W
04B0C:  IORWF  FF2,F
....................    
....................                write_eeprom(0x1E,RxD_Buff[32]);   //Communication Address
04B0E:  MOVFF  FF2,00
04B12:  BCF    FF2.7
04B14:  CLRF   FAA
04B16:  MOVLW  1E
04B18:  MOVWF  FA9
04B1A:  MOVFF  19A,FA8
04B1E:  BCF    FA6.6
04B20:  BCF    FA6.7
04B22:  BSF    FA6.2
04B24:  MOVLW  55
04B26:  MOVWF  FA7
04B28:  MOVLW  AA
04B2A:  MOVWF  FA7
04B2C:  BSF    FA6.1
04B2E:  BTFSC  FA6.1
04B30:  BRA    4B2E
04B32:  BCF    FA6.2
04B34:  MOVF   00,W
04B36:  IORWF  FF2,F
....................                write_eeprom(0x1F,RxD_Buff[33]);   //Communication Address
04B38:  MOVFF  FF2,00
04B3C:  BCF    FF2.7
04B3E:  CLRF   FAA
04B40:  MOVLW  1F
04B42:  MOVWF  FA9
04B44:  MOVFF  19B,FA8
04B48:  BCF    FA6.6
04B4A:  BCF    FA6.7
04B4C:  BSF    FA6.2
04B4E:  MOVLW  55
04B50:  MOVWF  FA7
04B52:  MOVLW  AA
04B54:  MOVWF  FA7
04B56:  BSF    FA6.1
04B58:  BTFSC  FA6.1
04B5A:  BRA    4B58
04B5C:  BCF    FA6.2
04B5E:  MOVF   00,W
04B60:  IORWF  FF2,F
....................                write_eeprom(0x20,RxD_Buff[34]);   //Communication Address
04B62:  MOVFF  FF2,00
04B66:  BCF    FF2.7
04B68:  CLRF   FAA
04B6A:  MOVLW  20
04B6C:  MOVWF  FA9
04B6E:  MOVFF  19C,FA8
04B72:  BCF    FA6.6
04B74:  BCF    FA6.7
04B76:  BSF    FA6.2
04B78:  MOVLW  55
04B7A:  MOVWF  FA7
04B7C:  MOVLW  AA
04B7E:  MOVWF  FA7
04B80:  BSF    FA6.1
04B82:  BTFSC  FA6.1
04B84:  BRA    4B82
04B86:  BCF    FA6.2
04B88:  MOVF   00,W
04B8A:  IORWF  FF2,F
....................                write_eeprom(0x21,RxD_Buff[35]);   //Communication Address
04B8C:  MOVFF  FF2,00
04B90:  BCF    FF2.7
04B92:  CLRF   FAA
04B94:  MOVLW  21
04B96:  MOVWF  FA9
04B98:  MOVFF  19D,FA8
04B9C:  BCF    FA6.6
04B9E:  BCF    FA6.7
04BA0:  BSF    FA6.2
04BA2:  MOVLW  55
04BA4:  MOVWF  FA7
04BA6:  MOVLW  AA
04BA8:  MOVWF  FA7
04BAA:  BSF    FA6.1
04BAC:  BTFSC  FA6.1
04BAE:  BRA    4BAC
04BB0:  BCF    FA6.2
04BB2:  MOVF   00,W
04BB4:  IORWF  FF2,F
....................                write_eeprom(0x22,RxD_Buff[36]);   //Communication Address
04BB6:  MOVFF  FF2,00
04BBA:  BCF    FF2.7
04BBC:  CLRF   FAA
04BBE:  MOVLW  22
04BC0:  MOVWF  FA9
04BC2:  MOVFF  19E,FA8
04BC6:  BCF    FA6.6
04BC8:  BCF    FA6.7
04BCA:  BSF    FA6.2
04BCC:  MOVLW  55
04BCE:  MOVWF  FA7
04BD0:  MOVLW  AA
04BD2:  MOVWF  FA7
04BD4:  BSF    FA6.1
04BD6:  BTFSC  FA6.1
04BD8:  BRA    4BD6
04BDA:  BCF    FA6.2
04BDC:  MOVF   00,W
04BDE:  IORWF  FF2,F
....................                write_eeprom(0x23,RxD_Buff[37]);   //Communication Address
04BE0:  MOVFF  FF2,00
04BE4:  BCF    FF2.7
04BE6:  CLRF   FAA
04BE8:  MOVLW  23
04BEA:  MOVWF  FA9
04BEC:  MOVFF  19F,FA8
04BF0:  BCF    FA6.6
04BF2:  BCF    FA6.7
04BF4:  BSF    FA6.2
04BF6:  MOVLW  55
04BF8:  MOVWF  FA7
04BFA:  MOVLW  AA
04BFC:  MOVWF  FA7
04BFE:  BSF    FA6.1
04C00:  BTFSC  FA6.1
04C02:  BRA    4C00
04C04:  BCF    FA6.2
04C06:  MOVF   00,W
04C08:  IORWF  FF2,F
....................                write_eeprom(0x24,RxD_Buff[38]);   //Communication Address
04C0A:  MOVFF  FF2,00
04C0E:  BCF    FF2.7
04C10:  CLRF   FAA
04C12:  MOVLW  24
04C14:  MOVWF  FA9
04C16:  MOVFF  1A0,FA8
04C1A:  BCF    FA6.6
04C1C:  BCF    FA6.7
04C1E:  BSF    FA6.2
04C20:  MOVLW  55
04C22:  MOVWF  FA7
04C24:  MOVLW  AA
04C26:  MOVWF  FA7
04C28:  BSF    FA6.1
04C2A:  BTFSC  FA6.1
04C2C:  BRA    4C2A
04C2E:  BCF    FA6.2
04C30:  MOVF   00,W
04C32:  IORWF  FF2,F
....................                write_eeprom(0x25,RxD_Buff[39]);   //Communication Address
04C34:  MOVFF  FF2,00
04C38:  BCF    FF2.7
04C3A:  CLRF   FAA
04C3C:  MOVLW  25
04C3E:  MOVWF  FA9
04C40:  MOVFF  1A1,FA8
04C44:  BCF    FA6.6
04C46:  BCF    FA6.7
04C48:  BSF    FA6.2
04C4A:  MOVLW  55
04C4C:  MOVWF  FA7
04C4E:  MOVLW  AA
04C50:  MOVWF  FA7
04C52:  BSF    FA6.1
04C54:  BTFSC  FA6.1
04C56:  BRA    4C54
04C58:  BCF    FA6.2
04C5A:  MOVF   00,W
04C5C:  IORWF  FF2,F
....................                write_eeprom(0x26,RxD_Buff[40]);   //Communication Address
04C5E:  MOVFF  FF2,00
04C62:  BCF    FF2.7
04C64:  CLRF   FAA
04C66:  MOVLW  26
04C68:  MOVWF  FA9
04C6A:  MOVFF  1A2,FA8
04C6E:  BCF    FA6.6
04C70:  BCF    FA6.7
04C72:  BSF    FA6.2
04C74:  MOVLW  55
04C76:  MOVWF  FA7
04C78:  MOVLW  AA
04C7A:  MOVWF  FA7
04C7C:  BSF    FA6.1
04C7E:  BTFSC  FA6.1
04C80:  BRA    4C7E
04C82:  BCF    FA6.2
04C84:  MOVF   00,W
04C86:  IORWF  FF2,F
....................                write_eeprom(0x27,RxD_Buff[41]);   //Communication Address
04C88:  MOVFF  FF2,00
04C8C:  BCF    FF2.7
04C8E:  CLRF   FAA
04C90:  MOVLW  27
04C92:  MOVWF  FA9
04C94:  MOVFF  1A3,FA8
04C98:  BCF    FA6.6
04C9A:  BCF    FA6.7
04C9C:  BSF    FA6.2
04C9E:  MOVLW  55
04CA0:  MOVWF  FA7
04CA2:  MOVLW  AA
04CA4:  MOVWF  FA7
04CA6:  BSF    FA6.1
04CA8:  BTFSC  FA6.1
04CAA:  BRA    4CA8
04CAC:  BCF    FA6.2
04CAE:  MOVF   00,W
04CB0:  IORWF  FF2,F
....................                write_eeprom(0x28,RxD_Buff[42]);   //Communication Address
04CB2:  MOVFF  FF2,00
04CB6:  BCF    FF2.7
04CB8:  CLRF   FAA
04CBA:  MOVLW  28
04CBC:  MOVWF  FA9
04CBE:  MOVFF  1A4,FA8
04CC2:  BCF    FA6.6
04CC4:  BCF    FA6.7
04CC6:  BSF    FA6.2
04CC8:  MOVLW  55
04CCA:  MOVWF  FA7
04CCC:  MOVLW  AA
04CCE:  MOVWF  FA7
04CD0:  BSF    FA6.1
04CD2:  BTFSC  FA6.1
04CD4:  BRA    4CD2
04CD6:  BCF    FA6.2
04CD8:  MOVF   00,W
04CDA:  IORWF  FF2,F
....................                write_eeprom(0x29,RxD_Buff[43]);   //Communication Address
04CDC:  MOVFF  FF2,00
04CE0:  BCF    FF2.7
04CE2:  CLRF   FAA
04CE4:  MOVLW  29
04CE6:  MOVWF  FA9
04CE8:  MOVFF  1A5,FA8
04CEC:  BCF    FA6.6
04CEE:  BCF    FA6.7
04CF0:  BSF    FA6.2
04CF2:  MOVLW  55
04CF4:  MOVWF  FA7
04CF6:  MOVLW  AA
04CF8:  MOVWF  FA7
04CFA:  BSF    FA6.1
04CFC:  BTFSC  FA6.1
04CFE:  BRA    4CFC
04D00:  BCF    FA6.2
04D02:  MOVF   00,W
04D04:  IORWF  FF2,F
....................                write_eeprom(0x2A,RxD_Buff[44]);   //Communication Address
04D06:  MOVFF  FF2,00
04D0A:  BCF    FF2.7
04D0C:  CLRF   FAA
04D0E:  MOVLW  2A
04D10:  MOVWF  FA9
04D12:  MOVFF  1A6,FA8
04D16:  BCF    FA6.6
04D18:  BCF    FA6.7
04D1A:  BSF    FA6.2
04D1C:  MOVLW  55
04D1E:  MOVWF  FA7
04D20:  MOVLW  AA
04D22:  MOVWF  FA7
04D24:  BSF    FA6.1
04D26:  BTFSC  FA6.1
04D28:  BRA    4D26
04D2A:  BCF    FA6.2
04D2C:  MOVF   00,W
04D2E:  IORWF  FF2,F
....................                write_eeprom(0x2B,RxD_Buff[45]);   //Communication Address
04D30:  MOVFF  FF2,00
04D34:  BCF    FF2.7
04D36:  CLRF   FAA
04D38:  MOVLW  2B
04D3A:  MOVWF  FA9
04D3C:  MOVFF  1A7,FA8
04D40:  BCF    FA6.6
04D42:  BCF    FA6.7
04D44:  BSF    FA6.2
04D46:  MOVLW  55
04D48:  MOVWF  FA7
04D4A:  MOVLW  AA
04D4C:  MOVWF  FA7
04D4E:  BSF    FA6.1
04D50:  BTFSC  FA6.1
04D52:  BRA    4D50
04D54:  BCF    FA6.2
04D56:  MOVF   00,W
04D58:  IORWF  FF2,F
....................                write_eeprom(0x2C,RxD_Buff[46]);   //Communication Address
04D5A:  MOVFF  FF2,00
04D5E:  BCF    FF2.7
04D60:  CLRF   FAA
04D62:  MOVLW  2C
04D64:  MOVWF  FA9
04D66:  MOVFF  1A8,FA8
04D6A:  BCF    FA6.6
04D6C:  BCF    FA6.7
04D6E:  BSF    FA6.2
04D70:  MOVLW  55
04D72:  MOVWF  FA7
04D74:  MOVLW  AA
04D76:  MOVWF  FA7
04D78:  BSF    FA6.1
04D7A:  BTFSC  FA6.1
04D7C:  BRA    4D7A
04D7E:  BCF    FA6.2
04D80:  MOVF   00,W
04D82:  IORWF  FF2,F
....................                write_eeprom(0x2D,RxD_Buff[47]);   //Communication Address
04D84:  MOVFF  FF2,00
04D88:  BCF    FF2.7
04D8A:  CLRF   FAA
04D8C:  MOVLW  2D
04D8E:  MOVWF  FA9
04D90:  MOVFF  1A9,FA8
04D94:  BCF    FA6.6
04D96:  BCF    FA6.7
04D98:  BSF    FA6.2
04D9A:  MOVLW  55
04D9C:  MOVWF  FA7
04D9E:  MOVLW  AA
04DA0:  MOVWF  FA7
04DA2:  BSF    FA6.1
04DA4:  BTFSC  FA6.1
04DA6:  BRA    4DA4
04DA8:  BCF    FA6.2
04DAA:  MOVF   00,W
04DAC:  IORWF  FF2,F
....................                write_eeprom(0x2E,RxD_Buff[48]);   //Communication Address
04DAE:  MOVFF  FF2,00
04DB2:  BCF    FF2.7
04DB4:  CLRF   FAA
04DB6:  MOVLW  2E
04DB8:  MOVWF  FA9
04DBA:  MOVFF  1AA,FA8
04DBE:  BCF    FA6.6
04DC0:  BCF    FA6.7
04DC2:  BSF    FA6.2
04DC4:  MOVLW  55
04DC6:  MOVWF  FA7
04DC8:  MOVLW  AA
04DCA:  MOVWF  FA7
04DCC:  BSF    FA6.1
04DCE:  BTFSC  FA6.1
04DD0:  BRA    4DCE
04DD2:  BCF    FA6.2
04DD4:  MOVF   00,W
04DD6:  IORWF  FF2,F
....................                write_eeprom(0x2F,RxD_Buff[49]);   //Communication Address
04DD8:  MOVFF  FF2,00
04DDC:  BCF    FF2.7
04DDE:  CLRF   FAA
04DE0:  MOVLW  2F
04DE2:  MOVWF  FA9
04DE4:  MOVFF  1AB,FA8
04DE8:  BCF    FA6.6
04DEA:  BCF    FA6.7
04DEC:  BSF    FA6.2
04DEE:  MOVLW  55
04DF0:  MOVWF  FA7
04DF2:  MOVLW  AA
04DF4:  MOVWF  FA7
04DF6:  BSF    FA6.1
04DF8:  BTFSC  FA6.1
04DFA:  BRA    4DF8
04DFC:  BCF    FA6.2
04DFE:  MOVF   00,W
04E00:  IORWF  FF2,F
....................                write_eeprom(0x30,RxD_Buff[50]);   //Communication Address
04E02:  MOVFF  FF2,00
04E06:  BCF    FF2.7
04E08:  CLRF   FAA
04E0A:  MOVLW  30
04E0C:  MOVWF  FA9
04E0E:  MOVFF  1AC,FA8
04E12:  BCF    FA6.6
04E14:  BCF    FA6.7
04E16:  BSF    FA6.2
04E18:  MOVLW  55
04E1A:  MOVWF  FA7
04E1C:  MOVLW  AA
04E1E:  MOVWF  FA7
04E20:  BSF    FA6.1
04E22:  BTFSC  FA6.1
04E24:  BRA    4E22
04E26:  BCF    FA6.2
04E28:  MOVF   00,W
04E2A:  IORWF  FF2,F
....................                write_eeprom(0x31,RxD_Buff[51]);   //Communication Address
04E2C:  MOVFF  FF2,00
04E30:  BCF    FF2.7
04E32:  CLRF   FAA
04E34:  MOVLW  31
04E36:  MOVWF  FA9
04E38:  MOVFF  1AD,FA8
04E3C:  BCF    FA6.6
04E3E:  BCF    FA6.7
04E40:  BSF    FA6.2
04E42:  MOVLW  55
04E44:  MOVWF  FA7
04E46:  MOVLW  AA
04E48:  MOVWF  FA7
04E4A:  BSF    FA6.1
04E4C:  BTFSC  FA6.1
04E4E:  BRA    4E4C
04E50:  BCF    FA6.2
04E52:  MOVF   00,W
04E54:  IORWF  FF2,F
....................                
....................                int16  a = 0; 
....................                unsigned char  phonenum;
04E56:  MOVLB  C
04E58:  CLRF   x1C
04E5A:  CLRF   x1B
....................                for(; ; a++)
....................                {
....................                   restart_wdt();
04E5C:  CLRWDT
....................                   phonenum = RxD_Buff[52 + a];
04E5E:  MOVLW  AE
04E60:  ADDWF  x1B,W
04E62:  MOVWF  FE9
04E64:  MOVLW  01
04E66:  ADDWFC x1C,W
04E68:  MOVWF  FEA
04E6A:  MOVFF  FEF,C1D
....................                   if((phonenum == 0x0D) || (a > 15))
04E6E:  MOVF   x1D,W
04E70:  SUBLW  0D
04E72:  BZ    4E7E
04E74:  MOVF   x1C,F
04E76:  BNZ   4E7E
04E78:  MOVF   x1B,W
04E7A:  SUBLW  0F
04E7C:  BC    4ECC
....................                   {
....................                      sms_phonenumber[a] =  '\0' ;
04E7E:  MOVLW  8B
04E80:  ADDWF  x1B,W
04E82:  MOVWF  FE9
04E84:  MOVLW  09
04E86:  ADDWFC x1C,W
04E88:  MOVWF  FEA
04E8A:  CLRF   FEF
....................                      write_eeprom(0x32+a,phonenum);
04E8C:  MOVLW  32
04E8E:  ADDWF  x1B,W
04E90:  MOVWF  x24
04E92:  MOVLW  00
04E94:  ADDWFC x1C,W
04E96:  MOVWF  x25
04E98:  MOVF   FF2,W
04E9A:  MOVWF  00
04E9C:  BCF    FF2.7
04E9E:  MOVFF  C25,FAA
04EA2:  MOVFF  C24,FA9
04EA6:  MOVFF  C1D,FA8
04EAA:  BCF    FA6.6
04EAC:  BCF    FA6.7
04EAE:  BSF    FA6.2
04EB0:  MOVLB  F
04EB2:  MOVLW  55
04EB4:  MOVWF  FA7
04EB6:  MOVLW  AA
04EB8:  MOVWF  FA7
04EBA:  BSF    FA6.1
04EBC:  BTFSC  FA6.1
04EBE:  BRA    4EBC
04EC0:  BCF    FA6.2
04EC2:  MOVF   00,W
04EC4:  IORWF  FF2,F
....................                      break;
04EC6:  BRA    4F22
....................                   }
04EC8:  BRA    4F16
04ECA:  MOVLB  C
....................                   else
....................                   {
....................                      sms_phonenumber[a] = phonenum;
04ECC:  MOVLW  8B
04ECE:  ADDWF  x1B,W
04ED0:  MOVWF  FE9
04ED2:  MOVLW  09
04ED4:  ADDWFC x1C,W
04ED6:  MOVWF  FEA
04ED8:  MOVFF  C1D,FEF
....................                      
....................                      write_eeprom(0x32+a,phonenum);
04EDC:  MOVLW  32
04EDE:  ADDWF  x1B,W
04EE0:  MOVWF  x24
04EE2:  MOVLW  00
04EE4:  ADDWFC x1C,W
04EE6:  MOVWF  x25
04EE8:  MOVF   FF2,W
04EEA:  MOVWF  00
04EEC:  BCF    FF2.7
04EEE:  MOVFF  C25,FAA
04EF2:  MOVFF  C24,FA9
04EF6:  MOVFF  C1D,FA8
04EFA:  BCF    FA6.6
04EFC:  BCF    FA6.7
04EFE:  BSF    FA6.2
04F00:  MOVLB  F
04F02:  MOVLW  55
04F04:  MOVWF  FA7
04F06:  MOVLW  AA
04F08:  MOVWF  FA7
04F0A:  BSF    FA6.1
04F0C:  BTFSC  FA6.1
04F0E:  BRA    4F0C
04F10:  BCF    FA6.2
04F12:  MOVF   00,W
04F14:  IORWF  FF2,F
....................                   }
04F16:  MOVLB  C
04F18:  INCF   x1B,F
04F1A:  BTFSC  FD8.2
04F1C:  INCF   x1C,F
04F1E:  BRA    4E5C
04F20:  MOVLB  F
....................                }
....................             
....................             
....................                TxD_Buff[0] = Address ;         //Address
04F22:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x21 ;            //return function code
04F26:  MOVLW  21
04F28:  MOVLB  0
04F2A:  MOVWF  x7C
....................    
....................                CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
04F2C:  MOVLB  C
04F2E:  CLRF   x26
04F30:  MOVLW  7B
04F32:  MOVWF  x25
04F34:  MOVLW  02
04F36:  MOVWF  x27
04F38:  MOVLB  0
04F3A:  CALL   2ED4
....................    
....................                TxD_Buff[2] = CRC_Hi ;
04F3E:  MOVFF  57B,7D
....................                TxD_Buff[3] = CRC_Lo ;
04F42:  MOVFF  57A,7E
....................    
....................                output_bit(P485ctrl,1);
04F46:  BSF    F8A.3
04F48:  BCF    F93.3
....................                delay_ms(10);
04F4A:  MOVLW  0A
04F4C:  MOVLB  C
04F4E:  MOVWF  x24
04F50:  MOVLB  0
04F52:  CALL   0936
....................    
....................                putc(Txd_Buff[0]);
04F56:  MOVF   x7B,W
04F58:  CALL   2F2A
....................                putc(Txd_Buff[1]);
04F5C:  MOVF   x7C,W
04F5E:  CALL   2F2A
....................                putc(Txd_Buff[2]);
04F62:  MOVF   x7D,W
04F64:  CALL   2F2A
....................                putc(Txd_Buff[3]);
04F68:  MOVF   x7E,W
04F6A:  CALL   2F2A
....................    
....................                delay_ms(3);
04F6E:  MOVLW  03
04F70:  MOVLB  C
04F72:  MOVWF  x24
04F74:  MOVLB  0
04F76:  CALL   0936
....................                output_bit(P485ctrl,0);
04F7A:  BCF    F8A.3
04F7C:  BCF    F93.3
....................                
....................                reset_cpu();
04F7E:  RESET
....................                //Read_Config(); //jj
....................             }
04F80:  GOTO   6096
04F84:  MOVLB  1
....................             
....................             else if(RxD_Buff[1] == 0x22)///////////// WRITE Faultname /////////////////////
04F86:  MOVF   x7B,W
04F88:  SUBLW  22
04F8A:  BTFSS  FD8.2
04F8C:  GOTO   6096
....................             {
....................                
....................                //SMS_Massage
....................                int16  i =4,j=0,k=0; //i =4 are first data from RxD_Buff[]
04F90:  MOVLB  C
04F92:  CLRF   x1F
04F94:  MOVLW  04
04F96:  MOVWF  x1E
04F98:  CLRF   x21
04F9A:  CLRF   x20
04F9C:  CLRF   x23
04F9E:  CLRF   x22
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
04FA0:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
04FA2:  MOVLW  7A
04FA4:  ADDWF  x1E,W
04FA6:  MOVWF  FE9
04FA8:  MOVLW  01
04FAA:  ADDWFC x1F,W
04FAC:  MOVWF  FEA
04FAE:  MOVF   FEF,W
04FB0:  SUBLW  0D
04FB2:  BZ    4FBE
04FB4:  MOVF   x21,F
04FB6:  BNZ   4FBE
04FB8:  MOVF   x20,W
04FBA:  SUBLW  1E
04FBC:  BC    4FFE
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
04FBE:  MOVLW  5D
04FC0:  ADDWF  x1E,W
04FC2:  MOVWF  x24
04FC4:  MOVLW  00
04FC6:  ADDWFC x1F,W
04FC8:  MOVWF  x25
04FCA:  MOVF   FF2,W
04FCC:  MOVWF  00
04FCE:  BCF    FF2.7
04FD0:  MOVFF  C25,FAA
04FD4:  MOVFF  C24,FA9
04FD8:  MOVLW  0D
04FDA:  MOVWF  FA8
04FDC:  BCF    FA6.6
04FDE:  BCF    FA6.7
04FE0:  BSF    FA6.2
04FE2:  MOVLB  F
04FE4:  MOVLW  55
04FE6:  MOVWF  FA7
04FE8:  MOVLW  AA
04FEA:  MOVWF  FA7
04FEC:  BSF    FA6.1
04FEE:  BTFSC  FA6.1
04FF0:  BRA    4FEE
04FF2:  BCF    FA6.2
04FF4:  MOVF   00,W
04FF6:  IORWF  FF2,F
....................                      break;
04FF8:  BRA    5088
....................                   }
04FFA:  BRA    5070
04FFC:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage1[j] = RxD_Buff[i];
04FFE:  MOVLW  9A
05000:  ADDWF  x20,W
05002:  MOVWF  01
05004:  MOVLW  09
05006:  ADDWFC x21,W
05008:  MOVWF  03
0500A:  MOVLW  7A
0500C:  ADDWF  x1E,W
0500E:  MOVWF  FE9
05010:  MOVLW  01
05012:  ADDWFC x1F,W
05014:  MOVWF  FEA
05016:  MOVFF  FEF,C26
0501A:  MOVFF  03,FEA
0501E:  MOVFF  01,FE9
05022:  MOVFF  C26,FEF
....................                      
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05026:  MOVLW  5D
05028:  ADDWF  x1E,W
0502A:  MOVWF  x24
0502C:  MOVLW  00
0502E:  ADDWFC x1F,W
05030:  MOVWF  x25
05032:  MOVLW  7A
05034:  ADDWF  x1E,W
05036:  MOVWF  FE9
05038:  MOVLW  01
0503A:  ADDWFC x1F,W
0503C:  MOVWF  FEA
0503E:  MOVFF  FEF,C26
05042:  MOVF   FF2,W
05044:  MOVWF  00
05046:  BCF    FF2.7
05048:  MOVFF  C25,FAA
0504C:  MOVFF  C24,FA9
05050:  MOVFF  C26,FA8
05054:  BCF    FA6.6
05056:  BCF    FA6.7
05058:  BSF    FA6.2
0505A:  MOVLB  F
0505C:  MOVLW  55
0505E:  MOVWF  FA7
05060:  MOVLW  AA
05062:  MOVWF  FA7
05064:  BSF    FA6.1
05066:  BTFSC  FA6.1
05068:  BRA    5066
0506A:  BCF    FA6.2
0506C:  MOVF   00,W
0506E:  IORWF  FF2,F
....................                   }
05070:  MOVLB  C
05072:  MOVFF  C1F,03
05076:  MOVF   x1E,W
05078:  INCF   x1E,F
0507A:  BTFSC  FD8.2
0507C:  INCF   x1F,F
0507E:  INCF   x20,F
05080:  BTFSC  FD8.2
05082:  INCF   x21,F
05084:  BRA    4FA0
05086:  MOVLB  F
....................                }
....................                SMS_Massage1[j] = '\0' ; // end string
05088:  MOVLW  9A
0508A:  MOVLB  C
0508C:  ADDWF  x20,W
0508E:  MOVWF  FE9
05090:  MOVLW  09
05092:  ADDWFC x21,W
05094:  MOVWF  FEA
05096:  CLRF   FEF
....................                
....................                j=0;
05098:  CLRF   x21
0509A:  CLRF   x20
....................                i++;
0509C:  INCF   x1E,F
0509E:  BTFSC  FD8.2
050A0:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
050A2:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
050A4:  MOVLW  7A
050A6:  ADDWF  x1E,W
050A8:  MOVWF  FE9
050AA:  MOVLW  01
050AC:  ADDWFC x1F,W
050AE:  MOVWF  FEA
050B0:  MOVF   FEF,W
050B2:  SUBLW  0D
050B4:  BZ    50C0
050B6:  MOVF   x21,F
050B8:  BNZ   50C0
050BA:  MOVF   x20,W
050BC:  SUBLW  1E
050BE:  BC    5100
....................                   {  
....................                      write_eeprom(0x5D+i,0x0D);
050C0:  MOVLW  5D
050C2:  ADDWF  x1E,W
050C4:  MOVWF  x24
050C6:  MOVLW  00
050C8:  ADDWFC x1F,W
050CA:  MOVWF  x25
050CC:  MOVF   FF2,W
050CE:  MOVWF  00
050D0:  BCF    FF2.7
050D2:  MOVFF  C25,FAA
050D6:  MOVFF  C24,FA9
050DA:  MOVLW  0D
050DC:  MOVWF  FA8
050DE:  BCF    FA6.6
050E0:  BCF    FA6.7
050E2:  BSF    FA6.2
050E4:  MOVLB  F
050E6:  MOVLW  55
050E8:  MOVWF  FA7
050EA:  MOVLW  AA
050EC:  MOVWF  FA7
050EE:  BSF    FA6.1
050F0:  BTFSC  FA6.1
050F2:  BRA    50F0
050F4:  BCF    FA6.2
050F6:  MOVF   00,W
050F8:  IORWF  FF2,F
....................                      break;
050FA:  BRA    518A
....................                   }
050FC:  BRA    5172
050FE:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage2[j] = RxD_Buff[i];
05100:  MOVLW  BA
05102:  ADDWF  x20,W
05104:  MOVWF  01
05106:  MOVLW  09
05108:  ADDWFC x21,W
0510A:  MOVWF  03
0510C:  MOVLW  7A
0510E:  ADDWF  x1E,W
05110:  MOVWF  FE9
05112:  MOVLW  01
05114:  ADDWFC x1F,W
05116:  MOVWF  FEA
05118:  MOVFF  FEF,C26
0511C:  MOVFF  03,FEA
05120:  MOVFF  01,FE9
05124:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05128:  MOVLW  5D
0512A:  ADDWF  x1E,W
0512C:  MOVWF  x24
0512E:  MOVLW  00
05130:  ADDWFC x1F,W
05132:  MOVWF  x25
05134:  MOVLW  7A
05136:  ADDWF  x1E,W
05138:  MOVWF  FE9
0513A:  MOVLW  01
0513C:  ADDWFC x1F,W
0513E:  MOVWF  FEA
05140:  MOVFF  FEF,C26
05144:  MOVF   FF2,W
05146:  MOVWF  00
05148:  BCF    FF2.7
0514A:  MOVFF  C25,FAA
0514E:  MOVFF  C24,FA9
05152:  MOVFF  C26,FA8
05156:  BCF    FA6.6
05158:  BCF    FA6.7
0515A:  BSF    FA6.2
0515C:  MOVLB  F
0515E:  MOVLW  55
05160:  MOVWF  FA7
05162:  MOVLW  AA
05164:  MOVWF  FA7
05166:  BSF    FA6.1
05168:  BTFSC  FA6.1
0516A:  BRA    5168
0516C:  BCF    FA6.2
0516E:  MOVF   00,W
05170:  IORWF  FF2,F
....................                   }
05172:  MOVLB  C
05174:  MOVFF  C1F,03
05178:  MOVF   x1E,W
0517A:  INCF   x1E,F
0517C:  BTFSC  FD8.2
0517E:  INCF   x1F,F
05180:  INCF   x20,F
05182:  BTFSC  FD8.2
05184:  INCF   x21,F
05186:  BRA    50A2
05188:  MOVLB  F
....................                }
....................                SMS_Massage2[j] = '\0' ; // end string
0518A:  MOVLW  BA
0518C:  MOVLB  C
0518E:  ADDWF  x20,W
05190:  MOVWF  FE9
05192:  MOVLW  09
05194:  ADDWFC x21,W
05196:  MOVWF  FEA
05198:  CLRF   FEF
....................                
....................                j=0;
0519A:  CLRF   x21
0519C:  CLRF   x20
....................                i++;
0519E:  INCF   x1E,F
051A0:  BTFSC  FD8.2
051A2:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
051A4:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
051A6:  MOVLW  7A
051A8:  ADDWF  x1E,W
051AA:  MOVWF  FE9
051AC:  MOVLW  01
051AE:  ADDWFC x1F,W
051B0:  MOVWF  FEA
051B2:  MOVF   FEF,W
051B4:  SUBLW  0D
051B6:  BZ    51C2
051B8:  MOVF   x21,F
051BA:  BNZ   51C2
051BC:  MOVF   x20,W
051BE:  SUBLW  1E
051C0:  BC    5202
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
051C2:  MOVLW  5D
051C4:  ADDWF  x1E,W
051C6:  MOVWF  x24
051C8:  MOVLW  00
051CA:  ADDWFC x1F,W
051CC:  MOVWF  x25
051CE:  MOVF   FF2,W
051D0:  MOVWF  00
051D2:  BCF    FF2.7
051D4:  MOVFF  C25,FAA
051D8:  MOVFF  C24,FA9
051DC:  MOVLW  0D
051DE:  MOVWF  FA8
051E0:  BCF    FA6.6
051E2:  BCF    FA6.7
051E4:  BSF    FA6.2
051E6:  MOVLB  F
051E8:  MOVLW  55
051EA:  MOVWF  FA7
051EC:  MOVLW  AA
051EE:  MOVWF  FA7
051F0:  BSF    FA6.1
051F2:  BTFSC  FA6.1
051F4:  BRA    51F2
051F6:  BCF    FA6.2
051F8:  MOVF   00,W
051FA:  IORWF  FF2,F
....................                      break;
051FC:  BRA    528C
....................                   }
051FE:  BRA    5274
05200:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage3[j] = RxD_Buff[i];
05202:  MOVLW  DA
05204:  ADDWF  x20,W
05206:  MOVWF  01
05208:  MOVLW  09
0520A:  ADDWFC x21,W
0520C:  MOVWF  03
0520E:  MOVLW  7A
05210:  ADDWF  x1E,W
05212:  MOVWF  FE9
05214:  MOVLW  01
05216:  ADDWFC x1F,W
05218:  MOVWF  FEA
0521A:  MOVFF  FEF,C26
0521E:  MOVFF  03,FEA
05222:  MOVFF  01,FE9
05226:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0522A:  MOVLW  5D
0522C:  ADDWF  x1E,W
0522E:  MOVWF  x24
05230:  MOVLW  00
05232:  ADDWFC x1F,W
05234:  MOVWF  x25
05236:  MOVLW  7A
05238:  ADDWF  x1E,W
0523A:  MOVWF  FE9
0523C:  MOVLW  01
0523E:  ADDWFC x1F,W
05240:  MOVWF  FEA
05242:  MOVFF  FEF,C26
05246:  MOVF   FF2,W
05248:  MOVWF  00
0524A:  BCF    FF2.7
0524C:  MOVFF  C25,FAA
05250:  MOVFF  C24,FA9
05254:  MOVFF  C26,FA8
05258:  BCF    FA6.6
0525A:  BCF    FA6.7
0525C:  BSF    FA6.2
0525E:  MOVLB  F
05260:  MOVLW  55
05262:  MOVWF  FA7
05264:  MOVLW  AA
05266:  MOVWF  FA7
05268:  BSF    FA6.1
0526A:  BTFSC  FA6.1
0526C:  BRA    526A
0526E:  BCF    FA6.2
05270:  MOVF   00,W
05272:  IORWF  FF2,F
....................                   }
05274:  MOVLB  C
05276:  MOVFF  C1F,03
0527A:  MOVF   x1E,W
0527C:  INCF   x1E,F
0527E:  BTFSC  FD8.2
05280:  INCF   x1F,F
05282:  INCF   x20,F
05284:  BTFSC  FD8.2
05286:  INCF   x21,F
05288:  BRA    51A4
0528A:  MOVLB  F
....................                }
....................                SMS_Massage3[j] = '\0' ; // end string
0528C:  MOVLW  DA
0528E:  MOVLB  C
05290:  ADDWF  x20,W
05292:  MOVWF  FE9
05294:  MOVLW  09
05296:  ADDWFC x21,W
05298:  MOVWF  FEA
0529A:  CLRF   FEF
....................                
....................                j=0;
0529C:  CLRF   x21
0529E:  CLRF   x20
....................                i++;
052A0:  INCF   x1E,F
052A2:  BTFSC  FD8.2
052A4:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
052A6:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
052A8:  MOVLW  7A
052AA:  ADDWF  x1E,W
052AC:  MOVWF  FE9
052AE:  MOVLW  01
052B0:  ADDWFC x1F,W
052B2:  MOVWF  FEA
052B4:  MOVF   FEF,W
052B6:  SUBLW  0D
052B8:  BZ    52C4
052BA:  MOVF   x21,F
052BC:  BNZ   52C4
052BE:  MOVF   x20,W
052C0:  SUBLW  1E
052C2:  BC    5304
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
052C4:  MOVLW  5D
052C6:  ADDWF  x1E,W
052C8:  MOVWF  x24
052CA:  MOVLW  00
052CC:  ADDWFC x1F,W
052CE:  MOVWF  x25
052D0:  MOVF   FF2,W
052D2:  MOVWF  00
052D4:  BCF    FF2.7
052D6:  MOVFF  C25,FAA
052DA:  MOVFF  C24,FA9
052DE:  MOVLW  0D
052E0:  MOVWF  FA8
052E2:  BCF    FA6.6
052E4:  BCF    FA6.7
052E6:  BSF    FA6.2
052E8:  MOVLB  F
052EA:  MOVLW  55
052EC:  MOVWF  FA7
052EE:  MOVLW  AA
052F0:  MOVWF  FA7
052F2:  BSF    FA6.1
052F4:  BTFSC  FA6.1
052F6:  BRA    52F4
052F8:  BCF    FA6.2
052FA:  MOVF   00,W
052FC:  IORWF  FF2,F
....................                      break;
052FE:  BRA    538E
....................                   }
05300:  BRA    5376
05302:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage4[j] = RxD_Buff[i];
05304:  MOVLW  FA
05306:  ADDWF  x20,W
05308:  MOVWF  01
0530A:  MOVLW  09
0530C:  ADDWFC x21,W
0530E:  MOVWF  03
05310:  MOVLW  7A
05312:  ADDWF  x1E,W
05314:  MOVWF  FE9
05316:  MOVLW  01
05318:  ADDWFC x1F,W
0531A:  MOVWF  FEA
0531C:  MOVFF  FEF,C26
05320:  MOVFF  03,FEA
05324:  MOVFF  01,FE9
05328:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0532C:  MOVLW  5D
0532E:  ADDWF  x1E,W
05330:  MOVWF  x24
05332:  MOVLW  00
05334:  ADDWFC x1F,W
05336:  MOVWF  x25
05338:  MOVLW  7A
0533A:  ADDWF  x1E,W
0533C:  MOVWF  FE9
0533E:  MOVLW  01
05340:  ADDWFC x1F,W
05342:  MOVWF  FEA
05344:  MOVFF  FEF,C26
05348:  MOVF   FF2,W
0534A:  MOVWF  00
0534C:  BCF    FF2.7
0534E:  MOVFF  C25,FAA
05352:  MOVFF  C24,FA9
05356:  MOVFF  C26,FA8
0535A:  BCF    FA6.6
0535C:  BCF    FA6.7
0535E:  BSF    FA6.2
05360:  MOVLB  F
05362:  MOVLW  55
05364:  MOVWF  FA7
05366:  MOVLW  AA
05368:  MOVWF  FA7
0536A:  BSF    FA6.1
0536C:  BTFSC  FA6.1
0536E:  BRA    536C
05370:  BCF    FA6.2
05372:  MOVF   00,W
05374:  IORWF  FF2,F
....................                   }
05376:  MOVLB  C
05378:  MOVFF  C1F,03
0537C:  MOVF   x1E,W
0537E:  INCF   x1E,F
05380:  BTFSC  FD8.2
05382:  INCF   x1F,F
05384:  INCF   x20,F
05386:  BTFSC  FD8.2
05388:  INCF   x21,F
0538A:  BRA    52A6
0538C:  MOVLB  F
....................                }
....................                SMS_Massage4[j] = '\0' ; // end string
0538E:  MOVLW  FA
05390:  MOVLB  C
05392:  ADDWF  x20,W
05394:  MOVWF  FE9
05396:  MOVLW  09
05398:  ADDWFC x21,W
0539A:  MOVWF  FEA
0539C:  CLRF   FEF
....................                
....................                j=0;
0539E:  CLRF   x21
053A0:  CLRF   x20
....................                i++;
053A2:  INCF   x1E,F
053A4:  BTFSC  FD8.2
053A6:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
053A8:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
053AA:  MOVLW  7A
053AC:  ADDWF  x1E,W
053AE:  MOVWF  FE9
053B0:  MOVLW  01
053B2:  ADDWFC x1F,W
053B4:  MOVWF  FEA
053B6:  MOVF   FEF,W
053B8:  SUBLW  0D
053BA:  BZ    53C6
053BC:  MOVF   x21,F
053BE:  BNZ   53C6
053C0:  MOVF   x20,W
053C2:  SUBLW  1E
053C4:  BC    5406
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
053C6:  MOVLW  5D
053C8:  ADDWF  x1E,W
053CA:  MOVWF  x24
053CC:  MOVLW  00
053CE:  ADDWFC x1F,W
053D0:  MOVWF  x25
053D2:  MOVF   FF2,W
053D4:  MOVWF  00
053D6:  BCF    FF2.7
053D8:  MOVFF  C25,FAA
053DC:  MOVFF  C24,FA9
053E0:  MOVLW  0D
053E2:  MOVWF  FA8
053E4:  BCF    FA6.6
053E6:  BCF    FA6.7
053E8:  BSF    FA6.2
053EA:  MOVLB  F
053EC:  MOVLW  55
053EE:  MOVWF  FA7
053F0:  MOVLW  AA
053F2:  MOVWF  FA7
053F4:  BSF    FA6.1
053F6:  BTFSC  FA6.1
053F8:  BRA    53F6
053FA:  BCF    FA6.2
053FC:  MOVF   00,W
053FE:  IORWF  FF2,F
....................                      break;
05400:  BRA    5490
....................                   }
05402:  BRA    5478
05404:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage5[j] = RxD_Buff[i];
05406:  MOVLW  1A
05408:  ADDWF  x20,W
0540A:  MOVWF  01
0540C:  MOVLW  0A
0540E:  ADDWFC x21,W
05410:  MOVWF  03
05412:  MOVLW  7A
05414:  ADDWF  x1E,W
05416:  MOVWF  FE9
05418:  MOVLW  01
0541A:  ADDWFC x1F,W
0541C:  MOVWF  FEA
0541E:  MOVFF  FEF,C26
05422:  MOVFF  03,FEA
05426:  MOVFF  01,FE9
0542A:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0542E:  MOVLW  5D
05430:  ADDWF  x1E,W
05432:  MOVWF  x24
05434:  MOVLW  00
05436:  ADDWFC x1F,W
05438:  MOVWF  x25
0543A:  MOVLW  7A
0543C:  ADDWF  x1E,W
0543E:  MOVWF  FE9
05440:  MOVLW  01
05442:  ADDWFC x1F,W
05444:  MOVWF  FEA
05446:  MOVFF  FEF,C26
0544A:  MOVF   FF2,W
0544C:  MOVWF  00
0544E:  BCF    FF2.7
05450:  MOVFF  C25,FAA
05454:  MOVFF  C24,FA9
05458:  MOVFF  C26,FA8
0545C:  BCF    FA6.6
0545E:  BCF    FA6.7
05460:  BSF    FA6.2
05462:  MOVLB  F
05464:  MOVLW  55
05466:  MOVWF  FA7
05468:  MOVLW  AA
0546A:  MOVWF  FA7
0546C:  BSF    FA6.1
0546E:  BTFSC  FA6.1
05470:  BRA    546E
05472:  BCF    FA6.2
05474:  MOVF   00,W
05476:  IORWF  FF2,F
....................                   }
05478:  MOVLB  C
0547A:  MOVFF  C1F,03
0547E:  MOVF   x1E,W
05480:  INCF   x1E,F
05482:  BTFSC  FD8.2
05484:  INCF   x1F,F
05486:  INCF   x20,F
05488:  BTFSC  FD8.2
0548A:  INCF   x21,F
0548C:  BRA    53A8
0548E:  MOVLB  F
....................                }
....................                SMS_Massage5[j] = '\0' ; // end string
05490:  MOVLW  1A
05492:  MOVLB  C
05494:  ADDWF  x20,W
05496:  MOVWF  FE9
05498:  MOVLW  0A
0549A:  ADDWFC x21,W
0549C:  MOVWF  FEA
0549E:  CLRF   FEF
....................                
....................                j=0;
054A0:  CLRF   x21
054A2:  CLRF   x20
....................                i++;
054A4:  INCF   x1E,F
054A6:  BTFSC  FD8.2
054A8:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
054AA:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
054AC:  MOVLW  7A
054AE:  ADDWF  x1E,W
054B0:  MOVWF  FE9
054B2:  MOVLW  01
054B4:  ADDWFC x1F,W
054B6:  MOVWF  FEA
054B8:  MOVF   FEF,W
054BA:  SUBLW  0D
054BC:  BZ    54C8
054BE:  MOVF   x21,F
054C0:  BNZ   54C8
054C2:  MOVF   x20,W
054C4:  SUBLW  1E
054C6:  BC    5508
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
054C8:  MOVLW  5D
054CA:  ADDWF  x1E,W
054CC:  MOVWF  x24
054CE:  MOVLW  00
054D0:  ADDWFC x1F,W
054D2:  MOVWF  x25
054D4:  MOVF   FF2,W
054D6:  MOVWF  00
054D8:  BCF    FF2.7
054DA:  MOVFF  C25,FAA
054DE:  MOVFF  C24,FA9
054E2:  MOVLW  0D
054E4:  MOVWF  FA8
054E6:  BCF    FA6.6
054E8:  BCF    FA6.7
054EA:  BSF    FA6.2
054EC:  MOVLB  F
054EE:  MOVLW  55
054F0:  MOVWF  FA7
054F2:  MOVLW  AA
054F4:  MOVWF  FA7
054F6:  BSF    FA6.1
054F8:  BTFSC  FA6.1
054FA:  BRA    54F8
054FC:  BCF    FA6.2
054FE:  MOVF   00,W
05500:  IORWF  FF2,F
....................                      break;
05502:  BRA    5596
....................                   }
05504:  BRA    557E
05506:  MOVLB  C
....................                   else
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05508:  MOVLW  5D
0550A:  ADDWF  x1E,W
0550C:  MOVWF  x24
0550E:  MOVLW  00
05510:  ADDWFC x1F,W
05512:  MOVWF  x25
05514:  MOVLW  7A
05516:  ADDWF  x1E,W
05518:  MOVWF  FE9
0551A:  MOVLW  01
0551C:  ADDWFC x1F,W
0551E:  MOVWF  FEA
05520:  MOVFF  FEF,C26
05524:  MOVF   FF2,W
05526:  MOVWF  00
05528:  BCF    FF2.7
0552A:  MOVFF  C25,FAA
0552E:  MOVFF  C24,FA9
05532:  MOVFF  C26,FA8
05536:  BCF    FA6.6
05538:  BCF    FA6.7
0553A:  BSF    FA6.2
0553C:  MOVLB  F
0553E:  MOVLW  55
05540:  MOVWF  FA7
05542:  MOVLW  AA
05544:  MOVWF  FA7
05546:  BSF    FA6.1
05548:  BTFSC  FA6.1
0554A:  BRA    5548
0554C:  BCF    FA6.2
0554E:  MOVF   00,W
05550:  IORWF  FF2,F
....................                      SMS_Massage6[j] = RxD_Buff[i];
05552:  MOVLW  3A
05554:  MOVLB  C
05556:  ADDWF  x20,W
05558:  MOVWF  01
0555A:  MOVLW  0A
0555C:  ADDWFC x21,W
0555E:  MOVWF  03
05560:  MOVLW  7A
05562:  ADDWF  x1E,W
05564:  MOVWF  FE9
05566:  MOVLW  01
05568:  ADDWFC x1F,W
0556A:  MOVWF  FEA
0556C:  MOVFF  FEF,C26
05570:  MOVFF  03,FEA
05574:  MOVFF  01,FE9
05578:  MOVFF  C26,FEF
0557C:  MOVLB  F
....................                   }
0557E:  MOVLB  C
05580:  MOVFF  C1F,03
05584:  MOVF   x1E,W
05586:  INCF   x1E,F
05588:  BTFSC  FD8.2
0558A:  INCF   x1F,F
0558C:  INCF   x20,F
0558E:  BTFSC  FD8.2
05590:  INCF   x21,F
05592:  BRA    54AA
05594:  MOVLB  F
....................                }
....................                SMS_Massage6[j] = '\0' ; // end string
05596:  MOVLW  3A
05598:  MOVLB  C
0559A:  ADDWF  x20,W
0559C:  MOVWF  FE9
0559E:  MOVLW  0A
055A0:  ADDWFC x21,W
055A2:  MOVWF  FEA
055A4:  CLRF   FEF
....................                
....................                j=0;
055A6:  CLRF   x21
055A8:  CLRF   x20
....................                i++;
055AA:  INCF   x1E,F
055AC:  BTFSC  FD8.2
055AE:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
055B0:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
055B2:  MOVLW  7A
055B4:  ADDWF  x1E,W
055B6:  MOVWF  FE9
055B8:  MOVLW  01
055BA:  ADDWFC x1F,W
055BC:  MOVWF  FEA
055BE:  MOVF   FEF,W
055C0:  SUBLW  0D
055C2:  BZ    55CE
055C4:  MOVF   x21,F
055C6:  BNZ   55CE
055C8:  MOVF   x20,W
055CA:  SUBLW  1E
055CC:  BC    560E
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
055CE:  MOVLW  5D
055D0:  ADDWF  x1E,W
055D2:  MOVWF  x24
055D4:  MOVLW  00
055D6:  ADDWFC x1F,W
055D8:  MOVWF  x25
055DA:  MOVF   FF2,W
055DC:  MOVWF  00
055DE:  BCF    FF2.7
055E0:  MOVFF  C25,FAA
055E4:  MOVFF  C24,FA9
055E8:  MOVLW  0D
055EA:  MOVWF  FA8
055EC:  BCF    FA6.6
055EE:  BCF    FA6.7
055F0:  BSF    FA6.2
055F2:  MOVLB  F
055F4:  MOVLW  55
055F6:  MOVWF  FA7
055F8:  MOVLW  AA
055FA:  MOVWF  FA7
055FC:  BSF    FA6.1
055FE:  BTFSC  FA6.1
05600:  BRA    55FE
05602:  BCF    FA6.2
05604:  MOVF   00,W
05606:  IORWF  FF2,F
....................                      break;
05608:  BRA    5698
....................                   }
0560A:  BRA    5680
0560C:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage7[j] = RxD_Buff[i];
0560E:  MOVLW  5A
05610:  ADDWF  x20,W
05612:  MOVWF  01
05614:  MOVLW  0A
05616:  ADDWFC x21,W
05618:  MOVWF  03
0561A:  MOVLW  7A
0561C:  ADDWF  x1E,W
0561E:  MOVWF  FE9
05620:  MOVLW  01
05622:  ADDWFC x1F,W
05624:  MOVWF  FEA
05626:  MOVFF  FEF,C26
0562A:  MOVFF  03,FEA
0562E:  MOVFF  01,FE9
05632:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05636:  MOVLW  5D
05638:  ADDWF  x1E,W
0563A:  MOVWF  x24
0563C:  MOVLW  00
0563E:  ADDWFC x1F,W
05640:  MOVWF  x25
05642:  MOVLW  7A
05644:  ADDWF  x1E,W
05646:  MOVWF  FE9
05648:  MOVLW  01
0564A:  ADDWFC x1F,W
0564C:  MOVWF  FEA
0564E:  MOVFF  FEF,C26
05652:  MOVF   FF2,W
05654:  MOVWF  00
05656:  BCF    FF2.7
05658:  MOVFF  C25,FAA
0565C:  MOVFF  C24,FA9
05660:  MOVFF  C26,FA8
05664:  BCF    FA6.6
05666:  BCF    FA6.7
05668:  BSF    FA6.2
0566A:  MOVLB  F
0566C:  MOVLW  55
0566E:  MOVWF  FA7
05670:  MOVLW  AA
05672:  MOVWF  FA7
05674:  BSF    FA6.1
05676:  BTFSC  FA6.1
05678:  BRA    5676
0567A:  BCF    FA6.2
0567C:  MOVF   00,W
0567E:  IORWF  FF2,F
....................                   }
05680:  MOVLB  C
05682:  MOVFF  C1F,03
05686:  MOVF   x1E,W
05688:  INCF   x1E,F
0568A:  BTFSC  FD8.2
0568C:  INCF   x1F,F
0568E:  INCF   x20,F
05690:  BTFSC  FD8.2
05692:  INCF   x21,F
05694:  BRA    55B0
05696:  MOVLB  F
....................                }
....................                SMS_Massage7[j] = '\0' ; // end string
05698:  MOVLW  5A
0569A:  MOVLB  C
0569C:  ADDWF  x20,W
0569E:  MOVWF  FE9
056A0:  MOVLW  0A
056A2:  ADDWFC x21,W
056A4:  MOVWF  FEA
056A6:  CLRF   FEF
....................                
....................                j=0;
056A8:  CLRF   x21
056AA:  CLRF   x20
....................                i++;
056AC:  INCF   x1E,F
056AE:  BTFSC  FD8.2
056B0:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
056B2:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
056B4:  MOVLW  7A
056B6:  ADDWF  x1E,W
056B8:  MOVWF  FE9
056BA:  MOVLW  01
056BC:  ADDWFC x1F,W
056BE:  MOVWF  FEA
056C0:  MOVF   FEF,W
056C2:  SUBLW  0D
056C4:  BZ    56D0
056C6:  MOVF   x21,F
056C8:  BNZ   56D0
056CA:  MOVF   x20,W
056CC:  SUBLW  1E
056CE:  BC    5710
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
056D0:  MOVLW  5D
056D2:  ADDWF  x1E,W
056D4:  MOVWF  x24
056D6:  MOVLW  00
056D8:  ADDWFC x1F,W
056DA:  MOVWF  x25
056DC:  MOVF   FF2,W
056DE:  MOVWF  00
056E0:  BCF    FF2.7
056E2:  MOVFF  C25,FAA
056E6:  MOVFF  C24,FA9
056EA:  MOVLW  0D
056EC:  MOVWF  FA8
056EE:  BCF    FA6.6
056F0:  BCF    FA6.7
056F2:  BSF    FA6.2
056F4:  MOVLB  F
056F6:  MOVLW  55
056F8:  MOVWF  FA7
056FA:  MOVLW  AA
056FC:  MOVWF  FA7
056FE:  BSF    FA6.1
05700:  BTFSC  FA6.1
05702:  BRA    5700
05704:  BCF    FA6.2
05706:  MOVF   00,W
05708:  IORWF  FF2,F
....................                      break;
0570A:  BRA    579A
....................                   }
0570C:  BRA    5782
0570E:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage8[j] = RxD_Buff[i];
05710:  MOVLW  7A
05712:  ADDWF  x20,W
05714:  MOVWF  01
05716:  MOVLW  0A
05718:  ADDWFC x21,W
0571A:  MOVWF  03
0571C:  MOVLW  7A
0571E:  ADDWF  x1E,W
05720:  MOVWF  FE9
05722:  MOVLW  01
05724:  ADDWFC x1F,W
05726:  MOVWF  FEA
05728:  MOVFF  FEF,C26
0572C:  MOVFF  03,FEA
05730:  MOVFF  01,FE9
05734:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05738:  MOVLW  5D
0573A:  ADDWF  x1E,W
0573C:  MOVWF  x24
0573E:  MOVLW  00
05740:  ADDWFC x1F,W
05742:  MOVWF  x25
05744:  MOVLW  7A
05746:  ADDWF  x1E,W
05748:  MOVWF  FE9
0574A:  MOVLW  01
0574C:  ADDWFC x1F,W
0574E:  MOVWF  FEA
05750:  MOVFF  FEF,C26
05754:  MOVF   FF2,W
05756:  MOVWF  00
05758:  BCF    FF2.7
0575A:  MOVFF  C25,FAA
0575E:  MOVFF  C24,FA9
05762:  MOVFF  C26,FA8
05766:  BCF    FA6.6
05768:  BCF    FA6.7
0576A:  BSF    FA6.2
0576C:  MOVLB  F
0576E:  MOVLW  55
05770:  MOVWF  FA7
05772:  MOVLW  AA
05774:  MOVWF  FA7
05776:  BSF    FA6.1
05778:  BTFSC  FA6.1
0577A:  BRA    5778
0577C:  BCF    FA6.2
0577E:  MOVF   00,W
05780:  IORWF  FF2,F
....................                   }
05782:  MOVLB  C
05784:  MOVFF  C1F,03
05788:  MOVF   x1E,W
0578A:  INCF   x1E,F
0578C:  BTFSC  FD8.2
0578E:  INCF   x1F,F
05790:  INCF   x20,F
05792:  BTFSC  FD8.2
05794:  INCF   x21,F
05796:  BRA    56B2
05798:  MOVLB  F
....................                }
....................                SMS_Massage8[j] = '\0' ; // end string
0579A:  MOVLW  7A
0579C:  MOVLB  C
0579E:  ADDWF  x20,W
057A0:  MOVWF  FE9
057A2:  MOVLW  0A
057A4:  ADDWFC x21,W
057A6:  MOVWF  FEA
057A8:  CLRF   FEF
....................                
....................                /////////////////////////////////////////////
....................                j=0;
057AA:  CLRF   x21
057AC:  CLRF   x20
....................                i++;
057AE:  INCF   x1E,F
057B0:  BTFSC  FD8.2
057B2:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
057B4:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
057B6:  MOVLW  7A
057B8:  ADDWF  x1E,W
057BA:  MOVWF  FE9
057BC:  MOVLW  01
057BE:  ADDWFC x1F,W
057C0:  MOVWF  FEA
057C2:  MOVF   FEF,W
057C4:  SUBLW  0D
057C6:  BZ    57D2
057C8:  MOVF   x21,F
057CA:  BNZ   57D2
057CC:  MOVF   x20,W
057CE:  SUBLW  1E
057D0:  BC    5822
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
057D2:  MOVLW  5D
057D4:  ADDWF  x1E,W
057D6:  MOVWF  x24
057D8:  MOVLW  00
057DA:  ADDWFC x1F,W
057DC:  MOVWF  x25
057DE:  MOVLW  7A
057E0:  ADDWF  x1E,W
057E2:  MOVWF  FE9
057E4:  MOVLW  01
057E6:  ADDWFC x1F,W
057E8:  MOVWF  FEA
057EA:  MOVFF  FEF,C26
057EE:  MOVF   FF2,W
057F0:  MOVWF  00
057F2:  BCF    FF2.7
057F4:  MOVFF  C25,FAA
057F8:  MOVFF  C24,FA9
057FC:  MOVFF  C26,FA8
05800:  BCF    FA6.6
05802:  BCF    FA6.7
05804:  BSF    FA6.2
05806:  MOVLB  F
05808:  MOVLW  55
0580A:  MOVWF  FA7
0580C:  MOVLW  AA
0580E:  MOVWF  FA7
05810:  BSF    FA6.1
05812:  BTFSC  FA6.1
05814:  BRA    5812
05816:  BCF    FA6.2
05818:  MOVF   00,W
0581A:  IORWF  FF2,F
....................                      break;
0581C:  BRA    58AC
....................                   }
0581E:  BRA    5894
05820:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage9[j] = RxD_Buff[i];
05822:  MOVLW  9A
05824:  ADDWF  x20,W
05826:  MOVWF  01
05828:  MOVLW  0A
0582A:  ADDWFC x21,W
0582C:  MOVWF  03
0582E:  MOVLW  7A
05830:  ADDWF  x1E,W
05832:  MOVWF  FE9
05834:  MOVLW  01
05836:  ADDWFC x1F,W
05838:  MOVWF  FEA
0583A:  MOVFF  FEF,C26
0583E:  MOVFF  03,FEA
05842:  MOVFF  01,FE9
05846:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0584A:  MOVLW  5D
0584C:  ADDWF  x1E,W
0584E:  MOVWF  x24
05850:  MOVLW  00
05852:  ADDWFC x1F,W
05854:  MOVWF  x25
05856:  MOVLW  7A
05858:  ADDWF  x1E,W
0585A:  MOVWF  FE9
0585C:  MOVLW  01
0585E:  ADDWFC x1F,W
05860:  MOVWF  FEA
05862:  MOVFF  FEF,C26
05866:  MOVF   FF2,W
05868:  MOVWF  00
0586A:  BCF    FF2.7
0586C:  MOVFF  C25,FAA
05870:  MOVFF  C24,FA9
05874:  MOVFF  C26,FA8
05878:  BCF    FA6.6
0587A:  BCF    FA6.7
0587C:  BSF    FA6.2
0587E:  MOVLB  F
05880:  MOVLW  55
05882:  MOVWF  FA7
05884:  MOVLW  AA
05886:  MOVWF  FA7
05888:  BSF    FA6.1
0588A:  BTFSC  FA6.1
0588C:  BRA    588A
0588E:  BCF    FA6.2
05890:  MOVF   00,W
05892:  IORWF  FF2,F
....................                   }
05894:  MOVLB  C
05896:  MOVFF  C1F,03
0589A:  MOVF   x1E,W
0589C:  INCF   x1E,F
0589E:  BTFSC  FD8.2
058A0:  INCF   x1F,F
058A2:  INCF   x20,F
058A4:  BTFSC  FD8.2
058A6:  INCF   x21,F
058A8:  BRA    57B4
058AA:  MOVLB  F
....................                }
....................                SMS_Massage9[j] = '\0' ; // end string
058AC:  MOVLW  9A
058AE:  MOVLB  C
058B0:  ADDWF  x20,W
058B2:  MOVWF  FE9
058B4:  MOVLW  0A
058B6:  ADDWFC x21,W
058B8:  MOVWF  FEA
058BA:  CLRF   FEF
....................                j=0;
058BC:  CLRF   x21
058BE:  CLRF   x20
....................                i++;
058C0:  INCF   x1E,F
058C2:  BTFSC  FD8.2
058C4:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
058C6:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
058C8:  MOVLW  7A
058CA:  ADDWF  x1E,W
058CC:  MOVWF  FE9
058CE:  MOVLW  01
058D0:  ADDWFC x1F,W
058D2:  MOVWF  FEA
058D4:  MOVF   FEF,W
058D6:  SUBLW  0D
058D8:  BZ    58E4
058DA:  MOVF   x21,F
058DC:  BNZ   58E4
058DE:  MOVF   x20,W
058E0:  SUBLW  1E
058E2:  BC    5934
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
058E4:  MOVLW  5D
058E6:  ADDWF  x1E,W
058E8:  MOVWF  x24
058EA:  MOVLW  00
058EC:  ADDWFC x1F,W
058EE:  MOVWF  x25
058F0:  MOVLW  7A
058F2:  ADDWF  x1E,W
058F4:  MOVWF  FE9
058F6:  MOVLW  01
058F8:  ADDWFC x1F,W
058FA:  MOVWF  FEA
058FC:  MOVFF  FEF,C26
05900:  MOVF   FF2,W
05902:  MOVWF  00
05904:  BCF    FF2.7
05906:  MOVFF  C25,FAA
0590A:  MOVFF  C24,FA9
0590E:  MOVFF  C26,FA8
05912:  BCF    FA6.6
05914:  BCF    FA6.7
05916:  BSF    FA6.2
05918:  MOVLB  F
0591A:  MOVLW  55
0591C:  MOVWF  FA7
0591E:  MOVLW  AA
05920:  MOVWF  FA7
05922:  BSF    FA6.1
05924:  BTFSC  FA6.1
05926:  BRA    5924
05928:  BCF    FA6.2
0592A:  MOVF   00,W
0592C:  IORWF  FF2,F
....................                      break;
0592E:  BRA    59BE
....................                   }
05930:  BRA    59A6
05932:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage10[j] = RxD_Buff[i];
05934:  MOVLW  BA
05936:  ADDWF  x20,W
05938:  MOVWF  01
0593A:  MOVLW  0A
0593C:  ADDWFC x21,W
0593E:  MOVWF  03
05940:  MOVLW  7A
05942:  ADDWF  x1E,W
05944:  MOVWF  FE9
05946:  MOVLW  01
05948:  ADDWFC x1F,W
0594A:  MOVWF  FEA
0594C:  MOVFF  FEF,C26
05950:  MOVFF  03,FEA
05954:  MOVFF  01,FE9
05958:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0595C:  MOVLW  5D
0595E:  ADDWF  x1E,W
05960:  MOVWF  x24
05962:  MOVLW  00
05964:  ADDWFC x1F,W
05966:  MOVWF  x25
05968:  MOVLW  7A
0596A:  ADDWF  x1E,W
0596C:  MOVWF  FE9
0596E:  MOVLW  01
05970:  ADDWFC x1F,W
05972:  MOVWF  FEA
05974:  MOVFF  FEF,C26
05978:  MOVF   FF2,W
0597A:  MOVWF  00
0597C:  BCF    FF2.7
0597E:  MOVFF  C25,FAA
05982:  MOVFF  C24,FA9
05986:  MOVFF  C26,FA8
0598A:  BCF    FA6.6
0598C:  BCF    FA6.7
0598E:  BSF    FA6.2
05990:  MOVLB  F
05992:  MOVLW  55
05994:  MOVWF  FA7
05996:  MOVLW  AA
05998:  MOVWF  FA7
0599A:  BSF    FA6.1
0599C:  BTFSC  FA6.1
0599E:  BRA    599C
059A0:  BCF    FA6.2
059A2:  MOVF   00,W
059A4:  IORWF  FF2,F
....................                   }
059A6:  MOVLB  C
059A8:  MOVFF  C1F,03
059AC:  MOVF   x1E,W
059AE:  INCF   x1E,F
059B0:  BTFSC  FD8.2
059B2:  INCF   x1F,F
059B4:  INCF   x20,F
059B6:  BTFSC  FD8.2
059B8:  INCF   x21,F
059BA:  BRA    58C6
059BC:  MOVLB  F
....................                }
....................                SMS_Massage10[j] = '\0' ; // end string
059BE:  MOVLW  BA
059C0:  MOVLB  C
059C2:  ADDWF  x20,W
059C4:  MOVWF  FE9
059C6:  MOVLW  0A
059C8:  ADDWFC x21,W
059CA:  MOVWF  FEA
059CC:  CLRF   FEF
....................                
....................                j=0;
059CE:  CLRF   x21
059D0:  CLRF   x20
....................                i++;
059D2:  INCF   x1E,F
059D4:  BTFSC  FD8.2
059D6:  INCF   x1F,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
059D8:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
059DA:  MOVLW  7A
059DC:  ADDWF  x1E,W
059DE:  MOVWF  FE9
059E0:  MOVLW  01
059E2:  ADDWFC x1F,W
059E4:  MOVWF  FEA
059E6:  MOVF   FEF,W
059E8:  SUBLW  0D
059EA:  BZ    59F6
059EC:  MOVF   x21,F
059EE:  BNZ   59F6
059F0:  MOVF   x20,W
059F2:  SUBLW  1E
059F4:  BC    5A46
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
059F6:  MOVLW  5D
059F8:  ADDWF  x1E,W
059FA:  MOVWF  x24
059FC:  MOVLW  00
059FE:  ADDWFC x1F,W
05A00:  MOVWF  x25
05A02:  MOVLW  7A
05A04:  ADDWF  x1E,W
05A06:  MOVWF  FE9
05A08:  MOVLW  01
05A0A:  ADDWFC x1F,W
05A0C:  MOVWF  FEA
05A0E:  MOVFF  FEF,C26
05A12:  MOVF   FF2,W
05A14:  MOVWF  00
05A16:  BCF    FF2.7
05A18:  MOVFF  C25,FAA
05A1C:  MOVFF  C24,FA9
05A20:  MOVFF  C26,FA8
05A24:  BCF    FA6.6
05A26:  BCF    FA6.7
05A28:  BSF    FA6.2
05A2A:  MOVLB  F
05A2C:  MOVLW  55
05A2E:  MOVWF  FA7
05A30:  MOVLW  AA
05A32:  MOVWF  FA7
05A34:  BSF    FA6.1
05A36:  BTFSC  FA6.1
05A38:  BRA    5A36
05A3A:  BCF    FA6.2
05A3C:  MOVF   00,W
05A3E:  IORWF  FF2,F
....................                      break;
05A40:  BRA    5AD0
....................                   }
05A42:  BRA    5AB8
05A44:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage11[j] = RxD_Buff[i];
05A46:  MOVLW  DA
05A48:  ADDWF  x20,W
05A4A:  MOVWF  01
05A4C:  MOVLW  0A
05A4E:  ADDWFC x21,W
05A50:  MOVWF  03
05A52:  MOVLW  7A
05A54:  ADDWF  x1E,W
05A56:  MOVWF  FE9
05A58:  MOVLW  01
05A5A:  ADDWFC x1F,W
05A5C:  MOVWF  FEA
05A5E:  MOVFF  FEF,C26
05A62:  MOVFF  03,FEA
05A66:  MOVFF  01,FE9
05A6A:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05A6E:  MOVLW  5D
05A70:  ADDWF  x1E,W
05A72:  MOVWF  x24
05A74:  MOVLW  00
05A76:  ADDWFC x1F,W
05A78:  MOVWF  x25
05A7A:  MOVLW  7A
05A7C:  ADDWF  x1E,W
05A7E:  MOVWF  FE9
05A80:  MOVLW  01
05A82:  ADDWFC x1F,W
05A84:  MOVWF  FEA
05A86:  MOVFF  FEF,C26
05A8A:  MOVF   FF2,W
05A8C:  MOVWF  00
05A8E:  BCF    FF2.7
05A90:  MOVFF  C25,FAA
05A94:  MOVFF  C24,FA9
05A98:  MOVFF  C26,FA8
05A9C:  BCF    FA6.6
05A9E:  BCF    FA6.7
05AA0:  BSF    FA6.2
05AA2:  MOVLB  F
05AA4:  MOVLW  55
05AA6:  MOVWF  FA7
05AA8:  MOVLW  AA
05AAA:  MOVWF  FA7
05AAC:  BSF    FA6.1
05AAE:  BTFSC  FA6.1
05AB0:  BRA    5AAE
05AB2:  BCF    FA6.2
05AB4:  MOVF   00,W
05AB6:  IORWF  FF2,F
....................                   }
05AB8:  MOVLB  C
05ABA:  MOVFF  C1F,03
05ABE:  MOVF   x1E,W
05AC0:  INCF   x1E,F
05AC2:  BTFSC  FD8.2
05AC4:  INCF   x1F,F
05AC6:  INCF   x20,F
05AC8:  BTFSC  FD8.2
05ACA:  INCF   x21,F
05ACC:  BRA    59D8
05ACE:  MOVLB  F
....................                }
....................                SMS_Massage11[j] = '\0' ; // end string
05AD0:  MOVLW  DA
05AD2:  MOVLB  C
05AD4:  ADDWF  x20,W
05AD6:  MOVWF  FE9
05AD8:  MOVLW  0A
05ADA:  ADDWFC x21,W
05ADC:  MOVWF  FEA
05ADE:  CLRF   FEF
....................                
....................                j=0;
05AE0:  CLRF   x21
05AE2:  CLRF   x20
....................                i++;
05AE4:  INCF   x1E,F
05AE6:  BTFSC  FD8.2
05AE8:  INCF   x1F,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05AEA:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05AEC:  MOVLW  7A
05AEE:  ADDWF  x1E,W
05AF0:  MOVWF  FE9
05AF2:  MOVLW  01
05AF4:  ADDWFC x1F,W
05AF6:  MOVWF  FEA
05AF8:  MOVF   FEF,W
05AFA:  SUBLW  0D
05AFC:  BZ    5B08
05AFE:  MOVF   x21,F
05B00:  BNZ   5B08
05B02:  MOVF   x20,W
05B04:  SUBLW  1E
05B06:  BC    5B58
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05B08:  MOVLW  5D
05B0A:  ADDWF  x1E,W
05B0C:  MOVWF  x24
05B0E:  MOVLW  00
05B10:  ADDWFC x1F,W
05B12:  MOVWF  x25
05B14:  MOVLW  7A
05B16:  ADDWF  x1E,W
05B18:  MOVWF  FE9
05B1A:  MOVLW  01
05B1C:  ADDWFC x1F,W
05B1E:  MOVWF  FEA
05B20:  MOVFF  FEF,C26
05B24:  MOVF   FF2,W
05B26:  MOVWF  00
05B28:  BCF    FF2.7
05B2A:  MOVFF  C25,FAA
05B2E:  MOVFF  C24,FA9
05B32:  MOVFF  C26,FA8
05B36:  BCF    FA6.6
05B38:  BCF    FA6.7
05B3A:  BSF    FA6.2
05B3C:  MOVLB  F
05B3E:  MOVLW  55
05B40:  MOVWF  FA7
05B42:  MOVLW  AA
05B44:  MOVWF  FA7
05B46:  BSF    FA6.1
05B48:  BTFSC  FA6.1
05B4A:  BRA    5B48
05B4C:  BCF    FA6.2
05B4E:  MOVF   00,W
05B50:  IORWF  FF2,F
....................                      break;
05B52:  BRA    5BE2
....................                   }
05B54:  BRA    5BCA
05B56:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage12[j] = RxD_Buff[i];
05B58:  MOVLW  FA
05B5A:  ADDWF  x20,W
05B5C:  MOVWF  01
05B5E:  MOVLW  0A
05B60:  ADDWFC x21,W
05B62:  MOVWF  03
05B64:  MOVLW  7A
05B66:  ADDWF  x1E,W
05B68:  MOVWF  FE9
05B6A:  MOVLW  01
05B6C:  ADDWFC x1F,W
05B6E:  MOVWF  FEA
05B70:  MOVFF  FEF,C26
05B74:  MOVFF  03,FEA
05B78:  MOVFF  01,FE9
05B7C:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05B80:  MOVLW  5D
05B82:  ADDWF  x1E,W
05B84:  MOVWF  x24
05B86:  MOVLW  00
05B88:  ADDWFC x1F,W
05B8A:  MOVWF  x25
05B8C:  MOVLW  7A
05B8E:  ADDWF  x1E,W
05B90:  MOVWF  FE9
05B92:  MOVLW  01
05B94:  ADDWFC x1F,W
05B96:  MOVWF  FEA
05B98:  MOVFF  FEF,C26
05B9C:  MOVF   FF2,W
05B9E:  MOVWF  00
05BA0:  BCF    FF2.7
05BA2:  MOVFF  C25,FAA
05BA6:  MOVFF  C24,FA9
05BAA:  MOVFF  C26,FA8
05BAE:  BCF    FA6.6
05BB0:  BCF    FA6.7
05BB2:  BSF    FA6.2
05BB4:  MOVLB  F
05BB6:  MOVLW  55
05BB8:  MOVWF  FA7
05BBA:  MOVLW  AA
05BBC:  MOVWF  FA7
05BBE:  BSF    FA6.1
05BC0:  BTFSC  FA6.1
05BC2:  BRA    5BC0
05BC4:  BCF    FA6.2
05BC6:  MOVF   00,W
05BC8:  IORWF  FF2,F
....................                   }
05BCA:  MOVLB  C
05BCC:  MOVFF  C1F,03
05BD0:  MOVF   x1E,W
05BD2:  INCF   x1E,F
05BD4:  BTFSC  FD8.2
05BD6:  INCF   x1F,F
05BD8:  INCF   x20,F
05BDA:  BTFSC  FD8.2
05BDC:  INCF   x21,F
05BDE:  BRA    5AEA
05BE0:  MOVLB  F
....................                }
....................                SMS_Massage12[j] = '\0' ; // end string
05BE2:  MOVLW  FA
05BE4:  MOVLB  C
05BE6:  ADDWF  x20,W
05BE8:  MOVWF  FE9
05BEA:  MOVLW  0A
05BEC:  ADDWFC x21,W
05BEE:  MOVWF  FEA
05BF0:  CLRF   FEF
....................                
....................                j=0;
05BF2:  CLRF   x21
05BF4:  CLRF   x20
....................                i++;
05BF6:  INCF   x1E,F
05BF8:  BTFSC  FD8.2
05BFA:  INCF   x1F,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05BFC:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05BFE:  MOVLW  7A
05C00:  ADDWF  x1E,W
05C02:  MOVWF  FE9
05C04:  MOVLW  01
05C06:  ADDWFC x1F,W
05C08:  MOVWF  FEA
05C0A:  MOVF   FEF,W
05C0C:  SUBLW  0D
05C0E:  BZ    5C1A
05C10:  MOVF   x21,F
05C12:  BNZ   5C1A
05C14:  MOVF   x20,W
05C16:  SUBLW  1E
05C18:  BC    5C6A
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05C1A:  MOVLW  5D
05C1C:  ADDWF  x1E,W
05C1E:  MOVWF  x24
05C20:  MOVLW  00
05C22:  ADDWFC x1F,W
05C24:  MOVWF  x25
05C26:  MOVLW  7A
05C28:  ADDWF  x1E,W
05C2A:  MOVWF  FE9
05C2C:  MOVLW  01
05C2E:  ADDWFC x1F,W
05C30:  MOVWF  FEA
05C32:  MOVFF  FEF,C26
05C36:  MOVF   FF2,W
05C38:  MOVWF  00
05C3A:  BCF    FF2.7
05C3C:  MOVFF  C25,FAA
05C40:  MOVFF  C24,FA9
05C44:  MOVFF  C26,FA8
05C48:  BCF    FA6.6
05C4A:  BCF    FA6.7
05C4C:  BSF    FA6.2
05C4E:  MOVLB  F
05C50:  MOVLW  55
05C52:  MOVWF  FA7
05C54:  MOVLW  AA
05C56:  MOVWF  FA7
05C58:  BSF    FA6.1
05C5A:  BTFSC  FA6.1
05C5C:  BRA    5C5A
05C5E:  BCF    FA6.2
05C60:  MOVF   00,W
05C62:  IORWF  FF2,F
....................                      break;
05C64:  BRA    5CF4
....................                   }
05C66:  BRA    5CDC
05C68:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage13[j] = RxD_Buff[i];
05C6A:  MOVLW  1A
05C6C:  ADDWF  x20,W
05C6E:  MOVWF  01
05C70:  MOVLW  0B
05C72:  ADDWFC x21,W
05C74:  MOVWF  03
05C76:  MOVLW  7A
05C78:  ADDWF  x1E,W
05C7A:  MOVWF  FE9
05C7C:  MOVLW  01
05C7E:  ADDWFC x1F,W
05C80:  MOVWF  FEA
05C82:  MOVFF  FEF,C26
05C86:  MOVFF  03,FEA
05C8A:  MOVFF  01,FE9
05C8E:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05C92:  MOVLW  5D
05C94:  ADDWF  x1E,W
05C96:  MOVWF  x24
05C98:  MOVLW  00
05C9A:  ADDWFC x1F,W
05C9C:  MOVWF  x25
05C9E:  MOVLW  7A
05CA0:  ADDWF  x1E,W
05CA2:  MOVWF  FE9
05CA4:  MOVLW  01
05CA6:  ADDWFC x1F,W
05CA8:  MOVWF  FEA
05CAA:  MOVFF  FEF,C26
05CAE:  MOVF   FF2,W
05CB0:  MOVWF  00
05CB2:  BCF    FF2.7
05CB4:  MOVFF  C25,FAA
05CB8:  MOVFF  C24,FA9
05CBC:  MOVFF  C26,FA8
05CC0:  BCF    FA6.6
05CC2:  BCF    FA6.7
05CC4:  BSF    FA6.2
05CC6:  MOVLB  F
05CC8:  MOVLW  55
05CCA:  MOVWF  FA7
05CCC:  MOVLW  AA
05CCE:  MOVWF  FA7
05CD0:  BSF    FA6.1
05CD2:  BTFSC  FA6.1
05CD4:  BRA    5CD2
05CD6:  BCF    FA6.2
05CD8:  MOVF   00,W
05CDA:  IORWF  FF2,F
....................                   }
05CDC:  MOVLB  C
05CDE:  MOVFF  C1F,03
05CE2:  MOVF   x1E,W
05CE4:  INCF   x1E,F
05CE6:  BTFSC  FD8.2
05CE8:  INCF   x1F,F
05CEA:  INCF   x20,F
05CEC:  BTFSC  FD8.2
05CEE:  INCF   x21,F
05CF0:  BRA    5BFC
05CF2:  MOVLB  F
....................                }
....................                SMS_Massage13[j] = '\0' ; // end string
05CF4:  MOVLW  1A
05CF6:  MOVLB  C
05CF8:  ADDWF  x20,W
05CFA:  MOVWF  FE9
05CFC:  MOVLW  0B
05CFE:  ADDWFC x21,W
05D00:  MOVWF  FEA
05D02:  CLRF   FEF
....................                
....................                j=0;
05D04:  CLRF   x21
05D06:  CLRF   x20
....................                i++;
05D08:  INCF   x1E,F
05D0A:  BTFSC  FD8.2
05D0C:  INCF   x1F,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05D0E:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05D10:  MOVLW  7A
05D12:  ADDWF  x1E,W
05D14:  MOVWF  FE9
05D16:  MOVLW  01
05D18:  ADDWFC x1F,W
05D1A:  MOVWF  FEA
05D1C:  MOVF   FEF,W
05D1E:  SUBLW  0D
05D20:  BZ    5D2C
05D22:  MOVF   x21,F
05D24:  BNZ   5D2C
05D26:  MOVF   x20,W
05D28:  SUBLW  1E
05D2A:  BC    5D7C
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05D2C:  MOVLW  5D
05D2E:  ADDWF  x1E,W
05D30:  MOVWF  x24
05D32:  MOVLW  00
05D34:  ADDWFC x1F,W
05D36:  MOVWF  x25
05D38:  MOVLW  7A
05D3A:  ADDWF  x1E,W
05D3C:  MOVWF  FE9
05D3E:  MOVLW  01
05D40:  ADDWFC x1F,W
05D42:  MOVWF  FEA
05D44:  MOVFF  FEF,C26
05D48:  MOVF   FF2,W
05D4A:  MOVWF  00
05D4C:  BCF    FF2.7
05D4E:  MOVFF  C25,FAA
05D52:  MOVFF  C24,FA9
05D56:  MOVFF  C26,FA8
05D5A:  BCF    FA6.6
05D5C:  BCF    FA6.7
05D5E:  BSF    FA6.2
05D60:  MOVLB  F
05D62:  MOVLW  55
05D64:  MOVWF  FA7
05D66:  MOVLW  AA
05D68:  MOVWF  FA7
05D6A:  BSF    FA6.1
05D6C:  BTFSC  FA6.1
05D6E:  BRA    5D6C
05D70:  BCF    FA6.2
05D72:  MOVF   00,W
05D74:  IORWF  FF2,F
....................                      break;
05D76:  BRA    5E06
....................                   }
05D78:  BRA    5DEE
05D7A:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage14[j] = RxD_Buff[i];
05D7C:  MOVLW  3A
05D7E:  ADDWF  x20,W
05D80:  MOVWF  01
05D82:  MOVLW  0B
05D84:  ADDWFC x21,W
05D86:  MOVWF  03
05D88:  MOVLW  7A
05D8A:  ADDWF  x1E,W
05D8C:  MOVWF  FE9
05D8E:  MOVLW  01
05D90:  ADDWFC x1F,W
05D92:  MOVWF  FEA
05D94:  MOVFF  FEF,C26
05D98:  MOVFF  03,FEA
05D9C:  MOVFF  01,FE9
05DA0:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05DA4:  MOVLW  5D
05DA6:  ADDWF  x1E,W
05DA8:  MOVWF  x24
05DAA:  MOVLW  00
05DAC:  ADDWFC x1F,W
05DAE:  MOVWF  x25
05DB0:  MOVLW  7A
05DB2:  ADDWF  x1E,W
05DB4:  MOVWF  FE9
05DB6:  MOVLW  01
05DB8:  ADDWFC x1F,W
05DBA:  MOVWF  FEA
05DBC:  MOVFF  FEF,C26
05DC0:  MOVF   FF2,W
05DC2:  MOVWF  00
05DC4:  BCF    FF2.7
05DC6:  MOVFF  C25,FAA
05DCA:  MOVFF  C24,FA9
05DCE:  MOVFF  C26,FA8
05DD2:  BCF    FA6.6
05DD4:  BCF    FA6.7
05DD6:  BSF    FA6.2
05DD8:  MOVLB  F
05DDA:  MOVLW  55
05DDC:  MOVWF  FA7
05DDE:  MOVLW  AA
05DE0:  MOVWF  FA7
05DE2:  BSF    FA6.1
05DE4:  BTFSC  FA6.1
05DE6:  BRA    5DE4
05DE8:  BCF    FA6.2
05DEA:  MOVF   00,W
05DEC:  IORWF  FF2,F
....................                   }
05DEE:  MOVLB  C
05DF0:  MOVFF  C1F,03
05DF4:  MOVF   x1E,W
05DF6:  INCF   x1E,F
05DF8:  BTFSC  FD8.2
05DFA:  INCF   x1F,F
05DFC:  INCF   x20,F
05DFE:  BTFSC  FD8.2
05E00:  INCF   x21,F
05E02:  BRA    5D0E
05E04:  MOVLB  F
....................                }
....................                SMS_Massage14[j] = '\0' ; // end string
05E06:  MOVLW  3A
05E08:  MOVLB  C
05E0A:  ADDWF  x20,W
05E0C:  MOVWF  FE9
05E0E:  MOVLW  0B
05E10:  ADDWFC x21,W
05E12:  MOVWF  FEA
05E14:  CLRF   FEF
....................                
....................                j=0;
05E16:  CLRF   x21
05E18:  CLRF   x20
....................                i++;
05E1A:  INCF   x1E,F
05E1C:  BTFSC  FD8.2
05E1E:  INCF   x1F,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05E20:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05E22:  MOVLW  7A
05E24:  ADDWF  x1E,W
05E26:  MOVWF  FE9
05E28:  MOVLW  01
05E2A:  ADDWFC x1F,W
05E2C:  MOVWF  FEA
05E2E:  MOVF   FEF,W
05E30:  SUBLW  0D
05E32:  BZ    5E3E
05E34:  MOVF   x21,F
05E36:  BNZ   5E3E
05E38:  MOVF   x20,W
05E3A:  SUBLW  1E
05E3C:  BC    5E8E
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05E3E:  MOVLW  5D
05E40:  ADDWF  x1E,W
05E42:  MOVWF  x24
05E44:  MOVLW  00
05E46:  ADDWFC x1F,W
05E48:  MOVWF  x25
05E4A:  MOVLW  7A
05E4C:  ADDWF  x1E,W
05E4E:  MOVWF  FE9
05E50:  MOVLW  01
05E52:  ADDWFC x1F,W
05E54:  MOVWF  FEA
05E56:  MOVFF  FEF,C26
05E5A:  MOVF   FF2,W
05E5C:  MOVWF  00
05E5E:  BCF    FF2.7
05E60:  MOVFF  C25,FAA
05E64:  MOVFF  C24,FA9
05E68:  MOVFF  C26,FA8
05E6C:  BCF    FA6.6
05E6E:  BCF    FA6.7
05E70:  BSF    FA6.2
05E72:  MOVLB  F
05E74:  MOVLW  55
05E76:  MOVWF  FA7
05E78:  MOVLW  AA
05E7A:  MOVWF  FA7
05E7C:  BSF    FA6.1
05E7E:  BTFSC  FA6.1
05E80:  BRA    5E7E
05E82:  BCF    FA6.2
05E84:  MOVF   00,W
05E86:  IORWF  FF2,F
....................                      break;
05E88:  BRA    5F18
....................                   }
05E8A:  BRA    5F00
05E8C:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage15[j] = RxD_Buff[i];
05E8E:  MOVLW  5A
05E90:  ADDWF  x20,W
05E92:  MOVWF  01
05E94:  MOVLW  0B
05E96:  ADDWFC x21,W
05E98:  MOVWF  03
05E9A:  MOVLW  7A
05E9C:  ADDWF  x1E,W
05E9E:  MOVWF  FE9
05EA0:  MOVLW  01
05EA2:  ADDWFC x1F,W
05EA4:  MOVWF  FEA
05EA6:  MOVFF  FEF,C26
05EAA:  MOVFF  03,FEA
05EAE:  MOVFF  01,FE9
05EB2:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05EB6:  MOVLW  5D
05EB8:  ADDWF  x1E,W
05EBA:  MOVWF  x24
05EBC:  MOVLW  00
05EBE:  ADDWFC x1F,W
05EC0:  MOVWF  x25
05EC2:  MOVLW  7A
05EC4:  ADDWF  x1E,W
05EC6:  MOVWF  FE9
05EC8:  MOVLW  01
05ECA:  ADDWFC x1F,W
05ECC:  MOVWF  FEA
05ECE:  MOVFF  FEF,C26
05ED2:  MOVF   FF2,W
05ED4:  MOVWF  00
05ED6:  BCF    FF2.7
05ED8:  MOVFF  C25,FAA
05EDC:  MOVFF  C24,FA9
05EE0:  MOVFF  C26,FA8
05EE4:  BCF    FA6.6
05EE6:  BCF    FA6.7
05EE8:  BSF    FA6.2
05EEA:  MOVLB  F
05EEC:  MOVLW  55
05EEE:  MOVWF  FA7
05EF0:  MOVLW  AA
05EF2:  MOVWF  FA7
05EF4:  BSF    FA6.1
05EF6:  BTFSC  FA6.1
05EF8:  BRA    5EF6
05EFA:  BCF    FA6.2
05EFC:  MOVF   00,W
05EFE:  IORWF  FF2,F
....................                   }
05F00:  MOVLB  C
05F02:  MOVFF  C1F,03
05F06:  MOVF   x1E,W
05F08:  INCF   x1E,F
05F0A:  BTFSC  FD8.2
05F0C:  INCF   x1F,F
05F0E:  INCF   x20,F
05F10:  BTFSC  FD8.2
05F12:  INCF   x21,F
05F14:  BRA    5E20
05F16:  MOVLB  F
....................                }
....................                SMS_Massage15[j] = '\0' ; // end string
05F18:  MOVLW  5A
05F1A:  MOVLB  C
05F1C:  ADDWF  x20,W
05F1E:  MOVWF  FE9
05F20:  MOVLW  0B
05F22:  ADDWFC x21,W
05F24:  MOVWF  FEA
05F26:  CLRF   FEF
....................                
....................                j=0;
05F28:  CLRF   x21
05F2A:  CLRF   x20
....................                i++;
05F2C:  INCF   x1E,F
05F2E:  BTFSC  FD8.2
05F30:  INCF   x1F,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05F32:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05F34:  MOVLW  7A
05F36:  ADDWF  x1E,W
05F38:  MOVWF  FE9
05F3A:  MOVLW  01
05F3C:  ADDWFC x1F,W
05F3E:  MOVWF  FEA
05F40:  MOVF   FEF,W
05F42:  SUBLW  0D
05F44:  BZ    5F50
05F46:  MOVF   x21,F
05F48:  BNZ   5F50
05F4A:  MOVF   x20,W
05F4C:  SUBLW  1E
05F4E:  BC    5FA0
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05F50:  MOVLW  5D
05F52:  ADDWF  x1E,W
05F54:  MOVWF  x24
05F56:  MOVLW  00
05F58:  ADDWFC x1F,W
05F5A:  MOVWF  x25
05F5C:  MOVLW  7A
05F5E:  ADDWF  x1E,W
05F60:  MOVWF  FE9
05F62:  MOVLW  01
05F64:  ADDWFC x1F,W
05F66:  MOVWF  FEA
05F68:  MOVFF  FEF,C26
05F6C:  MOVF   FF2,W
05F6E:  MOVWF  00
05F70:  BCF    FF2.7
05F72:  MOVFF  C25,FAA
05F76:  MOVFF  C24,FA9
05F7A:  MOVFF  C26,FA8
05F7E:  BCF    FA6.6
05F80:  BCF    FA6.7
05F82:  BSF    FA6.2
05F84:  MOVLB  F
05F86:  MOVLW  55
05F88:  MOVWF  FA7
05F8A:  MOVLW  AA
05F8C:  MOVWF  FA7
05F8E:  BSF    FA6.1
05F90:  BTFSC  FA6.1
05F92:  BRA    5F90
05F94:  BCF    FA6.2
05F96:  MOVF   00,W
05F98:  IORWF  FF2,F
....................                      break;
05F9A:  BRA    602A
....................                   }
05F9C:  BRA    6012
05F9E:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage16[j] = RxD_Buff[i];
05FA0:  MOVLW  7A
05FA2:  ADDWF  x20,W
05FA4:  MOVWF  01
05FA6:  MOVLW  0B
05FA8:  ADDWFC x21,W
05FAA:  MOVWF  03
05FAC:  MOVLW  7A
05FAE:  ADDWF  x1E,W
05FB0:  MOVWF  FE9
05FB2:  MOVLW  01
05FB4:  ADDWFC x1F,W
05FB6:  MOVWF  FEA
05FB8:  MOVFF  FEF,C26
05FBC:  MOVFF  03,FEA
05FC0:  MOVFF  01,FE9
05FC4:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05FC8:  MOVLW  5D
05FCA:  ADDWF  x1E,W
05FCC:  MOVWF  x24
05FCE:  MOVLW  00
05FD0:  ADDWFC x1F,W
05FD2:  MOVWF  x25
05FD4:  MOVLW  7A
05FD6:  ADDWF  x1E,W
05FD8:  MOVWF  FE9
05FDA:  MOVLW  01
05FDC:  ADDWFC x1F,W
05FDE:  MOVWF  FEA
05FE0:  MOVFF  FEF,C26
05FE4:  MOVF   FF2,W
05FE6:  MOVWF  00
05FE8:  BCF    FF2.7
05FEA:  MOVFF  C25,FAA
05FEE:  MOVFF  C24,FA9
05FF2:  MOVFF  C26,FA8
05FF6:  BCF    FA6.6
05FF8:  BCF    FA6.7
05FFA:  BSF    FA6.2
05FFC:  MOVLB  F
05FFE:  MOVLW  55
06000:  MOVWF  FA7
06002:  MOVLW  AA
06004:  MOVWF  FA7
06006:  BSF    FA6.1
06008:  BTFSC  FA6.1
0600A:  BRA    6008
0600C:  BCF    FA6.2
0600E:  MOVF   00,W
06010:  IORWF  FF2,F
....................                   }
06012:  MOVLB  C
06014:  MOVFF  C1F,03
06018:  MOVF   x1E,W
0601A:  INCF   x1E,F
0601C:  BTFSC  FD8.2
0601E:  INCF   x1F,F
06020:  INCF   x20,F
06022:  BTFSC  FD8.2
06024:  INCF   x21,F
06026:  BRA    5F32
06028:  MOVLB  F
....................                }
....................                SMS_Massage16[j] = '\0' ; // end string
0602A:  MOVLW  7A
0602C:  MOVLB  C
0602E:  ADDWF  x20,W
06030:  MOVWF  FE9
06032:  MOVLW  0B
06034:  ADDWFC x21,W
06036:  MOVWF  FEA
06038:  CLRF   FEF
....................                
....................             
....................                TxD_Buff[0] = Address ;         //Address
0603A:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x22 ;            //return function code
0603E:  MOVLW  22
06040:  MOVLB  0
06042:  MOVWF  x7C
....................    
....................                CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
06044:  MOVLB  C
06046:  CLRF   x26
06048:  MOVLW  7B
0604A:  MOVWF  x25
0604C:  MOVLW  02
0604E:  MOVWF  x27
06050:  MOVLB  0
06052:  CALL   2ED4
....................    
....................                TxD_Buff[2] = CRC_Hi ;
06056:  MOVFF  57B,7D
....................                TxD_Buff[3] = CRC_Lo ;
0605A:  MOVFF  57A,7E
....................    
....................                output_bit(P485ctrl,1);
0605E:  BSF    F8A.3
06060:  BCF    F93.3
....................                delay_ms(10);
06062:  MOVLW  0A
06064:  MOVLB  C
06066:  MOVWF  x24
06068:  MOVLB  0
0606A:  CALL   0936
....................    
....................                putc(Txd_Buff[0]);
0606E:  MOVF   x7B,W
06070:  CALL   2F2A
....................                putc(Txd_Buff[1]);
06074:  MOVF   x7C,W
06076:  CALL   2F2A
....................                putc(Txd_Buff[2]);
0607A:  MOVF   x7D,W
0607C:  CALL   2F2A
....................                putc(Txd_Buff[3]);
06080:  MOVF   x7E,W
06082:  CALL   2F2A
....................    
....................                delay_ms(3);
06086:  MOVLW  03
06088:  MOVLB  C
0608A:  MOVWF  x24
0608C:  MOVLB  0
0608E:  CALL   0936
....................                output_bit(P485ctrl,0);
06092:  BCF    F8A.3
06094:  BCF    F93.3
06096:  MOVLB  5
....................             }
....................             ////////////////////////////// WRITE Faultname //////////////////////////
....................    
....................             if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
06098:  MOVLB  1
0609A:  MOVF   x7B,W
0609C:  SUBLW  03
0609E:  BNZ   612C
....................             {
....................                Data_Buff[0] = Input9_16;
060A0:  MOVFF  4A,583
....................                Data_Buff[1] = Input1_8;
060A4:  MOVFF  49,584
....................                
....................                
....................                TxD_Buff[0] = Address ;         //Address
060A8:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x03 ;           //Function Code
060AC:  MOVLW  03
060AE:  MOVLB  0
060B0:  MOVWF  x7C
....................                TxD_Buff[2] = 0x02 ;          //Byte Count
060B2:  MOVLW  02
060B4:  MOVWF  x7D
....................                TxD_Buff[3] = Data_Buff[0];   //first byte Data
060B6:  MOVFF  583,7E
....................                TxD_Buff[4] = Data_Buff[1];   //first byte Data
060BA:  MOVFF  584,7F
....................    
....................                CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
060BE:  MOVLB  C
060C0:  CLRF   x26
060C2:  MOVLW  7B
060C4:  MOVWF  x25
060C6:  MOVLW  05
060C8:  MOVWF  x27
060CA:  MOVLB  0
060CC:  CALL   2ED4
....................    
....................                TxD_Buff[5] = CRC_Hi ;
060D0:  MOVFF  57B,80
....................                TxD_Buff[6] = CRC_Lo ;
060D4:  MOVFF  57A,81
....................    
....................                output_bit(P485ctrl,1);
060D8:  BSF    F8A.3
060DA:  BCF    F93.3
....................                restart_wdt();
060DC:  CLRWDT
....................                delay_ms(4);
060DE:  MOVLW  04
060E0:  MOVLB  C
060E2:  MOVWF  x24
060E4:  MOVLB  0
060E6:  CALL   0936
....................                restart_wdt();
060EA:  CLRWDT
....................    
....................                putc(TxD_Buff[0]) ;               //Address
060EC:  MOVF   x7B,W
060EE:  CALL   2F2A
....................                putc(TxD_Buff[1]) ;               //Function Code
060F2:  MOVF   x7C,W
060F4:  CALL   2F2A
....................                putc(TxD_Buff[2]) ;               //Byte Count
060F8:  MOVF   x7D,W
060FA:  CALL   2F2A
....................                putc(TxD_Buff[3]) ;
060FE:  MOVF   x7E,W
06100:  CALL   2F2A
....................                putc(TxD_Buff[4]) ;
06104:  MOVF   x7F,W
06106:  CALL   2F2A
....................                putc(TxD_Buff[5]) ;
0610A:  MOVF   x80,W
0610C:  CALL   2F2A
....................                putc(TxD_Buff[6]) ;
06110:  MOVF   x81,W
06112:  CALL   2F2A
....................    
....................                restart_wdt();
06116:  CLRWDT
....................                delay_ms(3);
06118:  MOVLW  03
0611A:  MOVLB  C
0611C:  MOVWF  x24
0611E:  MOVLB  0
06120:  CALL   0936
....................                restart_wdt();
06124:  CLRWDT
....................                output_bit(P485ctrl,0);
06126:  BCF    F8A.3
06128:  BCF    F93.3
0612A:  MOVLB  1
....................             }
....................       }  //if(RxD_Buff[1] == address)
.................... 
....................       Send_check_Time = 500; //5 Second
0612C:  MOVLW  01
0612E:  MOVLB  5
06130:  MOVWF  x7D
06132:  MOVLW  F4
06134:  MOVWF  x7C
....................    }
.................... 
....................    recieve_completed = 0 ;
06136:  BCF    30.5
....................    sequence = end_sq ;
06138:  MOVFF  6F,78
....................    T_timeout = 0x00;
0613C:  MOVLB  9
0613E:  CLRF   x85
....................    RxD_DataLen = 0x00 ;
06140:  MOVLB  0
06142:  CLRF   x7A
....................    output_bit(P485ctrl,0);
06144:  BCF    F8A.3
06146:  BCF    F93.3
06148:  GOTO   AE2A (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void Read_Input(void)
.................... {
.................... 
....................    int8 MCP23s17_1_A;
....................    int8 MCP23s17_1_B;
....................    int8 MCP23s17_2_A;
....................    int8 MCP23s17_2_B;
....................    
....................    //if(NoOfPoint >= 10)
....................    //{
....................       // if(NoOfPoint >= 20)
....................    //{   
....................      
....................       ///////////////////////--Edit--///////////////////
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
*
02060:  MOVLW  02
02062:  MOVLB  C
02064:  MOVWF  x29
02066:  MOVLB  0
02068:  RCALL  1F30
0206A:  MOVFF  01,983
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
0206E:  BTFSS  1A.4
02070:  BRA    2078
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;   
02072:  MOVLB  9
02074:  COMF   x83,F
02076:  MOVLB  0
....................       }
....................       
....................       
....................      // FaultNow[11] = MCP23s17_Ip_dat;
....................       FaultNow[1] = MCP23s17_Ip_dat >> 1;
02078:  BCF    FD8.0
0207A:  MOVLB  9
0207C:  RRCF   x83,W
0207E:  MOVLB  B
02080:  BCF    xBB.1
02082:  BTFSC  FE8.0
02084:  BSF    xBB.1
....................       FaultNow[2] = MCP23s17_Ip_dat >> 2;
02086:  MOVLB  9
02088:  RRCF   x83,W
0208A:  MOVWF  00
0208C:  RRCF   00,F
0208E:  MOVLW  3F
02090:  ANDWF  00,F
02092:  MOVLB  B
02094:  BCF    xBB.2
02096:  BTFSC  00.0
02098:  BSF    xBB.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 3;
0209A:  MOVLB  9
0209C:  RRCF   x83,W
0209E:  MOVWF  00
020A0:  RRCF   00,F
020A2:  RRCF   00,F
020A4:  MOVLW  1F
020A6:  ANDWF  00,F
020A8:  MOVLB  B
020AA:  BCF    xBB.3
020AC:  BTFSC  00.0
020AE:  BSF    xBB.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 4;
020B0:  MOVLB  9
020B2:  SWAPF  x83,W
020B4:  MOVWF  00
020B6:  MOVLW  0F
020B8:  ANDWF  00,F
020BA:  MOVLB  B
020BC:  BCF    xBB.4
020BE:  BTFSC  00.0
020C0:  BSF    xBB.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 5;
020C2:  MOVLB  9
020C4:  SWAPF  x83,W
020C6:  MOVWF  00
020C8:  RRCF   00,F
020CA:  MOVLW  07
020CC:  ANDWF  00,F
020CE:  MOVLB  B
020D0:  BCF    xBB.5
020D2:  BTFSC  00.0
020D4:  BSF    xBB.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 6;
020D6:  MOVLB  9
020D8:  SWAPF  x83,W
020DA:  MOVWF  00
020DC:  RRCF   00,F
020DE:  RRCF   00,F
020E0:  MOVLW  03
020E2:  ANDWF  00,F
020E4:  MOVLB  B
020E6:  BCF    xBB.6
020E8:  BTFSC  00.0
020EA:  BSF    xBB.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 7;
020EC:  CLRF   00
020EE:  MOVLB  9
020F0:  BTFSC  x83.7
020F2:  BSF    00.0
020F4:  MOVLB  B
020F6:  BCF    xBB.7
020F8:  BTFSC  00.0
020FA:  BSF    xBB.7
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
020FC:  MOVLW  02
020FE:  MOVLB  C
02100:  MOVWF  x29
02102:  MOVLB  0
02104:  RCALL  1F4C
02106:  MOVFF  01,983
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
0210A:  BTFSS  1A.4
0210C:  BRA    2114
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
0210E:  MOVLB  9
02110:  COMF   x83,F
02112:  MOVLB  0
....................       }
....................       
....................       FaultNow[8] = MCP23s17_Ip_dat;
02114:  MOVLB  B
02116:  BCF    xBC.0
02118:  MOVLB  9
0211A:  BTFSS  x83.0
0211C:  BRA    2124
0211E:  MOVLB  B
02120:  BSF    xBC.0
02122:  MOVLB  9
....................       
....................       
....................        MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_0);
02124:  MOVLB  C
02126:  CLRF   x29
02128:  MOVLB  0
0212A:  RCALL  1F30
0212C:  MOVFF  01,983
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
02130:  BTFSS  1A.4
02132:  BRA    213A
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;         
02134:  MOVLB  9
02136:  COMF   x83,F
02138:  MOVLB  0
....................       }
....................       
....................       // FaultNow[11] = MCP23s17_Ip_dat;
....................       FaultNow[9] = MCP23s17_Ip_dat >> 1;
0213A:  BCF    FD8.0
0213C:  MOVLB  9
0213E:  RRCF   x83,W
02140:  MOVLB  B
02142:  BCF    xBC.1
02144:  BTFSC  FE8.0
02146:  BSF    xBC.1
....................       FaultNow[10] = MCP23s17_Ip_dat >> 2;
02148:  MOVLB  9
0214A:  RRCF   x83,W
0214C:  MOVWF  00
0214E:  RRCF   00,F
02150:  MOVLW  3F
02152:  ANDWF  00,F
02154:  MOVLB  B
02156:  BCF    xBC.2
02158:  BTFSC  00.0
0215A:  BSF    xBC.2
....................       FaultNow[11] = MCP23s17_Ip_dat >> 3;
0215C:  MOVLB  9
0215E:  RRCF   x83,W
02160:  MOVWF  00
02162:  RRCF   00,F
02164:  RRCF   00,F
02166:  MOVLW  1F
02168:  ANDWF  00,F
0216A:  MOVLB  B
0216C:  BCF    xBC.3
0216E:  BTFSC  00.0
02170:  BSF    xBC.3
....................       FaultNow[12] = MCP23s17_Ip_dat >> 4;
02172:  MOVLB  9
02174:  SWAPF  x83,W
02176:  MOVWF  00
02178:  MOVLW  0F
0217A:  ANDWF  00,F
0217C:  MOVLB  B
0217E:  BCF    xBC.4
02180:  BTFSC  00.0
02182:  BSF    xBC.4
....................       FaultNow[13] = MCP23s17_Ip_dat >> 5;
02184:  MOVLB  9
02186:  SWAPF  x83,W
02188:  MOVWF  00
0218A:  RRCF   00,F
0218C:  MOVLW  07
0218E:  ANDWF  00,F
02190:  MOVLB  B
02192:  BCF    xBC.5
02194:  BTFSC  00.0
02196:  BSF    xBC.5
....................       FaultNow[14] = MCP23s17_Ip_dat >> 6;
02198:  MOVLB  9
0219A:  SWAPF  x83,W
0219C:  MOVWF  00
0219E:  RRCF   00,F
021A0:  RRCF   00,F
021A2:  MOVLW  03
021A4:  ANDWF  00,F
021A6:  MOVLB  B
021A8:  BCF    xBC.6
021AA:  BTFSC  00.0
021AC:  BSF    xBC.6
....................       FaultNow[15] = MCP23s17_Ip_dat >> 7;
021AE:  CLRF   00
021B0:  MOVLB  9
021B2:  BTFSC  x83.7
021B4:  BSF    00.0
021B6:  MOVLB  B
021B8:  BCF    xBC.7
021BA:  BTFSC  00.0
021BC:  BSF    xBC.7
....................       
....................        MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
021BE:  MOVLB  C
021C0:  CLRF   x29
021C2:  MOVLB  0
021C4:  RCALL  1F4C
021C6:  MOVFF  01,983
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
021CA:  BTFSS  1A.4
021CC:  BRA    21D4
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
021CE:  MOVLB  9
021D0:  COMF   x83,F
021D2:  MOVLB  0
....................       }
....................       
....................       
....................       FaultNow[16] = MCP23s17_Ip_dat;
021D4:  MOVLB  B
021D6:  BCF    xBD.0
021D8:  MOVLB  9
021DA:  BTFSS  x83.0
021DC:  BRA    21E4
021DE:  MOVLB  B
021E0:  BSF    xBD.0
021E2:  MOVLB  9
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=16; i++)
021E4:  MOVLW  01
021E6:  MOVLB  C
021E8:  MOVWF  x28
021EA:  MOVF   x28,W
021EC:  SUBLW  10
021EE:  BTFSS  FD8.0
021F0:  BRA    27DA
....................       {
....................          if(FaultNCNO[i] ==NO)
021F2:  MOVFF  C28,C2C
021F6:  MOVLW  0C
021F8:  MOVWF  x2E
021FA:  MOVLW  12
021FC:  MOVWF  x2D
021FE:  MOVLB  0
02200:  RCALL  1F68
02202:  MOVF   01,W
02204:  ANDLW  01
02206:  SUBLW  01
02208:  BTFSS  FD8.2
0220A:  BRA    24E2
....................          {
....................              if(FaultNow[i]==0)
0220C:  MOVFF  C28,C2C
02210:  MOVLW  0B
02212:  MOVLB  C
02214:  MOVWF  x2E
02216:  MOVLW  BB
02218:  MOVWF  x2D
0221A:  MOVLB  0
0221C:  RCALL  1F68
0221E:  MOVF   01,W
02220:  ANDLW  01
02222:  BTFSS  FD8.2
02224:  BRA    2384
....................              {   
....................                if(FaultAgo[i]==0)
02226:  MOVFF  C28,C2C
0222A:  MOVLW  0B
0222C:  MOVLB  C
0222E:  MOVWF  x2E
02230:  MOVLW  B8
02232:  MOVWF  x2D
02234:  MOVLB  0
02236:  RCALL  1F68
02238:  MOVF   01,W
0223A:  ANDLW  01
0223C:  BTFSS  FD8.2
0223E:  BRA    2368
....................                {
....................                    ReleaseTime[i]++;
02240:  BCF    FD8.0
02242:  MOVLB  C
02244:  RLCF   x28,W
02246:  CLRF   03
02248:  ADDLW  BE
0224A:  MOVWF  FE9
0224C:  MOVLW  0B
0224E:  ADDWFC 03,W
02250:  MOVWF  FEA
02252:  MOVLW  01
02254:  ADDWF  FEE,F
02256:  BNC   225A
02258:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
0225A:  BCF    FD8.0
0225C:  RLCF   x28,W
0225E:  CLRF   03
02260:  ADDLW  BE
02262:  MOVWF  FE9
02264:  MOVLW  0B
02266:  ADDWFC 03,W
02268:  MOVWF  FEA
0226A:  MOVFF  FEC,C2A
0226E:  MOVF   FED,F
02270:  MOVFF  FEF,C29
02274:  BCF    FD8.0
02276:  RLCF   x28,W
02278:  CLRF   03
0227A:  ADDLW  E8
0227C:  MOVWF  FE9
0227E:  MOVLW  0B
02280:  ADDWFC 03,W
02282:  MOVWF  FEA
02284:  MOVFF  FEC,C2E
02288:  MOVF   FED,F
0228A:  MOVFF  FEF,C2D
0228E:  CLRF   x30
02290:  MOVLW  4B
02292:  MOVWF  x2F
02294:  MOVLB  0
02296:  RCALL  1F9E
02298:  MOVFF  02,C2C
0229C:  MOVFF  01,C2B
022A0:  MOVLW  0F
022A2:  MOVLB  C
022A4:  ADDWF  01,W
022A6:  MOVWF  01
022A8:  MOVLW  00
022AA:  ADDWFC 02,W
022AC:  MOVWF  03
022AE:  MOVF   03,W
022B0:  SUBWF  x2A,W
022B2:  BNC   2364
022B4:  BNZ   22BC
022B6:  MOVF   01,W
022B8:  SUBWF  x29,W
022BA:  BNC   2364
....................                    {   
....................                      ReleaseTime[i] = 0;
022BC:  BCF    FD8.0
022BE:  RLCF   x28,W
022C0:  CLRF   03
022C2:  ADDLW  BE
022C4:  MOVWF  FE9
022C6:  MOVLW  0B
022C8:  ADDWFC 03,W
022CA:  MOVWF  FEA
022CC:  CLRF   FEC
022CE:  MOVF   FED,F
022D0:  CLRF   FEF
....................                      switch(i)
022D2:  MOVLW  01
022D4:  SUBWF  x28,W
022D6:  ADDLW  F0
022D8:  BC    2364
022DA:  ADDLW  10
022DC:  MOVLB  0
022DE:  GOTO   29B0
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
022E2:  MOVLB  B
022E4:  BCF    x9A.0
....................                         break;
022E6:  MOVLB  C
022E8:  BRA    2364
....................                         case 2:
....................                            Inputt.B2 = 0; 
022EA:  MOVLB  B
022EC:  BCF    x9A.1
....................                         break;
022EE:  MOVLB  C
022F0:  BRA    2364
....................                         case 3:
....................                            Inputt.B3 = 0; 
022F2:  MOVLB  B
022F4:  BCF    x9A.2
....................                         break;
022F6:  MOVLB  C
022F8:  BRA    2364
....................                         case 4:
....................                            Inputt.B4 = 0; 
022FA:  MOVLB  B
022FC:  BCF    x9A.3
....................                         break;
022FE:  MOVLB  C
02300:  BRA    2364
....................                         case 5:
....................                            Inputt.B5 = 0; 
02302:  MOVLB  B
02304:  BCF    x9A.4
....................                         break;
02306:  MOVLB  C
02308:  BRA    2364
....................                         case 6:
....................                            Inputt.B6 = 0; 
0230A:  MOVLB  B
0230C:  BCF    x9A.5
....................                         break;
0230E:  MOVLB  C
02310:  BRA    2364
....................                         case 7:
....................                            Inputt.B7 = 0; 
02312:  MOVLB  B
02314:  BCF    x9A.6
....................                          break;
02316:  MOVLB  C
02318:  BRA    2364
....................                          case 8:
....................                            Inputt.B8 = 0; 
0231A:  MOVLB  B
0231C:  BCF    x9A.7
....................                         break;
0231E:  MOVLB  C
02320:  BRA    2364
....................                         case 9:
....................                            Inputt.B9 = 0; 
02322:  MOVLB  B
02324:  BCF    x9B.0
....................                         break;
02326:  MOVLB  C
02328:  BRA    2364
....................                         case 10:
....................                            Inputt.B10 = 0; 
0232A:  MOVLB  B
0232C:  BCF    x9B.1
....................                         break;
0232E:  MOVLB  C
02330:  BRA    2364
....................                         case 11:
....................                            Inputt.B11 = 0; 
02332:  MOVLB  B
02334:  BCF    x9B.2
....................                         break;
02336:  MOVLB  C
02338:  BRA    2364
....................                         case 12:
....................                            Inputt.B12 = 0; 
0233A:  MOVLB  B
0233C:  BCF    x9B.3
....................                         break;
0233E:  MOVLB  C
02340:  BRA    2364
....................                         case 13:
....................                            Inputt.B13 = 0; 
02342:  MOVLB  B
02344:  BCF    x9B.4
....................                         break;
02346:  MOVLB  C
02348:  BRA    2364
....................                         case 14:
....................                            Inputt.B14 = 0; 
0234A:  MOVLB  B
0234C:  BCF    x9B.5
....................                         break;
0234E:  MOVLB  C
02350:  BRA    2364
....................                         case 15:
....................                            Inputt.B15 = 0; 
02352:  MOVLB  B
02354:  BCF    x9B.6
....................                         break;
02356:  MOVLB  C
02358:  BRA    2364
....................                         case 16:
....................                             Inputt.B16 = 0; 
0235A:  MOVLB  B
0235C:  BCF    x9B.7
....................                          break;
0235E:  MOVLB  C
02360:  BRA    2364
02362:  MOVLB  C
....................                                    
....................                      }                 
....................                    }
....................                }
02364:  BRA    2380
02366:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
02368:  BCF    FD8.0
0236A:  MOVLB  C
0236C:  RLCF   x28,W
0236E:  CLRF   03
02370:  ADDLW  BE
02372:  MOVWF  FE9
02374:  MOVLW  0B
02376:  ADDWFC 03,W
02378:  MOVWF  FEA
0237A:  CLRF   FEC
0237C:  MOVF   FED,F
0237E:  CLRF   FEF
....................                }
....................              }
02380:  BRA    24E0
02382:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
02384:  MOVFF  C28,C2C
02388:  MOVLW  0B
0238A:  MOVLB  C
0238C:  MOVWF  x2E
0238E:  MOVLW  B8
02390:  MOVWF  x2D
02392:  MOVLB  0
02394:  RCALL  1F68
02396:  MOVF   01,W
02398:  ANDLW  01
0239A:  SUBLW  01
0239C:  BTFSS  FD8.2
0239E:  BRA    24C8
....................                {
....................                    ReleaseTime[i]++;
023A0:  BCF    FD8.0
023A2:  MOVLB  C
023A4:  RLCF   x28,W
023A6:  CLRF   03
023A8:  ADDLW  BE
023AA:  MOVWF  FE9
023AC:  MOVLW  0B
023AE:  ADDWFC 03,W
023B0:  MOVWF  FEA
023B2:  MOVLW  01
023B4:  ADDWF  FEE,F
023B6:  BNC   23BA
023B8:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
023BA:  BCF    FD8.0
023BC:  RLCF   x28,W
023BE:  CLRF   03
023C0:  ADDLW  BE
023C2:  MOVWF  FE9
023C4:  MOVLW  0B
023C6:  ADDWFC 03,W
023C8:  MOVWF  FEA
023CA:  MOVFF  FEC,C2A
023CE:  MOVF   FED,F
023D0:  MOVFF  FEF,C29
023D4:  BCF    FD8.0
023D6:  RLCF   x28,W
023D8:  CLRF   03
023DA:  ADDLW  E8
023DC:  MOVWF  FE9
023DE:  MOVLW  0B
023E0:  ADDWFC 03,W
023E2:  MOVWF  FEA
023E4:  MOVFF  FEC,C2E
023E8:  MOVF   FED,F
023EA:  MOVFF  FEF,C2D
023EE:  CLRF   x30
023F0:  MOVLW  4B
023F2:  MOVWF  x2F
023F4:  MOVLB  0
023F6:  RCALL  1F9E
023F8:  MOVFF  02,C2C
023FC:  MOVFF  01,C2B
02400:  MOVLW  0F
02402:  MOVLB  C
02404:  ADDWF  01,W
02406:  MOVWF  01
02408:  MOVLW  00
0240A:  ADDWFC 02,W
0240C:  MOVWF  03
0240E:  MOVF   03,W
02410:  SUBWF  x2A,W
02412:  BNC   24C4
02414:  BNZ   241C
02416:  MOVF   01,W
02418:  SUBWF  x29,W
0241A:  BNC   24C4
....................                    {   
....................                      ReleaseTime[i] = 1;
0241C:  BCF    FD8.0
0241E:  RLCF   x28,W
02420:  CLRF   03
02422:  ADDLW  BE
02424:  MOVWF  FE9
02426:  MOVLW  0B
02428:  ADDWFC 03,W
0242A:  MOVWF  FEA
0242C:  CLRF   FEC
0242E:  MOVF   FED,F
02430:  MOVLW  01
02432:  MOVWF  FEF
....................                      switch(i)
02434:  SUBWF  x28,W
02436:  ADDLW  F0
02438:  BC    24C4
0243A:  ADDLW  10
0243C:  MOVLB  0
0243E:  GOTO   29EA
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
02442:  MOVLB  B
02444:  BSF    x9A.0
....................                         break;
02446:  MOVLB  C
02448:  BRA    24C4
....................                         case 2:
....................                            Inputt.B2 = 1; 
0244A:  MOVLB  B
0244C:  BSF    x9A.1
....................                         break;
0244E:  MOVLB  C
02450:  BRA    24C4
....................                         case 3:
....................                            Inputt.B3 = 1; 
02452:  MOVLB  B
02454:  BSF    x9A.2
....................                         break;
02456:  MOVLB  C
02458:  BRA    24C4
....................                         case 4:
....................                            Inputt.B4 = 1; 
0245A:  MOVLB  B
0245C:  BSF    x9A.3
....................                         break;
0245E:  MOVLB  C
02460:  BRA    24C4
....................                         case 5:
....................                            Inputt.B5 = 1; 
02462:  MOVLB  B
02464:  BSF    x9A.4
....................                         break;
02466:  MOVLB  C
02468:  BRA    24C4
....................                         case 6:
....................                            Inputt.B6 = 1; 
0246A:  MOVLB  B
0246C:  BSF    x9A.5
....................                         break;
0246E:  MOVLB  C
02470:  BRA    24C4
....................                         case 7:
....................                            Inputt.B7 = 1; 
02472:  MOVLB  B
02474:  BSF    x9A.6
....................                          break;
02476:  MOVLB  C
02478:  BRA    24C4
....................                          case 8:
....................                          Inputt.B8 = 1; 
0247A:  MOVLB  B
0247C:  BSF    x9A.7
....................                         break;
0247E:  MOVLB  C
02480:  BRA    24C4
....................                         case 9:
....................                            Inputt.B9 = 1; 
02482:  MOVLB  B
02484:  BSF    x9B.0
....................                         break;
02486:  MOVLB  C
02488:  BRA    24C4
....................                         case 10:
....................                            Inputt.B10 = 1; 
0248A:  MOVLB  B
0248C:  BSF    x9B.1
....................                         break;
0248E:  MOVLB  C
02490:  BRA    24C4
....................                         case 11:
....................                            Inputt.B11 = 1; 
02492:  MOVLB  B
02494:  BSF    x9B.2
....................                         break;
02496:  MOVLB  C
02498:  BRA    24C4
....................                         case 12:
....................                            Inputt.B12 = 1; 
0249A:  MOVLB  B
0249C:  BSF    x9B.3
....................                         break;
0249E:  MOVLB  C
024A0:  BRA    24C4
....................                         case 13:
....................                            Inputt.B13 = 1; 
024A2:  MOVLB  B
024A4:  BSF    x9B.4
....................                         break;
024A6:  MOVLB  C
024A8:  BRA    24C4
....................                         case 14:
....................                            Inputt.B14 = 1; 
024AA:  MOVLB  B
024AC:  BSF    x9B.5
....................                         break;
024AE:  MOVLB  C
024B0:  BRA    24C4
....................                         case 15:
....................                            Inputt.B15 = 1; 
024B2:  MOVLB  B
024B4:  BSF    x9B.6
....................                         break;
024B6:  MOVLB  C
024B8:  BRA    24C4
....................                         case 16:
....................                             Inputt.B16 = 1;
024BA:  MOVLB  B
024BC:  BSF    x9B.7
....................                          break;
024BE:  MOVLB  C
024C0:  BRA    24C4
024C2:  MOVLB  C
....................                                    
....................                      }                 
....................                    }
....................                }
024C4:  BRA    24E0
024C6:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
024C8:  BCF    FD8.0
024CA:  MOVLB  C
024CC:  RLCF   x28,W
024CE:  CLRF   03
024D0:  ADDLW  BE
024D2:  MOVWF  FE9
024D4:  MOVLW  0B
024D6:  ADDWFC 03,W
024D8:  MOVWF  FEA
024DA:  CLRF   FEC
024DC:  MOVF   FED,F
024DE:  CLRF   FEF
....................                }
....................              
....................              /*
....................                   ReleaseTime[i] = 0;
....................                   switch(i)
....................                   {
....................                       case 1:
....................                          Inputt.B1 = 1; 
....................                       break;
....................                       case 2:
....................                          Inputt.B2 = 1; 
....................                       break;
....................                       case 3:
....................                          Inputt.B3 = 1; 
....................                       break;
....................                       case 4:
....................                          Inputt.B4 = 1; 
....................                       break;
....................                       case 5:
....................                          Inputt.B5 = 1; 
....................                       break;
....................                       case 6:
....................                          Inputt.B6 = 1; 
....................                       break;
....................                       case 7:
....................                          Inputt.B7 = 1; 
....................                       break;
....................                       case 8:
....................                          Inputt.B8 = 1; 
....................                       break;
....................                       case 9:
....................                          Inputt.B9 = 1; 
....................                       break;
....................                       case 10:
....................                          Inputt.B10 = 1; 
....................                       break;
....................                       case 11:
....................                          Inputt.B11 = 1; 
....................                       break;
....................                       case 12:
....................                          Inputt.B12 = 1; 
....................                       break;
....................                       case 13:
....................                          Inputt.B13 = 1; 
....................                       break;
....................                       case 14:
....................                          Inputt.B14 = 1; 
....................                       break;
....................                       case 15:
....................                          Inputt.B15 = 1; 
....................                       break;
....................                       case 16:
....................                          Inputt.B16 = 1; 
....................                       break;
....................                          
....................                   }
....................                   */
....................              }
....................           }
024E0:  BRA    27D2
....................           else if(FaultNCNO[i] ==NC)
024E2:  MOVFF  C28,C2C
024E6:  MOVLW  0C
024E8:  MOVLB  C
024EA:  MOVWF  x2E
024EC:  MOVLW  12
024EE:  MOVWF  x2D
024F0:  MOVLB  0
024F2:  RCALL  1F68
024F4:  MOVF   01,W
024F6:  ANDLW  01
024F8:  BTFSS  FD8.2
024FA:  BRA    27D4
....................           {
....................              if(FaultNow[i]==1)
024FC:  MOVFF  C28,C2C
02500:  MOVLW  0B
02502:  MOVLB  C
02504:  MOVWF  x2E
02506:  MOVLW  BB
02508:  MOVWF  x2D
0250A:  MOVLB  0
0250C:  RCALL  1F68
0250E:  MOVF   01,W
02510:  ANDLW  01
02512:  SUBLW  01
02514:  BTFSS  FD8.2
02516:  BRA    2678
....................              {
....................                if(FaultAgo[i]==1)
02518:  MOVFF  C28,C2C
0251C:  MOVLW  0B
0251E:  MOVLB  C
02520:  MOVWF  x2E
02522:  MOVLW  B8
02524:  MOVWF  x2D
02526:  MOVLB  0
02528:  RCALL  1F68
0252A:  MOVF   01,W
0252C:  ANDLW  01
0252E:  SUBLW  01
02530:  BTFSS  FD8.2
02532:  BRA    265C
....................                {
....................                    ReleaseTime[i]++;
02534:  BCF    FD8.0
02536:  MOVLB  C
02538:  RLCF   x28,W
0253A:  CLRF   03
0253C:  ADDLW  BE
0253E:  MOVWF  FE9
02540:  MOVLW  0B
02542:  ADDWFC 03,W
02544:  MOVWF  FEA
02546:  MOVLW  01
02548:  ADDWF  FEE,F
0254A:  BNC   254E
0254C:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
0254E:  BCF    FD8.0
02550:  RLCF   x28,W
02552:  CLRF   03
02554:  ADDLW  BE
02556:  MOVWF  FE9
02558:  MOVLW  0B
0255A:  ADDWFC 03,W
0255C:  MOVWF  FEA
0255E:  MOVFF  FEC,C2A
02562:  MOVF   FED,F
02564:  MOVFF  FEF,C29
02568:  BCF    FD8.0
0256A:  RLCF   x28,W
0256C:  CLRF   03
0256E:  ADDLW  E8
02570:  MOVWF  FE9
02572:  MOVLW  0B
02574:  ADDWFC 03,W
02576:  MOVWF  FEA
02578:  MOVFF  FEC,C2E
0257C:  MOVF   FED,F
0257E:  MOVFF  FEF,C2D
02582:  CLRF   x30
02584:  MOVLW  4B
02586:  MOVWF  x2F
02588:  MOVLB  0
0258A:  RCALL  1F9E
0258C:  MOVFF  02,C2C
02590:  MOVFF  01,C2B
02594:  MOVLW  0F
02596:  MOVLB  C
02598:  ADDWF  01,W
0259A:  MOVWF  01
0259C:  MOVLW  00
0259E:  ADDWFC 02,W
025A0:  MOVWF  03
025A2:  MOVF   03,W
025A4:  SUBWF  x2A,W
025A6:  BNC   2658
025A8:  BNZ   25B0
025AA:  MOVF   01,W
025AC:  SUBWF  x29,W
025AE:  BNC   2658
....................                    {   
....................                      ReleaseTime[i] = 0;
025B0:  BCF    FD8.0
025B2:  RLCF   x28,W
025B4:  CLRF   03
025B6:  ADDLW  BE
025B8:  MOVWF  FE9
025BA:  MOVLW  0B
025BC:  ADDWFC 03,W
025BE:  MOVWF  FEA
025C0:  CLRF   FEC
025C2:  MOVF   FED,F
025C4:  CLRF   FEF
....................                      switch(i)
025C6:  MOVLW  01
025C8:  SUBWF  x28,W
025CA:  ADDLW  F0
025CC:  BC    2658
025CE:  ADDLW  10
025D0:  MOVLB  0
025D2:  GOTO   2A24
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
025D6:  MOVLB  B
025D8:  BSF    x9A.0
....................                         break;
025DA:  MOVLB  C
025DC:  BRA    2658
....................                         case 2:
....................                            Inputt.B2 = 1; 
025DE:  MOVLB  B
025E0:  BSF    x9A.1
....................                         break;
025E2:  MOVLB  C
025E4:  BRA    2658
....................                         case 3:
....................                            Inputt.B3 = 1; 
025E6:  MOVLB  B
025E8:  BSF    x9A.2
....................                         break;
025EA:  MOVLB  C
025EC:  BRA    2658
....................                         case 4:
....................                            Inputt.B4 = 1; 
025EE:  MOVLB  B
025F0:  BSF    x9A.3
....................                         break;
025F2:  MOVLB  C
025F4:  BRA    2658
....................                         case 5:
....................                            Inputt.B5 = 1; 
025F6:  MOVLB  B
025F8:  BSF    x9A.4
....................                         break;
025FA:  MOVLB  C
025FC:  BRA    2658
....................                         case 6:
....................                            Inputt.B6 = 1; 
025FE:  MOVLB  B
02600:  BSF    x9A.5
....................                         break;
02602:  MOVLB  C
02604:  BRA    2658
....................                         case 7:
....................                            Inputt.B7 = 1; 
02606:  MOVLB  B
02608:  BSF    x9A.6
....................                          break;
0260A:  MOVLB  C
0260C:  BRA    2658
....................                          case 8:
....................                            Inputt.B8 = 1; 
0260E:  MOVLB  B
02610:  BSF    x9A.7
....................                         break;
02612:  MOVLB  C
02614:  BRA    2658
....................                         case 9:
....................                            Inputt.B9 = 1; 
02616:  MOVLB  B
02618:  BSF    x9B.0
....................                         break;
0261A:  MOVLB  C
0261C:  BRA    2658
....................                         case 10:
....................                            Inputt.B10 = 1; 
0261E:  MOVLB  B
02620:  BSF    x9B.1
....................                         break;
02622:  MOVLB  C
02624:  BRA    2658
....................                         case 11:
....................                            Inputt.B11 = 1; 
02626:  MOVLB  B
02628:  BSF    x9B.2
....................                         break;
0262A:  MOVLB  C
0262C:  BRA    2658
....................                         case 12:
....................                            Inputt.B12 = 1; 
0262E:  MOVLB  B
02630:  BSF    x9B.3
....................                         break;
02632:  MOVLB  C
02634:  BRA    2658
....................                         case 13:
....................                            Inputt.B13 = 1; 
02636:  MOVLB  B
02638:  BSF    x9B.4
....................                         break;
0263A:  MOVLB  C
0263C:  BRA    2658
....................                         case 14:
....................                            Inputt.B14 = 1; 
0263E:  MOVLB  B
02640:  BSF    x9B.5
....................                         break;
02642:  MOVLB  C
02644:  BRA    2658
....................                         case 15:
....................                            Inputt.B15 = 1; 
02646:  MOVLB  B
02648:  BSF    x9B.6
....................                         break;
0264A:  MOVLB  C
0264C:  BRA    2658
....................                         case 16:
....................                             Inputt.B16 = 1; 
0264E:  MOVLB  B
02650:  BSF    x9B.7
....................                          break;
02652:  MOVLB  C
02654:  BRA    2658
02656:  MOVLB  C
....................                                                                    
....................                      }                 
....................                   }
....................                }
02658:  BRA    2674
0265A:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
0265C:  BCF    FD8.0
0265E:  MOVLB  C
02660:  RLCF   x28,W
02662:  CLRF   03
02664:  ADDLW  BE
02666:  MOVWF  FE9
02668:  MOVLW  0B
0266A:  ADDWFC 03,W
0266C:  MOVWF  FEA
0266E:  CLRF   FEC
02670:  MOVF   FED,F
02672:  CLRF   FEF
....................                }
....................              }
02674:  BRA    27D2
02676:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
02678:  MOVFF  C28,C2C
0267C:  MOVLW  0B
0267E:  MOVLB  C
02680:  MOVWF  x2E
02682:  MOVLW  B8
02684:  MOVWF  x2D
02686:  MOVLB  0
02688:  RCALL  1F68
0268A:  MOVF   01,W
0268C:  ANDLW  01
0268E:  BTFSS  FD8.2
02690:  BRA    27BA
....................                {
....................                    ReleaseTime[i]++;
02692:  BCF    FD8.0
02694:  MOVLB  C
02696:  RLCF   x28,W
02698:  CLRF   03
0269A:  ADDLW  BE
0269C:  MOVWF  FE9
0269E:  MOVLW  0B
026A0:  ADDWFC 03,W
026A2:  MOVWF  FEA
026A4:  MOVLW  01
026A6:  ADDWF  FEE,F
026A8:  BNC   26AC
026AA:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
026AC:  BCF    FD8.0
026AE:  RLCF   x28,W
026B0:  CLRF   03
026B2:  ADDLW  BE
026B4:  MOVWF  FE9
026B6:  MOVLW  0B
026B8:  ADDWFC 03,W
026BA:  MOVWF  FEA
026BC:  MOVFF  FEC,C2A
026C0:  MOVF   FED,F
026C2:  MOVFF  FEF,C29
026C6:  BCF    FD8.0
026C8:  RLCF   x28,W
026CA:  CLRF   03
026CC:  ADDLW  E8
026CE:  MOVWF  FE9
026D0:  MOVLW  0B
026D2:  ADDWFC 03,W
026D4:  MOVWF  FEA
026D6:  MOVFF  FEC,C2E
026DA:  MOVF   FED,F
026DC:  MOVFF  FEF,C2D
026E0:  CLRF   x30
026E2:  MOVLW  4B
026E4:  MOVWF  x2F
026E6:  MOVLB  0
026E8:  RCALL  1F9E
026EA:  MOVFF  02,C2C
026EE:  MOVFF  01,C2B
026F2:  MOVLW  0F
026F4:  MOVLB  C
026F6:  ADDWF  01,W
026F8:  MOVWF  01
026FA:  MOVLW  00
026FC:  ADDWFC 02,W
026FE:  MOVWF  03
02700:  MOVF   03,W
02702:  SUBWF  x2A,W
02704:  BNC   27B6
02706:  BNZ   270E
02708:  MOVF   01,W
0270A:  SUBWF  x29,W
0270C:  BNC   27B6
....................                    {   
....................                      ReleaseTime[i] = 0;
0270E:  BCF    FD8.0
02710:  RLCF   x28,W
02712:  CLRF   03
02714:  ADDLW  BE
02716:  MOVWF  FE9
02718:  MOVLW  0B
0271A:  ADDWFC 03,W
0271C:  MOVWF  FEA
0271E:  CLRF   FEC
02720:  MOVF   FED,F
02722:  CLRF   FEF
....................                      switch(i)
02724:  MOVLW  01
02726:  SUBWF  x28,W
02728:  ADDLW  F0
0272A:  BC    27B6
0272C:  ADDLW  10
0272E:  MOVLB  0
02730:  GOTO   2A5E
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
02734:  MOVLB  B
02736:  BCF    x9A.0
....................                         break;
02738:  MOVLB  C
0273A:  BRA    27B6
....................                         case 2:
....................                            Inputt.B2 = 0; 
0273C:  MOVLB  B
0273E:  BCF    x9A.1
....................                         break;
02740:  MOVLB  C
02742:  BRA    27B6
....................                         case 3:
....................                            Inputt.B3 = 0; 
02744:  MOVLB  B
02746:  BCF    x9A.2
....................                         break;
02748:  MOVLB  C
0274A:  BRA    27B6
....................                         case 4:
....................                            Inputt.B4 = 0; 
0274C:  MOVLB  B
0274E:  BCF    x9A.3
....................                         break;
02750:  MOVLB  C
02752:  BRA    27B6
....................                         case 5:
....................                            Inputt.B5 = 0; 
02754:  MOVLB  B
02756:  BCF    x9A.4
....................                         break;
02758:  MOVLB  C
0275A:  BRA    27B6
....................                         case 6:
....................                            Inputt.B6 = 0; 
0275C:  MOVLB  B
0275E:  BCF    x9A.5
....................                         break;
02760:  MOVLB  C
02762:  BRA    27B6
....................                         case 7:
....................                            Inputt.B7 = 0; 
02764:  MOVLB  B
02766:  BCF    x9A.6
....................                          break;
02768:  MOVLB  C
0276A:  BRA    27B6
....................                          case 8:
....................                            Inputt.B8 = 0; 
0276C:  MOVLB  B
0276E:  BCF    x9A.7
....................                         break;
02770:  MOVLB  C
02772:  BRA    27B6
....................                         case 9:
....................                            Inputt.B9 = 0; 
02774:  MOVLB  B
02776:  BCF    x9B.0
....................                         break;
02778:  MOVLB  C
0277A:  BRA    27B6
....................                         case 10:
....................                            Inputt.B10 = 0; 
0277C:  MOVLB  B
0277E:  BCF    x9B.1
....................                         break;
02780:  MOVLB  C
02782:  BRA    27B6
....................                         case 11:
....................                            Inputt.B11 = 0; 
02784:  MOVLB  B
02786:  BCF    x9B.2
....................                         break;
02788:  MOVLB  C
0278A:  BRA    27B6
....................                         case 12:
....................                            Inputt.B12 = 0; 
0278C:  MOVLB  B
0278E:  BCF    x9B.3
....................                         break;
02790:  MOVLB  C
02792:  BRA    27B6
....................                         case 13:
....................                            Inputt.B13 = 0; 
02794:  MOVLB  B
02796:  BCF    x9B.4
....................                         break;
02798:  MOVLB  C
0279A:  BRA    27B6
....................                         case 14:
....................                            Inputt.B14 = 0; 
0279C:  MOVLB  B
0279E:  BCF    x9B.5
....................                         break;
027A0:  MOVLB  C
027A2:  BRA    27B6
....................                         case 15:
....................                            Inputt.B15 = 0; 
027A4:  MOVLB  B
027A6:  BCF    x9B.6
....................                         break;
027A8:  MOVLB  C
027AA:  BRA    27B6
....................                         case 16:
....................                             Inputt.B16 = 0;
027AC:  MOVLB  B
027AE:  BCF    x9B.7
....................                          break;
027B0:  MOVLB  C
027B2:  BRA    27B6
027B4:  MOVLB  C
....................                                    
....................                      }                 
....................                    }
....................                }
027B6:  BRA    27D2
027B8:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
027BA:  BCF    FD8.0
027BC:  MOVLB  C
027BE:  RLCF   x28,W
027C0:  CLRF   03
027C2:  ADDLW  BE
027C4:  MOVWF  FE9
027C6:  MOVLW  0B
027C8:  ADDWFC 03,W
027CA:  MOVWF  FEA
027CC:  CLRF   FEC
027CE:  MOVF   FED,F
027D0:  CLRF   FEF
027D2:  MOVLB  0
....................                }
....................                   /*
....................                   ReleaseTime[i] = 0;
....................                   switch(i)
....................                   {
....................                       case 1:
....................                          Inputt.B1 = 0; 
....................                       break;
....................                       case 2:
....................                          Inputt.B2 = 0; 
....................                       break;
....................                       case 3:
....................                          Inputt.B3 = 0; 
....................                       break;
....................                       case 4:
....................                          Inputt.B4 = 0; 
....................                       break;
....................                       case 5:
....................                          Inputt.B5 = 0; 
....................                       break;
....................                       case 6:
....................                          Inputt.B6 = 0; 
....................                       break;
....................                       case 7:
....................                          Inputt.B7 = 0; 
....................                       break;
....................                       case 8:
....................                          Inputt.B8 = 0; 
....................                       break;
....................                       case 9:
....................                          Inputt.B9 = 0; 
....................                       break;
....................                       case 10:
....................                          Inputt.B10 = 0; 
....................                       break;
....................                       case 11:
....................                          Inputt.B11 = 0; 
....................                       break;
....................                       case 12:
....................                          Inputt.B12 = 0; 
....................                       break;
....................                       case 13:
....................                          Inputt.B13 = 0; 
....................                       break;
....................                       case 14:
....................                          Inputt.B14 = 0; 
....................                       break;
....................                       case 15:
....................                          Inputt.B15 = 0; 
....................                       break;
....................                       case 16:
....................                          Inputt.B16 = 0; 
....................                       break;
....................                              
....................                   }
....................                   */
....................              }
....................           }
027D4:  MOVLB  C
027D6:  INCF   x28,F
027D8:  BRA    21EA
....................       }
....................       
....................       StoreReleaseFault();
027DA:  MOVLB  0
027DC:  BRA    2002
....................       
....................       Input11_18 = 0x00;
027DE:  CLRF   4C
....................       Input11_18 = Input11_18 | ~Inputt.B16;
027E0:  MOVLW  00
027E2:  MOVLB  B
027E4:  BTFSS  x9B.7
027E6:  MOVLW  01
027E8:  IORWF  4C,F
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B16;
027EA:  BCF    FD8.0
027EC:  RLCF   4C,W
027EE:  MOVLB  C
027F0:  MOVWF  x29
027F2:  MOVLW  00
027F4:  MOVLB  B
027F6:  BTFSS  x9B.7
027F8:  MOVLW  01
027FA:  MOVLB  C
027FC:  IORWF  x29,W
027FE:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B16;
02800:  BCF    FD8.0
02802:  RLCF   4C,W
02804:  MOVWF  x29
02806:  MOVLW  00
02808:  MOVLB  B
0280A:  BTFSS  x9B.7
0280C:  MOVLW  01
0280E:  MOVLB  C
02810:  IORWF  x29,W
02812:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B15;
02814:  BCF    FD8.0
02816:  RLCF   4C,W
02818:  MOVWF  x29
0281A:  MOVLW  00
0281C:  MOVLB  B
0281E:  BTFSS  x9B.6
02820:  MOVLW  01
02822:  MOVLB  C
02824:  IORWF  x29,W
02826:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B14;
02828:  BCF    FD8.0
0282A:  RLCF   4C,W
0282C:  MOVWF  x29
0282E:  MOVLW  00
02830:  MOVLB  B
02832:  BTFSS  x9B.5
02834:  MOVLW  01
02836:  MOVLB  C
02838:  IORWF  x29,W
0283A:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B13;
0283C:  BCF    FD8.0
0283E:  RLCF   4C,W
02840:  MOVWF  x29
02842:  MOVLW  00
02844:  MOVLB  B
02846:  BTFSS  x9B.4
02848:  MOVLW  01
0284A:  MOVLB  C
0284C:  IORWF  x29,W
0284E:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B12;
02850:  BCF    FD8.0
02852:  RLCF   4C,W
02854:  MOVWF  x29
02856:  MOVLW  00
02858:  MOVLB  B
0285A:  BTFSS  x9B.3
0285C:  MOVLW  01
0285E:  MOVLB  C
02860:  IORWF  x29,W
02862:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B11;
02864:  BCF    FD8.0
02866:  RLCF   4C,W
02868:  MOVWF  x29
0286A:  MOVLW  00
0286C:  MOVLB  B
0286E:  BTFSS  x9B.2
02870:  MOVLW  01
02872:  MOVLB  C
02874:  IORWF  x29,W
02876:  MOVWF  4C
....................       
....................    
....................       Input1_8 = 0x00;
02878:  CLRF   49
....................       Input1_8 = Input1_8 | ~Inputt.B8;
0287A:  MOVLW  00
0287C:  MOVLB  B
0287E:  BTFSS  x9A.7
02880:  MOVLW  01
02882:  IORWF  49,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
02884:  BCF    FD8.0
02886:  RLCF   49,W
02888:  MOVLB  C
0288A:  MOVWF  x29
0288C:  MOVLW  00
0288E:  MOVLB  B
02890:  BTFSS  x9A.6
02892:  MOVLW  01
02894:  MOVLB  C
02896:  IORWF  x29,W
02898:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
0289A:  BCF    FD8.0
0289C:  RLCF   49,W
0289E:  MOVWF  x29
028A0:  MOVLW  00
028A2:  MOVLB  B
028A4:  BTFSS  x9A.5
028A6:  MOVLW  01
028A8:  MOVLB  C
028AA:  IORWF  x29,W
028AC:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
028AE:  BCF    FD8.0
028B0:  RLCF   49,W
028B2:  MOVWF  x29
028B4:  MOVLW  00
028B6:  MOVLB  B
028B8:  BTFSS  x9A.4
028BA:  MOVLW  01
028BC:  MOVLB  C
028BE:  IORWF  x29,W
028C0:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
028C2:  BCF    FD8.0
028C4:  RLCF   49,W
028C6:  MOVWF  x29
028C8:  MOVLW  00
028CA:  MOVLB  B
028CC:  BTFSS  x9A.3
028CE:  MOVLW  01
028D0:  MOVLB  C
028D2:  IORWF  x29,W
028D4:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
028D6:  BCF    FD8.0
028D8:  RLCF   49,W
028DA:  MOVWF  x29
028DC:  MOVLW  00
028DE:  MOVLB  B
028E0:  BTFSS  x9A.2
028E2:  MOVLW  01
028E4:  MOVLB  C
028E6:  IORWF  x29,W
028E8:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
028EA:  BCF    FD8.0
028EC:  RLCF   49,W
028EE:  MOVWF  x29
028F0:  MOVLW  00
028F2:  MOVLB  B
028F4:  BTFSS  x9A.1
028F6:  MOVLW  01
028F8:  MOVLB  C
028FA:  IORWF  x29,W
028FC:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
028FE:  BCF    FD8.0
02900:  RLCF   49,W
02902:  MOVWF  x29
02904:  MOVLW  00
02906:  MOVLB  B
02908:  BTFSS  x9A.0
0290A:  MOVLW  01
0290C:  MOVLB  C
0290E:  IORWF  x29,W
02910:  MOVWF  49
....................     
....................       //Input9_10 = 0x00;
....................       //Input9_10 = Input9_10 | ~Inputt.B10;
....................       //Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
....................       
....................       Input9_16 = 0x00;
02912:  CLRF   4A
....................       Input9_16 = Input9_16 | ~Inputt.B16;
02914:  MOVLW  00
02916:  MOVLB  B
02918:  BTFSS  x9B.7
0291A:  MOVLW  01
0291C:  IORWF  4A,F
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B15;
0291E:  BCF    FD8.0
02920:  RLCF   4A,W
02922:  MOVLB  C
02924:  MOVWF  x29
02926:  MOVLW  00
02928:  MOVLB  B
0292A:  BTFSS  x9B.6
0292C:  MOVLW  01
0292E:  MOVLB  C
02930:  IORWF  x29,W
02932:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B14;
02934:  BCF    FD8.0
02936:  RLCF   4A,W
02938:  MOVWF  x29
0293A:  MOVLW  00
0293C:  MOVLB  B
0293E:  BTFSS  x9B.5
02940:  MOVLW  01
02942:  MOVLB  C
02944:  IORWF  x29,W
02946:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B13;
02948:  BCF    FD8.0
0294A:  RLCF   4A,W
0294C:  MOVWF  x29
0294E:  MOVLW  00
02950:  MOVLB  B
02952:  BTFSS  x9B.4
02954:  MOVLW  01
02956:  MOVLB  C
02958:  IORWF  x29,W
0295A:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B12;
0295C:  BCF    FD8.0
0295E:  RLCF   4A,W
02960:  MOVWF  x29
02962:  MOVLW  00
02964:  MOVLB  B
02966:  BTFSS  x9B.3
02968:  MOVLW  01
0296A:  MOVLB  C
0296C:  IORWF  x29,W
0296E:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B11;
02970:  BCF    FD8.0
02972:  RLCF   4A,W
02974:  MOVWF  x29
02976:  MOVLW  00
02978:  MOVLB  B
0297A:  BTFSS  x9B.2
0297C:  MOVLW  01
0297E:  MOVLB  C
02980:  IORWF  x29,W
02982:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B10;
02984:  BCF    FD8.0
02986:  RLCF   4A,W
02988:  MOVWF  x29
0298A:  MOVLW  00
0298C:  MOVLB  B
0298E:  BTFSS  x9B.1
02990:  MOVLW  01
02992:  MOVLB  C
02994:  IORWF  x29,W
02996:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B9;
02998:  BCF    FD8.0
0299A:  RLCF   4A,W
0299C:  MOVWF  x29
0299E:  MOVLW  00
029A0:  MOVLB  B
029A2:  BTFSS  x9B.0
029A4:  MOVLW  01
029A6:  MOVLB  C
029A8:  IORWF  x29,W
029AA:  MOVWF  4A
029AC:  MOVLB  0
029AE:  RETURN 0
....................       
....................       ///////////////---Anal Fault---//////////////////
....................       
....................       ///////////////////////--Edit--///////////////////
....................       
....................       /*
....................       Inputt.B11 = MCP23s17_Ip_dat;
....................       Inputt.B12 = MCP23s17_Ip_dat >> 1;
....................       Inputt.B13 = MCP23s17_Ip_dat >> 2;
....................       Inputt.B14 = MCP23s17_Ip_dat >> 3;
....................       Inputt.B15 = MCP23s17_Ip_dat >> 4;
....................       Inputt.B16 = MCP23s17_Ip_dat >> 5;
....................       Inputt.B17 = MCP23s17_Ip_dat >> 6;
....................       Inputt.B18 = MCP23s17_Ip_dat >> 7;
.................... 
....................       Input11_18 = 0x00;
....................       Input11_18 = Input1_8 | ~Inputt.B18;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B17;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B16;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B15;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B14;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B13;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B12;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B11;
....................       
....................       */
....................     /*
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................       }
....................       
....................       Inputt.B19 = MCP23s17_Ip_dat;
....................       Inputt.B20 = MCP23s17_Ip_dat >> 1;
....................       
.................... 
....................       Input19_20 = 0x00;
....................       Input19_20 = Input9_10 | ~Inputt.B20;
....................       Input19_20 = (Input9_10 << 1) | ~Inputt.B19;
....................    //}
....................    
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................          
....................       }
....................       
....................       Inputt.B1 = MCP23s17_Ip_dat;
....................       Inputt.B2 = MCP23s17_Ip_dat >> 1;
....................       Inputt.B3 = MCP23s17_Ip_dat >> 2;
....................       Inputt.B4 = MCP23s17_Ip_dat >> 3;
....................       Inputt.B5 = MCP23s17_Ip_dat >> 4;
....................       Inputt.B6 = MCP23s17_Ip_dat >> 5;
....................       Inputt.B7 = MCP23s17_Ip_dat >> 6;
....................       Inputt.B8 = MCP23s17_Ip_dat >> 7;
.................... 
....................       Input1_8 = 0x00;
....................       Input1_8 = Input1_8 | ~Inputt.B8;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
....................     
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................       }
....................       
....................       Inputt.B9 = MCP23s17_Ip_dat;
....................       Inputt.B10 = MCP23s17_Ip_dat >> 1;
....................       
.................... 
....................       Input9_10 = 0x00;
....................       Input9_10 = Input9_10 | ~Inputt.B10;
....................       Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
....................       */
....................       //+++++++++++++++++++++++++++++++++++++++++++
....................    //}
....................    
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Input type 1-8
*
00A54:  MOVFF  FF2,C25
00A58:  BCF    FF2.7
00A5A:  CLRF   FAA
00A5C:  MOVLW  01
00A5E:  MOVWF  FA9
00A60:  BCF    FA6.6
00A62:  BCF    FA6.7
00A64:  BSF    FA6.0
00A66:  MOVF   FA8,W
00A68:  MOVLB  C
00A6A:  BTFSC  x25.7
00A6C:  BSF    FF2.7
00A6E:  MOVWF  39
....................    InputType1_8 = EEpDat;
00A70:  MOVFF  39,3A
.................... 
....................    InputType.B1 = EEpDat;
00A74:  MOVLB  B
00A76:  BCF    x9E.0
00A78:  BTFSC  39.0
00A7A:  BSF    x9E.0
....................    InputType.B2 = EEpDat >> 1;
00A7C:  BCF    FD8.0
00A7E:  RRCF   39,W
00A80:  BCF    x9E.1
00A82:  BTFSC  FE8.0
00A84:  BSF    x9E.1
....................    InputType.B3 = EEpDat >> 2;
00A86:  RRCF   39,W
00A88:  MOVWF  00
00A8A:  RRCF   00,F
00A8C:  MOVLW  3F
00A8E:  ANDWF  00,F
00A90:  BCF    x9E.2
00A92:  BTFSC  00.0
00A94:  BSF    x9E.2
....................    InputType.B4 = EEpDat >> 3;
00A96:  RRCF   39,W
00A98:  MOVWF  00
00A9A:  RRCF   00,F
00A9C:  RRCF   00,F
00A9E:  MOVLW  1F
00AA0:  ANDWF  00,F
00AA2:  BCF    x9E.3
00AA4:  BTFSC  00.0
00AA6:  BSF    x9E.3
....................    InputType.B5 = EEpDat >> 4;
00AA8:  SWAPF  39,W
00AAA:  MOVWF  00
00AAC:  MOVLW  0F
00AAE:  ANDWF  00,F
00AB0:  BCF    x9E.4
00AB2:  BTFSC  00.0
00AB4:  BSF    x9E.4
....................    InputType.B6 = EEpDat >> 5;
00AB6:  SWAPF  39,W
00AB8:  MOVWF  00
00ABA:  RRCF   00,F
00ABC:  MOVLW  07
00ABE:  ANDWF  00,F
00AC0:  BCF    x9E.5
00AC2:  BTFSC  00.0
00AC4:  BSF    x9E.5
....................    InputType.B7 = EEpDat >> 6;
00AC6:  SWAPF  39,W
00AC8:  MOVWF  00
00ACA:  RRCF   00,F
00ACC:  RRCF   00,F
00ACE:  MOVLW  03
00AD0:  ANDWF  00,F
00AD2:  BCF    x9E.6
00AD4:  BTFSC  00.0
00AD6:  BSF    x9E.6
....................    InputType.B8 = EEpDat >> 7;
00AD8:  CLRF   00
00ADA:  BTFSC  39.7
00ADC:  BSF    00.0
00ADE:  BCF    x9E.7
00AE0:  BTFSC  00.0
00AE2:  BSF    x9E.7
.................... 
....................    EEpDat = read_eeprom(0x02);   // Input type 9-16
00AE4:  MOVFF  FF2,C25
00AE8:  BCF    FF2.7
00AEA:  CLRF   FAA
00AEC:  MOVLW  02
00AEE:  MOVWF  FA9
00AF0:  BCF    FA6.6
00AF2:  BCF    FA6.7
00AF4:  BSF    FA6.0
00AF6:  MOVF   FA8,W
00AF8:  MOVLB  C
00AFA:  BTFSC  x25.7
00AFC:  BSF    FF2.7
00AFE:  MOVWF  39
....................    InputType9_16 = EEpDat;
00B00:  MOVFF  39,3B
.................... 
....................    InputType.B9 = EEpDat;
00B04:  MOVLB  B
00B06:  BCF    x9F.0
00B08:  BTFSC  39.0
00B0A:  BSF    x9F.0
....................    InputType.B10 = EEpDat >> 1;
00B0C:  BCF    FD8.0
00B0E:  RRCF   39,W
00B10:  BCF    x9F.1
00B12:  BTFSC  FE8.0
00B14:  BSF    x9F.1
....................    InputType.B11 = EEpDat >> 2;
00B16:  RRCF   39,W
00B18:  MOVWF  00
00B1A:  RRCF   00,F
00B1C:  MOVLW  3F
00B1E:  ANDWF  00,F
00B20:  BCF    x9F.2
00B22:  BTFSC  00.0
00B24:  BSF    x9F.2
....................    InputType.B12 = EEpDat >> 3;
00B26:  RRCF   39,W
00B28:  MOVWF  00
00B2A:  RRCF   00,F
00B2C:  RRCF   00,F
00B2E:  MOVLW  1F
00B30:  ANDWF  00,F
00B32:  BCF    x9F.3
00B34:  BTFSC  00.0
00B36:  BSF    x9F.3
....................    InputType.B13 = EEpDat >> 4;
00B38:  SWAPF  39,W
00B3A:  MOVWF  00
00B3C:  MOVLW  0F
00B3E:  ANDWF  00,F
00B40:  BCF    x9F.4
00B42:  BTFSC  00.0
00B44:  BSF    x9F.4
....................    InputType.B14 = EEpDat >> 5;
00B46:  SWAPF  39,W
00B48:  MOVWF  00
00B4A:  RRCF   00,F
00B4C:  MOVLW  07
00B4E:  ANDWF  00,F
00B50:  BCF    x9F.5
00B52:  BTFSC  00.0
00B54:  BSF    x9F.5
....................    InputType.B15 = EEpDat >> 6;
00B56:  SWAPF  39,W
00B58:  MOVWF  00
00B5A:  RRCF   00,F
00B5C:  RRCF   00,F
00B5E:  MOVLW  03
00B60:  ANDWF  00,F
00B62:  BCF    x9F.6
00B64:  BTFSC  00.0
00B66:  BSF    x9F.6
....................    InputType.B16 = EEpDat >> 7;
00B68:  CLRF   00
00B6A:  BTFSC  39.7
00B6C:  BSF    00.0
00B6E:  BCF    x9F.7
00B70:  BTFSC  00.0
00B72:  BSF    x9F.7
....................    
....................    FaultNCNO[1] = InputType.B1;
00B74:  MOVLB  C
00B76:  BCF    x12.1
00B78:  MOVLB  B
00B7A:  BTFSS  x9E.0
00B7C:  BRA    0B84
00B7E:  MOVLB  C
00B80:  BSF    x12.1
00B82:  MOVLB  B
....................    FaultNCNO[2] = InputType.B2;
00B84:  MOVLB  C
00B86:  BCF    x12.2
00B88:  MOVLB  B
00B8A:  BTFSS  x9E.1
00B8C:  BRA    0B94
00B8E:  MOVLB  C
00B90:  BSF    x12.2
00B92:  MOVLB  B
....................    FaultNCNO[3] = InputType.B3;
00B94:  MOVLB  C
00B96:  BCF    x12.3
00B98:  MOVLB  B
00B9A:  BTFSS  x9E.2
00B9C:  BRA    0BA4
00B9E:  MOVLB  C
00BA0:  BSF    x12.3
00BA2:  MOVLB  B
....................    FaultNCNO[4] = InputType.B4;
00BA4:  MOVLB  C
00BA6:  BCF    x12.4
00BA8:  MOVLB  B
00BAA:  BTFSS  x9E.3
00BAC:  BRA    0BB4
00BAE:  MOVLB  C
00BB0:  BSF    x12.4
00BB2:  MOVLB  B
....................    FaultNCNO[5] = InputType.B5;
00BB4:  MOVLB  C
00BB6:  BCF    x12.5
00BB8:  MOVLB  B
00BBA:  BTFSS  x9E.4
00BBC:  BRA    0BC4
00BBE:  MOVLB  C
00BC0:  BSF    x12.5
00BC2:  MOVLB  B
....................    FaultNCNO[6] = InputType.B6;
00BC4:  MOVLB  C
00BC6:  BCF    x12.6
00BC8:  MOVLB  B
00BCA:  BTFSS  x9E.5
00BCC:  BRA    0BD4
00BCE:  MOVLB  C
00BD0:  BSF    x12.6
00BD2:  MOVLB  B
....................    FaultNCNO[7] = InputType.B7;
00BD4:  MOVLB  C
00BD6:  BCF    x12.7
00BD8:  MOVLB  B
00BDA:  BTFSS  x9E.6
00BDC:  BRA    0BE4
00BDE:  MOVLB  C
00BE0:  BSF    x12.7
00BE2:  MOVLB  B
....................    FaultNCNO[8] = InputType.B8;
00BE4:  MOVLB  C
00BE6:  BCF    x13.0
00BE8:  MOVLB  B
00BEA:  BTFSS  x9E.7
00BEC:  BRA    0BF4
00BEE:  MOVLB  C
00BF0:  BSF    x13.0
00BF2:  MOVLB  B
....................    FaultNCNO[9] = InputType.B9;
00BF4:  MOVLB  C
00BF6:  BCF    x13.1
00BF8:  MOVLB  B
00BFA:  BTFSS  x9F.0
00BFC:  BRA    0C04
00BFE:  MOVLB  C
00C00:  BSF    x13.1
00C02:  MOVLB  B
....................    FaultNCNO[10] = InputType.B10;
00C04:  MOVLB  C
00C06:  BCF    x13.2
00C08:  MOVLB  B
00C0A:  BTFSS  x9F.1
00C0C:  BRA    0C14
00C0E:  MOVLB  C
00C10:  BSF    x13.2
00C12:  MOVLB  B
....................    FaultNCNO[11] = InputType.B11;
00C14:  MOVLB  C
00C16:  BCF    x13.3
00C18:  MOVLB  B
00C1A:  BTFSS  x9F.2
00C1C:  BRA    0C24
00C1E:  MOVLB  C
00C20:  BSF    x13.3
00C22:  MOVLB  B
....................    FaultNCNO[12] = InputType.B12;
00C24:  MOVLB  C
00C26:  BCF    x13.4
00C28:  MOVLB  B
00C2A:  BTFSS  x9F.3
00C2C:  BRA    0C34
00C2E:  MOVLB  C
00C30:  BSF    x13.4
00C32:  MOVLB  B
....................    FaultNCNO[13] = InputType.B13;
00C34:  MOVLB  C
00C36:  BCF    x13.5
00C38:  MOVLB  B
00C3A:  BTFSS  x9F.4
00C3C:  BRA    0C44
00C3E:  MOVLB  C
00C40:  BSF    x13.5
00C42:  MOVLB  B
....................    FaultNCNO[14] = InputType.B14;
00C44:  MOVLB  C
00C46:  BCF    x13.6
00C48:  MOVLB  B
00C4A:  BTFSS  x9F.5
00C4C:  BRA    0C54
00C4E:  MOVLB  C
00C50:  BSF    x13.6
00C52:  MOVLB  B
....................    FaultNCNO[15] = InputType.B15;
00C54:  MOVLB  C
00C56:  BCF    x13.7
00C58:  MOVLB  B
00C5A:  BTFSS  x9F.6
00C5C:  BRA    0C64
00C5E:  MOVLB  C
00C60:  BSF    x13.7
00C62:  MOVLB  B
....................    FaultNCNO[16] = InputType.B16;
00C64:  MOVLB  C
00C66:  BCF    x14.0
00C68:  MOVLB  B
00C6A:  BTFSS  x9F.7
00C6C:  BRA    0C74
00C6E:  MOVLB  C
00C70:  BSF    x14.0
00C72:  MOVLB  B
....................    
.................... /*
....................    EEpDat = read_eeprom(0x03);   // Input type 9-16
....................    InputType17_24 = EEpDat;
.................... 
....................    InputType.B17 = EEpDat;
....................    InputType.B18 = EEpDat >> 1;
....................    InputType.B19 = EEpDat >> 2;
....................    InputType.B20 = EEpDat >> 3;
....................    InputType.B21 = EEpDat >> 4;
....................    InputType.B22 = EEpDat >> 5;
....................    InputType.B23 = EEpDat >> 6;
....................    InputType.B24 = EEpDat >> 7;
.................... */
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
00C74:  MOVFF  FF2,C25
00C78:  BCF    FF2.7
00C7A:  CLRF   FAA
00C7C:  MOVLW  04
00C7E:  MOVWF  FA9
00C80:  BCF    FA6.6
00C82:  BCF    FA6.7
00C84:  BSF    FA6.0
00C86:  MOVF   FA8,W
00C88:  MOVLB  C
00C8A:  BTFSC  x25.7
00C8C:  BSF    FF2.7
00C8E:  MOVWF  39
....................    FaultType1_8 = EEpDat;
00C90:  MOVFF  39,3D
.................... 
....................    FaultType.B1 = EEpDat;
00C94:  MOVLB  B
00C96:  BCF    xA0.0
00C98:  BTFSC  39.0
00C9A:  BSF    xA0.0
....................    FaultType.B2 = EEpDat >> 1;
00C9C:  BCF    FD8.0
00C9E:  RRCF   39,W
00CA0:  BCF    xA0.1
00CA2:  BTFSC  FE8.0
00CA4:  BSF    xA0.1
....................    FaultType.B3 = EEpDat >> 2;
00CA6:  RRCF   39,W
00CA8:  MOVWF  00
00CAA:  RRCF   00,F
00CAC:  MOVLW  3F
00CAE:  ANDWF  00,F
00CB0:  BCF    xA0.2
00CB2:  BTFSC  00.0
00CB4:  BSF    xA0.2
....................    FaultType.B4 = EEpDat >> 3;
00CB6:  RRCF   39,W
00CB8:  MOVWF  00
00CBA:  RRCF   00,F
00CBC:  RRCF   00,F
00CBE:  MOVLW  1F
00CC0:  ANDWF  00,F
00CC2:  BCF    xA0.3
00CC4:  BTFSC  00.0
00CC6:  BSF    xA0.3
....................    FaultType.B5 = EEpDat >> 4;
00CC8:  SWAPF  39,W
00CCA:  MOVWF  00
00CCC:  MOVLW  0F
00CCE:  ANDWF  00,F
00CD0:  BCF    xA0.4
00CD2:  BTFSC  00.0
00CD4:  BSF    xA0.4
....................    FaultType.B6 = EEpDat >> 5;
00CD6:  SWAPF  39,W
00CD8:  MOVWF  00
00CDA:  RRCF   00,F
00CDC:  MOVLW  07
00CDE:  ANDWF  00,F
00CE0:  BCF    xA0.5
00CE2:  BTFSC  00.0
00CE4:  BSF    xA0.5
....................    FaultType.B7 = EEpDat >> 6;
00CE6:  SWAPF  39,W
00CE8:  MOVWF  00
00CEA:  RRCF   00,F
00CEC:  RRCF   00,F
00CEE:  MOVLW  03
00CF0:  ANDWF  00,F
00CF2:  BCF    xA0.6
00CF4:  BTFSC  00.0
00CF6:  BSF    xA0.6
....................    FaultType.B8 = EEpDat >> 7;
00CF8:  CLRF   00
00CFA:  BTFSC  39.7
00CFC:  BSF    00.0
00CFE:  BCF    xA0.7
00D00:  BTFSC  00.0
00D02:  BSF    xA0.7
.................... 
....................    EEpDat = read_eeprom(0x05);   // Fault type 9-16
00D04:  MOVFF  FF2,C25
00D08:  BCF    FF2.7
00D0A:  CLRF   FAA
00D0C:  MOVLW  05
00D0E:  MOVWF  FA9
00D10:  BCF    FA6.6
00D12:  BCF    FA6.7
00D14:  BSF    FA6.0
00D16:  MOVF   FA8,W
00D18:  MOVLB  C
00D1A:  BTFSC  x25.7
00D1C:  BSF    FF2.7
00D1E:  MOVWF  39
....................    FaultType9_16 = EEpDat;
00D20:  MOVFF  39,3E
.................... 
....................    FaultType.B9 = EEpDat;
00D24:  MOVLB  B
00D26:  BCF    xA1.0
00D28:  BTFSC  39.0
00D2A:  BSF    xA1.0
....................    FaultType.B10 = EEpDat >> 1;
00D2C:  BCF    FD8.0
00D2E:  RRCF   39,W
00D30:  BCF    xA1.1
00D32:  BTFSC  FE8.0
00D34:  BSF    xA1.1
....................    FaultType.B11 = EEpDat >> 2;
00D36:  RRCF   39,W
00D38:  MOVWF  00
00D3A:  RRCF   00,F
00D3C:  MOVLW  3F
00D3E:  ANDWF  00,F
00D40:  BCF    xA1.2
00D42:  BTFSC  00.0
00D44:  BSF    xA1.2
....................    FaultType.B12 = EEpDat >> 3;
00D46:  RRCF   39,W
00D48:  MOVWF  00
00D4A:  RRCF   00,F
00D4C:  RRCF   00,F
00D4E:  MOVLW  1F
00D50:  ANDWF  00,F
00D52:  BCF    xA1.3
00D54:  BTFSC  00.0
00D56:  BSF    xA1.3
....................    FaultType.B13 = EEpDat >> 4;
00D58:  SWAPF  39,W
00D5A:  MOVWF  00
00D5C:  MOVLW  0F
00D5E:  ANDWF  00,F
00D60:  BCF    xA1.4
00D62:  BTFSC  00.0
00D64:  BSF    xA1.4
....................    FaultType.B14 = EEpDat >> 5;
00D66:  SWAPF  39,W
00D68:  MOVWF  00
00D6A:  RRCF   00,F
00D6C:  MOVLW  07
00D6E:  ANDWF  00,F
00D70:  BCF    xA1.5
00D72:  BTFSC  00.0
00D74:  BSF    xA1.5
....................    FaultType.B15 = EEpDat >> 6;
00D76:  SWAPF  39,W
00D78:  MOVWF  00
00D7A:  RRCF   00,F
00D7C:  RRCF   00,F
00D7E:  MOVLW  03
00D80:  ANDWF  00,F
00D82:  BCF    xA1.6
00D84:  BTFSC  00.0
00D86:  BSF    xA1.6
....................    FaultType.B16 = EEpDat >> 7;
00D88:  CLRF   00
00D8A:  BTFSC  39.7
00D8C:  BSF    00.0
00D8E:  BCF    xA1.7
00D90:  BTFSC  00.0
00D92:  BSF    xA1.7
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00D94:  MOVFF  FF2,C25
00D98:  BCF    FF2.7
00D9A:  CLRF   FAA
00D9C:  MOVLW  07
00D9E:  MOVWF  FA9
00DA0:  BCF    FA6.6
00DA2:  BCF    FA6.7
00DA4:  BSF    FA6.0
00DA6:  MOVF   FA8,W
00DA8:  MOVLB  C
00DAA:  BTFSC  x25.7
00DAC:  BSF    FF2.7
00DAE:  MOVWF  39
....................    OutputType1_8 = EEpDat;
00DB0:  MOVFF  39,40
.................... 
....................    OutputType.B1 = EEpDat;
00DB4:  MOVLB  B
00DB6:  BCF    xA2.0
00DB8:  BTFSC  39.0
00DBA:  BSF    xA2.0
....................    OutputType.B2 = EEpDat >> 1;
00DBC:  BCF    FD8.0
00DBE:  RRCF   39,W
00DC0:  BCF    xA2.1
00DC2:  BTFSC  FE8.0
00DC4:  BSF    xA2.1
....................    OutputType.B3 = EEpDat >> 2;
00DC6:  RRCF   39,W
00DC8:  MOVWF  00
00DCA:  RRCF   00,F
00DCC:  MOVLW  3F
00DCE:  ANDWF  00,F
00DD0:  BCF    xA2.2
00DD2:  BTFSC  00.0
00DD4:  BSF    xA2.2
....................    OutputType.B4 = EEpDat >> 3;
00DD6:  RRCF   39,W
00DD8:  MOVWF  00
00DDA:  RRCF   00,F
00DDC:  RRCF   00,F
00DDE:  MOVLW  1F
00DE0:  ANDWF  00,F
00DE2:  BCF    xA2.3
00DE4:  BTFSC  00.0
00DE6:  BSF    xA2.3
....................    OutputType.B5 = EEpDat >> 4;
00DE8:  SWAPF  39,W
00DEA:  MOVWF  00
00DEC:  MOVLW  0F
00DEE:  ANDWF  00,F
00DF0:  BCF    xA2.4
00DF2:  BTFSC  00.0
00DF4:  BSF    xA2.4
....................    OutputType.B6 = EEpDat >> 5;
00DF6:  SWAPF  39,W
00DF8:  MOVWF  00
00DFA:  RRCF   00,F
00DFC:  MOVLW  07
00DFE:  ANDWF  00,F
00E00:  BCF    xA2.5
00E02:  BTFSC  00.0
00E04:  BSF    xA2.5
....................    OutputType.B7 = EEpDat >> 6;
00E06:  SWAPF  39,W
00E08:  MOVWF  00
00E0A:  RRCF   00,F
00E0C:  RRCF   00,F
00E0E:  MOVLW  03
00E10:  ANDWF  00,F
00E12:  BCF    xA2.6
00E14:  BTFSC  00.0
00E16:  BSF    xA2.6
....................    OutputType.B8 = EEpDat >> 7;
00E18:  CLRF   00
00E1A:  BTFSC  39.7
00E1C:  BSF    00.0
00E1E:  BCF    xA2.7
00E20:  BTFSC  00.0
00E22:  BSF    xA2.7
.................... 
....................    EEpDat = read_eeprom(0x08);   // Output type 9-16
00E24:  MOVFF  FF2,C25
00E28:  BCF    FF2.7
00E2A:  CLRF   FAA
00E2C:  MOVLW  08
00E2E:  MOVWF  FA9
00E30:  BCF    FA6.6
00E32:  BCF    FA6.7
00E34:  BSF    FA6.0
00E36:  MOVF   FA8,W
00E38:  MOVLB  C
00E3A:  BTFSC  x25.7
00E3C:  BSF    FF2.7
00E3E:  MOVWF  39
....................    OutputType9_16 = EEpDat;
00E40:  MOVFF  39,41
.................... 
....................    OutputType.B9 = EEpDat;
00E44:  MOVLB  B
00E46:  BCF    xA3.0
00E48:  BTFSC  39.0
00E4A:  BSF    xA3.0
....................    OutputType.B10 = EEpDat >> 1;
00E4C:  BCF    FD8.0
00E4E:  RRCF   39,W
00E50:  BCF    xA3.1
00E52:  BTFSC  FE8.0
00E54:  BSF    xA3.1
....................    OutputType.B11 = EEpDat >> 2;
00E56:  RRCF   39,W
00E58:  MOVWF  00
00E5A:  RRCF   00,F
00E5C:  MOVLW  3F
00E5E:  ANDWF  00,F
00E60:  BCF    xA3.2
00E62:  BTFSC  00.0
00E64:  BSF    xA3.2
....................    OutputType.B12 = EEpDat >> 3;
00E66:  RRCF   39,W
00E68:  MOVWF  00
00E6A:  RRCF   00,F
00E6C:  RRCF   00,F
00E6E:  MOVLW  1F
00E70:  ANDWF  00,F
00E72:  BCF    xA3.3
00E74:  BTFSC  00.0
00E76:  BSF    xA3.3
....................    OutputType.B13 = EEpDat >> 4;
00E78:  SWAPF  39,W
00E7A:  MOVWF  00
00E7C:  MOVLW  0F
00E7E:  ANDWF  00,F
00E80:  BCF    xA3.4
00E82:  BTFSC  00.0
00E84:  BSF    xA3.4
....................    OutputType.B14 = EEpDat >> 5;
00E86:  SWAPF  39,W
00E88:  MOVWF  00
00E8A:  RRCF   00,F
00E8C:  MOVLW  07
00E8E:  ANDWF  00,F
00E90:  BCF    xA3.5
00E92:  BTFSC  00.0
00E94:  BSF    xA3.5
....................    OutputType.B15 = EEpDat >> 6;
00E96:  SWAPF  39,W
00E98:  MOVWF  00
00E9A:  RRCF   00,F
00E9C:  RRCF   00,F
00E9E:  MOVLW  03
00EA0:  ANDWF  00,F
00EA2:  BCF    xA3.6
00EA4:  BTFSC  00.0
00EA6:  BSF    xA3.6
....................    OutputType.B16 = EEpDat >> 7;
00EA8:  CLRF   00
00EAA:  BTFSC  39.7
00EAC:  BSF    00.0
00EAE:  BCF    xA3.7
00EB0:  BTFSC  00.0
00EB2:  BSF    xA3.7
.................... 
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
00EB4:  MOVFF  FF2,C25
00EB8:  BCF    FF2.7
00EBA:  CLRF   FAA
00EBC:  MOVLW  0A
00EBE:  MOVWF  FA9
00EC0:  BCF    FA6.6
00EC2:  BCF    FA6.7
00EC4:  BSF    FA6.0
00EC6:  MOVF   FA8,W
00EC8:  MOVLB  C
00ECA:  BTFSC  x25.7
00ECC:  BSF    FF2.7
00ECE:  MOVWF  39
....................    OutputBoth1_8 = EEpDat;
00ED0:  MOVFF  39,43
.................... 
....................    OutputBoth.B1 = EEpDat;
00ED4:  MOVLB  B
00ED6:  BCF    xA4.0
00ED8:  BTFSC  39.0
00EDA:  BSF    xA4.0
....................    OutputBoth.B2 = EEpDat >> 1;
00EDC:  BCF    FD8.0
00EDE:  RRCF   39,W
00EE0:  BCF    xA4.1
00EE2:  BTFSC  FE8.0
00EE4:  BSF    xA4.1
....................    OutputBoth.B3 = EEpDat >> 2;
00EE6:  RRCF   39,W
00EE8:  MOVWF  00
00EEA:  RRCF   00,F
00EEC:  MOVLW  3F
00EEE:  ANDWF  00,F
00EF0:  BCF    xA4.2
00EF2:  BTFSC  00.0
00EF4:  BSF    xA4.2
....................    OutputBoth.B4 = EEpDat >> 3;
00EF6:  RRCF   39,W
00EF8:  MOVWF  00
00EFA:  RRCF   00,F
00EFC:  RRCF   00,F
00EFE:  MOVLW  1F
00F00:  ANDWF  00,F
00F02:  BCF    xA4.3
00F04:  BTFSC  00.0
00F06:  BSF    xA4.3
....................    OutputBoth.B5 = EEpDat >> 4;
00F08:  SWAPF  39,W
00F0A:  MOVWF  00
00F0C:  MOVLW  0F
00F0E:  ANDWF  00,F
00F10:  BCF    xA4.4
00F12:  BTFSC  00.0
00F14:  BSF    xA4.4
....................    OutputBoth.B6 = EEpDat >> 5;
00F16:  SWAPF  39,W
00F18:  MOVWF  00
00F1A:  RRCF   00,F
00F1C:  MOVLW  07
00F1E:  ANDWF  00,F
00F20:  BCF    xA4.5
00F22:  BTFSC  00.0
00F24:  BSF    xA4.5
....................    OutputBoth.B7 = EEpDat >> 6;
00F26:  SWAPF  39,W
00F28:  MOVWF  00
00F2A:  RRCF   00,F
00F2C:  RRCF   00,F
00F2E:  MOVLW  03
00F30:  ANDWF  00,F
00F32:  BCF    xA4.6
00F34:  BTFSC  00.0
00F36:  BSF    xA4.6
....................    OutputBoth.B8 = EEpDat >> 7;
00F38:  CLRF   00
00F3A:  BTFSC  39.7
00F3C:  BSF    00.0
00F3E:  BCF    xA4.7
00F40:  BTFSC  00.0
00F42:  BSF    xA4.7
.................... 
....................    EEpDat = read_eeprom(0x0B);   // Output Both 9-16
00F44:  MOVFF  FF2,C25
00F48:  BCF    FF2.7
00F4A:  CLRF   FAA
00F4C:  MOVLW  0B
00F4E:  MOVWF  FA9
00F50:  BCF    FA6.6
00F52:  BCF    FA6.7
00F54:  BSF    FA6.0
00F56:  MOVF   FA8,W
00F58:  MOVLB  C
00F5A:  BTFSC  x25.7
00F5C:  BSF    FF2.7
00F5E:  MOVWF  39
....................    OutputBoth9_16 = EEpDat;
00F60:  MOVFF  39,44
.................... 
....................    OutputBoth.B9 = EEpDat;
00F64:  MOVLB  B
00F66:  BCF    xA5.0
00F68:  BTFSC  39.0
00F6A:  BSF    xA5.0
....................    OutputBoth.B10 = EEpDat >> 1;
00F6C:  BCF    FD8.0
00F6E:  RRCF   39,W
00F70:  BCF    xA5.1
00F72:  BTFSC  FE8.0
00F74:  BSF    xA5.1
....................    OutputBoth.B11 = EEpDat >> 2;
00F76:  RRCF   39,W
00F78:  MOVWF  00
00F7A:  RRCF   00,F
00F7C:  MOVLW  3F
00F7E:  ANDWF  00,F
00F80:  BCF    xA5.2
00F82:  BTFSC  00.0
00F84:  BSF    xA5.2
....................    OutputBoth.B12 = EEpDat >> 3;
00F86:  RRCF   39,W
00F88:  MOVWF  00
00F8A:  RRCF   00,F
00F8C:  RRCF   00,F
00F8E:  MOVLW  1F
00F90:  ANDWF  00,F
00F92:  BCF    xA5.3
00F94:  BTFSC  00.0
00F96:  BSF    xA5.3
....................    OutputBoth.B13 = EEpDat >> 4;
00F98:  SWAPF  39,W
00F9A:  MOVWF  00
00F9C:  MOVLW  0F
00F9E:  ANDWF  00,F
00FA0:  BCF    xA5.4
00FA2:  BTFSC  00.0
00FA4:  BSF    xA5.4
....................    OutputBoth.B14 = EEpDat >> 5;
00FA6:  SWAPF  39,W
00FA8:  MOVWF  00
00FAA:  RRCF   00,F
00FAC:  MOVLW  07
00FAE:  ANDWF  00,F
00FB0:  BCF    xA5.5
00FB2:  BTFSC  00.0
00FB4:  BSF    xA5.5
....................    OutputBoth.B15 = EEpDat >> 6;
00FB6:  SWAPF  39,W
00FB8:  MOVWF  00
00FBA:  RRCF   00,F
00FBC:  RRCF   00,F
00FBE:  MOVLW  03
00FC0:  ANDWF  00,F
00FC2:  BCF    xA5.6
00FC4:  BTFSC  00.0
00FC6:  BSF    xA5.6
....................    OutputBoth.B16 = EEpDat >> 7;
00FC8:  CLRF   00
00FCA:  BTFSC  39.7
00FCC:  BSF    00.0
00FCE:  BCF    xA5.7
00FD0:  BTFSC  00.0
00FD2:  BSF    xA5.7
.................... 
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
00FD4:  MOVFF  FF2,C25
00FD8:  BCF    FF2.7
00FDA:  CLRF   FAA
00FDC:  MOVLW  0D
00FDE:  MOVWF  FA9
00FE0:  BCF    FA6.6
00FE2:  BCF    FA6.7
00FE4:  BSF    FA6.0
00FE6:  MOVF   FA8,W
00FE8:  MOVLB  C
00FEA:  BTFSC  x25.7
00FEC:  BSF    FF2.7
00FEE:  MOVWF  39
....................    Alarm_Indicator1_8 = EEpDat;
00FF0:  MOVFF  39,46
.................... 
....................    AlarmIndicator.B1 = EEpDat;
00FF4:  MOVLB  B
00FF6:  BCF    xA6.0
00FF8:  BTFSC  39.0
00FFA:  BSF    xA6.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
00FFC:  BCF    FD8.0
00FFE:  RRCF   39,W
01000:  BCF    xA6.1
01002:  BTFSC  FE8.0
01004:  BSF    xA6.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
01006:  RRCF   39,W
01008:  MOVWF  00
0100A:  RRCF   00,F
0100C:  MOVLW  3F
0100E:  ANDWF  00,F
01010:  BCF    xA6.2
01012:  BTFSC  00.0
01014:  BSF    xA6.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
01016:  RRCF   39,W
01018:  MOVWF  00
0101A:  RRCF   00,F
0101C:  RRCF   00,F
0101E:  MOVLW  1F
01020:  ANDWF  00,F
01022:  BCF    xA6.3
01024:  BTFSC  00.0
01026:  BSF    xA6.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
01028:  SWAPF  39,W
0102A:  MOVWF  00
0102C:  MOVLW  0F
0102E:  ANDWF  00,F
01030:  BCF    xA6.4
01032:  BTFSC  00.0
01034:  BSF    xA6.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
01036:  SWAPF  39,W
01038:  MOVWF  00
0103A:  RRCF   00,F
0103C:  MOVLW  07
0103E:  ANDWF  00,F
01040:  BCF    xA6.5
01042:  BTFSC  00.0
01044:  BSF    xA6.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
01046:  SWAPF  39,W
01048:  MOVWF  00
0104A:  RRCF   00,F
0104C:  RRCF   00,F
0104E:  MOVLW  03
01050:  ANDWF  00,F
01052:  BCF    xA6.6
01054:  BTFSC  00.0
01056:  BSF    xA6.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
01058:  CLRF   00
0105A:  BTFSC  39.7
0105C:  BSF    00.0
0105E:  BCF    xA6.7
01060:  BTFSC  00.0
01062:  BSF    xA6.7
.................... 
....................    EEpDat = read_eeprom(0x0E);   // AlarmIndicator 9-16
01064:  MOVFF  FF2,C25
01068:  BCF    FF2.7
0106A:  CLRF   FAA
0106C:  MOVLW  0E
0106E:  MOVWF  FA9
01070:  BCF    FA6.6
01072:  BCF    FA6.7
01074:  BSF    FA6.0
01076:  MOVF   FA8,W
01078:  MOVLB  C
0107A:  BTFSC  x25.7
0107C:  BSF    FF2.7
0107E:  MOVWF  39
....................    Alarm_Indicator9_16 = EEpDat;
01080:  MOVFF  39,47
.................... 
....................    AlarmIndicator.B9 = EEpDat;
01084:  MOVLB  B
01086:  BCF    xA7.0
01088:  BTFSC  39.0
0108A:  BSF    xA7.0
....................    AlarmIndicator.B10 = EEpDat >> 1;
0108C:  BCF    FD8.0
0108E:  RRCF   39,W
01090:  BCF    xA7.1
01092:  BTFSC  FE8.0
01094:  BSF    xA7.1
....................    AlarmIndicator.B11 = EEpDat >> 2;
01096:  RRCF   39,W
01098:  MOVWF  00
0109A:  RRCF   00,F
0109C:  MOVLW  3F
0109E:  ANDWF  00,F
010A0:  BCF    xA7.2
010A2:  BTFSC  00.0
010A4:  BSF    xA7.2
....................    AlarmIndicator.B12 = EEpDat >> 3;
010A6:  RRCF   39,W
010A8:  MOVWF  00
010AA:  RRCF   00,F
010AC:  RRCF   00,F
010AE:  MOVLW  1F
010B0:  ANDWF  00,F
010B2:  BCF    xA7.3
010B4:  BTFSC  00.0
010B6:  BSF    xA7.3
....................    AlarmIndicator.B13 = EEpDat >> 4;
010B8:  SWAPF  39,W
010BA:  MOVWF  00
010BC:  MOVLW  0F
010BE:  ANDWF  00,F
010C0:  BCF    xA7.4
010C2:  BTFSC  00.0
010C4:  BSF    xA7.4
....................    AlarmIndicator.B14 = EEpDat >> 5;
010C6:  SWAPF  39,W
010C8:  MOVWF  00
010CA:  RRCF   00,F
010CC:  MOVLW  07
010CE:  ANDWF  00,F
010D0:  BCF    xA7.5
010D2:  BTFSC  00.0
010D4:  BSF    xA7.5
....................    AlarmIndicator.B15 = EEpDat >> 6;
010D6:  SWAPF  39,W
010D8:  MOVWF  00
010DA:  RRCF   00,F
010DC:  RRCF   00,F
010DE:  MOVLW  03
010E0:  ANDWF  00,F
010E2:  BCF    xA7.6
010E4:  BTFSC  00.0
010E6:  BSF    xA7.6
....................    AlarmIndicator.B16 = EEpDat >> 7;
010E8:  CLRF   00
010EA:  BTFSC  39.7
010EC:  BSF    00.0
010EE:  BCF    xA7.7
010F0:  BTFSC  00.0
010F2:  BSF    xA7.7
.................... 
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
010F4:  MOVFF  FF2,C25
010F8:  BCF    FF2.7
010FA:  CLRF   FAA
010FC:  MOVLW  10
010FE:  MOVWF  FA9
01100:  BCF    FA6.6
01102:  BCF    FA6.7
01104:  BSF    FA6.0
01106:  MOVF   FA8,W
01108:  MOVLB  C
0110A:  BTFSC  x25.7
0110C:  BSF    FF2.7
0110E:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
01110:  MOVLB  B
01112:  BCF    xB2.0
01114:  BTFSC  39.0
01116:  BSF    xB2.0
....................    RED_Colour.B2 = EEpDat >> 1;
01118:  BCF    FD8.0
0111A:  RRCF   39,W
0111C:  BCF    xB2.1
0111E:  BTFSC  FE8.0
01120:  BSF    xB2.1
....................    RED_Colour.B3 = EEpDat >> 2;
01122:  RRCF   39,W
01124:  MOVWF  00
01126:  RRCF   00,F
01128:  MOVLW  3F
0112A:  ANDWF  00,F
0112C:  BCF    xB2.2
0112E:  BTFSC  00.0
01130:  BSF    xB2.2
....................    RED_Colour.B4 = EEpDat >> 3;
01132:  RRCF   39,W
01134:  MOVWF  00
01136:  RRCF   00,F
01138:  RRCF   00,F
0113A:  MOVLW  1F
0113C:  ANDWF  00,F
0113E:  BCF    xB2.3
01140:  BTFSC  00.0
01142:  BSF    xB2.3
....................    RED_Colour.B5 = EEpDat >> 4;
01144:  SWAPF  39,W
01146:  MOVWF  00
01148:  MOVLW  0F
0114A:  ANDWF  00,F
0114C:  BCF    xB2.4
0114E:  BTFSC  00.0
01150:  BSF    xB2.4
....................    RED_Colour.B6 = EEpDat >> 5;
01152:  SWAPF  39,W
01154:  MOVWF  00
01156:  RRCF   00,F
01158:  MOVLW  07
0115A:  ANDWF  00,F
0115C:  BCF    xB2.5
0115E:  BTFSC  00.0
01160:  BSF    xB2.5
....................    RED_Colour.B7 = EEpDat >> 6;
01162:  SWAPF  39,W
01164:  MOVWF  00
01166:  RRCF   00,F
01168:  RRCF   00,F
0116A:  MOVLW  03
0116C:  ANDWF  00,F
0116E:  BCF    xB2.6
01170:  BTFSC  00.0
01172:  BSF    xB2.6
....................    RED_Colour.B8 = EEpDat >> 7;
01174:  CLRF   00
01176:  BTFSC  39.7
01178:  BSF    00.0
0117A:  BCF    xB2.7
0117C:  BTFSC  00.0
0117E:  BSF    xB2.7
....................    
....................    EEpDat = read_eeprom(0x11);
01180:  MOVFF  FF2,C25
01184:  BCF    FF2.7
01186:  CLRF   FAA
01188:  MOVLW  11
0118A:  MOVWF  FA9
0118C:  BCF    FA6.6
0118E:  BCF    FA6.7
01190:  BSF    FA6.0
01192:  MOVF   FA8,W
01194:  MOVLB  C
01196:  BTFSC  x25.7
01198:  BSF    FF2.7
0119A:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
0119C:  MOVLB  B
0119E:  BCF    xB3.0
011A0:  BTFSC  39.0
011A2:  BSF    xB3.0
....................    RED_Colour.B10 = EEpDat >> 1;
011A4:  BCF    FD8.0
011A6:  RRCF   39,W
011A8:  BCF    xB3.1
011AA:  BTFSC  FE8.0
011AC:  BSF    xB3.1
....................    
....................    EEpDat = read_eeprom(0x12);
011AE:  MOVFF  FF2,C25
011B2:  BCF    FF2.7
011B4:  CLRF   FAA
011B6:  MOVLW  12
011B8:  MOVWF  FA9
011BA:  BCF    FA6.6
011BC:  BCF    FA6.7
011BE:  BSF    FA6.0
011C0:  MOVF   FA8,W
011C2:  MOVLB  C
011C4:  BTFSC  x25.7
011C6:  BSF    FF2.7
011C8:  MOVWF  39
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
011CA:  MOVLB  B
011CC:  BCF    xB3.2
011CE:  BTFSC  39.0
011D0:  BSF    xB3.2
....................    RED_Colour.B12 = EEpDat >> 1;
011D2:  BCF    FD8.0
011D4:  RRCF   39,W
011D6:  BCF    xB3.3
011D8:  BTFSC  FE8.0
011DA:  BSF    xB3.3
....................    RED_Colour.B13 = EEpDat >> 2;
011DC:  RRCF   39,W
011DE:  MOVWF  00
011E0:  RRCF   00,F
011E2:  MOVLW  3F
011E4:  ANDWF  00,F
011E6:  BCF    xB3.4
011E8:  BTFSC  00.0
011EA:  BSF    xB3.4
....................    RED_Colour.B14 = EEpDat >> 3;
011EC:  RRCF   39,W
011EE:  MOVWF  00
011F0:  RRCF   00,F
011F2:  RRCF   00,F
011F4:  MOVLW  1F
011F6:  ANDWF  00,F
011F8:  BCF    xB3.5
011FA:  BTFSC  00.0
011FC:  BSF    xB3.5
....................    RED_Colour.B15 = EEpDat >> 4;
011FE:  SWAPF  39,W
01200:  MOVWF  00
01202:  MOVLW  0F
01204:  ANDWF  00,F
01206:  BCF    xB3.6
01208:  BTFSC  00.0
0120A:  BSF    xB3.6
....................    RED_Colour.B16 = EEpDat >> 5;
0120C:  SWAPF  39,W
0120E:  MOVWF  00
01210:  RRCF   00,F
01212:  MOVLW  07
01214:  ANDWF  00,F
01216:  BCF    xB3.7
01218:  BTFSC  00.0
0121A:  BSF    xB3.7
.................... 
....................    
....................    EEpDat = read_eeprom(0x14);
0121C:  MOVFF  FF2,C25
01220:  BCF    FF2.7
01222:  CLRF   FAA
01224:  MOVLW  14
01226:  MOVWF  FA9
01228:  BCF    FA6.6
0122A:  BCF    FA6.7
0122C:  BSF    FA6.0
0122E:  MOVF   FA8,W
01230:  MOVLB  C
01232:  BTFSC  x25.7
01234:  BSF    FF2.7
01236:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
01238:  MOVLB  B
0123A:  BCF    xB4.0
0123C:  BTFSC  39.0
0123E:  BSF    xB4.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
01240:  BCF    FD8.0
01242:  RRCF   39,W
01244:  BCF    xB4.1
01246:  BTFSC  FE8.0
01248:  BSF    xB4.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
0124A:  RRCF   39,W
0124C:  MOVWF  00
0124E:  RRCF   00,F
01250:  MOVLW  3F
01252:  ANDWF  00,F
01254:  BCF    xB4.2
01256:  BTFSC  00.0
01258:  BSF    xB4.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
0125A:  RRCF   39,W
0125C:  MOVWF  00
0125E:  RRCF   00,F
01260:  RRCF   00,F
01262:  MOVLW  1F
01264:  ANDWF  00,F
01266:  BCF    xB4.3
01268:  BTFSC  00.0
0126A:  BSF    xB4.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
0126C:  SWAPF  39,W
0126E:  MOVWF  00
01270:  MOVLW  0F
01272:  ANDWF  00,F
01274:  BCF    xB4.4
01276:  BTFSC  00.0
01278:  BSF    xB4.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
0127A:  SWAPF  39,W
0127C:  MOVWF  00
0127E:  RRCF   00,F
01280:  MOVLW  07
01282:  ANDWF  00,F
01284:  BCF    xB4.5
01286:  BTFSC  00.0
01288:  BSF    xB4.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
0128A:  SWAPF  39,W
0128C:  MOVWF  00
0128E:  RRCF   00,F
01290:  RRCF   00,F
01292:  MOVLW  03
01294:  ANDWF  00,F
01296:  BCF    xB4.6
01298:  BTFSC  00.0
0129A:  BSF    xB4.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
0129C:  CLRF   00
0129E:  BTFSC  39.7
012A0:  BSF    00.0
012A2:  BCF    xB4.7
012A4:  BTFSC  00.0
012A6:  BSF    xB4.7
....................    
....................    EEpDat = read_eeprom(0x15);
012A8:  MOVFF  FF2,C25
012AC:  BCF    FF2.7
012AE:  CLRF   FAA
012B0:  MOVLW  15
012B2:  MOVWF  FA9
012B4:  BCF    FA6.6
012B6:  BCF    FA6.7
012B8:  BSF    FA6.0
012BA:  MOVF   FA8,W
012BC:  MOVLB  C
012BE:  BTFSC  x25.7
012C0:  BSF    FF2.7
012C2:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
012C4:  MOVLB  B
012C6:  BCF    xB5.0
012C8:  BTFSC  39.0
012CA:  BSF    xB5.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
012CC:  BCF    FD8.0
012CE:  RRCF   39,W
012D0:  BCF    xB5.1
012D2:  BTFSC  FE8.0
012D4:  BSF    xB5.1
....................    
....................    
....................    EEpDat = read_eeprom(0x16);
012D6:  MOVFF  FF2,C25
012DA:  BCF    FF2.7
012DC:  CLRF   FAA
012DE:  MOVLW  16
012E0:  MOVWF  FA9
012E2:  BCF    FA6.6
012E4:  BCF    FA6.7
012E6:  BSF    FA6.0
012E8:  MOVF   FA8,W
012EA:  MOVLB  C
012EC:  BTFSC  x25.7
012EE:  BSF    FF2.7
012F0:  MOVWF  39
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
012F2:  MOVLB  B
012F4:  BCF    xB5.2
012F6:  BTFSC  39.0
012F8:  BSF    xB5.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
012FA:  BCF    FD8.0
012FC:  RRCF   39,W
012FE:  BCF    xB5.3
01300:  BTFSC  FE8.0
01302:  BSF    xB5.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
01304:  RRCF   39,W
01306:  MOVWF  00
01308:  RRCF   00,F
0130A:  MOVLW  3F
0130C:  ANDWF  00,F
0130E:  BCF    xB5.4
01310:  BTFSC  00.0
01312:  BSF    xB5.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
01314:  RRCF   39,W
01316:  MOVWF  00
01318:  RRCF   00,F
0131A:  RRCF   00,F
0131C:  MOVLW  1F
0131E:  ANDWF  00,F
01320:  BCF    xB5.5
01322:  BTFSC  00.0
01324:  BSF    xB5.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
01326:  SWAPF  39,W
01328:  MOVWF  00
0132A:  MOVLW  0F
0132C:  ANDWF  00,F
0132E:  BCF    xB5.6
01330:  BTFSC  00.0
01332:  BSF    xB5.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
01334:  SWAPF  39,W
01336:  MOVWF  00
01338:  RRCF   00,F
0133A:  MOVLW  07
0133C:  ANDWF  00,F
0133E:  BCF    xB5.7
01340:  BTFSC  00.0
01342:  BSF    xB5.7
.................... 
....................     //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
01344:  MOVFF  FF2,C25
01348:  BCF    FF2.7
0134A:  CLRF   FAA
0134C:  MOVLW  18
0134E:  MOVWF  FA9
01350:  BCF    FA6.6
01352:  BCF    FA6.7
01354:  BSF    FA6.0
01356:  MOVF   FA8,W
01358:  MOVLB  C
0135A:  BTFSC  x25.7
0135C:  BSF    FF2.7
0135E:  MOVLB  0
01360:  MOVWF  x6A
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
01362:  MOVFF  FF2,C25
01366:  BCF    FF2.7
01368:  CLRF   FAA
0136A:  MOVLW  19
0136C:  MOVWF  FA9
0136E:  BCF    FA6.6
01370:  BCF    FA6.7
01372:  BSF    FA6.0
01374:  MOVF   FA8,W
01376:  MOVLB  C
01378:  BTFSC  x25.7
0137A:  BSF    FF2.7
0137C:  MOVLB  0
0137E:  MOVWF  x6B
....................    FlashingRate = read_eeprom(0x1A); // Flashing rate
01380:  MOVFF  FF2,C25
01384:  BCF    FF2.7
01386:  CLRF   FAA
01388:  MOVLW  1A
0138A:  MOVWF  FA9
0138C:  BCF    FA6.6
0138E:  BCF    FA6.7
01390:  BSF    FA6.0
01392:  MOVF   FA8,W
01394:  MOVLB  C
01396:  BTFSC  x25.7
01398:  BSF    FF2.7
0139A:  MOVLB  0
0139C:  MOVWF  x6C
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
0139E:  MOVFF  FF2,C25
013A2:  BCF    FF2.7
013A4:  CLRF   FAA
013A6:  MOVLW  1B
013A8:  MOVWF  FA9
013AA:  BCF    FA6.6
013AC:  BCF    FA6.7
013AE:  BSF    FA6.0
013B0:  MOVF   FA8,W
013B2:  MOVLB  C
013B4:  BTFSC  x25.7
013B6:  BSF    FF2.7
013B8:  MOVLB  0
013BA:  MOVWF  x6D
....................    
....................    FaultDelayTime[0] = read_eeprom(0x1C);  // Master or slave sync(flashing)
013BC:  MOVFF  FF2,C25
013C0:  BCF    FF2.7
013C2:  CLRF   FAA
013C4:  MOVLW  1C
013C6:  MOVWF  FA9
013C8:  BCF    FA6.6
013CA:  BCF    FA6.7
013CC:  BSF    FA6.0
013CE:  MOVF   FA8,W
013D0:  MOVLB  C
013D2:  BTFSC  x25.7
013D4:  BSF    FF2.7
013D6:  MOVLB  B
013D8:  CLRF   xE9
013DA:  MOVWF  xE8
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
013DC:  MOVFF  FF2,C25
013E0:  BCF    FF2.7
013E2:  CLRF   FAA
013E4:  MOVLW  1D
013E6:  MOVWF  FA9
013E8:  BCF    FA6.6
013EA:  BCF    FA6.7
013EC:  BSF    FA6.0
013EE:  MOVF   FA8,W
013F0:  MOVLB  C
013F2:  BTFSC  x25.7
013F4:  BSF    FF2.7
013F6:  MOVLB  0
013F8:  MOVWF  x79
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
013FA:  MOVFF  FF2,C25
013FE:  BCF    FF2.7
01400:  CLRF   FAA
01402:  MOVLW  1E
01404:  MOVWF  FA9
01406:  BCF    FA6.6
01408:  BCF    FA6.7
0140A:  BSF    FA6.0
0140C:  MOVF   FA8,W
0140E:  MOVLB  C
01410:  BTFSC  x25.7
01412:  BSF    FF2.7
01414:  MOVLB  B
01416:  CLRF   xEB
01418:  MOVWF  xEA
....................    FaultDelayTime[2] = read_eeprom(0x1F);
0141A:  MOVFF  FF2,C25
0141E:  BCF    FF2.7
01420:  CLRF   FAA
01422:  MOVLW  1F
01424:  MOVWF  FA9
01426:  BCF    FA6.6
01428:  BCF    FA6.7
0142A:  BSF    FA6.0
0142C:  MOVF   FA8,W
0142E:  MOVLB  C
01430:  BTFSC  x25.7
01432:  BSF    FF2.7
01434:  MOVLB  B
01436:  CLRF   xED
01438:  MOVWF  xEC
....................    FaultDelayTime[3] = read_eeprom(0x20);
0143A:  MOVFF  FF2,C25
0143E:  BCF    FF2.7
01440:  CLRF   FAA
01442:  MOVLW  20
01444:  MOVWF  FA9
01446:  BCF    FA6.6
01448:  BCF    FA6.7
0144A:  BSF    FA6.0
0144C:  MOVF   FA8,W
0144E:  MOVLB  C
01450:  BTFSC  x25.7
01452:  BSF    FF2.7
01454:  MOVLB  B
01456:  CLRF   xEF
01458:  MOVWF  xEE
....................    FaultDelayTime[4] = read_eeprom(0x21);
0145A:  MOVFF  FF2,C25
0145E:  BCF    FF2.7
01460:  CLRF   FAA
01462:  MOVLW  21
01464:  MOVWF  FA9
01466:  BCF    FA6.6
01468:  BCF    FA6.7
0146A:  BSF    FA6.0
0146C:  MOVF   FA8,W
0146E:  MOVLB  C
01470:  BTFSC  x25.7
01472:  BSF    FF2.7
01474:  MOVLB  B
01476:  CLRF   xF1
01478:  MOVWF  xF0
....................    FaultDelayTime[5] = read_eeprom(0x22);
0147A:  MOVFF  FF2,C25
0147E:  BCF    FF2.7
01480:  CLRF   FAA
01482:  MOVLW  22
01484:  MOVWF  FA9
01486:  BCF    FA6.6
01488:  BCF    FA6.7
0148A:  BSF    FA6.0
0148C:  MOVF   FA8,W
0148E:  MOVLB  C
01490:  BTFSC  x25.7
01492:  BSF    FF2.7
01494:  MOVLB  B
01496:  CLRF   xF3
01498:  MOVWF  xF2
....................    FaultDelayTime[6] = read_eeprom(0x23);
0149A:  MOVFF  FF2,C25
0149E:  BCF    FF2.7
014A0:  CLRF   FAA
014A2:  MOVLW  23
014A4:  MOVWF  FA9
014A6:  BCF    FA6.6
014A8:  BCF    FA6.7
014AA:  BSF    FA6.0
014AC:  MOVF   FA8,W
014AE:  MOVLB  C
014B0:  BTFSC  x25.7
014B2:  BSF    FF2.7
014B4:  MOVLB  B
014B6:  CLRF   xF5
014B8:  MOVWF  xF4
....................    FaultDelayTime[7] = read_eeprom(0x24);
014BA:  MOVFF  FF2,C25
014BE:  BCF    FF2.7
014C0:  CLRF   FAA
014C2:  MOVLW  24
014C4:  MOVWF  FA9
014C6:  BCF    FA6.6
014C8:  BCF    FA6.7
014CA:  BSF    FA6.0
014CC:  MOVF   FA8,W
014CE:  MOVLB  C
014D0:  BTFSC  x25.7
014D2:  BSF    FF2.7
014D4:  MOVLB  B
014D6:  CLRF   xF7
014D8:  MOVWF  xF6
....................    FaultDelayTime[8] = read_eeprom(0x25);
014DA:  MOVFF  FF2,C25
014DE:  BCF    FF2.7
014E0:  CLRF   FAA
014E2:  MOVLW  25
014E4:  MOVWF  FA9
014E6:  BCF    FA6.6
014E8:  BCF    FA6.7
014EA:  BSF    FA6.0
014EC:  MOVF   FA8,W
014EE:  MOVLB  C
014F0:  BTFSC  x25.7
014F2:  BSF    FF2.7
014F4:  MOVLB  B
014F6:  CLRF   xF9
014F8:  MOVWF  xF8
....................    FaultDelayTime[9] = read_eeprom(0x26);
014FA:  MOVFF  FF2,C25
014FE:  BCF    FF2.7
01500:  CLRF   FAA
01502:  MOVLW  26
01504:  MOVWF  FA9
01506:  BCF    FA6.6
01508:  BCF    FA6.7
0150A:  BSF    FA6.0
0150C:  MOVF   FA8,W
0150E:  MOVLB  C
01510:  BTFSC  x25.7
01512:  BSF    FF2.7
01514:  MOVLB  B
01516:  CLRF   xFB
01518:  MOVWF  xFA
....................    FaultDelayTime[10] = read_eeprom(0x27);
0151A:  MOVFF  FF2,C25
0151E:  BCF    FF2.7
01520:  CLRF   FAA
01522:  MOVLW  27
01524:  MOVWF  FA9
01526:  BCF    FA6.6
01528:  BCF    FA6.7
0152A:  BSF    FA6.0
0152C:  MOVF   FA8,W
0152E:  MOVLB  C
01530:  BTFSC  x25.7
01532:  BSF    FF2.7
01534:  MOVLB  B
01536:  CLRF   xFD
01538:  MOVWF  xFC
....................    FaultDelayTime[11] = read_eeprom(0x28);
0153A:  MOVFF  FF2,C25
0153E:  BCF    FF2.7
01540:  CLRF   FAA
01542:  MOVLW  28
01544:  MOVWF  FA9
01546:  BCF    FA6.6
01548:  BCF    FA6.7
0154A:  BSF    FA6.0
0154C:  MOVF   FA8,W
0154E:  MOVLB  C
01550:  BTFSC  x25.7
01552:  BSF    FF2.7
01554:  MOVLB  B
01556:  CLRF   xFF
01558:  MOVWF  xFE
....................    FaultDelayTime[12] = read_eeprom(0x29);
0155A:  MOVFF  FF2,C25
0155E:  BCF    FF2.7
01560:  CLRF   FAA
01562:  MOVLW  29
01564:  MOVWF  FA9
01566:  BCF    FA6.6
01568:  BCF    FA6.7
0156A:  BSF    FA6.0
0156C:  MOVF   FA8,W
0156E:  MOVLB  C
01570:  BTFSC  x25.7
01572:  BSF    FF2.7
01574:  CLRF   x01
01576:  MOVWF  x00
....................    FaultDelayTime[13] = read_eeprom(0x2A);
01578:  MOVFF  FF2,C25
0157C:  BCF    FF2.7
0157E:  CLRF   FAA
01580:  MOVLW  2A
01582:  MOVWF  FA9
01584:  BCF    FA6.6
01586:  BCF    FA6.7
01588:  BSF    FA6.0
0158A:  MOVF   FA8,W
0158C:  BTFSC  x25.7
0158E:  BSF    FF2.7
01590:  CLRF   x03
01592:  MOVWF  x02
....................    FaultDelayTime[14] = read_eeprom(0x2B);
01594:  MOVFF  FF2,C25
01598:  BCF    FF2.7
0159A:  CLRF   FAA
0159C:  MOVLW  2B
0159E:  MOVWF  FA9
015A0:  BCF    FA6.6
015A2:  BCF    FA6.7
015A4:  BSF    FA6.0
015A6:  MOVF   FA8,W
015A8:  BTFSC  x25.7
015AA:  BSF    FF2.7
015AC:  CLRF   x05
015AE:  MOVWF  x04
....................    FaultDelayTime[15] = read_eeprom(0x2C);
015B0:  MOVFF  FF2,C25
015B4:  BCF    FF2.7
015B6:  CLRF   FAA
015B8:  MOVLW  2C
015BA:  MOVWF  FA9
015BC:  BCF    FA6.6
015BE:  BCF    FA6.7
015C0:  BSF    FA6.0
015C2:  MOVF   FA8,W
015C4:  BTFSC  x25.7
015C6:  BSF    FF2.7
015C8:  CLRF   x07
015CA:  MOVWF  x06
....................    FaultDelayTime[16] = read_eeprom(0x2D);
015CC:  MOVFF  FF2,C25
015D0:  BCF    FF2.7
015D2:  CLRF   FAA
015D4:  MOVLW  2D
015D6:  MOVWF  FA9
015D8:  BCF    FA6.6
015DA:  BCF    FA6.7
015DC:  BSF    FA6.0
015DE:  MOVF   FA8,W
015E0:  BTFSC  x25.7
015E2:  BSF    FF2.7
015E4:  CLRF   x09
015E6:  MOVWF  x08
....................    FaultDelayTime[17] = read_eeprom(0x2E);
015E8:  MOVFF  FF2,C25
015EC:  BCF    FF2.7
015EE:  CLRF   FAA
015F0:  MOVLW  2E
015F2:  MOVWF  FA9
015F4:  BCF    FA6.6
015F6:  BCF    FA6.7
015F8:  BSF    FA6.0
015FA:  MOVF   FA8,W
015FC:  BTFSC  x25.7
015FE:  BSF    FF2.7
01600:  CLRF   x0B
01602:  MOVWF  x0A
....................    FaultDelayTime[18] = read_eeprom(0x2F);
01604:  MOVFF  FF2,C25
01608:  BCF    FF2.7
0160A:  CLRF   FAA
0160C:  MOVLW  2F
0160E:  MOVWF  FA9
01610:  BCF    FA6.6
01612:  BCF    FA6.7
01614:  BSF    FA6.0
01616:  MOVF   FA8,W
01618:  BTFSC  x25.7
0161A:  BSF    FF2.7
0161C:  CLRF   x0D
0161E:  MOVWF  x0C
....................    FaultDelayTime[19] = read_eeprom(0x30);
01620:  MOVFF  FF2,C25
01624:  BCF    FF2.7
01626:  CLRF   FAA
01628:  MOVLW  30
0162A:  MOVWF  FA9
0162C:  BCF    FA6.6
0162E:  BCF    FA6.7
01630:  BSF    FA6.0
01632:  MOVF   FA8,W
01634:  BTFSC  x25.7
01636:  BSF    FF2.7
01638:  CLRF   x0F
0163A:  MOVWF  x0E
....................    FaultDelayTime[20] = read_eeprom(0x31);
0163C:  MOVFF  FF2,C25
01640:  BCF    FF2.7
01642:  CLRF   FAA
01644:  MOVLW  31
01646:  MOVWF  FA9
01648:  BCF    FA6.6
0164A:  BCF    FA6.7
0164C:  BSF    FA6.0
0164E:  MOVF   FA8,W
01650:  BTFSC  x25.7
01652:  BSF    FF2.7
01654:  CLRF   x11
01656:  MOVWF  x10
....................    
....................       unsigned int  a = 0; 
....................    unsigned char  phonenum;
01658:  CLRF   x1B
....................    for(; ; a++)
....................    {
....................       restart_wdt();
0165A:  CLRWDT
....................       phonenum = read_eeprom(0x32 + a);
0165C:  MOVLW  32
0165E:  ADDWF  x1B,W
01660:  MOVWF  x25
01662:  MOVFF  FF2,C26
01666:  BCF    FF2.7
01668:  CLRF   FAA
0166A:  MOVFF  C25,FA9
0166E:  BCF    FA6.6
01670:  BCF    FA6.7
01672:  BSF    FA6.0
01674:  MOVF   FA8,W
01676:  BTFSC  x26.7
01678:  BSF    FF2.7
0167A:  MOVWF  x1C
....................       if((phonenum == 0x0D) || (a > 15))
0167C:  MOVF   x1C,W
0167E:  SUBLW  0D
01680:  BZ    1688
01682:  MOVF   x1B,W
01684:  SUBLW  0F
01686:  BC    16D0
....................       {
....................          sms_phonenumber[a] =  '\0';
01688:  CLRF   03
0168A:  MOVF   x1B,W
0168C:  ADDLW  8B
0168E:  MOVWF  FE9
01690:  MOVLW  09
01692:  ADDWFC 03,W
01694:  MOVWF  FEA
01696:  CLRF   FEF
....................          write_eeprom(0x32+a,phonenum);
01698:  MOVLW  32
0169A:  ADDWF  x1B,W
0169C:  MOVWF  x25
0169E:  MOVF   FF2,W
016A0:  MOVWF  00
016A2:  BCF    FF2.7
016A4:  CLRF   FAA
016A6:  MOVFF  C25,FA9
016AA:  MOVFF  C1C,FA8
016AE:  BCF    FA6.6
016B0:  BCF    FA6.7
016B2:  BSF    FA6.2
016B4:  MOVLB  F
016B6:  MOVLW  55
016B8:  MOVWF  FA7
016BA:  MOVLW  AA
016BC:  MOVWF  FA7
016BE:  BSF    FA6.1
016C0:  BTFSC  FA6.1
016C2:  BRA    16C0
016C4:  BCF    FA6.2
016C6:  MOVF   00,W
016C8:  IORWF  FF2,F
....................          break;
016CA:  BRA    16EC
....................       }
016CC:  BRA    16E4
016CE:  MOVLB  C
....................       else
....................       {
....................          sms_phonenumber[a] = phonenum;
016D0:  CLRF   03
016D2:  MOVF   x1B,W
016D4:  ADDLW  8B
016D6:  MOVWF  FE9
016D8:  MOVLW  09
016DA:  ADDWFC 03,W
016DC:  MOVWF  FEA
016DE:  MOVFF  C1C,FEF
016E2:  MOVLB  F
....................       }
016E4:  MOVLB  C
016E6:  INCF   x1B,F
016E8:  BRA    165A
016EA:  MOVLB  F
....................    }
....................    
....................       
....................    int16  i =3,j=0,k=0 , buff;
016EC:  MOVLB  C
016EE:  CLRF   x1E
016F0:  MOVLW  03
016F2:  MOVWF  x1D
016F4:  CLRF   x20
016F6:  CLRF   x1F
016F8:  CLRF   x22
016FA:  CLRF   x21
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
016FC:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
016FE:  MOVLW  5D
01700:  ADDWF  x1D,W
01702:  MOVWF  x25
01704:  MOVLW  00
01706:  ADDWFC x1E,W
01708:  MOVWF  x26
0170A:  MOVFF  FF2,C27
0170E:  BCF    FF2.7
01710:  MOVFF  C26,FAA
01714:  MOVFF  C25,FA9
01718:  BCF    FA6.6
0171A:  BCF    FA6.7
0171C:  BSF    FA6.0
0171E:  MOVF   FA8,W
01720:  BTFSC  x27.7
01722:  BSF    FF2.7
01724:  CLRF   x24
01726:  MOVWF  x23
....................       
....................       if((buff == 0x0D)|| (j>30))
01728:  MOVF   x23,W
0172A:  SUBLW  0D
0172C:  BNZ   1732
0172E:  MOVF   x24,F
01730:  BZ    173C
01732:  MOVF   x20,F
01734:  BNZ   173C
01736:  MOVF   x1F,W
01738:  SUBLW  1E
0173A:  BC    174E
....................       {
....................          SMS_Massage1[j] = '\0' ; // end string
0173C:  MOVLW  9A
0173E:  ADDWF  x1F,W
01740:  MOVWF  FE9
01742:  MOVLW  09
01744:  ADDWFC x20,W
01746:  MOVWF  FEA
01748:  CLRF   FEF
....................          break;
0174A:  BRA    1772
....................       }
0174C:  BRA    175E
....................       else
....................       {
....................          SMS_Massage1[j] = buff;  
0174E:  MOVLW  9A
01750:  ADDWF  x1F,W
01752:  MOVWF  FE9
01754:  MOVLW  09
01756:  ADDWFC x20,W
01758:  MOVWF  FEA
0175A:  MOVFF  C23,FEF
....................       }
0175E:  MOVFF  C1E,03
01762:  MOVF   x1D,W
01764:  INCF   x1D,F
01766:  BTFSC  FD8.2
01768:  INCF   x1E,F
0176A:  INCF   x1F,F
0176C:  BTFSC  FD8.2
0176E:  INCF   x20,F
01770:  BRA    16FC
....................    }
....................    
....................    i++;
01772:  INCF   x1D,F
01774:  BTFSC  FD8.2
01776:  INCF   x1E,F
....................    j=0;
01778:  CLRF   x20
0177A:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0177C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0177E:  MOVLW  5D
01780:  ADDWF  x1D,W
01782:  MOVWF  x25
01784:  MOVLW  00
01786:  ADDWFC x1E,W
01788:  MOVWF  x26
0178A:  MOVFF  FF2,C27
0178E:  BCF    FF2.7
01790:  MOVFF  C26,FAA
01794:  MOVFF  C25,FA9
01798:  BCF    FA6.6
0179A:  BCF    FA6.7
0179C:  BSF    FA6.0
0179E:  MOVF   FA8,W
017A0:  BTFSC  x27.7
017A2:  BSF    FF2.7
017A4:  CLRF   x24
017A6:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
017A8:  MOVF   x23,W
017AA:  SUBLW  0D
017AC:  BNZ   17B2
017AE:  MOVF   x24,F
017B0:  BZ    17BC
017B2:  MOVF   x20,F
017B4:  BNZ   17BC
017B6:  MOVF   x1F,W
017B8:  SUBLW  1E
017BA:  BC    17CE
....................       {
....................          SMS_Massage2[j] = '\0' ; // end string
017BC:  MOVLW  BA
017BE:  ADDWF  x1F,W
017C0:  MOVWF  FE9
017C2:  MOVLW  09
017C4:  ADDWFC x20,W
017C6:  MOVWF  FEA
017C8:  CLRF   FEF
....................          break;
017CA:  BRA    17F2
....................       }
017CC:  BRA    17DE
....................       else
....................       {
....................          SMS_Massage2[j] = buff;
017CE:  MOVLW  BA
017D0:  ADDWF  x1F,W
017D2:  MOVWF  FE9
017D4:  MOVLW  09
017D6:  ADDWFC x20,W
017D8:  MOVWF  FEA
017DA:  MOVFF  C23,FEF
....................          
....................       }
017DE:  MOVFF  C1E,03
017E2:  MOVF   x1D,W
017E4:  INCF   x1D,F
017E6:  BTFSC  FD8.2
017E8:  INCF   x1E,F
017EA:  INCF   x1F,F
017EC:  BTFSC  FD8.2
017EE:  INCF   x20,F
017F0:  BRA    177C
....................    }
....................    
....................    i++;
017F2:  INCF   x1D,F
017F4:  BTFSC  FD8.2
017F6:  INCF   x1E,F
....................    j=0;
017F8:  CLRF   x20
017FA:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
017FC:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
017FE:  MOVLW  5D
01800:  ADDWF  x1D,W
01802:  MOVWF  x25
01804:  MOVLW  00
01806:  ADDWFC x1E,W
01808:  MOVWF  x26
0180A:  MOVFF  FF2,C27
0180E:  BCF    FF2.7
01810:  MOVFF  C26,FAA
01814:  MOVFF  C25,FA9
01818:  BCF    FA6.6
0181A:  BCF    FA6.7
0181C:  BSF    FA6.0
0181E:  MOVF   FA8,W
01820:  BTFSC  x27.7
01822:  BSF    FF2.7
01824:  CLRF   x24
01826:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01828:  MOVF   x23,W
0182A:  SUBLW  0D
0182C:  BNZ   1832
0182E:  MOVF   x24,F
01830:  BZ    183C
01832:  MOVF   x20,F
01834:  BNZ   183C
01836:  MOVF   x1F,W
01838:  SUBLW  1E
0183A:  BC    184E
....................       {
....................          SMS_Massage3[j] = '\0' ; // end string
0183C:  MOVLW  DA
0183E:  ADDWF  x1F,W
01840:  MOVWF  FE9
01842:  MOVLW  09
01844:  ADDWFC x20,W
01846:  MOVWF  FEA
01848:  CLRF   FEF
....................          break;
0184A:  BRA    1872
....................       }
0184C:  BRA    185E
....................       else
....................       {
....................          SMS_Massage3[j] = buff;
0184E:  MOVLW  DA
01850:  ADDWF  x1F,W
01852:  MOVWF  FE9
01854:  MOVLW  09
01856:  ADDWFC x20,W
01858:  MOVWF  FEA
0185A:  MOVFF  C23,FEF
....................          
....................       }
0185E:  MOVFF  C1E,03
01862:  MOVF   x1D,W
01864:  INCF   x1D,F
01866:  BTFSC  FD8.2
01868:  INCF   x1E,F
0186A:  INCF   x1F,F
0186C:  BTFSC  FD8.2
0186E:  INCF   x20,F
01870:  BRA    17FC
....................    }
....................    
....................    i++;
01872:  INCF   x1D,F
01874:  BTFSC  FD8.2
01876:  INCF   x1E,F
....................    j=0;
01878:  CLRF   x20
0187A:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0187C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0187E:  MOVLW  5D
01880:  ADDWF  x1D,W
01882:  MOVWF  x25
01884:  MOVLW  00
01886:  ADDWFC x1E,W
01888:  MOVWF  x26
0188A:  MOVFF  FF2,C27
0188E:  BCF    FF2.7
01890:  MOVFF  C26,FAA
01894:  MOVFF  C25,FA9
01898:  BCF    FA6.6
0189A:  BCF    FA6.7
0189C:  BSF    FA6.0
0189E:  MOVF   FA8,W
018A0:  BTFSC  x27.7
018A2:  BSF    FF2.7
018A4:  CLRF   x24
018A6:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
018A8:  MOVF   x23,W
018AA:  SUBLW  0D
018AC:  BNZ   18B2
018AE:  MOVF   x24,F
018B0:  BZ    18BC
018B2:  MOVF   x20,F
018B4:  BNZ   18BC
018B6:  MOVF   x1F,W
018B8:  SUBLW  1E
018BA:  BC    18CE
....................       {
....................          SMS_Massage4[j] = '\0' ; // end string
018BC:  MOVLW  FA
018BE:  ADDWF  x1F,W
018C0:  MOVWF  FE9
018C2:  MOVLW  09
018C4:  ADDWFC x20,W
018C6:  MOVWF  FEA
018C8:  CLRF   FEF
....................          break;
018CA:  BRA    18F2
....................       }
018CC:  BRA    18DE
....................       else
....................       {
....................          SMS_Massage4[j] = buff;
018CE:  MOVLW  FA
018D0:  ADDWF  x1F,W
018D2:  MOVWF  FE9
018D4:  MOVLW  09
018D6:  ADDWFC x20,W
018D8:  MOVWF  FEA
018DA:  MOVFF  C23,FEF
....................          
....................       }
018DE:  MOVFF  C1E,03
018E2:  MOVF   x1D,W
018E4:  INCF   x1D,F
018E6:  BTFSC  FD8.2
018E8:  INCF   x1E,F
018EA:  INCF   x1F,F
018EC:  BTFSC  FD8.2
018EE:  INCF   x20,F
018F0:  BRA    187C
....................    }
....................    
....................    i++;
018F2:  INCF   x1D,F
018F4:  BTFSC  FD8.2
018F6:  INCF   x1E,F
....................    j=0;
018F8:  CLRF   x20
018FA:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
018FC:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
018FE:  MOVLW  5D
01900:  ADDWF  x1D,W
01902:  MOVWF  x25
01904:  MOVLW  00
01906:  ADDWFC x1E,W
01908:  MOVWF  x26
0190A:  MOVFF  FF2,C27
0190E:  BCF    FF2.7
01910:  MOVFF  C26,FAA
01914:  MOVFF  C25,FA9
01918:  BCF    FA6.6
0191A:  BCF    FA6.7
0191C:  BSF    FA6.0
0191E:  MOVF   FA8,W
01920:  BTFSC  x27.7
01922:  BSF    FF2.7
01924:  CLRF   x24
01926:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01928:  MOVF   x23,W
0192A:  SUBLW  0D
0192C:  BNZ   1932
0192E:  MOVF   x24,F
01930:  BZ    193C
01932:  MOVF   x20,F
01934:  BNZ   193C
01936:  MOVF   x1F,W
01938:  SUBLW  1E
0193A:  BC    194E
....................       {
....................          SMS_Massage5[j] = '\0' ; // end string
0193C:  MOVLW  1A
0193E:  ADDWF  x1F,W
01940:  MOVWF  FE9
01942:  MOVLW  0A
01944:  ADDWFC x20,W
01946:  MOVWF  FEA
01948:  CLRF   FEF
....................          break;
0194A:  BRA    1972
....................       }
0194C:  BRA    195E
....................       else
....................       {
....................          SMS_Massage5[j] = buff;
0194E:  MOVLW  1A
01950:  ADDWF  x1F,W
01952:  MOVWF  FE9
01954:  MOVLW  0A
01956:  ADDWFC x20,W
01958:  MOVWF  FEA
0195A:  MOVFF  C23,FEF
....................          
....................       }
0195E:  MOVFF  C1E,03
01962:  MOVF   x1D,W
01964:  INCF   x1D,F
01966:  BTFSC  FD8.2
01968:  INCF   x1E,F
0196A:  INCF   x1F,F
0196C:  BTFSC  FD8.2
0196E:  INCF   x20,F
01970:  BRA    18FC
....................    }
....................    
....................    i++;
01972:  INCF   x1D,F
01974:  BTFSC  FD8.2
01976:  INCF   x1E,F
....................    j=0;
01978:  CLRF   x20
0197A:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0197C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0197E:  MOVLW  5D
01980:  ADDWF  x1D,W
01982:  MOVWF  x25
01984:  MOVLW  00
01986:  ADDWFC x1E,W
01988:  MOVWF  x26
0198A:  MOVFF  FF2,C27
0198E:  BCF    FF2.7
01990:  MOVFF  C26,FAA
01994:  MOVFF  C25,FA9
01998:  BCF    FA6.6
0199A:  BCF    FA6.7
0199C:  BSF    FA6.0
0199E:  MOVF   FA8,W
019A0:  BTFSC  x27.7
019A2:  BSF    FF2.7
019A4:  CLRF   x24
019A6:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
019A8:  MOVF   x23,W
019AA:  SUBLW  0D
019AC:  BNZ   19B2
019AE:  MOVF   x24,F
019B0:  BZ    19BC
019B2:  MOVF   x20,F
019B4:  BNZ   19BC
019B6:  MOVF   x1F,W
019B8:  SUBLW  1E
019BA:  BC    19CE
....................       {
....................          SMS_Massage6[j] = '\0' ; // end string
019BC:  MOVLW  3A
019BE:  ADDWF  x1F,W
019C0:  MOVWF  FE9
019C2:  MOVLW  0A
019C4:  ADDWFC x20,W
019C6:  MOVWF  FEA
019C8:  CLRF   FEF
....................          break;
019CA:  BRA    19F2
....................       }
019CC:  BRA    19DE
....................       else
....................       {
....................          SMS_Massage6[j] = buff;
019CE:  MOVLW  3A
019D0:  ADDWF  x1F,W
019D2:  MOVWF  FE9
019D4:  MOVLW  0A
019D6:  ADDWFC x20,W
019D8:  MOVWF  FEA
019DA:  MOVFF  C23,FEF
....................          
....................       }
019DE:  MOVFF  C1E,03
019E2:  MOVF   x1D,W
019E4:  INCF   x1D,F
019E6:  BTFSC  FD8.2
019E8:  INCF   x1E,F
019EA:  INCF   x1F,F
019EC:  BTFSC  FD8.2
019EE:  INCF   x20,F
019F0:  BRA    197C
....................    }
....................    
....................    i++;
019F2:  INCF   x1D,F
019F4:  BTFSC  FD8.2
019F6:  INCF   x1E,F
....................    j=0;
019F8:  CLRF   x20
019FA:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
019FC:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
019FE:  MOVLW  5D
01A00:  ADDWF  x1D,W
01A02:  MOVWF  x25
01A04:  MOVLW  00
01A06:  ADDWFC x1E,W
01A08:  MOVWF  x26
01A0A:  MOVFF  FF2,C27
01A0E:  BCF    FF2.7
01A10:  MOVFF  C26,FAA
01A14:  MOVFF  C25,FA9
01A18:  BCF    FA6.6
01A1A:  BCF    FA6.7
01A1C:  BSF    FA6.0
01A1E:  MOVF   FA8,W
01A20:  BTFSC  x27.7
01A22:  BSF    FF2.7
01A24:  CLRF   x24
01A26:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01A28:  MOVF   x23,W
01A2A:  SUBLW  0D
01A2C:  BNZ   1A32
01A2E:  MOVF   x24,F
01A30:  BZ    1A3C
01A32:  MOVF   x20,F
01A34:  BNZ   1A3C
01A36:  MOVF   x1F,W
01A38:  SUBLW  1E
01A3A:  BC    1A4E
....................       {
....................          SMS_Massage7[j] = '\0' ; // end string
01A3C:  MOVLW  5A
01A3E:  ADDWF  x1F,W
01A40:  MOVWF  FE9
01A42:  MOVLW  0A
01A44:  ADDWFC x20,W
01A46:  MOVWF  FEA
01A48:  CLRF   FEF
....................          break;
01A4A:  BRA    1A72
....................       }
01A4C:  BRA    1A5E
....................       else
....................       {
....................          SMS_Massage7[j] = buff;
01A4E:  MOVLW  5A
01A50:  ADDWF  x1F,W
01A52:  MOVWF  FE9
01A54:  MOVLW  0A
01A56:  ADDWFC x20,W
01A58:  MOVWF  FEA
01A5A:  MOVFF  C23,FEF
....................          
....................       }
01A5E:  MOVFF  C1E,03
01A62:  MOVF   x1D,W
01A64:  INCF   x1D,F
01A66:  BTFSC  FD8.2
01A68:  INCF   x1E,F
01A6A:  INCF   x1F,F
01A6C:  BTFSC  FD8.2
01A6E:  INCF   x20,F
01A70:  BRA    19FC
....................    }
....................    
....................    i++;
01A72:  INCF   x1D,F
01A74:  BTFSC  FD8.2
01A76:  INCF   x1E,F
....................    j=0;
01A78:  CLRF   x20
01A7A:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01A7C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01A7E:  MOVLW  5D
01A80:  ADDWF  x1D,W
01A82:  MOVWF  x25
01A84:  MOVLW  00
01A86:  ADDWFC x1E,W
01A88:  MOVWF  x26
01A8A:  MOVFF  FF2,C27
01A8E:  BCF    FF2.7
01A90:  MOVFF  C26,FAA
01A94:  MOVFF  C25,FA9
01A98:  BCF    FA6.6
01A9A:  BCF    FA6.7
01A9C:  BSF    FA6.0
01A9E:  MOVF   FA8,W
01AA0:  BTFSC  x27.7
01AA2:  BSF    FF2.7
01AA4:  CLRF   x24
01AA6:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01AA8:  MOVF   x23,W
01AAA:  SUBLW  0D
01AAC:  BNZ   1AB2
01AAE:  MOVF   x24,F
01AB0:  BZ    1ABC
01AB2:  MOVF   x20,F
01AB4:  BNZ   1ABC
01AB6:  MOVF   x1F,W
01AB8:  SUBLW  1E
01ABA:  BC    1ACE
....................       {
....................          SMS_Massage8[j] = '\0' ; // end string
01ABC:  MOVLW  7A
01ABE:  ADDWF  x1F,W
01AC0:  MOVWF  FE9
01AC2:  MOVLW  0A
01AC4:  ADDWFC x20,W
01AC6:  MOVWF  FEA
01AC8:  CLRF   FEF
....................          break;
01ACA:  BRA    1AF2
....................       }
01ACC:  BRA    1ADE
....................       else
....................       {
....................          SMS_Massage8[j] = buff;
01ACE:  MOVLW  7A
01AD0:  ADDWF  x1F,W
01AD2:  MOVWF  FE9
01AD4:  MOVLW  0A
01AD6:  ADDWFC x20,W
01AD8:  MOVWF  FEA
01ADA:  MOVFF  C23,FEF
....................          
....................       }
01ADE:  MOVFF  C1E,03
01AE2:  MOVF   x1D,W
01AE4:  INCF   x1D,F
01AE6:  BTFSC  FD8.2
01AE8:  INCF   x1E,F
01AEA:  INCF   x1F,F
01AEC:  BTFSC  FD8.2
01AEE:  INCF   x20,F
01AF0:  BRA    1A7C
....................    }
....................    
....................    i++;
01AF2:  INCF   x1D,F
01AF4:  BTFSC  FD8.2
01AF6:  INCF   x1E,F
....................    j=0;
01AF8:  CLRF   x20
01AFA:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01AFC:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01AFE:  MOVLW  5D
01B00:  ADDWF  x1D,W
01B02:  MOVWF  x25
01B04:  MOVLW  00
01B06:  ADDWFC x1E,W
01B08:  MOVWF  x26
01B0A:  MOVFF  FF2,C27
01B0E:  BCF    FF2.7
01B10:  MOVFF  C26,FAA
01B14:  MOVFF  C25,FA9
01B18:  BCF    FA6.6
01B1A:  BCF    FA6.7
01B1C:  BSF    FA6.0
01B1E:  MOVF   FA8,W
01B20:  BTFSC  x27.7
01B22:  BSF    FF2.7
01B24:  CLRF   x24
01B26:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01B28:  MOVF   x23,W
01B2A:  SUBLW  0D
01B2C:  BNZ   1B32
01B2E:  MOVF   x24,F
01B30:  BZ    1B3C
01B32:  MOVF   x20,F
01B34:  BNZ   1B3C
01B36:  MOVF   x1F,W
01B38:  SUBLW  1E
01B3A:  BC    1B4E
....................       {
....................          SMS_Massage9[j] = '\0' ; // end string
01B3C:  MOVLW  9A
01B3E:  ADDWF  x1F,W
01B40:  MOVWF  FE9
01B42:  MOVLW  0A
01B44:  ADDWFC x20,W
01B46:  MOVWF  FEA
01B48:  CLRF   FEF
....................          break;
01B4A:  BRA    1B72
....................       }
01B4C:  BRA    1B5E
....................       else
....................       {
....................          SMS_Massage9[j] = buff;
01B4E:  MOVLW  9A
01B50:  ADDWF  x1F,W
01B52:  MOVWF  FE9
01B54:  MOVLW  0A
01B56:  ADDWFC x20,W
01B58:  MOVWF  FEA
01B5A:  MOVFF  C23,FEF
....................          
....................       }
01B5E:  MOVFF  C1E,03
01B62:  MOVF   x1D,W
01B64:  INCF   x1D,F
01B66:  BTFSC  FD8.2
01B68:  INCF   x1E,F
01B6A:  INCF   x1F,F
01B6C:  BTFSC  FD8.2
01B6E:  INCF   x20,F
01B70:  BRA    1AFC
....................    }
....................    
....................    i++;
01B72:  INCF   x1D,F
01B74:  BTFSC  FD8.2
01B76:  INCF   x1E,F
....................    j=0;
01B78:  CLRF   x20
01B7A:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01B7C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01B7E:  MOVLW  5D
01B80:  ADDWF  x1D,W
01B82:  MOVWF  x25
01B84:  MOVLW  00
01B86:  ADDWFC x1E,W
01B88:  MOVWF  x26
01B8A:  MOVFF  FF2,C27
01B8E:  BCF    FF2.7
01B90:  MOVFF  C26,FAA
01B94:  MOVFF  C25,FA9
01B98:  BCF    FA6.6
01B9A:  BCF    FA6.7
01B9C:  BSF    FA6.0
01B9E:  MOVF   FA8,W
01BA0:  BTFSC  x27.7
01BA2:  BSF    FF2.7
01BA4:  CLRF   x24
01BA6:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01BA8:  MOVF   x23,W
01BAA:  SUBLW  0D
01BAC:  BNZ   1BB2
01BAE:  MOVF   x24,F
01BB0:  BZ    1BBC
01BB2:  MOVF   x20,F
01BB4:  BNZ   1BBC
01BB6:  MOVF   x1F,W
01BB8:  SUBLW  1E
01BBA:  BC    1BCE
....................       {
....................          SMS_Massage10[j] = '\0' ; // end string
01BBC:  MOVLW  BA
01BBE:  ADDWF  x1F,W
01BC0:  MOVWF  FE9
01BC2:  MOVLW  0A
01BC4:  ADDWFC x20,W
01BC6:  MOVWF  FEA
01BC8:  CLRF   FEF
....................          break;
01BCA:  BRA    1BF2
....................       }
01BCC:  BRA    1BDE
....................       else
....................       {
....................          SMS_Massage10[j] = buff;
01BCE:  MOVLW  BA
01BD0:  ADDWF  x1F,W
01BD2:  MOVWF  FE9
01BD4:  MOVLW  0A
01BD6:  ADDWFC x20,W
01BD8:  MOVWF  FEA
01BDA:  MOVFF  C23,FEF
....................          
....................       }
01BDE:  MOVFF  C1E,03
01BE2:  MOVF   x1D,W
01BE4:  INCF   x1D,F
01BE6:  BTFSC  FD8.2
01BE8:  INCF   x1E,F
01BEA:  INCF   x1F,F
01BEC:  BTFSC  FD8.2
01BEE:  INCF   x20,F
01BF0:  BRA    1B7C
....................    }
....................       
....................    i++;
01BF2:  INCF   x1D,F
01BF4:  BTFSC  FD8.2
01BF6:  INCF   x1E,F
....................    j=0;
01BF8:  CLRF   x20
01BFA:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01BFC:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01BFE:  MOVLW  5D
01C00:  ADDWF  x1D,W
01C02:  MOVWF  x25
01C04:  MOVLW  00
01C06:  ADDWFC x1E,W
01C08:  MOVWF  x26
01C0A:  MOVFF  FF2,C27
01C0E:  BCF    FF2.7
01C10:  MOVFF  C26,FAA
01C14:  MOVFF  C25,FA9
01C18:  BCF    FA6.6
01C1A:  BCF    FA6.7
01C1C:  BSF    FA6.0
01C1E:  MOVF   FA8,W
01C20:  BTFSC  x27.7
01C22:  BSF    FF2.7
01C24:  CLRF   x24
01C26:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01C28:  MOVF   x23,W
01C2A:  SUBLW  0D
01C2C:  BNZ   1C32
01C2E:  MOVF   x24,F
01C30:  BZ    1C3C
01C32:  MOVF   x20,F
01C34:  BNZ   1C3C
01C36:  MOVF   x1F,W
01C38:  SUBLW  1E
01C3A:  BC    1C4E
....................       {
....................          SMS_Massage11[j] = '\0' ; // end string
01C3C:  MOVLW  DA
01C3E:  ADDWF  x1F,W
01C40:  MOVWF  FE9
01C42:  MOVLW  0A
01C44:  ADDWFC x20,W
01C46:  MOVWF  FEA
01C48:  CLRF   FEF
....................          break;
01C4A:  BRA    1C72
....................       }
01C4C:  BRA    1C5E
....................       else
....................       {
....................          SMS_Massage11[j] = buff;
01C4E:  MOVLW  DA
01C50:  ADDWF  x1F,W
01C52:  MOVWF  FE9
01C54:  MOVLW  0A
01C56:  ADDWFC x20,W
01C58:  MOVWF  FEA
01C5A:  MOVFF  C23,FEF
....................          
....................       }
01C5E:  MOVFF  C1E,03
01C62:  MOVF   x1D,W
01C64:  INCF   x1D,F
01C66:  BTFSC  FD8.2
01C68:  INCF   x1E,F
01C6A:  INCF   x1F,F
01C6C:  BTFSC  FD8.2
01C6E:  INCF   x20,F
01C70:  BRA    1BFC
....................    }
....................       
....................    i++;
01C72:  INCF   x1D,F
01C74:  BTFSC  FD8.2
01C76:  INCF   x1E,F
....................    j=0;
01C78:  CLRF   x20
01C7A:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01C7C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01C7E:  MOVLW  5D
01C80:  ADDWF  x1D,W
01C82:  MOVWF  x25
01C84:  MOVLW  00
01C86:  ADDWFC x1E,W
01C88:  MOVWF  x26
01C8A:  MOVFF  FF2,C27
01C8E:  BCF    FF2.7
01C90:  MOVFF  C26,FAA
01C94:  MOVFF  C25,FA9
01C98:  BCF    FA6.6
01C9A:  BCF    FA6.7
01C9C:  BSF    FA6.0
01C9E:  MOVF   FA8,W
01CA0:  BTFSC  x27.7
01CA2:  BSF    FF2.7
01CA4:  CLRF   x24
01CA6:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01CA8:  MOVF   x23,W
01CAA:  SUBLW  0D
01CAC:  BNZ   1CB2
01CAE:  MOVF   x24,F
01CB0:  BZ    1CBC
01CB2:  MOVF   x20,F
01CB4:  BNZ   1CBC
01CB6:  MOVF   x1F,W
01CB8:  SUBLW  1E
01CBA:  BC    1CCE
....................       {
....................          SMS_Massage12[j] = '\0' ; // end string
01CBC:  MOVLW  FA
01CBE:  ADDWF  x1F,W
01CC0:  MOVWF  FE9
01CC2:  MOVLW  0A
01CC4:  ADDWFC x20,W
01CC6:  MOVWF  FEA
01CC8:  CLRF   FEF
....................          break;
01CCA:  BRA    1CF2
....................       }
01CCC:  BRA    1CDE
....................       else
....................       {
....................          SMS_Massage12[j] = buff;
01CCE:  MOVLW  FA
01CD0:  ADDWF  x1F,W
01CD2:  MOVWF  FE9
01CD4:  MOVLW  0A
01CD6:  ADDWFC x20,W
01CD8:  MOVWF  FEA
01CDA:  MOVFF  C23,FEF
....................          
....................       }
01CDE:  MOVFF  C1E,03
01CE2:  MOVF   x1D,W
01CE4:  INCF   x1D,F
01CE6:  BTFSC  FD8.2
01CE8:  INCF   x1E,F
01CEA:  INCF   x1F,F
01CEC:  BTFSC  FD8.2
01CEE:  INCF   x20,F
01CF0:  BRA    1C7C
....................    }
....................       
....................    i++;
01CF2:  INCF   x1D,F
01CF4:  BTFSC  FD8.2
01CF6:  INCF   x1E,F
....................    j=0;
01CF8:  CLRF   x20
01CFA:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01CFC:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01CFE:  MOVLW  5D
01D00:  ADDWF  x1D,W
01D02:  MOVWF  x25
01D04:  MOVLW  00
01D06:  ADDWFC x1E,W
01D08:  MOVWF  x26
01D0A:  MOVFF  FF2,C27
01D0E:  BCF    FF2.7
01D10:  MOVFF  C26,FAA
01D14:  MOVFF  C25,FA9
01D18:  BCF    FA6.6
01D1A:  BCF    FA6.7
01D1C:  BSF    FA6.0
01D1E:  MOVF   FA8,W
01D20:  BTFSC  x27.7
01D22:  BSF    FF2.7
01D24:  CLRF   x24
01D26:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01D28:  MOVF   x23,W
01D2A:  SUBLW  0D
01D2C:  BNZ   1D32
01D2E:  MOVF   x24,F
01D30:  BZ    1D3C
01D32:  MOVF   x20,F
01D34:  BNZ   1D3C
01D36:  MOVF   x1F,W
01D38:  SUBLW  1E
01D3A:  BC    1D4E
....................       {
....................          SMS_Massage13[j] = '\0' ; // end string
01D3C:  MOVLW  1A
01D3E:  ADDWF  x1F,W
01D40:  MOVWF  FE9
01D42:  MOVLW  0B
01D44:  ADDWFC x20,W
01D46:  MOVWF  FEA
01D48:  CLRF   FEF
....................          break;
01D4A:  BRA    1D72
....................       }
01D4C:  BRA    1D5E
....................       else
....................       {
....................          SMS_Massage13[j] = buff;
01D4E:  MOVLW  1A
01D50:  ADDWF  x1F,W
01D52:  MOVWF  FE9
01D54:  MOVLW  0B
01D56:  ADDWFC x20,W
01D58:  MOVWF  FEA
01D5A:  MOVFF  C23,FEF
....................          
....................       }
01D5E:  MOVFF  C1E,03
01D62:  MOVF   x1D,W
01D64:  INCF   x1D,F
01D66:  BTFSC  FD8.2
01D68:  INCF   x1E,F
01D6A:  INCF   x1F,F
01D6C:  BTFSC  FD8.2
01D6E:  INCF   x20,F
01D70:  BRA    1CFC
....................    }
....................       
....................    i++;
01D72:  INCF   x1D,F
01D74:  BTFSC  FD8.2
01D76:  INCF   x1E,F
....................    j=0;
01D78:  CLRF   x20
01D7A:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01D7C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01D7E:  MOVLW  5D
01D80:  ADDWF  x1D,W
01D82:  MOVWF  x25
01D84:  MOVLW  00
01D86:  ADDWFC x1E,W
01D88:  MOVWF  x26
01D8A:  MOVFF  FF2,C27
01D8E:  BCF    FF2.7
01D90:  MOVFF  C26,FAA
01D94:  MOVFF  C25,FA9
01D98:  BCF    FA6.6
01D9A:  BCF    FA6.7
01D9C:  BSF    FA6.0
01D9E:  MOVF   FA8,W
01DA0:  BTFSC  x27.7
01DA2:  BSF    FF2.7
01DA4:  CLRF   x24
01DA6:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01DA8:  MOVF   x23,W
01DAA:  SUBLW  0D
01DAC:  BNZ   1DB2
01DAE:  MOVF   x24,F
01DB0:  BZ    1DBC
01DB2:  MOVF   x20,F
01DB4:  BNZ   1DBC
01DB6:  MOVF   x1F,W
01DB8:  SUBLW  1E
01DBA:  BC    1DCE
....................       {
....................          SMS_Massage14[j] = '\0' ; // end string
01DBC:  MOVLW  3A
01DBE:  ADDWF  x1F,W
01DC0:  MOVWF  FE9
01DC2:  MOVLW  0B
01DC4:  ADDWFC x20,W
01DC6:  MOVWF  FEA
01DC8:  CLRF   FEF
....................          break;
01DCA:  BRA    1DF2
....................       }
01DCC:  BRA    1DDE
....................       else
....................       {
....................          SMS_Massage14[j] = buff;
01DCE:  MOVLW  3A
01DD0:  ADDWF  x1F,W
01DD2:  MOVWF  FE9
01DD4:  MOVLW  0B
01DD6:  ADDWFC x20,W
01DD8:  MOVWF  FEA
01DDA:  MOVFF  C23,FEF
....................          
....................       }
01DDE:  MOVFF  C1E,03
01DE2:  MOVF   x1D,W
01DE4:  INCF   x1D,F
01DE6:  BTFSC  FD8.2
01DE8:  INCF   x1E,F
01DEA:  INCF   x1F,F
01DEC:  BTFSC  FD8.2
01DEE:  INCF   x20,F
01DF0:  BRA    1D7C
....................    }
....................       
....................    i++;
01DF2:  INCF   x1D,F
01DF4:  BTFSC  FD8.2
01DF6:  INCF   x1E,F
....................    j=0;
01DF8:  CLRF   x20
01DFA:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01DFC:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01DFE:  MOVLW  5D
01E00:  ADDWF  x1D,W
01E02:  MOVWF  x25
01E04:  MOVLW  00
01E06:  ADDWFC x1E,W
01E08:  MOVWF  x26
01E0A:  MOVFF  FF2,C27
01E0E:  BCF    FF2.7
01E10:  MOVFF  C26,FAA
01E14:  MOVFF  C25,FA9
01E18:  BCF    FA6.6
01E1A:  BCF    FA6.7
01E1C:  BSF    FA6.0
01E1E:  MOVF   FA8,W
01E20:  BTFSC  x27.7
01E22:  BSF    FF2.7
01E24:  CLRF   x24
01E26:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01E28:  MOVF   x23,W
01E2A:  SUBLW  0D
01E2C:  BNZ   1E32
01E2E:  MOVF   x24,F
01E30:  BZ    1E3C
01E32:  MOVF   x20,F
01E34:  BNZ   1E3C
01E36:  MOVF   x1F,W
01E38:  SUBLW  1E
01E3A:  BC    1E4E
....................       {
....................          SMS_Massage15[j] = '\0' ; // end string
01E3C:  MOVLW  5A
01E3E:  ADDWF  x1F,W
01E40:  MOVWF  FE9
01E42:  MOVLW  0B
01E44:  ADDWFC x20,W
01E46:  MOVWF  FEA
01E48:  CLRF   FEF
....................          break;
01E4A:  BRA    1E72
....................       }
01E4C:  BRA    1E5E
....................       else
....................       {
....................          SMS_Massage15[j] = buff;
01E4E:  MOVLW  5A
01E50:  ADDWF  x1F,W
01E52:  MOVWF  FE9
01E54:  MOVLW  0B
01E56:  ADDWFC x20,W
01E58:  MOVWF  FEA
01E5A:  MOVFF  C23,FEF
....................          
....................       }
01E5E:  MOVFF  C1E,03
01E62:  MOVF   x1D,W
01E64:  INCF   x1D,F
01E66:  BTFSC  FD8.2
01E68:  INCF   x1E,F
01E6A:  INCF   x1F,F
01E6C:  BTFSC  FD8.2
01E6E:  INCF   x20,F
01E70:  BRA    1DFC
....................    }
....................       
....................    i++;
01E72:  INCF   x1D,F
01E74:  BTFSC  FD8.2
01E76:  INCF   x1E,F
....................    j=0;
01E78:  CLRF   x20
01E7A:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01E7C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01E7E:  MOVLW  5D
01E80:  ADDWF  x1D,W
01E82:  MOVWF  x25
01E84:  MOVLW  00
01E86:  ADDWFC x1E,W
01E88:  MOVWF  x26
01E8A:  MOVFF  FF2,C27
01E8E:  BCF    FF2.7
01E90:  MOVFF  C26,FAA
01E94:  MOVFF  C25,FA9
01E98:  BCF    FA6.6
01E9A:  BCF    FA6.7
01E9C:  BSF    FA6.0
01E9E:  MOVF   FA8,W
01EA0:  BTFSC  x27.7
01EA2:  BSF    FF2.7
01EA4:  CLRF   x24
01EA6:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01EA8:  MOVF   x23,W
01EAA:  SUBLW  0D
01EAC:  BNZ   1EB2
01EAE:  MOVF   x24,F
01EB0:  BZ    1EBC
01EB2:  MOVF   x20,F
01EB4:  BNZ   1EBC
01EB6:  MOVF   x1F,W
01EB8:  SUBLW  1E
01EBA:  BC    1ECE
....................       {
....................          SMS_Massage16[j] = '\0' ; // end string
01EBC:  MOVLW  7A
01EBE:  ADDWF  x1F,W
01EC0:  MOVWF  FE9
01EC2:  MOVLW  0B
01EC4:  ADDWFC x20,W
01EC6:  MOVWF  FEA
01EC8:  CLRF   FEF
....................          break;
01ECA:  BRA    1EF2
....................       }
01ECC:  BRA    1EDE
....................       else
....................       {
....................          SMS_Massage16[j] = buff;
01ECE:  MOVLW  7A
01ED0:  ADDWF  x1F,W
01ED2:  MOVWF  FE9
01ED4:  MOVLW  0B
01ED6:  ADDWFC x20,W
01ED8:  MOVWF  FEA
01EDA:  MOVFF  C23,FEF
....................          
....................       }
01EDE:  MOVFF  C1E,03
01EE2:  MOVF   x1D,W
01EE4:  INCF   x1D,F
01EE6:  BTFSC  FD8.2
01EE8:  INCF   x1E,F
01EEA:  INCF   x1F,F
01EEC:  BTFSC  FD8.2
01EEE:  INCF   x20,F
01EF0:  BRA    1E7C
....................    }
01EF2:  MOVLB  0
01EF4:  GOTO   A7D2 (RETURN)
....................    
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
.................... 
....................    //Data = getc();
....................    //putc(Data);
....................    SBUF = getc();
*
0056A:  BTFSS  F9E.5
0056C:  BRA    056A
0056E:  MOVFF  FAE,2E
....................    checkCommand();
00572:  BRA    02DA
.................... }
.................... 
00574:  BCF    F9E.5
00576:  GOTO   006C
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
0057A:  INCF   19,F
.................... 
....................    if(T_timeout != 0)
0057C:  MOVLB  9
0057E:  MOVF   x85,F
00580:  BZ    0590
....................    {
....................       T_timeout--;
00582:  DECF   x85,F
....................       if(T_timeout == 0)
00584:  MOVF   x85,F
00586:  BNZ   0590
....................       {
....................          //sequence = stop_sq;         //timeout
....................          sequence = end_sq;         //timeout   
00588:  MOVFF  6F,78
....................          output_bit(P485ctrl,0);
0058C:  BCF    F8A.3
0058E:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
00590:  MOVF   1C,F
00592:  BZ    05AC
....................    {
....................       TimeBase1s--;
00594:  DECF   1C,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
00596:  MOVF   1C,F
00598:  BNZ   05AC
....................       {
....................          if(AutoAckDelayTime != 0x00)
0059A:  MOVF   1D,F
0059C:  BZ    05A6
....................          {
....................             AutoAckDelayTime--;
0059E:  DECF   1D,F
....................             if(AutoAckDelayTime == 0x00)
005A0:  MOVF   1D,F
005A2:  BNZ   05A6
....................             {
....................                AutoAckFlag = 1 ;
005A4:  BSF    1A.2
....................             }
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
005A6:  BSF    30.4
....................          TimeBase1s = 100;
005A8:  MOVLW  64
005AA:  MOVWF  1C
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 50)    //500mS
005AC:  MOVF   19,W
005AE:  SUBLW  32
005B0:  BNZ   05DA
....................    {
....................       StatusTime = 0;
005B2:  CLRF   19
....................       if(HearthbeatInd == 0)
005B4:  BTFSC  1A.0
005B6:  BRA    05C0
....................       {
....................          HearthbeatInd = 1;
005B8:  BSF    1A.0
....................          output_bit(Pled,1);
005BA:  BSF    F8A.5
005BC:  BCF    F93.5
....................       }
005BE:  BRA    05C6
....................       else
....................       {
....................          HearthbeatInd = 0;
005C0:  BCF    1A.0
....................          output_bit(Pled,0); 
005C2:  BCF    F8A.5
005C4:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................     if(Test == 1)            //Test function
005C6:  BTFSS  1A.6
005C8:  BRA    05D8
....................    {
....................        if(T_test > 0x00) T_test --;
005CA:  MOVF   2F,F
005CC:  BZ    05D0
005CE:  DECF   2F,F
....................        if(T_test == 0x00) Test_fault = 1;
005D0:  MOVF   2F,F
005D2:  BNZ   05D6
005D4:  BSF    1A.5
....................     }
005D6:  BRA    05DA
....................     else
....................     {
....................        //Test = 0;
....................        T_test = 0x00;
005D8:  CLRF   2F
....................     }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
005DA:  MOVF   1B,F
005DC:  BZ    0604
....................    {
....................       FlashingRateTime--;
005DE:  DECF   1B,F
....................       if(FlashingRateTime == 0)
005E0:  MOVF   1B,F
005E2:  BNZ   05F8
....................       {
....................          outmcp23 = 0xff;
005E4:  SETF   x88
....................          
....................          if(SyncStatus == 0)
005E6:  BTFSC  30.1
005E8:  BRA    05F4
....................          {
....................             if(FlashingFlag == 1)
005EA:  BTFSS  1A.1
005EC:  BRA    05F2
....................             {
....................                FlashingFlag = 0;
005EE:  BCF    1A.1
....................                //output_bit(PSyncS,0);
....................             }
005F0:  BRA    05F4
....................             else
....................             {
.................... 
....................                FlashingFlag = 1;
005F2:  BSF    1A.1
....................                //output_bit(PSyncS,1);
....................             }
....................          }
....................          //FlashingFlag = ~FlashingFlag;
....................          FlashingRateTime = FlashingRate;      //reload value
005F4:  MOVFF  6C,1B
....................       }
.................... 
....................       if(Synctimer != 0x00)
005F8:  MOVF   31,F
005FA:  BZ    0604
....................       {
....................          Synctimer--;
005FC:  DECF   31,F
....................          if(Synctimer == 0x00)
005FE:  MOVF   31,F
00600:  BNZ   0604
....................          {
....................             SyncStatus = 0;
00602:  BCF    30.1
....................          }
....................       }
.................... 
....................    }
....................    
00604:  BCF    F9E.1
00606:  MOVLB  0
00608:  GOTO   006C
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
06C54:  MOVLB  B
06C56:  BTFSS  xA6.0
06C58:  BRA    6D70
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
06C5A:  MOVLW  00
06C5C:  BTFSC  x9A.0
06C5E:  MOVLW  01
06C60:  MOVLB  C
06C62:  MOVWF  x24
06C64:  MOVLW  00
06C66:  MOVLB  B
06C68:  BTFSC  x9E.0
06C6A:  MOVLW  01
06C6C:  MOVLB  C
06C6E:  XORWF  x24,W
06C70:  SUBLW  01
06C72:  BNZ   6C7A
06C74:  MOVLB  B
06C76:  BTFSC  xA0.0
06C78:  BRA    6C80
06C7A:  MOVLB  B
06C7C:  BTFSS  xAA.0
06C7E:  BRA    6D68
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
06C80:  BTFSC  xA8.0
06C82:  BRA    6D66
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
06C84:  BTFSC  xAA.0
06C86:  BRA    6CA0
06C88:  MOVLB  0
06C8A:  MOVF   x6A,W
06C8C:  SUBLW  0F
06C8E:  BTFSC  FD8.2
06C90:  BRA    6C96
06C92:  MOVLB  B
06C94:  BRA    6CA0
....................             {
....................                TimeBase1s = 100 ;            //reload again
06C96:  MOVLW  64
06C98:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
06C9A:  MOVFF  6B,1D
06C9E:  MOVLB  B
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
06CA0:  BSF    xAA.0
....................             if(FlashingFlag == 0)
06CA2:  BTFSC  1A.1
06CA4:  BRA    6CAA
....................             {
....................                Output.B1 = 0;           //Flash output1
06CA6:  BCF    x9C.0
....................             }
06CA8:  BRA    6CAC
....................             else
....................             {
....................                Output.B1 = 1;
06CAA:  BSF    x9C.0
....................             }
.................... 
....................             if (~AutoTestFlag)
06CAC:  BTFSC  1A.4
06CAE:  BRA    6CCC
....................             {
....................                if(OutputBoth.B1 == 0)                  //Both output
06CB0:  BTFSC  xA4.0
06CB2:  BRA    6CBE
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06CB4:  BSF    F89.4
06CB6:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06CB8:  BSF    F89.3
06CBA:  BCF    F92.3
....................                }
06CBC:  BRA    6CCC
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
06CBE:  BTFSS  xA2.0
06CC0:  BRA    6CC8
06CC2:  BSF    F89.4
06CC4:  BCF    F92.4
06CC6:  BRA    6CCC
....................                   else output_bit(Pbell,1);                          //Bell
06CC8:  BSF    F89.3
06CCA:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending 
....................             if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
06CCC:  BTFSC  xB6.0
06CCE:  BRA    6D66
06CD0:  BTFSC  30.3
06CD2:  BRA    6D66
06CD4:  BTFSC  xA8.0
06CD6:  BRA    6D66
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
06CD8:  MOVLW  0C
06CDA:  MOVWF  FF6
06CDC:  MOVLW  06
06CDE:  MOVWF  FF7
06CE0:  MOVLB  0
06CE2:  CALL   2EB4
....................                putc('\n',CH2);
06CE6:  MOVLW  0A
06CE8:  MOVLB  C
06CEA:  MOVWF  x25
06CEC:  MOVLB  0
06CEE:  CALL   2E6E
....................                delay_ms(10);
06CF2:  MOVLW  0A
06CF4:  MOVLB  C
06CF6:  MOVWF  x24
06CF8:  MOVLB  0
06CFA:  CALL   0936
....................             
....................                SendSMS.B1 =1;
06CFE:  MOVLB  B
06D00:  BSF    xB6.0
....................                fprintf(CH2,"AT+CMGS=\"");
06D02:  MOVLW  16
06D04:  MOVWF  FF6
06D06:  MOVLW  06
06D08:  MOVWF  FF7
06D0A:  MOVLB  0
06D0C:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
06D10:  MOVLW  09
06D12:  MOVWF  FEA
06D14:  MOVLW  8B
06D16:  MOVWF  FE9
06D18:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
06D1C:  MOVLW  22
06D1E:  MOVLB  C
06D20:  MOVWF  x25
06D22:  MOVLB  0
06D24:  CALL   2E6E
....................                putc('\n',CH2);
06D28:  MOVLW  0A
06D2A:  MOVLB  C
06D2C:  MOVWF  x25
06D2E:  MOVLB  0
06D30:  CALL   2E6E
....................                delay_ms(50);
06D34:  MOVLW  32
06D36:  MOVLB  C
06D38:  MOVWF  x24
06D3A:  MOVLB  0
06D3C:  CALL   0936
....................               
....................               fprintf(CH2,SMS_Massage1);
06D40:  MOVLW  09
06D42:  MOVWF  FEA
06D44:  MOVLW  9A
06D46:  MOVWF  FE9
06D48:  CALL   6226
....................               putc('\n',CH2);
06D4C:  MOVLW  0A
06D4E:  MOVLB  C
06D50:  MOVWF  x25
06D52:  MOVLB  0
06D54:  CALL   2E6E
....................               putc(26,CH2);
06D58:  MOVLW  1A
06D5A:  MOVLB  C
06D5C:  MOVWF  x25
06D5E:  MOVLB  0
06D60:  CALL   2E6E
06D64:  MOVLB  B
....................             }
....................         }
....................       }
06D66:  BRA    6D6E
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
06D68:  BTFSS  xA0.0
06D6A:  BRA    6D6E
06D6C:  BCF    xA8.0
....................    }
06D6E:  BRA    6E34
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
06D70:  MOVLW  00
06D72:  BTFSC  x9A.0
06D74:  MOVLW  01
06D76:  MOVLB  C
06D78:  MOVWF  x24
06D7A:  MOVLW  00
06D7C:  MOVLB  B
06D7E:  BTFSC  x9E.0
06D80:  MOVLW  01
06D82:  MOVLB  C
06D84:  XORWF  x24,W
06D86:  SUBLW  01
06D88:  BNZ   6E2C
....................       {
....................          Output.B1 = 0;
06D8A:  MOVLB  B
06D8C:  BCF    x9C.0
....................          // SMS Sending 
....................          if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
06D8E:  BTFSC  xB6.0
06D90:  BRA    6E28
06D92:  BTFSC  30.3
06D94:  BRA    6E28
06D96:  BTFSC  xA8.0
06D98:  BRA    6E28
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
06D9A:  MOVLW  20
06D9C:  MOVWF  FF6
06D9E:  MOVLW  06
06DA0:  MOVWF  FF7
06DA2:  MOVLB  0
06DA4:  CALL   2EB4
....................             putc('\n',CH2);
06DA8:  MOVLW  0A
06DAA:  MOVLB  C
06DAC:  MOVWF  x25
06DAE:  MOVLB  0
06DB0:  CALL   2E6E
....................             delay_ms(10);
06DB4:  MOVLW  0A
06DB6:  MOVLB  C
06DB8:  MOVWF  x24
06DBA:  MOVLB  0
06DBC:  CALL   0936
....................          
....................             SendSMS.B1 =1;
06DC0:  MOVLB  B
06DC2:  BSF    xB6.0
....................             fprintf(CH2,"AT+CMGS=\"");
06DC4:  MOVLW  2A
06DC6:  MOVWF  FF6
06DC8:  MOVLW  06
06DCA:  MOVWF  FF7
06DCC:  MOVLB  0
06DCE:  CALL   2EB4
....................             fprintf(CH2,sms_phonenumber);
06DD2:  MOVLW  09
06DD4:  MOVWF  FEA
06DD6:  MOVLW  8B
06DD8:  MOVWF  FE9
06DDA:  CALL   6226
....................             
....................             fprintf(CH2,"\"");
06DDE:  MOVLW  22
06DE0:  MOVLB  C
06DE2:  MOVWF  x25
06DE4:  MOVLB  0
06DE6:  CALL   2E6E
....................             putc('\n',CH2);
06DEA:  MOVLW  0A
06DEC:  MOVLB  C
06DEE:  MOVWF  x25
06DF0:  MOVLB  0
06DF2:  CALL   2E6E
....................             delay_ms(50);
06DF6:  MOVLW  32
06DF8:  MOVLB  C
06DFA:  MOVWF  x24
06DFC:  MOVLB  0
06DFE:  CALL   0936
....................            
....................            fprintf(CH2,SMS_Massage1);
06E02:  MOVLW  09
06E04:  MOVWF  FEA
06E06:  MOVLW  9A
06E08:  MOVWF  FE9
06E0A:  CALL   6226
....................            putc('\n',CH2);
06E0E:  MOVLW  0A
06E10:  MOVLB  C
06E12:  MOVWF  x25
06E14:  MOVLB  0
06E16:  CALL   2E6E
....................            putc(26,CH2);
06E1A:  MOVLW  1A
06E1C:  MOVLB  C
06E1E:  MOVWF  x25
06E20:  MOVLB  0
06E22:  CALL   2E6E
06E26:  MOVLB  B
....................          }
....................       }
06E28:  BRA    6E34
06E2A:  MOVLB  C
....................       else
....................       {
....................          Output.B1 = 1;
06E2C:  MOVLB  B
06E2E:  BSF    x9C.0
.................... 
....................          SendSMS.B1 =0;
06E30:  BCF    xB6.0
....................          functointest_f =0;
06E32:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
06E34:  BTFSS  xA6.1
06E36:  BRA    6F4E
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
06E38:  MOVLW  00
06E3A:  BTFSC  x9A.1
06E3C:  MOVLW  01
06E3E:  MOVLB  C
06E40:  MOVWF  x24
06E42:  MOVLW  00
06E44:  MOVLB  B
06E46:  BTFSC  x9E.1
06E48:  MOVLW  01
06E4A:  MOVLB  C
06E4C:  XORWF  x24,W
06E4E:  SUBLW  01
06E50:  BNZ   6E58
06E52:  MOVLB  B
06E54:  BTFSC  xA0.1
06E56:  BRA    6E5E
06E58:  MOVLB  B
06E5A:  BTFSS  xAA.1
06E5C:  BRA    6F46
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
06E5E:  BTFSC  xA8.1
06E60:  BRA    6F44
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
06E62:  BTFSC  xAA.1
06E64:  BRA    6E7E
06E66:  MOVLB  0
06E68:  MOVF   x6A,W
06E6A:  SUBLW  0F
06E6C:  BTFSC  FD8.2
06E6E:  BRA    6E74
06E70:  MOVLB  B
06E72:  BRA    6E7E
....................             {
....................                TimeBase1s = 100 ;            //reload again
06E74:  MOVLW  64
06E76:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
06E78:  MOVFF  6B,1D
06E7C:  MOVLB  B
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
06E7E:  BSF    xAA.1
....................             if(FlashingFlag == 0)
06E80:  BTFSC  1A.1
06E82:  BRA    6E88
....................             {
....................                Output.B2 = 0;           //Flash output1
06E84:  BCF    x9C.1
....................             }
06E86:  BRA    6E8A
....................             else
....................             {
....................                Output.B2 = 1;
06E88:  BSF    x9C.1
....................             }
.................... 
....................             if (~AutoTestFlag)
06E8A:  BTFSC  1A.4
06E8C:  BRA    6EAA
....................             {
....................                if(OutputBoth.B2 == 0)                  //Both output
06E8E:  BTFSC  xA4.1
06E90:  BRA    6E9C
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06E92:  BSF    F89.4
06E94:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06E96:  BSF    F89.3
06E98:  BCF    F92.3
....................                }
06E9A:  BRA    6EAA
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
06E9C:  BTFSS  xA2.1
06E9E:  BRA    6EA6
06EA0:  BSF    F89.4
06EA2:  BCF    F92.4
06EA4:  BRA    6EAA
....................                   else output_bit(Pbell,1);                          //Bell
06EA6:  BSF    F89.3
06EA8:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
06EAA:  BTFSC  xB6.1
06EAC:  BRA    6F44
06EAE:  BTFSC  30.3
06EB0:  BRA    6F44
06EB2:  BTFSC  xA8.1
06EB4:  BRA    6F44
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
06EB6:  MOVLW  34
06EB8:  MOVWF  FF6
06EBA:  MOVLW  06
06EBC:  MOVWF  FF7
06EBE:  MOVLB  0
06EC0:  CALL   2EB4
....................                putc('\n',CH2);
06EC4:  MOVLW  0A
06EC6:  MOVLB  C
06EC8:  MOVWF  x25
06ECA:  MOVLB  0
06ECC:  CALL   2E6E
....................                delay_ms(10);
06ED0:  MOVLW  0A
06ED2:  MOVLB  C
06ED4:  MOVWF  x24
06ED6:  MOVLB  0
06ED8:  CALL   0936
....................                 
....................                SendSMS.B2 =1;
06EDC:  MOVLB  B
06EDE:  BSF    xB6.1
....................                fprintf(CH2,"AT+CMGS=\"");
06EE0:  MOVLW  3E
06EE2:  MOVWF  FF6
06EE4:  MOVLW  06
06EE6:  MOVWF  FF7
06EE8:  MOVLB  0
06EEA:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
06EEE:  MOVLW  09
06EF0:  MOVWF  FEA
06EF2:  MOVLW  8B
06EF4:  MOVWF  FE9
06EF6:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
06EFA:  MOVLW  22
06EFC:  MOVLB  C
06EFE:  MOVWF  x25
06F00:  MOVLB  0
06F02:  CALL   2E6E
....................                putc('\n',CH2);
06F06:  MOVLW  0A
06F08:  MOVLB  C
06F0A:  MOVWF  x25
06F0C:  MOVLB  0
06F0E:  CALL   2E6E
....................                delay_ms(50);
06F12:  MOVLW  32
06F14:  MOVLB  C
06F16:  MOVWF  x24
06F18:  MOVLB  0
06F1A:  CALL   0936
....................                
....................               fprintf(CH2,SMS_Massage2);
06F1E:  MOVLW  09
06F20:  MOVWF  FEA
06F22:  MOVLW  BA
06F24:  MOVWF  FE9
06F26:  CALL   6226
....................               putc('\n',CH2);
06F2A:  MOVLW  0A
06F2C:  MOVLB  C
06F2E:  MOVWF  x25
06F30:  MOVLB  0
06F32:  CALL   2E6E
....................              putc(26,CH2);
06F36:  MOVLW  1A
06F38:  MOVLB  C
06F3A:  MOVWF  x25
06F3C:  MOVLB  0
06F3E:  CALL   2E6E
06F42:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
06F44:  BRA    6F4C
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
06F46:  BTFSS  xA0.1
06F48:  BRA    6F4C
06F4A:  BCF    xA8.1
....................    }
06F4C:  BRA    7012
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
06F4E:  MOVLW  00
06F50:  BTFSC  x9A.1
06F52:  MOVLW  01
06F54:  MOVLB  C
06F56:  MOVWF  x24
06F58:  MOVLW  00
06F5A:  MOVLB  B
06F5C:  BTFSC  x9E.1
06F5E:  MOVLW  01
06F60:  MOVLB  C
06F62:  XORWF  x24,W
06F64:  SUBLW  01
06F66:  BNZ   700A
....................       {
....................          Output.B2 = 0;
06F68:  MOVLB  B
06F6A:  BCF    x9C.1
....................          // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
06F6C:  BTFSC  xB6.1
06F6E:  BRA    7006
06F70:  BTFSC  30.3
06F72:  BRA    7006
06F74:  BTFSC  xA8.1
06F76:  BRA    7006
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
06F78:  MOVLW  48
06F7A:  MOVWF  FF6
06F7C:  MOVLW  06
06F7E:  MOVWF  FF7
06F80:  MOVLB  0
06F82:  CALL   2EB4
....................                putc('\n',CH2);
06F86:  MOVLW  0A
06F88:  MOVLB  C
06F8A:  MOVWF  x25
06F8C:  MOVLB  0
06F8E:  CALL   2E6E
....................                delay_ms(10);
06F92:  MOVLW  0A
06F94:  MOVLB  C
06F96:  MOVWF  x24
06F98:  MOVLB  0
06F9A:  CALL   0936
....................                 
....................                SendSMS.B2 =1;
06F9E:  MOVLB  B
06FA0:  BSF    xB6.1
....................                fprintf(CH2,"AT+CMGS=\"");
06FA2:  MOVLW  52
06FA4:  MOVWF  FF6
06FA6:  MOVLW  06
06FA8:  MOVWF  FF7
06FAA:  MOVLB  0
06FAC:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
06FB0:  MOVLW  09
06FB2:  MOVWF  FEA
06FB4:  MOVLW  8B
06FB6:  MOVWF  FE9
06FB8:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
06FBC:  MOVLW  22
06FBE:  MOVLB  C
06FC0:  MOVWF  x25
06FC2:  MOVLB  0
06FC4:  CALL   2E6E
....................                putc('\n',CH2);
06FC8:  MOVLW  0A
06FCA:  MOVLB  C
06FCC:  MOVWF  x25
06FCE:  MOVLB  0
06FD0:  CALL   2E6E
....................                delay_ms(50);
06FD4:  MOVLW  32
06FD6:  MOVLB  C
06FD8:  MOVWF  x24
06FDA:  MOVLB  0
06FDC:  CALL   0936
....................                
....................               fprintf(CH2,SMS_Massage2);
06FE0:  MOVLW  09
06FE2:  MOVWF  FEA
06FE4:  MOVLW  BA
06FE6:  MOVWF  FE9
06FE8:  CALL   6226
....................               putc('\n',CH2);
06FEC:  MOVLW  0A
06FEE:  MOVLB  C
06FF0:  MOVWF  x25
06FF2:  MOVLB  0
06FF4:  CALL   2E6E
....................              putc(26,CH2);
06FF8:  MOVLW  1A
06FFA:  MOVLB  C
06FFC:  MOVWF  x25
06FFE:  MOVLB  0
07000:  CALL   2E6E
07004:  MOVLB  B
....................             } 
....................       }
07006:  BRA    7012
07008:  MOVLB  C
....................       else
....................       {
....................          Output.B2 = 1;
0700A:  MOVLB  B
0700C:  BSF    x9C.1
....................          SendSMS.B2 =0;
0700E:  BCF    xB6.1
....................          functointest_f =0;
07010:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
07012:  BTFSS  xA6.2
07014:  BRA    712C
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
07016:  MOVLW  00
07018:  BTFSC  x9A.2
0701A:  MOVLW  01
0701C:  MOVLB  C
0701E:  MOVWF  x24
07020:  MOVLW  00
07022:  MOVLB  B
07024:  BTFSC  x9E.2
07026:  MOVLW  01
07028:  MOVLB  C
0702A:  XORWF  x24,W
0702C:  SUBLW  01
0702E:  BNZ   7036
07030:  MOVLB  B
07032:  BTFSC  xA0.2
07034:  BRA    703C
07036:  MOVLB  B
07038:  BTFSS  xAA.2
0703A:  BRA    7124
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
0703C:  BTFSC  xA8.2
0703E:  BRA    7122
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07040:  BTFSC  xAA.2
07042:  BRA    705C
07044:  MOVLB  0
07046:  MOVF   x6A,W
07048:  SUBLW  0F
0704A:  BTFSC  FD8.2
0704C:  BRA    7052
0704E:  MOVLB  B
07050:  BRA    705C
....................             {
....................                TimeBase1s = 100 ;            //reload again
07052:  MOVLW  64
07054:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07056:  MOVFF  6B,1D
0705A:  MOVLB  B
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
0705C:  BSF    xAA.2
....................             if(FlashingFlag == 0)
0705E:  BTFSC  1A.1
07060:  BRA    7066
....................             {
....................                Output.B3 = 0;           //Flash output1
07062:  BCF    x9C.2
....................             }
07064:  BRA    7068
....................             else
....................             {
....................                Output.B3 = 1;
07066:  BSF    x9C.2
....................             }
.................... 
....................             if (~AutoTestFlag)
07068:  BTFSC  1A.4
0706A:  BRA    7088
....................             {
....................                if(OutputBoth.B3 == 0)                  //Both output
0706C:  BTFSC  xA4.2
0706E:  BRA    707A
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07070:  BSF    F89.4
07072:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07074:  BSF    F89.3
07076:  BCF    F92.3
....................                }
07078:  BRA    7088
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
0707A:  BTFSS  xA2.2
0707C:  BRA    7084
0707E:  BSF    F89.4
07080:  BCF    F92.4
07082:  BRA    7088
....................                   else output_bit(Pbell,1);                          //Bell
07084:  BSF    F89.3
07086:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
07088:  BTFSC  xB6.2
0708A:  BRA    7122
0708C:  BTFSC  30.3
0708E:  BRA    7122
07090:  BTFSC  xA8.2
07092:  BRA    7122
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07094:  MOVLW  5C
07096:  MOVWF  FF6
07098:  MOVLW  06
0709A:  MOVWF  FF7
0709C:  MOVLB  0
0709E:  CALL   2EB4
....................                putc('\n',CH2);
070A2:  MOVLW  0A
070A4:  MOVLB  C
070A6:  MOVWF  x25
070A8:  MOVLB  0
070AA:  CALL   2E6E
....................                delay_ms(10);
070AE:  MOVLW  0A
070B0:  MOVLB  C
070B2:  MOVWF  x24
070B4:  MOVLB  0
070B6:  CALL   0936
....................                
....................                SendSMS.B3 =1;
070BA:  MOVLB  B
070BC:  BSF    xB6.2
....................                fprintf(CH2,"AT+CMGS=\"");
070BE:  MOVLW  66
070C0:  MOVWF  FF6
070C2:  MOVLW  06
070C4:  MOVWF  FF7
070C6:  MOVLB  0
070C8:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
070CC:  MOVLW  09
070CE:  MOVWF  FEA
070D0:  MOVLW  8B
070D2:  MOVWF  FE9
070D4:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
070D8:  MOVLW  22
070DA:  MOVLB  C
070DC:  MOVWF  x25
070DE:  MOVLB  0
070E0:  CALL   2E6E
....................                putc('\n',CH2);
070E4:  MOVLW  0A
070E6:  MOVLB  C
070E8:  MOVWF  x25
070EA:  MOVLB  0
070EC:  CALL   2E6E
....................                delay_ms(50);
070F0:  MOVLW  32
070F2:  MOVLB  C
070F4:  MOVWF  x24
070F6:  MOVLB  0
070F8:  CALL   0936
....................               
....................               fprintf(CH2,SMS_Massage3);
070FC:  MOVLW  09
070FE:  MOVWF  FEA
07100:  MOVLW  DA
07102:  MOVWF  FE9
07104:  CALL   6226
....................               putc('\n',CH2);
07108:  MOVLW  0A
0710A:  MOVLB  C
0710C:  MOVWF  x25
0710E:  MOVLB  0
07110:  CALL   2E6E
....................              putc(26,CH2);
07114:  MOVLW  1A
07116:  MOVLB  C
07118:  MOVWF  x25
0711A:  MOVLB  0
0711C:  CALL   2E6E
07120:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
07122:  BRA    712A
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
07124:  BTFSS  xA0.2
07126:  BRA    712A
07128:  BCF    xA8.2
....................    }
0712A:  BRA    71F0
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
0712C:  MOVLW  00
0712E:  BTFSC  x9A.2
07130:  MOVLW  01
07132:  MOVLB  C
07134:  MOVWF  x24
07136:  MOVLW  00
07138:  MOVLB  B
0713A:  BTFSC  x9E.2
0713C:  MOVLW  01
0713E:  MOVLB  C
07140:  XORWF  x24,W
07142:  SUBLW  01
07144:  BNZ   71E8
....................       {
....................          Output.B3 = 0;
07146:  MOVLB  B
07148:  BCF    x9C.2
....................          // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
0714A:  BTFSC  xB6.2
0714C:  BRA    71E4
0714E:  BTFSC  30.3
07150:  BRA    71E4
07152:  BTFSC  xA8.2
07154:  BRA    71E4
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07156:  MOVLW  70
07158:  MOVWF  FF6
0715A:  MOVLW  06
0715C:  MOVWF  FF7
0715E:  MOVLB  0
07160:  CALL   2EB4
....................                putc('\n',CH2);
07164:  MOVLW  0A
07166:  MOVLB  C
07168:  MOVWF  x25
0716A:  MOVLB  0
0716C:  CALL   2E6E
....................                delay_ms(10);
07170:  MOVLW  0A
07172:  MOVLB  C
07174:  MOVWF  x24
07176:  MOVLB  0
07178:  CALL   0936
....................                
....................                SendSMS.B3 =1;
0717C:  MOVLB  B
0717E:  BSF    xB6.2
....................                fprintf(CH2,"AT+CMGS=\"");
07180:  MOVLW  7A
07182:  MOVWF  FF6
07184:  MOVLW  06
07186:  MOVWF  FF7
07188:  MOVLB  0
0718A:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
0718E:  MOVLW  09
07190:  MOVWF  FEA
07192:  MOVLW  8B
07194:  MOVWF  FE9
07196:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
0719A:  MOVLW  22
0719C:  MOVLB  C
0719E:  MOVWF  x25
071A0:  MOVLB  0
071A2:  CALL   2E6E
....................                putc('\n',CH2);
071A6:  MOVLW  0A
071A8:  MOVLB  C
071AA:  MOVWF  x25
071AC:  MOVLB  0
071AE:  CALL   2E6E
....................                delay_ms(50);
071B2:  MOVLW  32
071B4:  MOVLB  C
071B6:  MOVWF  x24
071B8:  MOVLB  0
071BA:  CALL   0936
....................               
....................               fprintf(CH2,SMS_Massage3);
071BE:  MOVLW  09
071C0:  MOVWF  FEA
071C2:  MOVLW  DA
071C4:  MOVWF  FE9
071C6:  CALL   6226
....................               putc('\n',CH2);
071CA:  MOVLW  0A
071CC:  MOVLB  C
071CE:  MOVWF  x25
071D0:  MOVLB  0
071D2:  CALL   2E6E
....................              putc(26,CH2);
071D6:  MOVLW  1A
071D8:  MOVLB  C
071DA:  MOVWF  x25
071DC:  MOVLB  0
071DE:  CALL   2E6E
071E2:  MOVLB  B
....................             }
....................       }
071E4:  BRA    71F0
071E6:  MOVLB  C
....................       else
....................       {
....................          Output.B3 = 1;
071E8:  MOVLB  B
071EA:  BSF    x9C.2
....................          SendSMS.B3 =0;
071EC:  BCF    xB6.2
....................          functointest_f =0;
071EE:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
071F0:  BTFSS  xA6.3
071F2:  BRA    730A
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
071F4:  MOVLW  00
071F6:  BTFSC  x9A.3
071F8:  MOVLW  01
071FA:  MOVLB  C
071FC:  MOVWF  x24
071FE:  MOVLW  00
07200:  MOVLB  B
07202:  BTFSC  x9E.3
07204:  MOVLW  01
07206:  MOVLB  C
07208:  XORWF  x24,W
0720A:  SUBLW  01
0720C:  BNZ   7214
0720E:  MOVLB  B
07210:  BTFSC  xA0.3
07212:  BRA    721A
07214:  MOVLB  B
07216:  BTFSS  xAA.3
07218:  BRA    7302
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
0721A:  BTFSC  xA8.3
0721C:  BRA    7300
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0721E:  BTFSC  xAA.3
07220:  BRA    723A
07222:  MOVLB  0
07224:  MOVF   x6A,W
07226:  SUBLW  0F
07228:  BTFSC  FD8.2
0722A:  BRA    7230
0722C:  MOVLB  B
0722E:  BRA    723A
....................             {
....................                TimeBase1s = 100 ;            //reload again
07230:  MOVLW  64
07232:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07234:  MOVFF  6B,1D
07238:  MOVLB  B
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
0723A:  BSF    xAA.3
....................             if(FlashingFlag == 0)
0723C:  BTFSC  1A.1
0723E:  BRA    7244
....................             {
....................                Output.B4 = 0;           //Flash output1
07240:  BCF    x9C.3
....................             }
07242:  BRA    7246
....................             else
....................             {
....................                Output.B4 = 1;
07244:  BSF    x9C.3
....................             }
.................... 
....................             if (~AutoTestFlag)
07246:  BTFSC  1A.4
07248:  BRA    7266
....................             {
....................                if(OutputBoth.B4 == 0)                  //Both output
0724A:  BTFSC  xA4.3
0724C:  BRA    7258
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0724E:  BSF    F89.4
07250:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07252:  BSF    F89.3
07254:  BCF    F92.3
....................                }
07256:  BRA    7266
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
07258:  BTFSS  xA2.3
0725A:  BRA    7262
0725C:  BSF    F89.4
0725E:  BCF    F92.4
07260:  BRA    7266
....................                   else output_bit(Pbell,1);                          //Bell
07262:  BSF    F89.3
07264:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
07266:  BTFSC  xB6.3
07268:  BRA    7300
0726A:  BTFSC  30.3
0726C:  BRA    7300
0726E:  BTFSC  xA8.3
07270:  BRA    7300
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07272:  MOVLW  84
07274:  MOVWF  FF6
07276:  MOVLW  06
07278:  MOVWF  FF7
0727A:  MOVLB  0
0727C:  CALL   2EB4
....................                putc('\n',CH2);
07280:  MOVLW  0A
07282:  MOVLB  C
07284:  MOVWF  x25
07286:  MOVLB  0
07288:  CALL   2E6E
....................                delay_ms(10);
0728C:  MOVLW  0A
0728E:  MOVLB  C
07290:  MOVWF  x24
07292:  MOVLB  0
07294:  CALL   0936
....................                
....................                SendSMS.B4 =1;
07298:  MOVLB  B
0729A:  BSF    xB6.3
....................                fprintf(CH2,"AT+CMGS=\"");
0729C:  MOVLW  8E
0729E:  MOVWF  FF6
072A0:  MOVLW  06
072A2:  MOVWF  FF7
072A4:  MOVLB  0
072A6:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
072AA:  MOVLW  09
072AC:  MOVWF  FEA
072AE:  MOVLW  8B
072B0:  MOVWF  FE9
072B2:  CALL   6226
....................             
....................                fprintf(CH2,"\"");
072B6:  MOVLW  22
072B8:  MOVLB  C
072BA:  MOVWF  x25
072BC:  MOVLB  0
072BE:  CALL   2E6E
....................                putc('\n',CH2);
072C2:  MOVLW  0A
072C4:  MOVLB  C
072C6:  MOVWF  x25
072C8:  MOVLB  0
072CA:  CALL   2E6E
....................                delay_ms(50);
072CE:  MOVLW  32
072D0:  MOVLB  C
072D2:  MOVWF  x24
072D4:  MOVLB  0
072D6:  CALL   0936
....................               
....................               fprintf(CH2,SMS_Massage4);
072DA:  MOVLW  09
072DC:  MOVWF  FEA
072DE:  MOVLW  FA
072E0:  MOVWF  FE9
072E2:  CALL   6226
....................               putc('\n',CH2);
072E6:  MOVLW  0A
072E8:  MOVLB  C
072EA:  MOVWF  x25
072EC:  MOVLB  0
072EE:  CALL   2E6E
....................              putc(26,CH2);
072F2:  MOVLW  1A
072F4:  MOVLB  C
072F6:  MOVWF  x25
072F8:  MOVLB  0
072FA:  CALL   2E6E
072FE:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
07300:  BRA    7308
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
07302:  BTFSS  xA0.3
07304:  BRA    7308
07306:  BCF    xA8.3
....................    }
07308:  BRA    73CE
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
0730A:  MOVLW  00
0730C:  BTFSC  x9A.3
0730E:  MOVLW  01
07310:  MOVLB  C
07312:  MOVWF  x24
07314:  MOVLW  00
07316:  MOVLB  B
07318:  BTFSC  x9E.3
0731A:  MOVLW  01
0731C:  MOVLB  C
0731E:  XORWF  x24,W
07320:  SUBLW  01
07322:  BNZ   73C6
....................       {
....................          Output.B4 = 0;
07324:  MOVLB  B
07326:  BCF    x9C.3
....................          // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
07328:  BTFSC  xB6.3
0732A:  BRA    73C2
0732C:  BTFSC  30.3
0732E:  BRA    73C2
07330:  BTFSC  xA8.3
07332:  BRA    73C2
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07334:  MOVLW  98
07336:  MOVWF  FF6
07338:  MOVLW  06
0733A:  MOVWF  FF7
0733C:  MOVLB  0
0733E:  CALL   2EB4
....................                putc('\n',CH2);
07342:  MOVLW  0A
07344:  MOVLB  C
07346:  MOVWF  x25
07348:  MOVLB  0
0734A:  CALL   2E6E
....................                delay_ms(10);
0734E:  MOVLW  0A
07350:  MOVLB  C
07352:  MOVWF  x24
07354:  MOVLB  0
07356:  CALL   0936
....................                
....................                SendSMS.B4 =1;
0735A:  MOVLB  B
0735C:  BSF    xB6.3
....................                fprintf(CH2,"AT+CMGS=\"");
0735E:  MOVLW  A2
07360:  MOVWF  FF6
07362:  MOVLW  06
07364:  MOVWF  FF7
07366:  MOVLB  0
07368:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
0736C:  MOVLW  09
0736E:  MOVWF  FEA
07370:  MOVLW  8B
07372:  MOVWF  FE9
07374:  CALL   6226
....................             
....................                fprintf(CH2,"\"");
07378:  MOVLW  22
0737A:  MOVLB  C
0737C:  MOVWF  x25
0737E:  MOVLB  0
07380:  CALL   2E6E
....................                putc('\n',CH2);
07384:  MOVLW  0A
07386:  MOVLB  C
07388:  MOVWF  x25
0738A:  MOVLB  0
0738C:  CALL   2E6E
....................                delay_ms(50);
07390:  MOVLW  32
07392:  MOVLB  C
07394:  MOVWF  x24
07396:  MOVLB  0
07398:  CALL   0936
....................               
....................               fprintf(CH2,SMS_Massage4);
0739C:  MOVLW  09
0739E:  MOVWF  FEA
073A0:  MOVLW  FA
073A2:  MOVWF  FE9
073A4:  CALL   6226
....................               putc('\n',CH2);
073A8:  MOVLW  0A
073AA:  MOVLB  C
073AC:  MOVWF  x25
073AE:  MOVLB  0
073B0:  CALL   2E6E
....................              putc(26,CH2);
073B4:  MOVLW  1A
073B6:  MOVLB  C
073B8:  MOVWF  x25
073BA:  MOVLB  0
073BC:  CALL   2E6E
073C0:  MOVLB  B
....................             }
....................       }
073C2:  BRA    73CE
073C4:  MOVLB  C
....................       else
....................       {
....................          Output.B4 = 1;
073C6:  MOVLB  B
073C8:  BSF    x9C.3
....................          SendSMS.B4 =0;
073CA:  BCF    xB6.3
....................          functointest_f =0;
073CC:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
073CE:  BTFSS  xA6.4
073D0:  BRA    74E8
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
073D2:  MOVLW  00
073D4:  BTFSC  x9A.4
073D6:  MOVLW  01
073D8:  MOVLB  C
073DA:  MOVWF  x24
073DC:  MOVLW  00
073DE:  MOVLB  B
073E0:  BTFSC  x9E.4
073E2:  MOVLW  01
073E4:  MOVLB  C
073E6:  XORWF  x24,W
073E8:  SUBLW  01
073EA:  BNZ   73F2
073EC:  MOVLB  B
073EE:  BTFSC  xA0.4
073F0:  BRA    73F8
073F2:  MOVLB  B
073F4:  BTFSS  xAA.4
073F6:  BRA    74E0
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
073F8:  BTFSC  xA8.4
073FA:  BRA    74DE
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
073FC:  BTFSC  xAA.4
073FE:  BRA    7418
07400:  MOVLB  0
07402:  MOVF   x6A,W
07404:  SUBLW  0F
07406:  BTFSC  FD8.2
07408:  BRA    740E
0740A:  MOVLB  B
0740C:  BRA    7418
....................             {
....................                TimeBase1s = 100 ;            //reload again
0740E:  MOVLW  64
07410:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07412:  MOVFF  6B,1D
07416:  MOVLB  B
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
07418:  BSF    xAA.4
....................             if(FlashingFlag == 0)
0741A:  BTFSC  1A.1
0741C:  BRA    7422
....................             {
....................                Output.B5 = 0;           //Flash output1
0741E:  BCF    x9C.4
....................             }
07420:  BRA    7424
....................             else
....................             {
....................                Output.B5 = 1;
07422:  BSF    x9C.4
....................             }
.................... 
....................             if (~AutoTestFlag)
07424:  BTFSC  1A.4
07426:  BRA    7444
....................             {
....................                if(OutputBoth.B5 == 0)                  //Both output
07428:  BTFSC  xA4.4
0742A:  BRA    7436
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0742C:  BSF    F89.4
0742E:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07430:  BSF    F89.3
07432:  BCF    F92.3
....................                }
07434:  BRA    7444
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
07436:  BTFSS  xA2.4
07438:  BRA    7440
0743A:  BSF    F89.4
0743C:  BCF    F92.4
0743E:  BRA    7444
....................                   else output_bit(Pbell,1);                          //Bell
07440:  BSF    F89.3
07442:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
07444:  BTFSC  xB6.4
07446:  BRA    74DE
07448:  BTFSC  30.3
0744A:  BRA    74DE
0744C:  BTFSC  xA8.4
0744E:  BRA    74DE
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07450:  MOVLW  AC
07452:  MOVWF  FF6
07454:  MOVLW  06
07456:  MOVWF  FF7
07458:  MOVLB  0
0745A:  CALL   2EB4
....................                putc('\n',CH2);
0745E:  MOVLW  0A
07460:  MOVLB  C
07462:  MOVWF  x25
07464:  MOVLB  0
07466:  CALL   2E6E
....................                delay_ms(10);
0746A:  MOVLW  0A
0746C:  MOVLB  C
0746E:  MOVWF  x24
07470:  MOVLB  0
07472:  CALL   0936
....................                
....................                SendSMS.B5 =1;
07476:  MOVLB  B
07478:  BSF    xB6.4
....................                fprintf(CH2,"AT+CMGS=\"");
0747A:  MOVLW  B6
0747C:  MOVWF  FF6
0747E:  MOVLW  06
07480:  MOVWF  FF7
07482:  MOVLB  0
07484:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
07488:  MOVLW  09
0748A:  MOVWF  FEA
0748C:  MOVLW  8B
0748E:  MOVWF  FE9
07490:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
07494:  MOVLW  22
07496:  MOVLB  C
07498:  MOVWF  x25
0749A:  MOVLB  0
0749C:  CALL   2E6E
....................                putc('\n',CH2);
074A0:  MOVLW  0A
074A2:  MOVLB  C
074A4:  MOVWF  x25
074A6:  MOVLB  0
074A8:  CALL   2E6E
....................                delay_ms(50);
074AC:  MOVLW  32
074AE:  MOVLB  C
074B0:  MOVWF  x24
074B2:  MOVLB  0
074B4:  CALL   0936
....................               
....................               fprintf(CH2,SMS_Massage5);
074B8:  MOVLW  0A
074BA:  MOVWF  FEA
074BC:  MOVLW  1A
074BE:  MOVWF  FE9
074C0:  CALL   6226
....................               putc('\n',CH2);
074C4:  MOVLW  0A
074C6:  MOVLB  C
074C8:  MOVWF  x25
074CA:  MOVLB  0
074CC:  CALL   2E6E
....................              putc(26,CH2);
074D0:  MOVLW  1A
074D2:  MOVLB  C
074D4:  MOVWF  x25
074D6:  MOVLB  0
074D8:  CALL   2E6E
074DC:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
074DE:  BRA    74E6
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
074E0:  BTFSS  xA0.4
074E2:  BRA    74E6
074E4:  BCF    xA8.4
....................    }
074E6:  BRA    75AE
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
074E8:  MOVLW  00
074EA:  BTFSC  x9A.4
074EC:  MOVLW  01
074EE:  MOVLB  C
074F0:  MOVWF  x24
074F2:  MOVLW  00
074F4:  MOVLB  B
074F6:  BTFSC  x9E.4
074F8:  MOVLW  01
074FA:  MOVLB  C
074FC:  XORWF  x24,W
074FE:  SUBLW  01
07500:  BNZ   75A4
....................       {
....................          Output.B5 = 0;
07502:  MOVLB  B
07504:  BCF    x9C.4
....................          // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
07506:  BTFSC  xB6.4
07508:  BRA    75A0
0750A:  BTFSC  30.3
0750C:  BRA    75A0
0750E:  BTFSC  xA8.4
07510:  BRA    75A0
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07512:  MOVLW  C0
07514:  MOVWF  FF6
07516:  MOVLW  06
07518:  MOVWF  FF7
0751A:  MOVLB  0
0751C:  CALL   2EB4
....................                putc('\n',CH2);
07520:  MOVLW  0A
07522:  MOVLB  C
07524:  MOVWF  x25
07526:  MOVLB  0
07528:  CALL   2E6E
....................                delay_ms(10);
0752C:  MOVLW  0A
0752E:  MOVLB  C
07530:  MOVWF  x24
07532:  MOVLB  0
07534:  CALL   0936
....................                
....................                SendSMS.B5 =1;
07538:  MOVLB  B
0753A:  BSF    xB6.4
....................                fprintf(CH2,"AT+CMGS=\"");
0753C:  MOVLW  CA
0753E:  MOVWF  FF6
07540:  MOVLW  06
07542:  MOVWF  FF7
07544:  MOVLB  0
07546:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
0754A:  MOVLW  09
0754C:  MOVWF  FEA
0754E:  MOVLW  8B
07550:  MOVWF  FE9
07552:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
07556:  MOVLW  22
07558:  MOVLB  C
0755A:  MOVWF  x25
0755C:  MOVLB  0
0755E:  CALL   2E6E
....................                putc('\n',CH2);
07562:  MOVLW  0A
07564:  MOVLB  C
07566:  MOVWF  x25
07568:  MOVLB  0
0756A:  CALL   2E6E
....................                delay_ms(50);
0756E:  MOVLW  32
07570:  MOVLB  C
07572:  MOVWF  x24
07574:  MOVLB  0
07576:  CALL   0936
....................               
....................               fprintf(CH2,SMS_Massage5);
0757A:  MOVLW  0A
0757C:  MOVWF  FEA
0757E:  MOVLW  1A
07580:  MOVWF  FE9
07582:  CALL   6226
....................               putc('\n',CH2);
07586:  MOVLW  0A
07588:  MOVLB  C
0758A:  MOVWF  x25
0758C:  MOVLB  0
0758E:  CALL   2E6E
....................              putc(26,CH2);
07592:  MOVLW  1A
07594:  MOVLB  C
07596:  MOVWF  x25
07598:  MOVLB  0
0759A:  CALL   2E6E
0759E:  MOVLB  B
....................             }
....................       }
075A0:  BRA    75AE
075A2:  MOVLB  C
....................       else
....................       {
....................          Output.B5 = 1;
075A4:  MOVLB  B
075A6:  BSF    x9C.4
....................          Output.B5 = 1;
075A8:  BSF    x9C.4
....................          SendSMS.B5 =0;
075AA:  BCF    xB6.4
....................          functointest_f =0;
075AC:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
075AE:  BTFSS  xA6.5
075B0:  BRA    76C8
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
075B2:  MOVLW  00
075B4:  BTFSC  x9A.5
075B6:  MOVLW  01
075B8:  MOVLB  C
075BA:  MOVWF  x24
075BC:  MOVLW  00
075BE:  MOVLB  B
075C0:  BTFSC  x9E.5
075C2:  MOVLW  01
075C4:  MOVLB  C
075C6:  XORWF  x24,W
075C8:  SUBLW  01
075CA:  BNZ   75D2
075CC:  MOVLB  B
075CE:  BTFSC  xA0.5
075D0:  BRA    75D8
075D2:  MOVLB  B
075D4:  BTFSS  xAA.5
075D6:  BRA    76C0
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
075D8:  BTFSC  xA8.5
075DA:  BRA    76BE
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
075DC:  BTFSC  xAA.5
075DE:  BRA    75F8
075E0:  MOVLB  0
075E2:  MOVF   x6A,W
075E4:  SUBLW  0F
075E6:  BTFSC  FD8.2
075E8:  BRA    75EE
075EA:  MOVLB  B
075EC:  BRA    75F8
....................             {
....................                TimeBase1s = 100 ;            //reload again
075EE:  MOVLW  64
075F0:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
075F2:  MOVFF  6B,1D
075F6:  MOVLB  B
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
075F8:  BSF    xAA.5
....................             if(FlashingFlag == 0)
075FA:  BTFSC  1A.1
075FC:  BRA    7602
....................             {
....................                Output.B6 = 0;           //Flash output1
075FE:  BCF    x9C.5
....................             }
07600:  BRA    7604
....................             else
....................             {
....................                Output.B6 = 1;
07602:  BSF    x9C.5
....................             }
.................... 
....................             if (~AutoTestFlag)
07604:  BTFSC  1A.4
07606:  BRA    7624
....................             {
....................                if(OutputBoth.B6 == 0)                  //Both output
07608:  BTFSC  xA4.5
0760A:  BRA    7616
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0760C:  BSF    F89.4
0760E:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07610:  BSF    F89.3
07612:  BCF    F92.3
....................                }
07614:  BRA    7624
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
07616:  BTFSS  xA2.5
07618:  BRA    7620
0761A:  BSF    F89.4
0761C:  BCF    F92.4
0761E:  BRA    7624
....................                   else output_bit(Pbell,1);                          //Bell
07620:  BSF    F89.3
07622:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
07624:  BTFSC  xB6.5
07626:  BRA    76BE
07628:  BTFSC  30.3
0762A:  BRA    76BE
0762C:  BTFSC  xA8.5
0762E:  BRA    76BE
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07630:  MOVLW  D4
07632:  MOVWF  FF6
07634:  MOVLW  06
07636:  MOVWF  FF7
07638:  MOVLB  0
0763A:  CALL   2EB4
....................                putc('\n',CH2);
0763E:  MOVLW  0A
07640:  MOVLB  C
07642:  MOVWF  x25
07644:  MOVLB  0
07646:  CALL   2E6E
....................                delay_ms(10);
0764A:  MOVLW  0A
0764C:  MOVLB  C
0764E:  MOVWF  x24
07650:  MOVLB  0
07652:  CALL   0936
....................                
....................                SendSMS.B6 =1;
07656:  MOVLB  B
07658:  BSF    xB6.5
....................                fprintf(CH2,"AT+CMGS=\"");
0765A:  MOVLW  DE
0765C:  MOVWF  FF6
0765E:  MOVLW  06
07660:  MOVWF  FF7
07662:  MOVLB  0
07664:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
07668:  MOVLW  09
0766A:  MOVWF  FEA
0766C:  MOVLW  8B
0766E:  MOVWF  FE9
07670:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
07674:  MOVLW  22
07676:  MOVLB  C
07678:  MOVWF  x25
0767A:  MOVLB  0
0767C:  CALL   2E6E
....................                putc('\n',CH2);
07680:  MOVLW  0A
07682:  MOVLB  C
07684:  MOVWF  x25
07686:  MOVLB  0
07688:  CALL   2E6E
....................                delay_ms(50);
0768C:  MOVLW  32
0768E:  MOVLB  C
07690:  MOVWF  x24
07692:  MOVLB  0
07694:  CALL   0936
....................               
....................               fprintf(CH2,SMS_Massage6);
07698:  MOVLW  0A
0769A:  MOVWF  FEA
0769C:  MOVLW  3A
0769E:  MOVWF  FE9
076A0:  CALL   6226
....................               putc('\n',CH2);
076A4:  MOVLW  0A
076A6:  MOVLB  C
076A8:  MOVWF  x25
076AA:  MOVLB  0
076AC:  CALL   2E6E
....................              putc(26,CH2);
076B0:  MOVLW  1A
076B2:  MOVLB  C
076B4:  MOVWF  x25
076B6:  MOVLB  0
076B8:  CALL   2E6E
076BC:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
076BE:  BRA    76C6
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
076C0:  BTFSS  xA0.5
076C2:  BRA    76C6
076C4:  BCF    xA8.5
....................    }
076C6:  BRA    778C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
076C8:  MOVLW  00
076CA:  BTFSC  x9A.5
076CC:  MOVLW  01
076CE:  MOVLB  C
076D0:  MOVWF  x24
076D2:  MOVLW  00
076D4:  MOVLB  B
076D6:  BTFSC  x9E.5
076D8:  MOVLW  01
076DA:  MOVLB  C
076DC:  XORWF  x24,W
076DE:  SUBLW  01
076E0:  BNZ   7784
....................       {
....................          Output.B6 = 0;
076E2:  MOVLB  B
076E4:  BCF    x9C.5
....................          // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
076E6:  BTFSC  xB6.5
076E8:  BRA    7780
076EA:  BTFSC  30.3
076EC:  BRA    7780
076EE:  BTFSC  xA8.5
076F0:  BRA    7780
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
076F2:  MOVLW  E8
076F4:  MOVWF  FF6
076F6:  MOVLW  06
076F8:  MOVWF  FF7
076FA:  MOVLB  0
076FC:  CALL   2EB4
....................                putc('\n',CH2);
07700:  MOVLW  0A
07702:  MOVLB  C
07704:  MOVWF  x25
07706:  MOVLB  0
07708:  CALL   2E6E
....................                delay_ms(10);
0770C:  MOVLW  0A
0770E:  MOVLB  C
07710:  MOVWF  x24
07712:  MOVLB  0
07714:  CALL   0936
....................                
....................                SendSMS.B6 =1;
07718:  MOVLB  B
0771A:  BSF    xB6.5
....................                fprintf(CH2,"AT+CMGS=\"");
0771C:  MOVLW  F2
0771E:  MOVWF  FF6
07720:  MOVLW  06
07722:  MOVWF  FF7
07724:  MOVLB  0
07726:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
0772A:  MOVLW  09
0772C:  MOVWF  FEA
0772E:  MOVLW  8B
07730:  MOVWF  FE9
07732:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
07736:  MOVLW  22
07738:  MOVLB  C
0773A:  MOVWF  x25
0773C:  MOVLB  0
0773E:  CALL   2E6E
....................                putc('\n',CH2);
07742:  MOVLW  0A
07744:  MOVLB  C
07746:  MOVWF  x25
07748:  MOVLB  0
0774A:  CALL   2E6E
....................                delay_ms(50);
0774E:  MOVLW  32
07750:  MOVLB  C
07752:  MOVWF  x24
07754:  MOVLB  0
07756:  CALL   0936
....................               
....................               fprintf(CH2,SMS_Massage6);
0775A:  MOVLW  0A
0775C:  MOVWF  FEA
0775E:  MOVLW  3A
07760:  MOVWF  FE9
07762:  CALL   6226
....................               putc('\n',CH2);
07766:  MOVLW  0A
07768:  MOVLB  C
0776A:  MOVWF  x25
0776C:  MOVLB  0
0776E:  CALL   2E6E
....................              putc(26,CH2);
07772:  MOVLW  1A
07774:  MOVLB  C
07776:  MOVWF  x25
07778:  MOVLB  0
0777A:  CALL   2E6E
0777E:  MOVLB  B
....................             }
....................       }
07780:  BRA    778C
07782:  MOVLB  C
....................       else
....................       {
....................          Output.B6 = 1;
07784:  MOVLB  B
07786:  BSF    x9C.5
....................          SendSMS.B6 =0;
07788:  BCF    xB6.5
....................          functointest_f =0;
0778A:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
0778C:  BTFSS  xA6.6
0778E:  BRA    78A6
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
07790:  MOVLW  00
07792:  BTFSC  x9A.6
07794:  MOVLW  01
07796:  MOVLB  C
07798:  MOVWF  x24
0779A:  MOVLW  00
0779C:  MOVLB  B
0779E:  BTFSC  x9E.6
077A0:  MOVLW  01
077A2:  MOVLB  C
077A4:  XORWF  x24,W
077A6:  SUBLW  01
077A8:  BNZ   77B0
077AA:  MOVLB  B
077AC:  BTFSC  xA0.6
077AE:  BRA    77B6
077B0:  MOVLB  B
077B2:  BTFSS  xAA.6
077B4:  BRA    789E
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
077B6:  BTFSC  xA8.6
077B8:  BRA    789C
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
077BA:  BTFSC  xAA.6
077BC:  BRA    77D6
077BE:  MOVLB  0
077C0:  MOVF   x6A,W
077C2:  SUBLW  0F
077C4:  BTFSC  FD8.2
077C6:  BRA    77CC
077C8:  MOVLB  B
077CA:  BRA    77D6
....................             {
....................                TimeBase1s = 100 ;            //reload again
077CC:  MOVLW  64
077CE:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
077D0:  MOVFF  6B,1D
077D4:  MOVLB  B
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
077D6:  BSF    xAA.6
....................             if(FlashingFlag == 0)
077D8:  BTFSC  1A.1
077DA:  BRA    77E0
....................             {
....................                Output.B7 = 0;           //Flash output1
077DC:  BCF    x9C.6
....................             }
077DE:  BRA    77E2
....................             else
....................             {
....................                Output.B7 = 1;
077E0:  BSF    x9C.6
....................             }
.................... 
....................             if (~AutoTestFlag)
077E2:  BTFSC  1A.4
077E4:  BRA    7802
....................             {
....................                if(OutputBoth.B7 == 0)                  //Both output
077E6:  BTFSC  xA4.6
077E8:  BRA    77F4
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
077EA:  BSF    F89.4
077EC:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
077EE:  BSF    F89.3
077F0:  BCF    F92.3
....................                }
077F2:  BRA    7802
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
077F4:  BTFSS  xA2.6
077F6:  BRA    77FE
077F8:  BSF    F89.4
077FA:  BCF    F92.4
077FC:  BRA    7802
....................                   else output_bit(Pbell,1);                          //Bell
077FE:  BSF    F89.3
07800:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
07802:  BTFSC  xB6.6
07804:  BRA    789C
07806:  BTFSC  30.3
07808:  BRA    789C
0780A:  BTFSC  xA8.6
0780C:  BRA    789C
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0780E:  MOVLW  FC
07810:  MOVWF  FF6
07812:  MOVLW  06
07814:  MOVWF  FF7
07816:  MOVLB  0
07818:  CALL   2EB4
....................                putc('\n',CH2);
0781C:  MOVLW  0A
0781E:  MOVLB  C
07820:  MOVWF  x25
07822:  MOVLB  0
07824:  CALL   2E6E
....................                delay_ms(10);
07828:  MOVLW  0A
0782A:  MOVLB  C
0782C:  MOVWF  x24
0782E:  MOVLB  0
07830:  CALL   0936
....................                
....................                SendSMS.B7 =1;
07834:  MOVLB  B
07836:  BSF    xB6.6
....................                fprintf(CH2,"AT+CMGS=\"");
07838:  MOVLW  06
0783A:  MOVWF  FF6
0783C:  MOVLW  07
0783E:  MOVWF  FF7
07840:  MOVLB  0
07842:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
07846:  MOVLW  09
07848:  MOVWF  FEA
0784A:  MOVLW  8B
0784C:  MOVWF  FE9
0784E:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
07852:  MOVLW  22
07854:  MOVLB  C
07856:  MOVWF  x25
07858:  MOVLB  0
0785A:  CALL   2E6E
....................                putc('\n',CH2);
0785E:  MOVLW  0A
07860:  MOVLB  C
07862:  MOVWF  x25
07864:  MOVLB  0
07866:  CALL   2E6E
....................                delay_ms(50);
0786A:  MOVLW  32
0786C:  MOVLB  C
0786E:  MOVWF  x24
07870:  MOVLB  0
07872:  CALL   0936
....................               
....................               fprintf(CH2,SMS_Massage7);  
07876:  MOVLW  0A
07878:  MOVWF  FEA
0787A:  MOVLW  5A
0787C:  MOVWF  FE9
0787E:  CALL   6226
....................               putc('\n',CH2);
07882:  MOVLW  0A
07884:  MOVLB  C
07886:  MOVWF  x25
07888:  MOVLB  0
0788A:  CALL   2E6E
....................              putc(26,CH2);
0788E:  MOVLW  1A
07890:  MOVLB  C
07892:  MOVWF  x25
07894:  MOVLB  0
07896:  CALL   2E6E
0789A:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
0789C:  BRA    78A4
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
0789E:  BTFSS  xA0.6
078A0:  BRA    78A4
078A2:  BCF    xA8.6
....................    }
078A4:  BRA    796A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
078A6:  MOVLW  00
078A8:  BTFSC  x9A.6
078AA:  MOVLW  01
078AC:  MOVLB  C
078AE:  MOVWF  x24
078B0:  MOVLW  00
078B2:  MOVLB  B
078B4:  BTFSC  x9E.6
078B6:  MOVLW  01
078B8:  MOVLB  C
078BA:  XORWF  x24,W
078BC:  SUBLW  01
078BE:  BNZ   7962
....................       {
....................          Output.B7 = 0;
078C0:  MOVLB  B
078C2:  BCF    x9C.6
....................          // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
078C4:  BTFSC  xB6.6
078C6:  BRA    795E
078C8:  BTFSC  30.3
078CA:  BRA    795E
078CC:  BTFSC  xA8.6
078CE:  BRA    795E
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
078D0:  MOVLW  10
078D2:  MOVWF  FF6
078D4:  MOVLW  07
078D6:  MOVWF  FF7
078D8:  MOVLB  0
078DA:  CALL   2EB4
....................                putc('\n',CH2);
078DE:  MOVLW  0A
078E0:  MOVLB  C
078E2:  MOVWF  x25
078E4:  MOVLB  0
078E6:  CALL   2E6E
....................                delay_ms(10);
078EA:  MOVLW  0A
078EC:  MOVLB  C
078EE:  MOVWF  x24
078F0:  MOVLB  0
078F2:  CALL   0936
....................                
....................                SendSMS.B7 =1;
078F6:  MOVLB  B
078F8:  BSF    xB6.6
....................                fprintf(CH2,"AT+CMGS=\"");
078FA:  MOVLW  1A
078FC:  MOVWF  FF6
078FE:  MOVLW  07
07900:  MOVWF  FF7
07902:  MOVLB  0
07904:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
07908:  MOVLW  09
0790A:  MOVWF  FEA
0790C:  MOVLW  8B
0790E:  MOVWF  FE9
07910:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
07914:  MOVLW  22
07916:  MOVLB  C
07918:  MOVWF  x25
0791A:  MOVLB  0
0791C:  CALL   2E6E
....................                putc('\n',CH2);
07920:  MOVLW  0A
07922:  MOVLB  C
07924:  MOVWF  x25
07926:  MOVLB  0
07928:  CALL   2E6E
....................                delay_ms(50);
0792C:  MOVLW  32
0792E:  MOVLB  C
07930:  MOVWF  x24
07932:  MOVLB  0
07934:  CALL   0936
....................               
....................               fprintf(CH2,SMS_Massage7);  
07938:  MOVLW  0A
0793A:  MOVWF  FEA
0793C:  MOVLW  5A
0793E:  MOVWF  FE9
07940:  CALL   6226
....................               putc('\n',CH2);
07944:  MOVLW  0A
07946:  MOVLB  C
07948:  MOVWF  x25
0794A:  MOVLB  0
0794C:  CALL   2E6E
....................              putc(26,CH2);
07950:  MOVLW  1A
07952:  MOVLB  C
07954:  MOVWF  x25
07956:  MOVLB  0
07958:  CALL   2E6E
0795C:  MOVLB  B
....................             }
....................       }
0795E:  BRA    796A
07960:  MOVLB  C
....................       else
....................       {
....................          Output.B7 = 1;
07962:  MOVLB  B
07964:  BSF    x9C.6
....................          SendSMS.B7 =0;
07966:  BCF    xB6.6
....................          functointest_f =0;
07968:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
0796A:  BTFSS  xA6.7
0796C:  BRA    7A84
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
0796E:  MOVLW  00
07970:  BTFSC  x9A.7
07972:  MOVLW  01
07974:  MOVLB  C
07976:  MOVWF  x24
07978:  MOVLW  00
0797A:  MOVLB  B
0797C:  BTFSC  x9E.7
0797E:  MOVLW  01
07980:  MOVLB  C
07982:  XORWF  x24,W
07984:  SUBLW  01
07986:  BNZ   798E
07988:  MOVLB  B
0798A:  BTFSC  xA0.7
0798C:  BRA    7994
0798E:  MOVLB  B
07990:  BTFSS  xAA.7
07992:  BRA    7A7C
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
07994:  BTFSC  xA8.7
07996:  BRA    7A7A
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07998:  BTFSC  xAA.7
0799A:  BRA    79B4
0799C:  MOVLB  0
0799E:  MOVF   x6A,W
079A0:  SUBLW  0F
079A2:  BTFSC  FD8.2
079A4:  BRA    79AA
079A6:  MOVLB  B
079A8:  BRA    79B4
....................             {
....................                TimeBase1s = 100 ;            //reload again
079AA:  MOVLW  64
079AC:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
079AE:  MOVFF  6B,1D
079B2:  MOVLB  B
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
079B4:  BSF    xAA.7
....................             if(FlashingFlag == 0)
079B6:  BTFSC  1A.1
079B8:  BRA    79BE
....................             {
....................                Output.B8 = 0;           //Flash output1
079BA:  BCF    x9C.7
....................             }
079BC:  BRA    79C0
....................             else
....................             {
....................                Output.B8 = 1;
079BE:  BSF    x9C.7
....................             }
.................... 
....................             if (~AutoTestFlag)
079C0:  BTFSC  1A.4
079C2:  BRA    79E0
....................             {
....................                if(OutputBoth.B8 == 0)                  //Both output
079C4:  BTFSC  xA4.7
079C6:  BRA    79D2
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
079C8:  BSF    F89.4
079CA:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
079CC:  BSF    F89.3
079CE:  BCF    F92.3
....................                }
079D0:  BRA    79E0
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
079D2:  BTFSS  xA2.7
079D4:  BRA    79DC
079D6:  BSF    F89.4
079D8:  BCF    F92.4
079DA:  BRA    79E0
....................                   else output_bit(Pbell,1);                          //Bell
079DC:  BSF    F89.3
079DE:  BCF    F92.3
....................                }
....................             }
....................                // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
079E0:  BTFSC  xB6.7
079E2:  BRA    7A7A
079E4:  BTFSC  30.3
079E6:  BRA    7A7A
079E8:  BTFSC  xA8.7
079EA:  BRA    7A7A
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
079EC:  MOVLW  24
079EE:  MOVWF  FF6
079F0:  MOVLW  07
079F2:  MOVWF  FF7
079F4:  MOVLB  0
079F6:  CALL   2EB4
....................             putc('\n',CH2);
079FA:  MOVLW  0A
079FC:  MOVLB  C
079FE:  MOVWF  x25
07A00:  MOVLB  0
07A02:  CALL   2E6E
....................             delay_ms(10);
07A06:  MOVLW  0A
07A08:  MOVLB  C
07A0A:  MOVWF  x24
07A0C:  MOVLB  0
07A0E:  CALL   0936
....................             
....................             SendSMS.B8 =1;
07A12:  MOVLB  B
07A14:  BSF    xB6.7
....................             fprintf(CH2,"AT+CMGS=\"");
07A16:  MOVLW  2E
07A18:  MOVWF  FF6
07A1A:  MOVLW  07
07A1C:  MOVWF  FF7
07A1E:  MOVLB  0
07A20:  CALL   2EB4
....................             fprintf(CH2,sms_phonenumber);
07A24:  MOVLW  09
07A26:  MOVWF  FEA
07A28:  MOVLW  8B
07A2A:  MOVWF  FE9
07A2C:  CALL   6226
....................             
....................             fprintf(CH2,"\"");
07A30:  MOVLW  22
07A32:  MOVLB  C
07A34:  MOVWF  x25
07A36:  MOVLB  0
07A38:  CALL   2E6E
....................             putc('\n',CH2);
07A3C:  MOVLW  0A
07A3E:  MOVLB  C
07A40:  MOVWF  x25
07A42:  MOVLB  0
07A44:  CALL   2E6E
....................             delay_ms(50);
07A48:  MOVLW  32
07A4A:  MOVLB  C
07A4C:  MOVWF  x24
07A4E:  MOVLB  0
07A50:  CALL   0936
....................            
....................            printf(SMS_Massage8);  
07A54:  MOVLW  0A
07A56:  MOVWF  FEA
07A58:  MOVLW  7A
07A5A:  MOVWF  FE9
07A5C:  CALL   6226
....................            putc('\n',CH2);
07A60:  MOVLW  0A
07A62:  MOVLB  C
07A64:  MOVWF  x25
07A66:  MOVLB  0
07A68:  CALL   2E6E
....................           putc(26,CH2);
07A6C:  MOVLW  1A
07A6E:  MOVLB  C
07A70:  MOVWF  x25
07A72:  MOVLB  0
07A74:  CALL   2E6E
07A78:  MOVLB  B
....................          }
....................        }
.................... 
....................       }
07A7A:  BRA    7A82
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
07A7C:  BTFSS  xA0.7
07A7E:  BRA    7A82
07A80:  BCF    xA8.7
....................    }
07A82:  BRA    7B48
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
07A84:  MOVLW  00
07A86:  BTFSC  x9A.7
07A88:  MOVLW  01
07A8A:  MOVLB  C
07A8C:  MOVWF  x24
07A8E:  MOVLW  00
07A90:  MOVLB  B
07A92:  BTFSC  x9E.7
07A94:  MOVLW  01
07A96:  MOVLB  C
07A98:  XORWF  x24,W
07A9A:  SUBLW  01
07A9C:  BNZ   7B40
....................       {
....................          Output.B8 = 0;
07A9E:  MOVLB  B
07AA0:  BCF    x9C.7
....................          // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
07AA2:  BTFSC  xB6.7
07AA4:  BRA    7B3C
07AA6:  BTFSC  30.3
07AA8:  BRA    7B3C
07AAA:  BTFSC  xA8.7
07AAC:  BRA    7B3C
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07AAE:  MOVLW  38
07AB0:  MOVWF  FF6
07AB2:  MOVLW  07
07AB4:  MOVWF  FF7
07AB6:  MOVLB  0
07AB8:  CALL   2EB4
....................             putc('\n',CH2);
07ABC:  MOVLW  0A
07ABE:  MOVLB  C
07AC0:  MOVWF  x25
07AC2:  MOVLB  0
07AC4:  CALL   2E6E
....................             delay_ms(10);
07AC8:  MOVLW  0A
07ACA:  MOVLB  C
07ACC:  MOVWF  x24
07ACE:  MOVLB  0
07AD0:  CALL   0936
....................             
....................             SendSMS.B8 =1;
07AD4:  MOVLB  B
07AD6:  BSF    xB6.7
....................             fprintf(CH2,"AT+CMGS=\"");
07AD8:  MOVLW  42
07ADA:  MOVWF  FF6
07ADC:  MOVLW  07
07ADE:  MOVWF  FF7
07AE0:  MOVLB  0
07AE2:  CALL   2EB4
....................             fprintf(CH2,sms_phonenumber);
07AE6:  MOVLW  09
07AE8:  MOVWF  FEA
07AEA:  MOVLW  8B
07AEC:  MOVWF  FE9
07AEE:  CALL   6226
....................             
....................             fprintf(CH2,"\"");
07AF2:  MOVLW  22
07AF4:  MOVLB  C
07AF6:  MOVWF  x25
07AF8:  MOVLB  0
07AFA:  CALL   2E6E
....................             putc('\n',CH2);
07AFE:  MOVLW  0A
07B00:  MOVLB  C
07B02:  MOVWF  x25
07B04:  MOVLB  0
07B06:  CALL   2E6E
....................             delay_ms(50);
07B0A:  MOVLW  32
07B0C:  MOVLB  C
07B0E:  MOVWF  x24
07B10:  MOVLB  0
07B12:  CALL   0936
....................            
....................            printf(SMS_Massage8);  
07B16:  MOVLW  0A
07B18:  MOVWF  FEA
07B1A:  MOVLW  7A
07B1C:  MOVWF  FE9
07B1E:  CALL   6226
....................            putc('\n',CH2);
07B22:  MOVLW  0A
07B24:  MOVLB  C
07B26:  MOVWF  x25
07B28:  MOVLB  0
07B2A:  CALL   2E6E
....................           putc(26,CH2);
07B2E:  MOVLW  1A
07B30:  MOVLB  C
07B32:  MOVWF  x25
07B34:  MOVLB  0
07B36:  CALL   2E6E
07B3A:  MOVLB  B
....................          }
....................       }
07B3C:  BRA    7B48
07B3E:  MOVLB  C
....................       else
....................       {
....................          Output.B8 = 1;
07B40:  MOVLB  B
07B42:  BSF    x9C.7
....................          SendSMS.B8 =0;
07B44:  BCF    xB6.7
....................          functointest_f =0;
07B46:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if(AlarmIndicator.B9 == 1)    // Alarm Function
07B48:  BTFSS  xA7.0
07B4A:  BRA    7C62
....................    {
....................       if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 1))|| In.B9 == 1)    // alarm1 occure and "Lock type"
07B4C:  MOVLW  00
07B4E:  BTFSC  x9B.0
07B50:  MOVLW  01
07B52:  MOVLB  C
07B54:  MOVWF  x24
07B56:  MOVLW  00
07B58:  MOVLB  B
07B5A:  BTFSC  x9F.0
07B5C:  MOVLW  01
07B5E:  MOVLB  C
07B60:  XORWF  x24,W
07B62:  SUBLW  01
07B64:  BNZ   7B6C
07B66:  MOVLB  B
07B68:  BTFSC  xA1.0
07B6A:  BRA    7B72
07B6C:  MOVLB  B
07B6E:  BTFSS  xAB.0
07B70:  BRA    7C5A
....................       //if(Inputt.B9 == 0)
....................       {
....................          if(Ack.B9 == 0)
07B72:  BTFSC  xA9.0
07B74:  BRA    7C58
....................          {
....................             if(In.B9 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07B76:  BTFSC  xAB.0
07B78:  BRA    7B92
07B7A:  MOVLB  0
07B7C:  MOVF   x6A,W
07B7E:  SUBLW  0F
07B80:  BTFSC  FD8.2
07B82:  BRA    7B88
07B84:  MOVLB  B
07B86:  BRA    7B92
....................             {
....................                TimeBase1s = 100 ;            //reload again
07B88:  MOVLW  64
07B8A:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07B8C:  MOVFF  6B,1D
07B90:  MOVLB  B
....................             }
.................... 
....................             In.B9 = 1;                                 // setbit in1
07B92:  BSF    xAB.0
....................             if(FlashingFlag == 0)
07B94:  BTFSC  1A.1
07B96:  BRA    7B9C
....................             {
....................                Output.B9 = 0;           //Flash output1
07B98:  BCF    x9D.0
....................             }
07B9A:  BRA    7B9E
....................             else
....................             {
....................                Output.B9 = 1;
07B9C:  BSF    x9D.0
....................             }
.................... 
....................             if (~AutoTestFlag)
07B9E:  BTFSC  1A.4
07BA0:  BRA    7BBE
....................             {
....................                if(OutputBoth.B9 == 0)                  //Both output
07BA2:  BTFSC  xA5.0
07BA4:  BRA    7BB0
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07BA6:  BSF    F89.4
07BA8:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07BAA:  BSF    F89.3
07BAC:  BCF    F92.3
....................                }
07BAE:  BRA    7BBE
....................                else
....................                {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
07BB0:  BTFSS  xA3.0
07BB2:  BRA    7BBA
07BB4:  BSF    F89.4
07BB6:  BCF    F92.4
07BB8:  BRA    7BBE
....................                   else output_bit(Pbell,1);                          //Bell
07BBA:  BSF    F89.3
07BBC:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
07BBE:  BTFSC  xB7.0
07BC0:  BRA    7C58
07BC2:  BTFSC  30.3
07BC4:  BRA    7C58
07BC6:  BTFSC  xA9.0
07BC8:  BRA    7C58
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07BCA:  MOVLW  4C
07BCC:  MOVWF  FF6
07BCE:  MOVLW  07
07BD0:  MOVWF  FF7
07BD2:  MOVLB  0
07BD4:  CALL   2EB4
....................                putc('\n',CH2);
07BD8:  MOVLW  0A
07BDA:  MOVLB  C
07BDC:  MOVWF  x25
07BDE:  MOVLB  0
07BE0:  CALL   2E6E
....................                delay_ms(10);
07BE4:  MOVLW  0A
07BE6:  MOVLB  C
07BE8:  MOVWF  x24
07BEA:  MOVLB  0
07BEC:  CALL   0936
....................                
....................                SendSMS.B9 =1;
07BF0:  MOVLB  B
07BF2:  BSF    xB7.0
....................                fprintf(CH2,"AT+CMGS=\"");
07BF4:  MOVLW  56
07BF6:  MOVWF  FF6
07BF8:  MOVLW  07
07BFA:  MOVWF  FF7
07BFC:  MOVLB  0
07BFE:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
07C02:  MOVLW  09
07C04:  MOVWF  FEA
07C06:  MOVLW  8B
07C08:  MOVWF  FE9
07C0A:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
07C0E:  MOVLW  22
07C10:  MOVLB  C
07C12:  MOVWF  x25
07C14:  MOVLB  0
07C16:  CALL   2E6E
....................                putc('\n',CH2);
07C1A:  MOVLW  0A
07C1C:  MOVLB  C
07C1E:  MOVWF  x25
07C20:  MOVLB  0
07C22:  CALL   2E6E
....................                delay_ms(50);
07C26:  MOVLW  32
07C28:  MOVLB  C
07C2A:  MOVWF  x24
07C2C:  MOVLB  0
07C2E:  CALL   0936
....................               
....................               printf(SMS_Massage9);  
07C32:  MOVLW  0A
07C34:  MOVWF  FEA
07C36:  MOVLW  9A
07C38:  MOVWF  FE9
07C3A:  CALL   6226
....................               putc('\n',CH2);
07C3E:  MOVLW  0A
07C40:  MOVLB  C
07C42:  MOVWF  x25
07C44:  MOVLB  0
07C46:  CALL   2E6E
....................               putc(26,CH2);
07C4A:  MOVLW  1A
07C4C:  MOVLB  C
07C4E:  MOVWF  x25
07C50:  MOVLB  0
07C52:  CALL   2E6E
07C56:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
07C58:  BRA    7C60
....................       else if(FaultType.B9 == 1) Ack.B9 = 0;
07C5A:  BTFSS  xA1.0
07C5C:  BRA    7C60
07C5E:  BCF    xA9.0
....................    }
07C60:  BRA    7D26
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B9 ^ InputType.B9) == 1)
07C62:  MOVLW  00
07C64:  BTFSC  x9B.0
07C66:  MOVLW  01
07C68:  MOVLB  C
07C6A:  MOVWF  x24
07C6C:  MOVLW  00
07C6E:  MOVLB  B
07C70:  BTFSC  x9F.0
07C72:  MOVLW  01
07C74:  MOVLB  C
07C76:  XORWF  x24,W
07C78:  SUBLW  01
07C7A:  BNZ   7D1E
....................       {
....................          Output.B9 = 0;
07C7C:  MOVLB  B
07C7E:  BCF    x9D.0
....................          // SMS Sending   
....................          if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
07C80:  BTFSC  xB7.0
07C82:  BRA    7D1A
07C84:  BTFSC  30.3
07C86:  BRA    7D1A
07C88:  BTFSC  xA9.0
07C8A:  BRA    7D1A
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07C8C:  MOVLW  60
07C8E:  MOVWF  FF6
07C90:  MOVLW  07
07C92:  MOVWF  FF7
07C94:  MOVLB  0
07C96:  CALL   2EB4
....................             putc('\n',CH2);
07C9A:  MOVLW  0A
07C9C:  MOVLB  C
07C9E:  MOVWF  x25
07CA0:  MOVLB  0
07CA2:  CALL   2E6E
....................             delay_ms(10);
07CA6:  MOVLW  0A
07CA8:  MOVLB  C
07CAA:  MOVWF  x24
07CAC:  MOVLB  0
07CAE:  CALL   0936
....................             
....................             SendSMS.B9 =1;
07CB2:  MOVLB  B
07CB4:  BSF    xB7.0
....................             fprintf(CH2,"AT+CMGS=\"");
07CB6:  MOVLW  6A
07CB8:  MOVWF  FF6
07CBA:  MOVLW  07
07CBC:  MOVWF  FF7
07CBE:  MOVLB  0
07CC0:  CALL   2EB4
....................             fprintf(CH2,sms_phonenumber);
07CC4:  MOVLW  09
07CC6:  MOVWF  FEA
07CC8:  MOVLW  8B
07CCA:  MOVWF  FE9
07CCC:  CALL   6226
....................             
....................             fprintf(CH2,"\"");
07CD0:  MOVLW  22
07CD2:  MOVLB  C
07CD4:  MOVWF  x25
07CD6:  MOVLB  0
07CD8:  CALL   2E6E
....................             putc('\n',CH2);
07CDC:  MOVLW  0A
07CDE:  MOVLB  C
07CE0:  MOVWF  x25
07CE2:  MOVLB  0
07CE4:  CALL   2E6E
....................             delay_ms(50);
07CE8:  MOVLW  32
07CEA:  MOVLB  C
07CEC:  MOVWF  x24
07CEE:  MOVLB  0
07CF0:  CALL   0936
....................            
....................            printf(SMS_Massage9);  
07CF4:  MOVLW  0A
07CF6:  MOVWF  FEA
07CF8:  MOVLW  9A
07CFA:  MOVWF  FE9
07CFC:  CALL   6226
....................            putc('\n',CH2);
07D00:  MOVLW  0A
07D02:  MOVLB  C
07D04:  MOVWF  x25
07D06:  MOVLB  0
07D08:  CALL   2E6E
....................            putc(26,CH2);
07D0C:  MOVLW  1A
07D0E:  MOVLB  C
07D10:  MOVWF  x25
07D12:  MOVLB  0
07D14:  CALL   2E6E
07D18:  MOVLB  B
....................          }
....................       }
07D1A:  BRA    7D26
07D1C:  MOVLB  C
....................       else
....................       {
....................          Output.B9 = 1;
07D1E:  MOVLB  B
07D20:  BSF    x9D.0
....................          SendSMS.B9 =0;
07D22:  BCF    xB7.0
....................          functointest_f =0;
07D24:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if(AlarmIndicator.B10 == 1)    // Alarm Function
07D26:  BTFSS  xA7.1
07D28:  BRA    7E40
....................    {
....................       if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 1))|| In.B10 == 1)    // alarm1 occure and "Lock type"
07D2A:  MOVLW  00
07D2C:  BTFSC  x9B.1
07D2E:  MOVLW  01
07D30:  MOVLB  C
07D32:  MOVWF  x24
07D34:  MOVLW  00
07D36:  MOVLB  B
07D38:  BTFSC  x9F.1
07D3A:  MOVLW  01
07D3C:  MOVLB  C
07D3E:  XORWF  x24,W
07D40:  SUBLW  01
07D42:  BNZ   7D4A
07D44:  MOVLB  B
07D46:  BTFSC  xA1.1
07D48:  BRA    7D50
07D4A:  MOVLB  B
07D4C:  BTFSS  xAB.1
07D4E:  BRA    7E38
....................       //if(Inputt.B10 == 0)
....................       {
....................          if(Ack.B10 == 0)
07D50:  BTFSC  xA9.1
07D52:  BRA    7E36
....................          {
....................             if(In.B10 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07D54:  BTFSC  xAB.1
07D56:  BRA    7D70
07D58:  MOVLB  0
07D5A:  MOVF   x6A,W
07D5C:  SUBLW  0F
07D5E:  BTFSC  FD8.2
07D60:  BRA    7D66
07D62:  MOVLB  B
07D64:  BRA    7D70
....................             {
....................                TimeBase1s = 100 ;            //reload again
07D66:  MOVLW  64
07D68:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07D6A:  MOVFF  6B,1D
07D6E:  MOVLB  B
....................             }
.................... 
....................             In.B10 = 1;                                 // setbit in1
07D70:  BSF    xAB.1
....................             if(FlashingFlag == 0)
07D72:  BTFSC  1A.1
07D74:  BRA    7D7A
....................             {
....................                Output.B10 = 0;           //Flash output1
07D76:  BCF    x9D.1
....................             }
07D78:  BRA    7D7C
....................             else
....................             {
....................                Output.B10 = 1;
07D7A:  BSF    x9D.1
....................             }
.................... 
....................             if (~AutoTestFlag)
07D7C:  BTFSC  1A.4
07D7E:  BRA    7D9C
....................             {
....................                if(OutputBoth.B10 == 0)                  //Both output
07D80:  BTFSC  xA5.1
07D82:  BRA    7D8E
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07D84:  BSF    F89.4
07D86:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07D88:  BSF    F89.3
07D8A:  BCF    F92.3
....................                }
07D8C:  BRA    7D9C
....................                else
....................                {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
07D8E:  BTFSS  xA3.1
07D90:  BRA    7D98
07D92:  BSF    F89.4
07D94:  BCF    F92.4
07D96:  BRA    7D9C
....................                   else output_bit(Pbell,1);                          //Bell
07D98:  BSF    F89.3
07D9A:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
07D9C:  BTFSC  xB7.1
07D9E:  BRA    7E36
07DA0:  BTFSC  30.3
07DA2:  BRA    7E36
07DA4:  BTFSC  xA9.1
07DA6:  BRA    7E36
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07DA8:  MOVLW  74
07DAA:  MOVWF  FF6
07DAC:  MOVLW  07
07DAE:  MOVWF  FF7
07DB0:  MOVLB  0
07DB2:  CALL   2EB4
....................                putc('\n',CH2);
07DB6:  MOVLW  0A
07DB8:  MOVLB  C
07DBA:  MOVWF  x25
07DBC:  MOVLB  0
07DBE:  CALL   2E6E
....................                delay_ms(10);
07DC2:  MOVLW  0A
07DC4:  MOVLB  C
07DC6:  MOVWF  x24
07DC8:  MOVLB  0
07DCA:  CALL   0936
....................                
....................                SendSMS.B10 =1;
07DCE:  MOVLB  B
07DD0:  BSF    xB7.1
....................                fprintf(CH2,"AT+CMGS=\"");
07DD2:  MOVLW  7E
07DD4:  MOVWF  FF6
07DD6:  MOVLW  07
07DD8:  MOVWF  FF7
07DDA:  MOVLB  0
07DDC:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
07DE0:  MOVLW  09
07DE2:  MOVWF  FEA
07DE4:  MOVLW  8B
07DE6:  MOVWF  FE9
07DE8:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
07DEC:  MOVLW  22
07DEE:  MOVLB  C
07DF0:  MOVWF  x25
07DF2:  MOVLB  0
07DF4:  CALL   2E6E
....................                putc('\n',CH2);
07DF8:  MOVLW  0A
07DFA:  MOVLB  C
07DFC:  MOVWF  x25
07DFE:  MOVLB  0
07E00:  CALL   2E6E
....................                delay_ms(50);
07E04:  MOVLW  32
07E06:  MOVLB  C
07E08:  MOVWF  x24
07E0A:  MOVLB  0
07E0C:  CALL   0936
....................               
....................               printf(SMS_Massage10);  
07E10:  MOVLW  0A
07E12:  MOVWF  FEA
07E14:  MOVLW  BA
07E16:  MOVWF  FE9
07E18:  CALL   6226
....................               putc('\n',CH2);
07E1C:  MOVLW  0A
07E1E:  MOVLB  C
07E20:  MOVWF  x25
07E22:  MOVLB  0
07E24:  CALL   2E6E
....................               putc(26,CH2);
07E28:  MOVLW  1A
07E2A:  MOVLB  C
07E2C:  MOVWF  x25
07E2E:  MOVLB  0
07E30:  CALL   2E6E
07E34:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
07E36:  BRA    7E3E
....................       else if(FaultType.B10 == 1) Ack.B10 = 0;
07E38:  BTFSS  xA1.1
07E3A:  BRA    7E3E
07E3C:  BCF    xA9.1
....................    }
07E3E:  BRA    7F04
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B10 ^ InputType.B10) == 1)
07E40:  MOVLW  00
07E42:  BTFSC  x9B.1
07E44:  MOVLW  01
07E46:  MOVLB  C
07E48:  MOVWF  x24
07E4A:  MOVLW  00
07E4C:  MOVLB  B
07E4E:  BTFSC  x9F.1
07E50:  MOVLW  01
07E52:  MOVLB  C
07E54:  XORWF  x24,W
07E56:  SUBLW  01
07E58:  BNZ   7EFC
....................       {
....................          Output.B10 = 0;
07E5A:  MOVLB  B
07E5C:  BCF    x9D.1
....................          // SMS Sending   
....................          if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
07E5E:  BTFSC  xB7.1
07E60:  BRA    7EF8
07E62:  BTFSC  30.3
07E64:  BRA    7EF8
07E66:  BTFSC  xA9.1
07E68:  BRA    7EF8
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07E6A:  MOVLW  88
07E6C:  MOVWF  FF6
07E6E:  MOVLW  07
07E70:  MOVWF  FF7
07E72:  MOVLB  0
07E74:  CALL   2EB4
....................             putc('\n',CH2);
07E78:  MOVLW  0A
07E7A:  MOVLB  C
07E7C:  MOVWF  x25
07E7E:  MOVLB  0
07E80:  CALL   2E6E
....................             delay_ms(10);
07E84:  MOVLW  0A
07E86:  MOVLB  C
07E88:  MOVWF  x24
07E8A:  MOVLB  0
07E8C:  CALL   0936
....................             
....................             SendSMS.B10 =1;
07E90:  MOVLB  B
07E92:  BSF    xB7.1
....................             fprintf(CH2,"AT+CMGS=\"");
07E94:  MOVLW  92
07E96:  MOVWF  FF6
07E98:  MOVLW  07
07E9A:  MOVWF  FF7
07E9C:  MOVLB  0
07E9E:  CALL   2EB4
....................             fprintf(CH2,sms_phonenumber);
07EA2:  MOVLW  09
07EA4:  MOVWF  FEA
07EA6:  MOVLW  8B
07EA8:  MOVWF  FE9
07EAA:  CALL   6226
....................             
....................             fprintf(CH2,"\"");
07EAE:  MOVLW  22
07EB0:  MOVLB  C
07EB2:  MOVWF  x25
07EB4:  MOVLB  0
07EB6:  CALL   2E6E
....................             putc('\n',CH2);
07EBA:  MOVLW  0A
07EBC:  MOVLB  C
07EBE:  MOVWF  x25
07EC0:  MOVLB  0
07EC2:  CALL   2E6E
....................             delay_ms(50);
07EC6:  MOVLW  32
07EC8:  MOVLB  C
07ECA:  MOVWF  x24
07ECC:  MOVLB  0
07ECE:  CALL   0936
....................            
....................            printf(SMS_Massage10);  
07ED2:  MOVLW  0A
07ED4:  MOVWF  FEA
07ED6:  MOVLW  BA
07ED8:  MOVWF  FE9
07EDA:  CALL   6226
....................            putc('\n',CH2);
07EDE:  MOVLW  0A
07EE0:  MOVLB  C
07EE2:  MOVWF  x25
07EE4:  MOVLB  0
07EE6:  CALL   2E6E
....................            putc(26,CH2);
07EEA:  MOVLW  1A
07EEC:  MOVLB  C
07EEE:  MOVWF  x25
07EF0:  MOVLB  0
07EF2:  CALL   2E6E
07EF6:  MOVLB  B
....................          }
....................       }
07EF8:  BRA    7F04
07EFA:  MOVLB  C
....................       else
....................       {
....................          Output.B10 = 1;
07EFC:  MOVLB  B
07EFE:  BSF    x9D.1
....................          SendSMS.B10 =0;
07F00:  BCF    xB7.1
....................          functointest_f =0;
07F02:  BCF    30.3
....................       }
....................    }
.................... //}
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if(AlarmIndicator.B11 == 1)    // Alarm Function
07F04:  BTFSS  xA7.2
07F06:  BRA    801E
....................    {
....................       if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 1))|| In.B11 == 1)    // alarm1 occure and "Lock type"
07F08:  MOVLW  00
07F0A:  BTFSC  x9B.2
07F0C:  MOVLW  01
07F0E:  MOVLB  C
07F10:  MOVWF  x24
07F12:  MOVLW  00
07F14:  MOVLB  B
07F16:  BTFSC  x9F.2
07F18:  MOVLW  01
07F1A:  MOVLB  C
07F1C:  XORWF  x24,W
07F1E:  SUBLW  01
07F20:  BNZ   7F28
07F22:  MOVLB  B
07F24:  BTFSC  xA1.2
07F26:  BRA    7F2E
07F28:  MOVLB  B
07F2A:  BTFSS  xAB.2
07F2C:  BRA    8016
....................       //if(Inputt.B11 == 0)
....................       {
....................          if(Ack.B11 == 0)
07F2E:  BTFSC  xA9.2
07F30:  BRA    8014
....................          {
....................             if(In.B11 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07F32:  BTFSC  xAB.2
07F34:  BRA    7F4E
07F36:  MOVLB  0
07F38:  MOVF   x6A,W
07F3A:  SUBLW  0F
07F3C:  BTFSC  FD8.2
07F3E:  BRA    7F44
07F40:  MOVLB  B
07F42:  BRA    7F4E
....................             {
....................                TimeBase1s = 100 ;            //reload again
07F44:  MOVLW  64
07F46:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07F48:  MOVFF  6B,1D
07F4C:  MOVLB  B
....................             }
.................... 
....................             In.B11 = 1;                                 // setbit in1
07F4E:  BSF    xAB.2
....................             if(FlashingFlag == 0)
07F50:  BTFSC  1A.1
07F52:  BRA    7F58
....................             {
....................                Output.B11 = 0;           //Flash output1
07F54:  BCF    x9D.2
....................             }
07F56:  BRA    7F5A
....................             else
....................             {
....................                Output.B11 = 1;
07F58:  BSF    x9D.2
....................             }
.................... 
....................             if (~AutoTestFlag)
07F5A:  BTFSC  1A.4
07F5C:  BRA    7F7A
....................             {
....................                if(OutputBoth.B11 == 0)                  //Both output
07F5E:  BTFSC  xA5.2
07F60:  BRA    7F6C
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07F62:  BSF    F89.4
07F64:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07F66:  BSF    F89.3
07F68:  BCF    F92.3
....................                }
07F6A:  BRA    7F7A
....................                else
....................                {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,1);     //Buzzer
07F6C:  BTFSS  xA3.2
07F6E:  BRA    7F76
07F70:  BSF    F89.4
07F72:  BCF    F92.4
07F74:  BRA    7F7A
....................                   else output_bit(Pbell,1);                          //Bell
07F76:  BSF    F89.3
07F78:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B11 ==0)&& (functointest_f ==0) && (Ack.B11 ==0))
07F7A:  BTFSC  xB7.2
07F7C:  BRA    8014
07F7E:  BTFSC  30.3
07F80:  BRA    8014
07F82:  BTFSC  xA9.2
07F84:  BRA    8014
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07F86:  MOVLW  9C
07F88:  MOVWF  FF6
07F8A:  MOVLW  07
07F8C:  MOVWF  FF7
07F8E:  MOVLB  0
07F90:  CALL   2EB4
....................                putc('\n',CH2);
07F94:  MOVLW  0A
07F96:  MOVLB  C
07F98:  MOVWF  x25
07F9A:  MOVLB  0
07F9C:  CALL   2E6E
....................                delay_ms(10);
07FA0:  MOVLW  0A
07FA2:  MOVLB  C
07FA4:  MOVWF  x24
07FA6:  MOVLB  0
07FA8:  CALL   0936
....................                
....................                SendSMS.B11 =1;
07FAC:  MOVLB  B
07FAE:  BSF    xB7.2
....................                fprintf(CH2,"AT+CMGS=\"");
07FB0:  MOVLW  A6
07FB2:  MOVWF  FF6
07FB4:  MOVLW  07
07FB6:  MOVWF  FF7
07FB8:  MOVLB  0
07FBA:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
07FBE:  MOVLW  09
07FC0:  MOVWF  FEA
07FC2:  MOVLW  8B
07FC4:  MOVWF  FE9
07FC6:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
07FCA:  MOVLW  22
07FCC:  MOVLB  C
07FCE:  MOVWF  x25
07FD0:  MOVLB  0
07FD2:  CALL   2E6E
....................                putc('\n',CH2);
07FD6:  MOVLW  0A
07FD8:  MOVLB  C
07FDA:  MOVWF  x25
07FDC:  MOVLB  0
07FDE:  CALL   2E6E
....................                delay_ms(50);
07FE2:  MOVLW  32
07FE4:  MOVLB  C
07FE6:  MOVWF  x24
07FE8:  MOVLB  0
07FEA:  CALL   0936
....................               
....................               printf(SMS_Massage11);  
07FEE:  MOVLW  0A
07FF0:  MOVWF  FEA
07FF2:  MOVLW  DA
07FF4:  MOVWF  FE9
07FF6:  CALL   6226
....................               putc('\n',CH2);
07FFA:  MOVLW  0A
07FFC:  MOVLB  C
07FFE:  MOVWF  x25
08000:  MOVLB  0
08002:  CALL   2E6E
....................               putc(26,CH2);
08006:  MOVLW  1A
08008:  MOVLB  C
0800A:  MOVWF  x25
0800C:  MOVLB  0
0800E:  CALL   2E6E
08012:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
08014:  BRA    801C
....................       else if(FaultType.B11 == 1) Ack.B11 = 0;
08016:  BTFSS  xA1.2
08018:  BRA    801C
0801A:  BCF    xA9.2
....................    }
0801C:  BRA    80E2
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B11 ^ InputType.B11) == 1)
0801E:  MOVLW  00
08020:  BTFSC  x9B.2
08022:  MOVLW  01
08024:  MOVLB  C
08026:  MOVWF  x24
08028:  MOVLW  00
0802A:  MOVLB  B
0802C:  BTFSC  x9F.2
0802E:  MOVLW  01
08030:  MOVLB  C
08032:  XORWF  x24,W
08034:  SUBLW  01
08036:  BNZ   80DA
....................       {
....................          Output.B11 = 0;
08038:  MOVLB  B
0803A:  BCF    x9D.2
....................          // SMS Sending   
....................             if((SendSMS.B11 ==0)&& (functointest_f ==0) && (Ack.B11 ==0))
0803C:  BTFSC  xB7.2
0803E:  BRA    80D6
08040:  BTFSC  30.3
08042:  BRA    80D6
08044:  BTFSC  xA9.2
08046:  BRA    80D6
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08048:  MOVLW  B0
0804A:  MOVWF  FF6
0804C:  MOVLW  07
0804E:  MOVWF  FF7
08050:  MOVLB  0
08052:  CALL   2EB4
....................                putc('\n',CH2);
08056:  MOVLW  0A
08058:  MOVLB  C
0805A:  MOVWF  x25
0805C:  MOVLB  0
0805E:  CALL   2E6E
....................                delay_ms(10);
08062:  MOVLW  0A
08064:  MOVLB  C
08066:  MOVWF  x24
08068:  MOVLB  0
0806A:  CALL   0936
....................                
....................                SendSMS.B11 =1;
0806E:  MOVLB  B
08070:  BSF    xB7.2
....................                fprintf(CH2,"AT+CMGS=\"");
08072:  MOVLW  BA
08074:  MOVWF  FF6
08076:  MOVLW  07
08078:  MOVWF  FF7
0807A:  MOVLB  0
0807C:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
08080:  MOVLW  09
08082:  MOVWF  FEA
08084:  MOVLW  8B
08086:  MOVWF  FE9
08088:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
0808C:  MOVLW  22
0808E:  MOVLB  C
08090:  MOVWF  x25
08092:  MOVLB  0
08094:  CALL   2E6E
....................                putc('\n',CH2);
08098:  MOVLW  0A
0809A:  MOVLB  C
0809C:  MOVWF  x25
0809E:  MOVLB  0
080A0:  CALL   2E6E
....................                delay_ms(50);
080A4:  MOVLW  32
080A6:  MOVLB  C
080A8:  MOVWF  x24
080AA:  MOVLB  0
080AC:  CALL   0936
....................               
....................               printf(SMS_Massage11);  
080B0:  MOVLW  0A
080B2:  MOVWF  FEA
080B4:  MOVLW  DA
080B6:  MOVWF  FE9
080B8:  CALL   6226
....................               putc('\n',CH2);
080BC:  MOVLW  0A
080BE:  MOVLB  C
080C0:  MOVWF  x25
080C2:  MOVLB  0
080C4:  CALL   2E6E
....................               putc(26,CH2);
080C8:  MOVLW  1A
080CA:  MOVLB  C
080CC:  MOVWF  x25
080CE:  MOVLB  0
080D0:  CALL   2E6E
080D4:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................       }
080D6:  BRA    80E2
080D8:  MOVLB  C
....................       else
....................       {
....................          Output.B11 = 1;
080DA:  MOVLB  B
080DC:  BSF    x9D.2
....................          SendSMS.B11 =0;
080DE:  BCF    xB7.2
....................          functointest_f =0;
080E0:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if(AlarmIndicator.B12 == 1)    // Alarm Function
080E2:  BTFSS  xA7.3
080E4:  BRA    81FC
....................    {
....................       if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 1))|| In.B12 == 1)    // alarm1 occure and "Lock type"
080E6:  MOVLW  00
080E8:  BTFSC  x9B.3
080EA:  MOVLW  01
080EC:  MOVLB  C
080EE:  MOVWF  x24
080F0:  MOVLW  00
080F2:  MOVLB  B
080F4:  BTFSC  x9F.3
080F6:  MOVLW  01
080F8:  MOVLB  C
080FA:  XORWF  x24,W
080FC:  SUBLW  01
080FE:  BNZ   8106
08100:  MOVLB  B
08102:  BTFSC  xA1.3
08104:  BRA    810C
08106:  MOVLB  B
08108:  BTFSS  xAB.3
0810A:  BRA    81F4
....................       //if(Inputt.B12 == 0)
....................       {
....................          if(Ack.B12 == 0)
0810C:  BTFSC  xA9.3
0810E:  BRA    81F2
....................          {
....................             if(In.B12 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08110:  BTFSC  xAB.3
08112:  BRA    812C
08114:  MOVLB  0
08116:  MOVF   x6A,W
08118:  SUBLW  0F
0811A:  BTFSC  FD8.2
0811C:  BRA    8122
0811E:  MOVLB  B
08120:  BRA    812C
....................             {
....................                TimeBase1s = 100 ;            //reload again
08122:  MOVLW  64
08124:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
08126:  MOVFF  6B,1D
0812A:  MOVLB  B
....................             }
.................... 
....................             In.B12 = 1;                                 // setbit in1
0812C:  BSF    xAB.3
....................             if(FlashingFlag == 0)
0812E:  BTFSC  1A.1
08130:  BRA    8136
....................             {
....................                Output.B12 = 0;           //Flash output1
08132:  BCF    x9D.3
....................             }
08134:  BRA    8138
....................             else
....................             {
....................                Output.B12 = 1;
08136:  BSF    x9D.3
....................             }
.................... 
....................             if (~AutoTestFlag)
08138:  BTFSC  1A.4
0813A:  BRA    8158
....................             {
....................                if(OutputBoth.B12 == 0)                  //Both output
0813C:  BTFSC  xA5.3
0813E:  BRA    814A
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
08140:  BSF    F89.4
08142:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08144:  BSF    F89.3
08146:  BCF    F92.3
....................                }
08148:  BRA    8158
....................                else
....................                {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,1);     //Buzzer
0814A:  BTFSS  xA3.3
0814C:  BRA    8154
0814E:  BSF    F89.4
08150:  BCF    F92.4
08152:  BRA    8158
....................                   else output_bit(Pbell,1);                          //Bell
08154:  BSF    F89.3
08156:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B12 ==0)&& (functointest_f ==0) && (Ack.B12 ==0))
08158:  BTFSC  xB7.3
0815A:  BRA    81F2
0815C:  BTFSC  30.3
0815E:  BRA    81F2
08160:  BTFSC  xA9.3
08162:  BRA    81F2
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08164:  MOVLW  C4
08166:  MOVWF  FF6
08168:  MOVLW  07
0816A:  MOVWF  FF7
0816C:  MOVLB  0
0816E:  CALL   2EB4
....................                putc('\n',CH2);
08172:  MOVLW  0A
08174:  MOVLB  C
08176:  MOVWF  x25
08178:  MOVLB  0
0817A:  CALL   2E6E
....................                delay_ms(10);
0817E:  MOVLW  0A
08180:  MOVLB  C
08182:  MOVWF  x24
08184:  MOVLB  0
08186:  CALL   0936
....................                
....................                SendSMS.B12 =1;
0818A:  MOVLB  B
0818C:  BSF    xB7.3
....................                fprintf(CH2,"AT+CMGS=\"");
0818E:  MOVLW  CE
08190:  MOVWF  FF6
08192:  MOVLW  07
08194:  MOVWF  FF7
08196:  MOVLB  0
08198:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
0819C:  MOVLW  09
0819E:  MOVWF  FEA
081A0:  MOVLW  8B
081A2:  MOVWF  FE9
081A4:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
081A8:  MOVLW  22
081AA:  MOVLB  C
081AC:  MOVWF  x25
081AE:  MOVLB  0
081B0:  CALL   2E6E
....................                putc('\n',CH2);
081B4:  MOVLW  0A
081B6:  MOVLB  C
081B8:  MOVWF  x25
081BA:  MOVLB  0
081BC:  CALL   2E6E
....................                delay_ms(50);
081C0:  MOVLW  32
081C2:  MOVLB  C
081C4:  MOVWF  x24
081C6:  MOVLB  0
081C8:  CALL   0936
....................               
....................               printf(SMS_Massage12);  
081CC:  MOVLW  0A
081CE:  MOVWF  FEA
081D0:  MOVLW  FA
081D2:  MOVWF  FE9
081D4:  CALL   6226
....................               putc('\n',CH2);
081D8:  MOVLW  0A
081DA:  MOVLB  C
081DC:  MOVWF  x25
081DE:  MOVLB  0
081E0:  CALL   2E6E
....................               putc(26,CH2);
081E4:  MOVLW  1A
081E6:  MOVLB  C
081E8:  MOVWF  x25
081EA:  MOVLB  0
081EC:  CALL   2E6E
081F0:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................         }
.................... 
....................       }
081F2:  BRA    81FA
....................       else if(FaultType.B12 == 1) Ack.B12 = 0;
081F4:  BTFSS  xA1.3
081F6:  BRA    81FA
081F8:  BCF    xA9.3
....................    }
081FA:  BRA    82C0
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B12 ^ InputType.B12) == 1)
081FC:  MOVLW  00
081FE:  BTFSC  x9B.3
08200:  MOVLW  01
08202:  MOVLB  C
08204:  MOVWF  x24
08206:  MOVLW  00
08208:  MOVLB  B
0820A:  BTFSC  x9F.3
0820C:  MOVLW  01
0820E:  MOVLB  C
08210:  XORWF  x24,W
08212:  SUBLW  01
08214:  BNZ   82B8
....................       {
....................          Output.B12 = 0;
08216:  MOVLB  B
08218:  BCF    x9D.3
....................          // SMS Sending   
....................             if((SendSMS.B12 ==0)&& (functointest_f ==0) && (Ack.B12 ==0))
0821A:  BTFSC  xB7.3
0821C:  BRA    82B4
0821E:  BTFSC  30.3
08220:  BRA    82B4
08222:  BTFSC  xA9.3
08224:  BRA    82B4
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08226:  MOVLW  D8
08228:  MOVWF  FF6
0822A:  MOVLW  07
0822C:  MOVWF  FF7
0822E:  MOVLB  0
08230:  CALL   2EB4
....................                putc('\n',CH2);
08234:  MOVLW  0A
08236:  MOVLB  C
08238:  MOVWF  x25
0823A:  MOVLB  0
0823C:  CALL   2E6E
....................                delay_ms(10);
08240:  MOVLW  0A
08242:  MOVLB  C
08244:  MOVWF  x24
08246:  MOVLB  0
08248:  CALL   0936
....................                
....................                SendSMS.B12 =1;
0824C:  MOVLB  B
0824E:  BSF    xB7.3
....................                fprintf(CH2,"AT+CMGS=\"");
08250:  MOVLW  E2
08252:  MOVWF  FF6
08254:  MOVLW  07
08256:  MOVWF  FF7
08258:  MOVLB  0
0825A:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
0825E:  MOVLW  09
08260:  MOVWF  FEA
08262:  MOVLW  8B
08264:  MOVWF  FE9
08266:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
0826A:  MOVLW  22
0826C:  MOVLB  C
0826E:  MOVWF  x25
08270:  MOVLB  0
08272:  CALL   2E6E
....................                putc('\n',CH2);
08276:  MOVLW  0A
08278:  MOVLB  C
0827A:  MOVWF  x25
0827C:  MOVLB  0
0827E:  CALL   2E6E
....................                delay_ms(50);
08282:  MOVLW  32
08284:  MOVLB  C
08286:  MOVWF  x24
08288:  MOVLB  0
0828A:  CALL   0936
....................               
....................               printf(SMS_Massage12);  
0828E:  MOVLW  0A
08290:  MOVWF  FEA
08292:  MOVLW  FA
08294:  MOVWF  FE9
08296:  CALL   6226
....................               putc('\n',CH2);
0829A:  MOVLW  0A
0829C:  MOVLB  C
0829E:  MOVWF  x25
082A0:  MOVLB  0
082A2:  CALL   2E6E
....................               putc(26,CH2);
082A6:  MOVLW  1A
082A8:  MOVLB  C
082AA:  MOVWF  x25
082AC:  MOVLB  0
082AE:  CALL   2E6E
082B2:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................       }
082B4:  BRA    82C0
082B6:  MOVLB  C
....................       else
....................       {
....................          Output.B12 = 1;
082B8:  MOVLB  B
082BA:  BSF    x9D.3
....................          SendSMS.B12 =0;
082BC:  BCF    xB7.3
....................          functointest_f =0;
082BE:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if(AlarmIndicator.B13 == 1)    // Alarm Function
082C0:  BTFSS  xA7.4
082C2:  BRA    83DA
....................    {
....................       if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 1))|| In.B13 == 1)    // alarm1 occure and "Lock type"
082C4:  MOVLW  00
082C6:  BTFSC  x9B.4
082C8:  MOVLW  01
082CA:  MOVLB  C
082CC:  MOVWF  x24
082CE:  MOVLW  00
082D0:  MOVLB  B
082D2:  BTFSC  x9F.4
082D4:  MOVLW  01
082D6:  MOVLB  C
082D8:  XORWF  x24,W
082DA:  SUBLW  01
082DC:  BNZ   82E4
082DE:  MOVLB  B
082E0:  BTFSC  xA1.4
082E2:  BRA    82EA
082E4:  MOVLB  B
082E6:  BTFSS  xAB.4
082E8:  BRA    83D2
....................       //if(Inputt.B13 == 0)
....................       {
....................          if(Ack.B13 == 0)
082EA:  BTFSC  xA9.4
082EC:  BRA    83D0
....................          {
....................             if(In.B13 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
082EE:  BTFSC  xAB.4
082F0:  BRA    830A
082F2:  MOVLB  0
082F4:  MOVF   x6A,W
082F6:  SUBLW  0F
082F8:  BTFSC  FD8.2
082FA:  BRA    8300
082FC:  MOVLB  B
082FE:  BRA    830A
....................             {
....................                TimeBase1s = 100 ;            //reload again
08300:  MOVLW  64
08302:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
08304:  MOVFF  6B,1D
08308:  MOVLB  B
....................             }
.................... 
....................             In.B13 = 1;                                 // setbit in1
0830A:  BSF    xAB.4
....................             if(FlashingFlag == 0)
0830C:  BTFSC  1A.1
0830E:  BRA    8314
....................             {
....................                Output.B13 = 0;           //Flash output1
08310:  BCF    x9D.4
....................             }
08312:  BRA    8316
....................             else
....................             {
....................                Output.B13 = 1;
08314:  BSF    x9D.4
....................             }
.................... 
....................             if (~AutoTestFlag)
08316:  BTFSC  1A.4
08318:  BRA    8336
....................             {
....................                if(OutputBoth.B13 == 0)                  //Both output
0831A:  BTFSC  xA5.4
0831C:  BRA    8328
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0831E:  BSF    F89.4
08320:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08322:  BSF    F89.3
08324:  BCF    F92.3
....................                }
08326:  BRA    8336
....................                else
....................                {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,1);     //Buzzer
08328:  BTFSS  xA3.4
0832A:  BRA    8332
0832C:  BSF    F89.4
0832E:  BCF    F92.4
08330:  BRA    8336
....................                   else output_bit(Pbell,1);                          //Bell
08332:  BSF    F89.3
08334:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B13 ==0)&& (functointest_f ==0) && (Ack.B13 ==0))
08336:  BTFSC  xB7.4
08338:  BRA    83D0
0833A:  BTFSC  30.3
0833C:  BRA    83D0
0833E:  BTFSC  xA9.4
08340:  BRA    83D0
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08342:  MOVLW  EC
08344:  MOVWF  FF6
08346:  MOVLW  07
08348:  MOVWF  FF7
0834A:  MOVLB  0
0834C:  CALL   2EB4
....................                putc('\n',CH2);
08350:  MOVLW  0A
08352:  MOVLB  C
08354:  MOVWF  x25
08356:  MOVLB  0
08358:  CALL   2E6E
....................                delay_ms(10);
0835C:  MOVLW  0A
0835E:  MOVLB  C
08360:  MOVWF  x24
08362:  MOVLB  0
08364:  CALL   0936
....................                
....................                SendSMS.B13 =1;
08368:  MOVLB  B
0836A:  BSF    xB7.4
....................                fprintf(CH2,"AT+CMGS=\"");
0836C:  MOVLW  F6
0836E:  MOVWF  FF6
08370:  MOVLW  07
08372:  MOVWF  FF7
08374:  MOVLB  0
08376:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
0837A:  MOVLW  09
0837C:  MOVWF  FEA
0837E:  MOVLW  8B
08380:  MOVWF  FE9
08382:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
08386:  MOVLW  22
08388:  MOVLB  C
0838A:  MOVWF  x25
0838C:  MOVLB  0
0838E:  CALL   2E6E
....................                putc('\n',CH2);
08392:  MOVLW  0A
08394:  MOVLB  C
08396:  MOVWF  x25
08398:  MOVLB  0
0839A:  CALL   2E6E
....................                delay_ms(50);
0839E:  MOVLW  32
083A0:  MOVLB  C
083A2:  MOVWF  x24
083A4:  MOVLB  0
083A6:  CALL   0936
....................               
....................               printf(SMS_Massage13);  
083AA:  MOVLW  0B
083AC:  MOVWF  FEA
083AE:  MOVLW  1A
083B0:  MOVWF  FE9
083B2:  CALL   6226
....................               putc('\n',CH2);
083B6:  MOVLW  0A
083B8:  MOVLB  C
083BA:  MOVWF  x25
083BC:  MOVLB  0
083BE:  CALL   2E6E
....................               putc(26,CH2);
083C2:  MOVLW  1A
083C4:  MOVLB  C
083C6:  MOVWF  x25
083C8:  MOVLB  0
083CA:  CALL   2E6E
083CE:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
083D0:  BRA    83D8
....................       else if(FaultType.B13 == 1) Ack.B13 = 0;
083D2:  BTFSS  xA1.4
083D4:  BRA    83D8
083D6:  BCF    xA9.4
....................    }
083D8:  BRA    849E
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B13 ^ InputType.B13) == 1)
083DA:  MOVLW  00
083DC:  BTFSC  x9B.4
083DE:  MOVLW  01
083E0:  MOVLB  C
083E2:  MOVWF  x24
083E4:  MOVLW  00
083E6:  MOVLB  B
083E8:  BTFSC  x9F.4
083EA:  MOVLW  01
083EC:  MOVLB  C
083EE:  XORWF  x24,W
083F0:  SUBLW  01
083F2:  BNZ   8496
....................       {
....................          Output.B13 = 0;
083F4:  MOVLB  B
083F6:  BCF    x9D.4
....................          // SMS Sending   
....................             if((SendSMS.B13 ==0)&& (functointest_f ==0) && (Ack.B13 ==0))
083F8:  BTFSC  xB7.4
083FA:  BRA    8492
083FC:  BTFSC  30.3
083FE:  BRA    8492
08400:  BTFSC  xA9.4
08402:  BRA    8492
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08404:  MOVLW  00
08406:  MOVWF  FF6
08408:  MOVLW  08
0840A:  MOVWF  FF7
0840C:  MOVLB  0
0840E:  CALL   2EB4
....................                putc('\n',CH2);
08412:  MOVLW  0A
08414:  MOVLB  C
08416:  MOVWF  x25
08418:  MOVLB  0
0841A:  CALL   2E6E
....................                delay_ms(10);
0841E:  MOVLW  0A
08420:  MOVLB  C
08422:  MOVWF  x24
08424:  MOVLB  0
08426:  CALL   0936
....................                
....................                SendSMS.B13 =1;
0842A:  MOVLB  B
0842C:  BSF    xB7.4
....................                fprintf(CH2,"AT+CMGS=\"");
0842E:  MOVLW  0A
08430:  MOVWF  FF6
08432:  MOVLW  08
08434:  MOVWF  FF7
08436:  MOVLB  0
08438:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
0843C:  MOVLW  09
0843E:  MOVWF  FEA
08440:  MOVLW  8B
08442:  MOVWF  FE9
08444:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
08448:  MOVLW  22
0844A:  MOVLB  C
0844C:  MOVWF  x25
0844E:  MOVLB  0
08450:  CALL   2E6E
....................                putc('\n',CH2);
08454:  MOVLW  0A
08456:  MOVLB  C
08458:  MOVWF  x25
0845A:  MOVLB  0
0845C:  CALL   2E6E
....................                delay_ms(50);
08460:  MOVLW  32
08462:  MOVLB  C
08464:  MOVWF  x24
08466:  MOVLB  0
08468:  CALL   0936
....................               
....................               printf(SMS_Massage13);  
0846C:  MOVLW  0B
0846E:  MOVWF  FEA
08470:  MOVLW  1A
08472:  MOVWF  FE9
08474:  CALL   6226
....................               putc('\n',CH2);
08478:  MOVLW  0A
0847A:  MOVLB  C
0847C:  MOVWF  x25
0847E:  MOVLB  0
08480:  CALL   2E6E
....................               putc(26,CH2);
08484:  MOVLW  1A
08486:  MOVLB  C
08488:  MOVWF  x25
0848A:  MOVLB  0
0848C:  CALL   2E6E
08490:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................       }
08492:  BRA    849E
08494:  MOVLB  C
....................       else
....................       {
....................          Output.B13 = 1;
08496:  MOVLB  B
08498:  BSF    x9D.4
....................          SendSMS.B13 =0;
0849A:  BCF    xB7.4
....................          functointest_f =0;
0849C:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if(AlarmIndicator.B14 == 1)    // Alarm Function
0849E:  BTFSS  xA7.5
084A0:  BRA    85B8
....................    {
....................       if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 1))|| In.B14 == 1)    // alarm1 occure and "Lock type"
084A2:  MOVLW  00
084A4:  BTFSC  x9B.5
084A6:  MOVLW  01
084A8:  MOVLB  C
084AA:  MOVWF  x24
084AC:  MOVLW  00
084AE:  MOVLB  B
084B0:  BTFSC  x9F.5
084B2:  MOVLW  01
084B4:  MOVLB  C
084B6:  XORWF  x24,W
084B8:  SUBLW  01
084BA:  BNZ   84C2
084BC:  MOVLB  B
084BE:  BTFSC  xA1.5
084C0:  BRA    84C8
084C2:  MOVLB  B
084C4:  BTFSS  xAB.5
084C6:  BRA    85B0
....................       //if(Inputt.B14 == 0)
....................       {
....................          if(Ack.B14 == 0)
084C8:  BTFSC  xA9.5
084CA:  BRA    85AE
....................          {
....................             if(In.B14 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
084CC:  BTFSC  xAB.5
084CE:  BRA    84E8
084D0:  MOVLB  0
084D2:  MOVF   x6A,W
084D4:  SUBLW  0F
084D6:  BTFSC  FD8.2
084D8:  BRA    84DE
084DA:  MOVLB  B
084DC:  BRA    84E8
....................             {
....................                TimeBase1s = 100 ;            //reload again
084DE:  MOVLW  64
084E0:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
084E2:  MOVFF  6B,1D
084E6:  MOVLB  B
....................             }
.................... 
....................             In.B14 = 1;                                 // setbit in1
084E8:  BSF    xAB.5
....................             if(FlashingFlag == 0)
084EA:  BTFSC  1A.1
084EC:  BRA    84F2
....................             {
....................                Output.B14 = 0;           //Flash output1
084EE:  BCF    x9D.5
....................             }
084F0:  BRA    84F4
....................             else
....................             {
....................                Output.B14 = 1;
084F2:  BSF    x9D.5
....................             }
.................... 
....................             if (~AutoTestFlag)
084F4:  BTFSC  1A.4
084F6:  BRA    8514
....................             {
....................                if(OutputBoth.B14 == 0)                  //Both output
084F8:  BTFSC  xA5.5
084FA:  BRA    8506
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
084FC:  BSF    F89.4
084FE:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08500:  BSF    F89.3
08502:  BCF    F92.3
....................                }
08504:  BRA    8514
....................                else
....................                {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,1);     //Buzzer
08506:  BTFSS  xA3.5
08508:  BRA    8510
0850A:  BSF    F89.4
0850C:  BCF    F92.4
0850E:  BRA    8514
....................                   else output_bit(Pbell,1);                          //Bell
08510:  BSF    F89.3
08512:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B14 ==0)&& (functointest_f ==0) && (Ack.B14 ==0))
08514:  BTFSC  xB7.5
08516:  BRA    85AE
08518:  BTFSC  30.3
0851A:  BRA    85AE
0851C:  BTFSC  xA9.5
0851E:  BRA    85AE
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08520:  MOVLW  14
08522:  MOVWF  FF6
08524:  MOVLW  08
08526:  MOVWF  FF7
08528:  MOVLB  0
0852A:  CALL   2EB4
....................                putc('\n',CH2);
0852E:  MOVLW  0A
08530:  MOVLB  C
08532:  MOVWF  x25
08534:  MOVLB  0
08536:  CALL   2E6E
....................                delay_ms(10);
0853A:  MOVLW  0A
0853C:  MOVLB  C
0853E:  MOVWF  x24
08540:  MOVLB  0
08542:  CALL   0936
....................                
....................                SendSMS.B14 =1;
08546:  MOVLB  B
08548:  BSF    xB7.5
....................                fprintf(CH2,"AT+CMGS=\"");
0854A:  MOVLW  1E
0854C:  MOVWF  FF6
0854E:  MOVLW  08
08550:  MOVWF  FF7
08552:  MOVLB  0
08554:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
08558:  MOVLW  09
0855A:  MOVWF  FEA
0855C:  MOVLW  8B
0855E:  MOVWF  FE9
08560:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
08564:  MOVLW  22
08566:  MOVLB  C
08568:  MOVWF  x25
0856A:  MOVLB  0
0856C:  CALL   2E6E
....................                putc('\n',CH2);
08570:  MOVLW  0A
08572:  MOVLB  C
08574:  MOVWF  x25
08576:  MOVLB  0
08578:  CALL   2E6E
....................                delay_ms(50);
0857C:  MOVLW  32
0857E:  MOVLB  C
08580:  MOVWF  x24
08582:  MOVLB  0
08584:  CALL   0936
....................               
....................               printf(SMS_Massage14);  
08588:  MOVLW  0B
0858A:  MOVWF  FEA
0858C:  MOVLW  3A
0858E:  MOVWF  FE9
08590:  CALL   6226
....................               putc('\n',CH2);
08594:  MOVLW  0A
08596:  MOVLB  C
08598:  MOVWF  x25
0859A:  MOVLB  0
0859C:  CALL   2E6E
....................               putc(26,CH2);
085A0:  MOVLW  1A
085A2:  MOVLB  C
085A4:  MOVWF  x25
085A6:  MOVLB  0
085A8:  CALL   2E6E
085AC:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
085AE:  BRA    85B6
....................       else if(FaultType.B14 == 1) Ack.B14 = 0;
085B0:  BTFSS  xA1.5
085B2:  BRA    85B6
085B4:  BCF    xA9.5
....................    }
085B6:  BRA    867C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B14 ^ InputType.B14) == 1)
085B8:  MOVLW  00
085BA:  BTFSC  x9B.5
085BC:  MOVLW  01
085BE:  MOVLB  C
085C0:  MOVWF  x24
085C2:  MOVLW  00
085C4:  MOVLB  B
085C6:  BTFSC  x9F.5
085C8:  MOVLW  01
085CA:  MOVLB  C
085CC:  XORWF  x24,W
085CE:  SUBLW  01
085D0:  BNZ   8674
....................       {
....................          Output.B14 = 0;
085D2:  MOVLB  B
085D4:  BCF    x9D.5
....................          // SMS Sending   
....................             if((SendSMS.B14 ==0)&& (functointest_f ==0) && (Ack.B14 ==0))
085D6:  BTFSC  xB7.5
085D8:  BRA    8670
085DA:  BTFSC  30.3
085DC:  BRA    8670
085DE:  BTFSC  xA9.5
085E0:  BRA    8670
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
085E2:  MOVLW  28
085E4:  MOVWF  FF6
085E6:  MOVLW  08
085E8:  MOVWF  FF7
085EA:  MOVLB  0
085EC:  CALL   2EB4
....................                putc('\n',CH2);
085F0:  MOVLW  0A
085F2:  MOVLB  C
085F4:  MOVWF  x25
085F6:  MOVLB  0
085F8:  CALL   2E6E
....................                delay_ms(10);
085FC:  MOVLW  0A
085FE:  MOVLB  C
08600:  MOVWF  x24
08602:  MOVLB  0
08604:  CALL   0936
....................                
....................                SendSMS.B14 =1;
08608:  MOVLB  B
0860A:  BSF    xB7.5
....................                fprintf(CH2,"AT+CMGS=\"");
0860C:  MOVLW  32
0860E:  MOVWF  FF6
08610:  MOVLW  08
08612:  MOVWF  FF7
08614:  MOVLB  0
08616:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
0861A:  MOVLW  09
0861C:  MOVWF  FEA
0861E:  MOVLW  8B
08620:  MOVWF  FE9
08622:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
08626:  MOVLW  22
08628:  MOVLB  C
0862A:  MOVWF  x25
0862C:  MOVLB  0
0862E:  CALL   2E6E
....................                putc('\n',CH2);
08632:  MOVLW  0A
08634:  MOVLB  C
08636:  MOVWF  x25
08638:  MOVLB  0
0863A:  CALL   2E6E
....................                delay_ms(50);
0863E:  MOVLW  32
08640:  MOVLB  C
08642:  MOVWF  x24
08644:  MOVLB  0
08646:  CALL   0936
....................               
....................               printf(SMS_Massage14);  
0864A:  MOVLW  0B
0864C:  MOVWF  FEA
0864E:  MOVLW  3A
08650:  MOVWF  FE9
08652:  CALL   6226
....................               putc('\n',CH2);
08656:  MOVLW  0A
08658:  MOVLB  C
0865A:  MOVWF  x25
0865C:  MOVLB  0
0865E:  CALL   2E6E
....................               putc(26,CH2);
08662:  MOVLW  1A
08664:  MOVLB  C
08666:  MOVWF  x25
08668:  MOVLB  0
0866A:  CALL   2E6E
0866E:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................       }
08670:  BRA    867C
08672:  MOVLB  C
....................       else
....................       {
....................          Output.B14 = 1;
08674:  MOVLB  B
08676:  BSF    x9D.5
....................          SendSMS.B14 =0;
08678:  BCF    xB7.5
....................          functointest_f =0;
0867A:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if(AlarmIndicator.B15 == 1)    // Alarm Function
0867C:  BTFSS  xA7.6
0867E:  BRA    8796
....................    {
....................       if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 1))|| In.B15 == 1)    // alarm1 occure and "Lock type"
08680:  MOVLW  00
08682:  BTFSC  x9B.6
08684:  MOVLW  01
08686:  MOVLB  C
08688:  MOVWF  x24
0868A:  MOVLW  00
0868C:  MOVLB  B
0868E:  BTFSC  x9F.6
08690:  MOVLW  01
08692:  MOVLB  C
08694:  XORWF  x24,W
08696:  SUBLW  01
08698:  BNZ   86A0
0869A:  MOVLB  B
0869C:  BTFSC  xA1.6
0869E:  BRA    86A6
086A0:  MOVLB  B
086A2:  BTFSS  xAB.6
086A4:  BRA    878E
....................       //if(Inputt.B15 == 0)
....................       {
....................          if(Ack.B15 == 0)
086A6:  BTFSC  xA9.6
086A8:  BRA    878C
....................          {
....................             if(In.B15 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
086AA:  BTFSC  xAB.6
086AC:  BRA    86C6
086AE:  MOVLB  0
086B0:  MOVF   x6A,W
086B2:  SUBLW  0F
086B4:  BTFSC  FD8.2
086B6:  BRA    86BC
086B8:  MOVLB  B
086BA:  BRA    86C6
....................             {
....................                TimeBase1s = 100 ;            //reload again
086BC:  MOVLW  64
086BE:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
086C0:  MOVFF  6B,1D
086C4:  MOVLB  B
....................             }
.................... 
....................             In.B15 = 1;                                 // setbit in1
086C6:  BSF    xAB.6
....................             if(FlashingFlag == 0)
086C8:  BTFSC  1A.1
086CA:  BRA    86D0
....................             {
....................                Output.B15 = 0;           //Flash output1
086CC:  BCF    x9D.6
....................             }
086CE:  BRA    86D2
....................             else
....................             {
....................                Output.B15 = 1;
086D0:  BSF    x9D.6
....................             }
.................... 
....................             if (~AutoTestFlag)
086D2:  BTFSC  1A.4
086D4:  BRA    86F2
....................             {
....................                if(OutputBoth.B15 == 0)                  //Both output
086D6:  BTFSC  xA5.6
086D8:  BRA    86E4
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
086DA:  BSF    F89.4
086DC:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
086DE:  BSF    F89.3
086E0:  BCF    F92.3
....................                }
086E2:  BRA    86F2
....................                else
....................                {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,1);     //Buzzer
086E4:  BTFSS  xA3.6
086E6:  BRA    86EE
086E8:  BSF    F89.4
086EA:  BCF    F92.4
086EC:  BRA    86F2
....................                   else output_bit(Pbell,1);                          //Bell
086EE:  BSF    F89.3
086F0:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B15 ==0)&& (functointest_f ==0) && (Ack.B15 ==0))
086F2:  BTFSC  xB7.6
086F4:  BRA    878C
086F6:  BTFSC  30.3
086F8:  BRA    878C
086FA:  BTFSC  xA9.6
086FC:  BRA    878C
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
086FE:  MOVLW  3C
08700:  MOVWF  FF6
08702:  MOVLW  08
08704:  MOVWF  FF7
08706:  MOVLB  0
08708:  CALL   2EB4
....................                putc('\n',CH2);
0870C:  MOVLW  0A
0870E:  MOVLB  C
08710:  MOVWF  x25
08712:  MOVLB  0
08714:  CALL   2E6E
....................                delay_ms(10);
08718:  MOVLW  0A
0871A:  MOVLB  C
0871C:  MOVWF  x24
0871E:  MOVLB  0
08720:  CALL   0936
....................                
....................                SendSMS.B15 =1;
08724:  MOVLB  B
08726:  BSF    xB7.6
....................                fprintf(CH2,"AT+CMGS=\"");
08728:  MOVLW  46
0872A:  MOVWF  FF6
0872C:  MOVLW  08
0872E:  MOVWF  FF7
08730:  MOVLB  0
08732:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
08736:  MOVLW  09
08738:  MOVWF  FEA
0873A:  MOVLW  8B
0873C:  MOVWF  FE9
0873E:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
08742:  MOVLW  22
08744:  MOVLB  C
08746:  MOVWF  x25
08748:  MOVLB  0
0874A:  CALL   2E6E
....................                putc('\n',CH2);
0874E:  MOVLW  0A
08750:  MOVLB  C
08752:  MOVWF  x25
08754:  MOVLB  0
08756:  CALL   2E6E
....................                delay_ms(50);
0875A:  MOVLW  32
0875C:  MOVLB  C
0875E:  MOVWF  x24
08760:  MOVLB  0
08762:  CALL   0936
....................               
....................               printf(SMS_Massage15);  
08766:  MOVLW  0B
08768:  MOVWF  FEA
0876A:  MOVLW  5A
0876C:  MOVWF  FE9
0876E:  CALL   6226
....................               putc('\n',CH2);
08772:  MOVLW  0A
08774:  MOVLB  C
08776:  MOVWF  x25
08778:  MOVLB  0
0877A:  CALL   2E6E
....................               putc(26,CH2);
0877E:  MOVLW  1A
08780:  MOVLB  C
08782:  MOVWF  x25
08784:  MOVLB  0
08786:  CALL   2E6E
0878A:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
0878C:  BRA    8794
....................       else if(FaultType.B15 == 1) Ack.B15 = 0;
0878E:  BTFSS  xA1.6
08790:  BRA    8794
08792:  BCF    xA9.6
....................    }
08794:  BRA    885A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B15 ^ InputType.B15) == 1)
08796:  MOVLW  00
08798:  BTFSC  x9B.6
0879A:  MOVLW  01
0879C:  MOVLB  C
0879E:  MOVWF  x24
087A0:  MOVLW  00
087A2:  MOVLB  B
087A4:  BTFSC  x9F.6
087A6:  MOVLW  01
087A8:  MOVLB  C
087AA:  XORWF  x24,W
087AC:  SUBLW  01
087AE:  BNZ   8852
....................       {
....................          Output.B15 = 0;
087B0:  MOVLB  B
087B2:  BCF    x9D.6
....................          // SMS Sending   
....................             if((SendSMS.B15 ==0)&& (functointest_f ==0) && (Ack.B15 ==0))
087B4:  BTFSC  xB7.6
087B6:  BRA    884E
087B8:  BTFSC  30.3
087BA:  BRA    884E
087BC:  BTFSC  xA9.6
087BE:  BRA    884E
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
087C0:  MOVLW  50
087C2:  MOVWF  FF6
087C4:  MOVLW  08
087C6:  MOVWF  FF7
087C8:  MOVLB  0
087CA:  CALL   2EB4
....................                putc('\n',CH2);
087CE:  MOVLW  0A
087D0:  MOVLB  C
087D2:  MOVWF  x25
087D4:  MOVLB  0
087D6:  CALL   2E6E
....................                delay_ms(10);
087DA:  MOVLW  0A
087DC:  MOVLB  C
087DE:  MOVWF  x24
087E0:  MOVLB  0
087E2:  CALL   0936
....................                
....................                SendSMS.B15 =1;
087E6:  MOVLB  B
087E8:  BSF    xB7.6
....................                fprintf(CH2,"AT+CMGS=\"");
087EA:  MOVLW  5A
087EC:  MOVWF  FF6
087EE:  MOVLW  08
087F0:  MOVWF  FF7
087F2:  MOVLB  0
087F4:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
087F8:  MOVLW  09
087FA:  MOVWF  FEA
087FC:  MOVLW  8B
087FE:  MOVWF  FE9
08800:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
08804:  MOVLW  22
08806:  MOVLB  C
08808:  MOVWF  x25
0880A:  MOVLB  0
0880C:  CALL   2E6E
....................                putc('\n',CH2);
08810:  MOVLW  0A
08812:  MOVLB  C
08814:  MOVWF  x25
08816:  MOVLB  0
08818:  CALL   2E6E
....................                delay_ms(50);
0881C:  MOVLW  32
0881E:  MOVLB  C
08820:  MOVWF  x24
08822:  MOVLB  0
08824:  CALL   0936
....................               
....................               printf(SMS_Massage15);  
08828:  MOVLW  0B
0882A:  MOVWF  FEA
0882C:  MOVLW  5A
0882E:  MOVWF  FE9
08830:  CALL   6226
....................               putc('\n',CH2);
08834:  MOVLW  0A
08836:  MOVLB  C
08838:  MOVWF  x25
0883A:  MOVLB  0
0883C:  CALL   2E6E
....................               putc(26,CH2);
08840:  MOVLW  1A
08842:  MOVLB  C
08844:  MOVWF  x25
08846:  MOVLB  0
08848:  CALL   2E6E
0884C:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................       }
0884E:  BRA    885A
08850:  MOVLB  C
....................       else
....................       {
....................          Output.B15 = 1;
08852:  MOVLB  B
08854:  BSF    x9D.6
....................          SendSMS.B15 =0;
08856:  BCF    xB7.6
....................          functointest_f =0;
08858:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if(AlarmIndicator.B16 == 1)    // Alarm Function
0885A:  BTFSS  xA7.7
0885C:  BRA    8974
....................    {
....................       if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 1))|| In.B16 == 1)    // alarm1 occure and "Lock type"
0885E:  MOVLW  00
08860:  BTFSC  x9B.7
08862:  MOVLW  01
08864:  MOVLB  C
08866:  MOVWF  x24
08868:  MOVLW  00
0886A:  MOVLB  B
0886C:  BTFSC  x9F.7
0886E:  MOVLW  01
08870:  MOVLB  C
08872:  XORWF  x24,W
08874:  SUBLW  01
08876:  BNZ   887E
08878:  MOVLB  B
0887A:  BTFSC  xA1.7
0887C:  BRA    8884
0887E:  MOVLB  B
08880:  BTFSS  xAB.7
08882:  BRA    896C
....................       //if(Inputt.B16 == 0)
....................       {
....................          if(Ack.B16 == 0)
08884:  BTFSC  xA9.7
08886:  BRA    896A
....................          {
....................             if(In.B16 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08888:  BTFSC  xAB.7
0888A:  BRA    88A4
0888C:  MOVLB  0
0888E:  MOVF   x6A,W
08890:  SUBLW  0F
08892:  BTFSC  FD8.2
08894:  BRA    889A
08896:  MOVLB  B
08898:  BRA    88A4
....................             {
....................                TimeBase1s = 100 ;            //reload again
0889A:  MOVLW  64
0889C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0889E:  MOVFF  6B,1D
088A2:  MOVLB  B
....................             }
.................... 
....................             In.B16 = 1;                                 // setbit in1
088A4:  BSF    xAB.7
....................             if(FlashingFlag == 0)
088A6:  BTFSC  1A.1
088A8:  BRA    88AE
....................             {
....................                Output.B16 = 0;           //Flash output1
088AA:  BCF    x9D.7
....................             }
088AC:  BRA    88B0
....................             else
....................             {
....................                Output.B16 = 1;
088AE:  BSF    x9D.7
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
088B0:  BTFSC  1A.4
088B2:  BRA    88D0
....................             {
....................                if(OutputBoth.B16 == 0)                  //Both output
088B4:  BTFSC  xA5.7
088B6:  BRA    88C2
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
088B8:  BSF    F89.4
088BA:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
088BC:  BSF    F89.3
088BE:  BCF    F92.3
....................                }
088C0:  BRA    88D0
....................                else
....................                {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,1);     //Buzzer
088C2:  BTFSS  xA3.7
088C4:  BRA    88CC
088C6:  BSF    F89.4
088C8:  BCF    F92.4
088CA:  BRA    88D0
....................                   else output_bit(Pbell,1);                          //Bell
088CC:  BSF    F89.3
088CE:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B16 ==0)&& (functointest_f ==0) && (Ack.B16 ==0))
088D0:  BTFSC  xB7.7
088D2:  BRA    896A
088D4:  BTFSC  30.3
088D6:  BRA    896A
088D8:  BTFSC  xA9.7
088DA:  BRA    896A
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
088DC:  MOVLW  64
088DE:  MOVWF  FF6
088E0:  MOVLW  08
088E2:  MOVWF  FF7
088E4:  MOVLB  0
088E6:  CALL   2EB4
....................                putc('\n',CH2);
088EA:  MOVLW  0A
088EC:  MOVLB  C
088EE:  MOVWF  x25
088F0:  MOVLB  0
088F2:  CALL   2E6E
....................                delay_ms(10);
088F6:  MOVLW  0A
088F8:  MOVLB  C
088FA:  MOVWF  x24
088FC:  MOVLB  0
088FE:  CALL   0936
....................                
....................                SendSMS.B16 =1;
08902:  MOVLB  B
08904:  BSF    xB7.7
....................                fprintf(CH2,"AT+CMGS=\"");
08906:  MOVLW  6E
08908:  MOVWF  FF6
0890A:  MOVLW  08
0890C:  MOVWF  FF7
0890E:  MOVLB  0
08910:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
08914:  MOVLW  09
08916:  MOVWF  FEA
08918:  MOVLW  8B
0891A:  MOVWF  FE9
0891C:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
08920:  MOVLW  22
08922:  MOVLB  C
08924:  MOVWF  x25
08926:  MOVLB  0
08928:  CALL   2E6E
....................                putc('\n',CH2);
0892C:  MOVLW  0A
0892E:  MOVLB  C
08930:  MOVWF  x25
08932:  MOVLB  0
08934:  CALL   2E6E
....................                delay_ms(50);
08938:  MOVLW  32
0893A:  MOVLB  C
0893C:  MOVWF  x24
0893E:  MOVLB  0
08940:  CALL   0936
....................               
....................               printf(SMS_Massage16);  
08944:  MOVLW  0B
08946:  MOVWF  FEA
08948:  MOVLW  7A
0894A:  MOVWF  FE9
0894C:  CALL   6226
....................               putc('\n',CH2);
08950:  MOVLW  0A
08952:  MOVLB  C
08954:  MOVWF  x25
08956:  MOVLB  0
08958:  CALL   2E6E
....................               putc(26,CH2);
0895C:  MOVLW  1A
0895E:  MOVLB  C
08960:  MOVWF  x25
08962:  MOVLB  0
08964:  CALL   2E6E
08968:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
0896A:  BRA    8972
....................       else if(FaultType.B16 == 1) Ack.B16 = 0;
0896C:  BTFSS  xA1.7
0896E:  BRA    8972
08970:  BCF    xA9.7
....................    }
08972:  BRA    8A38
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B16 ^ InputType.B16) == 1)
08974:  MOVLW  00
08976:  BTFSC  x9B.7
08978:  MOVLW  01
0897A:  MOVLB  C
0897C:  MOVWF  x24
0897E:  MOVLW  00
08980:  MOVLB  B
08982:  BTFSC  x9F.7
08984:  MOVLW  01
08986:  MOVLB  C
08988:  XORWF  x24,W
0898A:  SUBLW  01
0898C:  BNZ   8A30
....................       {
....................          Output.B16 = 0;
0898E:  MOVLB  B
08990:  BCF    x9D.7
....................          // SMS Sending   
....................             if((SendSMS.B16 ==0)&& (functointest_f ==0) && (Ack.B16 ==0))
08992:  BTFSC  xB7.7
08994:  BRA    8A2C
08996:  BTFSC  30.3
08998:  BRA    8A2C
0899A:  BTFSC  xA9.7
0899C:  BRA    8A2C
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0899E:  MOVLW  78
089A0:  MOVWF  FF6
089A2:  MOVLW  08
089A4:  MOVWF  FF7
089A6:  MOVLB  0
089A8:  CALL   2EB4
....................                putc('\n',CH2);
089AC:  MOVLW  0A
089AE:  MOVLB  C
089B0:  MOVWF  x25
089B2:  MOVLB  0
089B4:  CALL   2E6E
....................                delay_ms(10);
089B8:  MOVLW  0A
089BA:  MOVLB  C
089BC:  MOVWF  x24
089BE:  MOVLB  0
089C0:  CALL   0936
....................                
....................                SendSMS.B16 =1;
089C4:  MOVLB  B
089C6:  BSF    xB7.7
....................                fprintf(CH2,"AT+CMGS=\"");
089C8:  MOVLW  82
089CA:  MOVWF  FF6
089CC:  MOVLW  08
089CE:  MOVWF  FF7
089D0:  MOVLB  0
089D2:  CALL   2EB4
....................                fprintf(CH2,sms_phonenumber);
089D6:  MOVLW  09
089D8:  MOVWF  FEA
089DA:  MOVLW  8B
089DC:  MOVWF  FE9
089DE:  CALL   6226
....................                
....................                fprintf(CH2,"\"");
089E2:  MOVLW  22
089E4:  MOVLB  C
089E6:  MOVWF  x25
089E8:  MOVLB  0
089EA:  CALL   2E6E
....................                putc('\n',CH2);
089EE:  MOVLW  0A
089F0:  MOVLB  C
089F2:  MOVWF  x25
089F4:  MOVLB  0
089F6:  CALL   2E6E
....................                delay_ms(50);
089FA:  MOVLW  32
089FC:  MOVLB  C
089FE:  MOVWF  x24
08A00:  MOVLB  0
08A02:  CALL   0936
....................               
....................               printf(SMS_Massage16);  
08A06:  MOVLW  0B
08A08:  MOVWF  FEA
08A0A:  MOVLW  7A
08A0C:  MOVWF  FE9
08A0E:  CALL   6226
....................               putc('\n',CH2);
08A12:  MOVLW  0A
08A14:  MOVLB  C
08A16:  MOVWF  x25
08A18:  MOVLB  0
08A1A:  CALL   2E6E
....................               putc(26,CH2);
08A1E:  MOVLW  1A
08A20:  MOVLB  C
08A22:  MOVWF  x25
08A24:  MOVLB  0
08A26:  CALL   2E6E
08A2A:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................       }
08A2C:  BRA    8A38
08A2E:  MOVLB  C
....................       else
....................       {
....................          Output.B16 = 1;
08A30:  MOVLB  B
08A32:  BSF    x9D.7
....................          SendSMS.B16 =0;
08A34:  BCF    xB7.7
....................          functointest_f =0;
08A36:  BCF    30.3
....................       }
....................    }
.................... //}
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// AUTO RESET ///////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08A38:  MOVLW  00
08A3A:  BTFSC  x9A.0
08A3C:  MOVLW  01
08A3E:  MOVLB  C
08A40:  MOVWF  x24
08A42:  MOVLW  00
08A44:  MOVLB  B
08A46:  BTFSC  x9E.0
08A48:  MOVLW  01
08A4A:  MOVLB  C
08A4C:  XORWF  x24,W
08A4E:  SUBLW  01
08A50:  BNZ   8A5A
08A52:  MOVLB  B
08A54:  BTFSS  xA0.0
08A56:  BRA    8A60
08A58:  MOVLB  C
08A5A:  BTFSS  1A.5
08A5C:  BRA    8B30
08A5E:  MOVLB  B
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
08A60:  BTFSC  xAC.0
08A62:  BRA    8A80
08A64:  MOVLB  0
08A66:  MOVF   x6A,W
08A68:  SUBLW  0F
08A6A:  BTFSC  FD8.2
08A6C:  BRA    8A72
08A6E:  MOVLB  B
08A70:  BRA    8A80
08A72:  MOVLB  B
08A74:  BTFSC  xA8.0
08A76:  BRA    8A80
....................       {
....................             TimeBase1s = 100 ;            //reload again
08A78:  MOVLW  64
08A7A:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
08A7C:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B1 = 1;
08A80:  BSF    xAC.0
....................       if(Ack.B1 == 0)
08A82:  BTFSC  xA8.0
08A84:  BRA    8AB4
....................       {
....................          if(FlashingFlag == 0)
08A86:  BTFSC  1A.1
08A88:  BRA    8A8E
....................             {
....................                Output.B1 = 0;           //Flash output1
08A8A:  BCF    x9C.0
....................             }
08A8C:  BRA    8A90
....................             else
....................             {
....................                Output.B1 = 1;
08A8E:  BSF    x9C.0
....................             }
....................          if (~AutoTestFlag)
08A90:  BTFSC  1A.4
08A92:  BRA    8AB4
....................          {
....................             if(AlarmIndicator.B1 == 1){
08A94:  BTFSS  xA6.0
08A96:  BRA    8AB4
....................                 if(OutputBoth.B1 == 0)        //Both output
08A98:  BTFSC  xA4.0
08A9A:  BRA    8AA6
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
08A9C:  BSF    F89.4
08A9E:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08AA0:  BSF    F89.3
08AA2:  BCF    F92.3
....................                 }
08AA4:  BRA    8AB4
....................                 else
....................                 {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
08AA6:  BTFSS  xA2.0
08AA8:  BRA    8AB0
08AAA:  BSF    F89.4
08AAC:  BCF    F92.4
08AAE:  BRA    8AB4
....................                   else output_bit(Pbell,1);                          //Bell
08AB0:  BSF    F89.3
08AB2:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08AB4:  MOVLW  01
08AB6:  MOVLB  C
08AB8:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
08ABA:  MOVLB  B
08ABC:  BTFSC  xB6.0
08ABE:  BRA    8B2E
08AC0:  BTFSC  30.3
08AC2:  BRA    8B2E
08AC4:  BTFSC  xA8.0
08AC6:  BRA    8B2E
....................       {
....................          SendSMS.B1 =1;
08AC8:  BSF    xB6.0
....................          fprintf(CH2,"AT+CMGS=\"");
08ACA:  MOVLW  8C
08ACC:  MOVWF  FF6
08ACE:  MOVLW  08
08AD0:  MOVWF  FF7
08AD2:  MOVLB  0
08AD4:  CALL   2EB4
....................          fprintf(CH2,sms_phonenumber);
08AD8:  MOVLW  09
08ADA:  MOVWF  FEA
08ADC:  MOVLW  8B
08ADE:  MOVWF  FE9
08AE0:  CALL   6226
....................          
....................          fprintf(CH2,"\"");
08AE4:  MOVLW  22
08AE6:  MOVLB  C
08AE8:  MOVWF  x25
08AEA:  MOVLB  0
08AEC:  CALL   2E6E
....................          putc('\n',CH2);
08AF0:  MOVLW  0A
08AF2:  MOVLB  C
08AF4:  MOVWF  x25
08AF6:  MOVLB  0
08AF8:  CALL   2E6E
....................          delay_ms(50);
08AFC:  MOVLW  32
08AFE:  MOVLB  C
08B00:  MOVWF  x24
08B02:  MOVLB  0
08B04:  CALL   0936
....................         
....................         fprintf(CH2,SMS_Massage1);   
08B08:  MOVLW  09
08B0A:  MOVWF  FEA
08B0C:  MOVLW  9A
08B0E:  MOVWF  FE9
08B10:  CALL   6226
....................         putc('\n',CH2);
08B14:  MOVLW  0A
08B16:  MOVLB  C
08B18:  MOVWF  x25
08B1A:  MOVLB  0
08B1C:  CALL   2E6E
....................        putc(26,CH2);
08B20:  MOVLW  1A
08B22:  MOVLB  C
08B24:  MOVWF  x25
08B26:  MOVLB  0
08B28:  CALL   2E6E
08B2C:  MOVLB  B
....................       }
....................    }
08B2E:  BRA    8BDA
....................    else if(FaultType.B1 == 0)
08B30:  MOVLB  B
08B32:  BTFSC  xA0.0
08B34:  BRA    8BDA
....................    {
....................       In2.B1 = 0x00;
08B36:  BCF    xAC.0
....................       Ack.B1 = 0;
08B38:  BCF    xA8.0
....................       Output.B1 = 1;      //Off LED
08B3A:  BSF    x9C.0
....................       
....................       SendSMS.B1 =0;// Clear SMS
08B3C:  BCF    xB6.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0)&& inputflag ==0)      //If Buzzer or Both
08B3E:  BTFSC  xA2.0
08B40:  BRA    8B46
08B42:  BTFSC  xA4.0
08B44:  BRA    8B68
08B46:  MOVLB  C
08B48:  MOVF   x17,F
08B4A:  BTFSC  FD8.2
08B4C:  BRA    8B52
08B4E:  MOVLB  B
08B50:  BRA    8B68
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
08B52:  MOVLW  01
08B54:  MOVWF  x23
08B56:  MOVLB  0
08B58:  CALL   624C
08B5C:  DECFSZ 01,W
08B5E:  BRA    8B62
08B60:  BRA    8B66
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
08B62:  BCF    F89.4
08B64:  BCF    F92.4
08B66:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0)&& inputflag ==0)  //If Bell or Both
08B68:  BTFSS  xA2.0
08B6A:  BRA    8B70
08B6C:  BTFSC  xA4.0
08B6E:  BRA    8B92
08B70:  MOVLB  C
08B72:  MOVF   x17,F
08B74:  BTFSC  FD8.2
08B76:  BRA    8B7C
08B78:  MOVLB  B
08B7A:  BRA    8B92
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08B7C:  MOVLW  02
08B7E:  MOVWF  x23
08B80:  MOVLB  0
08B82:  CALL   624C
08B86:  DECFSZ 01,W
08B88:  BRA    8B8C
08B8A:  BRA    8B90
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08B8C:  BCF    F89.3
08B8E:  BCF    F92.3
08B90:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
08B92:  BTFSC  xAC.0
08B94:  BRA    8BDA
08B96:  BTFSC  xAC.1
08B98:  BRA    8BDA
08B9A:  BTFSC  xAC.2
08B9C:  BRA    8BDA
08B9E:  BTFSC  xAC.3
08BA0:  BRA    8BDA
08BA2:  BTFSC  xAC.4
08BA4:  BRA    8BDA
08BA6:  BTFSC  xAC.5
08BA8:  BRA    8BDA
08BAA:  BTFSC  xAC.6
08BAC:  BRA    8BDA
08BAE:  BTFSC  xAC.7
08BB0:  BRA    8BDA
08BB2:  BTFSC  xAD.0
08BB4:  BRA    8BDA
08BB6:  BTFSC  xAD.1
08BB8:  BRA    8BDA
08BBA:  BTFSC  xAD.2
08BBC:  BRA    8BDA
08BBE:  BTFSC  xAD.3
08BC0:  BRA    8BDA
08BC2:  BTFSC  xAD.4
08BC4:  BRA    8BDA
08BC6:  BTFSC  xAD.5
08BC8:  BRA    8BDA
08BCA:  BTFSC  xAD.6
08BCC:  BRA    8BDA
08BCE:  BTFSC  xAD.7
08BD0:  BRA    8BDA
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
08BD2:  BCF    F89.3
08BD4:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08BD6:  BCF    F89.4
08BD8:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08BDA:  MOVLW  00
08BDC:  BTFSC  x9A.1
08BDE:  MOVLW  01
08BE0:  MOVLB  C
08BE2:  MOVWF  x24
08BE4:  MOVLW  00
08BE6:  MOVLB  B
08BE8:  BTFSC  x9E.1
08BEA:  MOVLW  01
08BEC:  MOVLB  C
08BEE:  XORWF  x24,W
08BF0:  SUBLW  01
08BF2:  BNZ   8BFC
08BF4:  MOVLB  B
08BF6:  BTFSS  xA0.1
08BF8:  BRA    8C02
08BFA:  MOVLB  C
08BFC:  BTFSS  1A.5
08BFE:  BRA    8CD2
08C00:  MOVLB  B
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
08C02:  BTFSC  xAC.1
08C04:  BRA    8C22
08C06:  MOVLB  0
08C08:  MOVF   x6A,W
08C0A:  SUBLW  0F
08C0C:  BTFSC  FD8.2
08C0E:  BRA    8C14
08C10:  MOVLB  B
08C12:  BRA    8C22
08C14:  MOVLB  B
08C16:  BTFSC  xA8.1
08C18:  BRA    8C22
....................       {
....................             TimeBase1s = 100 ;            //reload again
08C1A:  MOVLW  64
08C1C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
08C1E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B2 = 1;
08C22:  BSF    xAC.1
....................       if(Ack.B2 == 0)
08C24:  BTFSC  xA8.1
08C26:  BRA    8C56
....................       {
....................          if(FlashingFlag == 0)
08C28:  BTFSC  1A.1
08C2A:  BRA    8C30
....................             {
....................                Output.B2 = 0;           //Flash output1
08C2C:  BCF    x9C.1
....................             }
08C2E:  BRA    8C32
....................             else
....................             {
....................                Output.B2 = 1;
08C30:  BSF    x9C.1
....................             }
....................          if (~AutoTestFlag)
08C32:  BTFSC  1A.4
08C34:  BRA    8C56
....................          {
....................             if(AlarmIndicator.B2 == 1){
08C36:  BTFSS  xA6.1
08C38:  BRA    8C56
....................                 if(OutputBoth.B2 == 0)        //Both output
08C3A:  BTFSC  xA4.1
08C3C:  BRA    8C48
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
08C3E:  BSF    F89.4
08C40:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08C42:  BSF    F89.3
08C44:  BCF    F92.3
....................                 }
08C46:  BRA    8C56
....................                 else
....................                 {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
08C48:  BTFSS  xA2.1
08C4A:  BRA    8C52
08C4C:  BSF    F89.4
08C4E:  BCF    F92.4
08C50:  BRA    8C56
....................                   else output_bit(Pbell,1);                          //Bell
08C52:  BSF    F89.3
08C54:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08C56:  MOVLW  01
08C58:  MOVLB  C
08C5A:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
08C5C:  MOVLB  B
08C5E:  BTFSC  xB6.1
08C60:  BRA    8CD0
08C62:  BTFSC  30.3
08C64:  BRA    8CD0
08C66:  BTFSC  xA8.1
08C68:  BRA    8CD0
....................       {
....................          SendSMS.B2 =1;
08C6A:  BSF    xB6.1
....................          fprintf(CH2,"AT+CMGS=\"");
08C6C:  MOVLW  96
08C6E:  MOVWF  FF6
08C70:  MOVLW  08
08C72:  MOVWF  FF7
08C74:  MOVLB  0
08C76:  CALL   2EB4
....................          fprintf(CH2,sms_phonenumber);
08C7A:  MOVLW  09
08C7C:  MOVWF  FEA
08C7E:  MOVLW  8B
08C80:  MOVWF  FE9
08C82:  CALL   6226
....................          
....................          fprintf(CH2,"\"");
08C86:  MOVLW  22
08C88:  MOVLB  C
08C8A:  MOVWF  x25
08C8C:  MOVLB  0
08C8E:  CALL   2E6E
....................          putc('\n',CH2);
08C92:  MOVLW  0A
08C94:  MOVLB  C
08C96:  MOVWF  x25
08C98:  MOVLB  0
08C9A:  CALL   2E6E
....................          delay_ms(50);
08C9E:  MOVLW  32
08CA0:  MOVLB  C
08CA2:  MOVWF  x24
08CA4:  MOVLB  0
08CA6:  CALL   0936
....................         
....................         fprintf(CH2,SMS_Massage2); 
08CAA:  MOVLW  09
08CAC:  MOVWF  FEA
08CAE:  MOVLW  BA
08CB0:  MOVWF  FE9
08CB2:  CALL   6226
....................         putc('\n',CH2);
08CB6:  MOVLW  0A
08CB8:  MOVLB  C
08CBA:  MOVWF  x25
08CBC:  MOVLB  0
08CBE:  CALL   2E6E
....................        putc(26,CH2);
08CC2:  MOVLW  1A
08CC4:  MOVLB  C
08CC6:  MOVWF  x25
08CC8:  MOVLB  0
08CCA:  CALL   2E6E
08CCE:  MOVLB  B
....................       }
....................    }
08CD0:  BRA    8D7C
....................    else if(FaultType.B2 == 0)
08CD2:  MOVLB  B
08CD4:  BTFSC  xA0.1
08CD6:  BRA    8D7C
....................    {
....................       In2.B2 = 0x00;
08CD8:  BCF    xAC.1
....................       Ack.B2 = 0;
08CDA:  BCF    xA8.1
....................       Output.B2 = 1;      //Off LED
08CDC:  BSF    x9C.1
....................       
....................       SendSMS.B2 =0;// Clear SMS
08CDE:  BCF    xB6.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0)&& inputflag ==0)      //If Buzzer or Both
08CE0:  BTFSC  xA2.1
08CE2:  BRA    8CE8
08CE4:  BTFSC  xA4.1
08CE6:  BRA    8D0A
08CE8:  MOVLB  C
08CEA:  MOVF   x17,F
08CEC:  BTFSC  FD8.2
08CEE:  BRA    8CF4
08CF0:  MOVLB  B
08CF2:  BRA    8D0A
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
08CF4:  MOVLW  01
08CF6:  MOVWF  x23
08CF8:  MOVLB  0
08CFA:  CALL   624C
08CFE:  DECFSZ 01,W
08D00:  BRA    8D04
08D02:  BRA    8D08
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
08D04:  BCF    F89.4
08D06:  BCF    F92.4
08D08:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0)&& inputflag ==0)  //If Bell or Both
08D0A:  BTFSS  xA2.1
08D0C:  BRA    8D12
08D0E:  BTFSC  xA4.1
08D10:  BRA    8D34
08D12:  MOVLB  C
08D14:  MOVF   x17,F
08D16:  BTFSC  FD8.2
08D18:  BRA    8D1E
08D1A:  MOVLB  B
08D1C:  BRA    8D34
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08D1E:  MOVLW  02
08D20:  MOVWF  x23
08D22:  MOVLB  0
08D24:  CALL   624C
08D28:  DECFSZ 01,W
08D2A:  BRA    8D2E
08D2C:  BRA    8D32
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08D2E:  BCF    F89.3
08D30:  BCF    F92.3
08D32:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
08D34:  BTFSC  xAC.0
08D36:  BRA    8D7C
08D38:  BTFSC  xAC.1
08D3A:  BRA    8D7C
08D3C:  BTFSC  xAC.2
08D3E:  BRA    8D7C
08D40:  BTFSC  xAC.3
08D42:  BRA    8D7C
08D44:  BTFSC  xAC.4
08D46:  BRA    8D7C
08D48:  BTFSC  xAC.5
08D4A:  BRA    8D7C
08D4C:  BTFSC  xAC.6
08D4E:  BRA    8D7C
08D50:  BTFSC  xAC.7
08D52:  BRA    8D7C
08D54:  BTFSC  xAD.0
08D56:  BRA    8D7C
08D58:  BTFSC  xAD.1
08D5A:  BRA    8D7C
08D5C:  BTFSC  xAD.2
08D5E:  BRA    8D7C
08D60:  BTFSC  xAD.3
08D62:  BRA    8D7C
08D64:  BTFSC  xAD.4
08D66:  BRA    8D7C
08D68:  BTFSC  xAD.5
08D6A:  BRA    8D7C
08D6C:  BTFSC  xAD.6
08D6E:  BRA    8D7C
08D70:  BTFSC  xAD.7
08D72:  BRA    8D7C
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
08D74:  BCF    F89.3
08D76:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08D78:  BCF    F89.4
08D7A:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08D7C:  MOVLW  00
08D7E:  BTFSC  x9A.2
08D80:  MOVLW  01
08D82:  MOVLB  C
08D84:  MOVWF  x24
08D86:  MOVLW  00
08D88:  MOVLB  B
08D8A:  BTFSC  x9E.2
08D8C:  MOVLW  01
08D8E:  MOVLB  C
08D90:  XORWF  x24,W
08D92:  SUBLW  01
08D94:  BNZ   8D9E
08D96:  MOVLB  B
08D98:  BTFSS  xA0.2
08D9A:  BRA    8DA4
08D9C:  MOVLB  C
08D9E:  BTFSS  1A.5
08DA0:  BRA    8E74
08DA2:  MOVLB  B
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
08DA4:  BTFSC  xAC.2
08DA6:  BRA    8DC4
08DA8:  MOVLB  0
08DAA:  MOVF   x6A,W
08DAC:  SUBLW  0F
08DAE:  BTFSC  FD8.2
08DB0:  BRA    8DB6
08DB2:  MOVLB  B
08DB4:  BRA    8DC4
08DB6:  MOVLB  B
08DB8:  BTFSC  xA8.2
08DBA:  BRA    8DC4
....................       {
....................             TimeBase1s = 100 ;            //reload again
08DBC:  MOVLW  64
08DBE:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
08DC0:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B3 = 1;
08DC4:  BSF    xAC.2
....................       if(Ack.B3 == 0)
08DC6:  BTFSC  xA8.2
08DC8:  BRA    8DF8
....................       {
....................          if(FlashingFlag == 0)
08DCA:  BTFSC  1A.1
08DCC:  BRA    8DD2
....................             {
....................                Output.B3 = 0;           //Flash output1
08DCE:  BCF    x9C.2
....................             }
08DD0:  BRA    8DD4
....................             else
....................             {
....................                Output.B3 = 1;
08DD2:  BSF    x9C.2
....................             }
....................          if (~AutoTestFlag)
08DD4:  BTFSC  1A.4
08DD6:  BRA    8DF8
....................          {
....................             if(AlarmIndicator.B3 == 1){
08DD8:  BTFSS  xA6.2
08DDA:  BRA    8DF8
....................                 if(OutputBoth.B3 == 0)        //Both output
08DDC:  BTFSC  xA4.2
08DDE:  BRA    8DEA
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
08DE0:  BSF    F89.4
08DE2:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08DE4:  BSF    F89.3
08DE6:  BCF    F92.3
....................                 }
08DE8:  BRA    8DF8
....................                 else
....................                 {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
08DEA:  BTFSS  xA2.2
08DEC:  BRA    8DF4
08DEE:  BSF    F89.4
08DF0:  BCF    F92.4
08DF2:  BRA    8DF8
....................                   else output_bit(Pbell,1);                          //Bell
08DF4:  BSF    F89.3
08DF6:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08DF8:  MOVLW  01
08DFA:  MOVLB  C
08DFC:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
08DFE:  MOVLB  B
08E00:  BTFSC  xB6.2
08E02:  BRA    8E72
08E04:  BTFSC  30.3
08E06:  BRA    8E72
08E08:  BTFSC  xA8.2
08E0A:  BRA    8E72
....................       {
....................          SendSMS.B3 =1;
08E0C:  BSF    xB6.2
....................          fprintf(CH2,"AT+CMGS=\"");
08E0E:  MOVLW  A0
08E10:  MOVWF  FF6
08E12:  MOVLW  08
08E14:  MOVWF  FF7
08E16:  MOVLB  0
08E18:  CALL   2EB4
....................          fprintf(CH2,sms_phonenumber);
08E1C:  MOVLW  09
08E1E:  MOVWF  FEA
08E20:  MOVLW  8B
08E22:  MOVWF  FE9
08E24:  CALL   6226
....................          
....................          fprintf(CH2,"\"");
08E28:  MOVLW  22
08E2A:  MOVLB  C
08E2C:  MOVWF  x25
08E2E:  MOVLB  0
08E30:  CALL   2E6E
....................          putc('\n',CH2);
08E34:  MOVLW  0A
08E36:  MOVLB  C
08E38:  MOVWF  x25
08E3A:  MOVLB  0
08E3C:  CALL   2E6E
....................          delay_ms(50);
08E40:  MOVLW  32
08E42:  MOVLB  C
08E44:  MOVWF  x24
08E46:  MOVLB  0
08E48:  CALL   0936
....................         
....................         fprintf(CH2,SMS_Massage3); 
08E4C:  MOVLW  09
08E4E:  MOVWF  FEA
08E50:  MOVLW  DA
08E52:  MOVWF  FE9
08E54:  CALL   6226
....................         putc('\n',CH2);
08E58:  MOVLW  0A
08E5A:  MOVLB  C
08E5C:  MOVWF  x25
08E5E:  MOVLB  0
08E60:  CALL   2E6E
....................        putc(26,CH2);
08E64:  MOVLW  1A
08E66:  MOVLB  C
08E68:  MOVWF  x25
08E6A:  MOVLB  0
08E6C:  CALL   2E6E
08E70:  MOVLB  B
....................       }
....................    }
08E72:  BRA    8F1E
....................    else if(FaultType.B3 == 0)
08E74:  MOVLB  B
08E76:  BTFSC  xA0.2
08E78:  BRA    8F1E
....................    {
....................       In2.B3 = 0x00;
08E7A:  BCF    xAC.2
....................       Ack.B3 = 0;
08E7C:  BCF    xA8.2
....................       Output.B3 = 1;      //Off LED
08E7E:  BSF    x9C.2
....................       
....................       SendSMS.B3 =0;// Clear SMS
08E80:  BCF    xB6.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0)&& inputflag ==0)      //If Buzzer or Both
08E82:  BTFSC  xA2.2
08E84:  BRA    8E8A
08E86:  BTFSC  xA4.2
08E88:  BRA    8EAC
08E8A:  MOVLB  C
08E8C:  MOVF   x17,F
08E8E:  BTFSC  FD8.2
08E90:  BRA    8E96
08E92:  MOVLB  B
08E94:  BRA    8EAC
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
08E96:  MOVLW  01
08E98:  MOVWF  x23
08E9A:  MOVLB  0
08E9C:  CALL   624C
08EA0:  DECFSZ 01,W
08EA2:  BRA    8EA6
08EA4:  BRA    8EAA
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
08EA6:  BCF    F89.4
08EA8:  BCF    F92.4
08EAA:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0)&& inputflag ==0)  //If Bell or Both
08EAC:  BTFSS  xA2.2
08EAE:  BRA    8EB4
08EB0:  BTFSC  xA4.2
08EB2:  BRA    8ED6
08EB4:  MOVLB  C
08EB6:  MOVF   x17,F
08EB8:  BTFSC  FD8.2
08EBA:  BRA    8EC0
08EBC:  MOVLB  B
08EBE:  BRA    8ED6
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08EC0:  MOVLW  02
08EC2:  MOVWF  x23
08EC4:  MOVLB  0
08EC6:  CALL   624C
08ECA:  DECFSZ 01,W
08ECC:  BRA    8ED0
08ECE:  BRA    8ED4
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08ED0:  BCF    F89.3
08ED2:  BCF    F92.3
08ED4:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
08ED6:  BTFSC  xAC.0
08ED8:  BRA    8F1E
08EDA:  BTFSC  xAC.1
08EDC:  BRA    8F1E
08EDE:  BTFSC  xAC.2
08EE0:  BRA    8F1E
08EE2:  BTFSC  xAC.3
08EE4:  BRA    8F1E
08EE6:  BTFSC  xAC.4
08EE8:  BRA    8F1E
08EEA:  BTFSC  xAC.5
08EEC:  BRA    8F1E
08EEE:  BTFSC  xAC.6
08EF0:  BRA    8F1E
08EF2:  BTFSC  xAC.7
08EF4:  BRA    8F1E
08EF6:  BTFSC  xAD.0
08EF8:  BRA    8F1E
08EFA:  BTFSC  xAD.1
08EFC:  BRA    8F1E
08EFE:  BTFSC  xAD.2
08F00:  BRA    8F1E
08F02:  BTFSC  xAD.3
08F04:  BRA    8F1E
08F06:  BTFSC  xAD.4
08F08:  BRA    8F1E
08F0A:  BTFSC  xAD.5
08F0C:  BRA    8F1E
08F0E:  BTFSC  xAD.6
08F10:  BRA    8F1E
08F12:  BTFSC  xAD.7
08F14:  BRA    8F1E
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
08F16:  BCF    F89.3
08F18:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08F1A:  BCF    F89.4
08F1C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08F1E:  MOVLW  00
08F20:  BTFSC  x9A.3
08F22:  MOVLW  01
08F24:  MOVLB  C
08F26:  MOVWF  x24
08F28:  MOVLW  00
08F2A:  MOVLB  B
08F2C:  BTFSC  x9E.3
08F2E:  MOVLW  01
08F30:  MOVLB  C
08F32:  XORWF  x24,W
08F34:  SUBLW  01
08F36:  BNZ   8F40
08F38:  MOVLB  B
08F3A:  BTFSS  xA0.3
08F3C:  BRA    8F46
08F3E:  MOVLB  C
08F40:  BTFSS  1A.5
08F42:  BRA    9016
08F44:  MOVLB  B
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
08F46:  BTFSC  xAC.3
08F48:  BRA    8F66
08F4A:  MOVLB  0
08F4C:  MOVF   x6A,W
08F4E:  SUBLW  0F
08F50:  BTFSC  FD8.2
08F52:  BRA    8F58
08F54:  MOVLB  B
08F56:  BRA    8F66
08F58:  MOVLB  B
08F5A:  BTFSC  xA8.3
08F5C:  BRA    8F66
....................       {
....................             TimeBase1s = 100 ;            //reload again
08F5E:  MOVLW  64
08F60:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
08F62:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B4 = 1;
08F66:  BSF    xAC.3
....................       if(Ack.B4 == 0)
08F68:  BTFSC  xA8.3
08F6A:  BRA    8F9A
....................       {
....................          if(FlashingFlag == 0)
08F6C:  BTFSC  1A.1
08F6E:  BRA    8F74
....................             {
....................                Output.B4 = 0;           //Flash output1
08F70:  BCF    x9C.3
....................             }
08F72:  BRA    8F76
....................             else
....................             {
....................                Output.B4 = 1;
08F74:  BSF    x9C.3
....................             }
....................          if (~AutoTestFlag)
08F76:  BTFSC  1A.4
08F78:  BRA    8F9A
....................          {
....................             if(AlarmIndicator.B4 == 1){
08F7A:  BTFSS  xA6.3
08F7C:  BRA    8F9A
....................                 if(OutputBoth.B4 == 0)        //Both output
08F7E:  BTFSC  xA4.3
08F80:  BRA    8F8C
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
08F82:  BSF    F89.4
08F84:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08F86:  BSF    F89.3
08F88:  BCF    F92.3
....................                 }
08F8A:  BRA    8F9A
....................                 else
....................                 {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
08F8C:  BTFSS  xA2.3
08F8E:  BRA    8F96
08F90:  BSF    F89.4
08F92:  BCF    F92.4
08F94:  BRA    8F9A
....................                   else output_bit(Pbell,1);                          //Bell
08F96:  BSF    F89.3
08F98:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08F9A:  MOVLW  01
08F9C:  MOVLB  C
08F9E:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
08FA0:  MOVLB  B
08FA2:  BTFSC  xB6.3
08FA4:  BRA    9014
08FA6:  BTFSC  30.3
08FA8:  BRA    9014
08FAA:  BTFSC  xA8.3
08FAC:  BRA    9014
....................       {
....................          SendSMS.B4 =1;
08FAE:  BSF    xB6.3
....................          fprintf(CH2,"AT+CMGS=\"");
08FB0:  MOVLW  AA
08FB2:  MOVWF  FF6
08FB4:  MOVLW  08
08FB6:  MOVWF  FF7
08FB8:  MOVLB  0
08FBA:  CALL   2EB4
....................          fprintf(CH2,sms_phonenumber);
08FBE:  MOVLW  09
08FC0:  MOVWF  FEA
08FC2:  MOVLW  8B
08FC4:  MOVWF  FE9
08FC6:  CALL   6226
....................          
....................          fprintf(CH2,"\"");
08FCA:  MOVLW  22
08FCC:  MOVLB  C
08FCE:  MOVWF  x25
08FD0:  MOVLB  0
08FD2:  CALL   2E6E
....................          putc('\n',CH2);
08FD6:  MOVLW  0A
08FD8:  MOVLB  C
08FDA:  MOVWF  x25
08FDC:  MOVLB  0
08FDE:  CALL   2E6E
....................          delay_ms(50);
08FE2:  MOVLW  32
08FE4:  MOVLB  C
08FE6:  MOVWF  x24
08FE8:  MOVLB  0
08FEA:  CALL   0936
....................         
....................         fprintf(CH2,SMS_Massage4); 
08FEE:  MOVLW  09
08FF0:  MOVWF  FEA
08FF2:  MOVLW  FA
08FF4:  MOVWF  FE9
08FF6:  CALL   6226
....................         putc('\n',CH2);
08FFA:  MOVLW  0A
08FFC:  MOVLB  C
08FFE:  MOVWF  x25
09000:  MOVLB  0
09002:  CALL   2E6E
....................        putc(26,CH2);
09006:  MOVLW  1A
09008:  MOVLB  C
0900A:  MOVWF  x25
0900C:  MOVLB  0
0900E:  CALL   2E6E
09012:  MOVLB  B
....................       }
....................    }
09014:  BRA    90C0
....................    else if(FaultType.B4 == 0)
09016:  MOVLB  B
09018:  BTFSC  xA0.3
0901A:  BRA    90C0
....................    {
....................       In2.B4 = 0x00;
0901C:  BCF    xAC.3
....................       Ack.B4 = 0;
0901E:  BCF    xA8.3
....................       Output.B4 = 1;      //Off LED
09020:  BSF    x9C.3
....................       SendSMS.B4 =0;// Clear SMS
09022:  BCF    xB6.3
....................       
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0)&& inputflag ==0)      //If Buzzer or Both
09024:  BTFSC  xA2.3
09026:  BRA    902C
09028:  BTFSC  xA4.3
0902A:  BRA    904E
0902C:  MOVLB  C
0902E:  MOVF   x17,F
09030:  BTFSC  FD8.2
09032:  BRA    9038
09034:  MOVLB  B
09036:  BRA    904E
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
09038:  MOVLW  01
0903A:  MOVWF  x23
0903C:  MOVLB  0
0903E:  CALL   624C
09042:  DECFSZ 01,W
09044:  BRA    9048
09046:  BRA    904C
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
09048:  BCF    F89.4
0904A:  BCF    F92.4
0904C:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0)&& inputflag ==0)  //If Bell or Both
0904E:  BTFSS  xA2.3
09050:  BRA    9056
09052:  BTFSC  xA4.3
09054:  BRA    9078
09056:  MOVLB  C
09058:  MOVF   x17,F
0905A:  BTFSC  FD8.2
0905C:  BRA    9062
0905E:  MOVLB  B
09060:  BRA    9078
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09062:  MOVLW  02
09064:  MOVWF  x23
09066:  MOVLB  0
09068:  CALL   624C
0906C:  DECFSZ 01,W
0906E:  BRA    9072
09070:  BRA    9076
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
09072:  BCF    F89.3
09074:  BCF    F92.3
09076:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
09078:  BTFSC  xAC.0
0907A:  BRA    90C0
0907C:  BTFSC  xAC.1
0907E:  BRA    90C0
09080:  BTFSC  xAC.2
09082:  BRA    90C0
09084:  BTFSC  xAC.3
09086:  BRA    90C0
09088:  BTFSC  xAC.4
0908A:  BRA    90C0
0908C:  BTFSC  xAC.5
0908E:  BRA    90C0
09090:  BTFSC  xAC.6
09092:  BRA    90C0
09094:  BTFSC  xAC.7
09096:  BRA    90C0
09098:  BTFSC  xAD.0
0909A:  BRA    90C0
0909C:  BTFSC  xAD.1
0909E:  BRA    90C0
090A0:  BTFSC  xAD.2
090A2:  BRA    90C0
090A4:  BTFSC  xAD.3
090A6:  BRA    90C0
090A8:  BTFSC  xAD.4
090AA:  BRA    90C0
090AC:  BTFSC  xAD.5
090AE:  BRA    90C0
090B0:  BTFSC  xAD.6
090B2:  BRA    90C0
090B4:  BTFSC  xAD.7
090B6:  BRA    90C0
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
090B8:  BCF    F89.3
090BA:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
090BC:  BCF    F89.4
090BE:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
090C0:  MOVLW  00
090C2:  BTFSC  x9A.4
090C4:  MOVLW  01
090C6:  MOVLB  C
090C8:  MOVWF  x24
090CA:  MOVLW  00
090CC:  MOVLB  B
090CE:  BTFSC  x9E.4
090D0:  MOVLW  01
090D2:  MOVLB  C
090D4:  XORWF  x24,W
090D6:  SUBLW  01
090D8:  BNZ   90E2
090DA:  MOVLB  B
090DC:  BTFSS  xA0.4
090DE:  BRA    90E8
090E0:  MOVLB  C
090E2:  BTFSS  1A.5
090E4:  BRA    91B8
090E6:  MOVLB  B
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
090E8:  BTFSC  xAC.4
090EA:  BRA    9108
090EC:  MOVLB  0
090EE:  MOVF   x6A,W
090F0:  SUBLW  0F
090F2:  BTFSC  FD8.2
090F4:  BRA    90FA
090F6:  MOVLB  B
090F8:  BRA    9108
090FA:  MOVLB  B
090FC:  BTFSC  xA8.4
090FE:  BRA    9108
....................       {
....................             TimeBase1s = 100 ;            //reload again
09100:  MOVLW  64
09102:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09104:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B5 = 1;
09108:  BSF    xAC.4
....................       if(Ack.B5 == 0)
0910A:  BTFSC  xA8.4
0910C:  BRA    913C
....................       {
....................          if(FlashingFlag == 0)
0910E:  BTFSC  1A.1
09110:  BRA    9116
....................             {
....................                Output.B5 = 0;           //Flash output1
09112:  BCF    x9C.4
....................             }
09114:  BRA    9118
....................             else
....................             {
....................                Output.B5 = 1;
09116:  BSF    x9C.4
....................             }
....................          if (~AutoTestFlag)
09118:  BTFSC  1A.4
0911A:  BRA    913C
....................          {
....................             if(AlarmIndicator.B5 == 1){
0911C:  BTFSS  xA6.4
0911E:  BRA    913C
....................                 if(OutputBoth.B5 == 0)        //Both output
09120:  BTFSC  xA4.4
09122:  BRA    912E
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
09124:  BSF    F89.4
09126:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
09128:  BSF    F89.3
0912A:  BCF    F92.3
....................                 }
0912C:  BRA    913C
....................                 else
....................                 {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
0912E:  BTFSS  xA2.4
09130:  BRA    9138
09132:  BSF    F89.4
09134:  BCF    F92.4
09136:  BRA    913C
....................                   else output_bit(Pbell,1);                          //Bell
09138:  BSF    F89.3
0913A:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0913C:  MOVLW  01
0913E:  MOVLB  C
09140:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
09142:  MOVLB  B
09144:  BTFSC  xB6.4
09146:  BRA    91B6
09148:  BTFSC  30.3
0914A:  BRA    91B6
0914C:  BTFSC  xA8.4
0914E:  BRA    91B6
....................       {
....................          SendSMS.B5 =1;
09150:  BSF    xB6.4
....................          fprintf(CH2,"AT+CMGS=\"");
09152:  MOVLW  B4
09154:  MOVWF  FF6
09156:  MOVLW  08
09158:  MOVWF  FF7
0915A:  MOVLB  0
0915C:  CALL   2EB4
....................          fprintf(CH2,sms_phonenumber);
09160:  MOVLW  09
09162:  MOVWF  FEA
09164:  MOVLW  8B
09166:  MOVWF  FE9
09168:  CALL   6226
....................          
....................          fprintf(CH2,"\"");
0916C:  MOVLW  22
0916E:  MOVLB  C
09170:  MOVWF  x25
09172:  MOVLB  0
09174:  CALL   2E6E
....................          putc('\n',CH2);
09178:  MOVLW  0A
0917A:  MOVLB  C
0917C:  MOVWF  x25
0917E:  MOVLB  0
09180:  CALL   2E6E
....................          delay_ms(50);
09184:  MOVLW  32
09186:  MOVLB  C
09188:  MOVWF  x24
0918A:  MOVLB  0
0918C:  CALL   0936
....................         
....................         fprintf(CH2,SMS_Massage5); 
09190:  MOVLW  0A
09192:  MOVWF  FEA
09194:  MOVLW  1A
09196:  MOVWF  FE9
09198:  CALL   6226
....................         putc('\n',CH2);
0919C:  MOVLW  0A
0919E:  MOVLB  C
091A0:  MOVWF  x25
091A2:  MOVLB  0
091A4:  CALL   2E6E
....................        putc(26,CH2);
091A8:  MOVLW  1A
091AA:  MOVLB  C
091AC:  MOVWF  x25
091AE:  MOVLB  0
091B0:  CALL   2E6E
091B4:  MOVLB  B
....................       }
....................    }
091B6:  BRA    9262
....................    else if(FaultType.B5 == 0)
091B8:  MOVLB  B
091BA:  BTFSC  xA0.4
091BC:  BRA    9262
....................    {
....................       In2.B5 = 0x00;
091BE:  BCF    xAC.4
....................       Ack.B5 = 0;
091C0:  BCF    xA8.4
....................       Output.B5 = 1;      //Off LED
091C2:  BSF    x9C.4
....................       SendSMS.B5 =0;// Clear SMS
091C4:  BCF    xB6.4
....................        
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0)&& inputflag ==0)      //If Buzzer or Both
091C6:  BTFSC  xA2.4
091C8:  BRA    91CE
091CA:  BTFSC  xA4.4
091CC:  BRA    91F0
091CE:  MOVLB  C
091D0:  MOVF   x17,F
091D2:  BTFSC  FD8.2
091D4:  BRA    91DA
091D6:  MOVLB  B
091D8:  BRA    91F0
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
091DA:  MOVLW  01
091DC:  MOVWF  x23
091DE:  MOVLB  0
091E0:  CALL   624C
091E4:  DECFSZ 01,W
091E6:  BRA    91EA
091E8:  BRA    91EE
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
091EA:  BCF    F89.4
091EC:  BCF    F92.4
091EE:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0)&& inputflag ==0)  //If Bell or Both
091F0:  BTFSS  xA2.4
091F2:  BRA    91F8
091F4:  BTFSC  xA4.4
091F6:  BRA    921A
091F8:  MOVLB  C
091FA:  MOVF   x17,F
091FC:  BTFSC  FD8.2
091FE:  BRA    9204
09200:  MOVLB  B
09202:  BRA    921A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09204:  MOVLW  02
09206:  MOVWF  x23
09208:  MOVLB  0
0920A:  CALL   624C
0920E:  DECFSZ 01,W
09210:  BRA    9214
09212:  BRA    9218
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
09214:  BCF    F89.3
09216:  BCF    F92.3
09218:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0921A:  BTFSC  xAC.0
0921C:  BRA    9262
0921E:  BTFSC  xAC.1
09220:  BRA    9262
09222:  BTFSC  xAC.2
09224:  BRA    9262
09226:  BTFSC  xAC.3
09228:  BRA    9262
0922A:  BTFSC  xAC.4
0922C:  BRA    9262
0922E:  BTFSC  xAC.5
09230:  BRA    9262
09232:  BTFSC  xAC.6
09234:  BRA    9262
09236:  BTFSC  xAC.7
09238:  BRA    9262
0923A:  BTFSC  xAD.0
0923C:  BRA    9262
0923E:  BTFSC  xAD.1
09240:  BRA    9262
09242:  BTFSC  xAD.2
09244:  BRA    9262
09246:  BTFSC  xAD.3
09248:  BRA    9262
0924A:  BTFSC  xAD.4
0924C:  BRA    9262
0924E:  BTFSC  xAD.5
09250:  BRA    9262
09252:  BTFSC  xAD.6
09254:  BRA    9262
09256:  BTFSC  xAD.7
09258:  BRA    9262
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0925A:  BCF    F89.3
0925C:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0925E:  BCF    F89.4
09260:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09262:  MOVLW  00
09264:  BTFSC  x9A.5
09266:  MOVLW  01
09268:  MOVLB  C
0926A:  MOVWF  x24
0926C:  MOVLW  00
0926E:  MOVLB  B
09270:  BTFSC  x9E.5
09272:  MOVLW  01
09274:  MOVLB  C
09276:  XORWF  x24,W
09278:  SUBLW  01
0927A:  BNZ   9284
0927C:  MOVLB  B
0927E:  BTFSS  xA0.5
09280:  BRA    928A
09282:  MOVLB  C
09284:  BTFSS  1A.5
09286:  BRA    935A
09288:  MOVLB  B
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
0928A:  BTFSC  xAC.5
0928C:  BRA    92AA
0928E:  MOVLB  0
09290:  MOVF   x6A,W
09292:  SUBLW  0F
09294:  BTFSC  FD8.2
09296:  BRA    929C
09298:  MOVLB  B
0929A:  BRA    92AA
0929C:  MOVLB  B
0929E:  BTFSC  xA8.5
092A0:  BRA    92AA
....................       {
....................             TimeBase1s = 100 ;            //reload again
092A2:  MOVLW  64
092A4:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
092A6:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B6 = 1;
092AA:  BSF    xAC.5
....................       if(Ack.B6 == 0)
092AC:  BTFSC  xA8.5
092AE:  BRA    92DE
....................       {
....................          if(FlashingFlag == 0)
092B0:  BTFSC  1A.1
092B2:  BRA    92B8
....................             {
....................                Output.B6 = 0;           //Flash output1
092B4:  BCF    x9C.5
....................             }
092B6:  BRA    92BA
....................             else
....................             {
....................                Output.B6 = 1;
092B8:  BSF    x9C.5
....................             }
....................          if (~AutoTestFlag)
092BA:  BTFSC  1A.4
092BC:  BRA    92DE
....................          {
....................             if(AlarmIndicator.B6 == 1){
092BE:  BTFSS  xA6.5
092C0:  BRA    92DE
....................                 if(OutputBoth.B6 == 0)        //Both output
092C2:  BTFSC  xA4.5
092C4:  BRA    92D0
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
092C6:  BSF    F89.4
092C8:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
092CA:  BSF    F89.3
092CC:  BCF    F92.3
....................                 }
092CE:  BRA    92DE
....................                 else
....................                 {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
092D0:  BTFSS  xA2.5
092D2:  BRA    92DA
092D4:  BSF    F89.4
092D6:  BCF    F92.4
092D8:  BRA    92DE
....................                   else output_bit(Pbell,1);                          //Bell
092DA:  BSF    F89.3
092DC:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
092DE:  MOVLW  01
092E0:  MOVLB  C
092E2:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
092E4:  MOVLB  B
092E6:  BTFSC  xB6.5
092E8:  BRA    9358
092EA:  BTFSC  30.3
092EC:  BRA    9358
092EE:  BTFSC  xA8.5
092F0:  BRA    9358
....................       {
....................          SendSMS.B6 =1;
092F2:  BSF    xB6.5
....................          fprintf(CH2,"AT+CMGS=\"");
092F4:  MOVLW  BE
092F6:  MOVWF  FF6
092F8:  MOVLW  08
092FA:  MOVWF  FF7
092FC:  MOVLB  0
092FE:  CALL   2EB4
....................          fprintf(CH2,sms_phonenumber);
09302:  MOVLW  09
09304:  MOVWF  FEA
09306:  MOVLW  8B
09308:  MOVWF  FE9
0930A:  CALL   6226
....................          
....................          fprintf(CH2,"\"");
0930E:  MOVLW  22
09310:  MOVLB  C
09312:  MOVWF  x25
09314:  MOVLB  0
09316:  CALL   2E6E
....................          putc('\n',CH2);
0931A:  MOVLW  0A
0931C:  MOVLB  C
0931E:  MOVWF  x25
09320:  MOVLB  0
09322:  CALL   2E6E
....................          delay_ms(50);
09326:  MOVLW  32
09328:  MOVLB  C
0932A:  MOVWF  x24
0932C:  MOVLB  0
0932E:  CALL   0936
....................         
....................         fprintf(CH2,SMS_Massage6);  
09332:  MOVLW  0A
09334:  MOVWF  FEA
09336:  MOVLW  3A
09338:  MOVWF  FE9
0933A:  CALL   6226
....................         putc('\n',CH2);
0933E:  MOVLW  0A
09340:  MOVLB  C
09342:  MOVWF  x25
09344:  MOVLB  0
09346:  CALL   2E6E
....................        putc(26,CH2);
0934A:  MOVLW  1A
0934C:  MOVLB  C
0934E:  MOVWF  x25
09350:  MOVLB  0
09352:  CALL   2E6E
09356:  MOVLB  B
....................       }
....................    }
09358:  BRA    9404
....................    else if(FaultType.B6 == 0)
0935A:  MOVLB  B
0935C:  BTFSC  xA0.5
0935E:  BRA    9404
....................    {
....................       In2.B6 = 0x00;
09360:  BCF    xAC.5
....................       Ack.B6 = 0;
09362:  BCF    xA8.5
....................       Output.B6 = 1;      //Off LED
09364:  BSF    x9C.5
....................       SendSMS.B6 =0;// Clear SMS
09366:  BCF    xB6.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)      //If Buzzer or Both
09368:  BTFSC  xA2.5
0936A:  BRA    9370
0936C:  BTFSC  xA4.5
0936E:  BRA    9392
09370:  MOVLB  C
09372:  MOVF   x17,F
09374:  BTFSC  FD8.2
09376:  BRA    937C
09378:  MOVLB  B
0937A:  BRA    9392
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0937C:  MOVLW  01
0937E:  MOVWF  x23
09380:  MOVLB  0
09382:  CALL   624C
09386:  DECFSZ 01,W
09388:  BRA    938C
0938A:  BRA    9390
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0938C:  BCF    F89.4
0938E:  BCF    F92.4
09390:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)  //If Bell or Both
09392:  BTFSS  xA2.5
09394:  BRA    939A
09396:  BTFSC  xA4.5
09398:  BRA    93BC
0939A:  MOVLB  C
0939C:  MOVF   x17,F
0939E:  BTFSC  FD8.2
093A0:  BRA    93A6
093A2:  MOVLB  B
093A4:  BRA    93BC
....................       {
....................          if(CheckAutoReset(0x02) == 1);
093A6:  MOVLW  02
093A8:  MOVWF  x23
093AA:  MOVLB  0
093AC:  CALL   624C
093B0:  DECFSZ 01,W
093B2:  BRA    93B6
093B4:  BRA    93BA
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
093B6:  BCF    F89.3
093B8:  BCF    F92.3
093BA:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
093BC:  BTFSC  xAC.0
093BE:  BRA    9404
093C0:  BTFSC  xAC.1
093C2:  BRA    9404
093C4:  BTFSC  xAC.2
093C6:  BRA    9404
093C8:  BTFSC  xAC.3
093CA:  BRA    9404
093CC:  BTFSC  xAC.4
093CE:  BRA    9404
093D0:  BTFSC  xAC.5
093D2:  BRA    9404
093D4:  BTFSC  xAC.6
093D6:  BRA    9404
093D8:  BTFSC  xAC.7
093DA:  BRA    9404
093DC:  BTFSC  xAD.0
093DE:  BRA    9404
093E0:  BTFSC  xAD.1
093E2:  BRA    9404
093E4:  BTFSC  xAD.2
093E6:  BRA    9404
093E8:  BTFSC  xAD.3
093EA:  BRA    9404
093EC:  BTFSC  xAD.4
093EE:  BRA    9404
093F0:  BTFSC  xAD.5
093F2:  BRA    9404
093F4:  BTFSC  xAD.6
093F6:  BRA    9404
093F8:  BTFSC  xAD.7
093FA:  BRA    9404
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
093FC:  BCF    F89.3
093FE:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
09400:  BCF    F89.4
09402:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09404:  MOVLW  00
09406:  BTFSC  x9A.6
09408:  MOVLW  01
0940A:  MOVLB  C
0940C:  MOVWF  x24
0940E:  MOVLW  00
09410:  MOVLB  B
09412:  BTFSC  x9E.6
09414:  MOVLW  01
09416:  MOVLB  C
09418:  XORWF  x24,W
0941A:  SUBLW  01
0941C:  BNZ   9426
0941E:  MOVLB  B
09420:  BTFSS  xA0.6
09422:  BRA    942C
09424:  MOVLB  C
09426:  BTFSS  1A.5
09428:  BRA    94FC
0942A:  MOVLB  B
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
0942C:  BTFSC  xAC.6
0942E:  BRA    944C
09430:  MOVLB  0
09432:  MOVF   x6A,W
09434:  SUBLW  0F
09436:  BTFSC  FD8.2
09438:  BRA    943E
0943A:  MOVLB  B
0943C:  BRA    944C
0943E:  MOVLB  B
09440:  BTFSC  xA8.6
09442:  BRA    944C
....................       {
....................             TimeBase1s = 100 ;            //reload again
09444:  MOVLW  64
09446:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09448:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B7 = 1;
0944C:  BSF    xAC.6
....................       if(Ack.B7 == 0)
0944E:  BTFSC  xA8.6
09450:  BRA    9480
....................       {
....................          if(FlashingFlag == 0)
09452:  BTFSC  1A.1
09454:  BRA    945A
....................             {
....................                Output.B7 = 0;           //Flash output1
09456:  BCF    x9C.6
....................             }
09458:  BRA    945C
....................             else
....................             {
....................                Output.B7 = 1;
0945A:  BSF    x9C.6
....................             }
....................          if (~AutoTestFlag)
0945C:  BTFSC  1A.4
0945E:  BRA    9480
....................          {
....................             if(AlarmIndicator.B7 == 1){
09460:  BTFSS  xA6.6
09462:  BRA    9480
....................                 if(OutputBoth.B7 == 0)        //Both output
09464:  BTFSC  xA4.6
09466:  BRA    9472
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
09468:  BSF    F89.4
0946A:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0946C:  BSF    F89.3
0946E:  BCF    F92.3
....................                 }
09470:  BRA    9480
....................                 else
....................                 {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
09472:  BTFSS  xA2.6
09474:  BRA    947C
09476:  BSF    F89.4
09478:  BCF    F92.4
0947A:  BRA    9480
....................                   else output_bit(Pbell,1);                          //Bell
0947C:  BSF    F89.3
0947E:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09480:  MOVLW  01
09482:  MOVLB  C
09484:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
09486:  MOVLB  B
09488:  BTFSC  xB6.6
0948A:  BRA    94FA
0948C:  BTFSC  30.3
0948E:  BRA    94FA
09490:  BTFSC  xA8.6
09492:  BRA    94FA
....................       {
....................          SendSMS.B7 =1;
09494:  BSF    xB6.6
....................          fprintf(CH2,"AT+CMGS=\"");
09496:  MOVLW  C8
09498:  MOVWF  FF6
0949A:  MOVLW  08
0949C:  MOVWF  FF7
0949E:  MOVLB  0
094A0:  CALL   2EB4
....................          fprintf(CH2,sms_phonenumber);
094A4:  MOVLW  09
094A6:  MOVWF  FEA
094A8:  MOVLW  8B
094AA:  MOVWF  FE9
094AC:  CALL   6226
....................          
....................          fprintf(CH2,"\"");
094B0:  MOVLW  22
094B2:  MOVLB  C
094B4:  MOVWF  x25
094B6:  MOVLB  0
094B8:  CALL   2E6E
....................          putc('\n',CH2);
094BC:  MOVLW  0A
094BE:  MOVLB  C
094C0:  MOVWF  x25
094C2:  MOVLB  0
094C4:  CALL   2E6E
....................          delay_ms(50);
094C8:  MOVLW  32
094CA:  MOVLB  C
094CC:  MOVWF  x24
094CE:  MOVLB  0
094D0:  CALL   0936
....................         
....................         fprintf(CH2,SMS_Massage7);  
094D4:  MOVLW  0A
094D6:  MOVWF  FEA
094D8:  MOVLW  5A
094DA:  MOVWF  FE9
094DC:  CALL   6226
....................         putc('\n',CH2);
094E0:  MOVLW  0A
094E2:  MOVLB  C
094E4:  MOVWF  x25
094E6:  MOVLB  0
094E8:  CALL   2E6E
....................        putc(26,CH2);
094EC:  MOVLW  1A
094EE:  MOVLB  C
094F0:  MOVWF  x25
094F2:  MOVLB  0
094F4:  CALL   2E6E
094F8:  MOVLB  B
....................       }
....................    }
094FA:  BRA    95A6
....................    else if(FaultType.B7 == 0)
094FC:  MOVLB  B
094FE:  BTFSC  xA0.6
09500:  BRA    95A6
....................    {
....................       In2.B7 = 0x00;
09502:  BCF    xAC.6
....................       Ack.B7 = 0;
09504:  BCF    xA8.6
....................       Output.B7 = 1;      //Off LED
09506:  BSF    x9C.6
....................       SendSMS.B7 =0;// Clear SMS
09508:  BCF    xB6.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)      //If Buzzer or Both
0950A:  BTFSC  xA2.6
0950C:  BRA    9512
0950E:  BTFSC  xA4.6
09510:  BRA    9534
09512:  MOVLB  C
09514:  MOVF   x17,F
09516:  BTFSC  FD8.2
09518:  BRA    951E
0951A:  MOVLB  B
0951C:  BRA    9534
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0951E:  MOVLW  01
09520:  MOVWF  x23
09522:  MOVLB  0
09524:  CALL   624C
09528:  DECFSZ 01,W
0952A:  BRA    952E
0952C:  BRA    9532
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0952E:  BCF    F89.4
09530:  BCF    F92.4
09532:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)  //If Bell or Both
09534:  BTFSS  xA2.6
09536:  BRA    953C
09538:  BTFSC  xA4.6
0953A:  BRA    955E
0953C:  MOVLB  C
0953E:  MOVF   x17,F
09540:  BTFSC  FD8.2
09542:  BRA    9548
09544:  MOVLB  B
09546:  BRA    955E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09548:  MOVLW  02
0954A:  MOVWF  x23
0954C:  MOVLB  0
0954E:  CALL   624C
09552:  DECFSZ 01,W
09554:  BRA    9558
09556:  BRA    955C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
09558:  BCF    F89.3
0955A:  BCF    F92.3
0955C:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0955E:  BTFSC  xAC.0
09560:  BRA    95A6
09562:  BTFSC  xAC.1
09564:  BRA    95A6
09566:  BTFSC  xAC.2
09568:  BRA    95A6
0956A:  BTFSC  xAC.3
0956C:  BRA    95A6
0956E:  BTFSC  xAC.4
09570:  BRA    95A6
09572:  BTFSC  xAC.5
09574:  BRA    95A6
09576:  BTFSC  xAC.6
09578:  BRA    95A6
0957A:  BTFSC  xAC.7
0957C:  BRA    95A6
0957E:  BTFSC  xAD.0
09580:  BRA    95A6
09582:  BTFSC  xAD.1
09584:  BRA    95A6
09586:  BTFSC  xAD.2
09588:  BRA    95A6
0958A:  BTFSC  xAD.3
0958C:  BRA    95A6
0958E:  BTFSC  xAD.4
09590:  BRA    95A6
09592:  BTFSC  xAD.5
09594:  BRA    95A6
09596:  BTFSC  xAD.6
09598:  BRA    95A6
0959A:  BTFSC  xAD.7
0959C:  BRA    95A6
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0959E:  BCF    F89.3
095A0:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
095A2:  BCF    F89.4
095A4:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
095A6:  MOVLW  00
095A8:  BTFSC  x9A.7
095AA:  MOVLW  01
095AC:  MOVLB  C
095AE:  MOVWF  x24
095B0:  MOVLW  00
095B2:  MOVLB  B
095B4:  BTFSC  x9E.7
095B6:  MOVLW  01
095B8:  MOVLB  C
095BA:  XORWF  x24,W
095BC:  SUBLW  01
095BE:  BNZ   95C8
095C0:  MOVLB  B
095C2:  BTFSS  xA0.7
095C4:  BRA    95CE
095C6:  MOVLB  C
095C8:  BTFSS  1A.5
095CA:  BRA    969E
095CC:  MOVLB  B
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
095CE:  BTFSC  xAC.7
095D0:  BRA    95EE
095D2:  MOVLB  0
095D4:  MOVF   x6A,W
095D6:  SUBLW  0F
095D8:  BTFSC  FD8.2
095DA:  BRA    95E0
095DC:  MOVLB  B
095DE:  BRA    95EE
095E0:  MOVLB  B
095E2:  BTFSC  xA8.7
095E4:  BRA    95EE
....................       {
....................             TimeBase1s = 100 ;            //reload again
095E6:  MOVLW  64
095E8:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
095EA:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B8 = 1;
095EE:  BSF    xAC.7
....................       if(Ack.B8 == 0)
095F0:  BTFSC  xA8.7
095F2:  BRA    9622
....................       {
....................          if(FlashingFlag == 0)
095F4:  BTFSC  1A.1
095F6:  BRA    95FC
....................             {
....................                Output.B8 = 0;           //Flash output1
095F8:  BCF    x9C.7
....................             }
095FA:  BRA    95FE
....................             else
....................             {
....................                Output.B8 = 1;
095FC:  BSF    x9C.7
....................             }
....................          if (~AutoTestFlag)
095FE:  BTFSC  1A.4
09600:  BRA    9622
....................          {
....................             if(AlarmIndicator.B8 == 1){
09602:  BTFSS  xA6.7
09604:  BRA    9622
....................                 if(OutputBoth.B8 == 0)        //Both output
09606:  BTFSC  xA4.7
09608:  BRA    9614
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0960A:  BSF    F89.4
0960C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0960E:  BSF    F89.3
09610:  BCF    F92.3
....................                 }
09612:  BRA    9622
....................                 else
....................                 {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
09614:  BTFSS  xA2.7
09616:  BRA    961E
09618:  BSF    F89.4
0961A:  BCF    F92.4
0961C:  BRA    9622
....................                   else output_bit(Pbell,1);                          //Bell
0961E:  BSF    F89.3
09620:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09622:  MOVLW  01
09624:  MOVLB  C
09626:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B8 ==0) && (functointest_f ==0) && (Ack.B8 ==0))
09628:  MOVLB  B
0962A:  BTFSC  xB6.7
0962C:  BRA    969C
0962E:  BTFSC  30.3
09630:  BRA    969C
09632:  BTFSC  xA8.7
09634:  BRA    969C
....................       {
....................          SendSMS.B8 =1;
09636:  BSF    xB6.7
....................          fprintf(CH2,"AT+CMGS=\"");
09638:  MOVLW  D2
0963A:  MOVWF  FF6
0963C:  MOVLW  08
0963E:  MOVWF  FF7
09640:  MOVLB  0
09642:  CALL   2EB4
....................          fprintf(CH2,sms_phonenumber);
09646:  MOVLW  09
09648:  MOVWF  FEA
0964A:  MOVLW  8B
0964C:  MOVWF  FE9
0964E:  CALL   6226
....................          
....................          fprintf(CH2,"\"");
09652:  MOVLW  22
09654:  MOVLB  C
09656:  MOVWF  x25
09658:  MOVLB  0
0965A:  CALL   2E6E
....................          putc('\n',CH2);
0965E:  MOVLW  0A
09660:  MOVLB  C
09662:  MOVWF  x25
09664:  MOVLB  0
09666:  CALL   2E6E
....................          delay_ms(50);
0966A:  MOVLW  32
0966C:  MOVLB  C
0966E:  MOVWF  x24
09670:  MOVLB  0
09672:  CALL   0936
....................         
....................         fprintf(CH2,SMS_Massage8);   
09676:  MOVLW  0A
09678:  MOVWF  FEA
0967A:  MOVLW  7A
0967C:  MOVWF  FE9
0967E:  CALL   6226
....................         putc('\n',CH2);
09682:  MOVLW  0A
09684:  MOVLB  C
09686:  MOVWF  x25
09688:  MOVLB  0
0968A:  CALL   2E6E
....................         putc(26,CH2);
0968E:  MOVLW  1A
09690:  MOVLB  C
09692:  MOVWF  x25
09694:  MOVLB  0
09696:  CALL   2E6E
0969A:  MOVLB  B
....................       }
....................    }
0969C:  BRA    9748
....................    else if(FaultType.B8 == 0)
0969E:  MOVLB  B
096A0:  BTFSC  xA0.7
096A2:  BRA    9748
....................    {
....................       In2.B8 = 0x00;
096A4:  BCF    xAC.7
....................       Ack.B8 = 0;
096A6:  BCF    xA8.7
....................       Output.B8 = 1;      //Off LED
096A8:  BSF    x9C.7
....................       SendSMS.B8 =0;// Clear SMS
096AA:  BCF    xB6.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)      //If Buzzer or Both
096AC:  BTFSC  xA2.7
096AE:  BRA    96B4
096B0:  BTFSC  xA4.7
096B2:  BRA    96D6
096B4:  MOVLB  C
096B6:  MOVF   x17,F
096B8:  BTFSC  FD8.2
096BA:  BRA    96C0
096BC:  MOVLB  B
096BE:  BRA    96D6
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
096C0:  MOVLW  01
096C2:  MOVWF  x23
096C4:  MOVLB  0
096C6:  CALL   624C
096CA:  DECFSZ 01,W
096CC:  BRA    96D0
096CE:  BRA    96D4
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
096D0:  BCF    F89.4
096D2:  BCF    F92.4
096D4:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)  //If Bell or Both
096D6:  BTFSS  xA2.7
096D8:  BRA    96DE
096DA:  BTFSC  xA4.7
096DC:  BRA    9700
096DE:  MOVLB  C
096E0:  MOVF   x17,F
096E2:  BTFSC  FD8.2
096E4:  BRA    96EA
096E6:  MOVLB  B
096E8:  BRA    9700
....................       {
....................          if(CheckAutoReset(0x02) == 1);
096EA:  MOVLW  02
096EC:  MOVWF  x23
096EE:  MOVLB  0
096F0:  CALL   624C
096F4:  DECFSZ 01,W
096F6:  BRA    96FA
096F8:  BRA    96FE
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
096FA:  BCF    F89.3
096FC:  BCF    F92.3
096FE:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
09700:  BTFSC  xAC.0
09702:  BRA    9748
09704:  BTFSC  xAC.1
09706:  BRA    9748
09708:  BTFSC  xAC.2
0970A:  BRA    9748
0970C:  BTFSC  xAC.3
0970E:  BRA    9748
09710:  BTFSC  xAC.4
09712:  BRA    9748
09714:  BTFSC  xAC.5
09716:  BRA    9748
09718:  BTFSC  xAC.6
0971A:  BRA    9748
0971C:  BTFSC  xAC.7
0971E:  BRA    9748
09720:  BTFSC  xAD.0
09722:  BRA    9748
09724:  BTFSC  xAD.1
09726:  BRA    9748
09728:  BTFSC  xAD.2
0972A:  BRA    9748
0972C:  BTFSC  xAD.3
0972E:  BRA    9748
09730:  BTFSC  xAD.4
09732:  BRA    9748
09734:  BTFSC  xAD.5
09736:  BRA    9748
09738:  BTFSC  xAD.6
0973A:  BRA    9748
0973C:  BTFSC  xAD.7
0973E:  BRA    9748
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
09740:  BCF    F89.3
09742:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
09744:  BCF    F89.4
09746:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09748:  MOVLW  00
0974A:  BTFSC  x9B.0
0974C:  MOVLW  01
0974E:  MOVLB  C
09750:  MOVWF  x24
09752:  MOVLW  00
09754:  MOVLB  B
09756:  BTFSC  x9F.0
09758:  MOVLW  01
0975A:  MOVLB  C
0975C:  XORWF  x24,W
0975E:  SUBLW  01
09760:  BNZ   976A
09762:  MOVLB  B
09764:  BTFSS  xA1.0
09766:  BRA    9770
09768:  MOVLB  C
0976A:  BTFSS  1A.5
0976C:  BRA    9840
0976E:  MOVLB  B
....................    {
....................       if(In2.B9 == 0 && AutoAck == 0x0F && Ack.B9 == 0)   //use auto acknowlegde
09770:  BTFSC  xAD.0
09772:  BRA    9790
09774:  MOVLB  0
09776:  MOVF   x6A,W
09778:  SUBLW  0F
0977A:  BTFSC  FD8.2
0977C:  BRA    9782
0977E:  MOVLB  B
09780:  BRA    9790
09782:  MOVLB  B
09784:  BTFSC  xA9.0
09786:  BRA    9790
....................       {
....................             TimeBase1s = 100 ;            //reload again
09788:  MOVLW  64
0978A:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0978C:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B9 = 1;
09790:  BSF    xAD.0
....................       if(Ack.B9 == 0)
09792:  BTFSC  xA9.0
09794:  BRA    97C4
....................       {
....................          if(FlashingFlag == 0)
09796:  BTFSC  1A.1
09798:  BRA    979E
....................             {
....................                Output.B9 = 0;           //Flash output1
0979A:  BCF    x9D.0
....................             }
0979C:  BRA    97A0
....................             else
....................             {
....................                Output.B9 = 1;
0979E:  BSF    x9D.0
....................             }
....................          if (~AutoTestFlag)
097A0:  BTFSC  1A.4
097A2:  BRA    97C4
....................          {
....................             if(AlarmIndicator.B9 == 1){
097A4:  BTFSS  xA7.0
097A6:  BRA    97C4
....................                 if(OutputBoth.B9 == 0)        //Both output
097A8:  BTFSC  xA5.0
097AA:  BRA    97B6
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
097AC:  BSF    F89.4
097AE:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
097B0:  BSF    F89.3
097B2:  BCF    F92.3
....................                 }
097B4:  BRA    97C4
....................                 else
....................                 {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
097B6:  BTFSS  xA3.0
097B8:  BRA    97C0
097BA:  BSF    F89.4
097BC:  BCF    F92.4
097BE:  BRA    97C4
....................                   else output_bit(Pbell,1);                          //Bell
097C0:  BSF    F89.3
097C2:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
097C4:  MOVLW  01
097C6:  MOVLB  C
097C8:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B9 ==0) && (functointest_f ==0) && (Ack.B9 ==0))
097CA:  MOVLB  B
097CC:  BTFSC  xB7.0
097CE:  BRA    983E
097D0:  BTFSC  30.3
097D2:  BRA    983E
097D4:  BTFSC  xA9.0
097D6:  BRA    983E
....................       {
....................          SendSMS.B9 =1;
097D8:  BSF    xB7.0
....................          fprintf(CH2,"AT+CMGS=\"");
097DA:  MOVLW  DC
097DC:  MOVWF  FF6
097DE:  MOVLW  08
097E0:  MOVWF  FF7
097E2:  MOVLB  0
097E4:  CALL   2EB4
....................          fprintf(CH2,sms_phonenumber);
097E8:  MOVLW  09
097EA:  MOVWF  FEA
097EC:  MOVLW  8B
097EE:  MOVWF  FE9
097F0:  CALL   6226
....................          
....................          fprintf(CH2,"\"");
097F4:  MOVLW  22
097F6:  MOVLB  C
097F8:  MOVWF  x25
097FA:  MOVLB  0
097FC:  CALL   2E6E
....................          putc('\n',CH2);
09800:  MOVLW  0A
09802:  MOVLB  C
09804:  MOVWF  x25
09806:  MOVLB  0
09808:  CALL   2E6E
....................          delay_ms(50);
0980C:  MOVLW  32
0980E:  MOVLB  C
09810:  MOVWF  x24
09812:  MOVLB  0
09814:  CALL   0936
....................         
....................         fprintf(CH2,SMS_Massage9);   
09818:  MOVLW  0A
0981A:  MOVWF  FEA
0981C:  MOVLW  9A
0981E:  MOVWF  FE9
09820:  CALL   6226
....................         putc('\n',CH2);
09824:  MOVLW  0A
09826:  MOVLB  C
09828:  MOVWF  x25
0982A:  MOVLB  0
0982C:  CALL   2E6E
....................         putc(26,CH2);
09830:  MOVLW  1A
09832:  MOVLB  C
09834:  MOVWF  x25
09836:  MOVLB  0
09838:  CALL   2E6E
0983C:  MOVLB  B
....................       }
....................    }
0983E:  BRA    98EA
....................    else if(FaultType.B9 == 0)
09840:  MOVLB  B
09842:  BTFSC  xA1.0
09844:  BRA    98EA
....................    {
....................       In2.B9 = 0x00;
09846:  BCF    xAD.0
....................       Ack.B9 = 0;
09848:  BCF    xA9.0
....................       Output.B9 = 1;      //Off LED
0984A:  BSF    x9D.0
....................       SendSMS.B9 =0;// Clear SMS
0984C:  BCF    xB7.0
.................... 
....................       if((OutputType.B9 == 1 || OutputBoth.B9 == 0)&& inputflag ==0)      //If Buzzer or Both
0984E:  BTFSC  xA3.0
09850:  BRA    9856
09852:  BTFSC  xA5.0
09854:  BRA    9878
09856:  MOVLB  C
09858:  MOVF   x17,F
0985A:  BTFSC  FD8.2
0985C:  BRA    9862
0985E:  MOVLB  B
09860:  BRA    9878
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
09862:  MOVLW  01
09864:  MOVWF  x23
09866:  MOVLB  0
09868:  CALL   624C
0986C:  DECFSZ 01,W
0986E:  BRA    9872
09870:  BRA    9876
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
09872:  BCF    F89.4
09874:  BCF    F92.4
09876:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B9 == 0 || OutputBoth.B9 == 0)&& inputflag ==0)  //If Bell or Both
09878:  BTFSS  xA3.0
0987A:  BRA    9880
0987C:  BTFSC  xA5.0
0987E:  BRA    98A2
09880:  MOVLB  C
09882:  MOVF   x17,F
09884:  BTFSC  FD8.2
09886:  BRA    988C
09888:  MOVLB  B
0988A:  BRA    98A2
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0988C:  MOVLW  02
0988E:  MOVWF  x23
09890:  MOVLB  0
09892:  CALL   624C
09896:  DECFSZ 01,W
09898:  BRA    989C
0989A:  BRA    98A0
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0989C:  BCF    F89.3
0989E:  BCF    F92.3
098A0:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
098A2:  BTFSC  xAC.0
098A4:  BRA    98EA
098A6:  BTFSC  xAC.1
098A8:  BRA    98EA
098AA:  BTFSC  xAC.2
098AC:  BRA    98EA
098AE:  BTFSC  xAC.3
098B0:  BRA    98EA
098B2:  BTFSC  xAC.4
098B4:  BRA    98EA
098B6:  BTFSC  xAC.5
098B8:  BRA    98EA
098BA:  BTFSC  xAC.6
098BC:  BRA    98EA
098BE:  BTFSC  xAC.7
098C0:  BRA    98EA
098C2:  BTFSC  xAD.0
098C4:  BRA    98EA
098C6:  BTFSC  xAD.1
098C8:  BRA    98EA
098CA:  BTFSC  xAD.2
098CC:  BRA    98EA
098CE:  BTFSC  xAD.3
098D0:  BRA    98EA
098D2:  BTFSC  xAD.4
098D4:  BRA    98EA
098D6:  BTFSC  xAD.5
098D8:  BRA    98EA
098DA:  BTFSC  xAD.6
098DC:  BRA    98EA
098DE:  BTFSC  xAD.7
098E0:  BRA    98EA
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
098E2:  BCF    F89.3
098E4:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
098E6:  BCF    F89.4
098E8:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
098EA:  MOVLW  00
098EC:  BTFSC  x9B.1
098EE:  MOVLW  01
098F0:  MOVLB  C
098F2:  MOVWF  x24
098F4:  MOVLW  00
098F6:  MOVLB  B
098F8:  BTFSC  x9F.1
098FA:  MOVLW  01
098FC:  MOVLB  C
098FE:  XORWF  x24,W
09900:  SUBLW  01
09902:  BNZ   990C
09904:  MOVLB  B
09906:  BTFSS  xA1.1
09908:  BRA    9912
0990A:  MOVLB  C
0990C:  BTFSS  1A.5
0990E:  BRA    99E2
09910:  MOVLB  B
....................    {
....................       if(In2.B10 == 0 && AutoAck == 0x0F && Ack.B10 == 0)   //use auto acknowlegde
09912:  BTFSC  xAD.1
09914:  BRA    9932
09916:  MOVLB  0
09918:  MOVF   x6A,W
0991A:  SUBLW  0F
0991C:  BTFSC  FD8.2
0991E:  BRA    9924
09920:  MOVLB  B
09922:  BRA    9932
09924:  MOVLB  B
09926:  BTFSC  xA9.1
09928:  BRA    9932
....................       {
....................             TimeBase1s = 100 ;            //reload again
0992A:  MOVLW  64
0992C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0992E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B10 = 1;
09932:  BSF    xAD.1
....................       if(Ack.B10 == 0)
09934:  BTFSC  xA9.1
09936:  BRA    9966
....................       {
....................          if(FlashingFlag == 0)
09938:  BTFSC  1A.1
0993A:  BRA    9940
....................             {
....................                Output.B10 = 0;           //Flash output1
0993C:  BCF    x9D.1
....................             }
0993E:  BRA    9942
....................             else
....................             {
....................                Output.B10 = 1;
09940:  BSF    x9D.1
....................             }
....................          if (~AutoTestFlag)
09942:  BTFSC  1A.4
09944:  BRA    9966
....................          {
....................             if(AlarmIndicator.B10 == 1){
09946:  BTFSS  xA7.1
09948:  BRA    9966
....................                 if(OutputBoth.B10 == 0)        //Both output
0994A:  BTFSC  xA5.1
0994C:  BRA    9958
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0994E:  BSF    F89.4
09950:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
09952:  BSF    F89.3
09954:  BCF    F92.3
....................                 }
09956:  BRA    9966
....................                 else
....................                 {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
09958:  BTFSS  xA3.1
0995A:  BRA    9962
0995C:  BSF    F89.4
0995E:  BCF    F92.4
09960:  BRA    9966
....................                   else output_bit(Pbell,1);                          //Bell
09962:  BSF    F89.3
09964:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09966:  MOVLW  01
09968:  MOVLB  C
0996A:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B10 ==0) && (functointest_f ==0) && (Ack.B10 ==0))
0996C:  MOVLB  B
0996E:  BTFSC  xB7.1
09970:  BRA    99E0
09972:  BTFSC  30.3
09974:  BRA    99E0
09976:  BTFSC  xA9.1
09978:  BRA    99E0
....................       {
....................          SendSMS.B10 =1;
0997A:  BSF    xB7.1
....................          fprintf(CH2,"AT+CMGS=\"");
0997C:  MOVLW  E6
0997E:  MOVWF  FF6
09980:  MOVLW  08
09982:  MOVWF  FF7
09984:  MOVLB  0
09986:  CALL   2EB4
....................          fprintf(CH2,sms_phonenumber);
0998A:  MOVLW  09
0998C:  MOVWF  FEA
0998E:  MOVLW  8B
09990:  MOVWF  FE9
09992:  CALL   6226
....................          
....................          fprintf(CH2,"\"");
09996:  MOVLW  22
09998:  MOVLB  C
0999A:  MOVWF  x25
0999C:  MOVLB  0
0999E:  CALL   2E6E
....................          putc('\n',CH2);
099A2:  MOVLW  0A
099A4:  MOVLB  C
099A6:  MOVWF  x25
099A8:  MOVLB  0
099AA:  CALL   2E6E
....................          delay_ms(50);
099AE:  MOVLW  32
099B0:  MOVLB  C
099B2:  MOVWF  x24
099B4:  MOVLB  0
099B6:  CALL   0936
....................         
....................         fprintf(CH2,SMS_Massage10);   
099BA:  MOVLW  0A
099BC:  MOVWF  FEA
099BE:  MOVLW  BA
099C0:  MOVWF  FE9
099C2:  CALL   6226
....................         putc('\n',CH2);
099C6:  MOVLW  0A
099C8:  MOVLB  C
099CA:  MOVWF  x25
099CC:  MOVLB  0
099CE:  CALL   2E6E
....................         putc(26,CH2);
099D2:  MOVLW  1A
099D4:  MOVLB  C
099D6:  MOVWF  x25
099D8:  MOVLB  0
099DA:  CALL   2E6E
099DE:  MOVLB  B
....................       }
....................    }
099E0:  BRA    9A8C
....................    else if(FaultType.B10 == 0)
099E2:  MOVLB  B
099E4:  BTFSC  xA1.1
099E6:  BRA    9A8C
....................    {
....................       In2.B10 = 0x00;
099E8:  BCF    xAD.1
....................       Ack.B10 = 0;
099EA:  BCF    xA9.1
....................       Output.B10 = 1;      //Off LED
099EC:  BSF    x9D.1
....................       SendSMS.B10 =0;// Clear SMS
099EE:  BCF    xB7.1
.................... 
....................       if((OutputType.B10 == 1 || OutputBoth.B10 == 0)&& inputflag ==0)      //If Buzzer or Both
099F0:  BTFSC  xA3.1
099F2:  BRA    99F8
099F4:  BTFSC  xA5.1
099F6:  BRA    9A1A
099F8:  MOVLB  C
099FA:  MOVF   x17,F
099FC:  BTFSC  FD8.2
099FE:  BRA    9A04
09A00:  MOVLB  B
09A02:  BRA    9A1A
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
09A04:  MOVLW  01
09A06:  MOVWF  x23
09A08:  MOVLB  0
09A0A:  CALL   624C
09A0E:  DECFSZ 01,W
09A10:  BRA    9A14
09A12:  BRA    9A18
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
09A14:  BCF    F89.4
09A16:  BCF    F92.4
09A18:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B10 == 0 || OutputBoth.B10 == 0)&& inputflag ==0)  //If Bell or Both
09A1A:  BTFSS  xA3.1
09A1C:  BRA    9A22
09A1E:  BTFSC  xA5.1
09A20:  BRA    9A44
09A22:  MOVLB  C
09A24:  MOVF   x17,F
09A26:  BTFSC  FD8.2
09A28:  BRA    9A2E
09A2A:  MOVLB  B
09A2C:  BRA    9A44
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09A2E:  MOVLW  02
09A30:  MOVWF  x23
09A32:  MOVLB  0
09A34:  CALL   624C
09A38:  DECFSZ 01,W
09A3A:  BRA    9A3E
09A3C:  BRA    9A42
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
09A3E:  BCF    F89.3
09A40:  BCF    F92.3
09A42:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
09A44:  BTFSC  xAC.0
09A46:  BRA    9A8C
09A48:  BTFSC  xAC.1
09A4A:  BRA    9A8C
09A4C:  BTFSC  xAC.2
09A4E:  BRA    9A8C
09A50:  BTFSC  xAC.3
09A52:  BRA    9A8C
09A54:  BTFSC  xAC.4
09A56:  BRA    9A8C
09A58:  BTFSC  xAC.5
09A5A:  BRA    9A8C
09A5C:  BTFSC  xAC.6
09A5E:  BRA    9A8C
09A60:  BTFSC  xAC.7
09A62:  BRA    9A8C
09A64:  BTFSC  xAD.0
09A66:  BRA    9A8C
09A68:  BTFSC  xAD.1
09A6A:  BRA    9A8C
09A6C:  BTFSC  xAD.2
09A6E:  BRA    9A8C
09A70:  BTFSC  xAD.3
09A72:  BRA    9A8C
09A74:  BTFSC  xAD.4
09A76:  BRA    9A8C
09A78:  BTFSC  xAD.5
09A7A:  BRA    9A8C
09A7C:  BTFSC  xAD.6
09A7E:  BRA    9A8C
09A80:  BTFSC  xAD.7
09A82:  BRA    9A8C
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
09A84:  BCF    F89.3
09A86:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
09A88:  BCF    F89.4
09A8A:  BCF    F92.4
....................       }
....................    }
....................    
.................... //}
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09A8C:  MOVLW  00
09A8E:  BTFSC  x9B.2
09A90:  MOVLW  01
09A92:  MOVLB  C
09A94:  MOVWF  x24
09A96:  MOVLW  00
09A98:  MOVLB  B
09A9A:  BTFSC  x9F.2
09A9C:  MOVLW  01
09A9E:  MOVLB  C
09AA0:  XORWF  x24,W
09AA2:  SUBLW  01
09AA4:  BNZ   9AAE
09AA6:  MOVLB  B
09AA8:  BTFSS  xA1.2
09AAA:  BRA    9AB4
09AAC:  MOVLB  C
09AAE:  BTFSS  1A.5
09AB0:  BRA    9B84
09AB2:  MOVLB  B
....................    {
....................       if(In2.B11 == 0 && AutoAck == 0x0F && Ack.B11 == 0)   //use auto acknowlegde
09AB4:  BTFSC  xAD.2
09AB6:  BRA    9AD4
09AB8:  MOVLB  0
09ABA:  MOVF   x6A,W
09ABC:  SUBLW  0F
09ABE:  BTFSC  FD8.2
09AC0:  BRA    9AC6
09AC2:  MOVLB  B
09AC4:  BRA    9AD4
09AC6:  MOVLB  B
09AC8:  BTFSC  xA9.2
09ACA:  BRA    9AD4
....................       {
....................             TimeBase1s = 100 ;            //reload again
09ACC:  MOVLW  64
09ACE:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09AD0:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B11 = 1;
09AD4:  BSF    xAD.2
....................       if(Ack.B11 == 0)
09AD6:  BTFSC  xA9.2
09AD8:  BRA    9B08
....................       {
....................          if(FlashingFlag == 0)
09ADA:  BTFSC  1A.1
09ADC:  BRA    9AE2
....................             {
....................                Output.B11 = 0;           //Flash output1
09ADE:  BCF    x9D.2
....................             }
09AE0:  BRA    9AE4
....................             else
....................             {
....................                Output.B11 = 1;
09AE2:  BSF    x9D.2
....................             }
....................          if (~AutoTestFlag)
09AE4:  BTFSC  1A.4
09AE6:  BRA    9B08
....................          {
....................             if(AlarmIndicator.B11 == 1){
09AE8:  BTFSS  xA7.2
09AEA:  BRA    9B08
....................                 if(OutputBoth.B11 == 0)        //Both output
09AEC:  BTFSC  xA5.2
09AEE:  BRA    9AFA
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
09AF0:  BSF    F89.4
09AF2:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
09AF4:  BSF    F89.3
09AF6:  BCF    F92.3
....................                 }
09AF8:  BRA    9B08
....................                 else
....................                 {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,1);     //Buzzer
09AFA:  BTFSS  xA3.2
09AFC:  BRA    9B04
09AFE:  BSF    F89.4
09B00:  BCF    F92.4
09B02:  BRA    9B08
....................                   else output_bit(Pbell,1);                          //Bell
09B04:  BSF    F89.3
09B06:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09B08:  MOVLW  01
09B0A:  MOVLB  C
09B0C:  MOVWF  x17
....................       // SMS Sending   
....................         if((SendSMS.B11 ==0) && (functointest_f ==0) && (Ack.B11 ==0))
09B0E:  MOVLB  B
09B10:  BTFSC  xB7.2
09B12:  BRA    9B82
09B14:  BTFSC  30.3
09B16:  BRA    9B82
09B18:  BTFSC  xA9.2
09B1A:  BRA    9B82
....................         {
....................           SendSMS.B11 =1;
09B1C:  BSF    xB7.2
....................           fprintf(CH2,"AT+CMGS=\"");
09B1E:  MOVLW  F0
09B20:  MOVWF  FF6
09B22:  MOVLW  08
09B24:  MOVWF  FF7
09B26:  MOVLB  0
09B28:  CALL   2EB4
....................           fprintf(CH2,sms_phonenumber);
09B2C:  MOVLW  09
09B2E:  MOVWF  FEA
09B30:  MOVLW  8B
09B32:  MOVWF  FE9
09B34:  CALL   6226
....................           
....................           fprintf(CH2,"\"");
09B38:  MOVLW  22
09B3A:  MOVLB  C
09B3C:  MOVWF  x25
09B3E:  MOVLB  0
09B40:  CALL   2E6E
....................           putc('\n',CH2);
09B44:  MOVLW  0A
09B46:  MOVLB  C
09B48:  MOVWF  x25
09B4A:  MOVLB  0
09B4C:  CALL   2E6E
....................           delay_ms(50);
09B50:  MOVLW  32
09B52:  MOVLB  C
09B54:  MOVWF  x24
09B56:  MOVLB  0
09B58:  CALL   0936
....................          
....................          fprintf(CH2,SMS_Massage11);   
09B5C:  MOVLW  0A
09B5E:  MOVWF  FEA
09B60:  MOVLW  DA
09B62:  MOVWF  FE9
09B64:  CALL   6226
....................          putc('\n',CH2);
09B68:  MOVLW  0A
09B6A:  MOVLB  C
09B6C:  MOVWF  x25
09B6E:  MOVLB  0
09B70:  CALL   2E6E
....................          putc(26,CH2);
09B74:  MOVLW  1A
09B76:  MOVLB  C
09B78:  MOVWF  x25
09B7A:  MOVLB  0
09B7C:  CALL   2E6E
09B80:  MOVLB  B
....................         }
....................    }
09B82:  BRA    9C2E
....................    else if(FaultType.B11 == 0)
09B84:  MOVLB  B
09B86:  BTFSC  xA1.2
09B88:  BRA    9C2E
....................    {
....................       In2.B11 = 0x00;
09B8A:  BCF    xAD.2
....................       Ack.B11 = 0;
09B8C:  BCF    xA9.2
....................       Output.B11 = 1;      //Off LED
09B8E:  BSF    x9D.2
....................       SendSMS.B11 =0;// Clear SMS
09B90:  BCF    xB7.2
.................... 
....................       if((OutputType.B11 == 1 || OutputBoth.B11 == 0)&& inputflag ==0)      //If Buzzer or Both
09B92:  BTFSC  xA3.2
09B94:  BRA    9B9A
09B96:  BTFSC  xA5.2
09B98:  BRA    9BBC
09B9A:  MOVLB  C
09B9C:  MOVF   x17,F
09B9E:  BTFSC  FD8.2
09BA0:  BRA    9BA6
09BA2:  MOVLB  B
09BA4:  BRA    9BBC
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
09BA6:  MOVLW  01
09BA8:  MOVWF  x23
09BAA:  MOVLB  0
09BAC:  CALL   624C
09BB0:  DECFSZ 01,W
09BB2:  BRA    9BB6
09BB4:  BRA    9BBA
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
09BB6:  BCF    F89.4
09BB8:  BCF    F92.4
09BBA:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B11 == 0 || OutputBoth.B11 == 0)&& inputflag ==0)  //If Bell or Both
09BBC:  BTFSS  xA3.2
09BBE:  BRA    9BC4
09BC0:  BTFSC  xA5.2
09BC2:  BRA    9BE6
09BC4:  MOVLB  C
09BC6:  MOVF   x17,F
09BC8:  BTFSC  FD8.2
09BCA:  BRA    9BD0
09BCC:  MOVLB  B
09BCE:  BRA    9BE6
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09BD0:  MOVLW  02
09BD2:  MOVWF  x23
09BD4:  MOVLB  0
09BD6:  CALL   624C
09BDA:  DECFSZ 01,W
09BDC:  BRA    9BE0
09BDE:  BRA    9BE4
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
09BE0:  BCF    F89.3
09BE2:  BCF    F92.3
09BE4:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
09BE6:  BTFSC  xAC.0
09BE8:  BRA    9C2E
09BEA:  BTFSC  xAC.1
09BEC:  BRA    9C2E
09BEE:  BTFSC  xAC.2
09BF0:  BRA    9C2E
09BF2:  BTFSC  xAC.3
09BF4:  BRA    9C2E
09BF6:  BTFSC  xAC.4
09BF8:  BRA    9C2E
09BFA:  BTFSC  xAC.5
09BFC:  BRA    9C2E
09BFE:  BTFSC  xAC.6
09C00:  BRA    9C2E
09C02:  BTFSC  xAC.7
09C04:  BRA    9C2E
09C06:  BTFSC  xAD.0
09C08:  BRA    9C2E
09C0A:  BTFSC  xAD.1
09C0C:  BRA    9C2E
09C0E:  BTFSC  xAD.2
09C10:  BRA    9C2E
09C12:  BTFSC  xAD.3
09C14:  BRA    9C2E
09C16:  BTFSC  xAD.4
09C18:  BRA    9C2E
09C1A:  BTFSC  xAD.5
09C1C:  BRA    9C2E
09C1E:  BTFSC  xAD.6
09C20:  BRA    9C2E
09C22:  BTFSC  xAD.7
09C24:  BRA    9C2E
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
09C26:  BCF    F89.3
09C28:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
09C2A:  BCF    F89.4
09C2C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09C2E:  MOVLW  00
09C30:  BTFSC  x9B.3
09C32:  MOVLW  01
09C34:  MOVLB  C
09C36:  MOVWF  x24
09C38:  MOVLW  00
09C3A:  MOVLB  B
09C3C:  BTFSC  x9F.3
09C3E:  MOVLW  01
09C40:  MOVLB  C
09C42:  XORWF  x24,W
09C44:  SUBLW  01
09C46:  BNZ   9C50
09C48:  MOVLB  B
09C4A:  BTFSS  xA1.3
09C4C:  BRA    9C56
09C4E:  MOVLB  C
09C50:  BTFSS  1A.5
09C52:  BRA    9D26
09C54:  MOVLB  B
....................    {
....................       if(In2.B12 == 0 && AutoAck == 0x0F && Ack.B12 == 0)   //use auto acknowlegde
09C56:  BTFSC  xAD.3
09C58:  BRA    9C76
09C5A:  MOVLB  0
09C5C:  MOVF   x6A,W
09C5E:  SUBLW  0F
09C60:  BTFSC  FD8.2
09C62:  BRA    9C68
09C64:  MOVLB  B
09C66:  BRA    9C76
09C68:  MOVLB  B
09C6A:  BTFSC  xA9.3
09C6C:  BRA    9C76
....................       {
....................             TimeBase1s = 100 ;            //reload again
09C6E:  MOVLW  64
09C70:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09C72:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B12 = 1;
09C76:  BSF    xAD.3
....................       if(Ack.B12 == 0)
09C78:  BTFSC  xA9.3
09C7A:  BRA    9CAA
....................       {
....................          if(FlashingFlag == 0)
09C7C:  BTFSC  1A.1
09C7E:  BRA    9C84
....................             {
....................                Output.B12 = 0;           //Flash output1
09C80:  BCF    x9D.3
....................             }
09C82:  BRA    9C86
....................             else
....................             {
....................                Output.B12 = 1;
09C84:  BSF    x9D.3
....................             }
....................          if (~AutoTestFlag)
09C86:  BTFSC  1A.4
09C88:  BRA    9CAA
....................          {
....................             if(AlarmIndicator.B12 == 1){
09C8A:  BTFSS  xA7.3
09C8C:  BRA    9CAA
....................                 if(OutputBoth.B12 == 0)        //Both output
09C8E:  BTFSC  xA5.3
09C90:  BRA    9C9C
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
09C92:  BSF    F89.4
09C94:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
09C96:  BSF    F89.3
09C98:  BCF    F92.3
....................                 }
09C9A:  BRA    9CAA
....................                 else
....................                 {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,1);     //Buzzer
09C9C:  BTFSS  xA3.3
09C9E:  BRA    9CA6
09CA0:  BSF    F89.4
09CA2:  BCF    F92.4
09CA4:  BRA    9CAA
....................                   else output_bit(Pbell,1);                          //Bell
09CA6:  BSF    F89.3
09CA8:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09CAA:  MOVLW  01
09CAC:  MOVLB  C
09CAE:  MOVWF  x17
....................       // SMS Sending   
....................         if((SendSMS.B12 ==0) && (functointest_f ==0) && (Ack.B12 ==0))
09CB0:  MOVLB  B
09CB2:  BTFSC  xB7.3
09CB4:  BRA    9D24
09CB6:  BTFSC  30.3
09CB8:  BRA    9D24
09CBA:  BTFSC  xA9.3
09CBC:  BRA    9D24
....................         {
....................           SendSMS.B12 =1;
09CBE:  BSF    xB7.3
....................           fprintf(CH2,"AT+CMGS=\"");
09CC0:  MOVLW  FA
09CC2:  MOVWF  FF6
09CC4:  MOVLW  08
09CC6:  MOVWF  FF7
09CC8:  MOVLB  0
09CCA:  CALL   2EB4
....................           fprintf(CH2,sms_phonenumber);
09CCE:  MOVLW  09
09CD0:  MOVWF  FEA
09CD2:  MOVLW  8B
09CD4:  MOVWF  FE9
09CD6:  CALL   6226
....................           
....................           fprintf(CH2,"\"");
09CDA:  MOVLW  22
09CDC:  MOVLB  C
09CDE:  MOVWF  x25
09CE0:  MOVLB  0
09CE2:  CALL   2E6E
....................           putc('\n',CH2);
09CE6:  MOVLW  0A
09CE8:  MOVLB  C
09CEA:  MOVWF  x25
09CEC:  MOVLB  0
09CEE:  CALL   2E6E
....................           delay_ms(50);
09CF2:  MOVLW  32
09CF4:  MOVLB  C
09CF6:  MOVWF  x24
09CF8:  MOVLB  0
09CFA:  CALL   0936
....................          
....................          fprintf(CH2,SMS_Massage12);   
09CFE:  MOVLW  0A
09D00:  MOVWF  FEA
09D02:  MOVLW  FA
09D04:  MOVWF  FE9
09D06:  CALL   6226
....................          putc('\n',CH2);
09D0A:  MOVLW  0A
09D0C:  MOVLB  C
09D0E:  MOVWF  x25
09D10:  MOVLB  0
09D12:  CALL   2E6E
....................          putc(26,CH2);
09D16:  MOVLW  1A
09D18:  MOVLB  C
09D1A:  MOVWF  x25
09D1C:  MOVLB  0
09D1E:  CALL   2E6E
09D22:  MOVLB  B
....................         }
....................    }
09D24:  BRA    9DD0
....................    else if(FaultType.B12 == 0)
09D26:  MOVLB  B
09D28:  BTFSC  xA1.3
09D2A:  BRA    9DD0
....................    {
....................       In2.B12 = 0x00;
09D2C:  BCF    xAD.3
....................       Ack.B12 = 0;
09D2E:  BCF    xA9.3
....................       Output.B12 = 1;      //Off LED
09D30:  BSF    x9D.3
....................       SendSMS.B12 =0;// Clear SMS
09D32:  BCF    xB7.3
.................... 
....................       if((OutputType.B12 == 1 || OutputBoth.B12 == 0)&& inputflag ==0)      //If Buzzer or Both
09D34:  BTFSC  xA3.3
09D36:  BRA    9D3C
09D38:  BTFSC  xA5.3
09D3A:  BRA    9D5E
09D3C:  MOVLB  C
09D3E:  MOVF   x17,F
09D40:  BTFSC  FD8.2
09D42:  BRA    9D48
09D44:  MOVLB  B
09D46:  BRA    9D5E
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
09D48:  MOVLW  01
09D4A:  MOVWF  x23
09D4C:  MOVLB  0
09D4E:  CALL   624C
09D52:  DECFSZ 01,W
09D54:  BRA    9D58
09D56:  BRA    9D5C
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
09D58:  BCF    F89.4
09D5A:  BCF    F92.4
09D5C:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B12 == 0 || OutputBoth.B12 == 0)&& inputflag ==0)  //If Bell or Both
09D5E:  BTFSS  xA3.3
09D60:  BRA    9D66
09D62:  BTFSC  xA5.3
09D64:  BRA    9D88
09D66:  MOVLB  C
09D68:  MOVF   x17,F
09D6A:  BTFSC  FD8.2
09D6C:  BRA    9D72
09D6E:  MOVLB  B
09D70:  BRA    9D88
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09D72:  MOVLW  02
09D74:  MOVWF  x23
09D76:  MOVLB  0
09D78:  CALL   624C
09D7C:  DECFSZ 01,W
09D7E:  BRA    9D82
09D80:  BRA    9D86
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
09D82:  BCF    F89.3
09D84:  BCF    F92.3
09D86:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
09D88:  BTFSC  xAC.0
09D8A:  BRA    9DD0
09D8C:  BTFSC  xAC.1
09D8E:  BRA    9DD0
09D90:  BTFSC  xAC.2
09D92:  BRA    9DD0
09D94:  BTFSC  xAC.3
09D96:  BRA    9DD0
09D98:  BTFSC  xAC.4
09D9A:  BRA    9DD0
09D9C:  BTFSC  xAC.5
09D9E:  BRA    9DD0
09DA0:  BTFSC  xAC.6
09DA2:  BRA    9DD0
09DA4:  BTFSC  xAC.7
09DA6:  BRA    9DD0
09DA8:  BTFSC  xAD.0
09DAA:  BRA    9DD0
09DAC:  BTFSC  xAD.1
09DAE:  BRA    9DD0
09DB0:  BTFSC  xAD.2
09DB2:  BRA    9DD0
09DB4:  BTFSC  xAD.3
09DB6:  BRA    9DD0
09DB8:  BTFSC  xAD.4
09DBA:  BRA    9DD0
09DBC:  BTFSC  xAD.5
09DBE:  BRA    9DD0
09DC0:  BTFSC  xAD.6
09DC2:  BRA    9DD0
09DC4:  BTFSC  xAD.7
09DC6:  BRA    9DD0
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
09DC8:  BCF    F89.3
09DCA:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
09DCC:  BCF    F89.4
09DCE:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09DD0:  MOVLW  00
09DD2:  BTFSC  x9B.4
09DD4:  MOVLW  01
09DD6:  MOVLB  C
09DD8:  MOVWF  x24
09DDA:  MOVLW  00
09DDC:  MOVLB  B
09DDE:  BTFSC  x9F.4
09DE0:  MOVLW  01
09DE2:  MOVLB  C
09DE4:  XORWF  x24,W
09DE6:  SUBLW  01
09DE8:  BNZ   9DF2
09DEA:  MOVLB  B
09DEC:  BTFSS  xA1.4
09DEE:  BRA    9DF8
09DF0:  MOVLB  C
09DF2:  BTFSS  1A.5
09DF4:  BRA    9EC8
09DF6:  MOVLB  B
....................    {
....................       if(In2.B13 == 0 && AutoAck == 0x0F && Ack.B13 == 0)   //use auto acknowlegde
09DF8:  BTFSC  xAD.4
09DFA:  BRA    9E18
09DFC:  MOVLB  0
09DFE:  MOVF   x6A,W
09E00:  SUBLW  0F
09E02:  BTFSC  FD8.2
09E04:  BRA    9E0A
09E06:  MOVLB  B
09E08:  BRA    9E18
09E0A:  MOVLB  B
09E0C:  BTFSC  xA9.4
09E0E:  BRA    9E18
....................       {
....................             TimeBase1s = 100 ;            //reload again
09E10:  MOVLW  64
09E12:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09E14:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B13 = 1;
09E18:  BSF    xAD.4
....................       if(Ack.B13 == 0)
09E1A:  BTFSC  xA9.4
09E1C:  BRA    9E4C
....................       {
....................          if(FlashingFlag == 0)
09E1E:  BTFSC  1A.1
09E20:  BRA    9E26
....................             {
....................                Output.B13 = 0;           //Flash output1
09E22:  BCF    x9D.4
....................             }
09E24:  BRA    9E28
....................             else
....................             {
....................                Output.B13 = 1;
09E26:  BSF    x9D.4
....................             }
....................          if (~AutoTestFlag)
09E28:  BTFSC  1A.4
09E2A:  BRA    9E4C
....................          {
....................             if(AlarmIndicator.B13 == 1){
09E2C:  BTFSS  xA7.4
09E2E:  BRA    9E4C
....................                 if(OutputBoth.B13 == 0)        //Both output
09E30:  BTFSC  xA5.4
09E32:  BRA    9E3E
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
09E34:  BSF    F89.4
09E36:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
09E38:  BSF    F89.3
09E3A:  BCF    F92.3
....................                 }
09E3C:  BRA    9E4C
....................                 else
....................                 {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,1);     //Buzzer
09E3E:  BTFSS  xA3.4
09E40:  BRA    9E48
09E42:  BSF    F89.4
09E44:  BCF    F92.4
09E46:  BRA    9E4C
....................                   else output_bit(Pbell,1);                          //Bell
09E48:  BSF    F89.3
09E4A:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09E4C:  MOVLW  01
09E4E:  MOVLB  C
09E50:  MOVWF  x17
....................       // SMS Sending   
....................         if((SendSMS.B13 ==0) && (functointest_f ==0) && (Ack.B13 ==0))
09E52:  MOVLB  B
09E54:  BTFSC  xB7.4
09E56:  BRA    9EC6
09E58:  BTFSC  30.3
09E5A:  BRA    9EC6
09E5C:  BTFSC  xA9.4
09E5E:  BRA    9EC6
....................         {
....................           SendSMS.B13 =1;
09E60:  BSF    xB7.4
....................           fprintf(CH2,"AT+CMGS=\"");
09E62:  MOVLW  04
09E64:  MOVWF  FF6
09E66:  MOVLW  09
09E68:  MOVWF  FF7
09E6A:  MOVLB  0
09E6C:  CALL   2EB4
....................           fprintf(CH2,sms_phonenumber);
09E70:  MOVLW  09
09E72:  MOVWF  FEA
09E74:  MOVLW  8B
09E76:  MOVWF  FE9
09E78:  CALL   6226
....................           
....................           fprintf(CH2,"\"");
09E7C:  MOVLW  22
09E7E:  MOVLB  C
09E80:  MOVWF  x25
09E82:  MOVLB  0
09E84:  CALL   2E6E
....................           putc('\n',CH2);
09E88:  MOVLW  0A
09E8A:  MOVLB  C
09E8C:  MOVWF  x25
09E8E:  MOVLB  0
09E90:  CALL   2E6E
....................           delay_ms(50);
09E94:  MOVLW  32
09E96:  MOVLB  C
09E98:  MOVWF  x24
09E9A:  MOVLB  0
09E9C:  CALL   0936
....................          
....................          fprintf(CH2,SMS_Massage13);   
09EA0:  MOVLW  0B
09EA2:  MOVWF  FEA
09EA4:  MOVLW  1A
09EA6:  MOVWF  FE9
09EA8:  CALL   6226
....................          putc('\n',CH2);
09EAC:  MOVLW  0A
09EAE:  MOVLB  C
09EB0:  MOVWF  x25
09EB2:  MOVLB  0
09EB4:  CALL   2E6E
....................          putc(26,CH2);
09EB8:  MOVLW  1A
09EBA:  MOVLB  C
09EBC:  MOVWF  x25
09EBE:  MOVLB  0
09EC0:  CALL   2E6E
09EC4:  MOVLB  B
....................         }
....................    }
09EC6:  BRA    9F72
....................    else if(FaultType.B13 == 0)
09EC8:  MOVLB  B
09ECA:  BTFSC  xA1.4
09ECC:  BRA    9F72
....................    {
....................       In2.B13 = 0x00;
09ECE:  BCF    xAD.4
....................       Ack.B13 = 0;
09ED0:  BCF    xA9.4
....................       Output.B13 = 1;      //Off LED
09ED2:  BSF    x9D.4
....................       SendSMS.B13 =0;// Clear SMS
09ED4:  BCF    xB7.4
.................... 
....................       if((OutputType.B13 == 1 || OutputBoth.B13 == 0)&& inputflag ==0)      //If Buzzer or Both
09ED6:  BTFSC  xA3.4
09ED8:  BRA    9EDE
09EDA:  BTFSC  xA5.4
09EDC:  BRA    9F00
09EDE:  MOVLB  C
09EE0:  MOVF   x17,F
09EE2:  BTFSC  FD8.2
09EE4:  BRA    9EEA
09EE6:  MOVLB  B
09EE8:  BRA    9F00
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
09EEA:  MOVLW  01
09EEC:  MOVWF  x23
09EEE:  MOVLB  0
09EF0:  CALL   624C
09EF4:  DECFSZ 01,W
09EF6:  BRA    9EFA
09EF8:  BRA    9EFE
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
09EFA:  BCF    F89.4
09EFC:  BCF    F92.4
09EFE:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B13 == 0 || OutputBoth.B13 == 0)&& inputflag ==0)  //If Bell or Both
09F00:  BTFSS  xA3.4
09F02:  BRA    9F08
09F04:  BTFSC  xA5.4
09F06:  BRA    9F2A
09F08:  MOVLB  C
09F0A:  MOVF   x17,F
09F0C:  BTFSC  FD8.2
09F0E:  BRA    9F14
09F10:  MOVLB  B
09F12:  BRA    9F2A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09F14:  MOVLW  02
09F16:  MOVWF  x23
09F18:  MOVLB  0
09F1A:  CALL   624C
09F1E:  DECFSZ 01,W
09F20:  BRA    9F24
09F22:  BRA    9F28
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
09F24:  BCF    F89.3
09F26:  BCF    F92.3
09F28:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
09F2A:  BTFSC  xAC.0
09F2C:  BRA    9F72
09F2E:  BTFSC  xAC.1
09F30:  BRA    9F72
09F32:  BTFSC  xAC.2
09F34:  BRA    9F72
09F36:  BTFSC  xAC.3
09F38:  BRA    9F72
09F3A:  BTFSC  xAC.4
09F3C:  BRA    9F72
09F3E:  BTFSC  xAC.5
09F40:  BRA    9F72
09F42:  BTFSC  xAC.6
09F44:  BRA    9F72
09F46:  BTFSC  xAC.7
09F48:  BRA    9F72
09F4A:  BTFSC  xAD.0
09F4C:  BRA    9F72
09F4E:  BTFSC  xAD.1
09F50:  BRA    9F72
09F52:  BTFSC  xAD.2
09F54:  BRA    9F72
09F56:  BTFSC  xAD.3
09F58:  BRA    9F72
09F5A:  BTFSC  xAD.4
09F5C:  BRA    9F72
09F5E:  BTFSC  xAD.5
09F60:  BRA    9F72
09F62:  BTFSC  xAD.6
09F64:  BRA    9F72
09F66:  BTFSC  xAD.7
09F68:  BRA    9F72
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
09F6A:  BCF    F89.3
09F6C:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
09F6E:  BCF    F89.4
09F70:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09F72:  MOVLW  00
09F74:  BTFSC  x9B.5
09F76:  MOVLW  01
09F78:  MOVLB  C
09F7A:  MOVWF  x24
09F7C:  MOVLW  00
09F7E:  MOVLB  B
09F80:  BTFSC  x9F.5
09F82:  MOVLW  01
09F84:  MOVLB  C
09F86:  XORWF  x24,W
09F88:  SUBLW  01
09F8A:  BNZ   9F94
09F8C:  MOVLB  B
09F8E:  BTFSS  xA1.5
09F90:  BRA    9F9A
09F92:  MOVLB  C
09F94:  BTFSS  1A.5
09F96:  BRA    A06A
09F98:  MOVLB  B
....................    {
....................       if(In2.B14 == 0 && AutoAck == 0x0F && Ack.B14 == 0)   //use auto acknowlegde
09F9A:  BTFSC  xAD.5
09F9C:  BRA    9FBA
09F9E:  MOVLB  0
09FA0:  MOVF   x6A,W
09FA2:  SUBLW  0F
09FA4:  BTFSC  FD8.2
09FA6:  BRA    9FAC
09FA8:  MOVLB  B
09FAA:  BRA    9FBA
09FAC:  MOVLB  B
09FAE:  BTFSC  xA9.5
09FB0:  BRA    9FBA
....................       {
....................             TimeBase1s = 100 ;            //reload again
09FB2:  MOVLW  64
09FB4:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09FB6:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B14 = 1;
09FBA:  BSF    xAD.5
....................       if(Ack.B14 == 0)
09FBC:  BTFSC  xA9.5
09FBE:  BRA    9FEE
....................       {
....................          if(FlashingFlag == 0)
09FC0:  BTFSC  1A.1
09FC2:  BRA    9FC8
....................             {
....................                Output.B14 = 0;           //Flash output1
09FC4:  BCF    x9D.5
....................             }
09FC6:  BRA    9FCA
....................             else
....................             {
....................                Output.B14 = 1;
09FC8:  BSF    x9D.5
....................             }
....................          if (~AutoTestFlag)
09FCA:  BTFSC  1A.4
09FCC:  BRA    9FEE
....................          {
....................             if(AlarmIndicator.B14 == 1){
09FCE:  BTFSS  xA7.5
09FD0:  BRA    9FEE
....................                 if(OutputBoth.B14 == 0)        //Both output
09FD2:  BTFSC  xA5.5
09FD4:  BRA    9FE0
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
09FD6:  BSF    F89.4
09FD8:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
09FDA:  BSF    F89.3
09FDC:  BCF    F92.3
....................                 }
09FDE:  BRA    9FEE
....................                 else
....................                 {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,1);     //Buzzer
09FE0:  BTFSS  xA3.5
09FE2:  BRA    9FEA
09FE4:  BSF    F89.4
09FE6:  BCF    F92.4
09FE8:  BRA    9FEE
....................                   else output_bit(Pbell,1);                          //Bell
09FEA:  BSF    F89.3
09FEC:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09FEE:  MOVLW  01
09FF0:  MOVLB  C
09FF2:  MOVWF  x17
....................       // SMS Sending   
....................         if((SendSMS.B14 ==0) && (functointest_f ==0) && (Ack.B14 ==0))
09FF4:  MOVLB  B
09FF6:  BTFSC  xB7.5
09FF8:  BRA    A068
09FFA:  BTFSC  30.3
09FFC:  BRA    A068
09FFE:  BTFSC  xA9.5
0A000:  BRA    A068
....................         {
....................           SendSMS.B14 =1;
0A002:  BSF    xB7.5
....................           fprintf(CH2,"AT+CMGS=\"");
0A004:  MOVLW  0E
0A006:  MOVWF  FF6
0A008:  MOVLW  09
0A00A:  MOVWF  FF7
0A00C:  MOVLB  0
0A00E:  CALL   2EB4
....................           fprintf(CH2,sms_phonenumber);
0A012:  MOVLW  09
0A014:  MOVWF  FEA
0A016:  MOVLW  8B
0A018:  MOVWF  FE9
0A01A:  CALL   6226
....................           
....................           fprintf(CH2,"\"");
0A01E:  MOVLW  22
0A020:  MOVLB  C
0A022:  MOVWF  x25
0A024:  MOVLB  0
0A026:  CALL   2E6E
....................           putc('\n',CH2);
0A02A:  MOVLW  0A
0A02C:  MOVLB  C
0A02E:  MOVWF  x25
0A030:  MOVLB  0
0A032:  CALL   2E6E
....................           delay_ms(50);
0A036:  MOVLW  32
0A038:  MOVLB  C
0A03A:  MOVWF  x24
0A03C:  MOVLB  0
0A03E:  CALL   0936
....................          
....................          fprintf(CH2,SMS_Massage14);   
0A042:  MOVLW  0B
0A044:  MOVWF  FEA
0A046:  MOVLW  3A
0A048:  MOVWF  FE9
0A04A:  CALL   6226
....................          putc('\n',CH2);
0A04E:  MOVLW  0A
0A050:  MOVLB  C
0A052:  MOVWF  x25
0A054:  MOVLB  0
0A056:  CALL   2E6E
....................          putc(26,CH2);
0A05A:  MOVLW  1A
0A05C:  MOVLB  C
0A05E:  MOVWF  x25
0A060:  MOVLB  0
0A062:  CALL   2E6E
0A066:  MOVLB  B
....................         }
....................    }
0A068:  BRA    A114
....................    else if(FaultType.B14 == 0)
0A06A:  MOVLB  B
0A06C:  BTFSC  xA1.5
0A06E:  BRA    A114
....................    {
....................       In2.B14 = 0x00;
0A070:  BCF    xAD.5
....................       Ack.B14 = 0;
0A072:  BCF    xA9.5
....................       Output.B14 = 1;      //Off LED
0A074:  BSF    x9D.5
....................       SendSMS.B14 =0;// Clear SMS
0A076:  BCF    xB7.5
.................... 
....................       if((OutputType.B14 == 1 || OutputBoth.B14 == 0)&& inputflag ==0)      //If Buzzer or Both
0A078:  BTFSC  xA3.5
0A07A:  BRA    A080
0A07C:  BTFSC  xA5.5
0A07E:  BRA    A0A2
0A080:  MOVLB  C
0A082:  MOVF   x17,F
0A084:  BTFSC  FD8.2
0A086:  BRA    A08C
0A088:  MOVLB  B
0A08A:  BRA    A0A2
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0A08C:  MOVLW  01
0A08E:  MOVWF  x23
0A090:  MOVLB  0
0A092:  CALL   624C
0A096:  DECFSZ 01,W
0A098:  BRA    A09C
0A09A:  BRA    A0A0
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0A09C:  BCF    F89.4
0A09E:  BCF    F92.4
0A0A0:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B14 == 0 || OutputBoth.B14 == 0)&& inputflag ==0)  //If Bell or Both
0A0A2:  BTFSS  xA3.5
0A0A4:  BRA    A0AA
0A0A6:  BTFSC  xA5.5
0A0A8:  BRA    A0CC
0A0AA:  MOVLB  C
0A0AC:  MOVF   x17,F
0A0AE:  BTFSC  FD8.2
0A0B0:  BRA    A0B6
0A0B2:  MOVLB  B
0A0B4:  BRA    A0CC
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A0B6:  MOVLW  02
0A0B8:  MOVWF  x23
0A0BA:  MOVLB  0
0A0BC:  CALL   624C
0A0C0:  DECFSZ 01,W
0A0C2:  BRA    A0C6
0A0C4:  BRA    A0CA
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0A0C6:  BCF    F89.3
0A0C8:  BCF    F92.3
0A0CA:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0A0CC:  BTFSC  xAC.0
0A0CE:  BRA    A114
0A0D0:  BTFSC  xAC.1
0A0D2:  BRA    A114
0A0D4:  BTFSC  xAC.2
0A0D6:  BRA    A114
0A0D8:  BTFSC  xAC.3
0A0DA:  BRA    A114
0A0DC:  BTFSC  xAC.4
0A0DE:  BRA    A114
0A0E0:  BTFSC  xAC.5
0A0E2:  BRA    A114
0A0E4:  BTFSC  xAC.6
0A0E6:  BRA    A114
0A0E8:  BTFSC  xAC.7
0A0EA:  BRA    A114
0A0EC:  BTFSC  xAD.0
0A0EE:  BRA    A114
0A0F0:  BTFSC  xAD.1
0A0F2:  BRA    A114
0A0F4:  BTFSC  xAD.2
0A0F6:  BRA    A114
0A0F8:  BTFSC  xAD.3
0A0FA:  BRA    A114
0A0FC:  BTFSC  xAD.4
0A0FE:  BRA    A114
0A100:  BTFSC  xAD.5
0A102:  BRA    A114
0A104:  BTFSC  xAD.6
0A106:  BRA    A114
0A108:  BTFSC  xAD.7
0A10A:  BRA    A114
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0A10C:  BCF    F89.3
0A10E:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0A110:  BCF    F89.4
0A112:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A114:  MOVLW  00
0A116:  BTFSC  x9B.6
0A118:  MOVLW  01
0A11A:  MOVLB  C
0A11C:  MOVWF  x24
0A11E:  MOVLW  00
0A120:  MOVLB  B
0A122:  BTFSC  x9F.6
0A124:  MOVLW  01
0A126:  MOVLB  C
0A128:  XORWF  x24,W
0A12A:  SUBLW  01
0A12C:  BNZ   A136
0A12E:  MOVLB  B
0A130:  BTFSS  xA1.6
0A132:  BRA    A13C
0A134:  MOVLB  C
0A136:  BTFSS  1A.5
0A138:  BRA    A20C
0A13A:  MOVLB  B
....................    {
....................       if(In2.B15 == 0 && AutoAck == 0x0F && Ack.B15 == 0)   //use auto acknowlegde
0A13C:  BTFSC  xAD.6
0A13E:  BRA    A15C
0A140:  MOVLB  0
0A142:  MOVF   x6A,W
0A144:  SUBLW  0F
0A146:  BTFSC  FD8.2
0A148:  BRA    A14E
0A14A:  MOVLB  B
0A14C:  BRA    A15C
0A14E:  MOVLB  B
0A150:  BTFSC  xA9.6
0A152:  BRA    A15C
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A154:  MOVLW  64
0A156:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A158:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B15 = 1;
0A15C:  BSF    xAD.6
....................       if(Ack.B15 == 0)
0A15E:  BTFSC  xA9.6
0A160:  BRA    A190
....................       {
....................          if(FlashingFlag == 0)
0A162:  BTFSC  1A.1
0A164:  BRA    A16A
....................             {
....................                Output.B15 = 0;           //Flash output1
0A166:  BCF    x9D.6
....................             }
0A168:  BRA    A16C
....................             else
....................             {
....................                Output.B15 = 1;
0A16A:  BSF    x9D.6
....................             }
....................          if (~AutoTestFlag)
0A16C:  BTFSC  1A.4
0A16E:  BRA    A190
....................          {
....................             if(AlarmIndicator.B15 == 1){
0A170:  BTFSS  xA7.6
0A172:  BRA    A190
....................                 if(OutputBoth.B15 == 0)        //Both output
0A174:  BTFSC  xA5.6
0A176:  BRA    A182
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0A178:  BSF    F89.4
0A17A:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0A17C:  BSF    F89.3
0A17E:  BCF    F92.3
....................                 }
0A180:  BRA    A190
....................                 else
....................                 {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,1);     //Buzzer
0A182:  BTFSS  xA3.6
0A184:  BRA    A18C
0A186:  BSF    F89.4
0A188:  BCF    F92.4
0A18A:  BRA    A190
....................                   else output_bit(Pbell,1);                          //Bell
0A18C:  BSF    F89.3
0A18E:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A190:  MOVLW  01
0A192:  MOVLB  C
0A194:  MOVWF  x17
....................       // SMS Sending   
....................         if((SendSMS.B15 ==0) && (functointest_f ==0) && (Ack.B15 ==0))
0A196:  MOVLB  B
0A198:  BTFSC  xB7.6
0A19A:  BRA    A20A
0A19C:  BTFSC  30.3
0A19E:  BRA    A20A
0A1A0:  BTFSC  xA9.6
0A1A2:  BRA    A20A
....................         {
....................           SendSMS.B15 =1;
0A1A4:  BSF    xB7.6
....................           fprintf(CH2,"AT+CMGS=\"");
0A1A6:  MOVLW  18
0A1A8:  MOVWF  FF6
0A1AA:  MOVLW  09
0A1AC:  MOVWF  FF7
0A1AE:  MOVLB  0
0A1B0:  CALL   2EB4
....................           fprintf(CH2,sms_phonenumber);
0A1B4:  MOVLW  09
0A1B6:  MOVWF  FEA
0A1B8:  MOVLW  8B
0A1BA:  MOVWF  FE9
0A1BC:  CALL   6226
....................           
....................           fprintf(CH2,"\"");
0A1C0:  MOVLW  22
0A1C2:  MOVLB  C
0A1C4:  MOVWF  x25
0A1C6:  MOVLB  0
0A1C8:  CALL   2E6E
....................           putc('\n',CH2);
0A1CC:  MOVLW  0A
0A1CE:  MOVLB  C
0A1D0:  MOVWF  x25
0A1D2:  MOVLB  0
0A1D4:  CALL   2E6E
....................           delay_ms(50);
0A1D8:  MOVLW  32
0A1DA:  MOVLB  C
0A1DC:  MOVWF  x24
0A1DE:  MOVLB  0
0A1E0:  CALL   0936
....................          
....................          fprintf(CH2,SMS_Massage15);   
0A1E4:  MOVLW  0B
0A1E6:  MOVWF  FEA
0A1E8:  MOVLW  5A
0A1EA:  MOVWF  FE9
0A1EC:  CALL   6226
....................          putc('\n',CH2);
0A1F0:  MOVLW  0A
0A1F2:  MOVLB  C
0A1F4:  MOVWF  x25
0A1F6:  MOVLB  0
0A1F8:  CALL   2E6E
....................          putc(26,CH2);
0A1FC:  MOVLW  1A
0A1FE:  MOVLB  C
0A200:  MOVWF  x25
0A202:  MOVLB  0
0A204:  CALL   2E6E
0A208:  MOVLB  B
....................         }
....................    }
0A20A:  BRA    A2B6
....................    else if(FaultType.B15 == 0)
0A20C:  MOVLB  B
0A20E:  BTFSC  xA1.6
0A210:  BRA    A2B6
....................    {
....................       In2.B15 = 0x00;
0A212:  BCF    xAD.6
....................       Ack.B15 = 0;
0A214:  BCF    xA9.6
....................       Output.B15 = 1;      //Off LED
0A216:  BSF    x9D.6
....................       SendSMS.B15 =0;// Clear SMS
0A218:  BCF    xB7.6
.................... 
....................       if((OutputType.B15 == 1 || OutputBoth.B15 == 0)&& inputflag ==0)      //If Buzzer or Both
0A21A:  BTFSC  xA3.6
0A21C:  BRA    A222
0A21E:  BTFSC  xA5.6
0A220:  BRA    A244
0A222:  MOVLB  C
0A224:  MOVF   x17,F
0A226:  BTFSC  FD8.2
0A228:  BRA    A22E
0A22A:  MOVLB  B
0A22C:  BRA    A244
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0A22E:  MOVLW  01
0A230:  MOVWF  x23
0A232:  MOVLB  0
0A234:  CALL   624C
0A238:  DECFSZ 01,W
0A23A:  BRA    A23E
0A23C:  BRA    A242
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0A23E:  BCF    F89.4
0A240:  BCF    F92.4
0A242:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B15 == 0 || OutputBoth.B15 == 0)&& inputflag ==0)  //If Bell or Both
0A244:  BTFSS  xA3.6
0A246:  BRA    A24C
0A248:  BTFSC  xA5.6
0A24A:  BRA    A26E
0A24C:  MOVLB  C
0A24E:  MOVF   x17,F
0A250:  BTFSC  FD8.2
0A252:  BRA    A258
0A254:  MOVLB  B
0A256:  BRA    A26E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A258:  MOVLW  02
0A25A:  MOVWF  x23
0A25C:  MOVLB  0
0A25E:  CALL   624C
0A262:  DECFSZ 01,W
0A264:  BRA    A268
0A266:  BRA    A26C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0A268:  BCF    F89.3
0A26A:  BCF    F92.3
0A26C:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0A26E:  BTFSC  xAC.0
0A270:  BRA    A2B6
0A272:  BTFSC  xAC.1
0A274:  BRA    A2B6
0A276:  BTFSC  xAC.2
0A278:  BRA    A2B6
0A27A:  BTFSC  xAC.3
0A27C:  BRA    A2B6
0A27E:  BTFSC  xAC.4
0A280:  BRA    A2B6
0A282:  BTFSC  xAC.5
0A284:  BRA    A2B6
0A286:  BTFSC  xAC.6
0A288:  BRA    A2B6
0A28A:  BTFSC  xAC.7
0A28C:  BRA    A2B6
0A28E:  BTFSC  xAD.0
0A290:  BRA    A2B6
0A292:  BTFSC  xAD.1
0A294:  BRA    A2B6
0A296:  BTFSC  xAD.2
0A298:  BRA    A2B6
0A29A:  BTFSC  xAD.3
0A29C:  BRA    A2B6
0A29E:  BTFSC  xAD.4
0A2A0:  BRA    A2B6
0A2A2:  BTFSC  xAD.5
0A2A4:  BRA    A2B6
0A2A6:  BTFSC  xAD.6
0A2A8:  BRA    A2B6
0A2AA:  BTFSC  xAD.7
0A2AC:  BRA    A2B6
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0A2AE:  BCF    F89.3
0A2B0:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0A2B2:  BCF    F89.4
0A2B4:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A2B6:  MOVLW  00
0A2B8:  BTFSC  x9B.7
0A2BA:  MOVLW  01
0A2BC:  MOVLB  C
0A2BE:  MOVWF  x24
0A2C0:  MOVLW  00
0A2C2:  MOVLB  B
0A2C4:  BTFSC  x9F.7
0A2C6:  MOVLW  01
0A2C8:  MOVLB  C
0A2CA:  XORWF  x24,W
0A2CC:  SUBLW  01
0A2CE:  BNZ   A2D8
0A2D0:  MOVLB  B
0A2D2:  BTFSS  xA1.7
0A2D4:  BRA    A2DE
0A2D6:  MOVLB  C
0A2D8:  BTFSS  1A.5
0A2DA:  BRA    A3AE
0A2DC:  MOVLB  B
....................    {
....................       if(In2.B16 == 0 && AutoAck == 0x0F && Ack.B16 == 0)   //use auto acknowlegde
0A2DE:  BTFSC  xAD.7
0A2E0:  BRA    A2FE
0A2E2:  MOVLB  0
0A2E4:  MOVF   x6A,W
0A2E6:  SUBLW  0F
0A2E8:  BTFSC  FD8.2
0A2EA:  BRA    A2F0
0A2EC:  MOVLB  B
0A2EE:  BRA    A2FE
0A2F0:  MOVLB  B
0A2F2:  BTFSC  xA9.7
0A2F4:  BRA    A2FE
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A2F6:  MOVLW  64
0A2F8:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A2FA:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B16 = 1;
0A2FE:  BSF    xAD.7
....................       if(Ack.B16 == 0)
0A300:  BTFSC  xA9.7
0A302:  BRA    A332
....................       {
....................          if(FlashingFlag == 0)
0A304:  BTFSC  1A.1
0A306:  BRA    A30C
....................             {
....................                Output.B16 = 0;         //Flash output1
0A308:  BCF    x9D.7
....................             }
0A30A:  BRA    A30E
....................             else
....................             {
....................                Output.B16 = 1;
0A30C:  BSF    x9D.7
....................             }
....................          if (~AutoTestFlag)
0A30E:  BTFSC  1A.4
0A310:  BRA    A332
....................          {
....................             if(AlarmIndicator.B16 == 1){
0A312:  BTFSS  xA7.7
0A314:  BRA    A332
....................                 if(OutputBoth.B16 == 0)        //Both output
0A316:  BTFSC  xA5.7
0A318:  BRA    A324
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0A31A:  BSF    F89.4
0A31C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0A31E:  BSF    F89.3
0A320:  BCF    F92.3
....................                 }
0A322:  BRA    A332
....................                 else
....................                 {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,1);     //Buzzer
0A324:  BTFSS  xA3.7
0A326:  BRA    A32E
0A328:  BSF    F89.4
0A32A:  BCF    F92.4
0A32C:  BRA    A332
....................                   else output_bit(Pbell,1);                          //Bell
0A32E:  BSF    F89.3
0A330:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A332:  MOVLW  01
0A334:  MOVLB  C
0A336:  MOVWF  x17
....................       // SMS Sending   
....................         if((SendSMS.B16 ==0) && (functointest_f ==0) && (Ack.B16 ==0))
0A338:  MOVLB  B
0A33A:  BTFSC  xB7.7
0A33C:  BRA    A3AC
0A33E:  BTFSC  30.3
0A340:  BRA    A3AC
0A342:  BTFSC  xA9.7
0A344:  BRA    A3AC
....................         {
....................           SendSMS.B16 =1;
0A346:  BSF    xB7.7
....................           fprintf(CH2,"AT+CMGS=\"");
0A348:  MOVLW  22
0A34A:  MOVWF  FF6
0A34C:  MOVLW  09
0A34E:  MOVWF  FF7
0A350:  MOVLB  0
0A352:  CALL   2EB4
....................           fprintf(CH2,sms_phonenumber);
0A356:  MOVLW  09
0A358:  MOVWF  FEA
0A35A:  MOVLW  8B
0A35C:  MOVWF  FE9
0A35E:  CALL   6226
....................           
....................           fprintf(CH2,"\"");
0A362:  MOVLW  22
0A364:  MOVLB  C
0A366:  MOVWF  x25
0A368:  MOVLB  0
0A36A:  CALL   2E6E
....................           putc('\n',CH2);
0A36E:  MOVLW  0A
0A370:  MOVLB  C
0A372:  MOVWF  x25
0A374:  MOVLB  0
0A376:  CALL   2E6E
....................           delay_ms(50);
0A37A:  MOVLW  32
0A37C:  MOVLB  C
0A37E:  MOVWF  x24
0A380:  MOVLB  0
0A382:  CALL   0936
....................          
....................          fprintf(CH2,SMS_Massage16);   
0A386:  MOVLW  0B
0A388:  MOVWF  FEA
0A38A:  MOVLW  7A
0A38C:  MOVWF  FE9
0A38E:  CALL   6226
....................          putc('\n',CH2);
0A392:  MOVLW  0A
0A394:  MOVLB  C
0A396:  MOVWF  x25
0A398:  MOVLB  0
0A39A:  CALL   2E6E
....................          putc(26,CH2);
0A39E:  MOVLW  1A
0A3A0:  MOVLB  C
0A3A2:  MOVWF  x25
0A3A4:  MOVLB  0
0A3A6:  CALL   2E6E
0A3AA:  MOVLB  B
....................         }
....................    }
0A3AC:  BRA    A458
....................    else if(FaultType.B16 == 0)
0A3AE:  MOVLB  B
0A3B0:  BTFSC  xA1.7
0A3B2:  BRA    A458
....................    {
....................       In2.B16 = 0x00;
0A3B4:  BCF    xAD.7
....................       Ack.B16 = 0;
0A3B6:  BCF    xA9.7
....................       Output.B16 = 1;      //Off LED
0A3B8:  BSF    x9D.7
....................       SendSMS.B16 =0;// Clear SMS
0A3BA:  BCF    xB7.7
.................... 
....................       if((OutputType.B16 == 1 || OutputBoth.B16 == 0)&& inputflag ==0)      //If Buzzer or Both
0A3BC:  BTFSC  xA3.7
0A3BE:  BRA    A3C4
0A3C0:  BTFSC  xA5.7
0A3C2:  BRA    A3E6
0A3C4:  MOVLB  C
0A3C6:  MOVF   x17,F
0A3C8:  BTFSC  FD8.2
0A3CA:  BRA    A3D0
0A3CC:  MOVLB  B
0A3CE:  BRA    A3E6
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0A3D0:  MOVLW  01
0A3D2:  MOVWF  x23
0A3D4:  MOVLB  0
0A3D6:  CALL   624C
0A3DA:  DECFSZ 01,W
0A3DC:  BRA    A3E0
0A3DE:  BRA    A3E4
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0A3E0:  BCF    F89.4
0A3E2:  BCF    F92.4
0A3E4:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B16 == 0 || OutputBoth.B16 == 0)&& inputflag ==0)  //If Bell or Both
0A3E6:  BTFSS  xA3.7
0A3E8:  BRA    A3EE
0A3EA:  BTFSC  xA5.7
0A3EC:  BRA    A410
0A3EE:  MOVLB  C
0A3F0:  MOVF   x17,F
0A3F2:  BTFSC  FD8.2
0A3F4:  BRA    A3FA
0A3F6:  MOVLB  B
0A3F8:  BRA    A410
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A3FA:  MOVLW  02
0A3FC:  MOVWF  x23
0A3FE:  MOVLB  0
0A400:  CALL   624C
0A404:  DECFSZ 01,W
0A406:  BRA    A40A
0A408:  BRA    A40E
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0A40A:  BCF    F89.3
0A40C:  BCF    F92.3
0A40E:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0A410:  BTFSC  xAC.0
0A412:  BRA    A458
0A414:  BTFSC  xAC.1
0A416:  BRA    A458
0A418:  BTFSC  xAC.2
0A41A:  BRA    A458
0A41C:  BTFSC  xAC.3
0A41E:  BRA    A458
0A420:  BTFSC  xAC.4
0A422:  BRA    A458
0A424:  BTFSC  xAC.5
0A426:  BRA    A458
0A428:  BTFSC  xAC.6
0A42A:  BRA    A458
0A42C:  BTFSC  xAC.7
0A42E:  BRA    A458
0A430:  BTFSC  xAD.0
0A432:  BRA    A458
0A434:  BTFSC  xAD.1
0A436:  BRA    A458
0A438:  BTFSC  xAD.2
0A43A:  BRA    A458
0A43C:  BTFSC  xAD.3
0A43E:  BRA    A458
0A440:  BTFSC  xAD.4
0A442:  BRA    A458
0A444:  BTFSC  xAD.5
0A446:  BRA    A458
0A448:  BTFSC  xAD.6
0A44A:  BRA    A458
0A44C:  BTFSC  xAD.7
0A44E:  BRA    A458
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0A450:  BCF    F89.3
0A452:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0A454:  BCF    F89.4
0A456:  BCF    F92.4
....................       }
....................    }
0A458:  MOVLB  0
0A45A:  RETURN 0
....................    
....................    
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Send_Ouput(void)
.................... {
....................     Red1_7 = 0;
*
02AC4:  CLRF   4E
....................     Red8_8 = 0;
02AC6:  CLRF   4F
....................     Red9_15 = 0;
02AC8:  CLRF   50
....................     Red16_16 = 0;
02ACA:  CLRF   51
.................... 
....................     Green1_7 = 0;
02ACC:  CLRF   52
....................     Green8_8 = 0;
02ACE:  CLRF   53
....................     Green9_15 = 0;
02AD0:  CLRF   54
....................     Green16_16 = 0;
02AD2:  CLRF   55
.................... 
....................    if(T_test == 0x00)
02AD4:  MOVF   2F,F
02AD6:  BTFSS  FD8.2
02AD8:  BRA    2E6C
....................    {
....................       //if(NoOfPoint >= 10)
....................       //{
....................       
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
02ADA:  MOVLB  B
02ADC:  BTFSS  x9C.0
02ADE:  BRA    2AE6
....................            {
....................              bit_clear(Red1_7,1); bit_clear(Green1_7,1);
02AE0:  BCF    4E.1
02AE2:  BCF    52.1
....................            }
02AE4:  BRA    2B0E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
02AE6:  BTFSS  xB2.0
02AE8:  BRA    2AF4
02AEA:  BTFSC  xB4.0
02AEC:  BRA    2AF4
....................              {
....................                bit_set(Red1_7,1); bit_clear(Green1_7,1);
02AEE:  BSF    4E.1
02AF0:  BCF    52.1
....................              }
02AF2:  BRA    2B0E
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
02AF4:  BTFSC  xB2.0
02AF6:  BRA    2B02
02AF8:  BTFSS  xB4.0
02AFA:  BRA    2B02
....................              {
....................                bit_clear(Red1_7,1); bit_set(Green1_7,1); 
02AFC:  BCF    4E.1
02AFE:  BSF    52.1
....................              }
02B00:  BRA    2B0E
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
02B02:  BTFSS  xB2.0
02B04:  BRA    2B0E
02B06:  BTFSS  xB4.0
02B08:  BRA    2B0E
....................              {
....................                bit_set(Red1_7,1); bit_set(Green1_7,1) ; 
02B0A:  BSF    4E.1
02B0C:  BSF    52.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
02B0E:  BTFSS  x9C.1
02B10:  BRA    2B18
....................            {
....................              bit_clear(Red1_7,2); bit_clear(Green1_7,2);
02B12:  BCF    4E.2
02B14:  BCF    52.2
....................            }
02B16:  BRA    2B40
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
02B18:  BTFSS  xB2.1
02B1A:  BRA    2B26
02B1C:  BTFSC  xB4.1
02B1E:  BRA    2B26
....................              {
....................                bit_set(Red1_7,2); bit_clear(Green1_7,2);
02B20:  BSF    4E.2
02B22:  BCF    52.2
....................              }
02B24:  BRA    2B40
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
02B26:  BTFSC  xB2.1
02B28:  BRA    2B34
02B2A:  BTFSS  xB4.1
02B2C:  BRA    2B34
....................              {
....................                bit_clear(Red1_7,2); bit_set(Green1_7,2); 
02B2E:  BCF    4E.2
02B30:  BSF    52.2
....................              }
02B32:  BRA    2B40
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
02B34:  BTFSS  xB2.1
02B36:  BRA    2B40
02B38:  BTFSS  xB4.1
02B3A:  BRA    2B40
....................              {
....................                bit_set(Red1_7,2); bit_set(Green1_7,2) ; 
02B3C:  BSF    4E.2
02B3E:  BSF    52.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
02B40:  BTFSS  x9C.2
02B42:  BRA    2B4A
....................            {
....................              bit_clear(Red1_7,3); bit_clear(Green1_7,3);
02B44:  BCF    4E.3
02B46:  BCF    52.3
....................            }
02B48:  BRA    2B72
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
02B4A:  BTFSS  xB2.2
02B4C:  BRA    2B58
02B4E:  BTFSC  xB4.2
02B50:  BRA    2B58
....................              {
....................                bit_set(Red1_7,3); bit_clear(Green1_7,3);
02B52:  BSF    4E.3
02B54:  BCF    52.3
....................              }
02B56:  BRA    2B72
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
02B58:  BTFSC  xB2.2
02B5A:  BRA    2B66
02B5C:  BTFSS  xB4.2
02B5E:  BRA    2B66
....................              {
....................                bit_clear(Red1_7,3); bit_set(Green1_7,3); 
02B60:  BCF    4E.3
02B62:  BSF    52.3
....................              }
02B64:  BRA    2B72
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
02B66:  BTFSS  xB2.2
02B68:  BRA    2B72
02B6A:  BTFSS  xB4.2
02B6C:  BRA    2B72
....................              {
....................                bit_set(Red1_7,3); bit_set(Green1_7,3) ; 
02B6E:  BSF    4E.3
02B70:  BSF    52.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
02B72:  BTFSS  x9C.3
02B74:  BRA    2B7C
....................            {
....................              bit_clear(Red1_7,4); bit_clear(Green1_7,4);
02B76:  BCF    4E.4
02B78:  BCF    52.4
....................            }
02B7A:  BRA    2BA4
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
02B7C:  BTFSS  xB2.3
02B7E:  BRA    2B8A
02B80:  BTFSC  xB4.3
02B82:  BRA    2B8A
....................              {
....................                bit_set(Red1_7,4); bit_clear(Green1_7,4);
02B84:  BSF    4E.4
02B86:  BCF    52.4
....................              }
02B88:  BRA    2BA4
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
02B8A:  BTFSC  xB2.3
02B8C:  BRA    2B98
02B8E:  BTFSS  xB4.3
02B90:  BRA    2B98
....................              {
....................                bit_clear(Red1_7,4); bit_set(Green1_7,4); 
02B92:  BCF    4E.4
02B94:  BSF    52.4
....................              }
02B96:  BRA    2BA4
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
02B98:  BTFSS  xB2.3
02B9A:  BRA    2BA4
02B9C:  BTFSS  xB4.3
02B9E:  BRA    2BA4
....................              {
....................                bit_set(Red1_7,4); bit_set(Green1_7,4) ; 
02BA0:  BSF    4E.4
02BA2:  BSF    52.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
02BA4:  BTFSS  x9C.4
02BA6:  BRA    2BAE
....................            {
....................              bit_clear(Red1_7,5); bit_clear(Green1_7,5);
02BA8:  BCF    4E.5
02BAA:  BCF    52.5
....................            }
02BAC:  BRA    2BD6
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
02BAE:  BTFSS  xB2.4
02BB0:  BRA    2BBC
02BB2:  BTFSC  xB4.4
02BB4:  BRA    2BBC
....................              {
....................                bit_set(Red1_7,5); bit_clear(Green1_7,5);
02BB6:  BSF    4E.5
02BB8:  BCF    52.5
....................              }
02BBA:  BRA    2BD6
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
02BBC:  BTFSC  xB2.4
02BBE:  BRA    2BCA
02BC0:  BTFSS  xB4.4
02BC2:  BRA    2BCA
....................              {
....................                bit_clear(Red1_7,5); bit_set(Green1_7,5); 
02BC4:  BCF    4E.5
02BC6:  BSF    52.5
....................              }
02BC8:  BRA    2BD6
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
02BCA:  BTFSS  xB2.4
02BCC:  BRA    2BD6
02BCE:  BTFSS  xB4.4
02BD0:  BRA    2BD6
....................              {
....................                bit_set(Red1_7,5); bit_set(Green1_7,5) ; 
02BD2:  BSF    4E.5
02BD4:  BSF    52.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
02BD6:  BTFSS  x9C.5
02BD8:  BRA    2BE0
....................            {
....................              bit_clear(Red1_7,6); bit_clear(Green1_7,6);
02BDA:  BCF    4E.6
02BDC:  BCF    52.6
....................            }
02BDE:  BRA    2C08
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
02BE0:  BTFSS  xB2.5
02BE2:  BRA    2BEE
02BE4:  BTFSC  xB4.5
02BE6:  BRA    2BEE
....................              {
....................                bit_set(Red1_7,6); bit_clear(Green1_7,6);
02BE8:  BSF    4E.6
02BEA:  BCF    52.6
....................              }
02BEC:  BRA    2C08
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
02BEE:  BTFSC  xB2.5
02BF0:  BRA    2BFC
02BF2:  BTFSS  xB4.5
02BF4:  BRA    2BFC
....................              {
....................                bit_clear(Red1_7,6); bit_set(Green1_7,6); 
02BF6:  BCF    4E.6
02BF8:  BSF    52.6
....................              }
02BFA:  BRA    2C08
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
02BFC:  BTFSS  xB2.5
02BFE:  BRA    2C08
02C00:  BTFSS  xB4.5
02C02:  BRA    2C08
....................              {
....................                bit_set(Red1_7,6); bit_set(Green1_7,6) ; 
02C04:  BSF    4E.6
02C06:  BSF    52.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
02C08:  BTFSS  x9C.6
02C0A:  BRA    2C12
....................            {
....................              bit_clear(Red1_7,7); bit_clear(Green1_7,7);
02C0C:  BCF    4E.7
02C0E:  BCF    52.7
....................            }
02C10:  BRA    2C3A
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
02C12:  BTFSS  xB2.6
02C14:  BRA    2C20
02C16:  BTFSC  xB4.6
02C18:  BRA    2C20
....................              {
....................                bit_set(Red1_7,7); bit_clear(Green1_7,7);
02C1A:  BSF    4E.7
02C1C:  BCF    52.7
....................              }
02C1E:  BRA    2C3A
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
02C20:  BTFSC  xB2.6
02C22:  BRA    2C2E
02C24:  BTFSS  xB4.6
02C26:  BRA    2C2E
....................              {
....................                bit_clear(Red1_7,7); bit_set(Green1_7,7); 
02C28:  BCF    4E.7
02C2A:  BSF    52.7
....................              }
02C2C:  BRA    2C3A
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
02C2E:  BTFSS  xB2.6
02C30:  BRA    2C3A
02C32:  BTFSS  xB4.6
02C34:  BRA    2C3A
....................              {
....................                bit_set(Red1_7,7); bit_set(Green
02C36:  BSF    4E.7
02C38:  BSF    52.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
02C3A:  BTFSS  x9C.7
02C3C:  BRA    2C44
....................            {
....................              bit_clear(Red8_8,0); bit_clear(Green8_8,0);
02C3E:  BCF    4F.0
02C40:  BCF    53.0
....................            }
02C42:  BRA    2C6C
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
02C44:  BTFSS  xB2.7
02C46:  BRA    2C52
02C48:  BTFSC  xB4.7
02C4A:  BRA    2C52
....................              {
....................                bit_set(Red8_8,0); bit_clear(Green8_8,0);
02C4C:  BSF    4F.0
02C4E:  BCF    53.0
....................              }
02C50:  BRA    2C6C
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
02C52:  BTFSC  xB2.7
02C54:  BRA    2C60
02C56:  BTFSS  xB4.7
02C58:  BRA    2C60
....................              {
....................                bit_clear(Red8_8,0); bit_set(Green8_8,0); 
02C5A:  BCF    4F.0
02C5C:  BSF    53.0
....................              }
02C5E:  BRA    2C6C
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
02C60:  BTFSS  xB2.7
02C62:  BRA    2C6C
02C64:  BTFSS  xB4.7
02C66:  BRA    2C6C
....................              {
....................                bit_set(Red8_8,0); bit_set(Green8_8,0) ; 
02C68:  BSF    4F.0
02C6A:  BSF    53.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            ////////////////////////////////////////////////////////
....................            if(Output.B9)//++++++++++++B9+++++++++++++++++++++
02C6C:  BTFSS  x9D.0
02C6E:  BRA    2C76
....................            {
....................              bit_clear(Red9_15,1); bit_clear(Green9_15,1);
02C70:  BCF    50.1
02C72:  BCF    54.1
....................            }
02C74:  BRA    2C9E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B9 )&&(GREEN_Colour.B9 ==0 ))//Red
02C76:  BTFSS  xB3.0
02C78:  BRA    2C84
02C7A:  BTFSC  xB5.0
02C7C:  BRA    2C84
....................              {
....................                bit_set(Red9_15,1); bit_clear(Green9_15,1);
02C7E:  BSF    50.1
02C80:  BCF    54.1
....................              }
02C82:  BRA    2C9E
....................              else if((RED_Colour.B9==0 )&&(GREEN_Colour.B9))//Green
02C84:  BTFSC  xB3.0
02C86:  BRA    2C92
02C88:  BTFSS  xB5.0
02C8A:  BRA    2C92
....................              {
....................                bit_clear(Red9_15,1); bit_set(Green9_15,1); 
02C8C:  BCF    50.1
02C8E:  BSF    54.1
....................              }
02C90:  BRA    2C9E
....................              else if((RED_Colour.B9)&&(GREEN_Colour.B9))//Ambian
02C92:  BTFSS  xB3.0
02C94:  BRA    2C9E
02C96:  BTFSS  xB5.0
02C98:  BRA    2C9E
....................              {
....................                bit_set(Red9_15,1); bit_set(Green9_15,1) ; 
02C9A:  BSF    50.1
02C9C:  BSF    54.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B10)//++++++++++++B10+++++++++++++++++++++
02C9E:  BTFSS  x9D.1
02CA0:  BRA    2CA8
....................            {
....................              bit_clear(Red9_15,2); bit_clear(Green9_15,2);
02CA2:  BCF    50.2
02CA4:  BCF    54.2
....................            }
02CA6:  BRA    2CD0
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B10 )&&(GREEN_Colour.B10 ==0 ))//Red
02CA8:  BTFSS  xB3.1
02CAA:  BRA    2CB6
02CAC:  BTFSC  xB5.1
02CAE:  BRA    2CB6
....................              {
....................                bit_set(Red9_15,2); bit_clear(Green9_15,2);
02CB0:  BSF    50.2
02CB2:  BCF    54.2
....................              }
02CB4:  BRA    2CD0
....................              else if((RED_Colour.B10==0 )&&(GREEN_Colour.B10))//Green
02CB6:  BTFSC  xB3.1
02CB8:  BRA    2CC4
02CBA:  BTFSS  xB5.1
02CBC:  BRA    2CC4
....................              {
....................                bit_clear(Red9_15,2); bit_set(Green9_15,2); 
02CBE:  BCF    50.2
02CC0:  BSF    54.2
....................              }
02CC2:  BRA    2CD0
....................              else if((RED_Colour.B10)&&(GREEN_Colour.B10))//Ambian
02CC4:  BTFSS  xB3.1
02CC6:  BRA    2CD0
02CC8:  BTFSS  xB5.1
02CCA:  BRA    2CD0
....................              {
....................                bit_set(Red9_15,2); bit_set(Green9_15,2) ; 
02CCC:  BSF    50.2
02CCE:  BSF    54.2
....................              }  
....................            }
....................            
....................        // }
....................         
....................        // if(NoOfPoint >= 20)
....................       //{   
....................            ////////////////////////////////////////////////////////
....................             if(Output.B11)//++++++++++++B11+++++++++++++++++++++
02CD0:  BTFSS  x9D.2
02CD2:  BRA    2CDA
....................            {
....................              bit_clear(Red9_15,3); bit_clear(Green9_15,3);
02CD4:  BCF    50.3
02CD6:  BCF    54.3
....................            }
02CD8:  BRA    2D02
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B11 )&&(GREEN_Colour.B11 ==0 ))//Red
02CDA:  BTFSS  xB3.2
02CDC:  BRA    2CE8
02CDE:  BTFSC  xB5.2
02CE0:  BRA    2CE8
....................              {
....................                bit_set(Red9_15,3); bit_clear(Green9_15,3);
02CE2:  BSF    50.3
02CE4:  BCF    54.3
....................              }
02CE6:  BRA    2D02
....................              else if((RED_Colour.B11==0 )&&(GREEN_Colour.B11))//Green
02CE8:  BTFSC  xB3.2
02CEA:  BRA    2CF6
02CEC:  BTFSS  xB5.2
02CEE:  BRA    2CF6
....................              {
....................                bit_clear(Red9_15,3); bit_set(Green9_15,3); 
02CF0:  BCF    50.3
02CF2:  BSF    54.3
....................              }
02CF4:  BRA    2D02
....................              else if((RED_Colour.B11)&&(GREEN_Colour.B11))//Ambian
02CF6:  BTFSS  xB3.2
02CF8:  BRA    2D02
02CFA:  BTFSS  xB5.2
02CFC:  BRA    2D02
....................              {
....................                bit_set(Red9_15,3); bit_set(Green9_15,3) ; 
02CFE:  BSF    50.3
02D00:  BSF    54.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B12)//++++++++++++B12+++++++++++++++++++++
02D02:  BTFSS  x9D.3
02D04:  BRA    2D0C
....................            {
....................              bit_clear(Red9_15,4); bit_clear(Green9_15,4);
02D06:  BCF    50.4
02D08:  BCF    54.4
....................            }
02D0A:  BRA    2D34
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B12 )&&(GREEN_Colour.B12 ==0 ))//Red
02D0C:  BTFSS  xB3.3
02D0E:  BRA    2D1A
02D10:  BTFSC  xB5.3
02D12:  BRA    2D1A
....................              {
....................                bit_set(Red9_15,4); bit_clear(Green9_15,4);
02D14:  BSF    50.4
02D16:  BCF    54.4
....................              }
02D18:  BRA    2D34
....................              else if((RED_Colour.B12==0 )&&(GREEN_Colour.B12))//Green
02D1A:  BTFSC  xB3.3
02D1C:  BRA    2D28
02D1E:  BTFSS  xB5.3
02D20:  BRA    2D28
....................              {
....................                bit_clear(Red9_15,4); bit_set(Green9_15,4); 
02D22:  BCF    50.4
02D24:  BSF    54.4
....................              }
02D26:  BRA    2D34
....................              else if((RED_Colour.B12)&&(GREEN_Colour.B12))//Ambian
02D28:  BTFSS  xB3.3
02D2A:  BRA    2D34
02D2C:  BTFSS  xB5.3
02D2E:  BRA    2D34
....................              {
....................                bit_set(Red9_15,4); bit_set(Green9_15,4) ; 
02D30:  BSF    50.4
02D32:  BSF    54.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B13)//++++++++++++B13+++++++++++++++++++++
02D34:  BTFSS  x9D.4
02D36:  BRA    2D3E
....................            {
....................              bit_clear(Red9_15,5); bit_clear(Green9_15,5);
02D38:  BCF    50.5
02D3A:  BCF    54.5
....................            }
02D3C:  BRA    2D66
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B13 )&&(GREEN_Colour.B13 ==0 ))//Red
02D3E:  BTFSS  xB3.4
02D40:  BRA    2D4C
02D42:  BTFSC  xB5.4
02D44:  BRA    2D4C
....................              {
....................                bit_set(Red9_15,5); bit_clear(Green9_15,5);
02D46:  BSF    50.5
02D48:  BCF    54.5
....................              }
02D4A:  BRA    2D66
....................              else if((RED_Colour.B13==0 )&&(GREEN_Colour.B13))//Green
02D4C:  BTFSC  xB3.4
02D4E:  BRA    2D5A
02D50:  BTFSS  xB5.4
02D52:  BRA    2D5A
....................              {
....................                bit_clear(Red9_15,5); bit_set(Green9_15,5); 
02D54:  BCF    50.5
02D56:  BSF    54.5
....................              }
02D58:  BRA    2D66
....................              else if((RED_Colour.B13)&&(GREEN_Colour.B13))//Ambian
02D5A:  BTFSS  xB3.4
02D5C:  BRA    2D66
02D5E:  BTFSS  xB5.4
02D60:  BRA    2D66
....................              {
....................                bit_set(Red9_15,5); bit_set(Green9_15,5) ; 
02D62:  BSF    50.5
02D64:  BSF    54.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B14)//++++++++++++B14+++++++++++++++++++++
02D66:  BTFSS  x9D.5
02D68:  BRA    2D70
....................            {
....................              bit_clear(Red9_15,6); bit_clear(Green9_15,6);
02D6A:  BCF    50.6
02D6C:  BCF    54.6
....................            }
02D6E:  BRA    2D98
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B14 )&&(GREEN_Colour.B14 ==0 ))//Red
02D70:  BTFSS  xB3.5
02D72:  BRA    2D7E
02D74:  BTFSC  xB5.5
02D76:  BRA    2D7E
....................              {
....................                bit_set(Red9_15,6); bit_clear(Green9_15,6);
02D78:  BSF    50.6
02D7A:  BCF    54.6
....................              }
02D7C:  BRA    2D98
....................              else if((RED_Colour.B14==0 )&&(GREEN_Colour.B14))//Green
02D7E:  BTFSC  xB3.5
02D80:  BRA    2D8C
02D82:  BTFSS  xB5.5
02D84:  BRA    2D8C
....................              {
....................                bit_clear(Red9_15,6); bit_set(Green9_15,6); 
02D86:  BCF    50.6
02D88:  BSF    54.6
....................              }
02D8A:  BRA    2D98
....................              else if((RED_Colour.B14)&&(GREEN_Colour.B14))//Ambian
02D8C:  BTFSS  xB3.5
02D8E:  BRA    2D98
02D90:  BTFSS  xB5.5
02D92:  BRA    2D98
....................              {
....................                bit_set(Red9_15,6); bit_set(Green9_15,6) ; 
02D94:  BSF    50.6
02D96:  BSF    54.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B15)//++++++++++++B15+++++++++++++++++++++
02D98:  BTFSS  x9D.6
02D9A:  BRA    2DA2
....................            {
....................              bit_clear(Red9_15,7); bit_clear(Green9_15,7);
02D9C:  BCF    50.7
02D9E:  BCF    54.7
....................            }
02DA0:  BRA    2DCA
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B15 )&&(GREEN_Colour.B15 ==0 ))//Red
02DA2:  BTFSS  xB3.6
02DA4:  BRA    2DB0
02DA6:  BTFSC  xB5.6
02DA8:  BRA    2DB0
....................              {
....................                bit_set(Red9_15,7); bit_clear(Green9_15,7);
02DAA:  BSF    50.7
02DAC:  BCF    54.7
....................              }
02DAE:  BRA    2DCA
....................              else if((RED_Colour.B15==0 )&&(GREEN_Colour.B15))//Green
02DB0:  BTFSC  xB3.6
02DB2:  BRA    2DBE
02DB4:  BTFSS  xB5.6
02DB6:  BRA    2DBE
....................              {
....................                bit_clear(Red9_15,7); bit_set(Green9_15,7); 
02DB8:  BCF    50.7
02DBA:  BSF    54.7
....................              }
02DBC:  BRA    2DCA
....................              else if((RED_Colour.B15)&&(GREEN_Colour.B15))//Ambian
02DBE:  BTFSS  xB3.6
02DC0:  BRA    2DCA
02DC2:  BTFSS  xB5.6
02DC4:  BRA    2DCA
....................              {
....................                bit_set(Red9_15,7); bit_set(Green9_15,7) ; 
02DC6:  BSF    50.7
02DC8:  BSF    54.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B16)//++++++++++++B16+++++++++++++++++++++
02DCA:  BTFSS  x9D.7
02DCC:  BRA    2DD4
....................            {
....................              bit_clear(Red16_16,0); bit_clear(Green16_16,0);
02DCE:  BCF    51.0
02DD0:  BCF    55.0
....................            }
02DD2:  BRA    2DFC
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B16 )&&(GREEN_Colour.B16 ==0 ))//Red
02DD4:  BTFSS  xB3.7
02DD6:  BRA    2DE2
02DD8:  BTFSC  xB5.7
02DDA:  BRA    2DE2
....................              {
....................                bit_set(Red16_16,0); bit_clear(Green16_16,0);
02DDC:  BSF    51.0
02DDE:  BCF    55.0
....................              }
02DE0:  BRA    2DFC
....................              else if((RED_Colour.B16==0 )&&(GREEN_Colour.B16))//Green
02DE2:  BTFSC  xB3.7
02DE4:  BRA    2DF0
02DE6:  BTFSS  xB5.7
02DE8:  BRA    2DF0
....................              {
....................                bit_clear(Red16_16,0); bit_set(Green16_16,0); 
02DEA:  BCF    51.0
02DEC:  BSF    55.0
....................              }
02DEE:  BRA    2DFC
....................              else if((RED_Colour.B16)&&(GREEN_Colour.B16))//Ambian
02DF0:  BTFSS  xB3.7
02DF2:  BRA    2DFC
02DF4:  BTFSS  xB5.7
02DF6:  BRA    2DFC
....................              {
....................                bit_set(Red16_16,0); bit_set(Green16_16,0) ; 
02DF8:  BSF    51.0
02DFA:  BSF    55.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            
....................             /*
....................           
....................           
....................            ////////////////////////////////////////////////////////
....................            if(Output.B17)//++++++++++++B17+++++++++++++++++++++
....................            {
....................              bit_clear(Green11_18,6); bit_clear(Red11_18,6);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B17 )&&(GREEN_Colour.B17 ==0 ))//Red
....................              {
....................                bit_set(Red11_18,6); bit_clear(Green11_18,6);
....................              }
....................              else if((RED_Colour.B17==0 )&&(GREEN_Colour.B17))//Green
....................              {
....................                bit_clear(Red11_18,6); bit_set(Green11_18,6); 
....................              }
....................              else if((RED_Colour.B17)&&(GREEN_Colour.B17))//Ambian
....................              {
....................                bit_set(Red11_18,6); bit_set(Green11_18,6) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B18)//++++++++++++B18+++++++++++++++++++++
....................            {
....................              bit_clear(Green11_18,7); bit_clear(Red11_18,7);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B18 )&&(GREEN_Colour.B18 ==0 ))//Red
....................              {
....................                bit_set(Red11_18,7); bit_clear(Green11_18,7);
....................              }
....................              else if((RED_Colour.B18==0 )&&(GREEN_Colour.B18))//Green
....................              {
....................                bit_clear(Red11_18,7); bit_set(Green11_18,7); 
....................              }
....................              else if((RED_Colour.B18)&&(GREEN_Colour.B18))//Ambian
....................              {
....................                bit_set(Red11_18,7); bit_set(Green11_18,7) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B19)//++++++++++++B19+++++++++++++++++++++
....................            {
....................              bit_clear(Green19_20,0); bit_clear(Red19_20,0);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B19 )&&(GREEN_Colour.B19 ==0 ))//Red
....................              {
....................                bit_set(Red19_20,0); bit_clear(Green19_20,0);
....................              }
....................              else if((RED_Colour.B19==0 )&&(GREEN_Colour.B19))//Green
....................              {
....................                bit_clear(Red19_20,0); bit_set(Green19_20,0); 
....................              }
....................              else if((RED_Colour.B19)&&(GREEN_Colour.B19))//Ambian
....................              {
....................                bit_set(Red19_20,0); bit_set(Green19_20,0) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B20)//++++++++++++B20+++++++++++++++++++++
....................            {
....................              bit_clear(Green19_20,1); bit_clear(Red19_20,1);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B20 )&&(GREEN_Colour.B20 ==0 ))//Red
....................              {
....................                bit_set(Red19_20,1); bit_clear(Green19_20,1);
....................              }
....................              else if((RED_Colour.B20==0 )&&(GREEN_Colour.B20))//Green
....................              {
....................                bit_clear(Red19_20,1); bit_set(Green19_20,1); 
....................              }
....................              else if((RED_Colour.B20)&&(GREEN_Colour.B20))//Ambian
....................              {
....................                bit_set(Red19_20,1); bit_set(Green19_20,1) ; 
....................              }  
....................            }
....................            
....................            
....................            ////////////////////////////////////////////////////////
....................          
....................       //} 
.................... 
....................         */
....................         
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_7);
02DFC:  MOVLW  04
02DFE:  MOVLB  C
02E00:  MOVWF  x23
02E02:  MOVFF  4E,C24
02E06:  MOVLB  0
02E08:  RCALL  2A98
....................            IO_OUTPUT_B(IO_DEVICE_2, Red8_8);
02E0A:  MOVLW  04
02E0C:  MOVLB  C
02E0E:  MOVWF  x23
02E10:  MOVFF  4F,C24
02E14:  MOVLB  0
02E16:  RCALL  2AAE
....................                       
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_7);
02E18:  MOVLW  06
02E1A:  MOVLB  C
02E1C:  MOVWF  x23
02E1E:  MOVFF  52,C24
02E22:  MOVLB  0
02E24:  RCALL  2A98
....................            IO_OUTPUT_B(IO_DEVICE_3, Green8_8);
02E26:  MOVLW  06
02E28:  MOVLB  C
02E2A:  MOVWF  x23
02E2C:  MOVFF  53,C24
02E30:  MOVLB  0
02E32:  RCALL  2AAE
....................            
....................            IO_OUTPUT_A(IO_DEVICE_5, Red9_15);                                                                                                                                      
02E34:  MOVLW  0A
02E36:  MOVLB  C
02E38:  MOVWF  x23
02E3A:  MOVFF  50,C24
02E3E:  MOVLB  0
02E40:  RCALL  2A98
....................            IO_OUTPUT_B(IO_DEVICE_5, Red16_16);
02E42:  MOVLW  0A
02E44:  MOVLB  C
02E46:  MOVWF  x23
02E48:  MOVFF  51,C24
02E4C:  MOVLB  0
02E4E:  RCALL  2AAE
....................                      
....................            IO_OUTPUT_A(IO_DEVICE_4, Green9_15);
02E50:  MOVLW  08
02E52:  MOVLB  C
02E54:  MOVWF  x23
02E56:  MOVFF  54,C24
02E5A:  MOVLB  0
02E5C:  RCALL  2A98
....................            IO_OUTPUT_B(IO_DEVICE_4, Green16_16);
02E5E:  MOVLW  08
02E60:  MOVLB  C
02E62:  MOVWF  x23
02E64:  MOVFF  55,C24
02E68:  MOVLB  0
02E6A:  RCALL  2AAE
....................            
....................                                 
....................            //IO_OUTPUT_A(IO_DEVICE_4, Red1_8); //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_4, Red9_10); //jj test
....................            
....................            //IO_OUTPUT_A(IO_DEVICE_5, Green1_8);  //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_5, Green9_10); //jj test
....................                                            
....................            
....................    }
02E6C:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
....................    if(NoOfPoint == 8)
*
0614C:  MOVF   x6D,W
0614E:  SUBLW  08
06150:  BNZ   6198
....................    {
....................       Inputt.B1 = ~InputType.B1;
06152:  MOVLB  B
06154:  BCF    x9A.0
06156:  BTFSS  x9E.0
06158:  BSF    x9A.0
....................       Inputt.B2 = ~InputType.B2;
0615A:  BCF    x9A.1
0615C:  BTFSS  x9E.1
0615E:  BSF    x9A.1
....................       Inputt.B3 = ~InputType.B3;
06160:  BCF    x9A.2
06162:  BTFSS  x9E.2
06164:  BSF    x9A.2
....................       Inputt.B4 = ~InputType.B4;
06166:  BCF    x9A.3
06168:  BTFSS  x9E.3
0616A:  BSF    x9A.3
....................       Inputt.B5 = ~InputType.B5;
0616C:  BCF    x9A.4
0616E:  BTFSS  x9E.4
06170:  BSF    x9A.4
....................       Inputt.B6 = ~InputType.B6;
06172:  BCF    x9A.5
06174:  BTFSS  x9E.5
06176:  BSF    x9A.5
....................       Inputt.B7 = ~InputType.B7;
06178:  BCF    x9A.6
0617A:  BTFSS  x9E.6
0617C:  BSF    x9A.6
....................       Inputt.B8 = ~InputType.B8;
0617E:  BCF    x9A.7
06180:  BTFSS  x9E.7
06182:  BSF    x9A.7
....................       Ack.B1 = 0;
06184:  BCF    xA8.0
....................       Ack.B2 = 0;
06186:  BCF    xA8.1
....................       Ack.B3 = 0;
06188:  BCF    xA8.2
....................       Ack.B4 = 0;
0618A:  BCF    xA8.3
....................       Ack.B5 = 0;
0618C:  BCF    xA8.4
....................       Ack.B6 = 0;
0618E:  BCF    xA8.5
....................       Ack.B7 = 0;
06190:  BCF    xA8.6
....................       Ack.B8 = 0;
06192:  BCF    xA8.7
....................    }
06194:  BRA    6220
06196:  MOVLB  0
....................    else if(NoOfPoint == 16)
06198:  MOVF   x6D,W
0619A:  SUBLW  10
0619C:  BNZ   6220
....................    {
....................       Inputt.B1 = ~InputType.B1;
0619E:  MOVLB  B
061A0:  BCF    x9A.0
061A2:  BTFSS  x9E.0
061A4:  BSF    x9A.0
....................       Inputt.B2 = ~InputType.B2;
061A6:  BCF    x9A.1
061A8:  BTFSS  x9E.1
061AA:  BSF    x9A.1
....................       Inputt.B3 = ~InputType.B3;
061AC:  BCF    x9A.2
061AE:  BTFSS  x9E.2
061B0:  BSF    x9A.2
....................       Inputt.B4 = ~InputType.B4;
061B2:  BCF    x9A.3
061B4:  BTFSS  x9E.3
061B6:  BSF    x9A.3
....................       Inputt.B5 = ~InputType.B5;
061B8:  BCF    x9A.4
061BA:  BTFSS  x9E.4
061BC:  BSF    x9A.4
....................       Inputt.B6 = ~InputType.B6;
061BE:  BCF    x9A.5
061C0:  BTFSS  x9E.5
061C2:  BSF    x9A.5
....................       Inputt.B7 = ~InputType.B7;
061C4:  BCF    x9A.6
061C6:  BTFSS  x9E.6
061C8:  BSF    x9A.6
....................       Inputt.B8 = ~InputType.B8;
061CA:  BCF    x9A.7
061CC:  BTFSS  x9E.7
061CE:  BSF    x9A.7
....................       Inputt.B9 = ~InputType.B9;
061D0:  BCF    x9B.0
061D2:  BTFSS  x9F.0
061D4:  BSF    x9B.0
....................       Inputt.B10 = ~InputType.B10;
061D6:  BCF    x9B.1
061D8:  BTFSS  x9F.1
061DA:  BSF    x9B.1
....................       Inputt.B11 = ~InputType.B11;
061DC:  BCF    x9B.2
061DE:  BTFSS  x9F.2
061E0:  BSF    x9B.2
....................       Inputt.B12 = ~InputType.B12;
061E2:  BCF    x9B.3
061E4:  BTFSS  x9F.3
061E6:  BSF    x9B.3
....................       Inputt.B13 = ~InputType.B13;
061E8:  BCF    x9B.4
061EA:  BTFSS  x9F.4
061EC:  BSF    x9B.4
....................       Inputt.B14 = ~InputType.B14;
061EE:  BCF    x9B.5
061F0:  BTFSS  x9F.5
061F2:  BSF    x9B.5
....................       Inputt.B15 = ~InputType.B15;
061F4:  BCF    x9B.6
061F6:  BTFSS  x9F.6
061F8:  BSF    x9B.6
....................       Inputt.B16 = ~InputType.B16;
061FA:  BCF    x9B.7
061FC:  BTFSS  x9F.7
061FE:  BSF    x9B.7
....................       Ack.B1 = 0;
06200:  BCF    xA8.0
....................       Ack.B2 = 0;
06202:  BCF    xA8.1
....................       Ack.B3 = 0;
06204:  BCF    xA8.2
....................       Ack.B4 = 0;
06206:  BCF    xA8.3
....................       Ack.B5 = 0;
06208:  BCF    xA8.4
....................       Ack.B6 = 0;
0620A:  BCF    xA8.5
....................       Ack.B7 = 0;
0620C:  BCF    xA8.6
....................       Ack.B8 = 0;
0620E:  BCF    xA8.7
....................       Ack.B9 = 0;
06210:  BCF    xA9.0
....................       Ack.B10 = 0;
06212:  BCF    xA9.1
....................       Ack.B11 = 0;
06214:  BCF    xA9.2
....................       Ack.B12 = 0;
06216:  BCF    xA9.3
....................       Ack.B13 = 0;
06218:  BCF    xA9.4
....................       Ack.B14 = 0;
0621A:  BCF    xA9.5
....................       Ack.B15 = 0;
0621C:  BCF    xA9.6
....................       Ack.B16 = 0;
0621E:  BCF    xA9.7
06220:  MOVLB  0
....................    }
06222:  GOTO   A530 (RETURN)
....................   
.................... }
.................... 
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
*
0A45C:  MOVFF  32,C1B
....................    output_temp[1] = output9_16;
0A460:  MOVFF  33,C1C
.................... 
.................... 
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
0A464:  BSF    F94.2
0A466:  BTFSC  F82.2
0A468:  BRA    A46E
0A46A:  BTFSS  1A.6
0A46C:  BRA    A472
0A46E:  BTFSS  1A.4
0A470:  BRA    A47E
0A472:  MOVLW  32
0A474:  MOVLB  C
0A476:  MOVWF  x24
0A478:  MOVLB  0
0A47A:  CALL   0936
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
0A47E:  BSF    F94.2
0A480:  BTFSC  F82.2
0A482:  BRA    A488
0A484:  BTFSS  1A.6
0A486:  BRA    A48C
0A488:  BTFSS  1A.4
0A48A:  BRA    A518
....................        {
....................            if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
0A48C:  BSF    F94.2
0A48E:  BTFSC  F82.2
0A490:  BRA    A496
0A492:  BTFSS  1A.6
0A494:  BRA    A49A
0A496:  BTFSS  1A.4
0A498:  BRA    A516
....................            {
....................              restart_wdt();
0A49A:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
0A49C:  MOVF   2F,F
0A49E:  BNZ   A4A4
0A4A0:  MOVLW  06
0A4A2:  MOVWF  2F
....................              Test = 1;
0A4A4:  BSF    1A.6
....................               //if(NoOfPoint >= 16)
....................              // {
....................              
....................                  IO_OUTPUT_A(IO_DEVICE_2, 0xFF);
0A4A6:  MOVLW  04
0A4A8:  MOVLB  C
0A4AA:  MOVWF  x23
0A4AC:  SETF   x24
0A4AE:  MOVLB  0
0A4B0:  CALL   2A98
....................                  IO_OUTPUT_B(IO_DEVICE_2, 0xFF);
0A4B4:  MOVLW  04
0A4B6:  MOVLB  C
0A4B8:  MOVWF  x23
0A4BA:  SETF   x24
0A4BC:  MOVLB  0
0A4BE:  CALL   2AAE
....................                             
....................                  IO_OUTPUT_A(IO_DEVICE_3, 0xFF);
0A4C2:  MOVLW  06
0A4C4:  MOVLB  C
0A4C6:  MOVWF  x23
0A4C8:  SETF   x24
0A4CA:  MOVLB  0
0A4CC:  CALL   2A98
....................                  IO_OUTPUT_B(IO_DEVICE_3, 0xFF);
0A4D0:  MOVLW  06
0A4D2:  MOVLB  C
0A4D4:  MOVWF  x23
0A4D6:  SETF   x24
0A4D8:  MOVLB  0
0A4DA:  CALL   2AAE
....................                  
....................                  IO_OUTPUT_A(IO_DEVICE_4, 0xFF);
0A4DE:  MOVLW  08
0A4E0:  MOVLB  C
0A4E2:  MOVWF  x23
0A4E4:  SETF   x24
0A4E6:  MOVLB  0
0A4E8:  CALL   2A98
....................                  IO_OUTPUT_B(IO_DEVICE_4, 0xFF);
0A4EC:  MOVLW  08
0A4EE:  MOVLB  C
0A4F0:  MOVWF  x23
0A4F2:  SETF   x24
0A4F4:  MOVLB  0
0A4F6:  CALL   2AAE
....................                            
....................                  IO_OUTPUT_A(IO_DEVICE_5, 0xFF);
0A4FA:  MOVLW  0A
0A4FC:  MOVLB  C
0A4FE:  MOVWF  x23
0A500:  SETF   x24
0A502:  MOVLB  0
0A504:  CALL   2A98
....................                  IO_OUTPUT_B(IO_DEVICE_5, 0xFF);
0A508:  MOVLW  0A
0A50A:  MOVLB  C
0A50C:  MOVWF  x23
0A50E:  SETF   x24
0A510:  MOVLB  0
0A512:  CALL   2AAE
....................                  //PCF8575_write(0xFF,0x00,Input1_8_Wr_addr);
....................                  //PCF8575_write(0xFF,0x00,Input9_16_Wr_addr);
....................                  //IO_OUTPUT_B(IO_DEVICE_0, 0x00);
....................                  //IO_OUTPUT_B(IO_DEVICE_1, 0x00);
....................              // }
....................              
....................            }
....................        }
0A516:  BRA    A528
....................        else if(input(Ptest) == 1 && Test == 1)
0A518:  BSF    F94.2
0A51A:  BTFSS  F82.2
0A51C:  BRA    A528
0A51E:  BTFSS  1A.6
0A520:  BRA    A528
....................        {
....................            T_test = 0x00;
0A522:  CLRF   2F
....................            Test = 0;
0A524:  BCF    1A.6
....................            Test_fault = 0;
0A526:  BCF    1A.5
....................        }
.................... 
.................... 
....................        if(Test_fault == 1)
0A528:  BTFSS  1A.5
0A52A:  BRA    A53E
....................        {
....................           ForceAllAlarm();
0A52C:  GOTO   614C
....................           Anal_Function();
0A530:  CALL   6C54
....................           if(input(Ptest) == 1)
0A534:  BSF    F94.2
0A536:  BTFSS  F82.2
0A538:  BRA    A53C
....................           {
....................             Test_fault = 0;
0A53A:  BCF    1A.5
....................           }
....................        }
0A53C:  BRA    A554
....................       
....................        else if(input(Ptest) == 1 && Test == 1)
0A53E:  BSF    F94.2
0A540:  BTFSS  F82.2
0A542:  BRA    A554
0A544:  BTFSS  1A.6
0A546:  BRA    A554
....................        {
....................           if(NoOfPoint >= 16)
0A548:  MOVF   x6D,W
0A54A:  SUBLW  0F
0A54C:  BC    A54E
....................           {
....................              //PCF8575_write(0xFF,output_temp[0],Input1_8_Wr_addr);
....................              //PCF8575_write(0xFF,output_temp[1],Input9_16_Wr_addr);
....................              //IO_OUTPUT_B(IO_DEVICE_0, output_temp[0]);
....................              //IO_OUTPUT_B(IO_DEVICE_1, output_temp[1]); 
....................           }
....................           
.................... 
....................           T_test = 0x00;
0A54E:  CLRF   2F
....................           Test = 0;
0A550:  BCF    1A.6
....................           Test_fault = 0;
0A552:  BCF    1A.5
....................        }
0A554:  GOTO   AE3C (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
03280:  BSF    F94.0
03282:  BTFSC  F82.0
03284:  BRA    328A
03286:  BTFSS  1A.7
03288:  BRA    328E
0328A:  BTFSS  1A.2
0328C:  BRA    329A
0328E:  MOVLW  32
03290:  MOVLB  C
03292:  MOVWF  x24
03294:  MOVLB  0
03296:  CALL   0936
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
0329A:  BSF    F94.0
0329C:  BTFSC  F82.0
0329E:  BRA    32A4
032A0:  BTFSS  1A.7
032A2:  BRA    32A8
032A4:  BTFSS  1A.2
032A6:  BRA    33BC
....................    {
....................             AutoAckFlag = 0;
032A8:  BCF    1A.2
....................             AutoAckDelayTime = 0x00;
032AA:  CLRF   1D
....................       
....................                   //if(In.B1 == 1 || ((Inputt.B1 ^ InputType.B1) == 1))
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
032AC:  MOVLB  B
032AE:  BTFSC  xAA.0
032B0:  BRA    32B6
032B2:  BTFSS  xAC.0
032B4:  BRA    32BE
....................            {
....................              Ack.B1 = 1;
032B6:  BSF    xA8.0
....................              In.B1 = 0;
032B8:  BCF    xAA.0
....................              In2.B1 = 0;      //for auto reset
032BA:  BCF    xAC.0
....................              Output.B1 = 0;
032BC:  BCF    x9C.0
....................            }
....................            //if(In.B2 == 1 || ((Inputt.B2 ^ InputType.B2) == 1))
....................            if((In.B2 == 1)||(In2.B2 == 1))
032BE:  BTFSC  xAA.1
032C0:  BRA    32C6
032C2:  BTFSS  xAC.1
032C4:  BRA    32CE
....................            {
....................              Ack.B2 = 1;
032C6:  BSF    xA8.1
....................              In.B2 = 0;
032C8:  BCF    xAA.1
....................              In2.B2 = 0;      //for auto reset
032CA:  BCF    xAC.1
....................              Output.B2 = 0;
032CC:  BCF    x9C.1
....................            }
....................            //if(In.B3 == 1 || ((Inputt.B3 ^ InputType.B3) == 1))
....................            if((In.B3 == 1)||(In2.B3 == 1))
032CE:  BTFSC  xAA.2
032D0:  BRA    32D6
032D2:  BTFSS  xAC.2
032D4:  BRA    32DE
....................            {
....................              Ack.B3 = 1;
032D6:  BSF    xA8.2
....................              In.B3 = 0;
032D8:  BCF    xAA.2
....................              In2.B3 = 0;      //for auto reset
032DA:  BCF    xAC.2
....................              Output.B3 = 0;
032DC:  BCF    x9C.2
....................            }
....................            //if(In.B4 == 1 || ((Inputt.B4 ^ InputType.B4) == 1))
....................            if((In.B4 == 1)||(In2.B4 == 1))
032DE:  BTFSC  xAA.3
032E0:  BRA    32E6
032E2:  BTFSS  xAC.3
032E4:  BRA    32EE
....................            {
....................              Ack.B4 = 1;
032E6:  BSF    xA8.3
....................              In.B4 = 0;
032E8:  BCF    xAA.3
....................              In2.B4 = 0;      //for auto reset
032EA:  BCF    xAC.3
....................              Output.B4 = 0;
032EC:  BCF    x9C.3
....................            }
....................            //if(In.B5 == 1 || ((Inputt.B5 ^ InputType.B5) == 1))
....................            if((In.B5 == 1)||(In2.B5 == 1))
032EE:  BTFSC  xAA.4
032F0:  BRA    32F6
032F2:  BTFSS  xAC.4
032F4:  BRA    32FE
....................            {
....................              Ack.B5 = 1;
032F6:  BSF    xA8.4
....................              In.B5 = 0;
032F8:  BCF    xAA.4
....................              In2.B5 = 0;      //for auto reset
032FA:  BCF    xAC.4
....................              Output.B5 = 0;
032FC:  BCF    x9C.4
....................            }
....................            //if(In.B6 == 1 || ((Inputt.B6 ^ InputType.B6) == 1))
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
032FE:  BTFSC  xAA.5
03300:  BRA    3306
03302:  BTFSS  xAC.5
03304:  BRA    330E
....................            {
....................              Ack.B6 = 1;
03306:  BSF    xA8.5
....................              In.B6 = 0;
03308:  BCF    xAA.5
....................              In2.B6 = 0;      //for auto reset
0330A:  BCF    xAC.5
....................              Output.B6 = 0;
0330C:  BCF    x9C.5
....................            }
....................            //if(In.B7 == 1 || ((Inputt.B7 ^ InputType.B7) == 1))
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
0330E:  BTFSC  xAA.6
03310:  BRA    3316
03312:  BTFSS  xAC.6
03314:  BRA    331E
....................            {
....................              Ack.B7 = 1;
03316:  BSF    xA8.6
....................              In.B7 = 0;
03318:  BCF    xAA.6
....................              In2.B7 = 0;      //for auto reset
0331A:  BCF    xAC.6
....................              Output.B7 = 0;
0331C:  BCF    x9C.6
....................            }
....................            //if(In.B8 == 1 || ((Inputt.B8 ^ InputType.B8) == 1))
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
0331E:  BTFSC  xAA.7
03320:  BRA    3326
03322:  BTFSS  xAC.7
03324:  BRA    332E
....................            {
....................              Ack.B8 = 1;
03326:  BSF    xA8.7
....................              In.B8 = 0;
03328:  BCF    xAA.7
....................              In2.B8 = 0;      //for auto reset
0332A:  BCF    xAC.7
....................              Output.B8 = 0;
0332C:  BCF    x9C.7
....................            }
....................           // if(In.B9 == 1 || ((Inputt.B9 ^ InputType.B9) == 1))
....................            if((In.B9 == 1 )||(In2.B9 == 1 ))
0332E:  BTFSC  xAB.0
03330:  BRA    3336
03332:  BTFSS  xAD.0
03334:  BRA    333E
....................            {
....................              Ack.B9 = 1;
03336:  BSF    xA9.0
....................              In.B9 = 0;
03338:  BCF    xAB.0
....................              In2.B9 = 0;      //for auto reset
0333A:  BCF    xAD.0
....................              Output.B9 = 0;
0333C:  BCF    x9D.0
....................            }
....................            //if(In.B10 == 1 || ((Inputt.B10 ^ InputType.B10) == 1))
....................            if((In.B10 == 1)||(In2.B10 == 1))
0333E:  BTFSC  xAB.1
03340:  BRA    3346
03342:  BTFSS  xAD.1
03344:  BRA    334E
....................            {
....................              Ack.B10 = 1;
03346:  BSF    xA9.1
....................              In.B10 = 0;
03348:  BCF    xAB.1
....................              In2.B10 = 0;      //for auto reset
0334A:  BCF    xAD.1
....................              Output.B10 = 0;
0334C:  BCF    x9D.1
....................            }
....................            //if(In.B11 == 1 || ((Inputt.B11 ^ InputType.B11) == 1))
....................            if((In.B11 == 1)||(In2.B11 == 1))
0334E:  BTFSC  xAB.2
03350:  BRA    3356
03352:  BTFSS  xAD.2
03354:  BRA    335E
....................            {
....................              Ack.B11 = 1;
03356:  BSF    xA9.2
....................              In.B11 = 0;
03358:  BCF    xAB.2
....................              In2.B11 = 0;      //for auto reset
0335A:  BCF    xAD.2
....................              Output.B11 = 0;
0335C:  BCF    x9D.2
....................            }
....................            //if(In.B12 == 1 || ((Inputt.B12 ^ InputType.B12) == 1))
....................            if((In.B12 == 1)||(In2.B12 == 1))
0335E:  BTFSC  xAB.3
03360:  BRA    3366
03362:  BTFSS  xAD.3
03364:  BRA    336E
....................            {
....................              Ack.B12 = 1;
03366:  BSF    xA9.3
....................              In.B12 = 0;
03368:  BCF    xAB.3
....................              In2.B12 = 0;      //for auto reset
0336A:  BCF    xAD.3
....................              Output.B12 = 0;
0336C:  BCF    x9D.3
....................            }
....................            //if(In.B13 == 1 || ((Inputt.B13 ^ InputType.B13) == 1))
....................            if((In.B13 == 1 )||(In2.B13 == 1 ))
0336E:  BTFSC  xAB.4
03370:  BRA    3376
03372:  BTFSS  xAD.4
03374:  BRA    337E
....................            {
....................              Ack.B13 = 1;
03376:  BSF    xA9.4
....................              In.B13 = 0;
03378:  BCF    xAB.4
....................              In2.B13 = 0;      //for auto reset
0337A:  BCF    xAD.4
....................              Output.B13 = 0;
0337C:  BCF    x9D.4
....................            }
....................            //if(In.B14 == 1 || ((Inputt.B14 ^ InputType.B14) == 1))
....................            if((In.B14 == 1)||(In2.B14 == 1))
0337E:  BTFSC  xAB.5
03380:  BRA    3386
03382:  BTFSS  xAD.5
03384:  BRA    338E
....................            {
....................              Ack.B14 = 1;
03386:  BSF    xA9.5
....................              In.B14 = 0;
03388:  BCF    xAB.5
....................              In2.B14 = 0;      //for auto reset
0338A:  BCF    xAD.5
....................              Output.B14 = 0;
0338C:  BCF    x9D.5
....................            }
....................            //if(In.B15 == 1 || ((Inputt.B15 ^ InputType.B15) == 1))
....................            if((In.B15 == 1)||(In2.B15 == 1))
0338E:  BTFSC  xAB.6
03390:  BRA    3396
03392:  BTFSS  xAD.6
03394:  BRA    339E
....................            {
....................              Ack.B15 = 1;
03396:  BSF    xA9.6
....................              In.B15 = 0;
03398:  BCF    xAB.6
....................              In2.B15 = 0;      //for auto reset
0339A:  BCF    xAD.6
....................              Output.B15 = 0;
0339C:  BCF    x9D.6
....................            }
....................            //if(In.B16 == 1 || ((Inputt.B16 ^ InputType.B16) == 1))
....................            if((In.B16 == 1)||(In2.B16 == 1))
0339E:  BTFSC  xAB.7
033A0:  BRA    33A6
033A2:  BTFSS  xAD.7
033A4:  BRA    33AE
....................            {
....................              Ack.B16 = 1;
033A6:  BSF    xA9.7
....................              In.B16 = 0;
033A8:  BCF    xAB.7
....................              In2.B16 = 0;      //for auto reset
033AA:  BCF    xAD.7
....................              Output.B16 = 0;
033AC:  BCF    x9D.7
....................            }     
....................       
....................             Ack_F = 1;
033AE:  BSF    1A.7
....................             output_bit(Pbuzzer,0);   //Buzzer
033B0:  BCF    F89.4
033B2:  BCF    F92.4
....................             output_bit(Pbell,0);     //Bell
033B4:  BCF    F89.3
033B6:  BCF    F92.3
....................    }
033B8:  BRA    33CA
033BA:  MOVLB  0
....................    else if(input(Pack) == 1 && Ack_F == 1)
033BC:  BSF    F94.0
033BE:  BTFSS  F82.0
033C0:  BRA    33C8
033C2:  BTFSS  1A.7
033C4:  BRA    33C8
....................    {
....................       Ack_F = 0;
033C6:  BCF    1A.7
033C8:  MOVLB  B
....................    }
033CA:  MOVLB  0
033CC:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
033CE:  BSF    F94.1
033D0:  BTFSC  F82.1
033D2:  BRA    33D8
033D4:  BTFSS  30.0
033D6:  BRA    33DC
033D8:  BTFSS  1A.3
033DA:  BRA    33E8
033DC:  MOVLW  32
033DE:  MOVLB  C
033E0:  MOVWF  x24
033E2:  MOVLB  0
033E4:  CALL   0936
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
033E8:  BSF    F94.1
033EA:  BTFSC  F82.1
033EC:  BRA    33F2
033EE:  BTFSS  30.0
033F0:  BRA    33F6
033F2:  BTFSS  1A.3
033F4:  BRA    367E
....................     {
....................        AutoResetFlag = 0;
033F6:  BCF    1A.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
033F8:  MOVLW  00
033FA:  MOVLB  B
033FC:  BTFSC  x9A.0
033FE:  MOVLW  01
03400:  MOVLB  C
03402:  MOVWF  x25
03404:  MOVLW  00
03406:  MOVLB  B
03408:  BTFSC  x9E.0
0340A:  MOVLW  01
0340C:  MOVLB  C
0340E:  XORWF  x25,W
03410:  BNZ   3420
03412:  MOVLB  B
03414:  BTFSS  xAA.0
03416:  BRA    341C
03418:  MOVLB  C
0341A:  BRA    3420
0341C:  BSF    x9C.0
0341E:  MOVLB  C
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
03420:  MOVLW  00
03422:  MOVLB  B
03424:  BTFSC  x9A.1
03426:  MOVLW  01
03428:  MOVLB  C
0342A:  MOVWF  x25
0342C:  MOVLW  00
0342E:  MOVLB  B
03430:  BTFSC  x9E.1
03432:  MOVLW  01
03434:  MOVLB  C
03436:  XORWF  x25,W
03438:  BNZ   3448
0343A:  MOVLB  B
0343C:  BTFSS  xAA.1
0343E:  BRA    3444
03440:  MOVLB  C
03442:  BRA    3448
03444:  BSF    x9C.1
03446:  MOVLB  C
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
03448:  MOVLW  00
0344A:  MOVLB  B
0344C:  BTFSC  x9A.2
0344E:  MOVLW  01
03450:  MOVLB  C
03452:  MOVWF  x25
03454:  MOVLW  00
03456:  MOVLB  B
03458:  BTFSC  x9E.2
0345A:  MOVLW  01
0345C:  MOVLB  C
0345E:  XORWF  x25,W
03460:  BNZ   3470
03462:  MOVLB  B
03464:  BTFSS  xAA.2
03466:  BRA    346C
03468:  MOVLB  C
0346A:  BRA    3470
0346C:  BSF    x9C.2
0346E:  MOVLB  C
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
03470:  MOVLW  00
03472:  MOVLB  B
03474:  BTFSC  x9A.3
03476:  MOVLW  01
03478:  MOVLB  C
0347A:  MOVWF  x25
0347C:  MOVLW  00
0347E:  MOVLB  B
03480:  BTFSC  x9E.3
03482:  MOVLW  01
03484:  MOVLB  C
03486:  XORWF  x25,W
03488:  BNZ   3498
0348A:  MOVLB  B
0348C:  BTFSS  xAA.3
0348E:  BRA    3494
03490:  MOVLB  C
03492:  BRA    3498
03494:  BSF    x9C.3
03496:  MOVLB  C
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
03498:  MOVLW  00
0349A:  MOVLB  B
0349C:  BTFSC  x9A.4
0349E:  MOVLW  01
034A0:  MOVLB  C
034A2:  MOVWF  x25
034A4:  MOVLW  00
034A6:  MOVLB  B
034A8:  BTFSC  x9E.4
034AA:  MOVLW  01
034AC:  MOVLB  C
034AE:  XORWF  x25,W
034B0:  BNZ   34C0
034B2:  MOVLB  B
034B4:  BTFSS  xAA.4
034B6:  BRA    34BC
034B8:  MOVLB  C
034BA:  BRA    34C0
034BC:  BSF    x9C.4
034BE:  MOVLB  C
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
034C0:  MOVLW  00
034C2:  MOVLB  B
034C4:  BTFSC  x9A.5
034C6:  MOVLW  01
034C8:  MOVLB  C
034CA:  MOVWF  x25
034CC:  MOVLW  00
034CE:  MOVLB  B
034D0:  BTFSC  x9E.5
034D2:  MOVLW  01
034D4:  MOVLB  C
034D6:  XORWF  x25,W
034D8:  BNZ   34E8
034DA:  MOVLB  B
034DC:  BTFSS  xAA.5
034DE:  BRA    34E4
034E0:  MOVLB  C
034E2:  BRA    34E8
034E4:  BSF    x9C.5
034E6:  MOVLB  C
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
034E8:  MOVLW  00
034EA:  MOVLB  B
034EC:  BTFSC  x9A.6
034EE:  MOVLW  01
034F0:  MOVLB  C
034F2:  MOVWF  x25
034F4:  MOVLW  00
034F6:  MOVLB  B
034F8:  BTFSC  x9E.6
034FA:  MOVLW  01
034FC:  MOVLB  C
034FE:  XORWF  x25,W
03500:  BNZ   3510
03502:  MOVLB  B
03504:  BTFSS  xAA.6
03506:  BRA    350C
03508:  MOVLB  C
0350A:  BRA    3510
0350C:  BSF    x9C.6
0350E:  MOVLB  C
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
03510:  MOVLW  00
03512:  MOVLB  B
03514:  BTFSC  x9A.7
03516:  MOVLW  01
03518:  MOVLB  C
0351A:  MOVWF  x25
0351C:  MOVLW  00
0351E:  MOVLB  B
03520:  BTFSC  x9E.7
03522:  MOVLW  01
03524:  MOVLB  C
03526:  XORWF  x25,W
03528:  BNZ   3538
0352A:  MOVLB  B
0352C:  BTFSS  xAA.7
0352E:  BRA    3534
03530:  MOVLB  C
03532:  BRA    3538
03534:  BSF    x9C.7
03536:  MOVLB  C
....................        if((Inputt.B9 ^ InputType.B9) == 0 && In.B9 == 0) Output.B9 = 1;
03538:  MOVLW  00
0353A:  MOVLB  B
0353C:  BTFSC  x9B.0
0353E:  MOVLW  01
03540:  MOVLB  C
03542:  MOVWF  x25
03544:  MOVLW  00
03546:  MOVLB  B
03548:  BTFSC  x9F.0
0354A:  MOVLW  01
0354C:  MOVLB  C
0354E:  XORWF  x25,W
03550:  BNZ   3560
03552:  MOVLB  B
03554:  BTFSS  xAB.0
03556:  BRA    355C
03558:  MOVLB  C
0355A:  BRA    3560
0355C:  BSF    x9D.0
0355E:  MOVLB  C
....................        if((Inputt.B10 ^ InputType.B10) == 0 && In.B10 == 0) Output.B10 = 1;
03560:  MOVLW  00
03562:  MOVLB  B
03564:  BTFSC  x9B.1
03566:  MOVLW  01
03568:  MOVLB  C
0356A:  MOVWF  x25
0356C:  MOVLW  00
0356E:  MOVLB  B
03570:  BTFSC  x9F.1
03572:  MOVLW  01
03574:  MOVLB  C
03576:  XORWF  x25,W
03578:  BNZ   3588
0357A:  MOVLB  B
0357C:  BTFSS  xAB.1
0357E:  BRA    3584
03580:  MOVLB  C
03582:  BRA    3588
03584:  BSF    x9D.1
03586:  MOVLB  C
....................        if((Inputt.B11 ^ InputType.B11) == 0 && In.B11 == 0) Output.B11 = 1;
03588:  MOVLW  00
0358A:  MOVLB  B
0358C:  BTFSC  x9B.2
0358E:  MOVLW  01
03590:  MOVLB  C
03592:  MOVWF  x25
03594:  MOVLW  00
03596:  MOVLB  B
03598:  BTFSC  x9F.2
0359A:  MOVLW  01
0359C:  MOVLB  C
0359E:  XORWF  x25,W
035A0:  BNZ   35B0
035A2:  MOVLB  B
035A4:  BTFSS  xAB.2
035A6:  BRA    35AC
035A8:  MOVLB  C
035AA:  BRA    35B0
035AC:  BSF    x9D.2
035AE:  MOVLB  C
....................        if((Inputt.B12 ^ InputType.B12) == 0 && In.B12 == 0) Output.B12 = 1;
035B0:  MOVLW  00
035B2:  MOVLB  B
035B4:  BTFSC  x9B.3
035B6:  MOVLW  01
035B8:  MOVLB  C
035BA:  MOVWF  x25
035BC:  MOVLW  00
035BE:  MOVLB  B
035C0:  BTFSC  x9F.3
035C2:  MOVLW  01
035C4:  MOVLB  C
035C6:  XORWF  x25,W
035C8:  BNZ   35D8
035CA:  MOVLB  B
035CC:  BTFSS  xAB.3
035CE:  BRA    35D4
035D0:  MOVLB  C
035D2:  BRA    35D8
035D4:  BSF    x9D.3
035D6:  MOVLB  C
....................        if((Inputt.B13 ^ InputType.B13) == 0 && In.B13 == 0) Output.B13 = 1;
035D8:  MOVLW  00
035DA:  MOVLB  B
035DC:  BTFSC  x9B.4
035DE:  MOVLW  01
035E0:  MOVLB  C
035E2:  MOVWF  x25
035E4:  MOVLW  00
035E6:  MOVLB  B
035E8:  BTFSC  x9F.4
035EA:  MOVLW  01
035EC:  MOVLB  C
035EE:  XORWF  x25,W
035F0:  BNZ   3600
035F2:  MOVLB  B
035F4:  BTFSS  xAB.4
035F6:  BRA    35FC
035F8:  MOVLB  C
035FA:  BRA    3600
035FC:  BSF    x9D.4
035FE:  MOVLB  C
....................        if((Inputt.B14 ^ InputType.B14) == 0 && In.B14 == 0) Output.B14 = 1;
03600:  MOVLW  00
03602:  MOVLB  B
03604:  BTFSC  x9B.5
03606:  MOVLW  01
03608:  MOVLB  C
0360A:  MOVWF  x25
0360C:  MOVLW  00
0360E:  MOVLB  B
03610:  BTFSC  x9F.5
03612:  MOVLW  01
03614:  MOVLB  C
03616:  XORWF  x25,W
03618:  BNZ   3628
0361A:  MOVLB  B
0361C:  BTFSS  xAB.5
0361E:  BRA    3624
03620:  MOVLB  C
03622:  BRA    3628
03624:  BSF    x9D.5
03626:  MOVLB  C
....................        if((Inputt.B15 ^ InputType.B15) == 0 && In.B15 == 0) Output.B15 = 1;
03628:  MOVLW  00
0362A:  MOVLB  B
0362C:  BTFSC  x9B.6
0362E:  MOVLW  01
03630:  MOVLB  C
03632:  MOVWF  x25
03634:  MOVLW  00
03636:  MOVLB  B
03638:  BTFSC  x9F.6
0363A:  MOVLW  01
0363C:  MOVLB  C
0363E:  XORWF  x25,W
03640:  BNZ   3650
03642:  MOVLB  B
03644:  BTFSS  xAB.6
03646:  BRA    364C
03648:  MOVLB  C
0364A:  BRA    3650
0364C:  BSF    x9D.6
0364E:  MOVLB  C
....................        if((Inputt.B16 ^ InputType.B16) == 0 && In.B16 == 0) Output.B16 = 1;
03650:  MOVLW  00
03652:  MOVLB  B
03654:  BTFSC  x9B.7
03656:  MOVLW  01
03658:  MOVLB  C
0365A:  MOVWF  x25
0365C:  MOVLW  00
0365E:  MOVLB  B
03660:  BTFSC  x9F.7
03662:  MOVLW  01
03664:  MOVLB  C
03666:  XORWF  x25,W
03668:  BNZ   3678
0366A:  MOVLB  B
0366C:  BTFSS  xAB.7
0366E:  BRA    3674
03670:  MOVLB  C
03672:  BRA    3678
03674:  BSF    x9D.7
03676:  MOVLB  C
....................        /*
....................        if((Inputt.B17 ^ InputType.B17) == 0 && In.B17 == 0) Output.B17 = 1;
....................        if((Inputt.B18 ^ InputType.B18) == 0 && In.B18 == 0) Output.B18 = 1;
....................        if((Inputt.B19 ^ InputType.B19) == 0 && In.B19 == 0) Output.B19 = 1;
....................        if((Inputt.B20 ^ InputType.B20) == 0 && In.B20 == 0) Output.B20 = 1;
....................        */
.................... 
....................        Reset_F = 1;
03678:  BSF    30.0
....................     }
0367A:  BRA    368C
0367C:  MOVLB  0
....................     else if(input(Preset) == 1 && Reset_F == 1)
0367E:  BSF    F94.1
03680:  BTFSS  F82.1
03682:  BRA    368A
03684:  BTFSS  30.0
03686:  BRA    368A
....................     {
....................        Reset_F = 0;
03688:  BCF    30.0
0368A:  MOVLB  C
....................     }
0368C:  MOVLB  0
0368E:  RETURN 0
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////// Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
0624C:  MOVLB  C
0624E:  DECFSZ x23,W
06250:  BRA    674A
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
06252:  MOVLW  00
06254:  MOVLB  B
06256:  BTFSC  xAA.0
06258:  MOVLW  01
0625A:  MOVLB  C
0625C:  MOVWF  x26
0625E:  MOVLW  00
06260:  MOVLB  B
06262:  BTFSC  xAC.0
06264:  MOVLW  01
06266:  MOVLB  C
06268:  IORWF  x26,W
0626A:  MOVWF  x25
0626C:  MOVLW  00
0626E:  MOVLB  B
06270:  BTFSS  xA8.0
06272:  MOVLW  01
06274:  MOVLB  C
06276:  ANDWF  x25,F
06278:  MOVLW  00
0627A:  MOVLB  B
0627C:  BTFSC  xA2.0
0627E:  MOVLW  01
06280:  MOVLB  C
06282:  MOVWF  x28
06284:  MOVLW  00
06286:  MOVLB  B
06288:  BTFSC  xA4.0
0628A:  MOVLW  01
0628C:  MOVLB  C
0628E:  IORWF  x28,W
06290:  ANDWF  x25,W
06292:  BCF    x24.0
06294:  BTFSC  FE8.0
06296:  BSF    x24.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
06298:  MOVLW  00
0629A:  BTFSC  x24.0
0629C:  MOVLW  01
0629E:  MOVWF  x25
062A0:  MOVLW  00
062A2:  MOVLB  B
062A4:  BTFSC  xAA.1
062A6:  MOVLW  01
062A8:  MOVLB  C
062AA:  MOVWF  x27
062AC:  MOVLW  00
062AE:  MOVLB  B
062B0:  BTFSC  xAC.1
062B2:  MOVLW  01
062B4:  MOVLB  C
062B6:  IORWF  x27,W
062B8:  MOVWF  x26
062BA:  MOVLW  00
062BC:  MOVLB  B
062BE:  BTFSS  xA8.1
062C0:  MOVLW  01
062C2:  MOVLB  C
062C4:  ANDWF  x26,F
062C6:  MOVLW  00
062C8:  MOVLB  B
062CA:  BTFSC  xA2.1
062CC:  MOVLW  01
062CE:  MOVLB  C
062D0:  MOVWF  x29
062D2:  MOVLW  00
062D4:  MOVLB  B
062D6:  BTFSC  xA4.1
062D8:  MOVLW  01
062DA:  MOVLB  C
062DC:  IORWF  x29,W
062DE:  ANDWF  x26,W
062E0:  IORWF  x25,W
062E2:  BCF    x24.0
062E4:  BTFSC  FE8.0
062E6:  BSF    x24.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
062E8:  MOVLW  00
062EA:  BTFSC  x24.0
062EC:  MOVLW  01
062EE:  MOVWF  x25
062F0:  MOVLW  00
062F2:  MOVLB  B
062F4:  BTFSC  xAA.2
062F6:  MOVLW  01
062F8:  MOVLB  C
062FA:  MOVWF  x27
062FC:  MOVLW  00
062FE:  MOVLB  B
06300:  BTFSC  xAC.2
06302:  MOVLW  01
06304:  MOVLB  C
06306:  IORWF  x27,W
06308:  MOVWF  x26
0630A:  MOVLW  00
0630C:  MOVLB  B
0630E:  BTFSS  xA8.2
06310:  MOVLW  01
06312:  MOVLB  C
06314:  ANDWF  x26,F
06316:  MOVLW  00
06318:  MOVLB  B
0631A:  BTFSC  xA2.2
0631C:  MOVLW  01
0631E:  MOVLB  C
06320:  MOVWF  x29
06322:  MOVLW  00
06324:  MOVLB  B
06326:  BTFSC  xA4.2
06328:  MOVLW  01
0632A:  MOVLB  C
0632C:  IORWF  x29,W
0632E:  ANDWF  x26,W
06330:  IORWF  x25,W
06332:  BCF    x24.0
06334:  BTFSC  FE8.0
06336:  BSF    x24.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
06338:  MOVLW  00
0633A:  BTFSC  x24.0
0633C:  MOVLW  01
0633E:  MOVWF  x25
06340:  MOVLW  00
06342:  MOVLB  B
06344:  BTFSC  xAA.3
06346:  MOVLW  01
06348:  MOVLB  C
0634A:  MOVWF  x27
0634C:  MOVLW  00
0634E:  MOVLB  B
06350:  BTFSC  xAC.3
06352:  MOVLW  01
06354:  MOVLB  C
06356:  IORWF  x27,W
06358:  MOVWF  x26
0635A:  MOVLW  00
0635C:  MOVLB  B
0635E:  BTFSS  xA8.3
06360:  MOVLW  01
06362:  MOVLB  C
06364:  ANDWF  x26,F
06366:  MOVLW  00
06368:  MOVLB  B
0636A:  BTFSC  xA2.3
0636C:  MOVLW  01
0636E:  MOVLB  C
06370:  MOVWF  x29
06372:  MOVLW  00
06374:  MOVLB  B
06376:  BTFSC  xA4.3
06378:  MOVLW  01
0637A:  MOVLB  C
0637C:  IORWF  x29,W
0637E:  ANDWF  x26,W
06380:  IORWF  x25,W
06382:  BCF    x24.0
06384:  BTFSC  FE8.0
06386:  BSF    x24.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
06388:  MOVLW  00
0638A:  BTFSC  x24.0
0638C:  MOVLW  01
0638E:  MOVWF  x25
06390:  MOVLW  00
06392:  MOVLB  B
06394:  BTFSC  xAA.4
06396:  MOVLW  01
06398:  MOVLB  C
0639A:  MOVWF  x27
0639C:  MOVLW  00
0639E:  MOVLB  B
063A0:  BTFSC  xAC.4
063A2:  MOVLW  01
063A4:  MOVLB  C
063A6:  IORWF  x27,W
063A8:  MOVWF  x26
063AA:  MOVLW  00
063AC:  MOVLB  B
063AE:  BTFSS  xA8.4
063B0:  MOVLW  01
063B2:  MOVLB  C
063B4:  ANDWF  x26,F
063B6:  MOVLW  00
063B8:  MOVLB  B
063BA:  BTFSC  xA2.4
063BC:  MOVLW  01
063BE:  MOVLB  C
063C0:  MOVWF  x29
063C2:  MOVLW  00
063C4:  MOVLB  B
063C6:  BTFSC  xA4.4
063C8:  MOVLW  01
063CA:  MOVLB  C
063CC:  IORWF  x29,W
063CE:  ANDWF  x26,W
063D0:  IORWF  x25,W
063D2:  BCF    x24.0
063D4:  BTFSC  FE8.0
063D6:  BSF    x24.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
063D8:  MOVLW  00
063DA:  BTFSC  x24.0
063DC:  MOVLW  01
063DE:  MOVWF  x25
063E0:  MOVLW  00
063E2:  MOVLB  B
063E4:  BTFSC  xAA.5
063E6:  MOVLW  01
063E8:  MOVLB  C
063EA:  MOVWF  x27
063EC:  MOVLW  00
063EE:  MOVLB  B
063F0:  BTFSC  xAC.5
063F2:  MOVLW  01
063F4:  MOVLB  C
063F6:  IORWF  x27,W
063F8:  MOVWF  x26
063FA:  MOVLW  00
063FC:  MOVLB  B
063FE:  BTFSS  xA8.5
06400:  MOVLW  01
06402:  MOVLB  C
06404:  ANDWF  x26,F
06406:  MOVLW  00
06408:  MOVLB  B
0640A:  BTFSC  xA2.5
0640C:  MOVLW  01
0640E:  MOVLB  C
06410:  MOVWF  x29
06412:  MOVLW  00
06414:  MOVLB  B
06416:  BTFSC  xA4.5
06418:  MOVLW  01
0641A:  MOVLB  C
0641C:  IORWF  x29,W
0641E:  ANDWF  x26,W
06420:  IORWF  x25,W
06422:  BCF    x24.0
06424:  BTFSC  FE8.0
06426:  BSF    x24.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
06428:  MOVLW  00
0642A:  BTFSC  x24.0
0642C:  MOVLW  01
0642E:  MOVWF  x25
06430:  MOVLW  00
06432:  MOVLB  B
06434:  BTFSC  xAA.6
06436:  MOVLW  01
06438:  MOVLB  C
0643A:  MOVWF  x27
0643C:  MOVLW  00
0643E:  MOVLB  B
06440:  BTFSC  xAC.6
06442:  MOVLW  01
06444:  MOVLB  C
06446:  IORWF  x27,W
06448:  MOVWF  x26
0644A:  MOVLW  00
0644C:  MOVLB  B
0644E:  BTFSS  xA8.6
06450:  MOVLW  01
06452:  MOVLB  C
06454:  ANDWF  x26,F
06456:  MOVLW  00
06458:  MOVLB  B
0645A:  BTFSC  xA2.6
0645C:  MOVLW  01
0645E:  MOVLB  C
06460:  MOVWF  x29
06462:  MOVLW  00
06464:  MOVLB  B
06466:  BTFSC  xA4.6
06468:  MOVLW  01
0646A:  MOVLB  C
0646C:  IORWF  x29,W
0646E:  ANDWF  x26,W
06470:  IORWF  x25,W
06472:  BCF    x24.0
06474:  BTFSC  FE8.0
06476:  BSF    x24.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
06478:  MOVLW  00
0647A:  BTFSC  x24.0
0647C:  MOVLW  01
0647E:  MOVWF  x25
06480:  MOVLW  00
06482:  MOVLB  B
06484:  BTFSC  xAA.7
06486:  MOVLW  01
06488:  MOVLB  C
0648A:  MOVWF  x27
0648C:  MOVLW  00
0648E:  MOVLB  B
06490:  BTFSC  xAC.7
06492:  MOVLW  01
06494:  MOVLB  C
06496:  IORWF  x27,W
06498:  MOVWF  x26
0649A:  MOVLW  00
0649C:  MOVLB  B
0649E:  BTFSS  xA8.7
064A0:  MOVLW  01
064A2:  MOVLB  C
064A4:  ANDWF  x26,F
064A6:  MOVLW  00
064A8:  MOVLB  B
064AA:  BTFSC  xA2.7
064AC:  MOVLW  01
064AE:  MOVLB  C
064B0:  MOVWF  x29
064B2:  MOVLW  00
064B4:  MOVLB  B
064B6:  BTFSC  xA4.7
064B8:  MOVLW  01
064BA:  MOVLB  C
064BC:  IORWF  x29,W
064BE:  ANDWF  x26,W
064C0:  IORWF  x25,W
064C2:  BCF    x24.0
064C4:  BTFSC  FE8.0
064C6:  BSF    x24.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (OutputType.B9 | OutputBoth.B9));
064C8:  MOVLW  00
064CA:  BTFSC  x24.0
064CC:  MOVLW  01
064CE:  MOVWF  x25
064D0:  MOVLW  00
064D2:  MOVLB  B
064D4:  BTFSC  xAB.0
064D6:  MOVLW  01
064D8:  MOVLB  C
064DA:  MOVWF  x27
064DC:  MOVLW  00
064DE:  MOVLB  B
064E0:  BTFSC  xAD.0
064E2:  MOVLW  01
064E4:  MOVLB  C
064E6:  IORWF  x27,W
064E8:  MOVWF  x26
064EA:  MOVLW  00
064EC:  MOVLB  B
064EE:  BTFSS  xA9.0
064F0:  MOVLW  01
064F2:  MOVLB  C
064F4:  ANDWF  x26,F
064F6:  MOVLW  00
064F8:  MOVLB  B
064FA:  BTFSC  xA3.0
064FC:  MOVLW  01
064FE:  MOVLB  C
06500:  MOVWF  x29
06502:  MOVLW  00
06504:  MOVLB  B
06506:  BTFSC  xA5.0
06508:  MOVLW  01
0650A:  MOVLB  C
0650C:  IORWF  x29,W
0650E:  ANDWF  x26,W
06510:  IORWF  x25,W
06512:  BCF    x24.0
06514:  BTFSC  FE8.0
06516:  BSF    x24.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (OutputType.B10 | OutputBoth.B10));
06518:  MOVLW  00
0651A:  BTFSC  x24.0
0651C:  MOVLW  01
0651E:  MOVWF  x25
06520:  MOVLW  00
06522:  MOVLB  B
06524:  BTFSC  xAB.1
06526:  MOVLW  01
06528:  MOVLB  C
0652A:  MOVWF  x27
0652C:  MOVLW  00
0652E:  MOVLB  B
06530:  BTFSC  xAD.1
06532:  MOVLW  01
06534:  MOVLB  C
06536:  IORWF  x27,W
06538:  MOVWF  x26
0653A:  MOVLW  00
0653C:  MOVLB  B
0653E:  BTFSS  xA9.1
06540:  MOVLW  01
06542:  MOVLB  C
06544:  ANDWF  x26,F
06546:  MOVLW  00
06548:  MOVLB  B
0654A:  BTFSC  xA3.1
0654C:  MOVLW  01
0654E:  MOVLB  C
06550:  MOVWF  x29
06552:  MOVLW  00
06554:  MOVLB  B
06556:  BTFSC  xA5.1
06558:  MOVLW  01
0655A:  MOVLB  C
0655C:  IORWF  x29,W
0655E:  ANDWF  x26,W
06560:  IORWF  x25,W
06562:  BCF    x24.0
06564:  BTFSC  FE8.0
06566:  BSF    x24.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (OutputType.B11 | OutputBoth.B11));
06568:  MOVLW  00
0656A:  BTFSC  x24.0
0656C:  MOVLW  01
0656E:  MOVWF  x25
06570:  MOVLW  00
06572:  MOVLB  B
06574:  BTFSC  xAB.2
06576:  MOVLW  01
06578:  MOVLB  C
0657A:  MOVWF  x27
0657C:  MOVLW  00
0657E:  MOVLB  B
06580:  BTFSC  xAD.2
06582:  MOVLW  01
06584:  MOVLB  C
06586:  IORWF  x27,W
06588:  MOVWF  x26
0658A:  MOVLW  00
0658C:  MOVLB  B
0658E:  BTFSS  xA9.2
06590:  MOVLW  01
06592:  MOVLB  C
06594:  ANDWF  x26,F
06596:  MOVLW  00
06598:  MOVLB  B
0659A:  BTFSC  xA3.2
0659C:  MOVLW  01
0659E:  MOVLB  C
065A0:  MOVWF  x29
065A2:  MOVLW  00
065A4:  MOVLB  B
065A6:  BTFSC  xA5.2
065A8:  MOVLW  01
065AA:  MOVLB  C
065AC:  IORWF  x29,W
065AE:  ANDWF  x26,W
065B0:  IORWF  x25,W
065B2:  BCF    x24.0
065B4:  BTFSC  FE8.0
065B6:  BSF    x24.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (OutputType.B12 | OutputBoth.B12));
065B8:  MOVLW  00
065BA:  BTFSC  x24.0
065BC:  MOVLW  01
065BE:  MOVWF  x25
065C0:  MOVLW  00
065C2:  MOVLB  B
065C4:  BTFSC  xAB.3
065C6:  MOVLW  01
065C8:  MOVLB  C
065CA:  MOVWF  x27
065CC:  MOVLW  00
065CE:  MOVLB  B
065D0:  BTFSC  xAD.3
065D2:  MOVLW  01
065D4:  MOVLB  C
065D6:  IORWF  x27,W
065D8:  MOVWF  x26
065DA:  MOVLW  00
065DC:  MOVLB  B
065DE:  BTFSS  xA9.3
065E0:  MOVLW  01
065E2:  MOVLB  C
065E4:  ANDWF  x26,F
065E6:  MOVLW  00
065E8:  MOVLB  B
065EA:  BTFSC  xA3.3
065EC:  MOVLW  01
065EE:  MOVLB  C
065F0:  MOVWF  x29
065F2:  MOVLW  00
065F4:  MOVLB  B
065F6:  BTFSC  xA5.3
065F8:  MOVLW  01
065FA:  MOVLB  C
065FC:  IORWF  x29,W
065FE:  ANDWF  x26,W
06600:  IORWF  x25,W
06602:  BCF    x24.0
06604:  BTFSC  FE8.0
06606:  BSF    x24.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (OutputType.B13 | OutputBoth.B13));
06608:  MOVLW  00
0660A:  BTFSC  x24.0
0660C:  MOVLW  01
0660E:  MOVWF  x25
06610:  MOVLW  00
06612:  MOVLB  B
06614:  BTFSC  xAB.4
06616:  MOVLW  01
06618:  MOVLB  C
0661A:  MOVWF  x27
0661C:  MOVLW  00
0661E:  MOVLB  B
06620:  BTFSC  xAD.4
06622:  MOVLW  01
06624:  MOVLB  C
06626:  IORWF  x27,W
06628:  MOVWF  x26
0662A:  MOVLW  00
0662C:  MOVLB  B
0662E:  BTFSS  xA9.4
06630:  MOVLW  01
06632:  MOVLB  C
06634:  ANDWF  x26,F
06636:  MOVLW  00
06638:  MOVLB  B
0663A:  BTFSC  xA3.4
0663C:  MOVLW  01
0663E:  MOVLB  C
06640:  MOVWF  x29
06642:  MOVLW  00
06644:  MOVLB  B
06646:  BTFSC  xA5.4
06648:  MOVLW  01
0664A:  MOVLB  C
0664C:  IORWF  x29,W
0664E:  ANDWF  x26,W
06650:  IORWF  x25,W
06652:  BCF    x24.0
06654:  BTFSC  FE8.0
06656:  BSF    x24.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (OutputType.B14 | OutputBoth.B14));
06658:  MOVLW  00
0665A:  BTFSC  x24.0
0665C:  MOVLW  01
0665E:  MOVWF  x25
06660:  MOVLW  00
06662:  MOVLB  B
06664:  BTFSC  xAB.5
06666:  MOVLW  01
06668:  MOVLB  C
0666A:  MOVWF  x27
0666C:  MOVLW  00
0666E:  MOVLB  B
06670:  BTFSC  xAD.5
06672:  MOVLW  01
06674:  MOVLB  C
06676:  IORWF  x27,W
06678:  MOVWF  x26
0667A:  MOVLW  00
0667C:  MOVLB  B
0667E:  BTFSS  xA9.5
06680:  MOVLW  01
06682:  MOVLB  C
06684:  ANDWF  x26,F
06686:  MOVLW  00
06688:  MOVLB  B
0668A:  BTFSC  xA3.5
0668C:  MOVLW  01
0668E:  MOVLB  C
06690:  MOVWF  x29
06692:  MOVLW  00
06694:  MOVLB  B
06696:  BTFSC  xA5.5
06698:  MOVLW  01
0669A:  MOVLB  C
0669C:  IORWF  x29,W
0669E:  ANDWF  x26,W
066A0:  IORWF  x25,W
066A2:  BCF    x24.0
066A4:  BTFSC  FE8.0
066A6:  BSF    x24.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (OutputType.B15 | OutputBoth.B15));
066A8:  MOVLW  00
066AA:  BTFSC  x24.0
066AC:  MOVLW  01
066AE:  MOVWF  x25
066B0:  MOVLW  00
066B2:  MOVLB  B
066B4:  BTFSC  xAB.6
066B6:  MOVLW  01
066B8:  MOVLB  C
066BA:  MOVWF  x27
066BC:  MOVLW  00
066BE:  MOVLB  B
066C0:  BTFSC  xAD.6
066C2:  MOVLW  01
066C4:  MOVLB  C
066C6:  IORWF  x27,W
066C8:  MOVWF  x26
066CA:  MOVLW  00
066CC:  MOVLB  B
066CE:  BTFSS  xA9.6
066D0:  MOVLW  01
066D2:  MOVLB  C
066D4:  ANDWF  x26,F
066D6:  MOVLW  00
066D8:  MOVLB  B
066DA:  BTFSC  xA3.6
066DC:  MOVLW  01
066DE:  MOVLB  C
066E0:  MOVWF  x29
066E2:  MOVLW  00
066E4:  MOVLB  B
066E6:  BTFSC  xA5.6
066E8:  MOVLW  01
066EA:  MOVLB  C
066EC:  IORWF  x29,W
066EE:  ANDWF  x26,W
066F0:  IORWF  x25,W
066F2:  BCF    x24.0
066F4:  BTFSC  FE8.0
066F6:  BSF    x24.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (OutputType.B16 | OutputBoth.B16));
066F8:  MOVLW  00
066FA:  BTFSC  x24.0
066FC:  MOVLW  01
066FE:  MOVWF  x25
06700:  MOVLW  00
06702:  MOVLB  B
06704:  BTFSC  xAB.7
06706:  MOVLW  01
06708:  MOVLB  C
0670A:  MOVWF  x27
0670C:  MOVLW  00
0670E:  MOVLB  B
06710:  BTFSC  xAD.7
06712:  MOVLW  01
06714:  MOVLB  C
06716:  IORWF  x27,W
06718:  MOVWF  x26
0671A:  MOVLW  00
0671C:  MOVLB  B
0671E:  BTFSS  xA9.7
06720:  MOVLW  01
06722:  MOVLB  C
06724:  ANDWF  x26,F
06726:  MOVLW  00
06728:  MOVLB  B
0672A:  BTFSC  xA3.7
0672C:  MOVLW  01
0672E:  MOVLB  C
06730:  MOVWF  x29
06732:  MOVLW  00
06734:  MOVLB  B
06736:  BTFSC  xA5.7
06738:  MOVLW  01
0673A:  MOVLB  C
0673C:  IORWF  x29,W
0673E:  ANDWF  x26,W
06740:  IORWF  x25,W
06742:  BCF    x24.0
06744:  BTFSC  FE8.0
06746:  BSF    x24.0
....................       /*
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (OutputType.B17 | OutputBoth.B17));
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (OutputType.B18 | OutputBoth.B18));
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (OutputType.B19 | OutputBoth.B19));
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (OutputType.B20 | OutputBoth.B20));
....................       */
....................      
....................    }
06748:  BRA    6C48
....................    else if(DatType == 0x02)             //Bell
0674A:  MOVF   x23,W
0674C:  SUBLW  02
0674E:  BTFSS  FD8.2
06750:  BRA    6C48
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
06752:  MOVLW  00
06754:  MOVLB  B
06756:  BTFSC  xAA.0
06758:  MOVLW  01
0675A:  MOVLB  C
0675C:  MOVWF  x26
0675E:  MOVLW  00
06760:  MOVLB  B
06762:  BTFSC  xAC.0
06764:  MOVLW  01
06766:  MOVLB  C
06768:  IORWF  x26,W
0676A:  MOVWF  x25
0676C:  MOVLW  00
0676E:  MOVLB  B
06770:  BTFSS  xA8.0
06772:  MOVLW  01
06774:  MOVLB  C
06776:  ANDWF  x25,F
06778:  MOVLW  00
0677A:  MOVLB  B
0677C:  BTFSS  xA2.0
0677E:  MOVLW  01
06780:  MOVLB  C
06782:  MOVWF  x28
06784:  MOVLW  00
06786:  MOVLB  B
06788:  BTFSC  xA4.0
0678A:  MOVLW  01
0678C:  MOVLB  C
0678E:  IORWF  x28,W
06790:  ANDWF  x25,W
06792:  BCF    x24.0
06794:  BTFSC  FE8.0
06796:  BSF    x24.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
06798:  MOVLW  00
0679A:  BTFSC  x24.0
0679C:  MOVLW  01
0679E:  MOVWF  x25
067A0:  MOVLW  00
067A2:  MOVLB  B
067A4:  BTFSC  xAA.1
067A6:  MOVLW  01
067A8:  MOVLB  C
067AA:  MOVWF  x27
067AC:  MOVLW  00
067AE:  MOVLB  B
067B0:  BTFSC  xAC.1
067B2:  MOVLW  01
067B4:  MOVLB  C
067B6:  IORWF  x27,W
067B8:  MOVWF  x26
067BA:  MOVLW  00
067BC:  MOVLB  B
067BE:  BTFSS  xA8.1
067C0:  MOVLW  01
067C2:  MOVLB  C
067C4:  ANDWF  x26,F
067C6:  MOVLW  00
067C8:  MOVLB  B
067CA:  BTFSS  xA2.1
067CC:  MOVLW  01
067CE:  MOVLB  C
067D0:  MOVWF  x29
067D2:  MOVLW  00
067D4:  MOVLB  B
067D6:  BTFSC  xA4.1
067D8:  MOVLW  01
067DA:  MOVLB  C
067DC:  IORWF  x29,W
067DE:  ANDWF  x26,W
067E0:  IORWF  x25,W
067E2:  BCF    x24.0
067E4:  BTFSC  FE8.0
067E6:  BSF    x24.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
067E8:  MOVLW  00
067EA:  BTFSC  x24.0
067EC:  MOVLW  01
067EE:  MOVWF  x25
067F0:  MOVLW  00
067F2:  MOVLB  B
067F4:  BTFSC  xAA.2
067F6:  MOVLW  01
067F8:  MOVLB  C
067FA:  MOVWF  x27
067FC:  MOVLW  00
067FE:  MOVLB  B
06800:  BTFSC  xAC.2
06802:  MOVLW  01
06804:  MOVLB  C
06806:  IORWF  x27,W
06808:  MOVWF  x26
0680A:  MOVLW  00
0680C:  MOVLB  B
0680E:  BTFSS  xA8.2
06810:  MOVLW  01
06812:  MOVLB  C
06814:  ANDWF  x26,F
06816:  MOVLW  00
06818:  MOVLB  B
0681A:  BTFSS  xA2.2
0681C:  MOVLW  01
0681E:  MOVLB  C
06820:  MOVWF  x29
06822:  MOVLW  00
06824:  MOVLB  B
06826:  BTFSC  xA4.2
06828:  MOVLW  01
0682A:  MOVLB  C
0682C:  IORWF  x29,W
0682E:  ANDWF  x26,W
06830:  IORWF  x25,W
06832:  BCF    x24.0
06834:  BTFSC  FE8.0
06836:  BSF    x24.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
06838:  MOVLW  00
0683A:  BTFSC  x24.0
0683C:  MOVLW  01
0683E:  MOVWF  x25
06840:  MOVLW  00
06842:  MOVLB  B
06844:  BTFSC  xAA.3
06846:  MOVLW  01
06848:  MOVLB  C
0684A:  MOVWF  x27
0684C:  MOVLW  00
0684E:  MOVLB  B
06850:  BTFSC  xAC.3
06852:  MOVLW  01
06854:  MOVLB  C
06856:  IORWF  x27,W
06858:  MOVWF  x26
0685A:  MOVLW  00
0685C:  MOVLB  B
0685E:  BTFSS  xA8.3
06860:  MOVLW  01
06862:  MOVLB  C
06864:  ANDWF  x26,F
06866:  MOVLW  00
06868:  MOVLB  B
0686A:  BTFSS  xA2.3
0686C:  MOVLW  01
0686E:  MOVLB  C
06870:  MOVWF  x29
06872:  MOVLW  00
06874:  MOVLB  B
06876:  BTFSC  xA4.3
06878:  MOVLW  01
0687A:  MOVLB  C
0687C:  IORWF  x29,W
0687E:  ANDWF  x26,W
06880:  IORWF  x25,W
06882:  BCF    x24.0
06884:  BTFSC  FE8.0
06886:  BSF    x24.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
06888:  MOVLW  00
0688A:  BTFSC  x24.0
0688C:  MOVLW  01
0688E:  MOVWF  x25
06890:  MOVLW  00
06892:  MOVLB  B
06894:  BTFSC  xAA.4
06896:  MOVLW  01
06898:  MOVLB  C
0689A:  MOVWF  x27
0689C:  MOVLW  00
0689E:  MOVLB  B
068A0:  BTFSC  xAC.4
068A2:  MOVLW  01
068A4:  MOVLB  C
068A6:  IORWF  x27,W
068A8:  MOVWF  x26
068AA:  MOVLW  00
068AC:  MOVLB  B
068AE:  BTFSS  xA8.4
068B0:  MOVLW  01
068B2:  MOVLB  C
068B4:  ANDWF  x26,F
068B6:  MOVLW  00
068B8:  MOVLB  B
068BA:  BTFSS  xA2.4
068BC:  MOVLW  01
068BE:  MOVLB  C
068C0:  MOVWF  x29
068C2:  MOVLW  00
068C4:  MOVLB  B
068C6:  BTFSC  xA4.4
068C8:  MOVLW  01
068CA:  MOVLB  C
068CC:  IORWF  x29,W
068CE:  ANDWF  x26,W
068D0:  IORWF  x25,W
068D2:  BCF    x24.0
068D4:  BTFSC  FE8.0
068D6:  BSF    x24.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
068D8:  MOVLW  00
068DA:  BTFSC  x24.0
068DC:  MOVLW  01
068DE:  MOVWF  x25
068E0:  MOVLW  00
068E2:  MOVLB  B
068E4:  BTFSC  xAA.5
068E6:  MOVLW  01
068E8:  MOVLB  C
068EA:  MOVWF  x27
068EC:  MOVLW  00
068EE:  MOVLB  B
068F0:  BTFSC  xAC.5
068F2:  MOVLW  01
068F4:  MOVLB  C
068F6:  IORWF  x27,W
068F8:  MOVWF  x26
068FA:  MOVLW  00
068FC:  MOVLB  B
068FE:  BTFSS  xA8.5
06900:  MOVLW  01
06902:  MOVLB  C
06904:  ANDWF  x26,F
06906:  MOVLW  00
06908:  MOVLB  B
0690A:  BTFSS  xA2.5
0690C:  MOVLW  01
0690E:  MOVLB  C
06910:  MOVWF  x29
06912:  MOVLW  00
06914:  MOVLB  B
06916:  BTFSC  xA4.5
06918:  MOVLW  01
0691A:  MOVLB  C
0691C:  IORWF  x29,W
0691E:  ANDWF  x26,W
06920:  IORWF  x25,W
06922:  BCF    x24.0
06924:  BTFSC  FE8.0
06926:  BSF    x24.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
06928:  MOVLW  00
0692A:  BTFSC  x24.0
0692C:  MOVLW  01
0692E:  MOVWF  x25
06930:  MOVLW  00
06932:  MOVLB  B
06934:  BTFSC  xAA.6
06936:  MOVLW  01
06938:  MOVLB  C
0693A:  MOVWF  x27
0693C:  MOVLW  00
0693E:  MOVLB  B
06940:  BTFSC  xAC.6
06942:  MOVLW  01
06944:  MOVLB  C
06946:  IORWF  x27,W
06948:  MOVWF  x26
0694A:  MOVLW  00
0694C:  MOVLB  B
0694E:  BTFSS  xA8.6
06950:  MOVLW  01
06952:  MOVLB  C
06954:  ANDWF  x26,F
06956:  MOVLW  00
06958:  MOVLB  B
0695A:  BTFSS  xA2.6
0695C:  MOVLW  01
0695E:  MOVLB  C
06960:  MOVWF  x29
06962:  MOVLW  00
06964:  MOVLB  B
06966:  BTFSC  xA4.6
06968:  MOVLW  01
0696A:  MOVLB  C
0696C:  IORWF  x29,W
0696E:  ANDWF  x26,W
06970:  IORWF  x25,W
06972:  BCF    x24.0
06974:  BTFSC  FE8.0
06976:  BSF    x24.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
06978:  MOVLW  00
0697A:  BTFSC  x24.0
0697C:  MOVLW  01
0697E:  MOVWF  x25
06980:  MOVLW  00
06982:  MOVLB  B
06984:  BTFSC  xAA.7
06986:  MOVLW  01
06988:  MOVLB  C
0698A:  MOVWF  x27
0698C:  MOVLW  00
0698E:  MOVLB  B
06990:  BTFSC  xAC.7
06992:  MOVLW  01
06994:  MOVLB  C
06996:  IORWF  x27,W
06998:  MOVWF  x26
0699A:  MOVLW  00
0699C:  MOVLB  B
0699E:  BTFSS  xA8.7
069A0:  MOVLW  01
069A2:  MOVLB  C
069A4:  ANDWF  x26,F
069A6:  MOVLW  00
069A8:  MOVLB  B
069AA:  BTFSS  xA2.7
069AC:  MOVLW  01
069AE:  MOVLB  C
069B0:  MOVWF  x29
069B2:  MOVLW  00
069B4:  MOVLB  B
069B6:  BTFSC  xA4.7
069B8:  MOVLW  01
069BA:  MOVLB  C
069BC:  IORWF  x29,W
069BE:  ANDWF  x26,W
069C0:  IORWF  x25,W
069C2:  BCF    x24.0
069C4:  BTFSC  FE8.0
069C6:  BSF    x24.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (~OutputType.B9 | OutputBoth.B9));
069C8:  MOVLW  00
069CA:  BTFSC  x24.0
069CC:  MOVLW  01
069CE:  MOVWF  x25
069D0:  MOVLW  00
069D2:  MOVLB  B
069D4:  BTFSC  xAB.0
069D6:  MOVLW  01
069D8:  MOVLB  C
069DA:  MOVWF  x27
069DC:  MOVLW  00
069DE:  MOVLB  B
069E0:  BTFSC  xAD.0
069E2:  MOVLW  01
069E4:  MOVLB  C
069E6:  IORWF  x27,W
069E8:  MOVWF  x26
069EA:  MOVLW  00
069EC:  MOVLB  B
069EE:  BTFSS  xA9.0
069F0:  MOVLW  01
069F2:  MOVLB  C
069F4:  ANDWF  x26,F
069F6:  MOVLW  00
069F8:  MOVLB  B
069FA:  BTFSS  xA3.0
069FC:  MOVLW  01
069FE:  MOVLB  C
06A00:  MOVWF  x29
06A02:  MOVLW  00
06A04:  MOVLB  B
06A06:  BTFSC  xA5.0
06A08:  MOVLW  01
06A0A:  MOVLB  C
06A0C:  IORWF  x29,W
06A0E:  ANDWF  x26,W
06A10:  IORWF  x25,W
06A12:  BCF    x24.0
06A14:  BTFSC  FE8.0
06A16:  BSF    x24.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (~OutputType.B10 | OutputBoth.B10));
06A18:  MOVLW  00
06A1A:  BTFSC  x24.0
06A1C:  MOVLW  01
06A1E:  MOVWF  x25
06A20:  MOVLW  00
06A22:  MOVLB  B
06A24:  BTFSC  xAB.1
06A26:  MOVLW  01
06A28:  MOVLB  C
06A2A:  MOVWF  x27
06A2C:  MOVLW  00
06A2E:  MOVLB  B
06A30:  BTFSC  xAD.1
06A32:  MOVLW  01
06A34:  MOVLB  C
06A36:  IORWF  x27,W
06A38:  MOVWF  x26
06A3A:  MOVLW  00
06A3C:  MOVLB  B
06A3E:  BTFSS  xA9.1
06A40:  MOVLW  01
06A42:  MOVLB  C
06A44:  ANDWF  x26,F
06A46:  MOVLW  00
06A48:  MOVLB  B
06A4A:  BTFSS  xA3.1
06A4C:  MOVLW  01
06A4E:  MOVLB  C
06A50:  MOVWF  x29
06A52:  MOVLW  00
06A54:  MOVLB  B
06A56:  BTFSC  xA5.1
06A58:  MOVLW  01
06A5A:  MOVLB  C
06A5C:  IORWF  x29,W
06A5E:  ANDWF  x26,W
06A60:  IORWF  x25,W
06A62:  BCF    x24.0
06A64:  BTFSC  FE8.0
06A66:  BSF    x24.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (~OutputType.B11 | OutputBoth.B11));
06A68:  MOVLW  00
06A6A:  BTFSC  x24.0
06A6C:  MOVLW  01
06A6E:  MOVWF  x25
06A70:  MOVLW  00
06A72:  MOVLB  B
06A74:  BTFSC  xAB.2
06A76:  MOVLW  01
06A78:  MOVLB  C
06A7A:  MOVWF  x27
06A7C:  MOVLW  00
06A7E:  MOVLB  B
06A80:  BTFSC  xAD.2
06A82:  MOVLW  01
06A84:  MOVLB  C
06A86:  IORWF  x27,W
06A88:  MOVWF  x26
06A8A:  MOVLW  00
06A8C:  MOVLB  B
06A8E:  BTFSS  xA9.2
06A90:  MOVLW  01
06A92:  MOVLB  C
06A94:  ANDWF  x26,F
06A96:  MOVLW  00
06A98:  MOVLB  B
06A9A:  BTFSS  xA3.2
06A9C:  MOVLW  01
06A9E:  MOVLB  C
06AA0:  MOVWF  x29
06AA2:  MOVLW  00
06AA4:  MOVLB  B
06AA6:  BTFSC  xA5.2
06AA8:  MOVLW  01
06AAA:  MOVLB  C
06AAC:  IORWF  x29,W
06AAE:  ANDWF  x26,W
06AB0:  IORWF  x25,W
06AB2:  BCF    x24.0
06AB4:  BTFSC  FE8.0
06AB6:  BSF    x24.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (~OutputType.B12 | OutputBoth.B12));
06AB8:  MOVLW  00
06ABA:  BTFSC  x24.0
06ABC:  MOVLW  01
06ABE:  MOVWF  x25
06AC0:  MOVLW  00
06AC2:  MOVLB  B
06AC4:  BTFSC  xAB.3
06AC6:  MOVLW  01
06AC8:  MOVLB  C
06ACA:  MOVWF  x27
06ACC:  MOVLW  00
06ACE:  MOVLB  B
06AD0:  BTFSC  xAD.3
06AD2:  MOVLW  01
06AD4:  MOVLB  C
06AD6:  IORWF  x27,W
06AD8:  MOVWF  x26
06ADA:  MOVLW  00
06ADC:  MOVLB  B
06ADE:  BTFSS  xA9.3
06AE0:  MOVLW  01
06AE2:  MOVLB  C
06AE4:  ANDWF  x26,F
06AE6:  MOVLW  00
06AE8:  MOVLB  B
06AEA:  BTFSS  xA3.3
06AEC:  MOVLW  01
06AEE:  MOVLB  C
06AF0:  MOVWF  x29
06AF2:  MOVLW  00
06AF4:  MOVLB  B
06AF6:  BTFSC  xA5.3
06AF8:  MOVLW  01
06AFA:  MOVLB  C
06AFC:  IORWF  x29,W
06AFE:  ANDWF  x26,W
06B00:  IORWF  x25,W
06B02:  BCF    x24.0
06B04:  BTFSC  FE8.0
06B06:  BSF    x24.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (~OutputType.B13 | OutputBoth.B13));
06B08:  MOVLW  00
06B0A:  BTFSC  x24.0
06B0C:  MOVLW  01
06B0E:  MOVWF  x25
06B10:  MOVLW  00
06B12:  MOVLB  B
06B14:  BTFSC  xAB.4
06B16:  MOVLW  01
06B18:  MOVLB  C
06B1A:  MOVWF  x27
06B1C:  MOVLW  00
06B1E:  MOVLB  B
06B20:  BTFSC  xAD.4
06B22:  MOVLW  01
06B24:  MOVLB  C
06B26:  IORWF  x27,W
06B28:  MOVWF  x26
06B2A:  MOVLW  00
06B2C:  MOVLB  B
06B2E:  BTFSS  xA9.4
06B30:  MOVLW  01
06B32:  MOVLB  C
06B34:  ANDWF  x26,F
06B36:  MOVLW  00
06B38:  MOVLB  B
06B3A:  BTFSS  xA3.4
06B3C:  MOVLW  01
06B3E:  MOVLB  C
06B40:  MOVWF  x29
06B42:  MOVLW  00
06B44:  MOVLB  B
06B46:  BTFSC  xA5.4
06B48:  MOVLW  01
06B4A:  MOVLB  C
06B4C:  IORWF  x29,W
06B4E:  ANDWF  x26,W
06B50:  IORWF  x25,W
06B52:  BCF    x24.0
06B54:  BTFSC  FE8.0
06B56:  BSF    x24.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (~OutputType.B14 | OutputBoth.B14));
06B58:  MOVLW  00
06B5A:  BTFSC  x24.0
06B5C:  MOVLW  01
06B5E:  MOVWF  x25
06B60:  MOVLW  00
06B62:  MOVLB  B
06B64:  BTFSC  xAB.5
06B66:  MOVLW  01
06B68:  MOVLB  C
06B6A:  MOVWF  x27
06B6C:  MOVLW  00
06B6E:  MOVLB  B
06B70:  BTFSC  xAD.5
06B72:  MOVLW  01
06B74:  MOVLB  C
06B76:  IORWF  x27,W
06B78:  MOVWF  x26
06B7A:  MOVLW  00
06B7C:  MOVLB  B
06B7E:  BTFSS  xA9.5
06B80:  MOVLW  01
06B82:  MOVLB  C
06B84:  ANDWF  x26,F
06B86:  MOVLW  00
06B88:  MOVLB  B
06B8A:  BTFSS  xA3.5
06B8C:  MOVLW  01
06B8E:  MOVLB  C
06B90:  MOVWF  x29
06B92:  MOVLW  00
06B94:  MOVLB  B
06B96:  BTFSC  xA5.5
06B98:  MOVLW  01
06B9A:  MOVLB  C
06B9C:  IORWF  x29,W
06B9E:  ANDWF  x26,W
06BA0:  IORWF  x25,W
06BA2:  BCF    x24.0
06BA4:  BTFSC  FE8.0
06BA6:  BSF    x24.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (~OutputType.B15 | OutputBoth.B15));
06BA8:  MOVLW  00
06BAA:  BTFSC  x24.0
06BAC:  MOVLW  01
06BAE:  MOVWF  x25
06BB0:  MOVLW  00
06BB2:  MOVLB  B
06BB4:  BTFSC  xAB.6
06BB6:  MOVLW  01
06BB8:  MOVLB  C
06BBA:  MOVWF  x27
06BBC:  MOVLW  00
06BBE:  MOVLB  B
06BC0:  BTFSC  xAD.6
06BC2:  MOVLW  01
06BC4:  MOVLB  C
06BC6:  IORWF  x27,W
06BC8:  MOVWF  x26
06BCA:  MOVLW  00
06BCC:  MOVLB  B
06BCE:  BTFSS  xA9.6
06BD0:  MOVLW  01
06BD2:  MOVLB  C
06BD4:  ANDWF  x26,F
06BD6:  MOVLW  00
06BD8:  MOVLB  B
06BDA:  BTFSS  xA3.6
06BDC:  MOVLW  01
06BDE:  MOVLB  C
06BE0:  MOVWF  x29
06BE2:  MOVLW  00
06BE4:  MOVLB  B
06BE6:  BTFSC  xA5.6
06BE8:  MOVLW  01
06BEA:  MOVLB  C
06BEC:  IORWF  x29,W
06BEE:  ANDWF  x26,W
06BF0:  IORWF  x25,W
06BF2:  BCF    x24.0
06BF4:  BTFSC  FE8.0
06BF6:  BSF    x24.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (~OutputType.B16 | OutputBoth.B16));
06BF8:  MOVLW  00
06BFA:  BTFSC  x24.0
06BFC:  MOVLW  01
06BFE:  MOVWF  x25
06C00:  MOVLW  00
06C02:  MOVLB  B
06C04:  BTFSC  xAB.7
06C06:  MOVLW  01
06C08:  MOVLB  C
06C0A:  MOVWF  x27
06C0C:  MOVLW  00
06C0E:  MOVLB  B
06C10:  BTFSC  xAD.7
06C12:  MOVLW  01
06C14:  MOVLB  C
06C16:  IORWF  x27,W
06C18:  MOVWF  x26
06C1A:  MOVLW  00
06C1C:  MOVLB  B
06C1E:  BTFSS  xA9.7
06C20:  MOVLW  01
06C22:  MOVLB  C
06C24:  ANDWF  x26,F
06C26:  MOVLW  00
06C28:  MOVLB  B
06C2A:  BTFSS  xA3.7
06C2C:  MOVLW  01
06C2E:  MOVLB  C
06C30:  MOVWF  x29
06C32:  MOVLW  00
06C34:  MOVLB  B
06C36:  BTFSC  xA5.7
06C38:  MOVLW  01
06C3A:  MOVLB  C
06C3C:  IORWF  x29,W
06C3E:  ANDWF  x26,W
06C40:  IORWF  x25,W
06C42:  BCF    x24.0
06C44:  BTFSC  FE8.0
06C46:  BSF    x24.0
....................       /*
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (~OutputType.B17 | OutputBoth.B17));
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (~OutputType.B18 | OutputBoth.B18));
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (~OutputType.B19 | OutputBoth.B19));
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (~OutputType.B20 | OutputBoth.B20));
....................       */
.................... 
....................    }
....................    return(check);
06C48:  MOVLW  00
06C4A:  BTFSC  x24.0
06C4C:  MOVLW  01
06C4E:  MOVWF  01
06C50:  MOVLB  0
06C52:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... void main()
*
0A558:  CLRF   FF8
0A55A:  BCF    FD0.7
0A55C:  BSF    07.7
0A55E:  MOVLW  70
0A560:  MOVWF  FD3
0A562:  BCF    F9B.6
0A564:  BCF    F9B.7
0A566:  BSF    FB8.3
0A568:  MOVLW  A0
0A56A:  MOVWF  FAF
0A56C:  MOVLW  01
0A56E:  MOVWF  FB0
0A570:  MOVLW  A6
0A572:  MOVWF  FAC
0A574:  MOVLW  90
0A576:  MOVWF  FAB
0A578:  BCF    F93.0
0A57A:  BSF    F8A.0
0A57C:  CLRF   19
0A57E:  BCF    1A.0
0A580:  MOVLW  19
0A582:  MOVWF  1B
0A584:  BCF    1A.1
0A586:  MOVLW  64
0A588:  MOVWF  1C
0A58A:  CLRF   1D
0A58C:  BCF    1A.2
0A58E:  BCF    1A.3
0A590:  BCF    1A.4
0A592:  CLRF   2E
0A594:  BCF    1A.5
0A596:  CLRF   2F
0A598:  BCF    1A.6
0A59A:  BCF    1A.7
0A59C:  BCF    30.0
0A59E:  BCF    30.1
0A5A0:  BCF    30.2
0A5A2:  CLRF   31
0A5A4:  BCF    30.3
0A5A6:  BCF    30.4
0A5A8:  MOVLW  11
0A5AA:  MOVWF  x6F
0A5AC:  MOVLW  12
0A5AE:  MOVWF  x70
0A5B0:  MOVLW  13
0A5B2:  MOVWF  x71
0A5B4:  MOVLW  14
0A5B6:  MOVWF  x72
0A5B8:  MOVLW  16
0A5BA:  MOVWF  x73
0A5BC:  MOVLW  17
0A5BE:  MOVWF  x74
0A5C0:  MOVLW  18
0A5C2:  MOVWF  x75
0A5C4:  MOVLW  19
0A5C6:  MOVWF  x76
0A5C8:  MOVLW  20
0A5CA:  MOVWF  x77
0A5CC:  BCF    30.5
0A5CE:  CLRF   x7A
0A5D0:  MOVLW  01
0A5D2:  MOVLB  5
0A5D4:  MOVWF  x7D
0A5D6:  MOVLW  F4
0A5D8:  MOVWF  x7C
0A5DA:  CLRF   x7F
0A5DC:  CLRF   x7E
0A5DE:  CLRF   x81
0A5E0:  CLRF   x80
0A5E2:  CLRF   x82
0A5E4:  MOVLB  9
0A5E6:  CLRF   x87
0A5E8:  CLRF   x86
0A5EA:  CLRF   x88
0A5EC:  CLRF   x8A
0A5EE:  CLRF   x89
0A5F0:  MOVLB  C
0A5F2:  CLRF   x16
0A5F4:  CLRF   x15
0A5F6:  MOVLB  F
0A5F8:  CLRF   x38
0A5FA:  CLRF   x39
0A5FC:  CLRF   x3A
0A5FE:  CLRF   F77
0A600:  CLRF   F78
0A602:  CLRF   F79
0A604:  MOVLB  C
0A606:  CLRF   x17
.................... {
....................    
....................    
....................    delay_ms(50);
0A608:  MOVLW  32
0A60A:  MOVWF  x24
0A60C:  MOVLB  0
0A60E:  CALL   0936
....................    output_bit(Pled,0);   //power on watchdog signal
0A612:  BCF    F8A.5
0A614:  BCF    F93.5
....................    
....................    setup_timer_0(RTCC_INTERNAL);
0A616:  MOVLW  80
0A618:  MOVWF  FD5
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
0A61A:  MOVLW  78
0A61C:  IORLW  06
0A61E:  MOVWF  FBA
0A620:  MOVLW  C4
0A622:  MOVWF  FBB
....................    enable_interrupts(INT_TIMER2);
0A624:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
0A626:  BSF    F9D.5
....................    
....................    
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_64); //master1 jj
0A628:  BCF    FC6.5
0A62A:  BCF    F94.5
0A62C:  BSF    F94.4
0A62E:  BCF    F94.3
0A630:  MOVLW  22
0A632:  MOVWF  FC6
0A634:  MOVLW  40
0A636:  MOVWF  FC7
.................... 
....................   
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
0A638:  GOTO   0998
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
0A63C:  MOVLB  C
0A63E:  CLRF   x1B
0A640:  SETF   x1C
0A642:  MOVLB  0
0A644:  CALL   0A2E
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
0A648:  MOVLB  C
0A64A:  CLRF   x1B
0A64C:  SETF   x1C
0A64E:  MOVLB  0
0A650:  CALL   0A40
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
0A654:  MOVLW  02
0A656:  MOVLB  C
0A658:  MOVWF  x1B
0A65A:  SETF   x1C
0A65C:  MOVLB  0
0A65E:  CALL   0A2E
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input 
0A662:  MOVLW  02
0A664:  MOVLB  C
0A666:  MOVWF  x1B
0A668:  SETF   x1C
0A66A:  MOVLB  0
0A66C:  CALL   0A40
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
0A670:  MOVLB  C
0A672:  CLRF   x25
0A674:  MOVLW  06
0A676:  MOVWF  x26
0A678:  SETF   x27
0A67A:  MOVLB  0
0A67C:  CALL   0966
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
0A680:  MOVLB  C
0A682:  CLRF   x25
0A684:  MOVLW  16
0A686:  MOVWF  x26
0A688:  SETF   x27
0A68A:  MOVLB  0
0A68C:  CALL   0966
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
0A690:  MOVLW  02
0A692:  MOVLB  C
0A694:  MOVWF  x25
0A696:  MOVLW  06
0A698:  MOVWF  x26
0A69A:  SETF   x27
0A69C:  MOVLB  0
0A69E:  CALL   0966
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
0A6A2:  MOVLW  02
0A6A4:  MOVLB  C
0A6A6:  MOVWF  x25
0A6A8:  MOVLW  16
0A6AA:  MOVWF  x26
0A6AC:  SETF   x27
0A6AE:  MOVLB  0
0A6B0:  CALL   0966
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
0A6B4:  MOVLW  04
0A6B6:  MOVLB  C
0A6B8:  MOVWF  x1B
0A6BA:  CLRF   x1C
0A6BC:  MOVLB  0
0A6BE:  CALL   0A2E
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
0A6C2:  MOVLW  04
0A6C4:  MOVLB  C
0A6C6:  MOVWF  x1B
0A6C8:  CLRF   x1C
0A6CA:  MOVLB  0
0A6CC:  CALL   0A40
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
0A6D0:  MOVLW  06
0A6D2:  MOVLB  C
0A6D4:  MOVWF  x1B
0A6D6:  CLRF   x1C
0A6D8:  MOVLB  0
0A6DA:  CALL   0A2E
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
0A6DE:  MOVLW  06
0A6E0:  MOVLB  C
0A6E2:  MOVWF  x1B
0A6E4:  CLRF   x1C
0A6E6:  MOVLB  0
0A6E8:  CALL   0A40
....................    IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
0A6EC:  MOVLW  08
0A6EE:  MOVLB  C
0A6F0:  MOVWF  x1B
0A6F2:  CLRF   x1C
0A6F4:  MOVLB  0
0A6F6:  CALL   0A2E
....................    IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
0A6FA:  MOVLW  08
0A6FC:  MOVLB  C
0A6FE:  MOVWF  x1B
0A700:  CLRF   x1C
0A702:  MOVLB  0
0A704:  CALL   0A40
....................    IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0A708:  MOVLW  0A
0A70A:  MOVLB  C
0A70C:  MOVWF  x1B
0A70E:  CLRF   x1C
0A710:  MOVLB  0
0A712:  CALL   0A2E
....................    IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
0A716:  MOVLW  0A
0A718:  MOVLB  C
0A71A:  MOVWF  x1B
0A71C:  CLRF   x1C
0A71E:  MOVLB  0
0A720:  CALL   0A40
....................    
....................    FlashingFlag = 1;
0A724:  BSF    1A.1
....................    //output_bit(P485ctrl,0);
....................    sequence = end_sq;
0A726:  MOVFF  6F,78
....................    Address = 1;
0A72A:  MOVLW  01
0A72C:  MOVWF  x79
.................... 
....................    Output.B1 = 1;
0A72E:  MOVLB  B
0A730:  BSF    x9C.0
....................    Output.B2 = 1;
0A732:  BSF    x9C.1
....................    Output.B3 = 1;
0A734:  BSF    x9C.2
....................    Output.B4 = 1;
0A736:  BSF    x9C.3
....................    Output.B5 = 1;
0A738:  BSF    x9C.4
....................    Output.B6 = 1;
0A73A:  BSF    x9C.5
....................    Output.B7 = 1;
0A73C:  BSF    x9C.6
....................    Output.B8 = 1;
0A73E:  BSF    x9C.7
....................    Output.B9 = 1;
0A740:  BSF    x9D.0
....................    Output.B10 = 1;
0A742:  BSF    x9D.1
....................    Output.B11 = 1;
0A744:  BSF    x9D.2
....................    Output.B12 = 1;
0A746:  BSF    x9D.3
....................    Output.B13 = 1;
0A748:  BSF    x9D.4
....................    Output.B14 = 1;
0A74A:  BSF    x9D.5
....................    Output.B15 = 1;
0A74C:  BSF    x9D.6
....................    Output.B16 = 1;
0A74E:  BSF    x9D.7
....................    
....................    ////////////////////
....................    In.B1 = 0;
0A750:  BCF    xAA.0
....................    In.B2 = 0;
0A752:  BCF    xAA.1
....................    In.B3 = 0;
0A754:  BCF    xAA.2
....................    In.B4 = 0;
0A756:  BCF    xAA.3
....................    In.B5 = 0;
0A758:  BCF    xAA.4
....................    In.B6 = 0;
0A75A:  BCF    xAA.5
....................    In.B7 = 0;
0A75C:  BCF    xAA.6
....................    In.B8 = 0;
0A75E:  BCF    xAA.7
....................    In.B9 = 0;
0A760:  BCF    xAB.0
....................    In.B10 = 0;
0A762:  BCF    xAB.1
....................    In.B11 = 0;
0A764:  BCF    xAB.2
....................    In.B12 = 0;
0A766:  BCF    xAB.3
....................    In.B13 = 0;
0A768:  BCF    xAB.4
....................    In.B14 = 0;
0A76A:  BCF    xAB.5
....................    In.B15 = 0;
0A76C:  BCF    xAB.6
....................    In.B16 = 0;
0A76E:  BCF    xAB.7
....................     ////////////////////
....................    In2.B1 = 0;
0A770:  BCF    xAC.0
....................    In2.B2 = 0;
0A772:  BCF    xAC.1
....................    In2.B3 = 0;
0A774:  BCF    xAC.2
....................    In2.B4 = 0;
0A776:  BCF    xAC.3
....................    In2.B5 = 0;
0A778:  BCF    xAC.4
....................    In2.B6 = 0;
0A77A:  BCF    xAC.5
....................    In2.B7 = 0;
0A77C:  BCF    xAC.6
....................    In2.B8 = 0;
0A77E:  BCF    xAC.7
....................    In2.B9 = 0;
0A780:  BCF    xAD.0
....................    In2.B10 = 0;
0A782:  BCF    xAD.1
....................    In2.B11 = 0;
0A784:  BCF    xAD.2
....................    In2.B12 = 0;
0A786:  BCF    xAD.3
....................    In2.B13 = 0;
0A788:  BCF    xAD.4
....................    In2.B14 = 0;
0A78A:  BCF    xAD.5
....................    In2.B15 = 0;
0A78C:  BCF    xAD.6
....................    In2.B16 = 0;
0A78E:  BCF    xAD.7
.................... 
....................    
....................    ////////////////////////
....................    Ack.B1 = 0;
0A790:  BCF    xA8.0
....................    Ack.B2 = 0;
0A792:  BCF    xA8.1
....................    Ack.B3 = 0;
0A794:  BCF    xA8.2
....................    Ack.B4 = 0;
0A796:  BCF    xA8.3
....................    Ack.B5 = 0;
0A798:  BCF    xA8.4
....................    Ack.B6 = 0;
0A79A:  BCF    xA8.5
....................    Ack.B7 = 0;
0A79C:  BCF    xA8.6
....................    Ack.B8 = 0;
0A79E:  BCF    xA8.7
....................    Ack.B9 = 0;
0A7A0:  BCF    xA9.0
....................    Ack.B10 = 0;
0A7A2:  BCF    xA9.1
....................    Ack.B11 = 0;
0A7A4:  BCF    xA9.2
....................    Ack.B12 = 0;
0A7A6:  BCF    xA9.3
....................    Ack.B13 = 0;
0A7A8:  BCF    xA9.4
....................    Ack.B14 = 0;
0A7AA:  BCF    xA9.5
....................    Ack.B15 = 0;
0A7AC:  BCF    xA9.6
....................    Ack.B16 = 0;
0A7AE:  BCF    xA9.7
.................... 
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0x0F)
0A7B0:  MOVFF  FF2,C1B
0A7B4:  BCF    FF2.7
0A7B6:  CLRF   FAA
0A7B8:  CLRF   FA9
0A7BA:  BCF    FA6.6
0A7BC:  BCF    FA6.7
0A7BE:  BSF    FA6.0
0A7C0:  MOVF   FA8,W
0A7C2:  MOVLB  C
0A7C4:  BTFSC  x1B.7
0A7C6:  BSF    FF2.7
0A7C8:  SUBLW  0F
0A7CA:  BNZ   A7D6
....................    {
....................       Read_Config();
0A7CC:  MOVLB  0
0A7CE:  GOTO   0A54
....................    }
0A7D2:  BRA    AB32
0A7D4:  MOVLB  C
....................    else
....................    {
....................       FlashingRateTime = 25;
0A7D6:  MOVLW  19
0A7D8:  MOVWF  1B
....................       AutoAck = 0xF0; //not use auto ack
0A7DA:  MOVLW  F0
0A7DC:  MOVLB  0
0A7DE:  MOVWF  x6A
....................       Address = 0x01;
0A7E0:  MOVLW  01
0A7E2:  MOVWF  x79
.................... 
....................       AutoAckTime = 5;
0A7E4:  MOVLW  05
0A7E6:  MOVWF  x6B
....................       FlashingRate = 25;
0A7E8:  MOVLW  19
0A7EA:  MOVWF  x6C
....................       NoOfPoint = 16;
0A7EC:  MOVLW  10
0A7EE:  MOVWF  x6D
....................       char i;
....................       for(i =0; i<=NoOfPoint; i++)
0A7F0:  MOVLB  C
0A7F2:  CLRF   x18
0A7F4:  MOVF   x18,W
0A7F6:  MOVLB  0
0A7F8:  SUBWF  x6D,W
0A7FA:  BNC   A81A
....................       {
....................          FaultDelayTime[i] = 0;
0A7FC:  BCF    FD8.0
0A7FE:  MOVLB  C
0A800:  RLCF   x18,W
0A802:  CLRF   03
0A804:  ADDLW  E8
0A806:  MOVWF  FE9
0A808:  MOVLW  0B
0A80A:  ADDWFC 03,W
0A80C:  MOVWF  FEA
0A80E:  CLRF   FEC
0A810:  MOVF   FED,F
0A812:  CLRF   FEF
0A814:  INCF   x18,F
0A816:  BRA    A7F4
0A818:  MOVLB  0
....................       }
.................... 
.................... 
....................       InputType.B1 = 1;
0A81A:  MOVLB  B
0A81C:  BSF    x9E.0
....................       InputType.B2 = 1;
0A81E:  BSF    x9E.1
....................       InputType.B3 = 1;
0A820:  BSF    x9E.2
....................       InputType.B4 = 1;
0A822:  BSF    x9E.3
....................       InputType.B5 = 1;
0A824:  BSF    x9E.4
....................       InputType.B6 = 1;
0A826:  BSF    x9E.5
....................       InputType.B7 = 1;
0A828:  BSF    x9E.6
....................       InputType.B8 = 1;
0A82A:  BSF    x9E.7
....................       InputType.B9 = 1;
0A82C:  BSF    x9F.0
....................       InputType.B10 = 1;
0A82E:  BSF    x9F.1
....................       InputType.B11 = 1;
0A830:  BSF    x9F.2
....................       InputType.B12 = 1;
0A832:  BSF    x9F.3
....................       InputType.B13 = 1;
0A834:  BSF    x9F.4
....................       InputType.B14 = 1;
0A836:  BSF    x9F.5
....................       InputType.B15 = 1;
0A838:  BSF    x9F.6
....................       InputType.B16 = 1;
0A83A:  BSF    x9F.7
....................       
....................       FaultNCNO[1] = 1;
0A83C:  MOVLB  C
0A83E:  BSF    x12.1
....................       FaultNCNO[2] = 1;
0A840:  BSF    x12.2
....................       FaultNCNO[3] = 1;
0A842:  BSF    x12.3
....................       FaultNCNO[4] = 1;
0A844:  BSF    x12.4
....................       FaultNCNO[5] = 1;
0A846:  BSF    x12.5
....................       FaultNCNO[6] = 1;
0A848:  BSF    x12.6
....................       FaultNCNO[7] = 1;
0A84A:  BSF    x12.7
....................       FaultNCNO[8] = 1;
0A84C:  BSF    x13.0
....................       FaultNCNO[9] = 1;
0A84E:  BSF    x13.1
....................       FaultNCNO[10] = 1;
0A850:  BSF    x13.2
....................       FaultNCNO[11] = 1;
0A852:  BSF    x13.3
....................       FaultNCNO[12] = 1;
0A854:  BSF    x13.4
....................       FaultNCNO[13] = 1;
0A856:  BSF    x13.5
....................       FaultNCNO[14] = 1;
0A858:  BSF    x13.6
....................       FaultNCNO[15] = 1;
0A85A:  BSF    x13.7
....................       FaultNCNO[16] = 1;
0A85C:  BSF    x14.0
....................       
....................       /////////////////////////////
....................       FaultType.B1 = 1;
0A85E:  MOVLB  B
0A860:  BSF    xA0.0
....................       FaultType.B2= 1;
0A862:  BSF    xA0.1
....................       FaultType.B3 = 1;
0A864:  BSF    xA0.2
....................       FaultType.B4 = 1;
0A866:  BSF    xA0.3
....................       FaultType.B5 = 1;
0A868:  BSF    xA0.4
....................       FaultType.B6 = 1;
0A86A:  BSF    xA0.5
....................       FaultType.B7 = 1;
0A86C:  BSF    xA0.6
....................       FaultType.B8 = 1;
0A86E:  BSF    xA0.7
....................       FaultType.B9 = 1;
0A870:  BSF    xA1.0
....................       FaultType.B10 = 1;
0A872:  BSF    xA1.1
....................       FaultType.B11 = 1;
0A874:  BSF    xA1.2
....................       FaultType.B12 = 1;
0A876:  BSF    xA1.3
....................       FaultType.B13 = 1;
0A878:  BSF    xA1.4
....................       FaultType.B14 = 1;
0A87A:  BSF    xA1.5
....................       FaultType.B15 = 1;
0A87C:  BSF    xA1.6
....................       FaultType.B16 = 1;
0A87E:  BSF    xA1.7
....................       
....................       ////////////////////////////
....................       OutputType.B1 = 1;
0A880:  BSF    xA2.0
....................       OutputType.B2 = 1;
0A882:  BSF    xA2.1
....................       OutputType.B3 = 1;
0A884:  BSF    xA2.2
....................       OutputType.B4 = 1;
0A886:  BSF    xA2.3
....................       OutputType.B5 = 1;
0A888:  BSF    xA2.4
....................       OutputType.B6 = 1;
0A88A:  BSF    xA2.5
....................       OutputType.B7 = 1;
0A88C:  BSF    xA2.6
....................       OutputType.B8 = 1;
0A88E:  BSF    xA2.7
....................       OutputType.B9 = 1;
0A890:  BSF    xA3.0
....................       OutputType.B10 = 1;
0A892:  BSF    xA3.1
....................       OutputType.B11 = 1;
0A894:  BSF    xA3.2
....................       OutputType.B12 = 1;
0A896:  BSF    xA3.3
....................       OutputType.B13 = 1;
0A898:  BSF    xA3.4
....................       OutputType.B14 = 1;
0A89A:  BSF    xA3.5
....................       OutputType.B15 = 1;
0A89C:  BSF    xA3.6
....................       OutputType.B16 = 1;
0A89E:  BSF    xA3.7
....................  
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
0A8A0:  BSF    xA4.0
....................       OutputBoth.B2 = 1;
0A8A2:  BSF    xA4.1
....................       OutputBoth.B3 = 1;
0A8A4:  BSF    xA4.2
....................       OutputBoth.B4 = 1;
0A8A6:  BSF    xA4.3
....................       OutputBoth.B5 = 1;
0A8A8:  BSF    xA4.4
....................       OutputBoth.B6 = 1;
0A8AA:  BSF    xA4.5
....................       OutputBoth.B7 = 1;
0A8AC:  BSF    xA4.6
....................       OutputBoth.B8 = 1;
0A8AE:  BSF    xA4.7
....................       OutputBoth.B9 = 1;
0A8B0:  BSF    xA5.0
....................       OutputBoth.B10 = 1;
0A8B2:  BSF    xA5.1
....................       OutputBoth.B11 = 1;
0A8B4:  BSF    xA5.2
....................       OutputBoth.B12 = 1;
0A8B6:  BSF    xA5.3
....................       OutputBoth.B13 = 1;
0A8B8:  BSF    xA5.4
....................       OutputBoth.B14 = 1;
0A8BA:  BSF    xA5.5
....................       OutputBoth.B15 = 1;
0A8BC:  BSF    xA5.6
....................       OutputBoth.B16 = 1;
0A8BE:  BSF    xA5.7
....................       //OutputBoth.B17 = 1;
....................       //OutputBoth.B18 = 1;
....................       //OutputBoth.B19 = 1;
....................       //OutputBoth.B20 = 1;
....................       
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
0A8C0:  BSF    xA6.0
....................       AlarmIndicator.B2 = 1;
0A8C2:  BSF    xA6.1
....................       AlarmIndicator.B3 = 1;
0A8C4:  BSF    xA6.2
....................       AlarmIndicator.B4 = 1;
0A8C6:  BSF    xA6.3
....................       AlarmIndicator.B5 = 1;
0A8C8:  BSF    xA6.4
....................       AlarmIndicator.B6 = 1;
0A8CA:  BSF    xA6.5
....................       AlarmIndicator.B7 = 1;
0A8CC:  BSF    xA6.6
....................       AlarmIndicator.B8 = 1;
0A8CE:  BSF    xA6.7
....................       AlarmIndicator.B9 = 1;
0A8D0:  BSF    xA7.0
....................       AlarmIndicator.B10 = 1;
0A8D2:  BSF    xA7.1
....................       AlarmIndicator.B11 = 1;
0A8D4:  BSF    xA7.2
....................       AlarmIndicator.B12 = 1;
0A8D6:  BSF    xA7.3
....................       AlarmIndicator.B13 = 1;
0A8D8:  BSF    xA7.4
....................       AlarmIndicator.B14 = 1;
0A8DA:  BSF    xA7.5
....................       AlarmIndicator.B15 = 1;
0A8DC:  BSF    xA7.6
....................       AlarmIndicator.B16 = 1;
0A8DE:  BSF    xA7.7
....................       
....................       ///////////// JACK///////////////////
....................    EEpDat = read_eeprom(0x10);
0A8E0:  MOVFF  FF2,C1B
0A8E4:  BCF    FF2.7
0A8E6:  CLRF   FAA
0A8E8:  MOVLW  10
0A8EA:  MOVWF  FA9
0A8EC:  BCF    FA6.6
0A8EE:  BCF    FA6.7
0A8F0:  BSF    FA6.0
0A8F2:  MOVF   FA8,W
0A8F4:  MOVLB  C
0A8F6:  BTFSC  x1B.7
0A8F8:  BSF    FF2.7
0A8FA:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
0A8FC:  MOVLB  B
0A8FE:  BCF    xB2.0
0A900:  BTFSC  39.0
0A902:  BSF    xB2.0
....................    RED_Colour.B2 = EEpDat >> 1;
0A904:  BCF    FD8.0
0A906:  RRCF   39,W
0A908:  BCF    xB2.1
0A90A:  BTFSC  FE8.0
0A90C:  BSF    xB2.1
....................    RED_Colour.B3 = EEpDat >> 2;
0A90E:  RRCF   39,W
0A910:  MOVWF  00
0A912:  RRCF   00,F
0A914:  MOVLW  3F
0A916:  ANDWF  00,F
0A918:  BCF    xB2.2
0A91A:  BTFSC  00.0
0A91C:  BSF    xB2.2
....................    RED_Colour.B4 = EEpDat >> 3;
0A91E:  RRCF   39,W
0A920:  MOVWF  00
0A922:  RRCF   00,F
0A924:  RRCF   00,F
0A926:  MOVLW  1F
0A928:  ANDWF  00,F
0A92A:  BCF    xB2.3
0A92C:  BTFSC  00.0
0A92E:  BSF    xB2.3
....................    RED_Colour.B5 = EEpDat >> 4;
0A930:  SWAPF  39,W
0A932:  MOVWF  00
0A934:  MOVLW  0F
0A936:  ANDWF  00,F
0A938:  BCF    xB2.4
0A93A:  BTFSC  00.0
0A93C:  BSF    xB2.4
....................    RED_Colour.B6 = EEpDat >> 5;
0A93E:  SWAPF  39,W
0A940:  MOVWF  00
0A942:  RRCF   00,F
0A944:  MOVLW  07
0A946:  ANDWF  00,F
0A948:  BCF    xB2.5
0A94A:  BTFSC  00.0
0A94C:  BSF    xB2.5
....................    RED_Colour.B7 = EEpDat >> 6;
0A94E:  SWAPF  39,W
0A950:  MOVWF  00
0A952:  RRCF   00,F
0A954:  RRCF   00,F
0A956:  MOVLW  03
0A958:  ANDWF  00,F
0A95A:  BCF    xB2.6
0A95C:  BTFSC  00.0
0A95E:  BSF    xB2.6
....................    RED_Colour.B8 = EEpDat >> 7;
0A960:  CLRF   00
0A962:  BTFSC  39.7
0A964:  BSF    00.0
0A966:  BCF    xB2.7
0A968:  BTFSC  00.0
0A96A:  BSF    xB2.7
....................    
....................    EEpDat = read_eeprom(0x11);
0A96C:  MOVFF  FF2,C1B
0A970:  BCF    FF2.7
0A972:  CLRF   FAA
0A974:  MOVLW  11
0A976:  MOVWF  FA9
0A978:  BCF    FA6.6
0A97A:  BCF    FA6.7
0A97C:  BSF    FA6.0
0A97E:  MOVF   FA8,W
0A980:  MOVLB  C
0A982:  BTFSC  x1B.7
0A984:  BSF    FF2.7
0A986:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
0A988:  MOVLB  B
0A98A:  BCF    xB3.0
0A98C:  BTFSC  39.0
0A98E:  BSF    xB3.0
....................    RED_Colour.B10 = EEpDat >> 1;
0A990:  BCF    FD8.0
0A992:  RRCF   39,W
0A994:  BCF    xB3.1
0A996:  BTFSC  FE8.0
0A998:  BSF    xB3.1
....................    
....................    
....................    EEpDat = read_eeprom(0x12);
0A99A:  MOVFF  FF2,C1B
0A99E:  BCF    FF2.7
0A9A0:  CLRF   FAA
0A9A2:  MOVLW  12
0A9A4:  MOVWF  FA9
0A9A6:  BCF    FA6.6
0A9A8:  BCF    FA6.7
0A9AA:  BSF    FA6.0
0A9AC:  MOVF   FA8,W
0A9AE:  MOVLB  C
0A9B0:  BTFSC  x1B.7
0A9B2:  BSF    FF2.7
0A9B4:  MOVWF  39
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
0A9B6:  MOVLB  B
0A9B8:  BCF    xB3.2
0A9BA:  BTFSC  39.0
0A9BC:  BSF    xB3.2
....................    RED_Colour.B12 = EEpDat >> 1;
0A9BE:  BCF    FD8.0
0A9C0:  RRCF   39,W
0A9C2:  BCF    xB3.3
0A9C4:  BTFSC  FE8.0
0A9C6:  BSF    xB3.3
....................    RED_Colour.B13 = EEpDat >> 2;
0A9C8:  RRCF   39,W
0A9CA:  MOVWF  00
0A9CC:  RRCF   00,F
0A9CE:  MOVLW  3F
0A9D0:  ANDWF  00,F
0A9D2:  BCF    xB3.4
0A9D4:  BTFSC  00.0
0A9D6:  BSF    xB3.4
....................    RED_Colour.B14 = EEpDat >> 3;
0A9D8:  RRCF   39,W
0A9DA:  MOVWF  00
0A9DC:  RRCF   00,F
0A9DE:  RRCF   00,F
0A9E0:  MOVLW  1F
0A9E2:  ANDWF  00,F
0A9E4:  BCF    xB3.5
0A9E6:  BTFSC  00.0
0A9E8:  BSF    xB3.5
....................    RED_Colour.B15 = EEpDat >> 4;
0A9EA:  SWAPF  39,W
0A9EC:  MOVWF  00
0A9EE:  MOVLW  0F
0A9F0:  ANDWF  00,F
0A9F2:  BCF    xB3.6
0A9F4:  BTFSC  00.0
0A9F6:  BSF    xB3.6
....................    RED_Colour.B16 = EEpDat >> 5;
0A9F8:  SWAPF  39,W
0A9FA:  MOVWF  00
0A9FC:  RRCF   00,F
0A9FE:  MOVLW  07
0AA00:  ANDWF  00,F
0AA02:  BCF    xB3.7
0AA04:  BTFSC  00.0
0AA06:  BSF    xB3.7
....................   
....................    EEpDat = read_eeprom(0x14);
0AA08:  MOVFF  FF2,C1B
0AA0C:  BCF    FF2.7
0AA0E:  CLRF   FAA
0AA10:  MOVLW  14
0AA12:  MOVWF  FA9
0AA14:  BCF    FA6.6
0AA16:  BCF    FA6.7
0AA18:  BSF    FA6.0
0AA1A:  MOVF   FA8,W
0AA1C:  MOVLB  C
0AA1E:  BTFSC  x1B.7
0AA20:  BSF    FF2.7
0AA22:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
0AA24:  MOVLB  B
0AA26:  BCF    xB4.0
0AA28:  BTFSC  39.0
0AA2A:  BSF    xB4.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
0AA2C:  BCF    FD8.0
0AA2E:  RRCF   39,W
0AA30:  BCF    xB4.1
0AA32:  BTFSC  FE8.0
0AA34:  BSF    xB4.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
0AA36:  RRCF   39,W
0AA38:  MOVWF  00
0AA3A:  RRCF   00,F
0AA3C:  MOVLW  3F
0AA3E:  ANDWF  00,F
0AA40:  BCF    xB4.2
0AA42:  BTFSC  00.0
0AA44:  BSF    xB4.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
0AA46:  RRCF   39,W
0AA48:  MOVWF  00
0AA4A:  RRCF   00,F
0AA4C:  RRCF   00,F
0AA4E:  MOVLW  1F
0AA50:  ANDWF  00,F
0AA52:  BCF    xB4.3
0AA54:  BTFSC  00.0
0AA56:  BSF    xB4.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
0AA58:  SWAPF  39,W
0AA5A:  MOVWF  00
0AA5C:  MOVLW  0F
0AA5E:  ANDWF  00,F
0AA60:  BCF    xB4.4
0AA62:  BTFSC  00.0
0AA64:  BSF    xB4.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
0AA66:  SWAPF  39,W
0AA68:  MOVWF  00
0AA6A:  RRCF   00,F
0AA6C:  MOVLW  07
0AA6E:  ANDWF  00,F
0AA70:  BCF    xB4.5
0AA72:  BTFSC  00.0
0AA74:  BSF    xB4.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
0AA76:  SWAPF  39,W
0AA78:  MOVWF  00
0AA7A:  RRCF   00,F
0AA7C:  RRCF   00,F
0AA7E:  MOVLW  03
0AA80:  ANDWF  00,F
0AA82:  BCF    xB4.6
0AA84:  BTFSC  00.0
0AA86:  BSF    xB4.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
0AA88:  CLRF   00
0AA8A:  BTFSC  39.7
0AA8C:  BSF    00.0
0AA8E:  BCF    xB4.7
0AA90:  BTFSC  00.0
0AA92:  BSF    xB4.7
....................    
....................    EEpDat = read_eeprom(0x15);
0AA94:  MOVFF  FF2,C1B
0AA98:  BCF    FF2.7
0AA9A:  CLRF   FAA
0AA9C:  MOVLW  15
0AA9E:  MOVWF  FA9
0AAA0:  BCF    FA6.6
0AAA2:  BCF    FA6.7
0AAA4:  BSF    FA6.0
0AAA6:  MOVF   FA8,W
0AAA8:  MOVLB  C
0AAAA:  BTFSC  x1B.7
0AAAC:  BSF    FF2.7
0AAAE:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
0AAB0:  MOVLB  B
0AAB2:  BCF    xB5.0
0AAB4:  BTFSC  39.0
0AAB6:  BSF    xB5.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
0AAB8:  BCF    FD8.0
0AABA:  RRCF   39,W
0AABC:  BCF    xB5.1
0AABE:  BTFSC  FE8.0
0AAC0:  BSF    xB5.1
....................    
....................    
....................    EEpDat = read_eeprom(0x16);
0AAC2:  MOVFF  FF2,C1B
0AAC6:  BCF    FF2.7
0AAC8:  CLRF   FAA
0AACA:  MOVLW  16
0AACC:  MOVWF  FA9
0AACE:  BCF    FA6.6
0AAD0:  BCF    FA6.7
0AAD2:  BSF    FA6.0
0AAD4:  MOVF   FA8,W
0AAD6:  MOVLB  C
0AAD8:  BTFSC  x1B.7
0AADA:  BSF    FF2.7
0AADC:  MOVWF  39
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
0AADE:  MOVLB  B
0AAE0:  BCF    xB5.2
0AAE2:  BTFSC  39.0
0AAE4:  BSF    xB5.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
0AAE6:  BCF    FD8.0
0AAE8:  RRCF   39,W
0AAEA:  BCF    xB5.3
0AAEC:  BTFSC  FE8.0
0AAEE:  BSF    xB5.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
0AAF0:  RRCF   39,W
0AAF2:  MOVWF  00
0AAF4:  RRCF   00,F
0AAF6:  MOVLW  3F
0AAF8:  ANDWF  00,F
0AAFA:  BCF    xB5.4
0AAFC:  BTFSC  00.0
0AAFE:  BSF    xB5.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
0AB00:  RRCF   39,W
0AB02:  MOVWF  00
0AB04:  RRCF   00,F
0AB06:  RRCF   00,F
0AB08:  MOVLW  1F
0AB0A:  ANDWF  00,F
0AB0C:  BCF    xB5.5
0AB0E:  BTFSC  00.0
0AB10:  BSF    xB5.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
0AB12:  SWAPF  39,W
0AB14:  MOVWF  00
0AB16:  MOVLW  0F
0AB18:  ANDWF  00,F
0AB1A:  BCF    xB5.6
0AB1C:  BTFSC  00.0
0AB1E:  BSF    xB5.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
0AB20:  SWAPF  39,W
0AB22:  MOVWF  00
0AB24:  RRCF   00,F
0AB26:  MOVLW  07
0AB28:  ANDWF  00,F
0AB2A:  BCF    xB5.7
0AB2C:  BTFSC  00.0
0AB2E:  BSF    xB5.7
0AB30:  MOVLB  0
.................... 
....................    
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
....................    
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
0AB32:  MOVLW  00
0AB34:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
0AB36:  MOVWF  F93
....................    enable_interrupts(GLOBAL);
0AB38:  MOVLW  C0
0AB3A:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
0AB3C:  BSF    FD1.0
....................    Read_input(); restart_wdt();
0AB3E:  CALL   2060
0AB42:  CLRWDT
....................    
....................    output_bit(Pbuzzer,0);   //Clear Buzzer
0AB44:  BCF    F89.4
0AB46:  BCF    F92.4
....................    output_bit(Pbell,0);      //Clear Bell
0AB48:  BCF    F89.3
0AB4A:  BCF    F92.3
....................    output_bit(P485ctrl,0);
0AB4C:  BCF    F8A.3
0AB4E:  BCF    F93.3
....................    //output_bit(P485ctrl,0);
....................    output_bit(PIN_B4,1); //jj
0AB50:  BSF    F8A.4
0AB52:  BCF    F93.4
....................    Send_Ouput();
0AB54:  CALL   2AC4
....................    
....................    IO_OUTPUT_A(IO_DEVICE_2, 0xff);
0AB58:  MOVLW  04
0AB5A:  MOVLB  C
0AB5C:  MOVWF  x23
0AB5E:  SETF   x24
0AB60:  MOVLB  0
0AB62:  CALL   2A98
....................    IO_OUTPUT_B(IO_DEVICE_2, 0xff);
0AB66:  MOVLW  04
0AB68:  MOVLB  C
0AB6A:  MOVWF  x23
0AB6C:  SETF   x24
0AB6E:  MOVLB  0
0AB70:  CALL   2AAE
....................             
....................    IO_OUTPUT_A(IO_DEVICE_3, 0xff);
0AB74:  MOVLW  06
0AB76:  MOVLB  C
0AB78:  MOVWF  x23
0AB7A:  SETF   x24
0AB7C:  MOVLB  0
0AB7E:  CALL   2A98
....................    IO_OUTPUT_B(IO_DEVICE_3, 0xff);
0AB82:  MOVLW  06
0AB84:  MOVLB  C
0AB86:  MOVWF  x23
0AB88:  SETF   x24
0AB8A:  MOVLB  0
0AB8C:  CALL   2AAE
....................   
....................    IO_OUTPUT_A(IO_DEVICE_5, 0xff);  
0AB90:  MOVLW  0A
0AB92:  MOVLB  C
0AB94:  MOVWF  x23
0AB96:  SETF   x24
0AB98:  MOVLB  0
0AB9A:  CALL   2A98
....................    IO_OUTPUT_B(IO_DEVICE_5, 0xff);
0AB9E:  MOVLW  0A
0ABA0:  MOVLB  C
0ABA2:  MOVWF  x23
0ABA4:  SETF   x24
0ABA6:  MOVLB  0
0ABA8:  CALL   2AAE
....................             
....................    IO_OUTPUT_A(IO_DEVICE_4, 0xff);
0ABAC:  MOVLW  08
0ABAE:  MOVLB  C
0ABB0:  MOVWF  x23
0ABB2:  SETF   x24
0ABB4:  MOVLB  0
0ABB6:  CALL   2A98
....................    IO_OUTPUT_B(IO_DEVICE_4, 0xff);
0ABBA:  MOVLW  08
0ABBC:  MOVLB  C
0ABBE:  MOVWF  x23
0ABC0:  SETF   x24
0ABC2:  MOVLB  0
0ABC4:  CALL   2AAE
....................      
....................    // jj
....................    char i;
....................    for(i=1;i<=16;i++)
0ABC8:  MOVLW  01
0ABCA:  MOVLB  C
0ABCC:  MOVWF  x19
0ABCE:  MOVF   x19,W
0ABD0:  SUBLW  10
0ABD2:  BTFSS  FD8.0
0ABD4:  BRA    AD62
....................    {
....................       FaultAgo[i] = 0;
0ABD6:  MOVFF  C19,C2C
0ABDA:  CLRF   x2D
0ABDC:  MOVLW  0B
0ABDE:  MOVWF  x2F
0ABE0:  MOVLW  B8
0ABE2:  MOVWF  x2E
0ABE4:  MOVLB  0
0ABE6:  CALL   1FC0
....................       FaultNow[i] = 0;
0ABEA:  MOVFF  C19,C2C
0ABEE:  MOVLB  C
0ABF0:  CLRF   x2D
0ABF2:  MOVLW  0B
0ABF4:  MOVWF  x2F
0ABF6:  MOVLW  BB
0ABF8:  MOVWF  x2E
0ABFA:  MOVLB  0
0ABFC:  CALL   1FC0
....................       ReleaseTime[i] = 0;
0AC00:  BCF    FD8.0
0AC02:  MOVLB  C
0AC04:  RLCF   x19,W
0AC06:  CLRF   03
0AC08:  ADDLW  BE
0AC0A:  MOVWF  FE9
0AC0C:  MOVLW  0B
0AC0E:  ADDWFC 03,W
0AC10:  MOVWF  FEA
0AC12:  CLRF   FEC
0AC14:  MOVF   FED,F
0AC16:  CLRF   FEF
....................       if(FaultNCNO[i] ==NO)
0AC18:  MOVFF  C19,C2C
0AC1C:  MOVLW  0C
0AC1E:  MOVWF  x2E
0AC20:  MOVLW  12
0AC22:  MOVWF  x2D
0AC24:  MOVLB  0
0AC26:  CALL   1F68
0AC2A:  MOVF   01,W
0AC2C:  ANDLW  01
0AC2E:  SUBLW  01
0AC30:  BNZ   ACCA
....................       {
....................          switch(i)
0AC32:  MOVLW  01
0AC34:  MOVLB  C
0AC36:  SUBWF  x19,W
0AC38:  ADDLW  F0
0AC3A:  BC    ACC6
0AC3C:  ADDLW  10
0AC3E:  MOVLB  0
0AC40:  GOTO   AF7C
....................          {
....................             case 1:
....................                Inputt.B1 = 1; 
0AC44:  MOVLB  B
0AC46:  BSF    x9A.0
....................             break;
0AC48:  MOVLB  C
0AC4A:  BRA    ACC6
....................             case 2:
....................                Inputt.B2 = 1; 
0AC4C:  MOVLB  B
0AC4E:  BSF    x9A.1
....................             break;
0AC50:  MOVLB  C
0AC52:  BRA    ACC6
....................             case 3:
....................                Inputt.B3 = 1; 
0AC54:  MOVLB  B
0AC56:  BSF    x9A.2
....................             break;
0AC58:  MOVLB  C
0AC5A:  BRA    ACC6
....................             case 4:
....................                Inputt.B4 = 1; 
0AC5C:  MOVLB  B
0AC5E:  BSF    x9A.3
....................             break;
0AC60:  MOVLB  C
0AC62:  BRA    ACC6
....................             case 5:
....................                Inputt.B5 = 1; 
0AC64:  MOVLB  B
0AC66:  BSF    x9A.4
....................             break;
0AC68:  MOVLB  C
0AC6A:  BRA    ACC6
....................             case 6:
....................                Inputt.B6 = 1; 
0AC6C:  MOVLB  B
0AC6E:  BSF    x9A.5
....................             break;
0AC70:  MOVLB  C
0AC72:  BRA    ACC6
....................             case 7:
....................                Inputt.B7 = 1; 
0AC74:  MOVLB  B
0AC76:  BSF    x9A.6
....................              break;
0AC78:  MOVLB  C
0AC7A:  BRA    ACC6
....................              case 8:
....................                Inputt.B8 = 1; 
0AC7C:  MOVLB  B
0AC7E:  BSF    x9A.7
....................             break;
0AC80:  MOVLB  C
0AC82:  BRA    ACC6
....................             case 9:
....................                Inputt.B9 = 1; 
0AC84:  MOVLB  B
0AC86:  BSF    x9B.0
....................             break;
0AC88:  MOVLB  C
0AC8A:  BRA    ACC6
....................             case 10:
....................                Inputt.B10 = 1; 
0AC8C:  MOVLB  B
0AC8E:  BSF    x9B.1
....................             break;
0AC90:  MOVLB  C
0AC92:  BRA    ACC6
....................             case 11:
....................                Inputt.B11 = 1; 
0AC94:  MOVLB  B
0AC96:  BSF    x9B.2
....................             break;
0AC98:  MOVLB  C
0AC9A:  BRA    ACC6
....................             case 12:
....................                Inputt.B12 = 1; 
0AC9C:  MOVLB  B
0AC9E:  BSF    x9B.3
....................             break;
0ACA0:  MOVLB  C
0ACA2:  BRA    ACC6
....................             case 13:
....................                Inputt.B13 = 1; 
0ACA4:  MOVLB  B
0ACA6:  BSF    x9B.4
....................             break;
0ACA8:  MOVLB  C
0ACAA:  BRA    ACC6
....................             case 14:
....................                Inputt.B14 = 1; 
0ACAC:  MOVLB  B
0ACAE:  BSF    x9B.5
....................             break;
0ACB0:  MOVLB  C
0ACB2:  BRA    ACC6
....................             case 15:
....................                Inputt.B15 = 1; 
0ACB4:  MOVLB  B
0ACB6:  BSF    x9B.6
....................             break;
0ACB8:  MOVLB  C
0ACBA:  BRA    ACC6
....................             case 16:
....................                 Inputt.B16 = 1;
0ACBC:  MOVLB  B
0ACBE:  BSF    x9B.7
....................              break;
0ACC0:  MOVLB  C
0ACC2:  BRA    ACC6
0ACC4:  MOVLB  C
....................                        
....................          }                 
....................       }
0ACC6:  BRA    AD5E
0ACC8:  MOVLB  0
....................       else
....................       {
....................          switch(i)
0ACCA:  MOVLW  01
0ACCC:  MOVLB  C
0ACCE:  SUBWF  x19,W
0ACD0:  ADDLW  F0
0ACD2:  BC    AD5E
0ACD4:  ADDLW  10
0ACD6:  MOVLB  0
0ACD8:  GOTO   AFB6
....................          {
....................             case 1:
....................                Inputt.B1 = 0; 
0ACDC:  MOVLB  B
0ACDE:  BCF    x9A.0
....................             break;
0ACE0:  MOVLB  C
0ACE2:  BRA    AD5E
....................             case 2:
....................                Inputt.B2 = 0; 
0ACE4:  MOVLB  B
0ACE6:  BCF    x9A.1
....................             break;
0ACE8:  MOVLB  C
0ACEA:  BRA    AD5E
....................             case 3:
....................                Inputt.B3 = 0; 
0ACEC:  MOVLB  B
0ACEE:  BCF    x9A.2
....................             break;
0ACF0:  MOVLB  C
0ACF2:  BRA    AD5E
....................             case 4:
....................                Inputt.B4 = 0; 
0ACF4:  MOVLB  B
0ACF6:  BCF    x9A.3
....................             break;
0ACF8:  MOVLB  C
0ACFA:  BRA    AD5E
....................             case 5:
....................                Inputt.B5 = 0; 
0ACFC:  MOVLB  B
0ACFE:  BCF    x9A.4
....................             break;
0AD00:  MOVLB  C
0AD02:  BRA    AD5E
....................             case 6:
....................                Inputt.B6 = 0; 
0AD04:  MOVLB  B
0AD06:  BCF    x9A.5
....................             break;
0AD08:  MOVLB  C
0AD0A:  BRA    AD5E
....................             case 7:
....................                Inputt.B7 = 0; 
0AD0C:  MOVLB  B
0AD0E:  BCF    x9A.6
....................              break;
0AD10:  MOVLB  C
0AD12:  BRA    AD5E
....................              case 8:
....................                Inputt.B8 = 0; 
0AD14:  MOVLB  B
0AD16:  BCF    x9A.7
....................             break;
0AD18:  MOVLB  C
0AD1A:  BRA    AD5E
....................             case 9:
....................                Inputt.B9 = 0; 
0AD1C:  MOVLB  B
0AD1E:  BCF    x9B.0
....................             break;
0AD20:  MOVLB  C
0AD22:  BRA    AD5E
....................             case 10:
....................                Inputt.B10 = 0; 
0AD24:  MOVLB  B
0AD26:  BCF    x9B.1
....................             break;
0AD28:  MOVLB  C
0AD2A:  BRA    AD5E
....................             case 11:
....................                Inputt.B11 = 0; 
0AD2C:  MOVLB  B
0AD2E:  BCF    x9B.2
....................             break;
0AD30:  MOVLB  C
0AD32:  BRA    AD5E
....................             case 12:
....................                Inputt.B12 = 0; 
0AD34:  MOVLB  B
0AD36:  BCF    x9B.3
....................             break;
0AD38:  MOVLB  C
0AD3A:  BRA    AD5E
....................             case 13:
....................                Inputt.B13 = 0; 
0AD3C:  MOVLB  B
0AD3E:  BCF    x9B.4
....................             break;
0AD40:  MOVLB  C
0AD42:  BRA    AD5E
....................             case 14:
....................                Inputt.B14 = 0; 
0AD44:  MOVLB  B
0AD46:  BCF    x9B.5
....................             break;
0AD48:  MOVLB  C
0AD4A:  BRA    AD5E
....................             case 15:
....................                Inputt.B15 = 0; 
0AD4C:  MOVLB  B
0AD4E:  BCF    x9B.6
....................             break;
0AD50:  MOVLB  C
0AD52:  BRA    AD5E
....................             case 16:
....................                 Inputt.B16 = 0;
0AD54:  MOVLB  B
0AD56:  BCF    x9B.7
....................              break;
0AD58:  MOVLB  C
0AD5A:  BRA    AD5E
0AD5C:  MOVLB  C
....................                        
....................          }                 
....................       }
0AD5E:  INCF   x19,F
0AD60:  BRA    ABCE
....................       
....................    }
.................... 
....................   //GSM SIM900 Init
....................    delay_ms(1000);
0AD62:  MOVLW  04
0AD64:  MOVWF  x1B
0AD66:  MOVLW  FA
0AD68:  MOVWF  x24
0AD6A:  MOVLB  0
0AD6C:  CALL   0936
0AD70:  MOVLB  C
0AD72:  DECFSZ x1B,F
0AD74:  BRA    AD66
....................    fprintf(CH2,"AT+CMGF=1"); 
0AD76:  MOVLW  2C
0AD78:  MOVWF  FF6
0AD7A:  MOVLW  09
0AD7C:  MOVWF  FF7
0AD7E:  MOVLB  0
0AD80:  CALL   2EB4
....................    putc('\n',CH2);
0AD84:  MOVLW  0A
0AD86:  MOVLB  C
0AD88:  MOVWF  x25
0AD8A:  MOVLB  0
0AD8C:  CALL   2E6E
....................    delay_ms(50);
0AD90:  MOVLW  32
0AD92:  MOVLB  C
0AD94:  MOVWF  x24
0AD96:  MOVLB  0
0AD98:  CALL   0936
....................    
....................    SendSMS.B1 =0;
0AD9C:  MOVLB  B
0AD9E:  BCF    xB6.0
....................    SendSMS.B2 =0;
0ADA0:  BCF    xB6.1
....................    SendSMS.B3 =0;
0ADA2:  BCF    xB6.2
....................    SendSMS.B4 =0;
0ADA4:  BCF    xB6.3
....................    SendSMS.B5 =0;
0ADA6:  BCF    xB6.4
....................    SendSMS.B6 =0;
0ADA8:  BCF    xB6.5
....................    SendSMS.B7 =0;
0ADAA:  BCF    xB6.6
....................    SendSMS.B8 =0;
0ADAC:  BCF    xB6.7
....................    SendSMS.B9 =0;
0ADAE:  BCF    xB7.0
....................    SendSMS.B10 =0;
0ADB0:  BCF    xB7.1
....................    SendSMS.B11 =0;
0ADB2:  BCF    xB7.2
....................    SendSMS.B12 =0;
0ADB4:  BCF    xB7.3
....................    SendSMS.B13 =0;
0ADB6:  BCF    xB7.4
....................    SendSMS.B14 =0;
0ADB8:  BCF    xB7.5
....................    SendSMS.B15 =0;
0ADBA:  BCF    xB7.6
....................    SendSMS.B16 =0;
0ADBC:  BCF    xB7.7
....................    
....................    char m;
....................    for(m=0; m<10; m++)
0ADBE:  MOVLB  C
0ADC0:  CLRF   x1A
0ADC2:  MOVF   x1A,W
0ADC4:  SUBLW  09
0ADC6:  BNC   ADFA
....................    {
....................       sms_phonenumber[m] = read_eeprom(0x32 + m);
0ADC8:  CLRF   03
0ADCA:  MOVF   x1A,W
0ADCC:  ADDLW  8B
0ADCE:  MOVWF  FE9
0ADD0:  MOVLW  09
0ADD2:  ADDWFC 03,W
0ADD4:  MOVWF  FEA
0ADD6:  MOVLW  32
0ADD8:  ADDWF  x1A,W
0ADDA:  MOVWF  x1D
0ADDC:  MOVFF  FF2,C1E
0ADE0:  BCF    FF2.7
0ADE2:  CLRF   FAA
0ADE4:  MOVFF  C1D,FA9
0ADE8:  BCF    FA6.6
0ADEA:  BCF    FA6.7
0ADEC:  BSF    FA6.0
0ADEE:  MOVF   FA8,W
0ADF0:  BTFSC  x1E.7
0ADF2:  BSF    FF2.7
0ADF4:  MOVWF  FEF
0ADF6:  INCF   x1A,F
0ADF8:  BRA    ADC2
....................    }
....................    sms_phonenumber[m] = '\0' ; // end string
0ADFA:  CLRF   03
0ADFC:  MOVF   x1A,W
0ADFE:  ADDLW  8B
0AE00:  MOVWF  FE9
0AE02:  MOVLW  09
0AE04:  ADDWFC 03,W
0AE06:  MOVWF  FEA
0AE08:  CLRF   FEF
....................    delay_ms(500);
0AE0A:  MOVLW  02
0AE0C:  MOVWF  x1B
0AE0E:  MOVLW  FA
0AE10:  MOVWF  x24
0AE12:  MOVLB  0
0AE14:  CALL   0936
0AE18:  MOVLB  C
0AE1A:  DECFSZ x1B,F
0AE1C:  BRA    AE0E
....................  
....................    while(TRUE)
....................    {
.................... 
....................       
....................       restart_wdt();
0AE1E:  CLRWDT
.................... 
....................       if(recieve_completed == 1)
0AE20:  BTFSS  30.5
0AE22:  BRA    AE2E
....................       {
....................          Modbus_Function();
0AE24:  MOVLB  0
0AE26:  GOTO   3690
....................          recieve_completed = 0;
0AE2A:  BCF    30.5
0AE2C:  MOVLB  C
....................       }
....................       
.................... 
....................    /*
....................       if(input(PSyncR) != SyncFlag)      //Check Sync
....................       {
....................          FlashingFlag = input(PSyncR);
....................          SyncFlag = input(PSyncR);
....................          output_bit(PSyncS,SyncFlag);
....................          SyncStatus = 1;
....................          Synctimer = 200;
....................       }
....................    */
....................    
.................... 
....................       check_ack();
0AE2E:  MOVLB  0
0AE30:  CALL   3280
....................       check_reset();
0AE34:  CALL   33CE
....................       check_test();
0AE38:  GOTO   A45C
....................       
....................       restart_wdt();
0AE3C:  CLRWDT
....................       
....................       /*
....................       if((FaultDelayTime == 0)||(FaultDelayTime == 0xff))
....................       {
....................          Read_input(); restart_wdt();
....................       }
....................       else
....................       {
....................          if(ReadIn_flag)
....................          {
....................                ReadIn_flag = 0;
....................                Read_input(); restart_wdt();
....................          }
....................       }
....................       */
....................       Read_input(); restart_wdt();// Must be first
0AE3E:  CALL   2060
0AE42:  CLRWDT
....................       Anal_Function(); restart_wdt();
0AE44:  CALL   6C54
0AE48:  CLRWDT
....................       Send_Ouput(); restart_wdt();
0AE4A:  CALL   2AC4
0AE4E:  CLRWDT
....................       
....................       //Driver595(); restart_wdt();
....................       
....................       
....................       output_toggle(PIN_A0);
0AE50:  BCF    F92.0
0AE52:  BTG    F89.0
....................       
....................       
....................       if(RefreshConfigData)
0AE54:  BTFSS  30.4
0AE56:  BRA    AF42
....................       {
....................          RefreshConfigData =0;
0AE58:  BCF    30.4
....................          //Read_Config();
....................          //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................   
....................          IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
0AE5A:  MOVLB  C
0AE5C:  CLRF   x1B
0AE5E:  SETF   x1C
0AE60:  MOVLB  0
0AE62:  CALL   0A2E
....................          IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
0AE66:  MOVLB  C
0AE68:  CLRF   x1B
0AE6A:  SETF   x1C
0AE6C:  MOVLB  0
0AE6E:  CALL   0A40
....................          IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
0AE72:  MOVLW  02
0AE74:  MOVLB  C
0AE76:  MOVWF  x1B
0AE78:  SETF   x1C
0AE7A:  MOVLB  0
0AE7C:  CALL   0A2E
....................          IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input 
0AE80:  MOVLW  02
0AE82:  MOVLB  C
0AE84:  MOVWF  x1B
0AE86:  SETF   x1C
0AE88:  MOVLB  0
0AE8A:  CALL   0A40
....................          //  jj
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
0AE8E:  MOVLB  C
0AE90:  CLRF   x25
0AE92:  MOVLW  06
0AE94:  MOVWF  x26
0AE96:  SETF   x27
0AE98:  MOVLB  0
0AE9A:  CALL   0966
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
0AE9E:  MOVLB  C
0AEA0:  CLRF   x25
0AEA2:  MOVLW  16
0AEA4:  MOVWF  x26
0AEA6:  SETF   x27
0AEA8:  MOVLB  0
0AEAA:  CALL   0966
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
0AEAE:  MOVLW  02
0AEB0:  MOVLB  C
0AEB2:  MOVWF  x25
0AEB4:  MOVLW  06
0AEB6:  MOVWF  x26
0AEB8:  SETF   x27
0AEBA:  MOVLB  0
0AEBC:  CALL   0966
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
0AEC0:  MOVLW  02
0AEC2:  MOVLB  C
0AEC4:  MOVWF  x25
0AEC6:  MOVLW  16
0AEC8:  MOVWF  x26
0AECA:  SETF   x27
0AECC:  MOVLB  0
0AECE:  CALL   0966
....................          //  jj
....................          IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
0AED2:  MOVLW  04
0AED4:  MOVLB  C
0AED6:  MOVWF  x1B
0AED8:  CLRF   x1C
0AEDA:  MOVLB  0
0AEDC:  CALL   0A2E
....................          IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
0AEE0:  MOVLW  04
0AEE2:  MOVLB  C
0AEE4:  MOVWF  x1B
0AEE6:  CLRF   x1C
0AEE8:  MOVLB  0
0AEEA:  CALL   0A40
....................          IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
0AEEE:  MOVLW  06
0AEF0:  MOVLB  C
0AEF2:  MOVWF  x1B
0AEF4:  CLRF   x1C
0AEF6:  MOVLB  0
0AEF8:  CALL   0A2E
....................          IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
0AEFC:  MOVLW  06
0AEFE:  MOVLB  C
0AF00:  MOVWF  x1B
0AF02:  CLRF   x1C
0AF04:  MOVLB  0
0AF06:  CALL   0A40
....................          IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
0AF0A:  MOVLW  08
0AF0C:  MOVLB  C
0AF0E:  MOVWF  x1B
0AF10:  CLRF   x1C
0AF12:  MOVLB  0
0AF14:  CALL   0A2E
....................          IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
0AF18:  MOVLW  08
0AF1A:  MOVLB  C
0AF1C:  MOVWF  x1B
0AF1E:  CLRF   x1C
0AF20:  MOVLB  0
0AF22:  CALL   0A40
....................          IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0AF26:  MOVLW  0A
0AF28:  MOVLB  C
0AF2A:  MOVWF  x1B
0AF2C:  CLRF   x1C
0AF2E:  MOVLB  0
0AF30:  CALL   0A2E
....................          IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
0AF34:  MOVLW  0A
0AF36:  MOVLB  C
0AF38:  MOVWF  x1B
0AF3A:  CLRF   x1C
0AF3C:  MOVLB  0
0AF3E:  CALL   0A40
....................          
....................         
....................       }
....................       
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
0AF42:  MOVLB  C
0AF44:  CLRF   x23
0AF46:  SETF   x24
0AF48:  MOVLB  0
0AF4A:  CALL   2A98
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
0AF4E:  MOVLB  C
0AF50:  CLRF   x23
0AF52:  SETF   x24
0AF54:  MOVLB  0
0AF56:  CALL   2AAE
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
0AF5A:  MOVLW  02
0AF5C:  MOVLB  C
0AF5E:  MOVWF  x23
0AF60:  SETF   x24
0AF62:  MOVLB  0
0AF64:  CALL   2A98
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
0AF68:  MOVLW  02
0AF6A:  MOVLB  C
0AF6C:  MOVWF  x23
0AF6E:  SETF   x24
0AF70:  MOVLB  0
0AF72:  CALL   2AAE
0AF76:  MOVLB  C
0AF78:  BRA    AE1E
....................       
....................       
....................       /*        
....................       if(outmcp23)
....................       {
....................          outmcp23 = 0;
....................          FlashingRateTime = 1; //100 time per sec.
....................          
....................          MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_0);
....................          restart_wdt();
....................                   
....................          MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
....................          restart_wdt();
....................                 
....................          IO_OUTPUT_A(IO_DEVICE_1, MCP23s17_Ip_dat);
....................          restart_wdt();
....................          
....................          IO_OUTPUT_B(IO_DEVICE_1, MCP23s17_Ip_dat);
....................          restart_wdt();   
....................         
....................       }
....................       */
....................    }
....................    
.................... }
0AF7A:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
