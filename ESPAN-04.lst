CCS PCH C Compiler, Version 5.091, 5967               12-¡.Â.-21 00:10

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_16 - Delay - SP - SMD - SMS\ESPAN-04.lst

               ROM used:   45064 bytes (69%)
                           Largest free fragment is 20468
               RAM used:   3103 (80%) at main() level
                           3125 (80%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   A574
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.1
00056:  GOTO   0060
0005A:  BTFSC  F9E.1
0005C:  GOTO   0596
00060:  BTFSS  F9D.5
00062:  GOTO   006C
00066:  BTFSC  F9E.5
00068:  GOTO   0586
0006C:  MOVFF  0E,00
00070:  MOVFF  0F,01
00074:  MOVFF  10,02
00078:  MOVFF  11,03
0007C:  MOVFF  0C,FE9
00080:  MOVFF  07,FEA
00084:  BSF    07.7
00086:  MOVFF  08,FE1
0008A:  MOVFF  09,FE2
0008E:  MOVFF  0A,FD9
00092:  MOVFF  0B,FDA
00096:  MOVFF  12,FF3
0009A:  MOVFF  13,FF4
0009E:  MOVFF  14,FFA
000A2:  MOVFF  15,FF5
000A6:  MOVFF  16,FF6
000AA:  MOVFF  17,FF7
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
000BA:  CLRF   FF7
000BC:  ADDLW  CA
000BE:  MOVWF  FF6
000C0:  MOVLW  00
000C2:  ADDWFC FF7,F
000C4:  TBLRD*+
000C6:  MOVF   FF5,W
000C8:  RETURN 0
000CA:  DATA 00,C1
000CC:  DATA 81,40
000CE:  DATA 01,C0
000D0:  DATA 80,41
000D2:  DATA 01,C0
000D4:  DATA 80,41
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 00,C1
000E0:  DATA 81,40
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 01,C0
000EC:  DATA 80,41
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 00,C1
000F4:  DATA 81,40
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 01,C0
00100:  DATA 80,41
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 00,C1
00110:  DATA 81,40
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 01,C0
00120:  DATA 80,41
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 00,C1
0012C:  DATA 81,40
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 01,C0
00134:  DATA 80,41
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 00,C1
00140:  DATA 81,40
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 01,C0
0014C:  DATA 80,41
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 00,C1
00154:  DATA 81,40
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 01,C0
00160:  DATA 80,41
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 00,C1
0016C:  DATA 81,40
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 01,C0
00174:  DATA 80,41
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 00,C1
00180:  DATA 81,40
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 01,C0
00190:  DATA 80,41
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 00,C1
001A0:  DATA 81,40
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 01,C0
001AC:  DATA 80,41
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 00,C1
001B4:  DATA 81,40
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 01,C0
001C0:  DATA 80,41
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  CLRF   FF7
001CC:  ADDLW  DA
001CE:  MOVWF  FF6
001D0:  MOVLW  01
001D2:  ADDWFC FF7,F
001D4:  TBLRD*+
001D6:  MOVF   FF5,W
001D8:  RETURN 0
001DA:  DATA 00,C0
001DC:  DATA C1,01
001DE:  DATA C3,03
001E0:  DATA 02,C2
001E2:  DATA C6,06
001E4:  DATA 07,C7
001E6:  DATA 05,C5
001E8:  DATA C4,04
001EA:  DATA CC,0C
001EC:  DATA 0D,CD
001EE:  DATA 0F,CF
001F0:  DATA CE,0E
001F2:  DATA 0A,CA
001F4:  DATA CB,0B
001F6:  DATA C9,09
001F8:  DATA 08,C8
001FA:  DATA D8,18
001FC:  DATA 19,D9
001FE:  DATA 1B,DB
00200:  DATA DA,1A
00202:  DATA 1E,DE
00204:  DATA DF,1F
00206:  DATA DD,1D
00208:  DATA 1C,DC
0020A:  DATA 14,D4
0020C:  DATA D5,15
0020E:  DATA D7,17
00210:  DATA 16,D6
00212:  DATA D2,12
00214:  DATA 13,D3
00216:  DATA 11,D1
00218:  DATA D0,10
0021A:  DATA F0,30
0021C:  DATA 31,F1
0021E:  DATA 33,F3
00220:  DATA F2,32
00222:  DATA 36,F6
00224:  DATA F7,37
00226:  DATA F5,35
00228:  DATA 34,F4
0022A:  DATA 3C,FC
0022C:  DATA FD,3D
0022E:  DATA FF,3F
00230:  DATA 3E,FE
00232:  DATA FA,3A
00234:  DATA 3B,FB
00236:  DATA 39,F9
00238:  DATA F8,38
0023A:  DATA 28,E8
0023C:  DATA E9,29
0023E:  DATA EB,2B
00240:  DATA 2A,EA
00242:  DATA EE,2E
00244:  DATA 2F,EF
00246:  DATA 2D,ED
00248:  DATA EC,2C
0024A:  DATA E4,24
0024C:  DATA 25,E5
0024E:  DATA 27,E7
00250:  DATA E6,26
00252:  DATA 22,E2
00254:  DATA E3,23
00256:  DATA E1,21
00258:  DATA 20,E0
0025A:  DATA A0,60
0025C:  DATA 61,A1
0025E:  DATA 63,A3
00260:  DATA A2,62
00262:  DATA 66,A6
00264:  DATA A7,67
00266:  DATA A5,65
00268:  DATA 64,A4
0026A:  DATA 6C,AC
0026C:  DATA AD,6D
0026E:  DATA AF,6F
00270:  DATA 6E,AE
00272:  DATA AA,6A
00274:  DATA 6B,AB
00276:  DATA 69,A9
00278:  DATA A8,68
0027A:  DATA 78,B8
0027C:  DATA B9,79
0027E:  DATA BB,7B
00280:  DATA 7A,BA
00282:  DATA BE,7E
00284:  DATA 7F,BF
00286:  DATA 7D,BD
00288:  DATA BC,7C
0028A:  DATA B4,74
0028C:  DATA 75,B5
0028E:  DATA 77,B7
00290:  DATA B6,76
00292:  DATA 72,B2
00294:  DATA B3,73
00296:  DATA B1,71
00298:  DATA 70,B0
0029A:  DATA 50,90
0029C:  DATA 91,51
0029E:  DATA 93,53
002A0:  DATA 52,92
002A2:  DATA 96,56
002A4:  DATA 57,97
002A6:  DATA 55,95
002A8:  DATA 94,54
002AA:  DATA 9C,5C
002AC:  DATA 5D,9D
002AE:  DATA 5F,9F
002B0:  DATA 9E,5E
002B2:  DATA 5A,9A
002B4:  DATA 9B,5B
002B6:  DATA 99,59
002B8:  DATA 58,98
002BA:  DATA 88,48
002BC:  DATA 49,89
002BE:  DATA 4B,8B
002C0:  DATA 8A,4A
002C2:  DATA 4E,8E
002C4:  DATA 8F,4F
002C6:  DATA 8D,4D
002C8:  DATA 4C,8C
002CA:  DATA 44,84
002CC:  DATA 85,45
002CE:  DATA 87,47
002D0:  DATA 46,86
002D2:  DATA 82,42
002D4:  DATA 43,83
002D6:  DATA 41,81
002D8:  DATA 80,40
*
00628:  DATA 41,54
0062A:  DATA 2B,43
0062C:  DATA 4D,47
0062E:  DATA 46,3D
00630:  DATA 31,00
00632:  DATA 41,54
00634:  DATA 2B,43
00636:  DATA 4D,47
00638:  DATA 53,3D
0063A:  DATA 22,00
0063C:  DATA 41,54
0063E:  DATA 2B,43
00640:  DATA 4D,47
00642:  DATA 46,3D
00644:  DATA 31,00
00646:  DATA 41,54
00648:  DATA 2B,43
0064A:  DATA 4D,47
0064C:  DATA 53,3D
0064E:  DATA 22,00
00650:  DATA 41,54
00652:  DATA 2B,43
00654:  DATA 4D,47
00656:  DATA 46,3D
00658:  DATA 31,00
0065A:  DATA 41,54
0065C:  DATA 2B,43
0065E:  DATA 4D,47
00660:  DATA 53,3D
00662:  DATA 22,00
00664:  DATA 41,54
00666:  DATA 2B,43
00668:  DATA 4D,47
0066A:  DATA 46,3D
0066C:  DATA 31,00
0066E:  DATA 41,54
00670:  DATA 2B,43
00672:  DATA 4D,47
00674:  DATA 53,3D
00676:  DATA 22,00
00678:  DATA 41,54
0067A:  DATA 2B,43
0067C:  DATA 4D,47
0067E:  DATA 46,3D
00680:  DATA 31,00
00682:  DATA 41,54
00684:  DATA 2B,43
00686:  DATA 4D,47
00688:  DATA 53,3D
0068A:  DATA 22,00
0068C:  DATA 41,54
0068E:  DATA 2B,43
00690:  DATA 4D,47
00692:  DATA 46,3D
00694:  DATA 31,00
00696:  DATA 41,54
00698:  DATA 2B,43
0069A:  DATA 4D,47
0069C:  DATA 53,3D
0069E:  DATA 22,00
006A0:  DATA 41,54
006A2:  DATA 2B,43
006A4:  DATA 4D,47
006A6:  DATA 46,3D
006A8:  DATA 31,00
006AA:  DATA 41,54
006AC:  DATA 2B,43
006AE:  DATA 4D,47
006B0:  DATA 53,3D
006B2:  DATA 22,00
006B4:  DATA 41,54
006B6:  DATA 2B,43
006B8:  DATA 4D,47
006BA:  DATA 46,3D
006BC:  DATA 31,00
006BE:  DATA 41,54
006C0:  DATA 2B,43
006C2:  DATA 4D,47
006C4:  DATA 53,3D
006C6:  DATA 22,00
006C8:  DATA 41,54
006CA:  DATA 2B,43
006CC:  DATA 4D,47
006CE:  DATA 46,3D
006D0:  DATA 31,00
006D2:  DATA 41,54
006D4:  DATA 2B,43
006D6:  DATA 4D,47
006D8:  DATA 53,3D
006DA:  DATA 22,00
006DC:  DATA 41,54
006DE:  DATA 2B,43
006E0:  DATA 4D,47
006E2:  DATA 46,3D
006E4:  DATA 31,00
006E6:  DATA 41,54
006E8:  DATA 2B,43
006EA:  DATA 4D,47
006EC:  DATA 53,3D
006EE:  DATA 22,00
006F0:  DATA 41,54
006F2:  DATA 2B,43
006F4:  DATA 4D,47
006F6:  DATA 46,3D
006F8:  DATA 31,00
006FA:  DATA 41,54
006FC:  DATA 2B,43
006FE:  DATA 4D,47
00700:  DATA 53,3D
00702:  DATA 22,00
00704:  DATA 41,54
00706:  DATA 2B,43
00708:  DATA 4D,47
0070A:  DATA 46,3D
0070C:  DATA 31,00
0070E:  DATA 41,54
00710:  DATA 2B,43
00712:  DATA 4D,47
00714:  DATA 53,3D
00716:  DATA 22,00
00718:  DATA 41,54
0071A:  DATA 2B,43
0071C:  DATA 4D,47
0071E:  DATA 46,3D
00720:  DATA 31,00
00722:  DATA 41,54
00724:  DATA 2B,43
00726:  DATA 4D,47
00728:  DATA 53,3D
0072A:  DATA 22,00
0072C:  DATA 41,54
0072E:  DATA 2B,43
00730:  DATA 4D,47
00732:  DATA 46,3D
00734:  DATA 31,00
00736:  DATA 41,54
00738:  DATA 2B,43
0073A:  DATA 4D,47
0073C:  DATA 53,3D
0073E:  DATA 22,00
00740:  DATA 41,54
00742:  DATA 2B,43
00744:  DATA 4D,47
00746:  DATA 46,3D
00748:  DATA 31,00
0074A:  DATA 41,54
0074C:  DATA 2B,43
0074E:  DATA 4D,47
00750:  DATA 53,3D
00752:  DATA 22,00
00754:  DATA 41,54
00756:  DATA 2B,43
00758:  DATA 4D,47
0075A:  DATA 46,3D
0075C:  DATA 31,00
0075E:  DATA 41,54
00760:  DATA 2B,43
00762:  DATA 4D,47
00764:  DATA 53,3D
00766:  DATA 22,00
00768:  DATA 41,54
0076A:  DATA 2B,43
0076C:  DATA 4D,47
0076E:  DATA 46,3D
00770:  DATA 31,00
00772:  DATA 41,54
00774:  DATA 2B,43
00776:  DATA 4D,47
00778:  DATA 53,3D
0077A:  DATA 22,00
0077C:  DATA 41,54
0077E:  DATA 2B,43
00780:  DATA 4D,47
00782:  DATA 46,3D
00784:  DATA 31,00
00786:  DATA 41,54
00788:  DATA 2B,43
0078A:  DATA 4D,47
0078C:  DATA 53,3D
0078E:  DATA 22,00
00790:  DATA 41,54
00792:  DATA 2B,43
00794:  DATA 4D,47
00796:  DATA 46,3D
00798:  DATA 31,00
0079A:  DATA 41,54
0079C:  DATA 2B,43
0079E:  DATA 4D,47
007A0:  DATA 53,3D
007A2:  DATA 22,00
007A4:  DATA 41,54
007A6:  DATA 2B,43
007A8:  DATA 4D,47
007AA:  DATA 46,3D
007AC:  DATA 31,00
007AE:  DATA 41,54
007B0:  DATA 2B,43
007B2:  DATA 4D,47
007B4:  DATA 53,3D
007B6:  DATA 22,00
007B8:  DATA 41,54
007BA:  DATA 2B,43
007BC:  DATA 4D,47
007BE:  DATA 46,3D
007C0:  DATA 31,00
007C2:  DATA 41,54
007C4:  DATA 2B,43
007C6:  DATA 4D,47
007C8:  DATA 53,3D
007CA:  DATA 22,00
007CC:  DATA 41,54
007CE:  DATA 2B,43
007D0:  DATA 4D,47
007D2:  DATA 46,3D
007D4:  DATA 31,00
007D6:  DATA 41,54
007D8:  DATA 2B,43
007DA:  DATA 4D,47
007DC:  DATA 53,3D
007DE:  DATA 22,00
007E0:  DATA 41,54
007E2:  DATA 2B,43
007E4:  DATA 4D,47
007E6:  DATA 46,3D
007E8:  DATA 31,00
007EA:  DATA 41,54
007EC:  DATA 2B,43
007EE:  DATA 4D,47
007F0:  DATA 53,3D
007F2:  DATA 22,00
007F4:  DATA 41,54
007F6:  DATA 2B,43
007F8:  DATA 4D,47
007FA:  DATA 46,3D
007FC:  DATA 31,00
007FE:  DATA 41,54
00800:  DATA 2B,43
00802:  DATA 4D,47
00804:  DATA 53,3D
00806:  DATA 22,00
00808:  DATA 41,54
0080A:  DATA 2B,43
0080C:  DATA 4D,47
0080E:  DATA 46,3D
00810:  DATA 31,00
00812:  DATA 41,54
00814:  DATA 2B,43
00816:  DATA 4D,47
00818:  DATA 53,3D
0081A:  DATA 22,00
0081C:  DATA 41,54
0081E:  DATA 2B,43
00820:  DATA 4D,47
00822:  DATA 46,3D
00824:  DATA 31,00
00826:  DATA 41,54
00828:  DATA 2B,43
0082A:  DATA 4D,47
0082C:  DATA 53,3D
0082E:  DATA 22,00
00830:  DATA 41,54
00832:  DATA 2B,43
00834:  DATA 4D,47
00836:  DATA 46,3D
00838:  DATA 31,00
0083A:  DATA 41,54
0083C:  DATA 2B,43
0083E:  DATA 4D,47
00840:  DATA 53,3D
00842:  DATA 22,00
00844:  DATA 41,54
00846:  DATA 2B,43
00848:  DATA 4D,47
0084A:  DATA 46,3D
0084C:  DATA 31,00
0084E:  DATA 41,54
00850:  DATA 2B,43
00852:  DATA 4D,47
00854:  DATA 53,3D
00856:  DATA 22,00
00858:  DATA 41,54
0085A:  DATA 2B,43
0085C:  DATA 4D,47
0085E:  DATA 46,3D
00860:  DATA 31,00
00862:  DATA 41,54
00864:  DATA 2B,43
00866:  DATA 4D,47
00868:  DATA 53,3D
0086A:  DATA 22,00
0086C:  DATA 41,54
0086E:  DATA 2B,43
00870:  DATA 4D,47
00872:  DATA 46,3D
00874:  DATA 31,00
00876:  DATA 41,54
00878:  DATA 2B,43
0087A:  DATA 4D,47
0087C:  DATA 53,3D
0087E:  DATA 22,00
00880:  DATA 41,54
00882:  DATA 2B,43
00884:  DATA 4D,47
00886:  DATA 46,3D
00888:  DATA 31,00
0088A:  DATA 41,54
0088C:  DATA 2B,43
0088E:  DATA 4D,47
00890:  DATA 53,3D
00892:  DATA 22,00
00894:  DATA 41,54
00896:  DATA 2B,43
00898:  DATA 4D,47
0089A:  DATA 46,3D
0089C:  DATA 31,00
0089E:  DATA 41,54
008A0:  DATA 2B,43
008A2:  DATA 4D,47
008A4:  DATA 53,3D
008A6:  DATA 22,00
008A8:  DATA 41,54
008AA:  DATA 2B,43
008AC:  DATA 4D,47
008AE:  DATA 53,3D
008B0:  DATA 22,00
008B2:  DATA 41,54
008B4:  DATA 2B,43
008B6:  DATA 4D,47
008B8:  DATA 53,3D
008BA:  DATA 22,00
008BC:  DATA 41,54
008BE:  DATA 2B,43
008C0:  DATA 4D,47
008C2:  DATA 53,3D
008C4:  DATA 22,00
008C6:  DATA 41,54
008C8:  DATA 2B,43
008CA:  DATA 4D,47
008CC:  DATA 53,3D
008CE:  DATA 22,00
008D0:  DATA 41,54
008D2:  DATA 2B,43
008D4:  DATA 4D,47
008D6:  DATA 53,3D
008D8:  DATA 22,00
008DA:  DATA 41,54
008DC:  DATA 2B,43
008DE:  DATA 4D,47
008E0:  DATA 53,3D
008E2:  DATA 22,00
008E4:  DATA 41,54
008E6:  DATA 2B,43
008E8:  DATA 4D,47
008EA:  DATA 53,3D
008EC:  DATA 22,00
008EE:  DATA 41,54
008F0:  DATA 2B,43
008F2:  DATA 4D,47
008F4:  DATA 53,3D
008F6:  DATA 22,00
008F8:  DATA 41,54
008FA:  DATA 2B,43
008FC:  DATA 4D,47
008FE:  DATA 53,3D
00900:  DATA 22,00
00902:  DATA 41,54
00904:  DATA 2B,43
00906:  DATA 4D,47
00908:  DATA 53,3D
0090A:  DATA 22,00
0090C:  DATA 41,54
0090E:  DATA 2B,43
00910:  DATA 4D,47
00912:  DATA 53,3D
00914:  DATA 22,00
00916:  DATA 41,54
00918:  DATA 2B,43
0091A:  DATA 4D,47
0091C:  DATA 53,3D
0091E:  DATA 22,00
00920:  DATA 41,54
00922:  DATA 2B,43
00924:  DATA 4D,47
00926:  DATA 53,3D
00928:  DATA 22,00
0092A:  DATA 41,54
0092C:  DATA 2B,43
0092E:  DATA 4D,47
00930:  DATA 53,3D
00932:  DATA 22,00
00934:  DATA 41,54
00936:  DATA 2B,43
00938:  DATA 4D,47
0093A:  DATA 53,3D
0093C:  DATA 22,00
0093E:  DATA 41,54
00940:  DATA 2B,43
00942:  DATA 4D,47
00944:  DATA 53,3D
00946:  DATA 22,00
00948:  DATA 41,54
0094A:  DATA 2B,43
0094C:  DATA 4D,47
0094E:  DATA 46,3D
00950:  DATA 31,00
*
01F84:  MOVLB  C
01F86:  MOVF   x2C,W
01F88:  ANDLW  07
01F8A:  MOVWF  00
01F8C:  RRCF   x2C,W
01F8E:  MOVWF  01
01F90:  RRCF   01,F
01F92:  RRCF   01,F
01F94:  MOVLW  1F
01F96:  ANDWF  01,F
01F98:  MOVF   01,W
01F9A:  ADDWF  x2D,W
01F9C:  MOVWF  FE9
01F9E:  MOVLW  00
01FA0:  ADDWFC x2E,W
01FA2:  MOVWF  FEA
01FA4:  MOVFF  FEF,01
01FA8:  INCF   00,F
01FAA:  BRA    1FAE
01FAC:  RRCF   01,F
01FAE:  DECFSZ 00,F
01FB0:  BRA    1FAC
01FB2:  MOVLW  01
01FB4:  ANDWF  01,F
01FB6:  MOVLB  0
01FB8:  RETURN 0
01FBA:  MOVLB  C
01FBC:  MOVF   x2D,W
01FBE:  MULWF  x2F
01FC0:  MOVFF  FF3,01
01FC4:  MOVFF  FF4,00
01FC8:  MULWF  x30
01FCA:  MOVF   FF3,W
01FCC:  ADDWF  00,F
01FCE:  MOVF   x2E,W
01FD0:  MULWF  x2F
01FD2:  MOVF   FF3,W
01FD4:  ADDWFC 00,W
01FD6:  MOVWF  02
01FD8:  MOVLB  0
01FDA:  RETURN 0
01FDC:  MOVLB  C
01FDE:  MOVF   x2C,W
01FE0:  ANDLW  07
01FE2:  MOVWF  00
01FE4:  RRCF   x2C,W
01FE6:  MOVWF  01
01FE8:  RRCF   01,F
01FEA:  RRCF   01,F
01FEC:  MOVLW  1F
01FEE:  ANDWF  01,F
01FF0:  MOVF   01,W
01FF2:  ADDWF  x2E,W
01FF4:  MOVWF  FE9
01FF6:  MOVLW  00
01FF8:  ADDWFC x2F,W
01FFA:  MOVWF  FEA
01FFC:  CLRF   01
01FFE:  INCF   01,F
02000:  INCF   00,F
02002:  BRA    2006
02004:  RLCF   01,F
02006:  DECFSZ 00,F
02008:  BRA    2004
0200A:  MOVF   x2D,F
0200C:  BZ    2014
0200E:  MOVF   01,W
02010:  IORWF  FEF,F
02012:  BRA    201A
02014:  COMF   01,F
02016:  MOVF   01,W
02018:  ANDWF  FEF,F
0201A:  MOVLB  0
0201C:  RETURN 0
*
029CC:  ADDWF  FE8,W
029CE:  CLRF   FF7
029D0:  RLCF   FF7,F
029D2:  ADDLW  E7
029D4:  MOVWF  FF6
029D6:  MOVLW  29
029D8:  ADDWFC FF7,F
029DA:  TBLRD*-
029DC:  MOVF   FF5,W
029DE:  MOVWF  FFA
029E0:  TBLRD*
029E2:  MOVF   FF5,W
029E4:  MOVWF  FF9
029E6:  DATA FE,22
029E8:  DATA 06,23
029EA:  DATA 0E,23
029EC:  DATA 16,23
029EE:  DATA 1E,23
029F0:  DATA 26,23
029F2:  DATA 2E,23
029F4:  DATA 36,23
029F6:  DATA 3E,23
029F8:  DATA 46,23
029FA:  DATA 4E,23
029FC:  DATA 56,23
029FE:  DATA 5E,23
02A00:  DATA 66,23
02A02:  DATA 6E,23
02A04:  DATA 76,23
02A06:  ADDWF  FE8,W
02A08:  CLRF   FF7
02A0A:  RLCF   FF7,F
02A0C:  ADDLW  21
02A0E:  MOVWF  FF6
02A10:  MOVLW  2A
02A12:  ADDWFC FF7,F
02A14:  TBLRD*-
02A16:  MOVF   FF5,W
02A18:  MOVWF  FFA
02A1A:  TBLRD*
02A1C:  MOVF   FF5,W
02A1E:  MOVWF  FF9
02A20:  DATA 5E,24
02A22:  DATA 66,24
02A24:  DATA 6E,24
02A26:  DATA 76,24
02A28:  DATA 7E,24
02A2A:  DATA 86,24
02A2C:  DATA 8E,24
02A2E:  DATA 96,24
02A30:  DATA 9E,24
02A32:  DATA A6,24
02A34:  DATA AE,24
02A36:  DATA B6,24
02A38:  DATA BE,24
02A3A:  DATA C6,24
02A3C:  DATA CE,24
02A3E:  DATA D6,24
02A40:  ADDWF  FE8,W
02A42:  CLRF   FF7
02A44:  RLCF   FF7,F
02A46:  ADDLW  5B
02A48:  MOVWF  FF6
02A4A:  MOVLW  2A
02A4C:  ADDWFC FF7,F
02A4E:  TBLRD*-
02A50:  MOVF   FF5,W
02A52:  MOVWF  FFA
02A54:  TBLRD*
02A56:  MOVF   FF5,W
02A58:  MOVWF  FF9
02A5A:  DATA F2,25
02A5C:  DATA FA,25
02A5E:  DATA 02,26
02A60:  DATA 0A,26
02A62:  DATA 12,26
02A64:  DATA 1A,26
02A66:  DATA 22,26
02A68:  DATA 2A,26
02A6A:  DATA 32,26
02A6C:  DATA 3A,26
02A6E:  DATA 42,26
02A70:  DATA 4A,26
02A72:  DATA 52,26
02A74:  DATA 5A,26
02A76:  DATA 62,26
02A78:  DATA 6A,26
02A7A:  ADDWF  FE8,W
02A7C:  CLRF   FF7
02A7E:  RLCF   FF7,F
02A80:  ADDLW  95
02A82:  MOVWF  FF6
02A84:  MOVLW  2A
02A86:  ADDWFC FF7,F
02A88:  TBLRD*-
02A8A:  MOVF   FF5,W
02A8C:  MOVWF  FFA
02A8E:  TBLRD*
02A90:  MOVF   FF5,W
02A92:  MOVWF  FF9
02A94:  DATA 50,27
02A96:  DATA 58,27
02A98:  DATA 60,27
02A9A:  DATA 68,27
02A9C:  DATA 70,27
02A9E:  DATA 78,27
02AA0:  DATA 80,27
02AA2:  DATA 88,27
02AA4:  DATA 90,27
02AA6:  DATA 98,27
02AA8:  DATA A0,27
02AAA:  DATA A8,27
02AAC:  DATA B0,27
02AAE:  DATA B8,27
02AB0:  DATA C0,27
02AB2:  DATA C8,27
*
02ED0:  TBLRD*+
02ED2:  MOVF   FF5,F
02ED4:  BZ    2EEE
02ED6:  MOVFF  FF6,C23
02EDA:  MOVFF  FF7,C24
02EDE:  MOVFF  FF5,C25
02EE2:  RCALL  2E8A
02EE4:  MOVFF  C23,FF6
02EE8:  MOVFF  C24,FF7
02EEC:  BRA    2ED0
02EEE:  RETURN 0
*
06242:  MOVF   FEF,F
06244:  BZ    6266
06246:  MOVFF  FEA,C24
0624A:  MOVFF  FE9,C23
0624E:  MOVFF  FEF,C25
06252:  CALL   2E8A
06256:  MOVFF  C24,FEA
0625A:  MOVFF  C23,FE9
0625E:  INCF   FE9,F
06260:  BTFSC  FD8.2
06262:  INCF   FEA,F
06264:  BRA    6242
06266:  RETURN 0
*
0AF98:  ADDWF  FE8,W
0AF9A:  CLRF   FF7
0AF9C:  RLCF   FF7,F
0AF9E:  ADDLW  B3
0AFA0:  MOVWF  FF6
0AFA2:  MOVLW  AF
0AFA4:  ADDWFC FF7,F
0AFA6:  TBLRD*-
0AFA8:  MOVF   FF5,W
0AFAA:  MOVWF  FFA
0AFAC:  TBLRD*
0AFAE:  MOVF   FF5,W
0AFB0:  MOVWF  FF9
0AFB2:  DATA 60,AC
0AFB4:  DATA 68,AC
0AFB6:  DATA 70,AC
0AFB8:  DATA 78,AC
0AFBA:  DATA 80,AC
0AFBC:  DATA 88,AC
0AFBE:  DATA 90,AC
0AFC0:  DATA 98,AC
0AFC2:  DATA A0,AC
0AFC4:  DATA A8,AC
0AFC6:  DATA B0,AC
0AFC8:  DATA B8,AC
0AFCA:  DATA C0,AC
0AFCC:  DATA C8,AC
0AFCE:  DATA D0,AC
0AFD0:  DATA D8,AC
0AFD2:  ADDWF  FE8,W
0AFD4:  CLRF   FF7
0AFD6:  RLCF   FF7,F
0AFD8:  ADDLW  ED
0AFDA:  MOVWF  FF6
0AFDC:  MOVLW  AF
0AFDE:  ADDWFC FF7,F
0AFE0:  TBLRD*-
0AFE2:  MOVF   FF5,W
0AFE4:  MOVWF  FFA
0AFE6:  TBLRD*
0AFE8:  MOVF   FF5,W
0AFEA:  MOVWF  FF9
0AFEC:  DATA F8,AC
0AFEE:  DATA 00,AD
0AFF0:  DATA 08,AD
0AFF2:  DATA 10,AD
0AFF4:  DATA 18,AD
0AFF6:  DATA 20,AD
0AFF8:  DATA 28,AD
0AFFA:  DATA 30,AD
0AFFC:  DATA 38,AD
0AFFE:  DATA 40,AD
0B000:  DATA 48,AD
0B002:  DATA 50,AD
0B004:  DATA 58,AD
0B006:  DATA 60,AD
0B008:  DATA 68,AD
0B00A:  DATA 70,AD
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#device icd = true
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
00952:  MOVLW  0C
00954:  MOVWF  FEA
00956:  MOVLW  24
00958:  MOVWF  FE9
0095A:  MOVF   FEF,W
0095C:  BZ    0980
0095E:  MOVLW  05
00960:  MOVWF  01
00962:  MOVLW  BF
00964:  MOVWF  00
00966:  CLRWDT
00968:  DECFSZ 00,F
0096A:  BRA    0966
0096C:  DECFSZ 01,F
0096E:  BRA    0962
00970:  MOVLW  2E
00972:  MOVWF  00
00974:  DECFSZ 00,F
00976:  BRA    0974
00978:  NOP   
0097A:  CLRWDT
0097C:  DECFSZ FEF,F
0097E:  BRA    095E
00980:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR    0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP     0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW    0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL    0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
009B4:  BCF    F92.5
009B6:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
009B8:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
009BA:  MOVLB  C
009BC:  CLRF   x25
009BE:  MOVLW  0A
009C0:  MOVWF  x26
009C2:  MOVLW  AA
009C4:  MOVWF  x27
009C6:  MOVLB  0
009C8:  RCALL  0982
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
009CA:  MOVLW  02
009CC:  MOVLB  C
009CE:  MOVWF  x25
009D0:  MOVLW  0A
009D2:  MOVWF  x26
009D4:  MOVLW  AA
009D6:  MOVWF  x27
009D8:  MOVLB  0
009DA:  RCALL  0982
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
009DC:  MOVLW  04
009DE:  MOVLB  C
009E0:  MOVWF  x25
009E2:  MOVLW  0A
009E4:  MOVWF  x26
009E6:  MOVLW  AA
009E8:  MOVWF  x27
009EA:  MOVLB  0
009EC:  RCALL  0982
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
009EE:  MOVLW  06
009F0:  MOVLB  C
009F2:  MOVWF  x25
009F4:  MOVLW  0A
009F6:  MOVWF  x26
009F8:  MOVLW  AA
009FA:  MOVWF  x27
009FC:  MOVLB  0
009FE:  RCALL  0982
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
00A00:  MOVLW  08
00A02:  MOVLB  C
00A04:  MOVWF  x25
00A06:  MOVLW  0A
00A08:  MOVWF  x26
00A0A:  MOVLW  AA
00A0C:  MOVWF  x27
00A0E:  MOVLB  0
00A10:  RCALL  0982
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
00A12:  MOVLW  0A
00A14:  MOVLB  C
00A16:  MOVWF  x25
00A18:  MOVWF  x26
00A1A:  MOVLW  AA
00A1C:  MOVWF  x27
00A1E:  MOVLB  0
00A20:  RCALL  0982
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
00A22:  MOVLW  0C
00A24:  MOVLB  C
00A26:  MOVWF  x25
00A28:  MOVLW  0A
00A2A:  MOVWF  x26
00A2C:  MOVLW  AA
00A2E:  MOVWF  x27
00A30:  MOVLB  0
00A32:  RCALL  0982
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
00A34:  MOVLW  0E
00A36:  MOVLB  C
00A38:  MOVWF  x25
00A3A:  MOVLW  0A
00A3C:  MOVWF  x26
00A3E:  MOVLW  AA
00A40:  MOVWF  x27
00A42:  MOVLB  0
00A44:  RCALL  0982
....................    #endif
00A46:  GOTO   A658 (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
00982:  BCF    F92.5
00984:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
00986:  MOVLB  C
00988:  MOVF   x25,W
0098A:  IORLW  40
0098C:  MOVWF  x28
0098E:  MOVF   FC9,W
00990:  MOVFF  C28,FC9
00994:  RRCF   FC7,W
00996:  BNC   0994
....................    #endif
....................    
....................    spi_write(reg);
00998:  MOVF   FC9,W
0099A:  MOVFF  C26,FC9
0099E:  RRCF   FC7,W
009A0:  BNC   099E
....................    spi_write(data);
009A2:  MOVF   FC9,W
009A4:  MOVFF  C27,FC9
009A8:  RRCF   FC7,W
009AA:  BNC   09A8
....................    
....................    output_high(IO_CS_PIN);
009AC:  BCF    F92.5
009AE:  BSF    F89.5
009B0:  MOVLB  0
009B2:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
01F14:  BCF    F92.5
01F16:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
01F18:  MOVLB  C
01F1A:  MOVF   x2B,W
01F1C:  IORLW  41
01F1E:  MOVWF  x2E
01F20:  MOVF   FC9,W
01F22:  MOVFF  C2E,FC9
01F26:  RRCF   FC7,W
01F28:  BNC   1F26
....................    #endif
....................    
....................    spi_write(reg);
01F2A:  MOVF   FC9,W
01F2C:  MOVFF  C2C,FC9
01F30:  RRCF   FC7,W
01F32:  BNC   1F30
....................    retVal = spi_read(0);
01F34:  MOVF   FC9,W
01F36:  CLRF   FC9
01F38:  RRCF   FC7,W
01F3A:  BNC   1F38
01F3C:  MOVFF  FC9,C2D
....................    
....................    output_high(IO_CS_PIN);
01F40:  BCF    F92.5
01F42:  BSF    F89.5
....................    
....................    return retVal;
01F44:  MOVFF  C2D,01
01F48:  MOVLB  0
01F4A:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
02AB4:  MOVFF  C23,C25
02AB8:  MOVLW  0A
02ABA:  MOVLB  C
02ABC:  MOVWF  x26
02ABE:  MOVFF  C24,C27
02AC2:  MOVLB  0
02AC4:  CALL   0982
....................    #endif
02AC8:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
02ACA:  MOVFF  C23,C25
02ACE:  MOVLW  1A
02AD0:  MOVLB  C
02AD2:  MOVWF  x26
02AD4:  MOVFF  C24,C27
02AD8:  MOVLB  0
02ADA:  CALL   0982
....................    #endif
02ADE:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
01F4C:  MOVFF  C29,C2B
01F50:  MOVLW  09
01F52:  MOVLB  C
01F54:  MOVWF  x2C
01F56:  MOVLB  0
01F58:  RCALL  1F14
01F5A:  MOVFF  01,C2A
....................    #endif
....................    
....................    return retVal;
01F5E:  MOVLB  C
01F60:  MOVFF  C2A,01
01F64:  MOVLB  0
01F66:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
01F68:  MOVFF  C29,C2B
01F6C:  MOVLW  19
01F6E:  MOVLB  C
01F70:  MOVWF  x2C
01F72:  MOVLB  0
01F74:  RCALL  1F14
01F76:  MOVFF  01,C2A
....................    #endif
....................    
....................    return retVal;
01F7A:  MOVLB  C
01F7C:  MOVFF  C2A,01
01F80:  MOVLB  0
01F82:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
00A4A:  MOVFF  C1B,C25
00A4E:  MOVLB  C
00A50:  CLRF   x26
00A52:  MOVFF  C1C,C27
00A56:  MOVLB  0
00A58:  RCALL  0982
....................    #endif
00A5A:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
00A5C:  MOVFF  C1B,C25
00A60:  MOVLW  10
00A62:  MOVLB  C
00A64:  MOVWF  x26
00A66:  MOVFF  C1C,C27
00A6A:  MOVLB  0
00A6C:  RCALL  0982
....................    #endif
00A6E:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... 
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... 
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... 
.................... ///#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
02F46:  BTFSS  F9E.4
02F48:  BRA    2F46
02F4A:  MOVWF  FAD
02F4C:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... 
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_B1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
*
02E8A:  BCF    F93.0
02E8C:  BCF    F8A.0
02E8E:  MOVLW  08
02E90:  MOVWF  01
02E92:  BRA    2E94
02E94:  NOP   
02E96:  BSF    01.7
02E98:  BRA    2EBA
02E9A:  BCF    01.7
02E9C:  MOVLB  C
02E9E:  RRCF   x25,F
02EA0:  MOVLB  0
02EA2:  BTFSC  FD8.0
02EA4:  BSF    F8A.0
02EA6:  BTFSS  FD8.0
02EA8:  BCF    F8A.0
02EAA:  BSF    01.6
02EAC:  BRA    2EBA
02EAE:  BCF    01.6
02EB0:  DECFSZ 01,F
02EB2:  BRA    2E9C
02EB4:  BRA    2EB6
02EB6:  NOP   
02EB8:  BSF    F8A.0
02EBA:  MOVLW  84
02EBC:  MOVWF  FE9
02EBE:  DECFSZ FE9,F
02EC0:  BRA    2EBE
02EC2:  BRA    2EC4
02EC4:  NOP   
02EC6:  BTFSC  01.7
02EC8:  BRA    2E9A
02ECA:  BTFSC  01.6
02ECC:  BRA    2EAE
02ECE:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... /*
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_C1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
.................... */
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... //int8 Input1_8;
.................... //int8 Input9_16;
.................... 
.................... volatile int1 functointest_f = 0;
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... int8 Output595[4];
.................... 
.................... int8 tempdata;
.................... //int8 EEP_Config = 0x00;   //
.................... //int8 NUMBER_OF_595 ;
.................... 
.................... int8 EEpDat;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_16;
.................... 
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Red1_7;
.................... int8 Red8_8;
.................... int8 Red9_15;
.................... int8 Red16_16;
.................... 
.................... int8 Green1_7;
.................... int8 Green8_8;
.................... int8 Green9_15;
.................... int8 Green16_16;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_16;
.................... 
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... 
.................... int8 Green1_8 ;
.................... int8 Green9_16 ;
.................... 
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_16 ;
.................... 
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... 
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_16 ;
.................... 
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... 
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... int8 MasterSlaveSync;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... 
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////
.................... unsigned char const addr_sq = 0x10,end_sq = 0x11,code_sq = 0x12,start_addr_hi_sq = 0x13,start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15, ubyte_lo_sq = 0x16, crc_hi_sq = 0x17,second_numofdata = 0x18, byte_count_sq = 0x19, data_sq = 0x20;      //serial sequnce
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned char RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[255];
.................... unsigned char RxD_Buff[1024];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[1024];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;   //use for calculate RxD timeout
.................... int16 index = 0x00;         //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... volatile int16 MCP23_ReadError =0;
.................... 
.................... unsigned char sms_phonenumber[15];
.................... 
.................... //unsigned char SMS_Massage[20][20];
.................... 
.................... unsigned char SMS_Massage1[32];
.................... unsigned char SMS_Massage2[32];
.................... unsigned char SMS_Massage3[32];
.................... unsigned char SMS_Massage4[32];
.................... unsigned char SMS_Massage5[32];
.................... unsigned char SMS_Massage6[32];
.................... unsigned char SMS_Massage7[32];
.................... unsigned char SMS_Massage8[32];
.................... unsigned char SMS_Massage9[32];
.................... unsigned char SMS_Massage10[32];
.................... unsigned char SMS_Massage11[32];
.................... unsigned char SMS_Massage12[32];
.................... unsigned char SMS_Massage13[32];
.................... unsigned char SMS_Massage14[32];
.................... unsigned char SMS_Massage15[32];
.................... unsigned char SMS_Massage16[32];
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... } ; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Input
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8,B9,B10;
....................    int1 B11,B12,B13,B14,B15,B16;
.................... };
.................... 
.................... 
....................    //Output   (LED Lit = "0")
....................    //Input Type NO/NC (NO = "1" , NC = "0")
....................    //Fault Type Manual/Auto (Manual = "1" , Auto = "0")
....................    //Output Type Buz/Bell (Buzzer = "1" , Bell = "0")
....................    //Output Both (Normal = "1" , Both = "0")
....................    //Acknowledge flag (Acked = "1" , non Ack = "0")
.................... 
.................... //struct Bit64 Input,Output,InputType,FaultType,OutputType,OutputBoth;
.................... struct Bit64 Inputt;
.................... struct Bit64 Output;
.................... struct Bit64 InputType;
.................... struct Bit64 FaultType;
.................... struct Bit64 OutputType;
.................... struct Bit64 OutputBoth;
.................... 
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 LED_Colour,AckSend,RED_Colour,GREEN_Colour;
.................... 
.................... struct Bit64 SendSMS;
.................... 
.................... int1 FaultAgo[21];
.................... int1 FaultNow[21];
.................... int16 ReleaseTime[21];
.................... int16 FaultDelayTime[21];
.................... 
.................... int1 FaultNCNO[21];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //volatile int8 ReadIn_Count =0;
.................... //int1 ReadIn_flag = 0;
.................... 
.................... 
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void StoreReleaseFault()
*
0201E:  MOVLB  C
02020:  CLRF   x29
.................... {
....................    Signed int8 i=0;
....................    for(i=1;i<=16;i++)
02022:  MOVLW  01
02024:  MOVWF  x29
02026:  BTFSC  x29.7
02028:  BRA    2030
0202A:  MOVF   x29,W
0202C:  SUBLW  10
0202E:  BNC   2076
....................    {
....................       FaultAgo[i] = FaultNow[i];
02030:  CLRF   03
02032:  MOVF   x29,W
02034:  MOVWF  00
02036:  BTFSC  FE8.7
02038:  DECF   03,F
0203A:  MOVWF  x2A
0203C:  MOVFF  03,C2B
02040:  CLRF   03
02042:  MOVF   x29,W
02044:  MOVWF  00
02046:  BTFSC  FE8.7
02048:  DECF   03,F
0204A:  MOVWF  x2C
0204C:  MOVLW  0B
0204E:  MOVWF  x2E
02050:  MOVLW  BB
02052:  MOVWF  x2D
02054:  MOVLB  0
02056:  RCALL  1F84
02058:  MOVFF  C2A,C2C
0205C:  MOVLB  C
0205E:  CLRF   x2D
02060:  BTFSC  01.0
02062:  INCF   x2D,F
02064:  MOVLW  0B
02066:  MOVWF  x2F
02068:  MOVLW  B8
0206A:  MOVWF  x2E
0206C:  MOVLB  0
0206E:  RCALL  1FDC
02070:  MOVLB  C
02072:  INCF   x29,F
02074:  BRA    2026
....................    }
02076:  MOVLB  0
02078:  GOTO   27FA (RETURN)
.................... }
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
02EF0:  MOVLB  5
02EF2:  SETF   x7B
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
02EF4:  SETF   x7A
.................... 
....................    for(i = 0;i < usDataLen;i++)
02EF6:  MOVLB  C
02EF8:  CLRF   x29
02EFA:  MOVF   x27,W
02EFC:  SUBWF  x29,W
02EFE:  BC    2F42
....................    {
....................       restart_wdt();
02F00:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
02F02:  MOVF   x29,W
02F04:  ADDWF  x25,W
02F06:  MOVWF  FE9
02F08:  MOVLW  00
02F0A:  ADDWFC x26,W
02F0C:  MOVWF  FEA
02F0E:  MOVF   FEF,W
02F10:  MOVLB  5
02F12:  XORWF  x7B,W
02F14:  MOVLB  C
02F16:  MOVWF  x28
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
02F18:  CLRF   03
02F1A:  MOVF   x28,W
02F1C:  MOVLB  0
02F1E:  CALL   00BA
02F22:  MOVWF  01
02F24:  MOVLB  5
02F26:  MOVF   x7A,W
02F28:  XORWF  01,W
02F2A:  MOVWF  x7B
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
02F2C:  CLRF   03
02F2E:  MOVLB  C
02F30:  MOVF   x28,W
02F32:  MOVLB  0
02F34:  CALL   01CA
02F38:  MOVFF  FE8,57A
02F3C:  MOVLB  C
02F3E:  INCF   x29,F
02F40:  BRA    2EFA
....................    }
02F42:  MOVLB  0
02F44:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... /*
.................... void Driver595()
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
....................     
....................     data_out = (~Input19_20);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input11_18);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input9_10);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input1_8);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................  
....................    output_high(EXP_OUT_ENABLE);
....................    delay_us(1);
....................    output_low(EXP_OUT_ENABLE);
.................... }
.................... */
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
02F4E:  CLRF   1E
....................    Input9_16_Send = 0x00;
02F50:  CLRF   1F
....................    
....................    
....................    Ack1_8_Send = 0x00;
02F52:  CLRF   26
....................    Ack9_16_Send = 0x00;
02F54:  CLRF   27
.................... 
....................    
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
02F56:  MOVLB  B
02F58:  BTFSC  xAA.0
02F5A:  BRA    2F64
02F5C:  BTFSC  x9C.0
02F5E:  BRA    2F64
....................       AckSend.B1 = 1;
02F60:  BSF    xB0.0
02F62:  BRA    2F66
....................    else
....................       AckSend.B1 = 0;
02F64:  BCF    xB0.0
....................    if((In.B2 == 0) && (Output.B2 ==0))
02F66:  BTFSC  xAA.1
02F68:  BRA    2F72
02F6A:  BTFSC  x9C.1
02F6C:  BRA    2F72
....................       AckSend.B2 = 1;
02F6E:  BSF    xB0.1
02F70:  BRA    2F74
....................    else
....................       AckSend.B2 = 0;
02F72:  BCF    xB0.1
....................    if((In.B3 == 0) && (Output.B3 ==0))
02F74:  BTFSC  xAA.2
02F76:  BRA    2F80
02F78:  BTFSC  x9C.2
02F7A:  BRA    2F80
....................       AckSend.B3 = 1;
02F7C:  BSF    xB0.2
02F7E:  BRA    2F82
....................    else
....................       AckSend.B3 = 0;
02F80:  BCF    xB0.2
....................    if((In.B4 == 0) && (Output.B4 ==0))
02F82:  BTFSC  xAA.3
02F84:  BRA    2F8E
02F86:  BTFSC  x9C.3
02F88:  BRA    2F8E
....................       AckSend.B4 = 1;
02F8A:  BSF    xB0.3
02F8C:  BRA    2F90
....................    else
....................       AckSend.B4 = 0;
02F8E:  BCF    xB0.3
....................    if((In.B5 == 0) && (Output.B5 ==0))
02F90:  BTFSC  xAA.4
02F92:  BRA    2F9C
02F94:  BTFSC  x9C.4
02F96:  BRA    2F9C
....................       AckSend.B5 = 1;
02F98:  BSF    xB0.4
02F9A:  BRA    2F9E
....................    else
....................       AckSend.B5 = 0;
02F9C:  BCF    xB0.4
....................    if((In.B6 == 0) && (Output.B6 ==0))
02F9E:  BTFSC  xAA.5
02FA0:  BRA    2FAA
02FA2:  BTFSC  x9C.5
02FA4:  BRA    2FAA
....................       AckSend.B6 = 1;
02FA6:  BSF    xB0.5
02FA8:  BRA    2FAC
....................    else
....................       AckSend.B6 = 0;
02FAA:  BCF    xB0.5
....................    if((In.B7 == 0) && (Output.B7 ==0))
02FAC:  BTFSC  xAA.6
02FAE:  BRA    2FB8
02FB0:  BTFSC  x9C.6
02FB2:  BRA    2FB8
....................       AckSend.B7 = 1;
02FB4:  BSF    xB0.6
02FB6:  BRA    2FBA
....................    else
....................       AckSend.B7 = 0;
02FB8:  BCF    xB0.6
....................    if((In.B8 == 0) && (Output.B8 ==0))
02FBA:  BTFSC  xAA.7
02FBC:  BRA    2FC6
02FBE:  BTFSC  x9C.7
02FC0:  BRA    2FC6
....................       AckSend.B8 = 1;
02FC2:  BSF    xB0.7
02FC4:  BRA    2FC8
....................    else
....................       AckSend.B8 = 0;
02FC6:  BCF    xB0.7
....................    if((In.B9 == 0) && (Output.B9 ==0))
02FC8:  BTFSC  xAB.0
02FCA:  BRA    2FD4
02FCC:  BTFSC  x9D.0
02FCE:  BRA    2FD4
....................       AckSend.B9 = 1;
02FD0:  BSF    xB1.0
02FD2:  BRA    2FD6
....................    else
....................       AckSend.B9 = 0;
02FD4:  BCF    xB1.0
....................    if((In.B10 == 0) && (Output.B10 ==0))
02FD6:  BTFSC  xAB.1
02FD8:  BRA    2FE2
02FDA:  BTFSC  x9D.1
02FDC:  BRA    2FE2
....................       AckSend.B10 = 1;
02FDE:  BSF    xB1.1
02FE0:  BRA    2FE4
....................    else
....................       AckSend.B10 = 0;
02FE2:  BCF    xB1.1
....................    if((In.B11 == 0) && (Output.B11 ==0))
02FE4:  BTFSC  xAB.2
02FE6:  BRA    2FF0
02FE8:  BTFSC  x9D.2
02FEA:  BRA    2FF0
....................       AckSend.B11 = 1;
02FEC:  BSF    xB1.2
02FEE:  BRA    2FF2
....................    else
....................       AckSend.B11 = 0;
02FF0:  BCF    xB1.2
....................    if((In.B12 == 0) && (Output.B12 ==0))
02FF2:  BTFSC  xAB.3
02FF4:  BRA    2FFE
02FF6:  BTFSC  x9D.3
02FF8:  BRA    2FFE
....................       AckSend.B12 = 1;
02FFA:  BSF    xB1.3
02FFC:  BRA    3000
....................    else
....................       AckSend.B12 = 0;
02FFE:  BCF    xB1.3
....................    if((In.B13 == 0) && (Output.B13 ==0))
03000:  BTFSC  xAB.4
03002:  BRA    300C
03004:  BTFSC  x9D.4
03006:  BRA    300C
....................       AckSend.B13 = 1;
03008:  BSF    xB1.4
0300A:  BRA    300E
....................    else
....................       AckSend.B13 = 0;
0300C:  BCF    xB1.4
....................    if((In.B14 == 0) && (Output.B14 ==0))
0300E:  BTFSC  xAB.5
03010:  BRA    301A
03012:  BTFSC  x9D.5
03014:  BRA    301A
....................       AckSend.B14 = 1;
03016:  BSF    xB1.5
03018:  BRA    301C
....................    else
....................       AckSend.B14 = 0;
0301A:  BCF    xB1.5
....................    if((In.B15 == 0) && (Output.B15 ==0))
0301C:  BTFSC  xAB.6
0301E:  BRA    3028
03020:  BTFSC  x9D.6
03022:  BRA    3028
....................       AckSend.B15 = 1;
03024:  BSF    xB1.6
03026:  BRA    302A
....................    else
....................       AckSend.B15 = 0;
03028:  BCF    xB1.6
....................    if((In.B16 == 0) && (Output.B16 ==0))
0302A:  BTFSC  xAB.7
0302C:  BRA    3036
0302E:  BTFSC  x9D.7
03030:  BRA    3036
....................       AckSend.B16 = 1;
03032:  BSF    xB1.7
03034:  BRA    3038
....................    else
....................       AckSend.B16 = 0;
03036:  BCF    xB1.7
.................... 
....................       
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
03038:  MOVLW  00
0303A:  BTFSC  xB0.7
0303C:  MOVLW  01
0303E:  IORWF  26,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
03040:  BCF    FD8.0
03042:  RLCF   26,W
03044:  MOVLB  C
03046:  MOVWF  x25
03048:  MOVLW  00
0304A:  MOVLB  B
0304C:  BTFSC  xB0.6
0304E:  MOVLW  01
03050:  MOVLB  C
03052:  IORWF  x25,W
03054:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
03056:  BCF    FD8.0
03058:  RLCF   26,W
0305A:  MOVWF  x25
0305C:  MOVLW  00
0305E:  MOVLB  B
03060:  BTFSC  xB0.5
03062:  MOVLW  01
03064:  MOVLB  C
03066:  IORWF  x25,W
03068:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
0306A:  BCF    FD8.0
0306C:  RLCF   26,W
0306E:  MOVWF  x25
03070:  MOVLW  00
03072:  MOVLB  B
03074:  BTFSC  xB0.4
03076:  MOVLW  01
03078:  MOVLB  C
0307A:  IORWF  x25,W
0307C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
0307E:  BCF    FD8.0
03080:  RLCF   26,W
03082:  MOVWF  x25
03084:  MOVLW  00
03086:  MOVLB  B
03088:  BTFSC  xB0.3
0308A:  MOVLW  01
0308C:  MOVLB  C
0308E:  IORWF  x25,W
03090:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
03092:  BCF    FD8.0
03094:  RLCF   26,W
03096:  MOVWF  x25
03098:  MOVLW  00
0309A:  MOVLB  B
0309C:  BTFSC  xB0.2
0309E:  MOVLW  01
030A0:  MOVLB  C
030A2:  IORWF  x25,W
030A4:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
030A6:  BCF    FD8.0
030A8:  RLCF   26,W
030AA:  MOVWF  x25
030AC:  MOVLW  00
030AE:  MOVLB  B
030B0:  BTFSC  xB0.1
030B2:  MOVLW  01
030B4:  MOVLB  C
030B6:  IORWF  x25,W
030B8:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
030BA:  BCF    FD8.0
030BC:  RLCF   26,W
030BE:  MOVWF  x25
030C0:  MOVLW  00
030C2:  MOVLB  B
030C4:  BTFSC  xB0.0
030C6:  MOVLW  01
030C8:  MOVLB  C
030CA:  IORWF  x25,W
030CC:  MOVWF  26
....................    
....................    Ack9_16_Send = Ack9_16_Send | AckSend.B16;
030CE:  MOVLW  00
030D0:  MOVLB  B
030D2:  BTFSC  xB1.7
030D4:  MOVLW  01
030D6:  IORWF  27,F
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B15;
030D8:  BCF    FD8.0
030DA:  RLCF   27,W
030DC:  MOVLB  C
030DE:  MOVWF  x25
030E0:  MOVLW  00
030E2:  MOVLB  B
030E4:  BTFSC  xB1.6
030E6:  MOVLW  01
030E8:  MOVLB  C
030EA:  IORWF  x25,W
030EC:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B14;
030EE:  BCF    FD8.0
030F0:  RLCF   27,W
030F2:  MOVWF  x25
030F4:  MOVLW  00
030F6:  MOVLB  B
030F8:  BTFSC  xB1.5
030FA:  MOVLW  01
030FC:  MOVLB  C
030FE:  IORWF  x25,W
03100:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B13;
03102:  BCF    FD8.0
03104:  RLCF   27,W
03106:  MOVWF  x25
03108:  MOVLW  00
0310A:  MOVLB  B
0310C:  BTFSC  xB1.4
0310E:  MOVLW  01
03110:  MOVLB  C
03112:  IORWF  x25,W
03114:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B12;
03116:  BCF    FD8.0
03118:  RLCF   27,W
0311A:  MOVWF  x25
0311C:  MOVLW  00
0311E:  MOVLB  B
03120:  BTFSC  xB1.3
03122:  MOVLW  01
03124:  MOVLB  C
03126:  IORWF  x25,W
03128:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B11;
0312A:  BCF    FD8.0
0312C:  RLCF   27,W
0312E:  MOVWF  x25
03130:  MOVLW  00
03132:  MOVLB  B
03134:  BTFSC  xB1.2
03136:  MOVLW  01
03138:  MOVLB  C
0313A:  IORWF  x25,W
0313C:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B10;
0313E:  BCF    FD8.0
03140:  RLCF   27,W
03142:  MOVWF  x25
03144:  MOVLW  00
03146:  MOVLB  B
03148:  BTFSC  xB1.1
0314A:  MOVLW  01
0314C:  MOVLB  C
0314E:  IORWF  x25,W
03150:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B9;
03152:  BCF    FD8.0
03154:  RLCF   27,W
03156:  MOVWF  x25
03158:  MOVLW  00
0315A:  MOVLB  B
0315C:  BTFSC  xB1.0
0315E:  MOVLW  01
03160:  MOVLB  C
03162:  IORWF  x25,W
03164:  MOVWF  27
....................       
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
03166:  MOVLW  00
03168:  MOVLB  B
0316A:  BTFSC  xAA.7
0316C:  MOVLW  01
0316E:  IORWF  1E,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
03170:  BCF    FD8.0
03172:  RLCF   1E,W
03174:  MOVLB  C
03176:  MOVWF  x25
03178:  MOVLW  00
0317A:  MOVLB  B
0317C:  BTFSC  xAA.6
0317E:  MOVLW  01
03180:  MOVLB  C
03182:  IORWF  x25,W
03184:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
03186:  BCF    FD8.0
03188:  RLCF   1E,W
0318A:  MOVWF  x25
0318C:  MOVLW  00
0318E:  MOVLB  B
03190:  BTFSC  xAA.5
03192:  MOVLW  01
03194:  MOVLB  C
03196:  IORWF  x25,W
03198:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
0319A:  BCF    FD8.0
0319C:  RLCF   1E,W
0319E:  MOVWF  x25
031A0:  MOVLW  00
031A2:  MOVLB  B
031A4:  BTFSC  xAA.4
031A6:  MOVLW  01
031A8:  MOVLB  C
031AA:  IORWF  x25,W
031AC:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
031AE:  BCF    FD8.0
031B0:  RLCF   1E,W
031B2:  MOVWF  x25
031B4:  MOVLW  00
031B6:  MOVLB  B
031B8:  BTFSC  xAA.3
031BA:  MOVLW  01
031BC:  MOVLB  C
031BE:  IORWF  x25,W
031C0:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
031C2:  BCF    FD8.0
031C4:  RLCF   1E,W
031C6:  MOVWF  x25
031C8:  MOVLW  00
031CA:  MOVLB  B
031CC:  BTFSC  xAA.2
031CE:  MOVLW  01
031D0:  MOVLB  C
031D2:  IORWF  x25,W
031D4:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
031D6:  BCF    FD8.0
031D8:  RLCF   1E,W
031DA:  MOVWF  x25
031DC:  MOVLW  00
031DE:  MOVLB  B
031E0:  BTFSC  xAA.1
031E2:  MOVLW  01
031E4:  MOVLB  C
031E6:  IORWF  x25,W
031E8:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
031EA:  BCF    FD8.0
031EC:  RLCF   1E,W
031EE:  MOVWF  x25
031F0:  MOVLW  00
031F2:  MOVLB  B
031F4:  BTFSC  xAA.0
031F6:  MOVLW  01
031F8:  MOVLB  C
031FA:  IORWF  x25,W
031FC:  MOVWF  1E
....................    
....................    Input9_16_Send = Input9_16_Send | In.B16;
031FE:  MOVLW  00
03200:  MOVLB  B
03202:  BTFSC  xAB.7
03204:  MOVLW  01
03206:  IORWF  1F,F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B15;
03208:  BCF    FD8.0
0320A:  RLCF   1F,W
0320C:  MOVLB  C
0320E:  MOVWF  x25
03210:  MOVLW  00
03212:  MOVLB  B
03214:  BTFSC  xAB.6
03216:  MOVLW  01
03218:  MOVLB  C
0321A:  IORWF  x25,W
0321C:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B14;
0321E:  BCF    FD8.0
03220:  RLCF   1F,W
03222:  MOVWF  x25
03224:  MOVLW  00
03226:  MOVLB  B
03228:  BTFSC  xAB.5
0322A:  MOVLW  01
0322C:  MOVLB  C
0322E:  IORWF  x25,W
03230:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B13;
03232:  BCF    FD8.0
03234:  RLCF   1F,W
03236:  MOVWF  x25
03238:  MOVLW  00
0323A:  MOVLB  B
0323C:  BTFSC  xAB.4
0323E:  MOVLW  01
03240:  MOVLB  C
03242:  IORWF  x25,W
03244:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B12;
03246:  BCF    FD8.0
03248:  RLCF   1F,W
0324A:  MOVWF  x25
0324C:  MOVLW  00
0324E:  MOVLB  B
03250:  BTFSC  xAB.3
03252:  MOVLW  01
03254:  MOVLB  C
03256:  IORWF  x25,W
03258:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B11;
0325A:  BCF    FD8.0
0325C:  RLCF   1F,W
0325E:  MOVWF  x25
03260:  MOVLW  00
03262:  MOVLB  B
03264:  BTFSC  xAB.2
03266:  MOVLW  01
03268:  MOVLB  C
0326A:  IORWF  x25,W
0326C:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B10;
0326E:  BCF    FD8.0
03270:  RLCF   1F,W
03272:  MOVWF  x25
03274:  MOVLW  00
03276:  MOVLB  B
03278:  BTFSC  xAB.1
0327A:  MOVLW  01
0327C:  MOVLB  C
0327E:  IORWF  x25,W
03280:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B9;
03282:  BCF    FD8.0
03284:  RLCF   1F,W
03286:  MOVWF  x25
03288:  MOVLW  00
0328A:  MOVLB  B
0328C:  BTFSC  xAB.0
0328E:  MOVLW  01
03290:  MOVLB  C
03292:  IORWF  x25,W
03294:  MOVWF  1F
03296:  MOVLB  0
03298:  GOTO   3FE4 (RETURN)
....................    
....................    
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void checkCommand(void)
.................... {
....................    restart_wdt();
*
002DA:  CLRWDT
.................... 
....................    //if(sequence == end_sq && Address == SBUF)     //check Address
....................    if(sequence == end_sq )     //check Address
002DC:  MOVF   x6F,W
002DE:  SUBWF  x78,W
002E0:  BNZ   0308
....................    {
....................      RxD_DataLen = 0x00 ;
002E2:  CLRF   x7A
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002E4:  MOVLW  7A
002E6:  ADDWF  x7A,W
002E8:  MOVWF  FE9
002EA:  MOVLW  01
002EC:  MOVWF  FEA
002EE:  BTFSC  FD8.0
002F0:  INCF   FEA,F
002F2:  MOVFF  2E,FEF
....................      restart_wdt();
002F6:  CLRWDT
....................      RxD_DataLen ++ ;
002F8:  INCF   x7A,F
....................      sequence = addr_sq;
002FA:  MOVLW  10
002FC:  MOVWF  x78
....................      T_timeout = 0x14; //200ms
002FE:  MOVLW  14
00300:  MOVLB  9
00302:  MOVWF  x85
....................    }
00304:  BRA    0580
00306:  MOVLB  0
....................    else if(sequence == addr_sq)
00308:  MOVF   x78,W
0030A:  SUBLW  10
0030C:  BNZ   03C6
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
0030E:  MOVLW  7A
00310:  ADDWF  x7A,W
00312:  MOVWF  FE9
00314:  MOVLW  01
00316:  MOVWF  FEA
00318:  BTFSC  FD8.0
0031A:  INCF   FEA,F
0031C:  MOVFF  2E,FEF
....................       restart_wdt();
00320:  CLRWDT
....................       RxD_DataLen ++ ;
00322:  INCF   x7A,F
.................... 
....................        if(RxD_Buff[RxD_DataLen - 1] < 0x17)   //Function Code Must be less than 0x20
00324:  MOVLW  01
00326:  SUBWF  x7A,W
00328:  ADDLW  7A
0032A:  MOVWF  FE9
0032C:  MOVLW  01
0032E:  MOVWF  FEA
00330:  BTFSC  FD8.0
00332:  INCF   FEA,F
00334:  MOVF   FEF,W
00336:  SUBLW  16
00338:  BNC   0348
....................        {
....................            sequence = code_sq;
0033A:  MOVFF  70,78
....................            T_timeout = 0x14; //200ms
0033E:  MOVLW  14
00340:  MOVLB  9
00342:  MOVWF  x85
....................        }
00344:  BRA    03C2
00346:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x20)   /////Read Setting//////
00348:  MOVLW  01
0034A:  SUBWF  x7A,W
0034C:  ADDLW  7A
0034E:  MOVWF  FE9
00350:  MOVLW  01
00352:  MOVWF  FEA
00354:  BTFSC  FD8.0
00356:  INCF   FEA,F
00358:  MOVF   FEF,W
0035A:  SUBLW  20
0035C:  BNZ   036C
....................        {
....................           sequence = ubyte_lo_sq;
0035E:  MOVFF  73,78
....................           T_timeout = 0x14; //200ms
00362:  MOVLW  14
00364:  MOVLB  9
00366:  MOVWF  x85
....................        }
00368:  BRA    03C2
0036A:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x21)   /////Write setting/////
0036C:  MOVLW  01
0036E:  SUBWF  x7A,W
00370:  ADDLW  7A
00372:  MOVWF  FE9
00374:  MOVLW  01
00376:  MOVWF  FEA
00378:  BTFSC  FD8.0
0037A:  INCF   FEA,F
0037C:  MOVF   FEF,W
0037E:  SUBLW  21
00380:  BNZ   0390
....................        {
....................           sequence = byte_count_sq ;
00382:  MOVFF  76,78
....................           T_timeout = 0x14; //200ms
00386:  MOVLW  14
00388:  MOVLB  9
0038A:  MOVWF  x85
....................        }
0038C:  BRA    03C2
0038E:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x22)   /////SMS setting/////
00390:  MOVLW  01
00392:  SUBWF  x7A,W
00394:  ADDLW  7A
00396:  MOVWF  FE9
00398:  MOVLW  01
0039A:  MOVWF  FEA
0039C:  BTFSC  FD8.0
0039E:  INCF   FEA,F
003A0:  MOVF   FEF,W
003A2:  SUBLW  22
003A4:  BNZ   03B4
....................        {
....................           sequence = second_numofdata ;
003A6:  MOVFF  75,78
....................           T_timeout = 0x14; //200ms
003AA:  MOVLW  14
003AC:  MOVLB  9
003AE:  MOVWF  x85
....................        }
003B0:  BRA    03C2
003B2:  MOVLB  0
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
003B4:  CLRF   x7A
....................           sequence = end_sq;
003B6:  MOVFF  6F,78
....................           T_timeout = 0x00;
003BA:  MOVLB  9
003BC:  CLRF   x85
....................           output_bit(P485ctrl,0);
003BE:  BCF    F8A.3
003C0:  BCF    F93.3
....................        }
....................    }
003C2:  BRA    0580
003C4:  MOVLB  0
....................    else if(sequence == second_numofdata)
003C6:  MOVF   x75,W
003C8:  SUBWF  x78,W
003CA:  BNZ   03F0
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
003CC:  MOVLW  7A
003CE:  ADDWF  x7A,W
003D0:  MOVWF  FE9
003D2:  MOVLW  01
003D4:  MOVWF  FEA
003D6:  BTFSC  FD8.0
003D8:  INCF   FEA,F
003DA:  MOVFF  2E,FEF
....................       restart_wdt();
003DE:  CLRWDT
....................       RxD_DataLen ++ ;
003E0:  INCF   x7A,F
....................       sequence = byte_count_sq;
003E2:  MOVFF  76,78
....................       T_timeout = 0x14; //200ms
003E6:  MOVLW  14
003E8:  MOVLB  9
003EA:  MOVWF  x85
.................... 
....................    }
003EC:  BRA    0580
003EE:  MOVLB  0
....................    else if(sequence == byte_count_sq)
003F0:  MOVF   x76,W
003F2:  SUBWF  x78,W
003F4:  BNZ   044C
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
003F6:  MOVLW  7A
003F8:  ADDWF  x7A,W
003FA:  MOVWF  FE9
003FC:  MOVLW  01
003FE:  MOVWF  FEA
00400:  BTFSC  FD8.0
00402:  INCF   FEA,F
00404:  MOVFF  2E,FEF
....................       restart_wdt();
00408:  CLRWDT
....................       RxD_DataLen ++ ;
0040A:  INCF   x7A,F
....................       if(RxD_Buff[1] == 0x22)   /////SMS setting/////
0040C:  MOVLB  1
0040E:  MOVF   x7B,W
00410:  SUBLW  22
00412:  BNZ   0426
....................       {
....................          index = (RxD_Buff[2] * 0x64) + RxD_Buff[3];
00414:  MOVF   x7C,W
00416:  MULLW  64
00418:  MOVF   FF3,W
0041A:  ADDWF  x7D,W
0041C:  MOVLB  9
0041E:  MOVWF  x86
00420:  CLRF   x87
....................       }
00422:  BRA    0440
00424:  MOVLB  1
....................       else{
....................          index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
00426:  MOVLW  01
00428:  MOVLB  0
0042A:  SUBWF  x7A,W
0042C:  ADDLW  7A
0042E:  MOVWF  FE9
00430:  MOVLW  01
00432:  MOVWF  FEA
00434:  BTFSC  FD8.0
00436:  INCF   FEA,F
00438:  MOVLB  9
0043A:  CLRF   x87
0043C:  MOVFF  FEF,986
....................       }
....................       T_timeout = 0x14; //200ms
00440:  MOVLW  14
00442:  MOVWF  x85
....................       sequence = data_sq ;
00444:  MOVFF  77,78
....................    }
00448:  BRA    0580
0044A:  MOVLB  0
....................    else if(sequence == data_sq)
0044C:  MOVF   x77,W
0044E:  SUBWF  x78,W
00450:  BNZ   0486
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
00452:  MOVLW  7A
00454:  ADDWF  x7A,W
00456:  MOVWF  FE9
00458:  MOVLW  01
0045A:  MOVWF  FEA
0045C:  BTFSC  FD8.0
0045E:  INCF   FEA,F
00460:  MOVFF  2E,FEF
....................       restart_wdt();
00464:  CLRWDT
....................       RxD_DataLen ++ ;
00466:  INCF   x7A,F
....................       index -- ;                     //Data Byte Count
00468:  MOVLB  9
0046A:  MOVF   x86,W
0046C:  BTFSC  FD8.2
0046E:  DECF   x87,F
00470:  DECF   x86,F
....................       if(index == 0x00)
00472:  MOVF   x86,F
00474:  BNZ   047E
00476:  MOVF   x87,F
00478:  BNZ   047E
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
0047A:  MOVFF  73,78
....................       }
....................       T_timeout = 0x14; //200ms
0047E:  MOVLW  14
00480:  MOVWF  x85
....................    }
00482:  BRA    0580
00484:  MOVLB  0
....................    else if(sequence == code_sq)
00486:  MOVF   x70,W
00488:  SUBWF  x78,W
0048A:  BNZ   04B0
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
0048C:  MOVLW  7A
0048E:  ADDWF  x7A,W
00490:  MOVWF  FE9
00492:  MOVLW  01
00494:  MOVWF  FEA
00496:  BTFSC  FD8.0
00498:  INCF   FEA,F
0049A:  MOVFF  2E,FEF
....................       restart_wdt();
0049E:  CLRWDT
....................       RxD_DataLen ++ ;
004A0:  INCF   x7A,F
....................       sequence = start_addr_hi_sq;
004A2:  MOVFF  71,78
....................       T_timeout = 0x14; //200ms
004A6:  MOVLW  14
004A8:  MOVLB  9
004AA:  MOVWF  x85
....................    }
004AC:  BRA    0580
004AE:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
004B0:  MOVF   x71,W
004B2:  SUBWF  x78,W
004B4:  BNZ   04DA
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
004B6:  MOVLW  7A
004B8:  ADDWF  x7A,W
004BA:  MOVWF  FE9
004BC:  MOVLW  01
004BE:  MOVWF  FEA
004C0:  BTFSC  FD8.0
004C2:  INCF   FEA,F
004C4:  MOVFF  2E,FEF
....................       restart_wdt();
004C8:  CLRWDT
....................       RxD_DataLen ++ ;
004CA:  INCF   x7A,F
....................       sequence = start_addr_lo_sq;
004CC:  MOVFF  72,78
....................       T_timeout = 0x14; //200ms
004D0:  MOVLW  14
004D2:  MOVLB  9
004D4:  MOVWF  x85
....................    }
004D6:  BRA    0580
004D8:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
004DA:  MOVF   x72,W
004DC:  SUBWF  x78,W
004DE:  BNZ   0504
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
004E0:  MOVLW  7A
004E2:  ADDWF  x7A,W
004E4:  MOVWF  FE9
004E6:  MOVLW  01
004E8:  MOVWF  FEA
004EA:  BTFSC  FD8.0
004EC:  INCF   FEA,F
004EE:  MOVFF  2E,FEF
....................       restart_wdt();
004F2:  CLRWDT
....................       RxD_DataLen ++ ;
004F4:  INCF   x7A,F
....................       sequence = ubyte_hi_sq;
004F6:  MOVLW  15
004F8:  MOVWF  x78
....................       T_timeout = 0x14; //200ms
004FA:  MOVLW  14
004FC:  MOVLB  9
004FE:  MOVWF  x85
....................    }
00500:  BRA    0580
00502:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
00504:  MOVF   x78,W
00506:  SUBLW  15
00508:  BNZ   052E
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
0050A:  MOVLW  7A
0050C:  ADDWF  x7A,W
0050E:  MOVWF  FE9
00510:  MOVLW  01
00512:  MOVWF  FEA
00514:  BTFSC  FD8.0
00516:  INCF   FEA,F
00518:  MOVFF  2E,FEF
....................       restart_wdt();
0051C:  CLRWDT
....................       RxD_DataLen ++ ;
0051E:  INCF   x7A,F
....................       sequence = ubyte_lo_sq;
00520:  MOVFF  73,78
....................       T_timeout = 0x14; //200ms
00524:  MOVLW  14
00526:  MOVLB  9
00528:  MOVWF  x85
....................    }
0052A:  BRA    0580
0052C:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
0052E:  MOVF   x73,W
00530:  SUBWF  x78,W
00532:  BNZ   0558
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
00534:  MOVLW  7A
00536:  ADDWF  x7A,W
00538:  MOVWF  FE9
0053A:  MOVLW  01
0053C:  MOVWF  FEA
0053E:  BTFSC  FD8.0
00540:  INCF   FEA,F
00542:  MOVFF  2E,FEF
....................       restart_wdt();
00546:  CLRWDT
....................       RxD_DataLen ++ ;
00548:  INCF   x7A,F
....................       sequence = crc_hi_sq;
0054A:  MOVFF  74,78
....................       T_timeout = 0x14; //200ms
0054E:  MOVLW  14
00550:  MOVLB  9
00552:  MOVWF  x85
....................    }
00554:  BRA    0580
00556:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
00558:  MOVF   x74,W
0055A:  SUBWF  x78,W
0055C:  BNZ   0580
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
0055E:  MOVLW  7A
00560:  ADDWF  x7A,W
00562:  MOVWF  FE9
00564:  MOVLW  01
00566:  MOVWF  FEA
00568:  BTFSC  FD8.0
0056A:  INCF   FEA,F
0056C:  MOVFF  2E,FEF
....................       restart_wdt();
00570:  CLRWDT
....................       sequence = end_sq;
00572:  MOVFF  6F,78
....................       T_timeout = 0x00;
00576:  MOVLB  9
00578:  CLRF   x85
....................       //T_timeout = 0x14; //200ms
....................       recieve_completed = 1 ;            //Recieve completed then translate
0057A:  BSF    30.5
....................       output_bit(P485ctrl,0);
0057C:  BCF    F8A.3
0057E:  BCF    F93.3
00580:  MOVLB  0
....................    }
00582:  GOTO   0590 (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
036AC:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
036AE:  MOVLW  01
036B0:  SUBWF  x7A,W
036B2:  MOVLB  C
036B4:  MOVWF  x24
036B6:  MOVLW  01
036B8:  MOVWF  x26
036BA:  MOVLW  7A
036BC:  MOVWF  x25
036BE:  MOVFF  C24,C27
036C2:  MOVLB  0
036C4:  RCALL  2EF0
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
036C6:  MOVLW  01
036C8:  SUBWF  x7A,W
036CA:  ADDLW  7A
036CC:  MOVWF  FE9
036CE:  MOVLW  01
036D0:  MOVWF  FEA
036D2:  BTFSC  FD8.0
036D4:  INCF   FEA,F
036D6:  MOVF   FEF,W
036D8:  MOVLB  5
036DA:  SUBWF  x7B,W
036DC:  BTFSS  FD8.2
036DE:  GOTO   6152
036E2:  MOVLW  7A
036E4:  MOVLB  0
036E6:  ADDWF  x7A,W
036E8:  MOVWF  FE9
036EA:  MOVLW  01
036EC:  MOVWF  FEA
036EE:  BTFSC  FD8.0
036F0:  INCF   FEA,F
036F2:  MOVF   FEF,W
036F4:  MOVLB  5
036F6:  SUBWF  x7A,W
036F8:  BTFSS  FD8.2
036FA:  GOTO   6152
....................    {
....................    
....................          
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
036FE:  MOVLB  1
03700:  MOVF   x7A,W
03702:  SUBLW  AA
03704:  BTFSS  FD8.2
03706:  BRA    3BA0
03708:  MOVF   x7B,W
0370A:  SUBLW  20
0370C:  BTFSS  FD8.2
0370E:  BRA    3BA0
....................       {
....................          TxD_Buff[0] = Address ;         //Address
03710:  MOVFF  79,7B
....................          TxD_Buff[1] = 0x20 ;            //function code
03714:  MOVLW  20
03716:  MOVLB  0
03718:  MOVWF  x7C
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
0371A:  MOVLW  1C
0371C:  MOVWF  x7D
....................          
....................          /////////////////////////////////////////////
....................          InputType1_8 = 0x00;
0371E:  CLRF   3A
....................          InputType1_8 = InputType1_8 | FaultNCNO[8];
03720:  MOVLW  00
03722:  MOVLB  C
03724:  BTFSC  x13.0
03726:  MOVLW  01
03728:  IORWF  3A,F
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[7];
0372A:  BCF    FD8.0
0372C:  RLCF   3A,W
0372E:  MOVWF  x25
03730:  MOVLW  00
03732:  BTFSC  x12.7
03734:  MOVLW  01
03736:  IORWF  x25,W
03738:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[6];
0373A:  BCF    FD8.0
0373C:  RLCF   3A,W
0373E:  MOVWF  x25
03740:  MOVLW  00
03742:  BTFSC  x12.6
03744:  MOVLW  01
03746:  IORWF  x25,W
03748:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[5];
0374A:  BCF    FD8.0
0374C:  RLCF   3A,W
0374E:  MOVWF  x25
03750:  MOVLW  00
03752:  BTFSC  x12.5
03754:  MOVLW  01
03756:  IORWF  x25,W
03758:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[4];
0375A:  BCF    FD8.0
0375C:  RLCF   3A,W
0375E:  MOVWF  x25
03760:  MOVLW  00
03762:  BTFSC  x12.4
03764:  MOVLW  01
03766:  IORWF  x25,W
03768:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[3];
0376A:  BCF    FD8.0
0376C:  RLCF   3A,W
0376E:  MOVWF  x25
03770:  MOVLW  00
03772:  BTFSC  x12.3
03774:  MOVLW  01
03776:  IORWF  x25,W
03778:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[2];
0377A:  BCF    FD8.0
0377C:  RLCF   3A,W
0377E:  MOVWF  x25
03780:  MOVLW  00
03782:  BTFSC  x12.2
03784:  MOVLW  01
03786:  IORWF  x25,W
03788:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[1];
0378A:  BCF    FD8.0
0378C:  RLCF   3A,W
0378E:  MOVWF  x25
03790:  MOVLW  00
03792:  BTFSC  x12.1
03794:  MOVLW  01
03796:  IORWF  x25,W
03798:  MOVWF  3A
.................... 
....................          InputType9_16 = 0x00;
0379A:  CLRF   3B
....................          InputType9_16 = InputType9_16 | FaultNCNO[16];
0379C:  MOVLW  00
0379E:  BTFSC  x14.0
037A0:  MOVLW  01
037A2:  IORWF  3B,F
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[15];
037A4:  BCF    FD8.0
037A6:  RLCF   3B,W
037A8:  MOVWF  x25
037AA:  MOVLW  00
037AC:  BTFSC  x13.7
037AE:  MOVLW  01
037B0:  IORWF  x25,W
037B2:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[14];
037B4:  BCF    FD8.0
037B6:  RLCF   3B,W
037B8:  MOVWF  x25
037BA:  MOVLW  00
037BC:  BTFSC  x13.6
037BE:  MOVLW  01
037C0:  IORWF  x25,W
037C2:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[13];
037C4:  BCF    FD8.0
037C6:  RLCF   3B,W
037C8:  MOVWF  x25
037CA:  MOVLW  00
037CC:  BTFSC  x13.5
037CE:  MOVLW  01
037D0:  IORWF  x25,W
037D2:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[12];
037D4:  BCF    FD8.0
037D6:  RLCF   3B,W
037D8:  MOVWF  x25
037DA:  MOVLW  00
037DC:  BTFSC  x13.4
037DE:  MOVLW  01
037E0:  IORWF  x25,W
037E2:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[11];
037E4:  BCF    FD8.0
037E6:  RLCF   3B,W
037E8:  MOVWF  x25
037EA:  MOVLW  00
037EC:  BTFSC  x13.3
037EE:  MOVLW  01
037F0:  IORWF  x25,W
037F2:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[10];
037F4:  BCF    FD8.0
037F6:  RLCF   3B,W
037F8:  MOVWF  x25
037FA:  MOVLW  00
037FC:  BTFSC  x13.2
037FE:  MOVLW  01
03800:  IORWF  x25,W
03802:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[9];
03804:  BCF    FD8.0
03806:  RLCF   3B,W
03808:  MOVWF  x25
0380A:  MOVLW  00
0380C:  BTFSC  x13.1
0380E:  MOVLW  01
03810:  IORWF  x25,W
03812:  MOVWF  3B
....................          
....................          FaultType17_24 = 0x00;
03814:  CLRF   3F
....................          FaultType17_24 = FaultType17_24 | FaultNCNO[24];
03816:  MOVLW  00
03818:  BTFSC  x15.0
0381A:  MOVLW  01
0381C:  IORWF  3F,F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[23];
0381E:  BCF    FD8.0
03820:  RLCF   3F,W
03822:  MOVWF  x25
03824:  MOVLW  00
03826:  BTFSC  x14.7
03828:  MOVLW  01
0382A:  IORWF  x25,W
0382C:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[22];
0382E:  BCF    FD8.0
03830:  RLCF   3F,W
03832:  MOVWF  x25
03834:  MOVLW  00
03836:  BTFSC  x14.6
03838:  MOVLW  01
0383A:  IORWF  x25,W
0383C:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[21];
0383E:  BCF    FD8.0
03840:  RLCF   3F,W
03842:  MOVWF  x25
03844:  MOVLW  00
03846:  BTFSC  x14.5
03848:  MOVLW  01
0384A:  IORWF  x25,W
0384C:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[20];
0384E:  BCF    FD8.0
03850:  RLCF   3F,W
03852:  MOVWF  x25
03854:  MOVLW  00
03856:  BTFSC  x14.4
03858:  MOVLW  01
0385A:  IORWF  x25,W
0385C:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[19];
0385E:  BCF    FD8.0
03860:  RLCF   3F,W
03862:  MOVWF  x25
03864:  MOVLW  00
03866:  BTFSC  x14.3
03868:  MOVLW  01
0386A:  IORWF  x25,W
0386C:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[18];
0386E:  BCF    FD8.0
03870:  RLCF   3F,W
03872:  MOVWF  x25
03874:  MOVLW  00
03876:  BTFSC  x14.2
03878:  MOVLW  01
0387A:  IORWF  x25,W
0387C:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[17];
0387E:  BCF    FD8.0
03880:  RLCF   3F,W
03882:  MOVWF  x25
03884:  MOVLW  00
03886:  BTFSC  x14.1
03888:  MOVLW  01
0388A:  IORWF  x25,W
0388C:  MOVWF  3F
....................          
....................          ///////////////////////////////////////////
....................          
....................          TxD_Buff[3] = InputType1_8 ;    //1
0388E:  MOVFF  3A,7E
....................          TxD_Buff[4] = InputType9_16 ;  //2
03892:  MOVFF  3B,7F
....................          TxD_Buff[5] = InputType17_24 ;//3
03896:  MOVFF  3C,80
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
0389A:  MOVFF  3D,81
....................          TxD_Buff[7] = FaultType9_16 ; //5
0389E:  MOVFF  3E,82
....................          TxD_Buff[8] = FaultType17_24 ;   //6
038A2:  MOVFF  3F,83
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
038A6:  MOVFF  40,84
....................          TxD_Buff[10] = OutputType9_16 ;  //8
038AA:  MOVFF  41,85
....................          TxD_Buff[11] = OutputType17_24 ; //9
038AE:  MOVFF  42,86
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
038B2:  MOVFF  43,87
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
038B6:  MOVFF  44,88
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
038BA:  MOVFF  45,89
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
038BE:  MOVFF  46,8A
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
038C2:  MOVFF  47,8B
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
038C6:  MOVFF  48,8C
....................         
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
038CA:  MOVFF  FF2,C24
038CE:  BCF    FF2.7
038D0:  CLRF   FAA
038D2:  MOVLW  10
038D4:  MOVWF  FA9
038D6:  BCF    FA6.6
038D8:  BCF    FA6.7
038DA:  BSF    FA6.0
038DC:  MOVF   FA8,W
038DE:  BTFSC  x24.7
038E0:  BSF    FF2.7
038E2:  MOVLB  0
038E4:  MOVWF  x8D
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
038E6:  MOVFF  FF2,C24
038EA:  BCF    FF2.7
038EC:  CLRF   FAA
038EE:  MOVLW  11
038F0:  MOVWF  FA9
038F2:  BCF    FA6.6
038F4:  BCF    FA6.7
038F6:  BSF    FA6.0
038F8:  MOVF   FA8,W
038FA:  MOVLB  C
038FC:  BTFSC  x24.7
038FE:  BSF    FF2.7
03900:  MOVLB  0
03902:  MOVWF  x8E
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
03904:  MOVFF  FF2,C24
03908:  BCF    FF2.7
0390A:  CLRF   FAA
0390C:  MOVLW  12
0390E:  MOVWF  FA9
03910:  BCF    FA6.6
03912:  BCF    FA6.7
03914:  BSF    FA6.0
03916:  MOVF   FA8,W
03918:  MOVLB  C
0391A:  BTFSC  x24.7
0391C:  BSF    FF2.7
0391E:  MOVLB  0
03920:  MOVWF  x8F
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
03922:  MOVFF  FF2,C24
03926:  BCF    FF2.7
03928:  CLRF   FAA
0392A:  MOVLW  13
0392C:  MOVWF  FA9
0392E:  BCF    FA6.6
03930:  BCF    FA6.7
03932:  BSF    FA6.0
03934:  MOVF   FA8,W
03936:  MOVLB  C
03938:  BTFSC  x24.7
0393A:  BSF    FF2.7
0393C:  MOVLB  0
0393E:  MOVWF  x90
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
03940:  MOVFF  FF2,C24
03944:  BCF    FF2.7
03946:  CLRF   FAA
03948:  MOVLW  14
0394A:  MOVWF  FA9
0394C:  BCF    FA6.6
0394E:  BCF    FA6.7
03950:  BSF    FA6.0
03952:  MOVF   FA8,W
03954:  MOVLB  C
03956:  BTFSC  x24.7
03958:  BSF    FF2.7
0395A:  MOVLB  0
0395C:  MOVWF  x91
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
0395E:  MOVFF  FF2,C24
03962:  BCF    FF2.7
03964:  CLRF   FAA
03966:  MOVLW  15
03968:  MOVWF  FA9
0396A:  BCF    FA6.6
0396C:  BCF    FA6.7
0396E:  BSF    FA6.0
03970:  MOVF   FA8,W
03972:  MOVLB  C
03974:  BTFSC  x24.7
03976:  BSF    FF2.7
03978:  MOVLB  0
0397A:  MOVWF  x92
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
0397C:  MOVFF  FF2,C24
03980:  BCF    FF2.7
03982:  CLRF   FAA
03984:  MOVLW  16
03986:  MOVWF  FA9
03988:  BCF    FA6.6
0398A:  BCF    FA6.7
0398C:  BSF    FA6.0
0398E:  MOVF   FA8,W
03990:  MOVLB  C
03992:  BTFSC  x24.7
03994:  BSF    FF2.7
03996:  MOVLB  0
03998:  MOVWF  x93
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
0399A:  MOVFF  FF2,C24
0399E:  BCF    FF2.7
039A0:  CLRF   FAA
039A2:  MOVLW  17
039A4:  MOVWF  FA9
039A6:  BCF    FA6.6
039A8:  BCF    FA6.7
039AA:  BSF    FA6.0
039AC:  MOVF   FA8,W
039AE:  MOVLB  C
039B0:  BTFSC  x24.7
039B2:  BSF    FF2.7
039B4:  MOVLB  0
039B6:  MOVWF  x94
....................        
....................          ///////////////////////////////////////jj------------------
....................          
....................          /*
....................          Red1_8 = Red1_8 | RED_Colour.B8;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B7;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B6;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B5;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B4;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B3;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B2;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B1;
....................          
....................          Red9_10 = Red9_10 | RED_Colour.B10;
....................          Red9_10 = (Red9_10 << 1) | RED_Colour.B9;
....................          
....................          Red11_18 = Red11_18 | RED_Colour.B16;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B15;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B14;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B13;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B12;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B11;
....................          //Red11_18 = (Red11_18 << 1) | RED_Colour.B2;
....................          //Red11_18 = (Red11_18 << 1) | RED_Colour.B1;
....................         
....................          Green1_8 = Green1_8 | GREEN_Colour.B8;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B7;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B6;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B5;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B4;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B3;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B2;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B1;
....................          
....................          Green9_10 = Green9_10 | GREEN_Colour.B10;
....................          Green9_10 = (Green9_10 << 1) | GREEN_Colour.B9;
....................          
....................          Green11_18 = Green11_18 | GREEN_Colour.B16;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B15;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B14;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B13;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B12;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B11;
....................          
....................           //TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
....................           TxD_Buff[18] = Red1_8;//Red1_8;    //16
....................           
....................           TxD_Buff[19] = Red9_10;//Red9_10;      //17
....................           TxD_Buff[20] = Red11_18;//Red11_18;     //18
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
....................           
....................           //TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
....................           TxD_Buff[22] = Green1_8;//Green1_8;     //20
....................           
....................           TxD_Buff[23] = Green9_10;//Green9_10;    //21
....................           TxD_Buff[24] = Green11_18;//Green11_18;      //22
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
....................           */
....................           ///////////////////////////////////////jj------------------
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
039B8:  MOVFF  6A,95
....................          TxD_Buff[27] = AutoAckTime ;        //25
039BC:  MOVFF  6B,96
....................          TxD_Buff[28] = FlashingRate ;       //26
039C0:  MOVFF  6C,97
....................          TxD_Buff[29] = NoOfPoint ;          //27
039C4:  MOVFF  6D,98
....................          TxD_Buff[30] = FaultDelayTime ;    //28
039C8:  MOVLW  E8
039CA:  MOVWF  x99
....................          TxD_Buff[31] = Address ;            //29
039CC:  MOVFF  79,9A
.................... 
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
039D0:  MOVFF  BEA,9B
....................          TxD_Buff[33] = FaultDelayTime[2] ;
039D4:  MOVFF  BEC,9C
....................          TxD_Buff[34] = FaultDelayTime[3] ;
039D8:  MOVFF  BEE,9D
....................          TxD_Buff[35] = FaultDelayTime[4] ;
039DC:  MOVFF  BF0,9E
....................          TxD_Buff[36] = FaultDelayTime[5] ;
039E0:  MOVFF  BF2,9F
....................          TxD_Buff[37] = FaultDelayTime[6] ;
039E4:  MOVFF  BF4,A0
....................          TxD_Buff[38] = FaultDelayTime[7] ;
039E8:  MOVFF  BF6,A1
....................          TxD_Buff[39] = FaultDelayTime[8] ;
039EC:  MOVFF  BF8,A2
....................          TxD_Buff[40] = FaultDelayTime[9] ;
039F0:  MOVFF  BFA,A3
....................          TxD_Buff[41] = FaultDelayTime[10] ;
039F4:  MOVFF  BFC,A4
....................          TxD_Buff[42] = FaultDelayTime[11] ;
039F8:  MOVFF  BFE,A5
....................          TxD_Buff[43] = FaultDelayTime[12] ;
039FC:  MOVFF  C00,A6
....................          TxD_Buff[44] = FaultDelayTime[13] ;
03A00:  MOVFF  C02,A7
....................          TxD_Buff[45] = FaultDelayTime[14] ;
03A04:  MOVFF  C04,A8
....................          TxD_Buff[46] = FaultDelayTime[15] ;
03A08:  MOVFF  C06,A9
....................          TxD_Buff[47] = FaultDelayTime[16] ;
03A0C:  MOVFF  C08,AA
....................          TxD_Buff[48] = FaultDelayTime[17] ;
03A10:  MOVFF  C0A,AB
....................          TxD_Buff[49] = FaultDelayTime[18] ;
03A14:  MOVFF  C0C,AC
....................          TxD_Buff[50] = FaultDelayTime[19] ;
03A18:  MOVFF  C0E,AD
....................          TxD_Buff[51] = FaultDelayTime[20] ;
03A1C:  MOVFF  C10,AE
....................          
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
03A20:  MOVLB  C
03A22:  CLRF   x26
03A24:  MOVLW  7B
03A26:  MOVWF  x25
03A28:  MOVLW  34
03A2A:  MOVWF  x27
03A2C:  MOVLB  0
03A2E:  CALL   2EF0
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
03A32:  MOVFF  57B,AF
....................          TxD_Buff[53] = CRC_Lo ;
03A36:  MOVFF  57A,B0
.................... 
....................          output_bit(P485ctrl,1);
03A3A:  BSF    F8A.3
03A3C:  BCF    F93.3
....................          delay_ms(10);
03A3E:  MOVLW  0A
03A40:  MOVLB  C
03A42:  MOVWF  x24
03A44:  MOVLB  0
03A46:  CALL   0952
.................... 
....................          putc(Txd_Buff[0]);
03A4A:  MOVF   x7B,W
03A4C:  CALL   2F46
....................          putc(Txd_Buff[1]);
03A50:  MOVF   x7C,W
03A52:  CALL   2F46
....................          putc(Txd_Buff[2]);
03A56:  MOVF   x7D,W
03A58:  CALL   2F46
....................          putc(Txd_Buff[3]);
03A5C:  MOVF   x7E,W
03A5E:  CALL   2F46
....................          putc(Txd_Buff[4]);
03A62:  MOVF   x7F,W
03A64:  CALL   2F46
....................          putc(Txd_Buff[5]);
03A68:  MOVF   x80,W
03A6A:  CALL   2F46
....................          putc(Txd_Buff[6]);
03A6E:  MOVF   x81,W
03A70:  CALL   2F46
....................          putc(Txd_Buff[7]);
03A74:  MOVF   x82,W
03A76:  CALL   2F46
....................          putc(Txd_Buff[8]);
03A7A:  MOVF   x83,W
03A7C:  CALL   2F46
....................          putc(Txd_Buff[9]);
03A80:  MOVF   x84,W
03A82:  CALL   2F46
....................          putc(Txd_Buff[10]);
03A86:  MOVF   x85,W
03A88:  CALL   2F46
....................          putc(Txd_Buff[11]);
03A8C:  MOVF   x86,W
03A8E:  CALL   2F46
....................          putc(Txd_Buff[12]);
03A92:  MOVF   x87,W
03A94:  CALL   2F46
....................          putc(Txd_Buff[13]);
03A98:  MOVF   x88,W
03A9A:  CALL   2F46
....................          putc(Txd_Buff[14]);
03A9E:  MOVF   x89,W
03AA0:  CALL   2F46
....................          putc(Txd_Buff[15]);
03AA4:  MOVF   x8A,W
03AA6:  CALL   2F46
....................          putc(Txd_Buff[16]);
03AAA:  MOVF   x8B,W
03AAC:  CALL   2F46
....................          putc(Txd_Buff[17]);
03AB0:  MOVF   x8C,W
03AB2:  CALL   2F46
....................          putc(Txd_Buff[18]);
03AB6:  MOVF   x8D,W
03AB8:  CALL   2F46
....................          putc(Txd_Buff[19]);
03ABC:  MOVF   x8E,W
03ABE:  CALL   2F46
....................          putc(Txd_Buff[20]);
03AC2:  MOVF   x8F,W
03AC4:  CALL   2F46
....................          putc(Txd_Buff[21]);
03AC8:  MOVF   x90,W
03ACA:  CALL   2F46
....................          putc(Txd_Buff[22]);
03ACE:  MOVF   x91,W
03AD0:  CALL   2F46
....................          putc(Txd_Buff[23]);
03AD4:  MOVF   x92,W
03AD6:  CALL   2F46
....................          putc(Txd_Buff[24]);
03ADA:  MOVF   x93,W
03ADC:  CALL   2F46
....................          putc(Txd_Buff[25]);
03AE0:  MOVF   x94,W
03AE2:  CALL   2F46
....................          putc(Txd_Buff[26]);
03AE6:  MOVF   x95,W
03AE8:  CALL   2F46
....................          putc(Txd_Buff[27]);
03AEC:  MOVF   x96,W
03AEE:  CALL   2F46
....................          putc(Txd_Buff[28]);
03AF2:  MOVF   x97,W
03AF4:  CALL   2F46
....................          putc(Txd_Buff[29]);
03AF8:  MOVF   x98,W
03AFA:  CALL   2F46
....................          putc(Txd_Buff[30]);
03AFE:  MOVF   x99,W
03B00:  CALL   2F46
....................          putc(Txd_Buff[31]);
03B04:  MOVF   x9A,W
03B06:  CALL   2F46
....................          
....................          putc(Txd_Buff[32]);
03B0A:  MOVF   x9B,W
03B0C:  CALL   2F46
....................          putc(Txd_Buff[33]);
03B10:  MOVF   x9C,W
03B12:  CALL   2F46
....................          putc(Txd_Buff[34]);
03B16:  MOVF   x9D,W
03B18:  CALL   2F46
....................          putc(Txd_Buff[35]);
03B1C:  MOVF   x9E,W
03B1E:  CALL   2F46
....................          putc(Txd_Buff[36]);
03B22:  MOVF   x9F,W
03B24:  CALL   2F46
....................          putc(Txd_Buff[37]);
03B28:  MOVF   xA0,W
03B2A:  CALL   2F46
....................          putc(Txd_Buff[38]);
03B2E:  MOVF   xA1,W
03B30:  CALL   2F46
....................          putc(Txd_Buff[39]);
03B34:  MOVF   xA2,W
03B36:  CALL   2F46
....................          putc(Txd_Buff[40]);
03B3A:  MOVF   xA3,W
03B3C:  CALL   2F46
....................          putc(Txd_Buff[41]);
03B40:  MOVF   xA4,W
03B42:  CALL   2F46
....................          
....................          putc(Txd_Buff[42]);
03B46:  MOVF   xA5,W
03B48:  CALL   2F46
....................          putc(Txd_Buff[43]);
03B4C:  MOVF   xA6,W
03B4E:  CALL   2F46
....................          putc(Txd_Buff[44]);
03B52:  MOVF   xA7,W
03B54:  CALL   2F46
....................          putc(Txd_Buff[45]);
03B58:  MOVF   xA8,W
03B5A:  CALL   2F46
....................          putc(Txd_Buff[46]);
03B5E:  MOVF   xA9,W
03B60:  CALL   2F46
....................          putc(Txd_Buff[47]);
03B64:  MOVF   xAA,W
03B66:  CALL   2F46
....................          putc(Txd_Buff[48]);
03B6A:  MOVF   xAB,W
03B6C:  CALL   2F46
....................          putc(Txd_Buff[49]);
03B70:  MOVF   xAC,W
03B72:  CALL   2F46
....................          putc(Txd_Buff[50]);
03B76:  MOVF   xAD,W
03B78:  CALL   2F46
....................          putc(Txd_Buff[51]);
03B7C:  MOVF   xAE,W
03B7E:  CALL   2F46
....................          
....................          putc(Txd_Buff[52]);
03B82:  MOVF   xAF,W
03B84:  CALL   2F46
....................          putc(Txd_Buff[53]);
03B88:  MOVF   xB0,W
03B8A:  CALL   2F46
....................        
....................          delay_ms(3);
03B8E:  MOVLW  03
03B90:  MOVLB  C
03B92:  MOVWF  x24
03B94:  MOVLB  0
03B96:  CALL   0952
....................          output_bit(P485ctrl,0);        
03B9A:  BCF    F8A.3
03B9C:  BCF    F93.3
03B9E:  MOVLB  1
....................       }
....................    
....................    ///////////////////////////////////////////////////////////////
....................       if(RxD_Buff[0] == Address)
03BA0:  MOVLB  0
03BA2:  MOVF   x79,W
03BA4:  MOVLB  1
03BA6:  SUBWF  x7A,W
03BA8:  BTFSS  FD8.2
03BAA:  GOTO   6148
....................       {
....................       
....................          if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
03BAE:  DECFSZ x7B,W
03BB0:  BRA    3FD6
....................          {
....................                //Do Read Coil
....................                Start_Address = RxD_Buff[2] ;
03BB2:  MOVLB  5
03BB4:  CLRF   x7F
03BB6:  MOVFF  17C,57E
....................                Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
03BBA:  MOVFF  57E,57F
03BBE:  MOVLB  C
03BC0:  CLRF   x24
03BC2:  MOVF   x24,W
03BC4:  MOVLB  1
03BC6:  IORWF  x7D,W
03BC8:  MOVLB  5
03BCA:  MOVWF  x7E
03BCC:  MOVLB  5
....................                No_PointCount = RxD_Buff[4] ;
03BCE:  CLRF   x81
03BD0:  MOVFF  17E,580
....................                No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //No. of Point 16 bit
03BD4:  MOVFF  580,581
03BD8:  MOVLB  C
03BDA:  CLRF   x24
03BDC:  MOVF   x24,W
03BDE:  MOVLB  1
03BE0:  IORWF  x7F,W
03BE2:  MOVLB  5
03BE4:  MOVWF  x80
03BE6:  MOVLB  5
....................    
....................                if(Start_Address < 0x10 && (Start_Address + No_PointCount) < 0x11)  //Valid point 0-15
03BE8:  MOVF   x7F,F
03BEA:  BTFSS  FD8.2
03BEC:  BRA    3F64
03BEE:  MOVF   x7E,W
03BF0:  SUBLW  0F
03BF2:  BTFSS  FD8.0
03BF4:  BRA    3F64
03BF6:  MOVF   x80,W
03BF8:  ADDWF  x7E,W
03BFA:  MOVLB  C
03BFC:  MOVWF  x24
03BFE:  MOVLB  5
03C00:  MOVF   x81,W
03C02:  ADDWFC x7F,W
03C04:  MOVLB  C
03C06:  MOVWF  x25
03C08:  MOVF   x25,F
03C0A:  BTFSC  FD8.2
03C0C:  BRA    3C12
03C0E:  MOVLB  5
03C10:  BRA    3F64
03C12:  MOVF   x24,W
03C14:  SUBLW  10
03C16:  BTFSC  FD8.0
03C18:  BRA    3C1E
03C1A:  MOVLB  5
03C1C:  BRA    3F64
....................                {
....................                   if(No_PointCount < 9) Data_ByteCount = 0x01 ;
03C1E:  MOVLB  5
03C20:  MOVF   x81,F
03C22:  BNZ   3C30
03C24:  MOVF   x80,W
03C26:  SUBLW  08
03C28:  BNC   3C30
03C2A:  MOVLW  01
03C2C:  MOVWF  x82
03C2E:  BRA    3C54
....................                   else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
03C30:  MOVF   x81,F
03C32:  BNZ   3C40
03C34:  MOVF   x80,W
03C36:  SUBLW  10
03C38:  BNC   3C40
03C3A:  MOVLW  02
03C3C:  MOVWF  x82
03C3E:  BRA    3C54
....................                   else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
03C40:  MOVF   x81,F
03C42:  BNZ   3C50
03C44:  MOVF   x80,W
03C46:  SUBLW  18
03C48:  BNC   3C50
03C4A:  MOVLW  03
03C4C:  MOVWF  x82
03C4E:  BRA    3C54
....................                   else   Data_ByteCount = 0x01 ; //----Jack
03C50:  MOVLW  01
03C52:  MOVWF  x82
....................    
....................                   if(Data_ByteCount == 0x01)
03C54:  DECFSZ x82,W
03C56:  BRA    3D9C
....................                   {
....................    
....................                      if(Start_Address < 0x09)
03C58:  MOVF   x7F,F
03C5A:  BNZ   3C76
03C5C:  MOVF   x7E,W
03C5E:  SUBLW  08
03C60:  BNC   3C76
....................                      {
....................                         //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                         //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                         //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                          Data_Buff[0] = Input1_8 >> Start_Address ;
03C62:  MOVFF  49,583
03C66:  MOVF   x7E,W
03C68:  MOVWF  01
03C6A:  BZ    3C74
03C6C:  BCF    FD8.0
03C6E:  RRCF   x83,F
03C70:  DECFSZ 01,F
03C72:  BRA    3C6C
....................                          //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                          //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                      }
03C74:  BRA    3CAA
....................                      else if(Start_Address > 0x08 && Start_Address < 0x10)
03C76:  MOVF   x7F,F
03C78:  BNZ   3C80
03C7A:  MOVF   x7E,W
03C7C:  SUBLW  08
03C7E:  BC    3CAA
03C80:  MOVF   x7F,F
03C82:  BNZ   3CAA
03C84:  MOVF   x7E,W
03C86:  SUBLW  0F
03C88:  BNC   3CAA
....................                      {
....................                         //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                         Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
03C8A:  MOVLW  08
03C8C:  SUBWF  x7E,W
03C8E:  MOVWF  00
03C90:  MOVLW  00
03C92:  SUBWFB x7F,W
03C94:  MOVWF  03
03C96:  MOVFF  00,01
03C9A:  MOVFF  4A,583
03C9E:  MOVF   01,F
03CA0:  BZ    3CAA
03CA2:  BCF    FD8.0
03CA4:  RRCF   x83,F
03CA6:  DECFSZ 01,F
03CA8:  BRA    3CA2
....................                      }
....................    
....................    
....................                      if(No_PointCount == 0x08)
03CAA:  MOVF   x80,W
03CAC:  SUBLW  08
03CAE:  BNZ   3CB6
03CB0:  MOVF   x81,F
03CB2:  BNZ   3CB6
....................                      {
....................                         Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                      }
03CB4:  BRA    3D20
....................                      else if(No_PointCount == 0x07)
03CB6:  MOVF   x80,W
03CB8:  SUBLW  07
03CBA:  BNZ   3CC4
03CBC:  MOVF   x81,F
03CBE:  BNZ   3CC4
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
03CC0:  BCF    x83.7
....................                      }
03CC2:  BRA    3D20
....................                      else if(No_PointCount == 0x06)
03CC4:  MOVF   x80,W
03CC6:  SUBLW  06
03CC8:  BNZ   3CD4
03CCA:  MOVF   x81,F
03CCC:  BNZ   3CD4
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
03CCE:  MOVLW  3F
03CD0:  ANDWF  x83,F
....................                      }
03CD2:  BRA    3D20
....................                      else if(No_PointCount == 0x05)
03CD4:  MOVF   x80,W
03CD6:  SUBLW  05
03CD8:  BNZ   3CE4
03CDA:  MOVF   x81,F
03CDC:  BNZ   3CE4
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
03CDE:  MOVLW  1F
03CE0:  ANDWF  x83,F
....................                      }
03CE2:  BRA    3D20
....................                      else if(No_PointCount == 0x04)
03CE4:  MOVF   x80,W
03CE6:  SUBLW  04
03CE8:  BNZ   3CF4
03CEA:  MOVF   x81,F
03CEC:  BNZ   3CF4
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
03CEE:  MOVLW  0F
03CF0:  ANDWF  x83,F
....................                      }
03CF2:  BRA    3D20
....................                      else if(No_PointCount == 0x03)
03CF4:  MOVF   x80,W
03CF6:  SUBLW  03
03CF8:  BNZ   3D04
03CFA:  MOVF   x81,F
03CFC:  BNZ   3D04
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
03CFE:  MOVLW  07
03D00:  ANDWF  x83,F
....................                      }
03D02:  BRA    3D20
....................                      else if(No_PointCount == 0x02)
03D04:  MOVF   x80,W
03D06:  SUBLW  02
03D08:  BNZ   3D14
03D0A:  MOVF   x81,F
03D0C:  BNZ   3D14
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
03D0E:  MOVLW  03
03D10:  ANDWF  x83,F
....................                      }
03D12:  BRA    3D20
....................                      else if(No_PointCount == 0x01)
03D14:  DECFSZ x80,W
03D16:  BRA    3D20
03D18:  MOVF   x81,F
03D1A:  BNZ   3D20
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
03D1C:  MOVLW  01
03D1E:  ANDWF  x83,F
....................                      }
....................    
....................                      TxD_Buff[0] = Address ;         //Address
03D20:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x01 ;         //Function Code
03D24:  MOVLW  01
03D26:  MOVLB  0
03D28:  MOVWF  x7C
....................                      TxD_Buff[2] = Data_ByteCount ;   //Byte Count
03D2A:  MOVFF  582,7D
....................                      TxD_Buff[3] = Data_Buff[0] ;   //Data
03D2E:  MOVFF  583,7E
....................    
....................                      CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
03D32:  MOVLB  C
03D34:  CLRF   x26
03D36:  MOVLW  7B
03D38:  MOVWF  x25
03D3A:  MOVLW  04
03D3C:  MOVWF  x27
03D3E:  MOVLB  0
03D40:  CALL   2EF0
....................    
....................                      TxD_Buff[4] = CRC_Hi ;
03D44:  MOVFF  57B,7F
....................                      TxD_Buff[5] = CRC_Lo ;
03D48:  MOVFF  57A,80
....................    
....................                      //TxD_DataLen = 0x06 ;
....................                      //rs485_ctrl = 1;
....................                      //dmsec(4);
....................                      //send = 1;
....................                      //TI=1;
....................                      output_bit(P485ctrl,1);
03D4C:  BSF    F8A.3
03D4E:  BCF    F93.3
....................                      restart_wdt();
03D50:  CLRWDT
....................                      delay_ms(4);
03D52:  MOVLW  04
03D54:  MOVLB  C
03D56:  MOVWF  x24
03D58:  MOVLB  0
03D5A:  CALL   0952
....................                      restart_wdt();
03D5E:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
03D60:  MOVF   x7B,W
03D62:  CALL   2F46
....................                      putc(TxD_Buff[1]) ;               //Function Code
03D66:  MOVF   x7C,W
03D68:  CALL   2F46
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03D6C:  MOVF   x7D,W
03D6E:  CALL   2F46
....................                      putc(TxD_Buff[3]) ;
03D72:  MOVF   x7E,W
03D74:  CALL   2F46
....................                      putc(TxD_Buff[4]) ;
03D78:  MOVF   x7F,W
03D7A:  CALL   2F46
....................                      putc(TxD_Buff[5]) ;
03D7E:  MOVF   x80,W
03D80:  CALL   2F46
....................                      //putc(TxD_Buff[6]) ;
....................                      //putc(TxD_Buff[7]) ;
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................                   
....................                      restart_wdt();
03D84:  CLRWDT
....................                      delay_ms(3);
03D86:  MOVLW  03
03D88:  MOVLB  C
03D8A:  MOVWF  x24
03D8C:  MOVLB  0
03D8E:  CALL   0952
....................                      restart_wdt();
03D92:  CLRWDT
....................                      output_bit(P485ctrl,0);
03D94:  BCF    F8A.3
03D96:  BCF    F93.3
....................                  
....................                   }
03D98:  BRA    3F60
03D9A:  MOVLB  5
....................                   else if(Data_ByteCount == 0x02)
03D9C:  MOVF   x82,W
03D9E:  SUBLW  02
03DA0:  BTFSS  FD8.2
03DA2:  BRA    3F62
....................                   {
....................                      //Data_Buff[1] = ~output[1] >> Start_Address ;
....................                      //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                      //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                      
....................                      //Data_Buff[1] = Output9_16 >> Start_Address ;//jj
....................                      //DataTemp = Output9_16 << (0x08 - Start_Address) ;//jj
....................                      //Data_Buff[0] = (Output1_8 >> Start_Address) | DataTemp;   //Low Byte//jj
....................                      Data_Buff[0] = Input1_8 >> Start_Address ;
03DA4:  MOVFF  49,583
03DA8:  MOVF   x7E,W
03DAA:  MOVWF  01
03DAC:  BZ    3DB6
03DAE:  BCF    FD8.0
03DB0:  RRCF   x83,F
03DB2:  DECFSZ 01,F
03DB4:  BRA    3DAE
....................                      Data_Buff[1] = Input9_16 ;// >> Start_Address ;
03DB6:  MOVFF  4A,584
....................    
....................    
....................                      if((No_PointCount - 0x07) == 0x08)
03DBA:  MOVLW  07
03DBC:  SUBWF  x80,W
03DBE:  MOVLB  C
03DC0:  MOVWF  x24
03DC2:  MOVLW  00
03DC4:  MOVLB  5
03DC6:  SUBWFB x81,W
03DC8:  MOVLB  C
03DCA:  MOVWF  x25
03DCC:  MOVF   x24,W
03DCE:  SUBLW  08
03DD0:  BNZ   3DD8
03DD2:  MOVF   x25,F
03DD4:  BNZ   3DD8
....................                      {
....................                         Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                      }
03DD6:  BRA    3EDE
....................                      else if((No_PointCount - 0x07) == 0x07)
03DD8:  MOVLW  07
03DDA:  MOVLB  5
03DDC:  SUBWF  x80,W
03DDE:  MOVLB  C
03DE0:  MOVWF  x24
03DE2:  MOVLW  00
03DE4:  MOVLB  5
03DE6:  SUBWFB x81,W
03DE8:  MOVLB  C
03DEA:  MOVWF  x25
03DEC:  MOVF   x24,W
03DEE:  SUBLW  07
03DF0:  BNZ   3DFC
03DF2:  MOVF   x25,F
03DF4:  BNZ   3DFC
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
03DF6:  MOVLB  5
03DF8:  BCF    x84.7
....................                      }
03DFA:  BRA    3EDC
....................                      else if((No_PointCount - 0x07) == 0x06)
03DFC:  MOVLW  07
03DFE:  MOVLB  5
03E00:  SUBWF  x80,W
03E02:  MOVLB  C
03E04:  MOVWF  x24
03E06:  MOVLW  00
03E08:  MOVLB  5
03E0A:  SUBWFB x81,W
03E0C:  MOVLB  C
03E0E:  MOVWF  x25
03E10:  MOVF   x24,W
03E12:  SUBLW  06
03E14:  BNZ   3E22
03E16:  MOVF   x25,F
03E18:  BNZ   3E22
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
03E1A:  MOVLW  3F
03E1C:  MOVLB  5
03E1E:  ANDWF  x84,F
....................                      }
03E20:  BRA    3EDC
....................                      else if((No_PointCount - 0x07) == 0x05)
03E22:  MOVLW  07
03E24:  MOVLB  5
03E26:  SUBWF  x80,W
03E28:  MOVLB  C
03E2A:  MOVWF  x24
03E2C:  MOVLW  00
03E2E:  MOVLB  5
03E30:  SUBWFB x81,W
03E32:  MOVLB  C
03E34:  MOVWF  x25
03E36:  MOVF   x24,W
03E38:  SUBLW  05
03E3A:  BNZ   3E48
03E3C:  MOVF   x25,F
03E3E:  BNZ   3E48
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
03E40:  MOVLW  1F
03E42:  MOVLB  5
03E44:  ANDWF  x84,F
....................                      }
03E46:  BRA    3EDC
....................                      else if((No_PointCount - 0x07) == 0x04)
03E48:  MOVLW  07
03E4A:  MOVLB  5
03E4C:  SUBWF  x80,W
03E4E:  MOVLB  C
03E50:  MOVWF  x24
03E52:  MOVLW  00
03E54:  MOVLB  5
03E56:  SUBWFB x81,W
03E58:  MOVLB  C
03E5A:  MOVWF  x25
03E5C:  MOVF   x24,W
03E5E:  SUBLW  04
03E60:  BNZ   3E6E
03E62:  MOVF   x25,F
03E64:  BNZ   3E6E
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
03E66:  MOVLW  0F
03E68:  MOVLB  5
03E6A:  ANDWF  x84,F
....................                      }
03E6C:  BRA    3EDC
....................                      else if((No_PointCount - 0x07) == 0x03)
03E6E:  MOVLW  07
03E70:  MOVLB  5
03E72:  SUBWF  x80,W
03E74:  MOVLB  C
03E76:  MOVWF  x24
03E78:  MOVLW  00
03E7A:  MOVLB  5
03E7C:  SUBWFB x81,W
03E7E:  MOVLB  C
03E80:  MOVWF  x25
03E82:  MOVF   x24,W
03E84:  SUBLW  03
03E86:  BNZ   3E94
03E88:  MOVF   x25,F
03E8A:  BNZ   3E94
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
03E8C:  MOVLW  07
03E8E:  MOVLB  5
03E90:  ANDWF  x84,F
....................                      }
03E92:  BRA    3EDC
....................                      else if((No_PointCount - 0x07) == 0x02)
03E94:  MOVLW  07
03E96:  MOVLB  5
03E98:  SUBWF  x80,W
03E9A:  MOVLB  C
03E9C:  MOVWF  x24
03E9E:  MOVLW  00
03EA0:  MOVLB  5
03EA2:  SUBWFB x81,W
03EA4:  MOVLB  C
03EA6:  MOVWF  x25
03EA8:  MOVF   x24,W
03EAA:  SUBLW  02
03EAC:  BNZ   3EBA
03EAE:  MOVF   x25,F
03EB0:  BNZ   3EBA
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
03EB2:  MOVLW  03
03EB4:  MOVLB  5
03EB6:  ANDWF  x84,F
....................                      }
03EB8:  BRA    3EDC
....................                      else if((No_PointCount - 0x07) == 0x01)
03EBA:  MOVLW  07
03EBC:  MOVLB  5
03EBE:  SUBWF  x80,W
03EC0:  MOVLB  C
03EC2:  MOVWF  x24
03EC4:  MOVLW  00
03EC6:  MOVLB  5
03EC8:  SUBWFB x81,W
03ECA:  MOVLB  C
03ECC:  MOVWF  x25
03ECE:  DECFSZ x24,W
03ED0:  BRA    3EDE
03ED2:  MOVF   x25,F
03ED4:  BNZ   3EDE
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
03ED6:  MOVLW  01
03ED8:  MOVLB  5
03EDA:  ANDWF  x84,F
03EDC:  MOVLB  C
....................                      }
....................    
....................                      TxD_Buff[0] = Address ;         //Address
03EDE:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x01 ;         //Function Code
03EE2:  MOVLW  01
03EE4:  MOVLB  0
03EE6:  MOVWF  x7C
....................                      TxD_Buff[2] = Data_ByteCount ;   //Byte Count
03EE8:  MOVFF  582,7D
....................                      TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
03EEC:  MOVFF  583,7E
....................                      TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
03EF0:  MOVFF  584,7F
....................    
....................                      CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
03EF4:  MOVLB  C
03EF6:  CLRF   x26
03EF8:  MOVLW  7B
03EFA:  MOVWF  x25
03EFC:  MOVLW  05
03EFE:  MOVWF  x27
03F00:  MOVLB  0
03F02:  CALL   2EF0
....................    
....................                      TxD_Buff[5] = CRC_Hi ;
03F06:  MOVFF  57B,80
....................                      TxD_Buff[6] = CRC_Lo ;
03F0A:  MOVFF  57A,81
....................    
....................                      //TxD_DataLen = 0x07 ;
....................                      //rs485_ctrl = 1;
....................                      //dmsec(4);
....................                      //send = 1;
....................                      //TI=1;
....................                      output_bit(P485ctrl,1);
03F0E:  BSF    F8A.3
03F10:  BCF    F93.3
....................                      restart_wdt();
03F12:  CLRWDT
....................                      delay_ms(4);
03F14:  MOVLW  04
03F16:  MOVLB  C
03F18:  MOVWF  x24
03F1A:  MOVLB  0
03F1C:  CALL   0952
....................                      restart_wdt();
03F20:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
03F22:  MOVF   x7B,W
03F24:  CALL   2F46
....................                      putc(TxD_Buff[1]) ;               //Function Code
03F28:  MOVF   x7C,W
03F2A:  CALL   2F46
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03F2E:  MOVF   x7D,W
03F30:  CALL   2F46
....................                      putc(TxD_Buff[3]) ;
03F34:  MOVF   x7E,W
03F36:  CALL   2F46
....................                      putc(TxD_Buff[4]) ;
03F3A:  MOVF   x7F,W
03F3C:  CALL   2F46
....................                      putc(TxD_Buff[5]) ;
03F40:  MOVF   x80,W
03F42:  CALL   2F46
....................                      putc(TxD_Buff[6]) ;
03F46:  MOVF   x81,W
03F48:  CALL   2F46
....................                      //putc(TxD_Buff[7]) ;
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
03F4C:  CLRWDT
....................                      delay_ms(3);
03F4E:  MOVLW  03
03F50:  MOVLB  C
03F52:  MOVWF  x24
03F54:  MOVLB  0
03F56:  CALL   0952
....................                      restart_wdt();
03F5A:  CLRWDT
....................                      output_bit(P485ctrl,0);
03F5C:  BCF    F8A.3
03F5E:  BCF    F93.3
03F60:  MOVLB  5
....................                  
....................                   }
....................                }
03F62:  BRA    3FD4
....................                else
....................                {
....................                   //invalid parameter
....................                   TxD_Buff[0] = Address ;         //Address
03F64:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x81 ;         //Function Code
03F68:  MOVLW  81
03F6A:  MOVLB  0
03F6C:  MOVWF  x7C
....................                   TxD_Buff[2] = 0x02 ;         //illegal data address
03F6E:  MOVLW  02
03F70:  MOVWF  x7D
....................    
....................                   CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
03F72:  MOVLB  C
03F74:  CLRF   x26
03F76:  MOVLW  7B
03F78:  MOVWF  x25
03F7A:  MOVLW  03
03F7C:  MOVWF  x27
03F7E:  MOVLB  0
03F80:  CALL   2EF0
....................    
....................                   TxD_Buff[3] = CRC_Hi ;
03F84:  MOVFF  57B,7E
....................                   TxD_Buff[4] = CRC_Lo ;
03F88:  MOVFF  57A,7F
....................    
....................                   //TxD_DataLen = 0x05 ;
....................                   //rs485_ctrl = 1;
....................                   //restart_wdt();
....................                   //dmsec(4);
....................                   //restart_wdt();
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
03F8C:  BSF    F8A.3
03F8E:  BCF    F93.3
....................                   restart_wdt();
03F90:  CLRWDT
....................                   delay_ms(4);
03F92:  MOVLW  04
03F94:  MOVLB  C
03F96:  MOVWF  x24
03F98:  MOVLB  0
03F9A:  CALL   0952
....................                   restart_wdt();
03F9E:  CLRWDT
....................    
....................                   putc(TxD_Buff[0]) ;               //Address
03FA0:  MOVF   x7B,W
03FA2:  CALL   2F46
....................                   putc(TxD_Buff[1]) ;               //Function Code
03FA6:  MOVF   x7C,W
03FA8:  CALL   2F46
....................                   putc(TxD_Buff[2]) ;               //Byte Count
03FAC:  MOVF   x7D,W
03FAE:  CALL   2F46
....................                   putc(TxD_Buff[3]) ;
03FB2:  MOVF   x7E,W
03FB4:  CALL   2F46
....................                   putc(TxD_Buff[4]) ;
03FB8:  MOVF   x7F,W
03FBA:  CALL   2F46
....................                  //putc(TxD_Buff[5]) ;
....................                   //putc(TxD_Buff[6]) ;
....................                   //putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
....................    
....................                   restart_wdt();
03FBE:  CLRWDT
....................                   delay_ms(3);
03FC0:  MOVLW  03
03FC2:  MOVLB  C
03FC4:  MOVWF  x24
03FC6:  MOVLB  0
03FC8:  CALL   0952
....................                   restart_wdt();
03FCC:  CLRWDT
....................                   output_bit(P485ctrl,0);
03FCE:  BCF    F8A.3
03FD0:  BCF    F93.3
03FD2:  MOVLB  5
03FD4:  MOVLB  1
....................                   
....................                }
....................             }
....................    
....................     
....................          if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
03FD6:  MOVF   x7B,W
03FD8:  SUBLW  07
03FDA:  BTFSS  FD8.2
03FDC:  BRA    4140
....................          {
....................             alarmtosend();
03FDE:  MOVLB  0
03FE0:  GOTO   2F4E
....................             
....................             disable_interrupts(INT_TIMER2);
03FE4:  BCF    F9D.1
....................             //----------------------------------jj----------------------------//
....................             
....................                Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
03FE6:  MOVFF  1E,583
....................                Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
03FEA:  MOVFF  1F,584
....................                Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
03FEE:  MOVFF  20,585
....................                Data_Buff[3] = Input25_32_Send ;
03FF2:  MOVFF  21,586
....................                Data_Buff[4] = Input33_40_Send ;
03FF6:  MOVFF  22,587
....................                Data_Buff[5] = Input41_48_Send ;
03FFA:  MOVFF  23,588
....................                Data_Buff[6] = Input49_56_Send ;
03FFE:  MOVFF  24,589
....................                Data_Buff[7] = Input57_64_Send ;
04002:  MOVFF  25,58A
....................               
....................                Data_Buff[8] = Ack1_8_Send ;
04006:  MOVFF  26,58B
....................                Data_Buff[9] = Ack9_16_Send ;
0400A:  MOVFF  27,58C
....................                Data_Buff[10] = Ack17_24_Send ;
0400E:  MOVFF  28,58D
....................                Data_Buff[11] = Ack25_32_Send ;
04012:  MOVFF  29,58E
....................                Data_Buff[12] = Ack33_40_Send ;
04016:  MOVFF  2A,58F
....................                Data_Buff[13] = Ack41_48_Send ;
0401A:  MOVFF  2B,590
....................                Data_Buff[14] = Ack49_56_Send ;
0401E:  MOVFF  2C,591
....................                Data_Buff[15] = Ack57_64_Send ;
04022:  MOVFF  2D,592
....................       
....................                
....................                
....................                TxD_Buff[0] = Address ;         //Address
04026:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x07 ;         //Function Code
0402A:  MOVLW  07
0402C:  MOVWF  x7C
....................                TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
0402E:  MOVLW  10
04030:  MOVLB  5
04032:  MOVWF  x82
04034:  MOVFF  582,7D
....................                TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
04038:  MOVFF  583,7E
....................                TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
0403C:  MOVFF  584,7F
....................                TxD_Buff[5] = Data_Buff[2] ;  
04040:  MOVFF  585,80
....................                TxD_Buff[6] = Data_Buff[3] ;
04044:  MOVFF  586,81
....................                TxD_Buff[7] = Data_Buff[4] ;
04048:  MOVFF  587,82
....................                TxD_Buff[8] = Data_Buff[5] ;
0404C:  MOVFF  588,83
....................                TxD_Buff[9] = Data_Buff[6] ;
04050:  MOVFF  589,84
....................                TxD_Buff[10] = Data_Buff[7] ;
04054:  MOVFF  58A,85
....................                  
....................               TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
04058:  MOVFF  58B,86
....................               TxD_Buff[12] = Data_Buff[9] ;
0405C:  MOVFF  58C,87
....................               TxD_Buff[13] = Data_Buff[10] ;
04060:  MOVFF  58D,88
....................               TxD_Buff[14] = Data_Buff[11] ;
04064:  MOVFF  58E,89
....................               TxD_Buff[15] = Data_Buff[12] ;
04068:  MOVFF  58F,8A
....................               TxD_Buff[16] = Data_Buff[13] ;
0406C:  MOVFF  590,8B
....................               TxD_Buff[17] = Data_Buff[14] ;
04070:  MOVFF  591,8C
....................               TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
04074:  MOVFF  592,8D
....................    
....................               CRC(TxD_Buff,19);            //Cal CRC 5 Byte
04078:  MOVLB  C
0407A:  CLRF   x26
0407C:  MOVLW  7B
0407E:  MOVWF  x25
04080:  MOVLW  13
04082:  MOVWF  x27
04084:  MOVLB  0
04086:  CALL   2EF0
....................    
....................              TxD_Buff[19] = CRC_Hi ;
0408A:  MOVFF  57B,8E
....................              TxD_Buff[20] = CRC_Lo ;
0408E:  MOVFF  57A,8F
....................    
....................            
....................             output_bit(P485ctrl,1);
04092:  BSF    F8A.3
04094:  BCF    F93.3
....................             restart_wdt();
04096:  CLRWDT
....................             delay_ms(4);
04098:  MOVLW  04
0409A:  MOVLB  C
0409C:  MOVWF  x24
0409E:  MOVLB  0
040A0:  CALL   0952
....................             restart_wdt();
040A4:  CLRWDT
....................             
....................             
....................             
....................             putc(TxD_Buff[0]) ;               //Address
040A6:  MOVF   x7B,W
040A8:  CALL   2F46
....................             putc(TxD_Buff[1]) ;               //Function Code
040AC:  MOVF   x7C,W
040AE:  CALL   2F46
....................             putc(TxD_Buff[2]) ;               //Byte Count
040B2:  MOVF   x7D,W
040B4:  CALL   2F46
....................             putc(TxD_Buff[3]) ;
040B8:  MOVF   x7E,W
040BA:  CALL   2F46
....................             putc(TxD_Buff[4]) ;
040BE:  MOVF   x7F,W
040C0:  CALL   2F46
....................             putc(TxD_Buff[5]) ;
040C4:  MOVF   x80,W
040C6:  CALL   2F46
....................             putc(TxD_Buff[6]) ;
040CA:  MOVF   x81,W
040CC:  CALL   2F46
....................             putc(TxD_Buff[7]) ;
040D0:  MOVF   x82,W
040D2:  CALL   2F46
....................             putc(TxD_Buff[8]) ;
040D6:  MOVF   x83,W
040D8:  CALL   2F46
....................             putc(TxD_Buff[9]) ;
040DC:  MOVF   x84,W
040DE:  CALL   2F46
....................             putc(TxD_Buff[10]) ;
040E2:  MOVF   x85,W
040E4:  CALL   2F46
....................             putc(TxD_Buff[11]) ;
040E8:  MOVF   x86,W
040EA:  CALL   2F46
....................             putc(TxD_Buff[12]) ;
040EE:  MOVF   x87,W
040F0:  CALL   2F46
....................             putc(TxD_Buff[13]) ;
040F4:  MOVF   x88,W
040F6:  CALL   2F46
....................             putc(TxD_Buff[14]) ;
040FA:  MOVF   x89,W
040FC:  CALL   2F46
....................             putc(TxD_Buff[15]) ;
04100:  MOVF   x8A,W
04102:  CALL   2F46
....................             putc(TxD_Buff[16]) ;
04106:  MOVF   x8B,W
04108:  CALL   2F46
....................             putc(TxD_Buff[17]) ;
0410C:  MOVF   x8C,W
0410E:  CALL   2F46
....................             putc(TxD_Buff[18]) ;
04112:  MOVF   x8D,W
04114:  CALL   2F46
....................             putc(TxD_Buff[19]) ;
04118:  MOVF   x8E,W
0411A:  CALL   2F46
....................             putc(TxD_Buff[20]) ;
0411E:  MOVF   x8F,W
04120:  CALL   2F46
....................    
....................             restart_wdt();
04124:  CLRWDT
....................             delay_ms(3);
04126:  MOVLW  03
04128:  MOVLB  C
0412A:  MOVWF  x24
0412C:  MOVLB  0
0412E:  CALL   0952
....................             restart_wdt();
04132:  CLRWDT
....................             output_bit(P485ctrl,0);
04134:  BCF    F8A.3
04136:  BCF    F93.3
....................               
....................            
....................             /////////////////////////////////////////
....................             
....................            enable_interrupts(INT_TIMER2); 
04138:  BSF    F9D.1
....................         
....................           }
0413A:  GOTO   60B2
0413E:  MOVLB  1
....................    
....................           else if(RxD_Buff[1] == 0x05)///////////// FORCE COIL /////////////////////
04140:  MOVF   x7B,W
04142:  SUBLW  05
04144:  BTFSS  FD8.2
04146:  BRA    4634
....................           {
....................                //Do Force Coil
....................                Start_Address = RxD_Buff[2] ;
04148:  MOVLB  5
0414A:  CLRF   x7F
0414C:  MOVFF  17C,57E
....................                Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Coil Address 16 bit
04150:  MOVFF  57E,57F
04154:  MOVLB  C
04156:  CLRF   x24
04158:  MOVF   x24,W
0415A:  MOVLB  1
0415C:  IORWF  x7D,W
0415E:  MOVLB  5
04160:  MOVWF  x7E
04162:  MOVLB  5
....................                No_PointCount = RxD_Buff[4] ;
04164:  CLRF   x81
04166:  MOVFF  17E,580
....................                No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //Force Data 16 bit FF00 = ON, 00FF = OFF
0416A:  MOVFF  580,581
0416E:  MOVLB  C
04170:  CLRF   x24
04172:  MOVF   x24,W
04174:  MOVLB  1
04176:  IORWF  x7F,W
04178:  MOVLB  5
0417A:  MOVWF  x80
0417C:  MOVLB  5
....................    
....................                if(Start_Address == 0x00)   ////// Acknowlegde //////
0417E:  MOVF   x7E,F
04180:  BNZ   4220
04182:  MOVF   x7F,F
04184:  BNZ   4220
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
04186:  MOVF   x80,F
04188:  BNZ   421E
0418A:  INCFSZ x81,W
0418C:  BRA    421E
....................                   {
....................                      //Modbus_ACK = 1 ;
....................                      AutoAckFlag = 1;
0418E:  BSF    1A.2
....................    
....................                      TxD_Buff[0] = Address ;         //Address
04190:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
04194:  MOVLW  05
04196:  MOVLB  0
04198:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0419A:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
0419E:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
041A2:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
041A6:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6);            //Cal CRC 6 Byte
041AA:  MOVLB  C
041AC:  CLRF   x26
041AE:  MOVLW  7B
041B0:  MOVWF  x25
041B2:  MOVLW  06
041B4:  MOVWF  x27
041B6:  MOVLB  0
041B8:  CALL   2EF0
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
041BC:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
041C0:  MOVFF  57A,82
....................    
....................                  output_bit(P485ctrl,1);
041C4:  BSF    F8A.3
041C6:  BCF    F93.3
....................                      restart_wdt();
041C8:  CLRWDT
....................                      delay_ms(4);
041CA:  MOVLW  04
041CC:  MOVLB  C
041CE:  MOVWF  x24
041D0:  MOVLB  0
041D2:  CALL   0952
....................                      restart_wdt();
041D6:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
041D8:  MOVF   x7B,W
041DA:  CALL   2F46
....................                      putc(TxD_Buff[1]) ;               //Function Code
041DE:  MOVF   x7C,W
041E0:  CALL   2F46
....................                      putc(TxD_Buff[2]) ;               //Byte Count
041E4:  MOVF   x7D,W
041E6:  CALL   2F46
....................                      putc(TxD_Buff[3]) ;
041EA:  MOVF   x7E,W
041EC:  CALL   2F46
....................                      putc(TxD_Buff[4]) ;
041F0:  MOVF   x7F,W
041F2:  CALL   2F46
....................                      putc(TxD_Buff[5]) ;
041F6:  MOVF   x80,W
041F8:  CALL   2F46
....................                      putc(TxD_Buff[6]) ;
041FC:  MOVF   x81,W
041FE:  CALL   2F46
....................                      putc(TxD_Buff[7]) ;
04202:  MOVF   x82,W
04204:  CALL   2F46
....................    
....................                      restart_wdt();
04208:  CLRWDT
....................                      delay_ms(3);
0420A:  MOVLW  03
0420C:  MOVLB  C
0420E:  MOVWF  x24
04210:  MOVLB  0
04212:  CALL   0952
....................                      restart_wdt();
04216:  CLRWDT
....................                      output_bit(P485ctrl,0);
04218:  BCF    F8A.3
0421A:  BCF    F93.3
0421C:  MOVLB  5
....................                  
....................                   }
....................                }
0421E:  BRA    462E
....................                else if(Start_Address == 0x01)   ///// Reset //////
04220:  DECFSZ x7E,W
04222:  BRA    42C2
04224:  MOVF   x7F,F
04226:  BNZ   42C2
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
04228:  MOVF   x80,F
0422A:  BNZ   42C0
0422C:  INCFSZ x81,W
0422E:  BRA    42C0
....................                   {
....................                      //Modbus_RET = 1 ;
....................                      AutoResetFlag = 1;
04230:  BSF    1A.3
....................                      
....................                      TxD_Buff[0] = Address ;         //Address
04232:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
04236:  MOVLW  05
04238:  MOVLB  0
0423A:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0423C:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04240:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04244:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04248:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
0424C:  MOVLB  C
0424E:  CLRF   x26
04250:  MOVLW  7B
04252:  MOVWF  x25
04254:  MOVLW  06
04256:  MOVWF  x27
04258:  MOVLB  0
0425A:  CALL   2EF0
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
0425E:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
04262:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
04266:  BSF    F8A.3
04268:  BCF    F93.3
....................                      restart_wdt();
0426A:  CLRWDT
....................                      delay_ms(4);
0426C:  MOVLW  04
0426E:  MOVLB  C
04270:  MOVWF  x24
04272:  MOVLB  0
04274:  CALL   0952
....................                      restart_wdt();
04278:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
0427A:  MOVF   x7B,W
0427C:  CALL   2F46
....................                      putc(TxD_Buff[1]) ;               //Function Code
04280:  MOVF   x7C,W
04282:  CALL   2F46
....................                      putc(TxD_Buff[2]) ;               //Byte Count
04286:  MOVF   x7D,W
04288:  CALL   2F46
....................                      putc(TxD_Buff[3]) ;
0428C:  MOVF   x7E,W
0428E:  CALL   2F46
....................                      putc(TxD_Buff[4]) ;
04292:  MOVF   x7F,W
04294:  CALL   2F46
....................                      putc(TxD_Buff[5]) ;
04298:  MOVF   x80,W
0429A:  CALL   2F46
....................                      putc(TxD_Buff[6]) ;
0429E:  MOVF   x81,W
042A0:  CALL   2F46
....................                      putc(TxD_Buff[7]) ;
042A4:  MOVF   x82,W
042A6:  CALL   2F46
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
042AA:  CLRWDT
....................                      delay_ms(3);
042AC:  MOVLW  03
042AE:  MOVLB  C
042B0:  MOVWF  x24
042B2:  MOVLB  0
042B4:  CALL   0952
....................                      restart_wdt();
042B8:  CLRWDT
....................                      output_bit(P485ctrl,0);
042BA:  BCF    F8A.3
042BC:  BCF    F93.3
042BE:  MOVLB  5
....................                  
....................                   }
....................                }
042C0:  BRA    462E
....................                else if(Start_Address == 0x02)   ///// Test //////
042C2:  MOVF   x7E,W
042C4:  SUBLW  02
042C6:  BTFSS  FD8.2
042C8:  BRA    4414
042CA:  MOVF   x7F,F
042CC:  BTFSS  FD8.2
042CE:  BRA    4414
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
042D0:  MOVF   x80,F
042D2:  BNZ   436A
042D4:  INCFSZ x81,W
042D6:  BRA    436A
....................                   {
....................                      //Modbus_Lamp_Test = 1 ;
....................                      AutoTestFlag = 1;
042D8:  BSF    1A.4
....................    
....................                      TxD_Buff[0] = Address ;         //Address
042DA:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
042DE:  MOVLW  05
042E0:  MOVLB  0
042E2:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
042E4:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
042E8:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
042EC:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
042F0:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
042F4:  MOVLB  C
042F6:  CLRF   x26
042F8:  MOVLW  7B
042FA:  MOVWF  x25
042FC:  MOVLW  06
042FE:  MOVWF  x27
04300:  MOVLB  0
04302:  CALL   2EF0
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
04306:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
0430A:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
0430E:  BSF    F8A.3
04310:  BCF    F93.3
....................                      restart_wdt();
04312:  CLRWDT
....................                      delay_ms(4);
04314:  MOVLW  04
04316:  MOVLB  C
04318:  MOVWF  x24
0431A:  MOVLB  0
0431C:  CALL   0952
....................                      restart_wdt();
04320:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
04322:  MOVF   x7B,W
04324:  CALL   2F46
....................                      putc(TxD_Buff[1]) ;               //Function Code
04328:  MOVF   x7C,W
0432A:  CALL   2F46
....................                      putc(TxD_Buff[2]) ;               //Byte Count
0432E:  MOVF   x7D,W
04330:  CALL   2F46
....................                      putc(TxD_Buff[3]) ;
04334:  MOVF   x7E,W
04336:  CALL   2F46
....................                      putc(TxD_Buff[4]) ;
0433A:  MOVF   x7F,W
0433C:  CALL   2F46
....................                      putc(TxD_Buff[5]) ;
04340:  MOVF   x80,W
04342:  CALL   2F46
....................                      putc(TxD_Buff[6]) ;
04346:  MOVF   x81,W
04348:  CALL   2F46
....................                      putc(TxD_Buff[7]) ;
0434C:  MOVF   x82,W
0434E:  CALL   2F46
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
04352:  CLRWDT
....................                      delay_ms(3);
04354:  MOVLW  03
04356:  MOVLB  C
04358:  MOVWF  x24
0435A:  MOVLB  0
0435C:  CALL   0952
....................                      restart_wdt();
04360:  CLRWDT
....................                      output_bit(P485ctrl,0);
04362:  BCF    F8A.3
04364:  BCF    F93.3
....................                 
....................                   }
04366:  BRA    4410
04368:  MOVLB  5
....................                   else if(No_PointCount == 0x00)   //OFF
0436A:  MOVF   x80,F
0436C:  BNZ   4412
0436E:  MOVF   x81,F
04370:  BNZ   4412
....................                   {
....................                      //Modbus_Lamp_Test = 0 ;
....................                      AutoTestFlag = 0;
04372:  BCF    1A.4
....................                      Read_input();
04374:  MOVLB  0
04376:  CALL   207C
....................                      AutoAckFlag = 1;
0437A:  BSF    1A.2
....................                      check_ack();
0437C:  CALL   329C
....................                      AutoResetFlag = 1;
04380:  BSF    1A.3
....................                      check_reset();
04382:  CALL   33EA
....................    
....................                      TxD_Buff[0] = Address ;         //Address
04386:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
0438A:  MOVLW  05
0438C:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0438E:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04392:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04396:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
0439A:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
0439E:  MOVLB  C
043A0:  CLRF   x26
043A2:  MOVLW  7B
043A4:  MOVWF  x25
043A6:  MOVLW  06
043A8:  MOVWF  x27
043AA:  MOVLB  0
043AC:  CALL   2EF0
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
043B0:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
043B4:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
043B8:  BSF    F8A.3
043BA:  BCF    F93.3
....................                      restart_wdt();
043BC:  CLRWDT
....................                      delay_ms(4);
043BE:  MOVLW  04
043C0:  MOVLB  C
043C2:  MOVWF  x24
043C4:  MOVLB  0
043C6:  CALL   0952
....................                      restart_wdt();
043CA:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
043CC:  MOVF   x7B,W
043CE:  CALL   2F46
....................                      putc(TxD_Buff[1]) ;               //Function Code
043D2:  MOVF   x7C,W
043D4:  CALL   2F46
....................                      putc(TxD_Buff[2]) ;               //Byte Count
043D8:  MOVF   x7D,W
043DA:  CALL   2F46
....................                      putc(TxD_Buff[3]) ;
043DE:  MOVF   x7E,W
043E0:  CALL   2F46
....................                      putc(TxD_Buff[4]) ;
043E4:  MOVF   x7F,W
043E6:  CALL   2F46
....................                      putc(TxD_Buff[5]) ;
043EA:  MOVF   x80,W
043EC:  CALL   2F46
....................                      putc(TxD_Buff[6]) ;
043F0:  MOVF   x81,W
043F2:  CALL   2F46
....................                      putc(TxD_Buff[7]) ;
043F6:  MOVF   x82,W
043F8:  CALL   2F46
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
043FC:  CLRWDT
....................                      delay_ms(3);
043FE:  MOVLW  03
04400:  MOVLB  C
04402:  MOVWF  x24
04404:  MOVLB  0
04406:  CALL   0952
....................                      restart_wdt();
0440A:  CLRWDT
....................                      output_bit(P485ctrl,0);
0440C:  BCF    F8A.3
0440E:  BCF    F93.3
04410:  MOVLB  5
....................                      
....................                   }
....................                }
04412:  BRA    462E
....................                else if(Start_Address == 0x03)   ///// Function Test //////
04414:  MOVF   x7E,W
04416:  SUBLW  03
04418:  BTFSS  FD8.2
0441A:  BRA    4566
0441C:  MOVF   x7F,F
0441E:  BTFSS  FD8.2
04420:  BRA    4566
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
04422:  MOVF   x80,F
04424:  BNZ   44BC
04426:  INCFSZ x81,W
04428:  BRA    44BC
....................                   {
....................                      //Modbus_Lamp_Test = 1 ;
....................                      Test_fault = 1 ;
0442A:  BSF    1A.5
....................    
....................                      TxD_Buff[0] = Address ;         //Address
0442C:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
04430:  MOVLW  05
04432:  MOVLB  0
04434:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04436:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
0443A:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
0443E:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04442:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04446:  MOVLB  C
04448:  CLRF   x26
0444A:  MOVLW  7B
0444C:  MOVWF  x25
0444E:  MOVLW  06
04450:  MOVWF  x27
04452:  MOVLB  0
04454:  CALL   2EF0
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
04458:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
0445C:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
04460:  BSF    F8A.3
04462:  BCF    F93.3
....................                      restart_wdt();
04464:  CLRWDT
....................                      delay_ms(4);
04466:  MOVLW  04
04468:  MOVLB  C
0446A:  MOVWF  x24
0446C:  MOVLB  0
0446E:  CALL   0952
....................                      restart_wdt();
04472:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
04474:  MOVF   x7B,W
04476:  CALL   2F46
....................                      putc(TxD_Buff[1]) ;               //Function Code
0447A:  MOVF   x7C,W
0447C:  CALL   2F46
....................                      putc(TxD_Buff[2]) ;               //Byte Count
04480:  MOVF   x7D,W
04482:  CALL   2F46
....................                      putc(TxD_Buff[3]) ;
04486:  MOVF   x7E,W
04488:  CALL   2F46
....................                      putc(TxD_Buff[4]) ;
0448C:  MOVF   x7F,W
0448E:  CALL   2F46
....................                      putc(TxD_Buff[5]) ;
04492:  MOVF   x80,W
04494:  CALL   2F46
....................                      putc(TxD_Buff[6]) ;
04498:  MOVF   x81,W
0449A:  CALL   2F46
....................                      putc(TxD_Buff[7]) ;
0449E:  MOVF   x82,W
044A0:  CALL   2F46
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
044A4:  CLRWDT
....................                      delay_ms(10);
044A6:  MOVLW  0A
044A8:  MOVLB  C
044AA:  MOVWF  x24
044AC:  MOVLB  0
044AE:  CALL   0952
....................                      restart_wdt();
044B2:  CLRWDT
....................                      output_bit(P485ctrl,0);
044B4:  BCF    F8A.3
044B6:  BCF    F93.3
....................                   }
044B8:  BRA    4562
044BA:  MOVLB  5
....................                   else if(No_PointCount == 0x00)   //OFF
044BC:  MOVF   x80,F
044BE:  BNZ   4564
044C0:  MOVF   x81,F
044C2:  BNZ   4564
....................                   {
....................                      //Modbus_Lamp_Test = 0 ;
....................                      Test_fault = 0;
044C4:  BCF    1A.5
....................                      Read_input();
044C6:  MOVLB  0
044C8:  CALL   207C
....................                      AutoAckFlag = 1;
044CC:  BSF    1A.2
....................                      check_ack();
044CE:  CALL   329C
....................                      AutoResetFlag = 1;
044D2:  BSF    1A.3
....................                      check_reset();
044D4:  CALL   33EA
....................    
....................                      TxD_Buff[0] = Address ;         //Address
044D8:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
044DC:  MOVLW  05
044DE:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
044E0:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
044E4:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
044E8:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
044EC:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
044F0:  MOVLB  C
044F2:  CLRF   x26
044F4:  MOVLW  7B
044F6:  MOVWF  x25
044F8:  MOVLW  06
044FA:  MOVWF  x27
044FC:  MOVLB  0
044FE:  CALL   2EF0
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
04502:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
04506:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
0450A:  BSF    F8A.3
0450C:  BCF    F93.3
....................                      restart_wdt();
0450E:  CLRWDT
....................                      delay_ms(4);
04510:  MOVLW  04
04512:  MOVLB  C
04514:  MOVWF  x24
04516:  MOVLB  0
04518:  CALL   0952
....................                      restart_wdt();
0451C:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
0451E:  MOVF   x7B,W
04520:  CALL   2F46
....................                      putc(TxD_Buff[1]) ;               //Function Code
04524:  MOVF   x7C,W
04526:  CALL   2F46
....................                      putc(TxD_Buff[2]) ;               //Byte Count
0452A:  MOVF   x7D,W
0452C:  CALL   2F46
....................                      putc(TxD_Buff[3]) ;
04530:  MOVF   x7E,W
04532:  CALL   2F46
....................                      putc(TxD_Buff[4]) ;
04536:  MOVF   x7F,W
04538:  CALL   2F46
....................                      putc(TxD_Buff[5]) ;
0453C:  MOVF   x80,W
0453E:  CALL   2F46
....................                      putc(TxD_Buff[6]) ;
04542:  MOVF   x81,W
04544:  CALL   2F46
....................                      putc(TxD_Buff[7]) ;
04548:  MOVF   x82,W
0454A:  CALL   2F46
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
0454E:  CLRWDT
....................                      delay_ms(3);
04550:  MOVLW  03
04552:  MOVLB  C
04554:  MOVWF  x24
04556:  MOVLB  0
04558:  CALL   0952
....................                      restart_wdt();
0455C:  CLRWDT
....................                      output_bit(P485ctrl,0);
0455E:  BCF    F8A.3
04560:  BCF    F93.3
04562:  MOVLB  5
....................                      
....................                   }
....................                }
04564:  BRA    462E
....................                else if(Start_Address == 0x64)   ///// Change Modbus Addr //////
04566:  MOVF   x7E,W
04568:  SUBLW  64
0456A:  BNZ   462E
0456C:  MOVF   x7F,F
0456E:  BNZ   462E
....................                {
....................                   Address = No_PointCount;
04570:  MOVFF  580,79
....................                   write_eeprom(0x1D,Address);   //Communication Address
04574:  MOVF   FF2,W
04576:  MOVWF  00
04578:  BCF    FF2.7
0457A:  CLRF   FAA
0457C:  MOVLW  1D
0457E:  MOVWF  FA9
04580:  MOVFF  79,FA8
04584:  BCF    FA6.6
04586:  BCF    FA6.7
04588:  BSF    FA6.2
0458A:  MOVLB  F
0458C:  MOVLW  55
0458E:  MOVWF  FA7
04590:  MOVLW  AA
04592:  MOVWF  FA7
04594:  BSF    FA6.1
04596:  BTFSC  FA6.1
04598:  BRA    4596
0459A:  BCF    FA6.2
0459C:  MOVF   00,W
0459E:  IORWF  FF2,F
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
045A0:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
045A4:  MOVLW  05
045A6:  MOVLB  0
045A8:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
045AA:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
045AE:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
045B2:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
045B6:  MOVFF  17F,80
....................    
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
045BA:  MOVLB  C
045BC:  CLRF   x26
045BE:  MOVLW  7B
045C0:  MOVWF  x25
045C2:  MOVLW  06
045C4:  MOVWF  x27
045C6:  MOVLB  0
045C8:  CALL   2EF0
....................    
....................                   TxD_Buff[6] = CRC_Hi ;
045CC:  MOVFF  57B,81
....................                   TxD_Buff[7] = CRC_Lo ;
045D0:  MOVFF  57A,82
....................    
....................                   output_bit(P485ctrl,1);
045D4:  BSF    F8A.3
045D6:  BCF    F93.3
....................                   restart_wdt();
045D8:  CLRWDT
....................                   delay_ms(4);
045DA:  MOVLW  04
045DC:  MOVLB  C
045DE:  MOVWF  x24
045E0:  MOVLB  0
045E2:  CALL   0952
....................                   restart_wdt();
045E6:  CLRWDT
....................    
....................                   putc(TxD_Buff[0]) ;               //Address
045E8:  MOVF   x7B,W
045EA:  CALL   2F46
....................                   putc(TxD_Buff[1]) ;               //Function Code
045EE:  MOVF   x7C,W
045F0:  CALL   2F46
....................                   putc(TxD_Buff[2]) ;               //Byte Count
045F4:  MOVF   x7D,W
045F6:  CALL   2F46
....................                   putc(TxD_Buff[3]) ;
045FA:  MOVF   x7E,W
045FC:  CALL   2F46
....................                   putc(TxD_Buff[4]) ;
04600:  MOVF   x7F,W
04602:  CALL   2F46
....................                   putc(TxD_Buff[5]) ;
04606:  MOVF   x80,W
04608:  CALL   2F46
....................                   putc(TxD_Buff[6]) ;
0460C:  MOVF   x81,W
0460E:  CALL   2F46
....................                   putc(TxD_Buff[7]) ;
04612:  MOVF   x82,W
04614:  CALL   2F46
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
....................    
....................                   restart_wdt();
04618:  CLRWDT
....................                   delay_ms(3);
0461A:  MOVLW  03
0461C:  MOVLB  C
0461E:  MOVWF  x24
04620:  MOVLB  0
04622:  CALL   0952
....................                   restart_wdt();
04626:  CLRWDT
....................                   output_bit(P485ctrl,0);
04628:  BCF    F8A.3
0462A:  BCF    F93.3
0462C:  MOVLB  5
....................    
....................    
....................                   //save_addr();
....................                }
....................             }
0462E:  GOTO   60B4
04632:  MOVLB  1
....................             //--------------------------------------------------//
....................    
....................             else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
04634:  MOVF   x7B,W
04636:  SUBLW  21
04638:  BTFSS  FD8.2
0463A:  GOTO   4FA2
....................             {
....................    
....................                write_eeprom(0x00,0x0F);
0463E:  MOVF   FF2,W
04640:  MOVWF  00
04642:  BCF    FF2.7
04644:  CLRF   FAA
04646:  CLRF   FA9
04648:  MOVLW  0F
0464A:  MOVWF  FA8
0464C:  BCF    FA6.6
0464E:  BCF    FA6.7
04650:  BSF    FA6.2
04652:  MOVLB  F
04654:  MOVLW  55
04656:  MOVWF  FA7
04658:  MOVLW  AA
0465A:  MOVWF  FA7
0465C:  BSF    FA6.1
0465E:  BTFSC  FA6.1
04660:  BRA    465E
04662:  BCF    FA6.2
04664:  MOVF   00,W
04666:  IORWF  FF2,F
....................    
....................                write_eeprom(0x01,RxD_Buff[3]);   //Input Type
04668:  MOVFF  FF2,00
0466C:  BCF    FF2.7
0466E:  CLRF   FAA
04670:  MOVLW  01
04672:  MOVWF  FA9
04674:  MOVFF  17D,FA8
04678:  BCF    FA6.6
0467A:  BCF    FA6.7
0467C:  BSF    FA6.2
0467E:  MOVLW  55
04680:  MOVWF  FA7
04682:  MOVLW  AA
04684:  MOVWF  FA7
04686:  BSF    FA6.1
04688:  BTFSC  FA6.1
0468A:  BRA    4688
0468C:  BCF    FA6.2
0468E:  MOVF   00,W
04690:  IORWF  FF2,F
....................                write_eeprom(0x02,RxD_Buff[4]);
04692:  MOVFF  FF2,00
04696:  BCF    FF2.7
04698:  CLRF   FAA
0469A:  MOVLW  02
0469C:  MOVWF  FA9
0469E:  MOVFF  17E,FA8
046A2:  BCF    FA6.6
046A4:  BCF    FA6.7
046A6:  BSF    FA6.2
046A8:  MOVLW  55
046AA:  MOVWF  FA7
046AC:  MOVLW  AA
046AE:  MOVWF  FA7
046B0:  BSF    FA6.1
046B2:  BTFSC  FA6.1
046B4:  BRA    46B2
046B6:  BCF    FA6.2
046B8:  MOVF   00,W
046BA:  IORWF  FF2,F
....................                write_eeprom(0x03,RxD_Buff[5]);
046BC:  MOVFF  FF2,00
046C0:  BCF    FF2.7
046C2:  CLRF   FAA
046C4:  MOVLW  03
046C6:  MOVWF  FA9
046C8:  MOVFF  17F,FA8
046CC:  BCF    FA6.6
046CE:  BCF    FA6.7
046D0:  BSF    FA6.2
046D2:  MOVLW  55
046D4:  MOVWF  FA7
046D6:  MOVLW  AA
046D8:  MOVWF  FA7
046DA:  BSF    FA6.1
046DC:  BTFSC  FA6.1
046DE:  BRA    46DC
046E0:  BCF    FA6.2
046E2:  MOVF   00,W
046E4:  IORWF  FF2,F
....................    
....................    
....................                write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
046E6:  MOVFF  FF2,00
046EA:  BCF    FF2.7
046EC:  CLRF   FAA
046EE:  MOVLW  04
046F0:  MOVWF  FA9
046F2:  MOVFF  180,FA8
046F6:  BCF    FA6.6
046F8:  BCF    FA6.7
046FA:  BSF    FA6.2
046FC:  MOVLW  55
046FE:  MOVWF  FA7
04700:  MOVLW  AA
04702:  MOVWF  FA7
04704:  BSF    FA6.1
04706:  BTFSC  FA6.1
04708:  BRA    4706
0470A:  BCF    FA6.2
0470C:  MOVF   00,W
0470E:  IORWF  FF2,F
....................                write_eeprom(0x05,RxD_Buff[7]);
04710:  MOVFF  FF2,00
04714:  BCF    FF2.7
04716:  CLRF   FAA
04718:  MOVLW  05
0471A:  MOVWF  FA9
0471C:  MOVFF  181,FA8
04720:  BCF    FA6.6
04722:  BCF    FA6.7
04724:  BSF    FA6.2
04726:  MOVLW  55
04728:  MOVWF  FA7
0472A:  MOVLW  AA
0472C:  MOVWF  FA7
0472E:  BSF    FA6.1
04730:  BTFSC  FA6.1
04732:  BRA    4730
04734:  BCF    FA6.2
04736:  MOVF   00,W
04738:  IORWF  FF2,F
....................                write_eeprom(0x06,RxD_Buff[8]);
0473A:  MOVFF  FF2,00
0473E:  BCF    FF2.7
04740:  CLRF   FAA
04742:  MOVLW  06
04744:  MOVWF  FA9
04746:  MOVFF  182,FA8
0474A:  BCF    FA6.6
0474C:  BCF    FA6.7
0474E:  BSF    FA6.2
04750:  MOVLW  55
04752:  MOVWF  FA7
04754:  MOVLW  AA
04756:  MOVWF  FA7
04758:  BSF    FA6.1
0475A:  BTFSC  FA6.1
0475C:  BRA    475A
0475E:  BCF    FA6.2
04760:  MOVF   00,W
04762:  IORWF  FF2,F
....................    
....................                write_eeprom(0x07,RxD_Buff[9]);   //Output Type
04764:  MOVFF  FF2,00
04768:  BCF    FF2.7
0476A:  CLRF   FAA
0476C:  MOVLW  07
0476E:  MOVWF  FA9
04770:  MOVFF  183,FA8
04774:  BCF    FA6.6
04776:  BCF    FA6.7
04778:  BSF    FA6.2
0477A:  MOVLW  55
0477C:  MOVWF  FA7
0477E:  MOVLW  AA
04780:  MOVWF  FA7
04782:  BSF    FA6.1
04784:  BTFSC  FA6.1
04786:  BRA    4784
04788:  BCF    FA6.2
0478A:  MOVF   00,W
0478C:  IORWF  FF2,F
....................                write_eeprom(0x08,RxD_Buff[10]);
0478E:  MOVFF  FF2,00
04792:  BCF    FF2.7
04794:  CLRF   FAA
04796:  MOVLW  08
04798:  MOVWF  FA9
0479A:  MOVFF  184,FA8
0479E:  BCF    FA6.6
047A0:  BCF    FA6.7
047A2:  BSF    FA6.2
047A4:  MOVLW  55
047A6:  MOVWF  FA7
047A8:  MOVLW  AA
047AA:  MOVWF  FA7
047AC:  BSF    FA6.1
047AE:  BTFSC  FA6.1
047B0:  BRA    47AE
047B2:  BCF    FA6.2
047B4:  MOVF   00,W
047B6:  IORWF  FF2,F
....................                write_eeprom(0x09,RxD_Buff[11]);
047B8:  MOVFF  FF2,00
047BC:  BCF    FF2.7
047BE:  CLRF   FAA
047C0:  MOVLW  09
047C2:  MOVWF  FA9
047C4:  MOVFF  185,FA8
047C8:  BCF    FA6.6
047CA:  BCF    FA6.7
047CC:  BSF    FA6.2
047CE:  MOVLW  55
047D0:  MOVWF  FA7
047D2:  MOVLW  AA
047D4:  MOVWF  FA7
047D6:  BSF    FA6.1
047D8:  BTFSC  FA6.1
047DA:  BRA    47D8
047DC:  BCF    FA6.2
047DE:  MOVF   00,W
047E0:  IORWF  FF2,F
....................    
....................                write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
047E2:  MOVFF  FF2,00
047E6:  BCF    FF2.7
047E8:  CLRF   FAA
047EA:  MOVLW  0A
047EC:  MOVWF  FA9
047EE:  MOVFF  186,FA8
047F2:  BCF    FA6.6
047F4:  BCF    FA6.7
047F6:  BSF    FA6.2
047F8:  MOVLW  55
047FA:  MOVWF  FA7
047FC:  MOVLW  AA
047FE:  MOVWF  FA7
04800:  BSF    FA6.1
04802:  BTFSC  FA6.1
04804:  BRA    4802
04806:  BCF    FA6.2
04808:  MOVF   00,W
0480A:  IORWF  FF2,F
....................                write_eeprom(0x0B,RxD_Buff[13]);
0480C:  MOVFF  FF2,00
04810:  BCF    FF2.7
04812:  CLRF   FAA
04814:  MOVLW  0B
04816:  MOVWF  FA9
04818:  MOVFF  187,FA8
0481C:  BCF    FA6.6
0481E:  BCF    FA6.7
04820:  BSF    FA6.2
04822:  MOVLW  55
04824:  MOVWF  FA7
04826:  MOVLW  AA
04828:  MOVWF  FA7
0482A:  BSF    FA6.1
0482C:  BTFSC  FA6.1
0482E:  BRA    482C
04830:  BCF    FA6.2
04832:  MOVF   00,W
04834:  IORWF  FF2,F
....................                write_eeprom(0x0C,RxD_Buff[14]);
04836:  MOVFF  FF2,00
0483A:  BCF    FF2.7
0483C:  CLRF   FAA
0483E:  MOVLW  0C
04840:  MOVWF  FA9
04842:  MOVFF  188,FA8
04846:  BCF    FA6.6
04848:  BCF    FA6.7
0484A:  BSF    FA6.2
0484C:  MOVLW  55
0484E:  MOVWF  FA7
04850:  MOVLW  AA
04852:  MOVWF  FA7
04854:  BSF    FA6.1
04856:  BTFSC  FA6.1
04858:  BRA    4856
0485A:  BCF    FA6.2
0485C:  MOVF   00,W
0485E:  IORWF  FF2,F
....................     
....................                write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
04860:  MOVFF  FF2,00
04864:  BCF    FF2.7
04866:  CLRF   FAA
04868:  MOVLW  0D
0486A:  MOVWF  FA9
0486C:  MOVFF  189,FA8
04870:  BCF    FA6.6
04872:  BCF    FA6.7
04874:  BSF    FA6.2
04876:  MOVLW  55
04878:  MOVWF  FA7
0487A:  MOVLW  AA
0487C:  MOVWF  FA7
0487E:  BSF    FA6.1
04880:  BTFSC  FA6.1
04882:  BRA    4880
04884:  BCF    FA6.2
04886:  MOVF   00,W
04888:  IORWF  FF2,F
....................                write_eeprom(0x0E,RxD_Buff[16]);
0488A:  MOVFF  FF2,00
0488E:  BCF    FF2.7
04890:  CLRF   FAA
04892:  MOVLW  0E
04894:  MOVWF  FA9
04896:  MOVFF  18A,FA8
0489A:  BCF    FA6.6
0489C:  BCF    FA6.7
0489E:  BSF    FA6.2
048A0:  MOVLW  55
048A2:  MOVWF  FA7
048A4:  MOVLW  AA
048A6:  MOVWF  FA7
048A8:  BSF    FA6.1
048AA:  BTFSC  FA6.1
048AC:  BRA    48AA
048AE:  BCF    FA6.2
048B0:  MOVF   00,W
048B2:  IORWF  FF2,F
....................                write_eeprom(0x0F,RxD_Buff[17]);
048B4:  MOVFF  FF2,00
048B8:  BCF    FF2.7
048BA:  CLRF   FAA
048BC:  MOVLW  0F
048BE:  MOVWF  FA9
048C0:  MOVFF  18B,FA8
048C4:  BCF    FA6.6
048C6:  BCF    FA6.7
048C8:  BSF    FA6.2
048CA:  MOVLW  55
048CC:  MOVWF  FA7
048CE:  MOVLW  AA
048D0:  MOVWF  FA7
048D2:  BSF    FA6.1
048D4:  BTFSC  FA6.1
048D6:  BRA    48D4
048D8:  BCF    FA6.2
048DA:  MOVF   00,W
048DC:  IORWF  FF2,F
....................    
....................                // LED Colour Config
....................                write_eeprom(0x10,RxD_Buff[18]); //Red1_8
048DE:  MOVFF  FF2,00
048E2:  BCF    FF2.7
048E4:  CLRF   FAA
048E6:  MOVLW  10
048E8:  MOVWF  FA9
048EA:  MOVFF  18C,FA8
048EE:  BCF    FA6.6
048F0:  BCF    FA6.7
048F2:  BSF    FA6.2
048F4:  MOVLW  55
048F6:  MOVWF  FA7
048F8:  MOVLW  AA
048FA:  MOVWF  FA7
048FC:  BSF    FA6.1
048FE:  BTFSC  FA6.1
04900:  BRA    48FE
04902:  BCF    FA6.2
04904:  MOVF   00,W
04906:  IORWF  FF2,F
....................                write_eeprom(0x11,RxD_Buff[19]); //Red9_10
04908:  MOVFF  FF2,00
0490C:  BCF    FF2.7
0490E:  CLRF   FAA
04910:  MOVLW  11
04912:  MOVWF  FA9
04914:  MOVFF  18D,FA8
04918:  BCF    FA6.6
0491A:  BCF    FA6.7
0491C:  BSF    FA6.2
0491E:  MOVLW  55
04920:  MOVWF  FA7
04922:  MOVLW  AA
04924:  MOVWF  FA7
04926:  BSF    FA6.1
04928:  BTFSC  FA6.1
0492A:  BRA    4928
0492C:  BCF    FA6.2
0492E:  MOVF   00,W
04930:  IORWF  FF2,F
....................                write_eeprom(0x12,RxD_Buff[20]); //Red11_18
04932:  MOVFF  FF2,00
04936:  BCF    FF2.7
04938:  CLRF   FAA
0493A:  MOVLW  12
0493C:  MOVWF  FA9
0493E:  MOVFF  18E,FA8
04942:  BCF    FA6.6
04944:  BCF    FA6.7
04946:  BSF    FA6.2
04948:  MOVLW  55
0494A:  MOVWF  FA7
0494C:  MOVLW  AA
0494E:  MOVWF  FA7
04950:  BSF    FA6.1
04952:  BTFSC  FA6.1
04954:  BRA    4952
04956:  BCF    FA6.2
04958:  MOVF   00,W
0495A:  IORWF  FF2,F
....................                write_eeprom(0x13,RxD_Buff[21]); //Red19_20
0495C:  MOVFF  FF2,00
04960:  BCF    FF2.7
04962:  CLRF   FAA
04964:  MOVLW  13
04966:  MOVWF  FA9
04968:  MOVFF  18F,FA8
0496C:  BCF    FA6.6
0496E:  BCF    FA6.7
04970:  BSF    FA6.2
04972:  MOVLW  55
04974:  MOVWF  FA7
04976:  MOVLW  AA
04978:  MOVWF  FA7
0497A:  BSF    FA6.1
0497C:  BTFSC  FA6.1
0497E:  BRA    497C
04980:  BCF    FA6.2
04982:  MOVF   00,W
04984:  IORWF  FF2,F
....................                write_eeprom(0x14,RxD_Buff[22]); //Green1_8
04986:  MOVFF  FF2,00
0498A:  BCF    FF2.7
0498C:  CLRF   FAA
0498E:  MOVLW  14
04990:  MOVWF  FA9
04992:  MOVFF  190,FA8
04996:  BCF    FA6.6
04998:  BCF    FA6.7
0499A:  BSF    FA6.2
0499C:  MOVLW  55
0499E:  MOVWF  FA7
049A0:  MOVLW  AA
049A2:  MOVWF  FA7
049A4:  BSF    FA6.1
049A6:  BTFSC  FA6.1
049A8:  BRA    49A6
049AA:  BCF    FA6.2
049AC:  MOVF   00,W
049AE:  IORWF  FF2,F
....................                write_eeprom(0x15,RxD_Buff[23]); //Green9_10
049B0:  MOVFF  FF2,00
049B4:  BCF    FF2.7
049B6:  CLRF   FAA
049B8:  MOVLW  15
049BA:  MOVWF  FA9
049BC:  MOVFF  191,FA8
049C0:  BCF    FA6.6
049C2:  BCF    FA6.7
049C4:  BSF    FA6.2
049C6:  MOVLW  55
049C8:  MOVWF  FA7
049CA:  MOVLW  AA
049CC:  MOVWF  FA7
049CE:  BSF    FA6.1
049D0:  BTFSC  FA6.1
049D2:  BRA    49D0
049D4:  BCF    FA6.2
049D6:  MOVF   00,W
049D8:  IORWF  FF2,F
....................                write_eeprom(0x16,RxD_Buff[24]); //Green11_18
049DA:  MOVFF  FF2,00
049DE:  BCF    FF2.7
049E0:  CLRF   FAA
049E2:  MOVLW  16
049E4:  MOVWF  FA9
049E6:  MOVFF  192,FA8
049EA:  BCF    FA6.6
049EC:  BCF    FA6.7
049EE:  BSF    FA6.2
049F0:  MOVLW  55
049F2:  MOVWF  FA7
049F4:  MOVLW  AA
049F6:  MOVWF  FA7
049F8:  BSF    FA6.1
049FA:  BTFSC  FA6.1
049FC:  BRA    49FA
049FE:  BCF    FA6.2
04A00:  MOVF   00,W
04A02:  IORWF  FF2,F
....................                write_eeprom(0x17,RxD_Buff[25]); //Green19_20
04A04:  MOVFF  FF2,00
04A08:  BCF    FF2.7
04A0A:  CLRF   FAA
04A0C:  MOVLW  17
04A0E:  MOVWF  FA9
04A10:  MOVFF  193,FA8
04A14:  BCF    FA6.6
04A16:  BCF    FA6.7
04A18:  BSF    FA6.2
04A1A:  MOVLW  55
04A1C:  MOVWF  FA7
04A1E:  MOVLW  AA
04A20:  MOVWF  FA7
04A22:  BSF    FA6.1
04A24:  BTFSC  FA6.1
04A26:  BRA    4A24
04A28:  BCF    FA6.2
04A2A:  MOVF   00,W
04A2C:  IORWF  FF2,F
....................                   
....................                write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
04A2E:  MOVFF  FF2,00
04A32:  BCF    FF2.7
04A34:  CLRF   FAA
04A36:  MOVLW  18
04A38:  MOVWF  FA9
04A3A:  MOVFF  194,FA8
04A3E:  BCF    FA6.6
04A40:  BCF    FA6.7
04A42:  BSF    FA6.2
04A44:  MOVLW  55
04A46:  MOVWF  FA7
04A48:  MOVLW  AA
04A4A:  MOVWF  FA7
04A4C:  BSF    FA6.1
04A4E:  BTFSC  FA6.1
04A50:  BRA    4A4E
04A52:  BCF    FA6.2
04A54:  MOVF   00,W
04A56:  IORWF  FF2,F
....................                write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
04A58:  MOVFF  FF2,00
04A5C:  BCF    FF2.7
04A5E:  CLRF   FAA
04A60:  MOVLW  19
04A62:  MOVWF  FA9
04A64:  MOVFF  195,FA8
04A68:  BCF    FA6.6
04A6A:  BCF    FA6.7
04A6C:  BSF    FA6.2
04A6E:  MOVLW  55
04A70:  MOVWF  FA7
04A72:  MOVLW  AA
04A74:  MOVWF  FA7
04A76:  BSF    FA6.1
04A78:  BTFSC  FA6.1
04A7A:  BRA    4A78
04A7C:  BCF    FA6.2
04A7E:  MOVF   00,W
04A80:  IORWF  FF2,F
....................                write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
04A82:  MOVFF  FF2,00
04A86:  BCF    FF2.7
04A88:  CLRF   FAA
04A8A:  MOVLW  1A
04A8C:  MOVWF  FA9
04A8E:  MOVFF  196,FA8
04A92:  BCF    FA6.6
04A94:  BCF    FA6.7
04A96:  BSF    FA6.2
04A98:  MOVLW  55
04A9A:  MOVWF  FA7
04A9C:  MOVLW  AA
04A9E:  MOVWF  FA7
04AA0:  BSF    FA6.1
04AA2:  BTFSC  FA6.1
04AA4:  BRA    4AA2
04AA6:  BCF    FA6.2
04AA8:  MOVF   00,W
04AAA:  IORWF  FF2,F
....................                write_eeprom(0x1B,RxD_Buff[29]);   //No of point
04AAC:  MOVFF  FF2,00
04AB0:  BCF    FF2.7
04AB2:  CLRF   FAA
04AB4:  MOVLW  1B
04AB6:  MOVWF  FA9
04AB8:  MOVFF  197,FA8
04ABC:  BCF    FA6.6
04ABE:  BCF    FA6.7
04AC0:  BSF    FA6.2
04AC2:  MOVLW  55
04AC4:  MOVWF  FA7
04AC6:  MOVLW  AA
04AC8:  MOVWF  FA7
04ACA:  BSF    FA6.1
04ACC:  BTFSC  FA6.1
04ACE:  BRA    4ACC
04AD0:  BCF    FA6.2
04AD2:  MOVF   00,W
04AD4:  IORWF  FF2,F
....................                write_eeprom(0x1C,RxD_Buff[30]);   //Master / Slave
04AD6:  MOVFF  FF2,00
04ADA:  BCF    FF2.7
04ADC:  CLRF   FAA
04ADE:  MOVLW  1C
04AE0:  MOVWF  FA9
04AE2:  MOVFF  198,FA8
04AE6:  BCF    FA6.6
04AE8:  BCF    FA6.7
04AEA:  BSF    FA6.2
04AEC:  MOVLW  55
04AEE:  MOVWF  FA7
04AF0:  MOVLW  AA
04AF2:  MOVWF  FA7
04AF4:  BSF    FA6.1
04AF6:  BTFSC  FA6.1
04AF8:  BRA    4AF6
04AFA:  BCF    FA6.2
04AFC:  MOVF   00,W
04AFE:  IORWF  FF2,F
....................                write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
04B00:  MOVFF  FF2,00
04B04:  BCF    FF2.7
04B06:  CLRF   FAA
04B08:  MOVLW  1D
04B0A:  MOVWF  FA9
04B0C:  MOVFF  199,FA8
04B10:  BCF    FA6.6
04B12:  BCF    FA6.7
04B14:  BSF    FA6.2
04B16:  MOVLW  55
04B18:  MOVWF  FA7
04B1A:  MOVLW  AA
04B1C:  MOVWF  FA7
04B1E:  BSF    FA6.1
04B20:  BTFSC  FA6.1
04B22:  BRA    4B20
04B24:  BCF    FA6.2
04B26:  MOVF   00,W
04B28:  IORWF  FF2,F
....................    
....................                write_eeprom(0x1E,RxD_Buff[32]);   //Communication Address
04B2A:  MOVFF  FF2,00
04B2E:  BCF    FF2.7
04B30:  CLRF   FAA
04B32:  MOVLW  1E
04B34:  MOVWF  FA9
04B36:  MOVFF  19A,FA8
04B3A:  BCF    FA6.6
04B3C:  BCF    FA6.7
04B3E:  BSF    FA6.2
04B40:  MOVLW  55
04B42:  MOVWF  FA7
04B44:  MOVLW  AA
04B46:  MOVWF  FA7
04B48:  BSF    FA6.1
04B4A:  BTFSC  FA6.1
04B4C:  BRA    4B4A
04B4E:  BCF    FA6.2
04B50:  MOVF   00,W
04B52:  IORWF  FF2,F
....................                write_eeprom(0x1F,RxD_Buff[33]);   //Communication Address
04B54:  MOVFF  FF2,00
04B58:  BCF    FF2.7
04B5A:  CLRF   FAA
04B5C:  MOVLW  1F
04B5E:  MOVWF  FA9
04B60:  MOVFF  19B,FA8
04B64:  BCF    FA6.6
04B66:  BCF    FA6.7
04B68:  BSF    FA6.2
04B6A:  MOVLW  55
04B6C:  MOVWF  FA7
04B6E:  MOVLW  AA
04B70:  MOVWF  FA7
04B72:  BSF    FA6.1
04B74:  BTFSC  FA6.1
04B76:  BRA    4B74
04B78:  BCF    FA6.2
04B7A:  MOVF   00,W
04B7C:  IORWF  FF2,F
....................                write_eeprom(0x20,RxD_Buff[34]);   //Communication Address
04B7E:  MOVFF  FF2,00
04B82:  BCF    FF2.7
04B84:  CLRF   FAA
04B86:  MOVLW  20
04B88:  MOVWF  FA9
04B8A:  MOVFF  19C,FA8
04B8E:  BCF    FA6.6
04B90:  BCF    FA6.7
04B92:  BSF    FA6.2
04B94:  MOVLW  55
04B96:  MOVWF  FA7
04B98:  MOVLW  AA
04B9A:  MOVWF  FA7
04B9C:  BSF    FA6.1
04B9E:  BTFSC  FA6.1
04BA0:  BRA    4B9E
04BA2:  BCF    FA6.2
04BA4:  MOVF   00,W
04BA6:  IORWF  FF2,F
....................                write_eeprom(0x21,RxD_Buff[35]);   //Communication Address
04BA8:  MOVFF  FF2,00
04BAC:  BCF    FF2.7
04BAE:  CLRF   FAA
04BB0:  MOVLW  21
04BB2:  MOVWF  FA9
04BB4:  MOVFF  19D,FA8
04BB8:  BCF    FA6.6
04BBA:  BCF    FA6.7
04BBC:  BSF    FA6.2
04BBE:  MOVLW  55
04BC0:  MOVWF  FA7
04BC2:  MOVLW  AA
04BC4:  MOVWF  FA7
04BC6:  BSF    FA6.1
04BC8:  BTFSC  FA6.1
04BCA:  BRA    4BC8
04BCC:  BCF    FA6.2
04BCE:  MOVF   00,W
04BD0:  IORWF  FF2,F
....................                write_eeprom(0x22,RxD_Buff[36]);   //Communication Address
04BD2:  MOVFF  FF2,00
04BD6:  BCF    FF2.7
04BD8:  CLRF   FAA
04BDA:  MOVLW  22
04BDC:  MOVWF  FA9
04BDE:  MOVFF  19E,FA8
04BE2:  BCF    FA6.6
04BE4:  BCF    FA6.7
04BE6:  BSF    FA6.2
04BE8:  MOVLW  55
04BEA:  MOVWF  FA7
04BEC:  MOVLW  AA
04BEE:  MOVWF  FA7
04BF0:  BSF    FA6.1
04BF2:  BTFSC  FA6.1
04BF4:  BRA    4BF2
04BF6:  BCF    FA6.2
04BF8:  MOVF   00,W
04BFA:  IORWF  FF2,F
....................                write_eeprom(0x23,RxD_Buff[37]);   //Communication Address
04BFC:  MOVFF  FF2,00
04C00:  BCF    FF2.7
04C02:  CLRF   FAA
04C04:  MOVLW  23
04C06:  MOVWF  FA9
04C08:  MOVFF  19F,FA8
04C0C:  BCF    FA6.6
04C0E:  BCF    FA6.7
04C10:  BSF    FA6.2
04C12:  MOVLW  55
04C14:  MOVWF  FA7
04C16:  MOVLW  AA
04C18:  MOVWF  FA7
04C1A:  BSF    FA6.1
04C1C:  BTFSC  FA6.1
04C1E:  BRA    4C1C
04C20:  BCF    FA6.2
04C22:  MOVF   00,W
04C24:  IORWF  FF2,F
....................                write_eeprom(0x24,RxD_Buff[38]);   //Communication Address
04C26:  MOVFF  FF2,00
04C2A:  BCF    FF2.7
04C2C:  CLRF   FAA
04C2E:  MOVLW  24
04C30:  MOVWF  FA9
04C32:  MOVFF  1A0,FA8
04C36:  BCF    FA6.6
04C38:  BCF    FA6.7
04C3A:  BSF    FA6.2
04C3C:  MOVLW  55
04C3E:  MOVWF  FA7
04C40:  MOVLW  AA
04C42:  MOVWF  FA7
04C44:  BSF    FA6.1
04C46:  BTFSC  FA6.1
04C48:  BRA    4C46
04C4A:  BCF    FA6.2
04C4C:  MOVF   00,W
04C4E:  IORWF  FF2,F
....................                write_eeprom(0x25,RxD_Buff[39]);   //Communication Address
04C50:  MOVFF  FF2,00
04C54:  BCF    FF2.7
04C56:  CLRF   FAA
04C58:  MOVLW  25
04C5A:  MOVWF  FA9
04C5C:  MOVFF  1A1,FA8
04C60:  BCF    FA6.6
04C62:  BCF    FA6.7
04C64:  BSF    FA6.2
04C66:  MOVLW  55
04C68:  MOVWF  FA7
04C6A:  MOVLW  AA
04C6C:  MOVWF  FA7
04C6E:  BSF    FA6.1
04C70:  BTFSC  FA6.1
04C72:  BRA    4C70
04C74:  BCF    FA6.2
04C76:  MOVF   00,W
04C78:  IORWF  FF2,F
....................                write_eeprom(0x26,RxD_Buff[40]);   //Communication Address
04C7A:  MOVFF  FF2,00
04C7E:  BCF    FF2.7
04C80:  CLRF   FAA
04C82:  MOVLW  26
04C84:  MOVWF  FA9
04C86:  MOVFF  1A2,FA8
04C8A:  BCF    FA6.6
04C8C:  BCF    FA6.7
04C8E:  BSF    FA6.2
04C90:  MOVLW  55
04C92:  MOVWF  FA7
04C94:  MOVLW  AA
04C96:  MOVWF  FA7
04C98:  BSF    FA6.1
04C9A:  BTFSC  FA6.1
04C9C:  BRA    4C9A
04C9E:  BCF    FA6.2
04CA0:  MOVF   00,W
04CA2:  IORWF  FF2,F
....................                write_eeprom(0x27,RxD_Buff[41]);   //Communication Address
04CA4:  MOVFF  FF2,00
04CA8:  BCF    FF2.7
04CAA:  CLRF   FAA
04CAC:  MOVLW  27
04CAE:  MOVWF  FA9
04CB0:  MOVFF  1A3,FA8
04CB4:  BCF    FA6.6
04CB6:  BCF    FA6.7
04CB8:  BSF    FA6.2
04CBA:  MOVLW  55
04CBC:  MOVWF  FA7
04CBE:  MOVLW  AA
04CC0:  MOVWF  FA7
04CC2:  BSF    FA6.1
04CC4:  BTFSC  FA6.1
04CC6:  BRA    4CC4
04CC8:  BCF    FA6.2
04CCA:  MOVF   00,W
04CCC:  IORWF  FF2,F
....................                write_eeprom(0x28,RxD_Buff[42]);   //Communication Address
04CCE:  MOVFF  FF2,00
04CD2:  BCF    FF2.7
04CD4:  CLRF   FAA
04CD6:  MOVLW  28
04CD8:  MOVWF  FA9
04CDA:  MOVFF  1A4,FA8
04CDE:  BCF    FA6.6
04CE0:  BCF    FA6.7
04CE2:  BSF    FA6.2
04CE4:  MOVLW  55
04CE6:  MOVWF  FA7
04CE8:  MOVLW  AA
04CEA:  MOVWF  FA7
04CEC:  BSF    FA6.1
04CEE:  BTFSC  FA6.1
04CF0:  BRA    4CEE
04CF2:  BCF    FA6.2
04CF4:  MOVF   00,W
04CF6:  IORWF  FF2,F
....................                write_eeprom(0x29,RxD_Buff[43]);   //Communication Address
04CF8:  MOVFF  FF2,00
04CFC:  BCF    FF2.7
04CFE:  CLRF   FAA
04D00:  MOVLW  29
04D02:  MOVWF  FA9
04D04:  MOVFF  1A5,FA8
04D08:  BCF    FA6.6
04D0A:  BCF    FA6.7
04D0C:  BSF    FA6.2
04D0E:  MOVLW  55
04D10:  MOVWF  FA7
04D12:  MOVLW  AA
04D14:  MOVWF  FA7
04D16:  BSF    FA6.1
04D18:  BTFSC  FA6.1
04D1A:  BRA    4D18
04D1C:  BCF    FA6.2
04D1E:  MOVF   00,W
04D20:  IORWF  FF2,F
....................                write_eeprom(0x2A,RxD_Buff[44]);   //Communication Address
04D22:  MOVFF  FF2,00
04D26:  BCF    FF2.7
04D28:  CLRF   FAA
04D2A:  MOVLW  2A
04D2C:  MOVWF  FA9
04D2E:  MOVFF  1A6,FA8
04D32:  BCF    FA6.6
04D34:  BCF    FA6.7
04D36:  BSF    FA6.2
04D38:  MOVLW  55
04D3A:  MOVWF  FA7
04D3C:  MOVLW  AA
04D3E:  MOVWF  FA7
04D40:  BSF    FA6.1
04D42:  BTFSC  FA6.1
04D44:  BRA    4D42
04D46:  BCF    FA6.2
04D48:  MOVF   00,W
04D4A:  IORWF  FF2,F
....................                write_eeprom(0x2B,RxD_Buff[45]);   //Communication Address
04D4C:  MOVFF  FF2,00
04D50:  BCF    FF2.7
04D52:  CLRF   FAA
04D54:  MOVLW  2B
04D56:  MOVWF  FA9
04D58:  MOVFF  1A7,FA8
04D5C:  BCF    FA6.6
04D5E:  BCF    FA6.7
04D60:  BSF    FA6.2
04D62:  MOVLW  55
04D64:  MOVWF  FA7
04D66:  MOVLW  AA
04D68:  MOVWF  FA7
04D6A:  BSF    FA6.1
04D6C:  BTFSC  FA6.1
04D6E:  BRA    4D6C
04D70:  BCF    FA6.2
04D72:  MOVF   00,W
04D74:  IORWF  FF2,F
....................                write_eeprom(0x2C,RxD_Buff[46]);   //Communication Address
04D76:  MOVFF  FF2,00
04D7A:  BCF    FF2.7
04D7C:  CLRF   FAA
04D7E:  MOVLW  2C
04D80:  MOVWF  FA9
04D82:  MOVFF  1A8,FA8
04D86:  BCF    FA6.6
04D88:  BCF    FA6.7
04D8A:  BSF    FA6.2
04D8C:  MOVLW  55
04D8E:  MOVWF  FA7
04D90:  MOVLW  AA
04D92:  MOVWF  FA7
04D94:  BSF    FA6.1
04D96:  BTFSC  FA6.1
04D98:  BRA    4D96
04D9A:  BCF    FA6.2
04D9C:  MOVF   00,W
04D9E:  IORWF  FF2,F
....................                write_eeprom(0x2D,RxD_Buff[47]);   //Communication Address
04DA0:  MOVFF  FF2,00
04DA4:  BCF    FF2.7
04DA6:  CLRF   FAA
04DA8:  MOVLW  2D
04DAA:  MOVWF  FA9
04DAC:  MOVFF  1A9,FA8
04DB0:  BCF    FA6.6
04DB2:  BCF    FA6.7
04DB4:  BSF    FA6.2
04DB6:  MOVLW  55
04DB8:  MOVWF  FA7
04DBA:  MOVLW  AA
04DBC:  MOVWF  FA7
04DBE:  BSF    FA6.1
04DC0:  BTFSC  FA6.1
04DC2:  BRA    4DC0
04DC4:  BCF    FA6.2
04DC6:  MOVF   00,W
04DC8:  IORWF  FF2,F
....................                write_eeprom(0x2E,RxD_Buff[48]);   //Communication Address
04DCA:  MOVFF  FF2,00
04DCE:  BCF    FF2.7
04DD0:  CLRF   FAA
04DD2:  MOVLW  2E
04DD4:  MOVWF  FA9
04DD6:  MOVFF  1AA,FA8
04DDA:  BCF    FA6.6
04DDC:  BCF    FA6.7
04DDE:  BSF    FA6.2
04DE0:  MOVLW  55
04DE2:  MOVWF  FA7
04DE4:  MOVLW  AA
04DE6:  MOVWF  FA7
04DE8:  BSF    FA6.1
04DEA:  BTFSC  FA6.1
04DEC:  BRA    4DEA
04DEE:  BCF    FA6.2
04DF0:  MOVF   00,W
04DF2:  IORWF  FF2,F
....................                write_eeprom(0x2F,RxD_Buff[49]);   //Communication Address
04DF4:  MOVFF  FF2,00
04DF8:  BCF    FF2.7
04DFA:  CLRF   FAA
04DFC:  MOVLW  2F
04DFE:  MOVWF  FA9
04E00:  MOVFF  1AB,FA8
04E04:  BCF    FA6.6
04E06:  BCF    FA6.7
04E08:  BSF    FA6.2
04E0A:  MOVLW  55
04E0C:  MOVWF  FA7
04E0E:  MOVLW  AA
04E10:  MOVWF  FA7
04E12:  BSF    FA6.1
04E14:  BTFSC  FA6.1
04E16:  BRA    4E14
04E18:  BCF    FA6.2
04E1A:  MOVF   00,W
04E1C:  IORWF  FF2,F
....................                write_eeprom(0x30,RxD_Buff[50]);   //Communication Address
04E1E:  MOVFF  FF2,00
04E22:  BCF    FF2.7
04E24:  CLRF   FAA
04E26:  MOVLW  30
04E28:  MOVWF  FA9
04E2A:  MOVFF  1AC,FA8
04E2E:  BCF    FA6.6
04E30:  BCF    FA6.7
04E32:  BSF    FA6.2
04E34:  MOVLW  55
04E36:  MOVWF  FA7
04E38:  MOVLW  AA
04E3A:  MOVWF  FA7
04E3C:  BSF    FA6.1
04E3E:  BTFSC  FA6.1
04E40:  BRA    4E3E
04E42:  BCF    FA6.2
04E44:  MOVF   00,W
04E46:  IORWF  FF2,F
....................                write_eeprom(0x31,RxD_Buff[51]);   //Communication Address
04E48:  MOVFF  FF2,00
04E4C:  BCF    FF2.7
04E4E:  CLRF   FAA
04E50:  MOVLW  31
04E52:  MOVWF  FA9
04E54:  MOVFF  1AD,FA8
04E58:  BCF    FA6.6
04E5A:  BCF    FA6.7
04E5C:  BSF    FA6.2
04E5E:  MOVLW  55
04E60:  MOVWF  FA7
04E62:  MOVLW  AA
04E64:  MOVWF  FA7
04E66:  BSF    FA6.1
04E68:  BTFSC  FA6.1
04E6A:  BRA    4E68
04E6C:  BCF    FA6.2
04E6E:  MOVF   00,W
04E70:  IORWF  FF2,F
....................                
....................                int16  a = 0; 
....................                unsigned char  phonenum;
04E72:  MOVLB  C
04E74:  CLRF   x1C
04E76:  CLRF   x1B
....................                for(; ; a++)
....................                {
....................                   restart_wdt();
04E78:  CLRWDT
....................                   phonenum = RxD_Buff[52 + a];
04E7A:  MOVLW  AE
04E7C:  ADDWF  x1B,W
04E7E:  MOVWF  FE9
04E80:  MOVLW  01
04E82:  ADDWFC x1C,W
04E84:  MOVWF  FEA
04E86:  MOVFF  FEF,C1D
....................                   if((phonenum == 0x0D) || (a > 15))
04E8A:  MOVF   x1D,W
04E8C:  SUBLW  0D
04E8E:  BZ    4E9A
04E90:  MOVF   x1C,F
04E92:  BNZ   4E9A
04E94:  MOVF   x1B,W
04E96:  SUBLW  0F
04E98:  BC    4EE8
....................                   {
....................                      sms_phonenumber[a] =  '\0' ;
04E9A:  MOVLW  8B
04E9C:  ADDWF  x1B,W
04E9E:  MOVWF  FE9
04EA0:  MOVLW  09
04EA2:  ADDWFC x1C,W
04EA4:  MOVWF  FEA
04EA6:  CLRF   FEF
....................                      write_eeprom(0x32+a,phonenum);
04EA8:  MOVLW  32
04EAA:  ADDWF  x1B,W
04EAC:  MOVWF  x24
04EAE:  MOVLW  00
04EB0:  ADDWFC x1C,W
04EB2:  MOVWF  x25
04EB4:  MOVF   FF2,W
04EB6:  MOVWF  00
04EB8:  BCF    FF2.7
04EBA:  MOVFF  C25,FAA
04EBE:  MOVFF  C24,FA9
04EC2:  MOVFF  C1D,FA8
04EC6:  BCF    FA6.6
04EC8:  BCF    FA6.7
04ECA:  BSF    FA6.2
04ECC:  MOVLB  F
04ECE:  MOVLW  55
04ED0:  MOVWF  FA7
04ED2:  MOVLW  AA
04ED4:  MOVWF  FA7
04ED6:  BSF    FA6.1
04ED8:  BTFSC  FA6.1
04EDA:  BRA    4ED8
04EDC:  BCF    FA6.2
04EDE:  MOVF   00,W
04EE0:  IORWF  FF2,F
....................                      break;
04EE2:  BRA    4F3E
....................                   }
04EE4:  BRA    4F32
04EE6:  MOVLB  C
....................                   else
....................                   {
....................                      sms_phonenumber[a] = phonenum;
04EE8:  MOVLW  8B
04EEA:  ADDWF  x1B,W
04EEC:  MOVWF  FE9
04EEE:  MOVLW  09
04EF0:  ADDWFC x1C,W
04EF2:  MOVWF  FEA
04EF4:  MOVFF  C1D,FEF
....................                      
....................                      write_eeprom(0x32+a,phonenum);
04EF8:  MOVLW  32
04EFA:  ADDWF  x1B,W
04EFC:  MOVWF  x24
04EFE:  MOVLW  00
04F00:  ADDWFC x1C,W
04F02:  MOVWF  x25
04F04:  MOVF   FF2,W
04F06:  MOVWF  00
04F08:  BCF    FF2.7
04F0A:  MOVFF  C25,FAA
04F0E:  MOVFF  C24,FA9
04F12:  MOVFF  C1D,FA8
04F16:  BCF    FA6.6
04F18:  BCF    FA6.7
04F1A:  BSF    FA6.2
04F1C:  MOVLB  F
04F1E:  MOVLW  55
04F20:  MOVWF  FA7
04F22:  MOVLW  AA
04F24:  MOVWF  FA7
04F26:  BSF    FA6.1
04F28:  BTFSC  FA6.1
04F2A:  BRA    4F28
04F2C:  BCF    FA6.2
04F2E:  MOVF   00,W
04F30:  IORWF  FF2,F
....................                   }
04F32:  MOVLB  C
04F34:  INCF   x1B,F
04F36:  BTFSC  FD8.2
04F38:  INCF   x1C,F
04F3A:  BRA    4E78
04F3C:  MOVLB  F
....................                }
....................             
....................             
....................                TxD_Buff[0] = Address ;         //Address
04F3E:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x21 ;            //return function code
04F42:  MOVLW  21
04F44:  MOVLB  0
04F46:  MOVWF  x7C
....................    
....................                CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
04F48:  MOVLB  C
04F4A:  CLRF   x26
04F4C:  MOVLW  7B
04F4E:  MOVWF  x25
04F50:  MOVLW  02
04F52:  MOVWF  x27
04F54:  MOVLB  0
04F56:  CALL   2EF0
....................    
....................                TxD_Buff[2] = CRC_Hi ;
04F5A:  MOVFF  57B,7D
....................                TxD_Buff[3] = CRC_Lo ;
04F5E:  MOVFF  57A,7E
....................    
....................                output_bit(P485ctrl,1);
04F62:  BSF    F8A.3
04F64:  BCF    F93.3
....................                delay_ms(10);
04F66:  MOVLW  0A
04F68:  MOVLB  C
04F6A:  MOVWF  x24
04F6C:  MOVLB  0
04F6E:  CALL   0952
....................    
....................                putc(Txd_Buff[0]);
04F72:  MOVF   x7B,W
04F74:  CALL   2F46
....................                putc(Txd_Buff[1]);
04F78:  MOVF   x7C,W
04F7A:  CALL   2F46
....................                putc(Txd_Buff[2]);
04F7E:  MOVF   x7D,W
04F80:  CALL   2F46
....................                putc(Txd_Buff[3]);
04F84:  MOVF   x7E,W
04F86:  CALL   2F46
....................    
....................                delay_ms(3);
04F8A:  MOVLW  03
04F8C:  MOVLB  C
04F8E:  MOVWF  x24
04F90:  MOVLB  0
04F92:  CALL   0952
....................                output_bit(P485ctrl,0);
04F96:  BCF    F8A.3
04F98:  BCF    F93.3
....................                
....................                reset_cpu();
04F9A:  RESET
....................                //Read_Config(); //jj
....................             }
04F9C:  GOTO   60B2
04FA0:  MOVLB  1
....................             
....................             else if(RxD_Buff[1] == 0x22)///////////// WRITE Faultname /////////////////////
04FA2:  MOVF   x7B,W
04FA4:  SUBLW  22
04FA6:  BTFSS  FD8.2
04FA8:  GOTO   60B2
....................             {
....................                
....................                //SMS_Massage
....................                int16  i =4,j=0,k=0; //i =4 are first data from RxD_Buff[]
04FAC:  MOVLB  C
04FAE:  CLRF   x1F
04FB0:  MOVLW  04
04FB2:  MOVWF  x1E
04FB4:  CLRF   x21
04FB6:  CLRF   x20
04FB8:  CLRF   x23
04FBA:  CLRF   x22
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
04FBC:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
04FBE:  MOVLW  7A
04FC0:  ADDWF  x1E,W
04FC2:  MOVWF  FE9
04FC4:  MOVLW  01
04FC6:  ADDWFC x1F,W
04FC8:  MOVWF  FEA
04FCA:  MOVF   FEF,W
04FCC:  SUBLW  0D
04FCE:  BZ    4FDA
04FD0:  MOVF   x21,F
04FD2:  BNZ   4FDA
04FD4:  MOVF   x20,W
04FD6:  SUBLW  1E
04FD8:  BC    501A
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
04FDA:  MOVLW  5D
04FDC:  ADDWF  x1E,W
04FDE:  MOVWF  x24
04FE0:  MOVLW  00
04FE2:  ADDWFC x1F,W
04FE4:  MOVWF  x25
04FE6:  MOVF   FF2,W
04FE8:  MOVWF  00
04FEA:  BCF    FF2.7
04FEC:  MOVFF  C25,FAA
04FF0:  MOVFF  C24,FA9
04FF4:  MOVLW  0D
04FF6:  MOVWF  FA8
04FF8:  BCF    FA6.6
04FFA:  BCF    FA6.7
04FFC:  BSF    FA6.2
04FFE:  MOVLB  F
05000:  MOVLW  55
05002:  MOVWF  FA7
05004:  MOVLW  AA
05006:  MOVWF  FA7
05008:  BSF    FA6.1
0500A:  BTFSC  FA6.1
0500C:  BRA    500A
0500E:  BCF    FA6.2
05010:  MOVF   00,W
05012:  IORWF  FF2,F
....................                      break;
05014:  BRA    50A4
....................                   }
05016:  BRA    508C
05018:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage1[j] = RxD_Buff[i];
0501A:  MOVLW  9A
0501C:  ADDWF  x20,W
0501E:  MOVWF  01
05020:  MOVLW  09
05022:  ADDWFC x21,W
05024:  MOVWF  03
05026:  MOVLW  7A
05028:  ADDWF  x1E,W
0502A:  MOVWF  FE9
0502C:  MOVLW  01
0502E:  ADDWFC x1F,W
05030:  MOVWF  FEA
05032:  MOVFF  FEF,C26
05036:  MOVFF  03,FEA
0503A:  MOVFF  01,FE9
0503E:  MOVFF  C26,FEF
....................                      
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05042:  MOVLW  5D
05044:  ADDWF  x1E,W
05046:  MOVWF  x24
05048:  MOVLW  00
0504A:  ADDWFC x1F,W
0504C:  MOVWF  x25
0504E:  MOVLW  7A
05050:  ADDWF  x1E,W
05052:  MOVWF  FE9
05054:  MOVLW  01
05056:  ADDWFC x1F,W
05058:  MOVWF  FEA
0505A:  MOVFF  FEF,C26
0505E:  MOVF   FF2,W
05060:  MOVWF  00
05062:  BCF    FF2.7
05064:  MOVFF  C25,FAA
05068:  MOVFF  C24,FA9
0506C:  MOVFF  C26,FA8
05070:  BCF    FA6.6
05072:  BCF    FA6.7
05074:  BSF    FA6.2
05076:  MOVLB  F
05078:  MOVLW  55
0507A:  MOVWF  FA7
0507C:  MOVLW  AA
0507E:  MOVWF  FA7
05080:  BSF    FA6.1
05082:  BTFSC  FA6.1
05084:  BRA    5082
05086:  BCF    FA6.2
05088:  MOVF   00,W
0508A:  IORWF  FF2,F
....................                   }
0508C:  MOVLB  C
0508E:  MOVFF  C1F,03
05092:  MOVF   x1E,W
05094:  INCF   x1E,F
05096:  BTFSC  FD8.2
05098:  INCF   x1F,F
0509A:  INCF   x20,F
0509C:  BTFSC  FD8.2
0509E:  INCF   x21,F
050A0:  BRA    4FBC
050A2:  MOVLB  F
....................                }
....................                SMS_Massage1[j] = '\0' ; // end string
050A4:  MOVLW  9A
050A6:  MOVLB  C
050A8:  ADDWF  x20,W
050AA:  MOVWF  FE9
050AC:  MOVLW  09
050AE:  ADDWFC x21,W
050B0:  MOVWF  FEA
050B2:  CLRF   FEF
....................                
....................                j=0;
050B4:  CLRF   x21
050B6:  CLRF   x20
....................                i++;
050B8:  INCF   x1E,F
050BA:  BTFSC  FD8.2
050BC:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
050BE:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
050C0:  MOVLW  7A
050C2:  ADDWF  x1E,W
050C4:  MOVWF  FE9
050C6:  MOVLW  01
050C8:  ADDWFC x1F,W
050CA:  MOVWF  FEA
050CC:  MOVF   FEF,W
050CE:  SUBLW  0D
050D0:  BZ    50DC
050D2:  MOVF   x21,F
050D4:  BNZ   50DC
050D6:  MOVF   x20,W
050D8:  SUBLW  1E
050DA:  BC    511C
....................                   {  
....................                      write_eeprom(0x5D+i,0x0D);
050DC:  MOVLW  5D
050DE:  ADDWF  x1E,W
050E0:  MOVWF  x24
050E2:  MOVLW  00
050E4:  ADDWFC x1F,W
050E6:  MOVWF  x25
050E8:  MOVF   FF2,W
050EA:  MOVWF  00
050EC:  BCF    FF2.7
050EE:  MOVFF  C25,FAA
050F2:  MOVFF  C24,FA9
050F6:  MOVLW  0D
050F8:  MOVWF  FA8
050FA:  BCF    FA6.6
050FC:  BCF    FA6.7
050FE:  BSF    FA6.2
05100:  MOVLB  F
05102:  MOVLW  55
05104:  MOVWF  FA7
05106:  MOVLW  AA
05108:  MOVWF  FA7
0510A:  BSF    FA6.1
0510C:  BTFSC  FA6.1
0510E:  BRA    510C
05110:  BCF    FA6.2
05112:  MOVF   00,W
05114:  IORWF  FF2,F
....................                      break;
05116:  BRA    51A6
....................                   }
05118:  BRA    518E
0511A:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage2[j] = RxD_Buff[i];
0511C:  MOVLW  BA
0511E:  ADDWF  x20,W
05120:  MOVWF  01
05122:  MOVLW  09
05124:  ADDWFC x21,W
05126:  MOVWF  03
05128:  MOVLW  7A
0512A:  ADDWF  x1E,W
0512C:  MOVWF  FE9
0512E:  MOVLW  01
05130:  ADDWFC x1F,W
05132:  MOVWF  FEA
05134:  MOVFF  FEF,C26
05138:  MOVFF  03,FEA
0513C:  MOVFF  01,FE9
05140:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05144:  MOVLW  5D
05146:  ADDWF  x1E,W
05148:  MOVWF  x24
0514A:  MOVLW  00
0514C:  ADDWFC x1F,W
0514E:  MOVWF  x25
05150:  MOVLW  7A
05152:  ADDWF  x1E,W
05154:  MOVWF  FE9
05156:  MOVLW  01
05158:  ADDWFC x1F,W
0515A:  MOVWF  FEA
0515C:  MOVFF  FEF,C26
05160:  MOVF   FF2,W
05162:  MOVWF  00
05164:  BCF    FF2.7
05166:  MOVFF  C25,FAA
0516A:  MOVFF  C24,FA9
0516E:  MOVFF  C26,FA8
05172:  BCF    FA6.6
05174:  BCF    FA6.7
05176:  BSF    FA6.2
05178:  MOVLB  F
0517A:  MOVLW  55
0517C:  MOVWF  FA7
0517E:  MOVLW  AA
05180:  MOVWF  FA7
05182:  BSF    FA6.1
05184:  BTFSC  FA6.1
05186:  BRA    5184
05188:  BCF    FA6.2
0518A:  MOVF   00,W
0518C:  IORWF  FF2,F
....................                   }
0518E:  MOVLB  C
05190:  MOVFF  C1F,03
05194:  MOVF   x1E,W
05196:  INCF   x1E,F
05198:  BTFSC  FD8.2
0519A:  INCF   x1F,F
0519C:  INCF   x20,F
0519E:  BTFSC  FD8.2
051A0:  INCF   x21,F
051A2:  BRA    50BE
051A4:  MOVLB  F
....................                }
....................                SMS_Massage2[j] = '\0' ; // end string
051A6:  MOVLW  BA
051A8:  MOVLB  C
051AA:  ADDWF  x20,W
051AC:  MOVWF  FE9
051AE:  MOVLW  09
051B0:  ADDWFC x21,W
051B2:  MOVWF  FEA
051B4:  CLRF   FEF
....................                
....................                j=0;
051B6:  CLRF   x21
051B8:  CLRF   x20
....................                i++;
051BA:  INCF   x1E,F
051BC:  BTFSC  FD8.2
051BE:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
051C0:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
051C2:  MOVLW  7A
051C4:  ADDWF  x1E,W
051C6:  MOVWF  FE9
051C8:  MOVLW  01
051CA:  ADDWFC x1F,W
051CC:  MOVWF  FEA
051CE:  MOVF   FEF,W
051D0:  SUBLW  0D
051D2:  BZ    51DE
051D4:  MOVF   x21,F
051D6:  BNZ   51DE
051D8:  MOVF   x20,W
051DA:  SUBLW  1E
051DC:  BC    521E
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
051DE:  MOVLW  5D
051E0:  ADDWF  x1E,W
051E2:  MOVWF  x24
051E4:  MOVLW  00
051E6:  ADDWFC x1F,W
051E8:  MOVWF  x25
051EA:  MOVF   FF2,W
051EC:  MOVWF  00
051EE:  BCF    FF2.7
051F0:  MOVFF  C25,FAA
051F4:  MOVFF  C24,FA9
051F8:  MOVLW  0D
051FA:  MOVWF  FA8
051FC:  BCF    FA6.6
051FE:  BCF    FA6.7
05200:  BSF    FA6.2
05202:  MOVLB  F
05204:  MOVLW  55
05206:  MOVWF  FA7
05208:  MOVLW  AA
0520A:  MOVWF  FA7
0520C:  BSF    FA6.1
0520E:  BTFSC  FA6.1
05210:  BRA    520E
05212:  BCF    FA6.2
05214:  MOVF   00,W
05216:  IORWF  FF2,F
....................                      break;
05218:  BRA    52A8
....................                   }
0521A:  BRA    5290
0521C:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage3[j] = RxD_Buff[i];
0521E:  MOVLW  DA
05220:  ADDWF  x20,W
05222:  MOVWF  01
05224:  MOVLW  09
05226:  ADDWFC x21,W
05228:  MOVWF  03
0522A:  MOVLW  7A
0522C:  ADDWF  x1E,W
0522E:  MOVWF  FE9
05230:  MOVLW  01
05232:  ADDWFC x1F,W
05234:  MOVWF  FEA
05236:  MOVFF  FEF,C26
0523A:  MOVFF  03,FEA
0523E:  MOVFF  01,FE9
05242:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05246:  MOVLW  5D
05248:  ADDWF  x1E,W
0524A:  MOVWF  x24
0524C:  MOVLW  00
0524E:  ADDWFC x1F,W
05250:  MOVWF  x25
05252:  MOVLW  7A
05254:  ADDWF  x1E,W
05256:  MOVWF  FE9
05258:  MOVLW  01
0525A:  ADDWFC x1F,W
0525C:  MOVWF  FEA
0525E:  MOVFF  FEF,C26
05262:  MOVF   FF2,W
05264:  MOVWF  00
05266:  BCF    FF2.7
05268:  MOVFF  C25,FAA
0526C:  MOVFF  C24,FA9
05270:  MOVFF  C26,FA8
05274:  BCF    FA6.6
05276:  BCF    FA6.7
05278:  BSF    FA6.2
0527A:  MOVLB  F
0527C:  MOVLW  55
0527E:  MOVWF  FA7
05280:  MOVLW  AA
05282:  MOVWF  FA7
05284:  BSF    FA6.1
05286:  BTFSC  FA6.1
05288:  BRA    5286
0528A:  BCF    FA6.2
0528C:  MOVF   00,W
0528E:  IORWF  FF2,F
....................                   }
05290:  MOVLB  C
05292:  MOVFF  C1F,03
05296:  MOVF   x1E,W
05298:  INCF   x1E,F
0529A:  BTFSC  FD8.2
0529C:  INCF   x1F,F
0529E:  INCF   x20,F
052A0:  BTFSC  FD8.2
052A2:  INCF   x21,F
052A4:  BRA    51C0
052A6:  MOVLB  F
....................                }
....................                SMS_Massage3[j] = '\0' ; // end string
052A8:  MOVLW  DA
052AA:  MOVLB  C
052AC:  ADDWF  x20,W
052AE:  MOVWF  FE9
052B0:  MOVLW  09
052B2:  ADDWFC x21,W
052B4:  MOVWF  FEA
052B6:  CLRF   FEF
....................                
....................                j=0;
052B8:  CLRF   x21
052BA:  CLRF   x20
....................                i++;
052BC:  INCF   x1E,F
052BE:  BTFSC  FD8.2
052C0:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
052C2:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
052C4:  MOVLW  7A
052C6:  ADDWF  x1E,W
052C8:  MOVWF  FE9
052CA:  MOVLW  01
052CC:  ADDWFC x1F,W
052CE:  MOVWF  FEA
052D0:  MOVF   FEF,W
052D2:  SUBLW  0D
052D4:  BZ    52E0
052D6:  MOVF   x21,F
052D8:  BNZ   52E0
052DA:  MOVF   x20,W
052DC:  SUBLW  1E
052DE:  BC    5320
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
052E0:  MOVLW  5D
052E2:  ADDWF  x1E,W
052E4:  MOVWF  x24
052E6:  MOVLW  00
052E8:  ADDWFC x1F,W
052EA:  MOVWF  x25
052EC:  MOVF   FF2,W
052EE:  MOVWF  00
052F0:  BCF    FF2.7
052F2:  MOVFF  C25,FAA
052F6:  MOVFF  C24,FA9
052FA:  MOVLW  0D
052FC:  MOVWF  FA8
052FE:  BCF    FA6.6
05300:  BCF    FA6.7
05302:  BSF    FA6.2
05304:  MOVLB  F
05306:  MOVLW  55
05308:  MOVWF  FA7
0530A:  MOVLW  AA
0530C:  MOVWF  FA7
0530E:  BSF    FA6.1
05310:  BTFSC  FA6.1
05312:  BRA    5310
05314:  BCF    FA6.2
05316:  MOVF   00,W
05318:  IORWF  FF2,F
....................                      break;
0531A:  BRA    53AA
....................                   }
0531C:  BRA    5392
0531E:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage4[j] = RxD_Buff[i];
05320:  MOVLW  FA
05322:  ADDWF  x20,W
05324:  MOVWF  01
05326:  MOVLW  09
05328:  ADDWFC x21,W
0532A:  MOVWF  03
0532C:  MOVLW  7A
0532E:  ADDWF  x1E,W
05330:  MOVWF  FE9
05332:  MOVLW  01
05334:  ADDWFC x1F,W
05336:  MOVWF  FEA
05338:  MOVFF  FEF,C26
0533C:  MOVFF  03,FEA
05340:  MOVFF  01,FE9
05344:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05348:  MOVLW  5D
0534A:  ADDWF  x1E,W
0534C:  MOVWF  x24
0534E:  MOVLW  00
05350:  ADDWFC x1F,W
05352:  MOVWF  x25
05354:  MOVLW  7A
05356:  ADDWF  x1E,W
05358:  MOVWF  FE9
0535A:  MOVLW  01
0535C:  ADDWFC x1F,W
0535E:  MOVWF  FEA
05360:  MOVFF  FEF,C26
05364:  MOVF   FF2,W
05366:  MOVWF  00
05368:  BCF    FF2.7
0536A:  MOVFF  C25,FAA
0536E:  MOVFF  C24,FA9
05372:  MOVFF  C26,FA8
05376:  BCF    FA6.6
05378:  BCF    FA6.7
0537A:  BSF    FA6.2
0537C:  MOVLB  F
0537E:  MOVLW  55
05380:  MOVWF  FA7
05382:  MOVLW  AA
05384:  MOVWF  FA7
05386:  BSF    FA6.1
05388:  BTFSC  FA6.1
0538A:  BRA    5388
0538C:  BCF    FA6.2
0538E:  MOVF   00,W
05390:  IORWF  FF2,F
....................                   }
05392:  MOVLB  C
05394:  MOVFF  C1F,03
05398:  MOVF   x1E,W
0539A:  INCF   x1E,F
0539C:  BTFSC  FD8.2
0539E:  INCF   x1F,F
053A0:  INCF   x20,F
053A2:  BTFSC  FD8.2
053A4:  INCF   x21,F
053A6:  BRA    52C2
053A8:  MOVLB  F
....................                }
....................                SMS_Massage4[j] = '\0' ; // end string
053AA:  MOVLW  FA
053AC:  MOVLB  C
053AE:  ADDWF  x20,W
053B0:  MOVWF  FE9
053B2:  MOVLW  09
053B4:  ADDWFC x21,W
053B6:  MOVWF  FEA
053B8:  CLRF   FEF
....................                
....................                j=0;
053BA:  CLRF   x21
053BC:  CLRF   x20
....................                i++;
053BE:  INCF   x1E,F
053C0:  BTFSC  FD8.2
053C2:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
053C4:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
053C6:  MOVLW  7A
053C8:  ADDWF  x1E,W
053CA:  MOVWF  FE9
053CC:  MOVLW  01
053CE:  ADDWFC x1F,W
053D0:  MOVWF  FEA
053D2:  MOVF   FEF,W
053D4:  SUBLW  0D
053D6:  BZ    53E2
053D8:  MOVF   x21,F
053DA:  BNZ   53E2
053DC:  MOVF   x20,W
053DE:  SUBLW  1E
053E0:  BC    5422
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
053E2:  MOVLW  5D
053E4:  ADDWF  x1E,W
053E6:  MOVWF  x24
053E8:  MOVLW  00
053EA:  ADDWFC x1F,W
053EC:  MOVWF  x25
053EE:  MOVF   FF2,W
053F0:  MOVWF  00
053F2:  BCF    FF2.7
053F4:  MOVFF  C25,FAA
053F8:  MOVFF  C24,FA9
053FC:  MOVLW  0D
053FE:  MOVWF  FA8
05400:  BCF    FA6.6
05402:  BCF    FA6.7
05404:  BSF    FA6.2
05406:  MOVLB  F
05408:  MOVLW  55
0540A:  MOVWF  FA7
0540C:  MOVLW  AA
0540E:  MOVWF  FA7
05410:  BSF    FA6.1
05412:  BTFSC  FA6.1
05414:  BRA    5412
05416:  BCF    FA6.2
05418:  MOVF   00,W
0541A:  IORWF  FF2,F
....................                      break;
0541C:  BRA    54AC
....................                   }
0541E:  BRA    5494
05420:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage5[j] = RxD_Buff[i];
05422:  MOVLW  1A
05424:  ADDWF  x20,W
05426:  MOVWF  01
05428:  MOVLW  0A
0542A:  ADDWFC x21,W
0542C:  MOVWF  03
0542E:  MOVLW  7A
05430:  ADDWF  x1E,W
05432:  MOVWF  FE9
05434:  MOVLW  01
05436:  ADDWFC x1F,W
05438:  MOVWF  FEA
0543A:  MOVFF  FEF,C26
0543E:  MOVFF  03,FEA
05442:  MOVFF  01,FE9
05446:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0544A:  MOVLW  5D
0544C:  ADDWF  x1E,W
0544E:  MOVWF  x24
05450:  MOVLW  00
05452:  ADDWFC x1F,W
05454:  MOVWF  x25
05456:  MOVLW  7A
05458:  ADDWF  x1E,W
0545A:  MOVWF  FE9
0545C:  MOVLW  01
0545E:  ADDWFC x1F,W
05460:  MOVWF  FEA
05462:  MOVFF  FEF,C26
05466:  MOVF   FF2,W
05468:  MOVWF  00
0546A:  BCF    FF2.7
0546C:  MOVFF  C25,FAA
05470:  MOVFF  C24,FA9
05474:  MOVFF  C26,FA8
05478:  BCF    FA6.6
0547A:  BCF    FA6.7
0547C:  BSF    FA6.2
0547E:  MOVLB  F
05480:  MOVLW  55
05482:  MOVWF  FA7
05484:  MOVLW  AA
05486:  MOVWF  FA7
05488:  BSF    FA6.1
0548A:  BTFSC  FA6.1
0548C:  BRA    548A
0548E:  BCF    FA6.2
05490:  MOVF   00,W
05492:  IORWF  FF2,F
....................                   }
05494:  MOVLB  C
05496:  MOVFF  C1F,03
0549A:  MOVF   x1E,W
0549C:  INCF   x1E,F
0549E:  BTFSC  FD8.2
054A0:  INCF   x1F,F
054A2:  INCF   x20,F
054A4:  BTFSC  FD8.2
054A6:  INCF   x21,F
054A8:  BRA    53C4
054AA:  MOVLB  F
....................                }
....................                SMS_Massage5[j] = '\0' ; // end string
054AC:  MOVLW  1A
054AE:  MOVLB  C
054B0:  ADDWF  x20,W
054B2:  MOVWF  FE9
054B4:  MOVLW  0A
054B6:  ADDWFC x21,W
054B8:  MOVWF  FEA
054BA:  CLRF   FEF
....................                
....................                j=0;
054BC:  CLRF   x21
054BE:  CLRF   x20
....................                i++;
054C0:  INCF   x1E,F
054C2:  BTFSC  FD8.2
054C4:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
054C6:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
054C8:  MOVLW  7A
054CA:  ADDWF  x1E,W
054CC:  MOVWF  FE9
054CE:  MOVLW  01
054D0:  ADDWFC x1F,W
054D2:  MOVWF  FEA
054D4:  MOVF   FEF,W
054D6:  SUBLW  0D
054D8:  BZ    54E4
054DA:  MOVF   x21,F
054DC:  BNZ   54E4
054DE:  MOVF   x20,W
054E0:  SUBLW  1E
054E2:  BC    5524
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
054E4:  MOVLW  5D
054E6:  ADDWF  x1E,W
054E8:  MOVWF  x24
054EA:  MOVLW  00
054EC:  ADDWFC x1F,W
054EE:  MOVWF  x25
054F0:  MOVF   FF2,W
054F2:  MOVWF  00
054F4:  BCF    FF2.7
054F6:  MOVFF  C25,FAA
054FA:  MOVFF  C24,FA9
054FE:  MOVLW  0D
05500:  MOVWF  FA8
05502:  BCF    FA6.6
05504:  BCF    FA6.7
05506:  BSF    FA6.2
05508:  MOVLB  F
0550A:  MOVLW  55
0550C:  MOVWF  FA7
0550E:  MOVLW  AA
05510:  MOVWF  FA7
05512:  BSF    FA6.1
05514:  BTFSC  FA6.1
05516:  BRA    5514
05518:  BCF    FA6.2
0551A:  MOVF   00,W
0551C:  IORWF  FF2,F
....................                      break;
0551E:  BRA    55B2
....................                   }
05520:  BRA    559A
05522:  MOVLB  C
....................                   else
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05524:  MOVLW  5D
05526:  ADDWF  x1E,W
05528:  MOVWF  x24
0552A:  MOVLW  00
0552C:  ADDWFC x1F,W
0552E:  MOVWF  x25
05530:  MOVLW  7A
05532:  ADDWF  x1E,W
05534:  MOVWF  FE9
05536:  MOVLW  01
05538:  ADDWFC x1F,W
0553A:  MOVWF  FEA
0553C:  MOVFF  FEF,C26
05540:  MOVF   FF2,W
05542:  MOVWF  00
05544:  BCF    FF2.7
05546:  MOVFF  C25,FAA
0554A:  MOVFF  C24,FA9
0554E:  MOVFF  C26,FA8
05552:  BCF    FA6.6
05554:  BCF    FA6.7
05556:  BSF    FA6.2
05558:  MOVLB  F
0555A:  MOVLW  55
0555C:  MOVWF  FA7
0555E:  MOVLW  AA
05560:  MOVWF  FA7
05562:  BSF    FA6.1
05564:  BTFSC  FA6.1
05566:  BRA    5564
05568:  BCF    FA6.2
0556A:  MOVF   00,W
0556C:  IORWF  FF2,F
....................                      SMS_Massage6[j] = RxD_Buff[i];
0556E:  MOVLW  3A
05570:  MOVLB  C
05572:  ADDWF  x20,W
05574:  MOVWF  01
05576:  MOVLW  0A
05578:  ADDWFC x21,W
0557A:  MOVWF  03
0557C:  MOVLW  7A
0557E:  ADDWF  x1E,W
05580:  MOVWF  FE9
05582:  MOVLW  01
05584:  ADDWFC x1F,W
05586:  MOVWF  FEA
05588:  MOVFF  FEF,C26
0558C:  MOVFF  03,FEA
05590:  MOVFF  01,FE9
05594:  MOVFF  C26,FEF
05598:  MOVLB  F
....................                   }
0559A:  MOVLB  C
0559C:  MOVFF  C1F,03
055A0:  MOVF   x1E,W
055A2:  INCF   x1E,F
055A4:  BTFSC  FD8.2
055A6:  INCF   x1F,F
055A8:  INCF   x20,F
055AA:  BTFSC  FD8.2
055AC:  INCF   x21,F
055AE:  BRA    54C6
055B0:  MOVLB  F
....................                }
....................                SMS_Massage6[j] = '\0' ; // end string
055B2:  MOVLW  3A
055B4:  MOVLB  C
055B6:  ADDWF  x20,W
055B8:  MOVWF  FE9
055BA:  MOVLW  0A
055BC:  ADDWFC x21,W
055BE:  MOVWF  FEA
055C0:  CLRF   FEF
....................                
....................                j=0;
055C2:  CLRF   x21
055C4:  CLRF   x20
....................                i++;
055C6:  INCF   x1E,F
055C8:  BTFSC  FD8.2
055CA:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
055CC:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
055CE:  MOVLW  7A
055D0:  ADDWF  x1E,W
055D2:  MOVWF  FE9
055D4:  MOVLW  01
055D6:  ADDWFC x1F,W
055D8:  MOVWF  FEA
055DA:  MOVF   FEF,W
055DC:  SUBLW  0D
055DE:  BZ    55EA
055E0:  MOVF   x21,F
055E2:  BNZ   55EA
055E4:  MOVF   x20,W
055E6:  SUBLW  1E
055E8:  BC    562A
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
055EA:  MOVLW  5D
055EC:  ADDWF  x1E,W
055EE:  MOVWF  x24
055F0:  MOVLW  00
055F2:  ADDWFC x1F,W
055F4:  MOVWF  x25
055F6:  MOVF   FF2,W
055F8:  MOVWF  00
055FA:  BCF    FF2.7
055FC:  MOVFF  C25,FAA
05600:  MOVFF  C24,FA9
05604:  MOVLW  0D
05606:  MOVWF  FA8
05608:  BCF    FA6.6
0560A:  BCF    FA6.7
0560C:  BSF    FA6.2
0560E:  MOVLB  F
05610:  MOVLW  55
05612:  MOVWF  FA7
05614:  MOVLW  AA
05616:  MOVWF  FA7
05618:  BSF    FA6.1
0561A:  BTFSC  FA6.1
0561C:  BRA    561A
0561E:  BCF    FA6.2
05620:  MOVF   00,W
05622:  IORWF  FF2,F
....................                      break;
05624:  BRA    56B4
....................                   }
05626:  BRA    569C
05628:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage7[j] = RxD_Buff[i];
0562A:  MOVLW  5A
0562C:  ADDWF  x20,W
0562E:  MOVWF  01
05630:  MOVLW  0A
05632:  ADDWFC x21,W
05634:  MOVWF  03
05636:  MOVLW  7A
05638:  ADDWF  x1E,W
0563A:  MOVWF  FE9
0563C:  MOVLW  01
0563E:  ADDWFC x1F,W
05640:  MOVWF  FEA
05642:  MOVFF  FEF,C26
05646:  MOVFF  03,FEA
0564A:  MOVFF  01,FE9
0564E:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05652:  MOVLW  5D
05654:  ADDWF  x1E,W
05656:  MOVWF  x24
05658:  MOVLW  00
0565A:  ADDWFC x1F,W
0565C:  MOVWF  x25
0565E:  MOVLW  7A
05660:  ADDWF  x1E,W
05662:  MOVWF  FE9
05664:  MOVLW  01
05666:  ADDWFC x1F,W
05668:  MOVWF  FEA
0566A:  MOVFF  FEF,C26
0566E:  MOVF   FF2,W
05670:  MOVWF  00
05672:  BCF    FF2.7
05674:  MOVFF  C25,FAA
05678:  MOVFF  C24,FA9
0567C:  MOVFF  C26,FA8
05680:  BCF    FA6.6
05682:  BCF    FA6.7
05684:  BSF    FA6.2
05686:  MOVLB  F
05688:  MOVLW  55
0568A:  MOVWF  FA7
0568C:  MOVLW  AA
0568E:  MOVWF  FA7
05690:  BSF    FA6.1
05692:  BTFSC  FA6.1
05694:  BRA    5692
05696:  BCF    FA6.2
05698:  MOVF   00,W
0569A:  IORWF  FF2,F
....................                   }
0569C:  MOVLB  C
0569E:  MOVFF  C1F,03
056A2:  MOVF   x1E,W
056A4:  INCF   x1E,F
056A6:  BTFSC  FD8.2
056A8:  INCF   x1F,F
056AA:  INCF   x20,F
056AC:  BTFSC  FD8.2
056AE:  INCF   x21,F
056B0:  BRA    55CC
056B2:  MOVLB  F
....................                }
....................                SMS_Massage7[j] = '\0' ; // end string
056B4:  MOVLW  5A
056B6:  MOVLB  C
056B8:  ADDWF  x20,W
056BA:  MOVWF  FE9
056BC:  MOVLW  0A
056BE:  ADDWFC x21,W
056C0:  MOVWF  FEA
056C2:  CLRF   FEF
....................                
....................                j=0;
056C4:  CLRF   x21
056C6:  CLRF   x20
....................                i++;
056C8:  INCF   x1E,F
056CA:  BTFSC  FD8.2
056CC:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
056CE:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
056D0:  MOVLW  7A
056D2:  ADDWF  x1E,W
056D4:  MOVWF  FE9
056D6:  MOVLW  01
056D8:  ADDWFC x1F,W
056DA:  MOVWF  FEA
056DC:  MOVF   FEF,W
056DE:  SUBLW  0D
056E0:  BZ    56EC
056E2:  MOVF   x21,F
056E4:  BNZ   56EC
056E6:  MOVF   x20,W
056E8:  SUBLW  1E
056EA:  BC    572C
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
056EC:  MOVLW  5D
056EE:  ADDWF  x1E,W
056F0:  MOVWF  x24
056F2:  MOVLW  00
056F4:  ADDWFC x1F,W
056F6:  MOVWF  x25
056F8:  MOVF   FF2,W
056FA:  MOVWF  00
056FC:  BCF    FF2.7
056FE:  MOVFF  C25,FAA
05702:  MOVFF  C24,FA9
05706:  MOVLW  0D
05708:  MOVWF  FA8
0570A:  BCF    FA6.6
0570C:  BCF    FA6.7
0570E:  BSF    FA6.2
05710:  MOVLB  F
05712:  MOVLW  55
05714:  MOVWF  FA7
05716:  MOVLW  AA
05718:  MOVWF  FA7
0571A:  BSF    FA6.1
0571C:  BTFSC  FA6.1
0571E:  BRA    571C
05720:  BCF    FA6.2
05722:  MOVF   00,W
05724:  IORWF  FF2,F
....................                      break;
05726:  BRA    57B6
....................                   }
05728:  BRA    579E
0572A:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage8[j] = RxD_Buff[i];
0572C:  MOVLW  7A
0572E:  ADDWF  x20,W
05730:  MOVWF  01
05732:  MOVLW  0A
05734:  ADDWFC x21,W
05736:  MOVWF  03
05738:  MOVLW  7A
0573A:  ADDWF  x1E,W
0573C:  MOVWF  FE9
0573E:  MOVLW  01
05740:  ADDWFC x1F,W
05742:  MOVWF  FEA
05744:  MOVFF  FEF,C26
05748:  MOVFF  03,FEA
0574C:  MOVFF  01,FE9
05750:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05754:  MOVLW  5D
05756:  ADDWF  x1E,W
05758:  MOVWF  x24
0575A:  MOVLW  00
0575C:  ADDWFC x1F,W
0575E:  MOVWF  x25
05760:  MOVLW  7A
05762:  ADDWF  x1E,W
05764:  MOVWF  FE9
05766:  MOVLW  01
05768:  ADDWFC x1F,W
0576A:  MOVWF  FEA
0576C:  MOVFF  FEF,C26
05770:  MOVF   FF2,W
05772:  MOVWF  00
05774:  BCF    FF2.7
05776:  MOVFF  C25,FAA
0577A:  MOVFF  C24,FA9
0577E:  MOVFF  C26,FA8
05782:  BCF    FA6.6
05784:  BCF    FA6.7
05786:  BSF    FA6.2
05788:  MOVLB  F
0578A:  MOVLW  55
0578C:  MOVWF  FA7
0578E:  MOVLW  AA
05790:  MOVWF  FA7
05792:  BSF    FA6.1
05794:  BTFSC  FA6.1
05796:  BRA    5794
05798:  BCF    FA6.2
0579A:  MOVF   00,W
0579C:  IORWF  FF2,F
....................                   }
0579E:  MOVLB  C
057A0:  MOVFF  C1F,03
057A4:  MOVF   x1E,W
057A6:  INCF   x1E,F
057A8:  BTFSC  FD8.2
057AA:  INCF   x1F,F
057AC:  INCF   x20,F
057AE:  BTFSC  FD8.2
057B0:  INCF   x21,F
057B2:  BRA    56CE
057B4:  MOVLB  F
....................                }
....................                SMS_Massage8[j] = '\0' ; // end string
057B6:  MOVLW  7A
057B8:  MOVLB  C
057BA:  ADDWF  x20,W
057BC:  MOVWF  FE9
057BE:  MOVLW  0A
057C0:  ADDWFC x21,W
057C2:  MOVWF  FEA
057C4:  CLRF   FEF
....................                
....................                /////////////////////////////////////////////
....................                j=0;
057C6:  CLRF   x21
057C8:  CLRF   x20
....................                i++;
057CA:  INCF   x1E,F
057CC:  BTFSC  FD8.2
057CE:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
057D0:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
057D2:  MOVLW  7A
057D4:  ADDWF  x1E,W
057D6:  MOVWF  FE9
057D8:  MOVLW  01
057DA:  ADDWFC x1F,W
057DC:  MOVWF  FEA
057DE:  MOVF   FEF,W
057E0:  SUBLW  0D
057E2:  BZ    57EE
057E4:  MOVF   x21,F
057E6:  BNZ   57EE
057E8:  MOVF   x20,W
057EA:  SUBLW  1E
057EC:  BC    583E
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
057EE:  MOVLW  5D
057F0:  ADDWF  x1E,W
057F2:  MOVWF  x24
057F4:  MOVLW  00
057F6:  ADDWFC x1F,W
057F8:  MOVWF  x25
057FA:  MOVLW  7A
057FC:  ADDWF  x1E,W
057FE:  MOVWF  FE9
05800:  MOVLW  01
05802:  ADDWFC x1F,W
05804:  MOVWF  FEA
05806:  MOVFF  FEF,C26
0580A:  MOVF   FF2,W
0580C:  MOVWF  00
0580E:  BCF    FF2.7
05810:  MOVFF  C25,FAA
05814:  MOVFF  C24,FA9
05818:  MOVFF  C26,FA8
0581C:  BCF    FA6.6
0581E:  BCF    FA6.7
05820:  BSF    FA6.2
05822:  MOVLB  F
05824:  MOVLW  55
05826:  MOVWF  FA7
05828:  MOVLW  AA
0582A:  MOVWF  FA7
0582C:  BSF    FA6.1
0582E:  BTFSC  FA6.1
05830:  BRA    582E
05832:  BCF    FA6.2
05834:  MOVF   00,W
05836:  IORWF  FF2,F
....................                      break;
05838:  BRA    58C8
....................                   }
0583A:  BRA    58B0
0583C:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage9[j] = RxD_Buff[i];
0583E:  MOVLW  9A
05840:  ADDWF  x20,W
05842:  MOVWF  01
05844:  MOVLW  0A
05846:  ADDWFC x21,W
05848:  MOVWF  03
0584A:  MOVLW  7A
0584C:  ADDWF  x1E,W
0584E:  MOVWF  FE9
05850:  MOVLW  01
05852:  ADDWFC x1F,W
05854:  MOVWF  FEA
05856:  MOVFF  FEF,C26
0585A:  MOVFF  03,FEA
0585E:  MOVFF  01,FE9
05862:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05866:  MOVLW  5D
05868:  ADDWF  x1E,W
0586A:  MOVWF  x24
0586C:  MOVLW  00
0586E:  ADDWFC x1F,W
05870:  MOVWF  x25
05872:  MOVLW  7A
05874:  ADDWF  x1E,W
05876:  MOVWF  FE9
05878:  MOVLW  01
0587A:  ADDWFC x1F,W
0587C:  MOVWF  FEA
0587E:  MOVFF  FEF,C26
05882:  MOVF   FF2,W
05884:  MOVWF  00
05886:  BCF    FF2.7
05888:  MOVFF  C25,FAA
0588C:  MOVFF  C24,FA9
05890:  MOVFF  C26,FA8
05894:  BCF    FA6.6
05896:  BCF    FA6.7
05898:  BSF    FA6.2
0589A:  MOVLB  F
0589C:  MOVLW  55
0589E:  MOVWF  FA7
058A0:  MOVLW  AA
058A2:  MOVWF  FA7
058A4:  BSF    FA6.1
058A6:  BTFSC  FA6.1
058A8:  BRA    58A6
058AA:  BCF    FA6.2
058AC:  MOVF   00,W
058AE:  IORWF  FF2,F
....................                   }
058B0:  MOVLB  C
058B2:  MOVFF  C1F,03
058B6:  MOVF   x1E,W
058B8:  INCF   x1E,F
058BA:  BTFSC  FD8.2
058BC:  INCF   x1F,F
058BE:  INCF   x20,F
058C0:  BTFSC  FD8.2
058C2:  INCF   x21,F
058C4:  BRA    57D0
058C6:  MOVLB  F
....................                }
....................                SMS_Massage9[j] = '\0' ; // end string
058C8:  MOVLW  9A
058CA:  MOVLB  C
058CC:  ADDWF  x20,W
058CE:  MOVWF  FE9
058D0:  MOVLW  0A
058D2:  ADDWFC x21,W
058D4:  MOVWF  FEA
058D6:  CLRF   FEF
....................                j=0;
058D8:  CLRF   x21
058DA:  CLRF   x20
....................                i++;
058DC:  INCF   x1E,F
058DE:  BTFSC  FD8.2
058E0:  INCF   x1F,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
058E2:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
058E4:  MOVLW  7A
058E6:  ADDWF  x1E,W
058E8:  MOVWF  FE9
058EA:  MOVLW  01
058EC:  ADDWFC x1F,W
058EE:  MOVWF  FEA
058F0:  MOVF   FEF,W
058F2:  SUBLW  0D
058F4:  BZ    5900
058F6:  MOVF   x21,F
058F8:  BNZ   5900
058FA:  MOVF   x20,W
058FC:  SUBLW  1E
058FE:  BC    5950
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05900:  MOVLW  5D
05902:  ADDWF  x1E,W
05904:  MOVWF  x24
05906:  MOVLW  00
05908:  ADDWFC x1F,W
0590A:  MOVWF  x25
0590C:  MOVLW  7A
0590E:  ADDWF  x1E,W
05910:  MOVWF  FE9
05912:  MOVLW  01
05914:  ADDWFC x1F,W
05916:  MOVWF  FEA
05918:  MOVFF  FEF,C26
0591C:  MOVF   FF2,W
0591E:  MOVWF  00
05920:  BCF    FF2.7
05922:  MOVFF  C25,FAA
05926:  MOVFF  C24,FA9
0592A:  MOVFF  C26,FA8
0592E:  BCF    FA6.6
05930:  BCF    FA6.7
05932:  BSF    FA6.2
05934:  MOVLB  F
05936:  MOVLW  55
05938:  MOVWF  FA7
0593A:  MOVLW  AA
0593C:  MOVWF  FA7
0593E:  BSF    FA6.1
05940:  BTFSC  FA6.1
05942:  BRA    5940
05944:  BCF    FA6.2
05946:  MOVF   00,W
05948:  IORWF  FF2,F
....................                      break;
0594A:  BRA    59DA
....................                   }
0594C:  BRA    59C2
0594E:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage10[j] = RxD_Buff[i];
05950:  MOVLW  BA
05952:  ADDWF  x20,W
05954:  MOVWF  01
05956:  MOVLW  0A
05958:  ADDWFC x21,W
0595A:  MOVWF  03
0595C:  MOVLW  7A
0595E:  ADDWF  x1E,W
05960:  MOVWF  FE9
05962:  MOVLW  01
05964:  ADDWFC x1F,W
05966:  MOVWF  FEA
05968:  MOVFF  FEF,C26
0596C:  MOVFF  03,FEA
05970:  MOVFF  01,FE9
05974:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05978:  MOVLW  5D
0597A:  ADDWF  x1E,W
0597C:  MOVWF  x24
0597E:  MOVLW  00
05980:  ADDWFC x1F,W
05982:  MOVWF  x25
05984:  MOVLW  7A
05986:  ADDWF  x1E,W
05988:  MOVWF  FE9
0598A:  MOVLW  01
0598C:  ADDWFC x1F,W
0598E:  MOVWF  FEA
05990:  MOVFF  FEF,C26
05994:  MOVF   FF2,W
05996:  MOVWF  00
05998:  BCF    FF2.7
0599A:  MOVFF  C25,FAA
0599E:  MOVFF  C24,FA9
059A2:  MOVFF  C26,FA8
059A6:  BCF    FA6.6
059A8:  BCF    FA6.7
059AA:  BSF    FA6.2
059AC:  MOVLB  F
059AE:  MOVLW  55
059B0:  MOVWF  FA7
059B2:  MOVLW  AA
059B4:  MOVWF  FA7
059B6:  BSF    FA6.1
059B8:  BTFSC  FA6.1
059BA:  BRA    59B8
059BC:  BCF    FA6.2
059BE:  MOVF   00,W
059C0:  IORWF  FF2,F
....................                   }
059C2:  MOVLB  C
059C4:  MOVFF  C1F,03
059C8:  MOVF   x1E,W
059CA:  INCF   x1E,F
059CC:  BTFSC  FD8.2
059CE:  INCF   x1F,F
059D0:  INCF   x20,F
059D2:  BTFSC  FD8.2
059D4:  INCF   x21,F
059D6:  BRA    58E2
059D8:  MOVLB  F
....................                }
....................                SMS_Massage10[j] = '\0' ; // end string
059DA:  MOVLW  BA
059DC:  MOVLB  C
059DE:  ADDWF  x20,W
059E0:  MOVWF  FE9
059E2:  MOVLW  0A
059E4:  ADDWFC x21,W
059E6:  MOVWF  FEA
059E8:  CLRF   FEF
....................                
....................                j=0;
059EA:  CLRF   x21
059EC:  CLRF   x20
....................                i++;
059EE:  INCF   x1E,F
059F0:  BTFSC  FD8.2
059F2:  INCF   x1F,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
059F4:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
059F6:  MOVLW  7A
059F8:  ADDWF  x1E,W
059FA:  MOVWF  FE9
059FC:  MOVLW  01
059FE:  ADDWFC x1F,W
05A00:  MOVWF  FEA
05A02:  MOVF   FEF,W
05A04:  SUBLW  0D
05A06:  BZ    5A12
05A08:  MOVF   x21,F
05A0A:  BNZ   5A12
05A0C:  MOVF   x20,W
05A0E:  SUBLW  1E
05A10:  BC    5A62
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05A12:  MOVLW  5D
05A14:  ADDWF  x1E,W
05A16:  MOVWF  x24
05A18:  MOVLW  00
05A1A:  ADDWFC x1F,W
05A1C:  MOVWF  x25
05A1E:  MOVLW  7A
05A20:  ADDWF  x1E,W
05A22:  MOVWF  FE9
05A24:  MOVLW  01
05A26:  ADDWFC x1F,W
05A28:  MOVWF  FEA
05A2A:  MOVFF  FEF,C26
05A2E:  MOVF   FF2,W
05A30:  MOVWF  00
05A32:  BCF    FF2.7
05A34:  MOVFF  C25,FAA
05A38:  MOVFF  C24,FA9
05A3C:  MOVFF  C26,FA8
05A40:  BCF    FA6.6
05A42:  BCF    FA6.7
05A44:  BSF    FA6.2
05A46:  MOVLB  F
05A48:  MOVLW  55
05A4A:  MOVWF  FA7
05A4C:  MOVLW  AA
05A4E:  MOVWF  FA7
05A50:  BSF    FA6.1
05A52:  BTFSC  FA6.1
05A54:  BRA    5A52
05A56:  BCF    FA6.2
05A58:  MOVF   00,W
05A5A:  IORWF  FF2,F
....................                      break;
05A5C:  BRA    5AEC
....................                   }
05A5E:  BRA    5AD4
05A60:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage11[j] = RxD_Buff[i];
05A62:  MOVLW  DA
05A64:  ADDWF  x20,W
05A66:  MOVWF  01
05A68:  MOVLW  0A
05A6A:  ADDWFC x21,W
05A6C:  MOVWF  03
05A6E:  MOVLW  7A
05A70:  ADDWF  x1E,W
05A72:  MOVWF  FE9
05A74:  MOVLW  01
05A76:  ADDWFC x1F,W
05A78:  MOVWF  FEA
05A7A:  MOVFF  FEF,C26
05A7E:  MOVFF  03,FEA
05A82:  MOVFF  01,FE9
05A86:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05A8A:  MOVLW  5D
05A8C:  ADDWF  x1E,W
05A8E:  MOVWF  x24
05A90:  MOVLW  00
05A92:  ADDWFC x1F,W
05A94:  MOVWF  x25
05A96:  MOVLW  7A
05A98:  ADDWF  x1E,W
05A9A:  MOVWF  FE9
05A9C:  MOVLW  01
05A9E:  ADDWFC x1F,W
05AA0:  MOVWF  FEA
05AA2:  MOVFF  FEF,C26
05AA6:  MOVF   FF2,W
05AA8:  MOVWF  00
05AAA:  BCF    FF2.7
05AAC:  MOVFF  C25,FAA
05AB0:  MOVFF  C24,FA9
05AB4:  MOVFF  C26,FA8
05AB8:  BCF    FA6.6
05ABA:  BCF    FA6.7
05ABC:  BSF    FA6.2
05ABE:  MOVLB  F
05AC0:  MOVLW  55
05AC2:  MOVWF  FA7
05AC4:  MOVLW  AA
05AC6:  MOVWF  FA7
05AC8:  BSF    FA6.1
05ACA:  BTFSC  FA6.1
05ACC:  BRA    5ACA
05ACE:  BCF    FA6.2
05AD0:  MOVF   00,W
05AD2:  IORWF  FF2,F
....................                   }
05AD4:  MOVLB  C
05AD6:  MOVFF  C1F,03
05ADA:  MOVF   x1E,W
05ADC:  INCF   x1E,F
05ADE:  BTFSC  FD8.2
05AE0:  INCF   x1F,F
05AE2:  INCF   x20,F
05AE4:  BTFSC  FD8.2
05AE6:  INCF   x21,F
05AE8:  BRA    59F4
05AEA:  MOVLB  F
....................                }
....................                SMS_Massage11[j] = '\0' ; // end string
05AEC:  MOVLW  DA
05AEE:  MOVLB  C
05AF0:  ADDWF  x20,W
05AF2:  MOVWF  FE9
05AF4:  MOVLW  0A
05AF6:  ADDWFC x21,W
05AF8:  MOVWF  FEA
05AFA:  CLRF   FEF
....................                
....................                j=0;
05AFC:  CLRF   x21
05AFE:  CLRF   x20
....................                i++;
05B00:  INCF   x1E,F
05B02:  BTFSC  FD8.2
05B04:  INCF   x1F,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05B06:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05B08:  MOVLW  7A
05B0A:  ADDWF  x1E,W
05B0C:  MOVWF  FE9
05B0E:  MOVLW  01
05B10:  ADDWFC x1F,W
05B12:  MOVWF  FEA
05B14:  MOVF   FEF,W
05B16:  SUBLW  0D
05B18:  BZ    5B24
05B1A:  MOVF   x21,F
05B1C:  BNZ   5B24
05B1E:  MOVF   x20,W
05B20:  SUBLW  1E
05B22:  BC    5B74
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05B24:  MOVLW  5D
05B26:  ADDWF  x1E,W
05B28:  MOVWF  x24
05B2A:  MOVLW  00
05B2C:  ADDWFC x1F,W
05B2E:  MOVWF  x25
05B30:  MOVLW  7A
05B32:  ADDWF  x1E,W
05B34:  MOVWF  FE9
05B36:  MOVLW  01
05B38:  ADDWFC x1F,W
05B3A:  MOVWF  FEA
05B3C:  MOVFF  FEF,C26
05B40:  MOVF   FF2,W
05B42:  MOVWF  00
05B44:  BCF    FF2.7
05B46:  MOVFF  C25,FAA
05B4A:  MOVFF  C24,FA9
05B4E:  MOVFF  C26,FA8
05B52:  BCF    FA6.6
05B54:  BCF    FA6.7
05B56:  BSF    FA6.2
05B58:  MOVLB  F
05B5A:  MOVLW  55
05B5C:  MOVWF  FA7
05B5E:  MOVLW  AA
05B60:  MOVWF  FA7
05B62:  BSF    FA6.1
05B64:  BTFSC  FA6.1
05B66:  BRA    5B64
05B68:  BCF    FA6.2
05B6A:  MOVF   00,W
05B6C:  IORWF  FF2,F
....................                      break;
05B6E:  BRA    5BFE
....................                   }
05B70:  BRA    5BE6
05B72:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage12[j] = RxD_Buff[i];
05B74:  MOVLW  FA
05B76:  ADDWF  x20,W
05B78:  MOVWF  01
05B7A:  MOVLW  0A
05B7C:  ADDWFC x21,W
05B7E:  MOVWF  03
05B80:  MOVLW  7A
05B82:  ADDWF  x1E,W
05B84:  MOVWF  FE9
05B86:  MOVLW  01
05B88:  ADDWFC x1F,W
05B8A:  MOVWF  FEA
05B8C:  MOVFF  FEF,C26
05B90:  MOVFF  03,FEA
05B94:  MOVFF  01,FE9
05B98:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05B9C:  MOVLW  5D
05B9E:  ADDWF  x1E,W
05BA0:  MOVWF  x24
05BA2:  MOVLW  00
05BA4:  ADDWFC x1F,W
05BA6:  MOVWF  x25
05BA8:  MOVLW  7A
05BAA:  ADDWF  x1E,W
05BAC:  MOVWF  FE9
05BAE:  MOVLW  01
05BB0:  ADDWFC x1F,W
05BB2:  MOVWF  FEA
05BB4:  MOVFF  FEF,C26
05BB8:  MOVF   FF2,W
05BBA:  MOVWF  00
05BBC:  BCF    FF2.7
05BBE:  MOVFF  C25,FAA
05BC2:  MOVFF  C24,FA9
05BC6:  MOVFF  C26,FA8
05BCA:  BCF    FA6.6
05BCC:  BCF    FA6.7
05BCE:  BSF    FA6.2
05BD0:  MOVLB  F
05BD2:  MOVLW  55
05BD4:  MOVWF  FA7
05BD6:  MOVLW  AA
05BD8:  MOVWF  FA7
05BDA:  BSF    FA6.1
05BDC:  BTFSC  FA6.1
05BDE:  BRA    5BDC
05BE0:  BCF    FA6.2
05BE2:  MOVF   00,W
05BE4:  IORWF  FF2,F
....................                   }
05BE6:  MOVLB  C
05BE8:  MOVFF  C1F,03
05BEC:  MOVF   x1E,W
05BEE:  INCF   x1E,F
05BF0:  BTFSC  FD8.2
05BF2:  INCF   x1F,F
05BF4:  INCF   x20,F
05BF6:  BTFSC  FD8.2
05BF8:  INCF   x21,F
05BFA:  BRA    5B06
05BFC:  MOVLB  F
....................                }
....................                SMS_Massage12[j] = '\0' ; // end string
05BFE:  MOVLW  FA
05C00:  MOVLB  C
05C02:  ADDWF  x20,W
05C04:  MOVWF  FE9
05C06:  MOVLW  0A
05C08:  ADDWFC x21,W
05C0A:  MOVWF  FEA
05C0C:  CLRF   FEF
....................                
....................                j=0;
05C0E:  CLRF   x21
05C10:  CLRF   x20
....................                i++;
05C12:  INCF   x1E,F
05C14:  BTFSC  FD8.2
05C16:  INCF   x1F,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05C18:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05C1A:  MOVLW  7A
05C1C:  ADDWF  x1E,W
05C1E:  MOVWF  FE9
05C20:  MOVLW  01
05C22:  ADDWFC x1F,W
05C24:  MOVWF  FEA
05C26:  MOVF   FEF,W
05C28:  SUBLW  0D
05C2A:  BZ    5C36
05C2C:  MOVF   x21,F
05C2E:  BNZ   5C36
05C30:  MOVF   x20,W
05C32:  SUBLW  1E
05C34:  BC    5C86
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05C36:  MOVLW  5D
05C38:  ADDWF  x1E,W
05C3A:  MOVWF  x24
05C3C:  MOVLW  00
05C3E:  ADDWFC x1F,W
05C40:  MOVWF  x25
05C42:  MOVLW  7A
05C44:  ADDWF  x1E,W
05C46:  MOVWF  FE9
05C48:  MOVLW  01
05C4A:  ADDWFC x1F,W
05C4C:  MOVWF  FEA
05C4E:  MOVFF  FEF,C26
05C52:  MOVF   FF2,W
05C54:  MOVWF  00
05C56:  BCF    FF2.7
05C58:  MOVFF  C25,FAA
05C5C:  MOVFF  C24,FA9
05C60:  MOVFF  C26,FA8
05C64:  BCF    FA6.6
05C66:  BCF    FA6.7
05C68:  BSF    FA6.2
05C6A:  MOVLB  F
05C6C:  MOVLW  55
05C6E:  MOVWF  FA7
05C70:  MOVLW  AA
05C72:  MOVWF  FA7
05C74:  BSF    FA6.1
05C76:  BTFSC  FA6.1
05C78:  BRA    5C76
05C7A:  BCF    FA6.2
05C7C:  MOVF   00,W
05C7E:  IORWF  FF2,F
....................                      break;
05C80:  BRA    5D10
....................                   }
05C82:  BRA    5CF8
05C84:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage13[j] = RxD_Buff[i];
05C86:  MOVLW  1A
05C88:  ADDWF  x20,W
05C8A:  MOVWF  01
05C8C:  MOVLW  0B
05C8E:  ADDWFC x21,W
05C90:  MOVWF  03
05C92:  MOVLW  7A
05C94:  ADDWF  x1E,W
05C96:  MOVWF  FE9
05C98:  MOVLW  01
05C9A:  ADDWFC x1F,W
05C9C:  MOVWF  FEA
05C9E:  MOVFF  FEF,C26
05CA2:  MOVFF  03,FEA
05CA6:  MOVFF  01,FE9
05CAA:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05CAE:  MOVLW  5D
05CB0:  ADDWF  x1E,W
05CB2:  MOVWF  x24
05CB4:  MOVLW  00
05CB6:  ADDWFC x1F,W
05CB8:  MOVWF  x25
05CBA:  MOVLW  7A
05CBC:  ADDWF  x1E,W
05CBE:  MOVWF  FE9
05CC0:  MOVLW  01
05CC2:  ADDWFC x1F,W
05CC4:  MOVWF  FEA
05CC6:  MOVFF  FEF,C26
05CCA:  MOVF   FF2,W
05CCC:  MOVWF  00
05CCE:  BCF    FF2.7
05CD0:  MOVFF  C25,FAA
05CD4:  MOVFF  C24,FA9
05CD8:  MOVFF  C26,FA8
05CDC:  BCF    FA6.6
05CDE:  BCF    FA6.7
05CE0:  BSF    FA6.2
05CE2:  MOVLB  F
05CE4:  MOVLW  55
05CE6:  MOVWF  FA7
05CE8:  MOVLW  AA
05CEA:  MOVWF  FA7
05CEC:  BSF    FA6.1
05CEE:  BTFSC  FA6.1
05CF0:  BRA    5CEE
05CF2:  BCF    FA6.2
05CF4:  MOVF   00,W
05CF6:  IORWF  FF2,F
....................                   }
05CF8:  MOVLB  C
05CFA:  MOVFF  C1F,03
05CFE:  MOVF   x1E,W
05D00:  INCF   x1E,F
05D02:  BTFSC  FD8.2
05D04:  INCF   x1F,F
05D06:  INCF   x20,F
05D08:  BTFSC  FD8.2
05D0A:  INCF   x21,F
05D0C:  BRA    5C18
05D0E:  MOVLB  F
....................                }
....................                SMS_Massage13[j] = '\0' ; // end string
05D10:  MOVLW  1A
05D12:  MOVLB  C
05D14:  ADDWF  x20,W
05D16:  MOVWF  FE9
05D18:  MOVLW  0B
05D1A:  ADDWFC x21,W
05D1C:  MOVWF  FEA
05D1E:  CLRF   FEF
....................                
....................                j=0;
05D20:  CLRF   x21
05D22:  CLRF   x20
....................                i++;
05D24:  INCF   x1E,F
05D26:  BTFSC  FD8.2
05D28:  INCF   x1F,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05D2A:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05D2C:  MOVLW  7A
05D2E:  ADDWF  x1E,W
05D30:  MOVWF  FE9
05D32:  MOVLW  01
05D34:  ADDWFC x1F,W
05D36:  MOVWF  FEA
05D38:  MOVF   FEF,W
05D3A:  SUBLW  0D
05D3C:  BZ    5D48
05D3E:  MOVF   x21,F
05D40:  BNZ   5D48
05D42:  MOVF   x20,W
05D44:  SUBLW  1E
05D46:  BC    5D98
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05D48:  MOVLW  5D
05D4A:  ADDWF  x1E,W
05D4C:  MOVWF  x24
05D4E:  MOVLW  00
05D50:  ADDWFC x1F,W
05D52:  MOVWF  x25
05D54:  MOVLW  7A
05D56:  ADDWF  x1E,W
05D58:  MOVWF  FE9
05D5A:  MOVLW  01
05D5C:  ADDWFC x1F,W
05D5E:  MOVWF  FEA
05D60:  MOVFF  FEF,C26
05D64:  MOVF   FF2,W
05D66:  MOVWF  00
05D68:  BCF    FF2.7
05D6A:  MOVFF  C25,FAA
05D6E:  MOVFF  C24,FA9
05D72:  MOVFF  C26,FA8
05D76:  BCF    FA6.6
05D78:  BCF    FA6.7
05D7A:  BSF    FA6.2
05D7C:  MOVLB  F
05D7E:  MOVLW  55
05D80:  MOVWF  FA7
05D82:  MOVLW  AA
05D84:  MOVWF  FA7
05D86:  BSF    FA6.1
05D88:  BTFSC  FA6.1
05D8A:  BRA    5D88
05D8C:  BCF    FA6.2
05D8E:  MOVF   00,W
05D90:  IORWF  FF2,F
....................                      break;
05D92:  BRA    5E22
....................                   }
05D94:  BRA    5E0A
05D96:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage14[j] = RxD_Buff[i];
05D98:  MOVLW  3A
05D9A:  ADDWF  x20,W
05D9C:  MOVWF  01
05D9E:  MOVLW  0B
05DA0:  ADDWFC x21,W
05DA2:  MOVWF  03
05DA4:  MOVLW  7A
05DA6:  ADDWF  x1E,W
05DA8:  MOVWF  FE9
05DAA:  MOVLW  01
05DAC:  ADDWFC x1F,W
05DAE:  MOVWF  FEA
05DB0:  MOVFF  FEF,C26
05DB4:  MOVFF  03,FEA
05DB8:  MOVFF  01,FE9
05DBC:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05DC0:  MOVLW  5D
05DC2:  ADDWF  x1E,W
05DC4:  MOVWF  x24
05DC6:  MOVLW  00
05DC8:  ADDWFC x1F,W
05DCA:  MOVWF  x25
05DCC:  MOVLW  7A
05DCE:  ADDWF  x1E,W
05DD0:  MOVWF  FE9
05DD2:  MOVLW  01
05DD4:  ADDWFC x1F,W
05DD6:  MOVWF  FEA
05DD8:  MOVFF  FEF,C26
05DDC:  MOVF   FF2,W
05DDE:  MOVWF  00
05DE0:  BCF    FF2.7
05DE2:  MOVFF  C25,FAA
05DE6:  MOVFF  C24,FA9
05DEA:  MOVFF  C26,FA8
05DEE:  BCF    FA6.6
05DF0:  BCF    FA6.7
05DF2:  BSF    FA6.2
05DF4:  MOVLB  F
05DF6:  MOVLW  55
05DF8:  MOVWF  FA7
05DFA:  MOVLW  AA
05DFC:  MOVWF  FA7
05DFE:  BSF    FA6.1
05E00:  BTFSC  FA6.1
05E02:  BRA    5E00
05E04:  BCF    FA6.2
05E06:  MOVF   00,W
05E08:  IORWF  FF2,F
....................                   }
05E0A:  MOVLB  C
05E0C:  MOVFF  C1F,03
05E10:  MOVF   x1E,W
05E12:  INCF   x1E,F
05E14:  BTFSC  FD8.2
05E16:  INCF   x1F,F
05E18:  INCF   x20,F
05E1A:  BTFSC  FD8.2
05E1C:  INCF   x21,F
05E1E:  BRA    5D2A
05E20:  MOVLB  F
....................                }
....................                SMS_Massage14[j] = '\0' ; // end string
05E22:  MOVLW  3A
05E24:  MOVLB  C
05E26:  ADDWF  x20,W
05E28:  MOVWF  FE9
05E2A:  MOVLW  0B
05E2C:  ADDWFC x21,W
05E2E:  MOVWF  FEA
05E30:  CLRF   FEF
....................                
....................                j=0;
05E32:  CLRF   x21
05E34:  CLRF   x20
....................                i++;
05E36:  INCF   x1E,F
05E38:  BTFSC  FD8.2
05E3A:  INCF   x1F,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05E3C:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05E3E:  MOVLW  7A
05E40:  ADDWF  x1E,W
05E42:  MOVWF  FE9
05E44:  MOVLW  01
05E46:  ADDWFC x1F,W
05E48:  MOVWF  FEA
05E4A:  MOVF   FEF,W
05E4C:  SUBLW  0D
05E4E:  BZ    5E5A
05E50:  MOVF   x21,F
05E52:  BNZ   5E5A
05E54:  MOVF   x20,W
05E56:  SUBLW  1E
05E58:  BC    5EAA
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05E5A:  MOVLW  5D
05E5C:  ADDWF  x1E,W
05E5E:  MOVWF  x24
05E60:  MOVLW  00
05E62:  ADDWFC x1F,W
05E64:  MOVWF  x25
05E66:  MOVLW  7A
05E68:  ADDWF  x1E,W
05E6A:  MOVWF  FE9
05E6C:  MOVLW  01
05E6E:  ADDWFC x1F,W
05E70:  MOVWF  FEA
05E72:  MOVFF  FEF,C26
05E76:  MOVF   FF2,W
05E78:  MOVWF  00
05E7A:  BCF    FF2.7
05E7C:  MOVFF  C25,FAA
05E80:  MOVFF  C24,FA9
05E84:  MOVFF  C26,FA8
05E88:  BCF    FA6.6
05E8A:  BCF    FA6.7
05E8C:  BSF    FA6.2
05E8E:  MOVLB  F
05E90:  MOVLW  55
05E92:  MOVWF  FA7
05E94:  MOVLW  AA
05E96:  MOVWF  FA7
05E98:  BSF    FA6.1
05E9A:  BTFSC  FA6.1
05E9C:  BRA    5E9A
05E9E:  BCF    FA6.2
05EA0:  MOVF   00,W
05EA2:  IORWF  FF2,F
....................                      break;
05EA4:  BRA    5F34
....................                   }
05EA6:  BRA    5F1C
05EA8:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage15[j] = RxD_Buff[i];
05EAA:  MOVLW  5A
05EAC:  ADDWF  x20,W
05EAE:  MOVWF  01
05EB0:  MOVLW  0B
05EB2:  ADDWFC x21,W
05EB4:  MOVWF  03
05EB6:  MOVLW  7A
05EB8:  ADDWF  x1E,W
05EBA:  MOVWF  FE9
05EBC:  MOVLW  01
05EBE:  ADDWFC x1F,W
05EC0:  MOVWF  FEA
05EC2:  MOVFF  FEF,C26
05EC6:  MOVFF  03,FEA
05ECA:  MOVFF  01,FE9
05ECE:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05ED2:  MOVLW  5D
05ED4:  ADDWF  x1E,W
05ED6:  MOVWF  x24
05ED8:  MOVLW  00
05EDA:  ADDWFC x1F,W
05EDC:  MOVWF  x25
05EDE:  MOVLW  7A
05EE0:  ADDWF  x1E,W
05EE2:  MOVWF  FE9
05EE4:  MOVLW  01
05EE6:  ADDWFC x1F,W
05EE8:  MOVWF  FEA
05EEA:  MOVFF  FEF,C26
05EEE:  MOVF   FF2,W
05EF0:  MOVWF  00
05EF2:  BCF    FF2.7
05EF4:  MOVFF  C25,FAA
05EF8:  MOVFF  C24,FA9
05EFC:  MOVFF  C26,FA8
05F00:  BCF    FA6.6
05F02:  BCF    FA6.7
05F04:  BSF    FA6.2
05F06:  MOVLB  F
05F08:  MOVLW  55
05F0A:  MOVWF  FA7
05F0C:  MOVLW  AA
05F0E:  MOVWF  FA7
05F10:  BSF    FA6.1
05F12:  BTFSC  FA6.1
05F14:  BRA    5F12
05F16:  BCF    FA6.2
05F18:  MOVF   00,W
05F1A:  IORWF  FF2,F
....................                   }
05F1C:  MOVLB  C
05F1E:  MOVFF  C1F,03
05F22:  MOVF   x1E,W
05F24:  INCF   x1E,F
05F26:  BTFSC  FD8.2
05F28:  INCF   x1F,F
05F2A:  INCF   x20,F
05F2C:  BTFSC  FD8.2
05F2E:  INCF   x21,F
05F30:  BRA    5E3C
05F32:  MOVLB  F
....................                }
....................                SMS_Massage15[j] = '\0' ; // end string
05F34:  MOVLW  5A
05F36:  MOVLB  C
05F38:  ADDWF  x20,W
05F3A:  MOVWF  FE9
05F3C:  MOVLW  0B
05F3E:  ADDWFC x21,W
05F40:  MOVWF  FEA
05F42:  CLRF   FEF
....................                
....................                j=0;
05F44:  CLRF   x21
05F46:  CLRF   x20
....................                i++;
05F48:  INCF   x1E,F
05F4A:  BTFSC  FD8.2
05F4C:  INCF   x1F,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05F4E:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05F50:  MOVLW  7A
05F52:  ADDWF  x1E,W
05F54:  MOVWF  FE9
05F56:  MOVLW  01
05F58:  ADDWFC x1F,W
05F5A:  MOVWF  FEA
05F5C:  MOVF   FEF,W
05F5E:  SUBLW  0D
05F60:  BZ    5F6C
05F62:  MOVF   x21,F
05F64:  BNZ   5F6C
05F66:  MOVF   x20,W
05F68:  SUBLW  1E
05F6A:  BC    5FBC
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05F6C:  MOVLW  5D
05F6E:  ADDWF  x1E,W
05F70:  MOVWF  x24
05F72:  MOVLW  00
05F74:  ADDWFC x1F,W
05F76:  MOVWF  x25
05F78:  MOVLW  7A
05F7A:  ADDWF  x1E,W
05F7C:  MOVWF  FE9
05F7E:  MOVLW  01
05F80:  ADDWFC x1F,W
05F82:  MOVWF  FEA
05F84:  MOVFF  FEF,C26
05F88:  MOVF   FF2,W
05F8A:  MOVWF  00
05F8C:  BCF    FF2.7
05F8E:  MOVFF  C25,FAA
05F92:  MOVFF  C24,FA9
05F96:  MOVFF  C26,FA8
05F9A:  BCF    FA6.6
05F9C:  BCF    FA6.7
05F9E:  BSF    FA6.2
05FA0:  MOVLB  F
05FA2:  MOVLW  55
05FA4:  MOVWF  FA7
05FA6:  MOVLW  AA
05FA8:  MOVWF  FA7
05FAA:  BSF    FA6.1
05FAC:  BTFSC  FA6.1
05FAE:  BRA    5FAC
05FB0:  BCF    FA6.2
05FB2:  MOVF   00,W
05FB4:  IORWF  FF2,F
....................                      break;
05FB6:  BRA    6046
....................                   }
05FB8:  BRA    602E
05FBA:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage16[j] = RxD_Buff[i];
05FBC:  MOVLW  7A
05FBE:  ADDWF  x20,W
05FC0:  MOVWF  01
05FC2:  MOVLW  0B
05FC4:  ADDWFC x21,W
05FC6:  MOVWF  03
05FC8:  MOVLW  7A
05FCA:  ADDWF  x1E,W
05FCC:  MOVWF  FE9
05FCE:  MOVLW  01
05FD0:  ADDWFC x1F,W
05FD2:  MOVWF  FEA
05FD4:  MOVFF  FEF,C26
05FD8:  MOVFF  03,FEA
05FDC:  MOVFF  01,FE9
05FE0:  MOVFF  C26,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05FE4:  MOVLW  5D
05FE6:  ADDWF  x1E,W
05FE8:  MOVWF  x24
05FEA:  MOVLW  00
05FEC:  ADDWFC x1F,W
05FEE:  MOVWF  x25
05FF0:  MOVLW  7A
05FF2:  ADDWF  x1E,W
05FF4:  MOVWF  FE9
05FF6:  MOVLW  01
05FF8:  ADDWFC x1F,W
05FFA:  MOVWF  FEA
05FFC:  MOVFF  FEF,C26
06000:  MOVF   FF2,W
06002:  MOVWF  00
06004:  BCF    FF2.7
06006:  MOVFF  C25,FAA
0600A:  MOVFF  C24,FA9
0600E:  MOVFF  C26,FA8
06012:  BCF    FA6.6
06014:  BCF    FA6.7
06016:  BSF    FA6.2
06018:  MOVLB  F
0601A:  MOVLW  55
0601C:  MOVWF  FA7
0601E:  MOVLW  AA
06020:  MOVWF  FA7
06022:  BSF    FA6.1
06024:  BTFSC  FA6.1
06026:  BRA    6024
06028:  BCF    FA6.2
0602A:  MOVF   00,W
0602C:  IORWF  FF2,F
....................                   }
0602E:  MOVLB  C
06030:  MOVFF  C1F,03
06034:  MOVF   x1E,W
06036:  INCF   x1E,F
06038:  BTFSC  FD8.2
0603A:  INCF   x1F,F
0603C:  INCF   x20,F
0603E:  BTFSC  FD8.2
06040:  INCF   x21,F
06042:  BRA    5F4E
06044:  MOVLB  F
....................                }
....................                SMS_Massage16[j] = '\0' ; // end string
06046:  MOVLW  7A
06048:  MOVLB  C
0604A:  ADDWF  x20,W
0604C:  MOVWF  FE9
0604E:  MOVLW  0B
06050:  ADDWFC x21,W
06052:  MOVWF  FEA
06054:  CLRF   FEF
....................                
....................             
....................                TxD_Buff[0] = Address ;         //Address
06056:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x22 ;            //return function code
0605A:  MOVLW  22
0605C:  MOVLB  0
0605E:  MOVWF  x7C
....................    
....................                CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
06060:  MOVLB  C
06062:  CLRF   x26
06064:  MOVLW  7B
06066:  MOVWF  x25
06068:  MOVLW  02
0606A:  MOVWF  x27
0606C:  MOVLB  0
0606E:  CALL   2EF0
....................    
....................                TxD_Buff[2] = CRC_Hi ;
06072:  MOVFF  57B,7D
....................                TxD_Buff[3] = CRC_Lo ;
06076:  MOVFF  57A,7E
....................    
....................                output_bit(P485ctrl,1);
0607A:  BSF    F8A.3
0607C:  BCF    F93.3
....................                delay_ms(10);
0607E:  MOVLW  0A
06080:  MOVLB  C
06082:  MOVWF  x24
06084:  MOVLB  0
06086:  CALL   0952
....................    
....................                putc(Txd_Buff[0]);
0608A:  MOVF   x7B,W
0608C:  CALL   2F46
....................                putc(Txd_Buff[1]);
06090:  MOVF   x7C,W
06092:  CALL   2F46
....................                putc(Txd_Buff[2]);
06096:  MOVF   x7D,W
06098:  CALL   2F46
....................                putc(Txd_Buff[3]);
0609C:  MOVF   x7E,W
0609E:  CALL   2F46
....................    
....................                delay_ms(3);
060A2:  MOVLW  03
060A4:  MOVLB  C
060A6:  MOVWF  x24
060A8:  MOVLB  0
060AA:  CALL   0952
....................                output_bit(P485ctrl,0);
060AE:  BCF    F8A.3
060B0:  BCF    F93.3
060B2:  MOVLB  5
....................             }
....................             ////////////////////////////// WRITE Faultname //////////////////////////
....................    
....................             if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
060B4:  MOVLB  1
060B6:  MOVF   x7B,W
060B8:  SUBLW  03
060BA:  BNZ   6148
....................             {
....................                Data_Buff[0] = Input9_16;
060BC:  MOVFF  4A,583
....................                Data_Buff[1] = Input1_8;
060C0:  MOVFF  49,584
....................                
....................                
....................                TxD_Buff[0] = Address ;         //Address
060C4:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x03 ;           //Function Code
060C8:  MOVLW  03
060CA:  MOVLB  0
060CC:  MOVWF  x7C
....................                TxD_Buff[2] = 0x02 ;          //Byte Count
060CE:  MOVLW  02
060D0:  MOVWF  x7D
....................                TxD_Buff[3] = Data_Buff[0];   //first byte Data
060D2:  MOVFF  583,7E
....................                TxD_Buff[4] = Data_Buff[1];   //first byte Data
060D6:  MOVFF  584,7F
....................    
....................                CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
060DA:  MOVLB  C
060DC:  CLRF   x26
060DE:  MOVLW  7B
060E0:  MOVWF  x25
060E2:  MOVLW  05
060E4:  MOVWF  x27
060E6:  MOVLB  0
060E8:  CALL   2EF0
....................    
....................                TxD_Buff[5] = CRC_Hi ;
060EC:  MOVFF  57B,80
....................                TxD_Buff[6] = CRC_Lo ;
060F0:  MOVFF  57A,81
....................    
....................                output_bit(P485ctrl,1);
060F4:  BSF    F8A.3
060F6:  BCF    F93.3
....................                restart_wdt();
060F8:  CLRWDT
....................                delay_ms(4);
060FA:  MOVLW  04
060FC:  MOVLB  C
060FE:  MOVWF  x24
06100:  MOVLB  0
06102:  CALL   0952
....................                restart_wdt();
06106:  CLRWDT
....................    
....................                putc(TxD_Buff[0]) ;               //Address
06108:  MOVF   x7B,W
0610A:  CALL   2F46
....................                putc(TxD_Buff[1]) ;               //Function Code
0610E:  MOVF   x7C,W
06110:  CALL   2F46
....................                putc(TxD_Buff[2]) ;               //Byte Count
06114:  MOVF   x7D,W
06116:  CALL   2F46
....................                putc(TxD_Buff[3]) ;
0611A:  MOVF   x7E,W
0611C:  CALL   2F46
....................                putc(TxD_Buff[4]) ;
06120:  MOVF   x7F,W
06122:  CALL   2F46
....................                putc(TxD_Buff[5]) ;
06126:  MOVF   x80,W
06128:  CALL   2F46
....................                putc(TxD_Buff[6]) ;
0612C:  MOVF   x81,W
0612E:  CALL   2F46
....................    
....................                restart_wdt();
06132:  CLRWDT
....................                delay_ms(3);
06134:  MOVLW  03
06136:  MOVLB  C
06138:  MOVWF  x24
0613A:  MOVLB  0
0613C:  CALL   0952
....................                restart_wdt();
06140:  CLRWDT
....................                output_bit(P485ctrl,0);
06142:  BCF    F8A.3
06144:  BCF    F93.3
06146:  MOVLB  1
....................             }
....................       }  //if(RxD_Buff[1] == address)
.................... 
....................       Send_check_Time = 500; //5 Second
06148:  MOVLW  01
0614A:  MOVLB  5
0614C:  MOVWF  x7D
0614E:  MOVLW  F4
06150:  MOVWF  x7C
....................    }
.................... 
....................    recieve_completed = 0 ;
06152:  BCF    30.5
....................    sequence = end_sq ;
06154:  MOVFF  6F,78
....................    T_timeout = 0x00;
06158:  MOVLB  9
0615A:  CLRF   x85
....................    RxD_DataLen = 0x00 ;
0615C:  MOVLB  0
0615E:  CLRF   x7A
....................    output_bit(P485ctrl,0);
06160:  BCF    F8A.3
06162:  BCF    F93.3
06164:  GOTO   AE46 (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void Read_Input(void)
.................... {
.................... 
....................    int8 MCP23s17_1_A;
....................    int8 MCP23s17_1_B;
....................    int8 MCP23s17_2_A;
....................    int8 MCP23s17_2_B;
....................    
....................    //if(NoOfPoint >= 10)
....................    //{
....................       // if(NoOfPoint >= 20)
....................    //{   
....................      
....................       ///////////////////////--Edit--///////////////////
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
*
0207C:  MOVLW  02
0207E:  MOVLB  C
02080:  MOVWF  x29
02082:  MOVLB  0
02084:  RCALL  1F4C
02086:  MOVFF  01,983
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
0208A:  BTFSS  1A.4
0208C:  BRA    2094
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;   
0208E:  MOVLB  9
02090:  COMF   x83,F
02092:  MOVLB  0
....................       }
....................       
....................       
....................      // FaultNow[11] = MCP23s17_Ip_dat;
....................       FaultNow[1] = MCP23s17_Ip_dat >> 1;
02094:  BCF    FD8.0
02096:  MOVLB  9
02098:  RRCF   x83,W
0209A:  MOVLB  B
0209C:  BCF    xBB.1
0209E:  BTFSC  FE8.0
020A0:  BSF    xBB.1
....................       FaultNow[2] = MCP23s17_Ip_dat >> 2;
020A2:  MOVLB  9
020A4:  RRCF   x83,W
020A6:  MOVWF  00
020A8:  RRCF   00,F
020AA:  MOVLW  3F
020AC:  ANDWF  00,F
020AE:  MOVLB  B
020B0:  BCF    xBB.2
020B2:  BTFSC  00.0
020B4:  BSF    xBB.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 3;
020B6:  MOVLB  9
020B8:  RRCF   x83,W
020BA:  MOVWF  00
020BC:  RRCF   00,F
020BE:  RRCF   00,F
020C0:  MOVLW  1F
020C2:  ANDWF  00,F
020C4:  MOVLB  B
020C6:  BCF    xBB.3
020C8:  BTFSC  00.0
020CA:  BSF    xBB.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 4;
020CC:  MOVLB  9
020CE:  SWAPF  x83,W
020D0:  MOVWF  00
020D2:  MOVLW  0F
020D4:  ANDWF  00,F
020D6:  MOVLB  B
020D8:  BCF    xBB.4
020DA:  BTFSC  00.0
020DC:  BSF    xBB.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 5;
020DE:  MOVLB  9
020E0:  SWAPF  x83,W
020E2:  MOVWF  00
020E4:  RRCF   00,F
020E6:  MOVLW  07
020E8:  ANDWF  00,F
020EA:  MOVLB  B
020EC:  BCF    xBB.5
020EE:  BTFSC  00.0
020F0:  BSF    xBB.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 6;
020F2:  MOVLB  9
020F4:  SWAPF  x83,W
020F6:  MOVWF  00
020F8:  RRCF   00,F
020FA:  RRCF   00,F
020FC:  MOVLW  03
020FE:  ANDWF  00,F
02100:  MOVLB  B
02102:  BCF    xBB.6
02104:  BTFSC  00.0
02106:  BSF    xBB.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 7;
02108:  CLRF   00
0210A:  MOVLB  9
0210C:  BTFSC  x83.7
0210E:  BSF    00.0
02110:  MOVLB  B
02112:  BCF    xBB.7
02114:  BTFSC  00.0
02116:  BSF    xBB.7
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
02118:  MOVLW  02
0211A:  MOVLB  C
0211C:  MOVWF  x29
0211E:  MOVLB  0
02120:  RCALL  1F68
02122:  MOVFF  01,983
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
02126:  BTFSS  1A.4
02128:  BRA    2130
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
0212A:  MOVLB  9
0212C:  COMF   x83,F
0212E:  MOVLB  0
....................       }
....................       
....................       FaultNow[8] = MCP23s17_Ip_dat;
02130:  MOVLB  B
02132:  BCF    xBC.0
02134:  MOVLB  9
02136:  BTFSS  x83.0
02138:  BRA    2140
0213A:  MOVLB  B
0213C:  BSF    xBC.0
0213E:  MOVLB  9
....................       
....................       
....................        MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_0);
02140:  MOVLB  C
02142:  CLRF   x29
02144:  MOVLB  0
02146:  RCALL  1F4C
02148:  MOVFF  01,983
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
0214C:  BTFSS  1A.4
0214E:  BRA    2156
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;         
02150:  MOVLB  9
02152:  COMF   x83,F
02154:  MOVLB  0
....................       }
....................       
....................       // FaultNow[11] = MCP23s17_Ip_dat;
....................       FaultNow[9] = MCP23s17_Ip_dat >> 1;
02156:  BCF    FD8.0
02158:  MOVLB  9
0215A:  RRCF   x83,W
0215C:  MOVLB  B
0215E:  BCF    xBC.1
02160:  BTFSC  FE8.0
02162:  BSF    xBC.1
....................       FaultNow[10] = MCP23s17_Ip_dat >> 2;
02164:  MOVLB  9
02166:  RRCF   x83,W
02168:  MOVWF  00
0216A:  RRCF   00,F
0216C:  MOVLW  3F
0216E:  ANDWF  00,F
02170:  MOVLB  B
02172:  BCF    xBC.2
02174:  BTFSC  00.0
02176:  BSF    xBC.2
....................       FaultNow[11] = MCP23s17_Ip_dat >> 3;
02178:  MOVLB  9
0217A:  RRCF   x83,W
0217C:  MOVWF  00
0217E:  RRCF   00,F
02180:  RRCF   00,F
02182:  MOVLW  1F
02184:  ANDWF  00,F
02186:  MOVLB  B
02188:  BCF    xBC.3
0218A:  BTFSC  00.0
0218C:  BSF    xBC.3
....................       FaultNow[12] = MCP23s17_Ip_dat >> 4;
0218E:  MOVLB  9
02190:  SWAPF  x83,W
02192:  MOVWF  00
02194:  MOVLW  0F
02196:  ANDWF  00,F
02198:  MOVLB  B
0219A:  BCF    xBC.4
0219C:  BTFSC  00.0
0219E:  BSF    xBC.4
....................       FaultNow[13] = MCP23s17_Ip_dat >> 5;
021A0:  MOVLB  9
021A2:  SWAPF  x83,W
021A4:  MOVWF  00
021A6:  RRCF   00,F
021A8:  MOVLW  07
021AA:  ANDWF  00,F
021AC:  MOVLB  B
021AE:  BCF    xBC.5
021B0:  BTFSC  00.0
021B2:  BSF    xBC.5
....................       FaultNow[14] = MCP23s17_Ip_dat >> 6;
021B4:  MOVLB  9
021B6:  SWAPF  x83,W
021B8:  MOVWF  00
021BA:  RRCF   00,F
021BC:  RRCF   00,F
021BE:  MOVLW  03
021C0:  ANDWF  00,F
021C2:  MOVLB  B
021C4:  BCF    xBC.6
021C6:  BTFSC  00.0
021C8:  BSF    xBC.6
....................       FaultNow[15] = MCP23s17_Ip_dat >> 7;
021CA:  CLRF   00
021CC:  MOVLB  9
021CE:  BTFSC  x83.7
021D0:  BSF    00.0
021D2:  MOVLB  B
021D4:  BCF    xBC.7
021D6:  BTFSC  00.0
021D8:  BSF    xBC.7
....................       
....................        MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
021DA:  MOVLB  C
021DC:  CLRF   x29
021DE:  MOVLB  0
021E0:  RCALL  1F68
021E2:  MOVFF  01,983
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
021E6:  BTFSS  1A.4
021E8:  BRA    21F0
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
021EA:  MOVLB  9
021EC:  COMF   x83,F
021EE:  MOVLB  0
....................       }
....................       
....................       
....................       FaultNow[16] = MCP23s17_Ip_dat;
021F0:  MOVLB  B
021F2:  BCF    xBD.0
021F4:  MOVLB  9
021F6:  BTFSS  x83.0
021F8:  BRA    2200
021FA:  MOVLB  B
021FC:  BSF    xBD.0
021FE:  MOVLB  9
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=16; i++)
02200:  MOVLW  01
02202:  MOVLB  C
02204:  MOVWF  x28
02206:  MOVF   x28,W
02208:  SUBLW  10
0220A:  BTFSS  FD8.0
0220C:  BRA    27F6
....................       {
....................          if(FaultNCNO[i] ==NO)
0220E:  MOVFF  C28,C2C
02212:  MOVLW  0C
02214:  MOVWF  x2E
02216:  MOVLW  12
02218:  MOVWF  x2D
0221A:  MOVLB  0
0221C:  RCALL  1F84
0221E:  MOVF   01,W
02220:  ANDLW  01
02222:  SUBLW  01
02224:  BTFSS  FD8.2
02226:  BRA    24FE
....................          {
....................              if(FaultNow[i]==0)
02228:  MOVFF  C28,C2C
0222C:  MOVLW  0B
0222E:  MOVLB  C
02230:  MOVWF  x2E
02232:  MOVLW  BB
02234:  MOVWF  x2D
02236:  MOVLB  0
02238:  RCALL  1F84
0223A:  MOVF   01,W
0223C:  ANDLW  01
0223E:  BTFSS  FD8.2
02240:  BRA    23A0
....................              {   
....................                if(FaultAgo[i]==0)
02242:  MOVFF  C28,C2C
02246:  MOVLW  0B
02248:  MOVLB  C
0224A:  MOVWF  x2E
0224C:  MOVLW  B8
0224E:  MOVWF  x2D
02250:  MOVLB  0
02252:  RCALL  1F84
02254:  MOVF   01,W
02256:  ANDLW  01
02258:  BTFSS  FD8.2
0225A:  BRA    2384
....................                {
....................                    ReleaseTime[i]++;
0225C:  BCF    FD8.0
0225E:  MOVLB  C
02260:  RLCF   x28,W
02262:  CLRF   03
02264:  ADDLW  BE
02266:  MOVWF  FE9
02268:  MOVLW  0B
0226A:  ADDWFC 03,W
0226C:  MOVWF  FEA
0226E:  MOVLW  01
02270:  ADDWF  FEE,F
02272:  BNC   2276
02274:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
02276:  BCF    FD8.0
02278:  RLCF   x28,W
0227A:  CLRF   03
0227C:  ADDLW  BE
0227E:  MOVWF  FE9
02280:  MOVLW  0B
02282:  ADDWFC 03,W
02284:  MOVWF  FEA
02286:  MOVFF  FEC,C2A
0228A:  MOVF   FED,F
0228C:  MOVFF  FEF,C29
02290:  BCF    FD8.0
02292:  RLCF   x28,W
02294:  CLRF   03
02296:  ADDLW  E8
02298:  MOVWF  FE9
0229A:  MOVLW  0B
0229C:  ADDWFC 03,W
0229E:  MOVWF  FEA
022A0:  MOVFF  FEC,C2E
022A4:  MOVF   FED,F
022A6:  MOVFF  FEF,C2D
022AA:  CLRF   x30
022AC:  MOVLW  4B
022AE:  MOVWF  x2F
022B0:  MOVLB  0
022B2:  RCALL  1FBA
022B4:  MOVFF  02,C2C
022B8:  MOVFF  01,C2B
022BC:  MOVLW  0F
022BE:  MOVLB  C
022C0:  ADDWF  01,W
022C2:  MOVWF  01
022C4:  MOVLW  00
022C6:  ADDWFC 02,W
022C8:  MOVWF  03
022CA:  MOVF   03,W
022CC:  SUBWF  x2A,W
022CE:  BNC   2380
022D0:  BNZ   22D8
022D2:  MOVF   01,W
022D4:  SUBWF  x29,W
022D6:  BNC   2380
....................                    {   
....................                      ReleaseTime[i] = 0;
022D8:  BCF    FD8.0
022DA:  RLCF   x28,W
022DC:  CLRF   03
022DE:  ADDLW  BE
022E0:  MOVWF  FE9
022E2:  MOVLW  0B
022E4:  ADDWFC 03,W
022E6:  MOVWF  FEA
022E8:  CLRF   FEC
022EA:  MOVF   FED,F
022EC:  CLRF   FEF
....................                      switch(i)
022EE:  MOVLW  01
022F0:  SUBWF  x28,W
022F2:  ADDLW  F0
022F4:  BC    2380
022F6:  ADDLW  10
022F8:  MOVLB  0
022FA:  GOTO   29CC
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
022FE:  MOVLB  B
02300:  BCF    x9A.0
....................                         break;
02302:  MOVLB  C
02304:  BRA    2380
....................                         case 2:
....................                            Inputt.B2 = 0; 
02306:  MOVLB  B
02308:  BCF    x9A.1
....................                         break;
0230A:  MOVLB  C
0230C:  BRA    2380
....................                         case 3:
....................                            Inputt.B3 = 0; 
0230E:  MOVLB  B
02310:  BCF    x9A.2
....................                         break;
02312:  MOVLB  C
02314:  BRA    2380
....................                         case 4:
....................                            Inputt.B4 = 0; 
02316:  MOVLB  B
02318:  BCF    x9A.3
....................                         break;
0231A:  MOVLB  C
0231C:  BRA    2380
....................                         case 5:
....................                            Inputt.B5 = 0; 
0231E:  MOVLB  B
02320:  BCF    x9A.4
....................                         break;
02322:  MOVLB  C
02324:  BRA    2380
....................                         case 6:
....................                            Inputt.B6 = 0; 
02326:  MOVLB  B
02328:  BCF    x9A.5
....................                         break;
0232A:  MOVLB  C
0232C:  BRA    2380
....................                         case 7:
....................                            Inputt.B7 = 0; 
0232E:  MOVLB  B
02330:  BCF    x9A.6
....................                          break;
02332:  MOVLB  C
02334:  BRA    2380
....................                          case 8:
....................                            Inputt.B8 = 0; 
02336:  MOVLB  B
02338:  BCF    x9A.7
....................                         break;
0233A:  MOVLB  C
0233C:  BRA    2380
....................                         case 9:
....................                            Inputt.B9 = 0; 
0233E:  MOVLB  B
02340:  BCF    x9B.0
....................                         break;
02342:  MOVLB  C
02344:  BRA    2380
....................                         case 10:
....................                            Inputt.B10 = 0; 
02346:  MOVLB  B
02348:  BCF    x9B.1
....................                         break;
0234A:  MOVLB  C
0234C:  BRA    2380
....................                         case 11:
....................                            Inputt.B11 = 0; 
0234E:  MOVLB  B
02350:  BCF    x9B.2
....................                         break;
02352:  MOVLB  C
02354:  BRA    2380
....................                         case 12:
....................                            Inputt.B12 = 0; 
02356:  MOVLB  B
02358:  BCF    x9B.3
....................                         break;
0235A:  MOVLB  C
0235C:  BRA    2380
....................                         case 13:
....................                            Inputt.B13 = 0; 
0235E:  MOVLB  B
02360:  BCF    x9B.4
....................                         break;
02362:  MOVLB  C
02364:  BRA    2380
....................                         case 14:
....................                            Inputt.B14 = 0; 
02366:  MOVLB  B
02368:  BCF    x9B.5
....................                         break;
0236A:  MOVLB  C
0236C:  BRA    2380
....................                         case 15:
....................                            Inputt.B15 = 0; 
0236E:  MOVLB  B
02370:  BCF    x9B.6
....................                         break;
02372:  MOVLB  C
02374:  BRA    2380
....................                         case 16:
....................                             Inputt.B16 = 0; 
02376:  MOVLB  B
02378:  BCF    x9B.7
....................                          break;
0237A:  MOVLB  C
0237C:  BRA    2380
0237E:  MOVLB  C
....................                                    
....................                      }                 
....................                    }
....................                }
02380:  BRA    239C
02382:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
02384:  BCF    FD8.0
02386:  MOVLB  C
02388:  RLCF   x28,W
0238A:  CLRF   03
0238C:  ADDLW  BE
0238E:  MOVWF  FE9
02390:  MOVLW  0B
02392:  ADDWFC 03,W
02394:  MOVWF  FEA
02396:  CLRF   FEC
02398:  MOVF   FED,F
0239A:  CLRF   FEF
....................                }
....................              }
0239C:  BRA    24FC
0239E:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
023A0:  MOVFF  C28,C2C
023A4:  MOVLW  0B
023A6:  MOVLB  C
023A8:  MOVWF  x2E
023AA:  MOVLW  B8
023AC:  MOVWF  x2D
023AE:  MOVLB  0
023B0:  RCALL  1F84
023B2:  MOVF   01,W
023B4:  ANDLW  01
023B6:  SUBLW  01
023B8:  BTFSS  FD8.2
023BA:  BRA    24E4
....................                {
....................                    ReleaseTime[i]++;
023BC:  BCF    FD8.0
023BE:  MOVLB  C
023C0:  RLCF   x28,W
023C2:  CLRF   03
023C4:  ADDLW  BE
023C6:  MOVWF  FE9
023C8:  MOVLW  0B
023CA:  ADDWFC 03,W
023CC:  MOVWF  FEA
023CE:  MOVLW  01
023D0:  ADDWF  FEE,F
023D2:  BNC   23D6
023D4:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
023D6:  BCF    FD8.0
023D8:  RLCF   x28,W
023DA:  CLRF   03
023DC:  ADDLW  BE
023DE:  MOVWF  FE9
023E0:  MOVLW  0B
023E2:  ADDWFC 03,W
023E4:  MOVWF  FEA
023E6:  MOVFF  FEC,C2A
023EA:  MOVF   FED,F
023EC:  MOVFF  FEF,C29
023F0:  BCF    FD8.0
023F2:  RLCF   x28,W
023F4:  CLRF   03
023F6:  ADDLW  E8
023F8:  MOVWF  FE9
023FA:  MOVLW  0B
023FC:  ADDWFC 03,W
023FE:  MOVWF  FEA
02400:  MOVFF  FEC,C2E
02404:  MOVF   FED,F
02406:  MOVFF  FEF,C2D
0240A:  CLRF   x30
0240C:  MOVLW  4B
0240E:  MOVWF  x2F
02410:  MOVLB  0
02412:  RCALL  1FBA
02414:  MOVFF  02,C2C
02418:  MOVFF  01,C2B
0241C:  MOVLW  0F
0241E:  MOVLB  C
02420:  ADDWF  01,W
02422:  MOVWF  01
02424:  MOVLW  00
02426:  ADDWFC 02,W
02428:  MOVWF  03
0242A:  MOVF   03,W
0242C:  SUBWF  x2A,W
0242E:  BNC   24E0
02430:  BNZ   2438
02432:  MOVF   01,W
02434:  SUBWF  x29,W
02436:  BNC   24E0
....................                    {   
....................                      ReleaseTime[i] = 1;
02438:  BCF    FD8.0
0243A:  RLCF   x28,W
0243C:  CLRF   03
0243E:  ADDLW  BE
02440:  MOVWF  FE9
02442:  MOVLW  0B
02444:  ADDWFC 03,W
02446:  MOVWF  FEA
02448:  CLRF   FEC
0244A:  MOVF   FED,F
0244C:  MOVLW  01
0244E:  MOVWF  FEF
....................                      switch(i)
02450:  SUBWF  x28,W
02452:  ADDLW  F0
02454:  BC    24E0
02456:  ADDLW  10
02458:  MOVLB  0
0245A:  GOTO   2A06
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
0245E:  MOVLB  B
02460:  BSF    x9A.0
....................                         break;
02462:  MOVLB  C
02464:  BRA    24E0
....................                         case 2:
....................                            Inputt.B2 = 1; 
02466:  MOVLB  B
02468:  BSF    x9A.1
....................                         break;
0246A:  MOVLB  C
0246C:  BRA    24E0
....................                         case 3:
....................                            Inputt.B3 = 1; 
0246E:  MOVLB  B
02470:  BSF    x9A.2
....................                         break;
02472:  MOVLB  C
02474:  BRA    24E0
....................                         case 4:
....................                            Inputt.B4 = 1; 
02476:  MOVLB  B
02478:  BSF    x9A.3
....................                         break;
0247A:  MOVLB  C
0247C:  BRA    24E0
....................                         case 5:
....................                            Inputt.B5 = 1; 
0247E:  MOVLB  B
02480:  BSF    x9A.4
....................                         break;
02482:  MOVLB  C
02484:  BRA    24E0
....................                         case 6:
....................                            Inputt.B6 = 1; 
02486:  MOVLB  B
02488:  BSF    x9A.5
....................                         break;
0248A:  MOVLB  C
0248C:  BRA    24E0
....................                         case 7:
....................                            Inputt.B7 = 1; 
0248E:  MOVLB  B
02490:  BSF    x9A.6
....................                          break;
02492:  MOVLB  C
02494:  BRA    24E0
....................                          case 8:
....................                          Inputt.B8 = 1; 
02496:  MOVLB  B
02498:  BSF    x9A.7
....................                         break;
0249A:  MOVLB  C
0249C:  BRA    24E0
....................                         case 9:
....................                            Inputt.B9 = 1; 
0249E:  MOVLB  B
024A0:  BSF    x9B.0
....................                         break;
024A2:  MOVLB  C
024A4:  BRA    24E0
....................                         case 10:
....................                            Inputt.B10 = 1; 
024A6:  MOVLB  B
024A8:  BSF    x9B.1
....................                         break;
024AA:  MOVLB  C
024AC:  BRA    24E0
....................                         case 11:
....................                            Inputt.B11 = 1; 
024AE:  MOVLB  B
024B0:  BSF    x9B.2
....................                         break;
024B2:  MOVLB  C
024B4:  BRA    24E0
....................                         case 12:
....................                            Inputt.B12 = 1; 
024B6:  MOVLB  B
024B8:  BSF    x9B.3
....................                         break;
024BA:  MOVLB  C
024BC:  BRA    24E0
....................                         case 13:
....................                            Inputt.B13 = 1; 
024BE:  MOVLB  B
024C0:  BSF    x9B.4
....................                         break;
024C2:  MOVLB  C
024C4:  BRA    24E0
....................                         case 14:
....................                            Inputt.B14 = 1; 
024C6:  MOVLB  B
024C8:  BSF    x9B.5
....................                         break;
024CA:  MOVLB  C
024CC:  BRA    24E0
....................                         case 15:
....................                            Inputt.B15 = 1; 
024CE:  MOVLB  B
024D0:  BSF    x9B.6
....................                         break;
024D2:  MOVLB  C
024D4:  BRA    24E0
....................                         case 16:
....................                             Inputt.B16 = 1;
024D6:  MOVLB  B
024D8:  BSF    x9B.7
....................                          break;
024DA:  MOVLB  C
024DC:  BRA    24E0
024DE:  MOVLB  C
....................                                    
....................                      }                 
....................                    }
....................                }
024E0:  BRA    24FC
024E2:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
024E4:  BCF    FD8.0
024E6:  MOVLB  C
024E8:  RLCF   x28,W
024EA:  CLRF   03
024EC:  ADDLW  BE
024EE:  MOVWF  FE9
024F0:  MOVLW  0B
024F2:  ADDWFC 03,W
024F4:  MOVWF  FEA
024F6:  CLRF   FEC
024F8:  MOVF   FED,F
024FA:  CLRF   FEF
....................                }
....................              
....................              /*
....................                   ReleaseTime[i] = 0;
....................                   switch(i)
....................                   {
....................                       case 1:
....................                          Inputt.B1 = 1; 
....................                       break;
....................                       case 2:
....................                          Inputt.B2 = 1; 
....................                       break;
....................                       case 3:
....................                          Inputt.B3 = 1; 
....................                       break;
....................                       case 4:
....................                          Inputt.B4 = 1; 
....................                       break;
....................                       case 5:
....................                          Inputt.B5 = 1; 
....................                       break;
....................                       case 6:
....................                          Inputt.B6 = 1; 
....................                       break;
....................                       case 7:
....................                          Inputt.B7 = 1; 
....................                       break;
....................                       case 8:
....................                          Inputt.B8 = 1; 
....................                       break;
....................                       case 9:
....................                          Inputt.B9 = 1; 
....................                       break;
....................                       case 10:
....................                          Inputt.B10 = 1; 
....................                       break;
....................                       case 11:
....................                          Inputt.B11 = 1; 
....................                       break;
....................                       case 12:
....................                          Inputt.B12 = 1; 
....................                       break;
....................                       case 13:
....................                          Inputt.B13 = 1; 
....................                       break;
....................                       case 14:
....................                          Inputt.B14 = 1; 
....................                       break;
....................                       case 15:
....................                          Inputt.B15 = 1; 
....................                       break;
....................                       case 16:
....................                          Inputt.B16 = 1; 
....................                       break;
....................                          
....................                   }
....................                   */
....................              }
....................           }
024FC:  BRA    27EE
....................           else if(FaultNCNO[i] ==NC)
024FE:  MOVFF  C28,C2C
02502:  MOVLW  0C
02504:  MOVLB  C
02506:  MOVWF  x2E
02508:  MOVLW  12
0250A:  MOVWF  x2D
0250C:  MOVLB  0
0250E:  RCALL  1F84
02510:  MOVF   01,W
02512:  ANDLW  01
02514:  BTFSS  FD8.2
02516:  BRA    27F0
....................           {
....................              if(FaultNow[i]==1)
02518:  MOVFF  C28,C2C
0251C:  MOVLW  0B
0251E:  MOVLB  C
02520:  MOVWF  x2E
02522:  MOVLW  BB
02524:  MOVWF  x2D
02526:  MOVLB  0
02528:  RCALL  1F84
0252A:  MOVF   01,W
0252C:  ANDLW  01
0252E:  SUBLW  01
02530:  BTFSS  FD8.2
02532:  BRA    2694
....................              {
....................                if(FaultAgo[i]==1)
02534:  MOVFF  C28,C2C
02538:  MOVLW  0B
0253A:  MOVLB  C
0253C:  MOVWF  x2E
0253E:  MOVLW  B8
02540:  MOVWF  x2D
02542:  MOVLB  0
02544:  RCALL  1F84
02546:  MOVF   01,W
02548:  ANDLW  01
0254A:  SUBLW  01
0254C:  BTFSS  FD8.2
0254E:  BRA    2678
....................                {
....................                    ReleaseTime[i]++;
02550:  BCF    FD8.0
02552:  MOVLB  C
02554:  RLCF   x28,W
02556:  CLRF   03
02558:  ADDLW  BE
0255A:  MOVWF  FE9
0255C:  MOVLW  0B
0255E:  ADDWFC 03,W
02560:  MOVWF  FEA
02562:  MOVLW  01
02564:  ADDWF  FEE,F
02566:  BNC   256A
02568:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
0256A:  BCF    FD8.0
0256C:  RLCF   x28,W
0256E:  CLRF   03
02570:  ADDLW  BE
02572:  MOVWF  FE9
02574:  MOVLW  0B
02576:  ADDWFC 03,W
02578:  MOVWF  FEA
0257A:  MOVFF  FEC,C2A
0257E:  MOVF   FED,F
02580:  MOVFF  FEF,C29
02584:  BCF    FD8.0
02586:  RLCF   x28,W
02588:  CLRF   03
0258A:  ADDLW  E8
0258C:  MOVWF  FE9
0258E:  MOVLW  0B
02590:  ADDWFC 03,W
02592:  MOVWF  FEA
02594:  MOVFF  FEC,C2E
02598:  MOVF   FED,F
0259A:  MOVFF  FEF,C2D
0259E:  CLRF   x30
025A0:  MOVLW  4B
025A2:  MOVWF  x2F
025A4:  MOVLB  0
025A6:  RCALL  1FBA
025A8:  MOVFF  02,C2C
025AC:  MOVFF  01,C2B
025B0:  MOVLW  0F
025B2:  MOVLB  C
025B4:  ADDWF  01,W
025B6:  MOVWF  01
025B8:  MOVLW  00
025BA:  ADDWFC 02,W
025BC:  MOVWF  03
025BE:  MOVF   03,W
025C0:  SUBWF  x2A,W
025C2:  BNC   2674
025C4:  BNZ   25CC
025C6:  MOVF   01,W
025C8:  SUBWF  x29,W
025CA:  BNC   2674
....................                    {   
....................                      ReleaseTime[i] = 0;
025CC:  BCF    FD8.0
025CE:  RLCF   x28,W
025D0:  CLRF   03
025D2:  ADDLW  BE
025D4:  MOVWF  FE9
025D6:  MOVLW  0B
025D8:  ADDWFC 03,W
025DA:  MOVWF  FEA
025DC:  CLRF   FEC
025DE:  MOVF   FED,F
025E0:  CLRF   FEF
....................                      switch(i)
025E2:  MOVLW  01
025E4:  SUBWF  x28,W
025E6:  ADDLW  F0
025E8:  BC    2674
025EA:  ADDLW  10
025EC:  MOVLB  0
025EE:  GOTO   2A40
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
025F2:  MOVLB  B
025F4:  BSF    x9A.0
....................                         break;
025F6:  MOVLB  C
025F8:  BRA    2674
....................                         case 2:
....................                            Inputt.B2 = 1; 
025FA:  MOVLB  B
025FC:  BSF    x9A.1
....................                         break;
025FE:  MOVLB  C
02600:  BRA    2674
....................                         case 3:
....................                            Inputt.B3 = 1; 
02602:  MOVLB  B
02604:  BSF    x9A.2
....................                         break;
02606:  MOVLB  C
02608:  BRA    2674
....................                         case 4:
....................                            Inputt.B4 = 1; 
0260A:  MOVLB  B
0260C:  BSF    x9A.3
....................                         break;
0260E:  MOVLB  C
02610:  BRA    2674
....................                         case 5:
....................                            Inputt.B5 = 1; 
02612:  MOVLB  B
02614:  BSF    x9A.4
....................                         break;
02616:  MOVLB  C
02618:  BRA    2674
....................                         case 6:
....................                            Inputt.B6 = 1; 
0261A:  MOVLB  B
0261C:  BSF    x9A.5
....................                         break;
0261E:  MOVLB  C
02620:  BRA    2674
....................                         case 7:
....................                            Inputt.B7 = 1; 
02622:  MOVLB  B
02624:  BSF    x9A.6
....................                          break;
02626:  MOVLB  C
02628:  BRA    2674
....................                          case 8:
....................                            Inputt.B8 = 1; 
0262A:  MOVLB  B
0262C:  BSF    x9A.7
....................                         break;
0262E:  MOVLB  C
02630:  BRA    2674
....................                         case 9:
....................                            Inputt.B9 = 1; 
02632:  MOVLB  B
02634:  BSF    x9B.0
....................                         break;
02636:  MOVLB  C
02638:  BRA    2674
....................                         case 10:
....................                            Inputt.B10 = 1; 
0263A:  MOVLB  B
0263C:  BSF    x9B.1
....................                         break;
0263E:  MOVLB  C
02640:  BRA    2674
....................                         case 11:
....................                            Inputt.B11 = 1; 
02642:  MOVLB  B
02644:  BSF    x9B.2
....................                         break;
02646:  MOVLB  C
02648:  BRA    2674
....................                         case 12:
....................                            Inputt.B12 = 1; 
0264A:  MOVLB  B
0264C:  BSF    x9B.3
....................                         break;
0264E:  MOVLB  C
02650:  BRA    2674
....................                         case 13:
....................                            Inputt.B13 = 1; 
02652:  MOVLB  B
02654:  BSF    x9B.4
....................                         break;
02656:  MOVLB  C
02658:  BRA    2674
....................                         case 14:
....................                            Inputt.B14 = 1; 
0265A:  MOVLB  B
0265C:  BSF    x9B.5
....................                         break;
0265E:  MOVLB  C
02660:  BRA    2674
....................                         case 15:
....................                            Inputt.B15 = 1; 
02662:  MOVLB  B
02664:  BSF    x9B.6
....................                         break;
02666:  MOVLB  C
02668:  BRA    2674
....................                         case 16:
....................                             Inputt.B16 = 1; 
0266A:  MOVLB  B
0266C:  BSF    x9B.7
....................                          break;
0266E:  MOVLB  C
02670:  BRA    2674
02672:  MOVLB  C
....................                                                                    
....................                      }                 
....................                   }
....................                }
02674:  BRA    2690
02676:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
02678:  BCF    FD8.0
0267A:  MOVLB  C
0267C:  RLCF   x28,W
0267E:  CLRF   03
02680:  ADDLW  BE
02682:  MOVWF  FE9
02684:  MOVLW  0B
02686:  ADDWFC 03,W
02688:  MOVWF  FEA
0268A:  CLRF   FEC
0268C:  MOVF   FED,F
0268E:  CLRF   FEF
....................                }
....................              }
02690:  BRA    27EE
02692:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
02694:  MOVFF  C28,C2C
02698:  MOVLW  0B
0269A:  MOVLB  C
0269C:  MOVWF  x2E
0269E:  MOVLW  B8
026A0:  MOVWF  x2D
026A2:  MOVLB  0
026A4:  RCALL  1F84
026A6:  MOVF   01,W
026A8:  ANDLW  01
026AA:  BTFSS  FD8.2
026AC:  BRA    27D6
....................                {
....................                    ReleaseTime[i]++;
026AE:  BCF    FD8.0
026B0:  MOVLB  C
026B2:  RLCF   x28,W
026B4:  CLRF   03
026B6:  ADDLW  BE
026B8:  MOVWF  FE9
026BA:  MOVLW  0B
026BC:  ADDWFC 03,W
026BE:  MOVWF  FEA
026C0:  MOVLW  01
026C2:  ADDWF  FEE,F
026C4:  BNC   26C8
026C6:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
026C8:  BCF    FD8.0
026CA:  RLCF   x28,W
026CC:  CLRF   03
026CE:  ADDLW  BE
026D0:  MOVWF  FE9
026D2:  MOVLW  0B
026D4:  ADDWFC 03,W
026D6:  MOVWF  FEA
026D8:  MOVFF  FEC,C2A
026DC:  MOVF   FED,F
026DE:  MOVFF  FEF,C29
026E2:  BCF    FD8.0
026E4:  RLCF   x28,W
026E6:  CLRF   03
026E8:  ADDLW  E8
026EA:  MOVWF  FE9
026EC:  MOVLW  0B
026EE:  ADDWFC 03,W
026F0:  MOVWF  FEA
026F2:  MOVFF  FEC,C2E
026F6:  MOVF   FED,F
026F8:  MOVFF  FEF,C2D
026FC:  CLRF   x30
026FE:  MOVLW  4B
02700:  MOVWF  x2F
02702:  MOVLB  0
02704:  RCALL  1FBA
02706:  MOVFF  02,C2C
0270A:  MOVFF  01,C2B
0270E:  MOVLW  0F
02710:  MOVLB  C
02712:  ADDWF  01,W
02714:  MOVWF  01
02716:  MOVLW  00
02718:  ADDWFC 02,W
0271A:  MOVWF  03
0271C:  MOVF   03,W
0271E:  SUBWF  x2A,W
02720:  BNC   27D2
02722:  BNZ   272A
02724:  MOVF   01,W
02726:  SUBWF  x29,W
02728:  BNC   27D2
....................                    {   
....................                      ReleaseTime[i] = 0;
0272A:  BCF    FD8.0
0272C:  RLCF   x28,W
0272E:  CLRF   03
02730:  ADDLW  BE
02732:  MOVWF  FE9
02734:  MOVLW  0B
02736:  ADDWFC 03,W
02738:  MOVWF  FEA
0273A:  CLRF   FEC
0273C:  MOVF   FED,F
0273E:  CLRF   FEF
....................                      switch(i)
02740:  MOVLW  01
02742:  SUBWF  x28,W
02744:  ADDLW  F0
02746:  BC    27D2
02748:  ADDLW  10
0274A:  MOVLB  0
0274C:  GOTO   2A7A
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
02750:  MOVLB  B
02752:  BCF    x9A.0
....................                         break;
02754:  MOVLB  C
02756:  BRA    27D2
....................                         case 2:
....................                            Inputt.B2 = 0; 
02758:  MOVLB  B
0275A:  BCF    x9A.1
....................                         break;
0275C:  MOVLB  C
0275E:  BRA    27D2
....................                         case 3:
....................                            Inputt.B3 = 0; 
02760:  MOVLB  B
02762:  BCF    x9A.2
....................                         break;
02764:  MOVLB  C
02766:  BRA    27D2
....................                         case 4:
....................                            Inputt.B4 = 0; 
02768:  MOVLB  B
0276A:  BCF    x9A.3
....................                         break;
0276C:  MOVLB  C
0276E:  BRA    27D2
....................                         case 5:
....................                            Inputt.B5 = 0; 
02770:  MOVLB  B
02772:  BCF    x9A.4
....................                         break;
02774:  MOVLB  C
02776:  BRA    27D2
....................                         case 6:
....................                            Inputt.B6 = 0; 
02778:  MOVLB  B
0277A:  BCF    x9A.5
....................                         break;
0277C:  MOVLB  C
0277E:  BRA    27D2
....................                         case 7:
....................                            Inputt.B7 = 0; 
02780:  MOVLB  B
02782:  BCF    x9A.6
....................                          break;
02784:  MOVLB  C
02786:  BRA    27D2
....................                          case 8:
....................                            Inputt.B8 = 0; 
02788:  MOVLB  B
0278A:  BCF    x9A.7
....................                         break;
0278C:  MOVLB  C
0278E:  BRA    27D2
....................                         case 9:
....................                            Inputt.B9 = 0; 
02790:  MOVLB  B
02792:  BCF    x9B.0
....................                         break;
02794:  MOVLB  C
02796:  BRA    27D2
....................                         case 10:
....................                            Inputt.B10 = 0; 
02798:  MOVLB  B
0279A:  BCF    x9B.1
....................                         break;
0279C:  MOVLB  C
0279E:  BRA    27D2
....................                         case 11:
....................                            Inputt.B11 = 0; 
027A0:  MOVLB  B
027A2:  BCF    x9B.2
....................                         break;
027A4:  MOVLB  C
027A6:  BRA    27D2
....................                         case 12:
....................                            Inputt.B12 = 0; 
027A8:  MOVLB  B
027AA:  BCF    x9B.3
....................                         break;
027AC:  MOVLB  C
027AE:  BRA    27D2
....................                         case 13:
....................                            Inputt.B13 = 0; 
027B0:  MOVLB  B
027B2:  BCF    x9B.4
....................                         break;
027B4:  MOVLB  C
027B6:  BRA    27D2
....................                         case 14:
....................                            Inputt.B14 = 0; 
027B8:  MOVLB  B
027BA:  BCF    x9B.5
....................                         break;
027BC:  MOVLB  C
027BE:  BRA    27D2
....................                         case 15:
....................                            Inputt.B15 = 0; 
027C0:  MOVLB  B
027C2:  BCF    x9B.6
....................                         break;
027C4:  MOVLB  C
027C6:  BRA    27D2
....................                         case 16:
....................                             Inputt.B16 = 0;
027C8:  MOVLB  B
027CA:  BCF    x9B.7
....................                          break;
027CC:  MOVLB  C
027CE:  BRA    27D2
027D0:  MOVLB  C
....................                                    
....................                      }                 
....................                    }
....................                }
027D2:  BRA    27EE
027D4:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
027D6:  BCF    FD8.0
027D8:  MOVLB  C
027DA:  RLCF   x28,W
027DC:  CLRF   03
027DE:  ADDLW  BE
027E0:  MOVWF  FE9
027E2:  MOVLW  0B
027E4:  ADDWFC 03,W
027E6:  MOVWF  FEA
027E8:  CLRF   FEC
027EA:  MOVF   FED,F
027EC:  CLRF   FEF
027EE:  MOVLB  0
....................                }
....................                   /*
....................                   ReleaseTime[i] = 0;
....................                   switch(i)
....................                   {
....................                       case 1:
....................                          Inputt.B1 = 0; 
....................                       break;
....................                       case 2:
....................                          Inputt.B2 = 0; 
....................                       break;
....................                       case 3:
....................                          Inputt.B3 = 0; 
....................                       break;
....................                       case 4:
....................                          Inputt.B4 = 0; 
....................                       break;
....................                       case 5:
....................                          Inputt.B5 = 0; 
....................                       break;
....................                       case 6:
....................                          Inputt.B6 = 0; 
....................                       break;
....................                       case 7:
....................                          Inputt.B7 = 0; 
....................                       break;
....................                       case 8:
....................                          Inputt.B8 = 0; 
....................                       break;
....................                       case 9:
....................                          Inputt.B9 = 0; 
....................                       break;
....................                       case 10:
....................                          Inputt.B10 = 0; 
....................                       break;
....................                       case 11:
....................                          Inputt.B11 = 0; 
....................                       break;
....................                       case 12:
....................                          Inputt.B12 = 0; 
....................                       break;
....................                       case 13:
....................                          Inputt.B13 = 0; 
....................                       break;
....................                       case 14:
....................                          Inputt.B14 = 0; 
....................                       break;
....................                       case 15:
....................                          Inputt.B15 = 0; 
....................                       break;
....................                       case 16:
....................                          Inputt.B16 = 0; 
....................                       break;
....................                              
....................                   }
....................                   */
....................              }
....................           }
027F0:  MOVLB  C
027F2:  INCF   x28,F
027F4:  BRA    2206
....................       }
....................       
....................       StoreReleaseFault();
027F6:  MOVLB  0
027F8:  BRA    201E
....................       
....................       Input11_18 = 0x00;
027FA:  CLRF   4C
....................       Input11_18 = Input11_18 | ~Inputt.B16;
027FC:  MOVLW  00
027FE:  MOVLB  B
02800:  BTFSS  x9B.7
02802:  MOVLW  01
02804:  IORWF  4C,F
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B16;
02806:  BCF    FD8.0
02808:  RLCF   4C,W
0280A:  MOVLB  C
0280C:  MOVWF  x29
0280E:  MOVLW  00
02810:  MOVLB  B
02812:  BTFSS  x9B.7
02814:  MOVLW  01
02816:  MOVLB  C
02818:  IORWF  x29,W
0281A:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B16;
0281C:  BCF    FD8.0
0281E:  RLCF   4C,W
02820:  MOVWF  x29
02822:  MOVLW  00
02824:  MOVLB  B
02826:  BTFSS  x9B.7
02828:  MOVLW  01
0282A:  MOVLB  C
0282C:  IORWF  x29,W
0282E:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B15;
02830:  BCF    FD8.0
02832:  RLCF   4C,W
02834:  MOVWF  x29
02836:  MOVLW  00
02838:  MOVLB  B
0283A:  BTFSS  x9B.6
0283C:  MOVLW  01
0283E:  MOVLB  C
02840:  IORWF  x29,W
02842:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B14;
02844:  BCF    FD8.0
02846:  RLCF   4C,W
02848:  MOVWF  x29
0284A:  MOVLW  00
0284C:  MOVLB  B
0284E:  BTFSS  x9B.5
02850:  MOVLW  01
02852:  MOVLB  C
02854:  IORWF  x29,W
02856:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B13;
02858:  BCF    FD8.0
0285A:  RLCF   4C,W
0285C:  MOVWF  x29
0285E:  MOVLW  00
02860:  MOVLB  B
02862:  BTFSS  x9B.4
02864:  MOVLW  01
02866:  MOVLB  C
02868:  IORWF  x29,W
0286A:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B12;
0286C:  BCF    FD8.0
0286E:  RLCF   4C,W
02870:  MOVWF  x29
02872:  MOVLW  00
02874:  MOVLB  B
02876:  BTFSS  x9B.3
02878:  MOVLW  01
0287A:  MOVLB  C
0287C:  IORWF  x29,W
0287E:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B11;
02880:  BCF    FD8.0
02882:  RLCF   4C,W
02884:  MOVWF  x29
02886:  MOVLW  00
02888:  MOVLB  B
0288A:  BTFSS  x9B.2
0288C:  MOVLW  01
0288E:  MOVLB  C
02890:  IORWF  x29,W
02892:  MOVWF  4C
....................       
....................    
....................       Input1_8 = 0x00;
02894:  CLRF   49
....................       Input1_8 = Input1_8 | ~Inputt.B8;
02896:  MOVLW  00
02898:  MOVLB  B
0289A:  BTFSS  x9A.7
0289C:  MOVLW  01
0289E:  IORWF  49,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
028A0:  BCF    FD8.0
028A2:  RLCF   49,W
028A4:  MOVLB  C
028A6:  MOVWF  x29
028A8:  MOVLW  00
028AA:  MOVLB  B
028AC:  BTFSS  x9A.6
028AE:  MOVLW  01
028B0:  MOVLB  C
028B2:  IORWF  x29,W
028B4:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
028B6:  BCF    FD8.0
028B8:  RLCF   49,W
028BA:  MOVWF  x29
028BC:  MOVLW  00
028BE:  MOVLB  B
028C0:  BTFSS  x9A.5
028C2:  MOVLW  01
028C4:  MOVLB  C
028C6:  IORWF  x29,W
028C8:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
028CA:  BCF    FD8.0
028CC:  RLCF   49,W
028CE:  MOVWF  x29
028D0:  MOVLW  00
028D2:  MOVLB  B
028D4:  BTFSS  x9A.4
028D6:  MOVLW  01
028D8:  MOVLB  C
028DA:  IORWF  x29,W
028DC:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
028DE:  BCF    FD8.0
028E0:  RLCF   49,W
028E2:  MOVWF  x29
028E4:  MOVLW  00
028E6:  MOVLB  B
028E8:  BTFSS  x9A.3
028EA:  MOVLW  01
028EC:  MOVLB  C
028EE:  IORWF  x29,W
028F0:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
028F2:  BCF    FD8.0
028F4:  RLCF   49,W
028F6:  MOVWF  x29
028F8:  MOVLW  00
028FA:  MOVLB  B
028FC:  BTFSS  x9A.2
028FE:  MOVLW  01
02900:  MOVLB  C
02902:  IORWF  x29,W
02904:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
02906:  BCF    FD8.0
02908:  RLCF   49,W
0290A:  MOVWF  x29
0290C:  MOVLW  00
0290E:  MOVLB  B
02910:  BTFSS  x9A.1
02912:  MOVLW  01
02914:  MOVLB  C
02916:  IORWF  x29,W
02918:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
0291A:  BCF    FD8.0
0291C:  RLCF   49,W
0291E:  MOVWF  x29
02920:  MOVLW  00
02922:  MOVLB  B
02924:  BTFSS  x9A.0
02926:  MOVLW  01
02928:  MOVLB  C
0292A:  IORWF  x29,W
0292C:  MOVWF  49
....................     
....................       //Input9_10 = 0x00;
....................       //Input9_10 = Input9_10 | ~Inputt.B10;
....................       //Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
....................       
....................       Input9_16 = 0x00;
0292E:  CLRF   4A
....................       Input9_16 = Input9_16 | ~Inputt.B16;
02930:  MOVLW  00
02932:  MOVLB  B
02934:  BTFSS  x9B.7
02936:  MOVLW  01
02938:  IORWF  4A,F
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B15;
0293A:  BCF    FD8.0
0293C:  RLCF   4A,W
0293E:  MOVLB  C
02940:  MOVWF  x29
02942:  MOVLW  00
02944:  MOVLB  B
02946:  BTFSS  x9B.6
02948:  MOVLW  01
0294A:  MOVLB  C
0294C:  IORWF  x29,W
0294E:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B14;
02950:  BCF    FD8.0
02952:  RLCF   4A,W
02954:  MOVWF  x29
02956:  MOVLW  00
02958:  MOVLB  B
0295A:  BTFSS  x9B.5
0295C:  MOVLW  01
0295E:  MOVLB  C
02960:  IORWF  x29,W
02962:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B13;
02964:  BCF    FD8.0
02966:  RLCF   4A,W
02968:  MOVWF  x29
0296A:  MOVLW  00
0296C:  MOVLB  B
0296E:  BTFSS  x9B.4
02970:  MOVLW  01
02972:  MOVLB  C
02974:  IORWF  x29,W
02976:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B12;
02978:  BCF    FD8.0
0297A:  RLCF   4A,W
0297C:  MOVWF  x29
0297E:  MOVLW  00
02980:  MOVLB  B
02982:  BTFSS  x9B.3
02984:  MOVLW  01
02986:  MOVLB  C
02988:  IORWF  x29,W
0298A:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B11;
0298C:  BCF    FD8.0
0298E:  RLCF   4A,W
02990:  MOVWF  x29
02992:  MOVLW  00
02994:  MOVLB  B
02996:  BTFSS  x9B.2
02998:  MOVLW  01
0299A:  MOVLB  C
0299C:  IORWF  x29,W
0299E:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B10;
029A0:  BCF    FD8.0
029A2:  RLCF   4A,W
029A4:  MOVWF  x29
029A6:  MOVLW  00
029A8:  MOVLB  B
029AA:  BTFSS  x9B.1
029AC:  MOVLW  01
029AE:  MOVLB  C
029B0:  IORWF  x29,W
029B2:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B9;
029B4:  BCF    FD8.0
029B6:  RLCF   4A,W
029B8:  MOVWF  x29
029BA:  MOVLW  00
029BC:  MOVLB  B
029BE:  BTFSS  x9B.0
029C0:  MOVLW  01
029C2:  MOVLB  C
029C4:  IORWF  x29,W
029C6:  MOVWF  4A
029C8:  MOVLB  0
029CA:  RETURN 0
....................       
....................       ///////////////---Anal Fault---//////////////////
....................       
....................       ///////////////////////--Edit--///////////////////
....................       
....................       /*
....................       Inputt.B11 = MCP23s17_Ip_dat;
....................       Inputt.B12 = MCP23s17_Ip_dat >> 1;
....................       Inputt.B13 = MCP23s17_Ip_dat >> 2;
....................       Inputt.B14 = MCP23s17_Ip_dat >> 3;
....................       Inputt.B15 = MCP23s17_Ip_dat >> 4;
....................       Inputt.B16 = MCP23s17_Ip_dat >> 5;
....................       Inputt.B17 = MCP23s17_Ip_dat >> 6;
....................       Inputt.B18 = MCP23s17_Ip_dat >> 7;
.................... 
....................       Input11_18 = 0x00;
....................       Input11_18 = Input1_8 | ~Inputt.B18;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B17;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B16;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B15;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B14;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B13;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B12;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B11;
....................       
....................       */
....................     /*
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................       }
....................       
....................       Inputt.B19 = MCP23s17_Ip_dat;
....................       Inputt.B20 = MCP23s17_Ip_dat >> 1;
....................       
.................... 
....................       Input19_20 = 0x00;
....................       Input19_20 = Input9_10 | ~Inputt.B20;
....................       Input19_20 = (Input9_10 << 1) | ~Inputt.B19;
....................    //}
....................    
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................          
....................       }
....................       
....................       Inputt.B1 = MCP23s17_Ip_dat;
....................       Inputt.B2 = MCP23s17_Ip_dat >> 1;
....................       Inputt.B3 = MCP23s17_Ip_dat >> 2;
....................       Inputt.B4 = MCP23s17_Ip_dat >> 3;
....................       Inputt.B5 = MCP23s17_Ip_dat >> 4;
....................       Inputt.B6 = MCP23s17_Ip_dat >> 5;
....................       Inputt.B7 = MCP23s17_Ip_dat >> 6;
....................       Inputt.B8 = MCP23s17_Ip_dat >> 7;
.................... 
....................       Input1_8 = 0x00;
....................       Input1_8 = Input1_8 | ~Inputt.B8;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
....................     
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................       }
....................       
....................       Inputt.B9 = MCP23s17_Ip_dat;
....................       Inputt.B10 = MCP23s17_Ip_dat >> 1;
....................       
.................... 
....................       Input9_10 = 0x00;
....................       Input9_10 = Input9_10 | ~Inputt.B10;
....................       Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
....................       */
....................       //+++++++++++++++++++++++++++++++++++++++++++
....................    //}
....................    
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Input type 1-8
*
00A70:  MOVFF  FF2,C25
00A74:  BCF    FF2.7
00A76:  CLRF   FAA
00A78:  MOVLW  01
00A7A:  MOVWF  FA9
00A7C:  BCF    FA6.6
00A7E:  BCF    FA6.7
00A80:  BSF    FA6.0
00A82:  MOVF   FA8,W
00A84:  MOVLB  C
00A86:  BTFSC  x25.7
00A88:  BSF    FF2.7
00A8A:  MOVWF  39
....................    InputType1_8 = EEpDat;
00A8C:  MOVFF  39,3A
.................... 
....................    InputType.B1 = EEpDat;
00A90:  MOVLB  B
00A92:  BCF    x9E.0
00A94:  BTFSC  39.0
00A96:  BSF    x9E.0
....................    InputType.B2 = EEpDat >> 1;
00A98:  BCF    FD8.0
00A9A:  RRCF   39,W
00A9C:  BCF    x9E.1
00A9E:  BTFSC  FE8.0
00AA0:  BSF    x9E.1
....................    InputType.B3 = EEpDat >> 2;
00AA2:  RRCF   39,W
00AA4:  MOVWF  00
00AA6:  RRCF   00,F
00AA8:  MOVLW  3F
00AAA:  ANDWF  00,F
00AAC:  BCF    x9E.2
00AAE:  BTFSC  00.0
00AB0:  BSF    x9E.2
....................    InputType.B4 = EEpDat >> 3;
00AB2:  RRCF   39,W
00AB4:  MOVWF  00
00AB6:  RRCF   00,F
00AB8:  RRCF   00,F
00ABA:  MOVLW  1F
00ABC:  ANDWF  00,F
00ABE:  BCF    x9E.3
00AC0:  BTFSC  00.0
00AC2:  BSF    x9E.3
....................    InputType.B5 = EEpDat >> 4;
00AC4:  SWAPF  39,W
00AC6:  MOVWF  00
00AC8:  MOVLW  0F
00ACA:  ANDWF  00,F
00ACC:  BCF    x9E.4
00ACE:  BTFSC  00.0
00AD0:  BSF    x9E.4
....................    InputType.B6 = EEpDat >> 5;
00AD2:  SWAPF  39,W
00AD4:  MOVWF  00
00AD6:  RRCF   00,F
00AD8:  MOVLW  07
00ADA:  ANDWF  00,F
00ADC:  BCF    x9E.5
00ADE:  BTFSC  00.0
00AE0:  BSF    x9E.5
....................    InputType.B7 = EEpDat >> 6;
00AE2:  SWAPF  39,W
00AE4:  MOVWF  00
00AE6:  RRCF   00,F
00AE8:  RRCF   00,F
00AEA:  MOVLW  03
00AEC:  ANDWF  00,F
00AEE:  BCF    x9E.6
00AF0:  BTFSC  00.0
00AF2:  BSF    x9E.6
....................    InputType.B8 = EEpDat >> 7;
00AF4:  CLRF   00
00AF6:  BTFSC  39.7
00AF8:  BSF    00.0
00AFA:  BCF    x9E.7
00AFC:  BTFSC  00.0
00AFE:  BSF    x9E.7
.................... 
....................    EEpDat = read_eeprom(0x02);   // Input type 9-16
00B00:  MOVFF  FF2,C25
00B04:  BCF    FF2.7
00B06:  CLRF   FAA
00B08:  MOVLW  02
00B0A:  MOVWF  FA9
00B0C:  BCF    FA6.6
00B0E:  BCF    FA6.7
00B10:  BSF    FA6.0
00B12:  MOVF   FA8,W
00B14:  MOVLB  C
00B16:  BTFSC  x25.7
00B18:  BSF    FF2.7
00B1A:  MOVWF  39
....................    InputType9_16 = EEpDat;
00B1C:  MOVFF  39,3B
.................... 
....................    InputType.B9 = EEpDat;
00B20:  MOVLB  B
00B22:  BCF    x9F.0
00B24:  BTFSC  39.0
00B26:  BSF    x9F.0
....................    InputType.B10 = EEpDat >> 1;
00B28:  BCF    FD8.0
00B2A:  RRCF   39,W
00B2C:  BCF    x9F.1
00B2E:  BTFSC  FE8.0
00B30:  BSF    x9F.1
....................    InputType.B11 = EEpDat >> 2;
00B32:  RRCF   39,W
00B34:  MOVWF  00
00B36:  RRCF   00,F
00B38:  MOVLW  3F
00B3A:  ANDWF  00,F
00B3C:  BCF    x9F.2
00B3E:  BTFSC  00.0
00B40:  BSF    x9F.2
....................    InputType.B12 = EEpDat >> 3;
00B42:  RRCF   39,W
00B44:  MOVWF  00
00B46:  RRCF   00,F
00B48:  RRCF   00,F
00B4A:  MOVLW  1F
00B4C:  ANDWF  00,F
00B4E:  BCF    x9F.3
00B50:  BTFSC  00.0
00B52:  BSF    x9F.3
....................    InputType.B13 = EEpDat >> 4;
00B54:  SWAPF  39,W
00B56:  MOVWF  00
00B58:  MOVLW  0F
00B5A:  ANDWF  00,F
00B5C:  BCF    x9F.4
00B5E:  BTFSC  00.0
00B60:  BSF    x9F.4
....................    InputType.B14 = EEpDat >> 5;
00B62:  SWAPF  39,W
00B64:  MOVWF  00
00B66:  RRCF   00,F
00B68:  MOVLW  07
00B6A:  ANDWF  00,F
00B6C:  BCF    x9F.5
00B6E:  BTFSC  00.0
00B70:  BSF    x9F.5
....................    InputType.B15 = EEpDat >> 6;
00B72:  SWAPF  39,W
00B74:  MOVWF  00
00B76:  RRCF   00,F
00B78:  RRCF   00,F
00B7A:  MOVLW  03
00B7C:  ANDWF  00,F
00B7E:  BCF    x9F.6
00B80:  BTFSC  00.0
00B82:  BSF    x9F.6
....................    InputType.B16 = EEpDat >> 7;
00B84:  CLRF   00
00B86:  BTFSC  39.7
00B88:  BSF    00.0
00B8A:  BCF    x9F.7
00B8C:  BTFSC  00.0
00B8E:  BSF    x9F.7
....................    
....................    FaultNCNO[1] = InputType.B1;
00B90:  MOVLB  C
00B92:  BCF    x12.1
00B94:  MOVLB  B
00B96:  BTFSS  x9E.0
00B98:  BRA    0BA0
00B9A:  MOVLB  C
00B9C:  BSF    x12.1
00B9E:  MOVLB  B
....................    FaultNCNO[2] = InputType.B2;
00BA0:  MOVLB  C
00BA2:  BCF    x12.2
00BA4:  MOVLB  B
00BA6:  BTFSS  x9E.1
00BA8:  BRA    0BB0
00BAA:  MOVLB  C
00BAC:  BSF    x12.2
00BAE:  MOVLB  B
....................    FaultNCNO[3] = InputType.B3;
00BB0:  MOVLB  C
00BB2:  BCF    x12.3
00BB4:  MOVLB  B
00BB6:  BTFSS  x9E.2
00BB8:  BRA    0BC0
00BBA:  MOVLB  C
00BBC:  BSF    x12.3
00BBE:  MOVLB  B
....................    FaultNCNO[4] = InputType.B4;
00BC0:  MOVLB  C
00BC2:  BCF    x12.4
00BC4:  MOVLB  B
00BC6:  BTFSS  x9E.3
00BC8:  BRA    0BD0
00BCA:  MOVLB  C
00BCC:  BSF    x12.4
00BCE:  MOVLB  B
....................    FaultNCNO[5] = InputType.B5;
00BD0:  MOVLB  C
00BD2:  BCF    x12.5
00BD4:  MOVLB  B
00BD6:  BTFSS  x9E.4
00BD8:  BRA    0BE0
00BDA:  MOVLB  C
00BDC:  BSF    x12.5
00BDE:  MOVLB  B
....................    FaultNCNO[6] = InputType.B6;
00BE0:  MOVLB  C
00BE2:  BCF    x12.6
00BE4:  MOVLB  B
00BE6:  BTFSS  x9E.5
00BE8:  BRA    0BF0
00BEA:  MOVLB  C
00BEC:  BSF    x12.6
00BEE:  MOVLB  B
....................    FaultNCNO[7] = InputType.B7;
00BF0:  MOVLB  C
00BF2:  BCF    x12.7
00BF4:  MOVLB  B
00BF6:  BTFSS  x9E.6
00BF8:  BRA    0C00
00BFA:  MOVLB  C
00BFC:  BSF    x12.7
00BFE:  MOVLB  B
....................    FaultNCNO[8] = InputType.B8;
00C00:  MOVLB  C
00C02:  BCF    x13.0
00C04:  MOVLB  B
00C06:  BTFSS  x9E.7
00C08:  BRA    0C10
00C0A:  MOVLB  C
00C0C:  BSF    x13.0
00C0E:  MOVLB  B
....................    FaultNCNO[9] = InputType.B9;
00C10:  MOVLB  C
00C12:  BCF    x13.1
00C14:  MOVLB  B
00C16:  BTFSS  x9F.0
00C18:  BRA    0C20
00C1A:  MOVLB  C
00C1C:  BSF    x13.1
00C1E:  MOVLB  B
....................    FaultNCNO[10] = InputType.B10;
00C20:  MOVLB  C
00C22:  BCF    x13.2
00C24:  MOVLB  B
00C26:  BTFSS  x9F.1
00C28:  BRA    0C30
00C2A:  MOVLB  C
00C2C:  BSF    x13.2
00C2E:  MOVLB  B
....................    FaultNCNO[11] = InputType.B11;
00C30:  MOVLB  C
00C32:  BCF    x13.3
00C34:  MOVLB  B
00C36:  BTFSS  x9F.2
00C38:  BRA    0C40
00C3A:  MOVLB  C
00C3C:  BSF    x13.3
00C3E:  MOVLB  B
....................    FaultNCNO[12] = InputType.B12;
00C40:  MOVLB  C
00C42:  BCF    x13.4
00C44:  MOVLB  B
00C46:  BTFSS  x9F.3
00C48:  BRA    0C50
00C4A:  MOVLB  C
00C4C:  BSF    x13.4
00C4E:  MOVLB  B
....................    FaultNCNO[13] = InputType.B13;
00C50:  MOVLB  C
00C52:  BCF    x13.5
00C54:  MOVLB  B
00C56:  BTFSS  x9F.4
00C58:  BRA    0C60
00C5A:  MOVLB  C
00C5C:  BSF    x13.5
00C5E:  MOVLB  B
....................    FaultNCNO[14] = InputType.B14;
00C60:  MOVLB  C
00C62:  BCF    x13.6
00C64:  MOVLB  B
00C66:  BTFSS  x9F.5
00C68:  BRA    0C70
00C6A:  MOVLB  C
00C6C:  BSF    x13.6
00C6E:  MOVLB  B
....................    FaultNCNO[15] = InputType.B15;
00C70:  MOVLB  C
00C72:  BCF    x13.7
00C74:  MOVLB  B
00C76:  BTFSS  x9F.6
00C78:  BRA    0C80
00C7A:  MOVLB  C
00C7C:  BSF    x13.7
00C7E:  MOVLB  B
....................    FaultNCNO[16] = InputType.B16;
00C80:  MOVLB  C
00C82:  BCF    x14.0
00C84:  MOVLB  B
00C86:  BTFSS  x9F.7
00C88:  BRA    0C90
00C8A:  MOVLB  C
00C8C:  BSF    x14.0
00C8E:  MOVLB  B
....................    
.................... /*
....................    EEpDat = read_eeprom(0x03);   // Input type 9-16
....................    InputType17_24 = EEpDat;
.................... 
....................    InputType.B17 = EEpDat;
....................    InputType.B18 = EEpDat >> 1;
....................    InputType.B19 = EEpDat >> 2;
....................    InputType.B20 = EEpDat >> 3;
....................    InputType.B21 = EEpDat >> 4;
....................    InputType.B22 = EEpDat >> 5;
....................    InputType.B23 = EEpDat >> 6;
....................    InputType.B24 = EEpDat >> 7;
.................... */
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
00C90:  MOVFF  FF2,C25
00C94:  BCF    FF2.7
00C96:  CLRF   FAA
00C98:  MOVLW  04
00C9A:  MOVWF  FA9
00C9C:  BCF    FA6.6
00C9E:  BCF    FA6.7
00CA0:  BSF    FA6.0
00CA2:  MOVF   FA8,W
00CA4:  MOVLB  C
00CA6:  BTFSC  x25.7
00CA8:  BSF    FF2.7
00CAA:  MOVWF  39
....................    FaultType1_8 = EEpDat;
00CAC:  MOVFF  39,3D
.................... 
....................    FaultType.B1 = EEpDat;
00CB0:  MOVLB  B
00CB2:  BCF    xA0.0
00CB4:  BTFSC  39.0
00CB6:  BSF    xA0.0
....................    FaultType.B2 = EEpDat >> 1;
00CB8:  BCF    FD8.0
00CBA:  RRCF   39,W
00CBC:  BCF    xA0.1
00CBE:  BTFSC  FE8.0
00CC0:  BSF    xA0.1
....................    FaultType.B3 = EEpDat >> 2;
00CC2:  RRCF   39,W
00CC4:  MOVWF  00
00CC6:  RRCF   00,F
00CC8:  MOVLW  3F
00CCA:  ANDWF  00,F
00CCC:  BCF    xA0.2
00CCE:  BTFSC  00.0
00CD0:  BSF    xA0.2
....................    FaultType.B4 = EEpDat >> 3;
00CD2:  RRCF   39,W
00CD4:  MOVWF  00
00CD6:  RRCF   00,F
00CD8:  RRCF   00,F
00CDA:  MOVLW  1F
00CDC:  ANDWF  00,F
00CDE:  BCF    xA0.3
00CE0:  BTFSC  00.0
00CE2:  BSF    xA0.3
....................    FaultType.B5 = EEpDat >> 4;
00CE4:  SWAPF  39,W
00CE6:  MOVWF  00
00CE8:  MOVLW  0F
00CEA:  ANDWF  00,F
00CEC:  BCF    xA0.4
00CEE:  BTFSC  00.0
00CF0:  BSF    xA0.4
....................    FaultType.B6 = EEpDat >> 5;
00CF2:  SWAPF  39,W
00CF4:  MOVWF  00
00CF6:  RRCF   00,F
00CF8:  MOVLW  07
00CFA:  ANDWF  00,F
00CFC:  BCF    xA0.5
00CFE:  BTFSC  00.0
00D00:  BSF    xA0.5
....................    FaultType.B7 = EEpDat >> 6;
00D02:  SWAPF  39,W
00D04:  MOVWF  00
00D06:  RRCF   00,F
00D08:  RRCF   00,F
00D0A:  MOVLW  03
00D0C:  ANDWF  00,F
00D0E:  BCF    xA0.6
00D10:  BTFSC  00.0
00D12:  BSF    xA0.6
....................    FaultType.B8 = EEpDat >> 7;
00D14:  CLRF   00
00D16:  BTFSC  39.7
00D18:  BSF    00.0
00D1A:  BCF    xA0.7
00D1C:  BTFSC  00.0
00D1E:  BSF    xA0.7
.................... 
....................    EEpDat = read_eeprom(0x05);   // Fault type 9-16
00D20:  MOVFF  FF2,C25
00D24:  BCF    FF2.7
00D26:  CLRF   FAA
00D28:  MOVLW  05
00D2A:  MOVWF  FA9
00D2C:  BCF    FA6.6
00D2E:  BCF    FA6.7
00D30:  BSF    FA6.0
00D32:  MOVF   FA8,W
00D34:  MOVLB  C
00D36:  BTFSC  x25.7
00D38:  BSF    FF2.7
00D3A:  MOVWF  39
....................    FaultType9_16 = EEpDat;
00D3C:  MOVFF  39,3E
.................... 
....................    FaultType.B9 = EEpDat;
00D40:  MOVLB  B
00D42:  BCF    xA1.0
00D44:  BTFSC  39.0
00D46:  BSF    xA1.0
....................    FaultType.B10 = EEpDat >> 1;
00D48:  BCF    FD8.0
00D4A:  RRCF   39,W
00D4C:  BCF    xA1.1
00D4E:  BTFSC  FE8.0
00D50:  BSF    xA1.1
....................    FaultType.B11 = EEpDat >> 2;
00D52:  RRCF   39,W
00D54:  MOVWF  00
00D56:  RRCF   00,F
00D58:  MOVLW  3F
00D5A:  ANDWF  00,F
00D5C:  BCF    xA1.2
00D5E:  BTFSC  00.0
00D60:  BSF    xA1.2
....................    FaultType.B12 = EEpDat >> 3;
00D62:  RRCF   39,W
00D64:  MOVWF  00
00D66:  RRCF   00,F
00D68:  RRCF   00,F
00D6A:  MOVLW  1F
00D6C:  ANDWF  00,F
00D6E:  BCF    xA1.3
00D70:  BTFSC  00.0
00D72:  BSF    xA1.3
....................    FaultType.B13 = EEpDat >> 4;
00D74:  SWAPF  39,W
00D76:  MOVWF  00
00D78:  MOVLW  0F
00D7A:  ANDWF  00,F
00D7C:  BCF    xA1.4
00D7E:  BTFSC  00.0
00D80:  BSF    xA1.4
....................    FaultType.B14 = EEpDat >> 5;
00D82:  SWAPF  39,W
00D84:  MOVWF  00
00D86:  RRCF   00,F
00D88:  MOVLW  07
00D8A:  ANDWF  00,F
00D8C:  BCF    xA1.5
00D8E:  BTFSC  00.0
00D90:  BSF    xA1.5
....................    FaultType.B15 = EEpDat >> 6;
00D92:  SWAPF  39,W
00D94:  MOVWF  00
00D96:  RRCF   00,F
00D98:  RRCF   00,F
00D9A:  MOVLW  03
00D9C:  ANDWF  00,F
00D9E:  BCF    xA1.6
00DA0:  BTFSC  00.0
00DA2:  BSF    xA1.6
....................    FaultType.B16 = EEpDat >> 7;
00DA4:  CLRF   00
00DA6:  BTFSC  39.7
00DA8:  BSF    00.0
00DAA:  BCF    xA1.7
00DAC:  BTFSC  00.0
00DAE:  BSF    xA1.7
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00DB0:  MOVFF  FF2,C25
00DB4:  BCF    FF2.7
00DB6:  CLRF   FAA
00DB8:  MOVLW  07
00DBA:  MOVWF  FA9
00DBC:  BCF    FA6.6
00DBE:  BCF    FA6.7
00DC0:  BSF    FA6.0
00DC2:  MOVF   FA8,W
00DC4:  MOVLB  C
00DC6:  BTFSC  x25.7
00DC8:  BSF    FF2.7
00DCA:  MOVWF  39
....................    OutputType1_8 = EEpDat;
00DCC:  MOVFF  39,40
.................... 
....................    OutputType.B1 = EEpDat;
00DD0:  MOVLB  B
00DD2:  BCF    xA2.0
00DD4:  BTFSC  39.0
00DD6:  BSF    xA2.0
....................    OutputType.B2 = EEpDat >> 1;
00DD8:  BCF    FD8.0
00DDA:  RRCF   39,W
00DDC:  BCF    xA2.1
00DDE:  BTFSC  FE8.0
00DE0:  BSF    xA2.1
....................    OutputType.B3 = EEpDat >> 2;
00DE2:  RRCF   39,W
00DE4:  MOVWF  00
00DE6:  RRCF   00,F
00DE8:  MOVLW  3F
00DEA:  ANDWF  00,F
00DEC:  BCF    xA2.2
00DEE:  BTFSC  00.0
00DF0:  BSF    xA2.2
....................    OutputType.B4 = EEpDat >> 3;
00DF2:  RRCF   39,W
00DF4:  MOVWF  00
00DF6:  RRCF   00,F
00DF8:  RRCF   00,F
00DFA:  MOVLW  1F
00DFC:  ANDWF  00,F
00DFE:  BCF    xA2.3
00E00:  BTFSC  00.0
00E02:  BSF    xA2.3
....................    OutputType.B5 = EEpDat >> 4;
00E04:  SWAPF  39,W
00E06:  MOVWF  00
00E08:  MOVLW  0F
00E0A:  ANDWF  00,F
00E0C:  BCF    xA2.4
00E0E:  BTFSC  00.0
00E10:  BSF    xA2.4
....................    OutputType.B6 = EEpDat >> 5;
00E12:  SWAPF  39,W
00E14:  MOVWF  00
00E16:  RRCF   00,F
00E18:  MOVLW  07
00E1A:  ANDWF  00,F
00E1C:  BCF    xA2.5
00E1E:  BTFSC  00.0
00E20:  BSF    xA2.5
....................    OutputType.B7 = EEpDat >> 6;
00E22:  SWAPF  39,W
00E24:  MOVWF  00
00E26:  RRCF   00,F
00E28:  RRCF   00,F
00E2A:  MOVLW  03
00E2C:  ANDWF  00,F
00E2E:  BCF    xA2.6
00E30:  BTFSC  00.0
00E32:  BSF    xA2.6
....................    OutputType.B8 = EEpDat >> 7;
00E34:  CLRF   00
00E36:  BTFSC  39.7
00E38:  BSF    00.0
00E3A:  BCF    xA2.7
00E3C:  BTFSC  00.0
00E3E:  BSF    xA2.7
.................... 
....................    EEpDat = read_eeprom(0x08);   // Output type 9-16
00E40:  MOVFF  FF2,C25
00E44:  BCF    FF2.7
00E46:  CLRF   FAA
00E48:  MOVLW  08
00E4A:  MOVWF  FA9
00E4C:  BCF    FA6.6
00E4E:  BCF    FA6.7
00E50:  BSF    FA6.0
00E52:  MOVF   FA8,W
00E54:  MOVLB  C
00E56:  BTFSC  x25.7
00E58:  BSF    FF2.7
00E5A:  MOVWF  39
....................    OutputType9_16 = EEpDat;
00E5C:  MOVFF  39,41
.................... 
....................    OutputType.B9 = EEpDat;
00E60:  MOVLB  B
00E62:  BCF    xA3.0
00E64:  BTFSC  39.0
00E66:  BSF    xA3.0
....................    OutputType.B10 = EEpDat >> 1;
00E68:  BCF    FD8.0
00E6A:  RRCF   39,W
00E6C:  BCF    xA3.1
00E6E:  BTFSC  FE8.0
00E70:  BSF    xA3.1
....................    OutputType.B11 = EEpDat >> 2;
00E72:  RRCF   39,W
00E74:  MOVWF  00
00E76:  RRCF   00,F
00E78:  MOVLW  3F
00E7A:  ANDWF  00,F
00E7C:  BCF    xA3.2
00E7E:  BTFSC  00.0
00E80:  BSF    xA3.2
....................    OutputType.B12 = EEpDat >> 3;
00E82:  RRCF   39,W
00E84:  MOVWF  00
00E86:  RRCF   00,F
00E88:  RRCF   00,F
00E8A:  MOVLW  1F
00E8C:  ANDWF  00,F
00E8E:  BCF    xA3.3
00E90:  BTFSC  00.0
00E92:  BSF    xA3.3
....................    OutputType.B13 = EEpDat >> 4;
00E94:  SWAPF  39,W
00E96:  MOVWF  00
00E98:  MOVLW  0F
00E9A:  ANDWF  00,F
00E9C:  BCF    xA3.4
00E9E:  BTFSC  00.0
00EA0:  BSF    xA3.4
....................    OutputType.B14 = EEpDat >> 5;
00EA2:  SWAPF  39,W
00EA4:  MOVWF  00
00EA6:  RRCF   00,F
00EA8:  MOVLW  07
00EAA:  ANDWF  00,F
00EAC:  BCF    xA3.5
00EAE:  BTFSC  00.0
00EB0:  BSF    xA3.5
....................    OutputType.B15 = EEpDat >> 6;
00EB2:  SWAPF  39,W
00EB4:  MOVWF  00
00EB6:  RRCF   00,F
00EB8:  RRCF   00,F
00EBA:  MOVLW  03
00EBC:  ANDWF  00,F
00EBE:  BCF    xA3.6
00EC0:  BTFSC  00.0
00EC2:  BSF    xA3.6
....................    OutputType.B16 = EEpDat >> 7;
00EC4:  CLRF   00
00EC6:  BTFSC  39.7
00EC8:  BSF    00.0
00ECA:  BCF    xA3.7
00ECC:  BTFSC  00.0
00ECE:  BSF    xA3.7
.................... 
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
00ED0:  MOVFF  FF2,C25
00ED4:  BCF    FF2.7
00ED6:  CLRF   FAA
00ED8:  MOVLW  0A
00EDA:  MOVWF  FA9
00EDC:  BCF    FA6.6
00EDE:  BCF    FA6.7
00EE0:  BSF    FA6.0
00EE2:  MOVF   FA8,W
00EE4:  MOVLB  C
00EE6:  BTFSC  x25.7
00EE8:  BSF    FF2.7
00EEA:  MOVWF  39
....................    OutputBoth1_8 = EEpDat;
00EEC:  MOVFF  39,43
.................... 
....................    OutputBoth.B1 = EEpDat;
00EF0:  MOVLB  B
00EF2:  BCF    xA4.0
00EF4:  BTFSC  39.0
00EF6:  BSF    xA4.0
....................    OutputBoth.B2 = EEpDat >> 1;
00EF8:  BCF    FD8.0
00EFA:  RRCF   39,W
00EFC:  BCF    xA4.1
00EFE:  BTFSC  FE8.0
00F00:  BSF    xA4.1
....................    OutputBoth.B3 = EEpDat >> 2;
00F02:  RRCF   39,W
00F04:  MOVWF  00
00F06:  RRCF   00,F
00F08:  MOVLW  3F
00F0A:  ANDWF  00,F
00F0C:  BCF    xA4.2
00F0E:  BTFSC  00.0
00F10:  BSF    xA4.2
....................    OutputBoth.B4 = EEpDat >> 3;
00F12:  RRCF   39,W
00F14:  MOVWF  00
00F16:  RRCF   00,F
00F18:  RRCF   00,F
00F1A:  MOVLW  1F
00F1C:  ANDWF  00,F
00F1E:  BCF    xA4.3
00F20:  BTFSC  00.0
00F22:  BSF    xA4.3
....................    OutputBoth.B5 = EEpDat >> 4;
00F24:  SWAPF  39,W
00F26:  MOVWF  00
00F28:  MOVLW  0F
00F2A:  ANDWF  00,F
00F2C:  BCF    xA4.4
00F2E:  BTFSC  00.0
00F30:  BSF    xA4.4
....................    OutputBoth.B6 = EEpDat >> 5;
00F32:  SWAPF  39,W
00F34:  MOVWF  00
00F36:  RRCF   00,F
00F38:  MOVLW  07
00F3A:  ANDWF  00,F
00F3C:  BCF    xA4.5
00F3E:  BTFSC  00.0
00F40:  BSF    xA4.5
....................    OutputBoth.B7 = EEpDat >> 6;
00F42:  SWAPF  39,W
00F44:  MOVWF  00
00F46:  RRCF   00,F
00F48:  RRCF   00,F
00F4A:  MOVLW  03
00F4C:  ANDWF  00,F
00F4E:  BCF    xA4.6
00F50:  BTFSC  00.0
00F52:  BSF    xA4.6
....................    OutputBoth.B8 = EEpDat >> 7;
00F54:  CLRF   00
00F56:  BTFSC  39.7
00F58:  BSF    00.0
00F5A:  BCF    xA4.7
00F5C:  BTFSC  00.0
00F5E:  BSF    xA4.7
.................... 
....................    EEpDat = read_eeprom(0x0B);   // Output Both 9-16
00F60:  MOVFF  FF2,C25
00F64:  BCF    FF2.7
00F66:  CLRF   FAA
00F68:  MOVLW  0B
00F6A:  MOVWF  FA9
00F6C:  BCF    FA6.6
00F6E:  BCF    FA6.7
00F70:  BSF    FA6.0
00F72:  MOVF   FA8,W
00F74:  MOVLB  C
00F76:  BTFSC  x25.7
00F78:  BSF    FF2.7
00F7A:  MOVWF  39
....................    OutputBoth9_16 = EEpDat;
00F7C:  MOVFF  39,44
.................... 
....................    OutputBoth.B9 = EEpDat;
00F80:  MOVLB  B
00F82:  BCF    xA5.0
00F84:  BTFSC  39.0
00F86:  BSF    xA5.0
....................    OutputBoth.B10 = EEpDat >> 1;
00F88:  BCF    FD8.0
00F8A:  RRCF   39,W
00F8C:  BCF    xA5.1
00F8E:  BTFSC  FE8.0
00F90:  BSF    xA5.1
....................    OutputBoth.B11 = EEpDat >> 2;
00F92:  RRCF   39,W
00F94:  MOVWF  00
00F96:  RRCF   00,F
00F98:  MOVLW  3F
00F9A:  ANDWF  00,F
00F9C:  BCF    xA5.2
00F9E:  BTFSC  00.0
00FA0:  BSF    xA5.2
....................    OutputBoth.B12 = EEpDat >> 3;
00FA2:  RRCF   39,W
00FA4:  MOVWF  00
00FA6:  RRCF   00,F
00FA8:  RRCF   00,F
00FAA:  MOVLW  1F
00FAC:  ANDWF  00,F
00FAE:  BCF    xA5.3
00FB0:  BTFSC  00.0
00FB2:  BSF    xA5.3
....................    OutputBoth.B13 = EEpDat >> 4;
00FB4:  SWAPF  39,W
00FB6:  MOVWF  00
00FB8:  MOVLW  0F
00FBA:  ANDWF  00,F
00FBC:  BCF    xA5.4
00FBE:  BTFSC  00.0
00FC0:  BSF    xA5.4
....................    OutputBoth.B14 = EEpDat >> 5;
00FC2:  SWAPF  39,W
00FC4:  MOVWF  00
00FC6:  RRCF   00,F
00FC8:  MOVLW  07
00FCA:  ANDWF  00,F
00FCC:  BCF    xA5.5
00FCE:  BTFSC  00.0
00FD0:  BSF    xA5.5
....................    OutputBoth.B15 = EEpDat >> 6;
00FD2:  SWAPF  39,W
00FD4:  MOVWF  00
00FD6:  RRCF   00,F
00FD8:  RRCF   00,F
00FDA:  MOVLW  03
00FDC:  ANDWF  00,F
00FDE:  BCF    xA5.6
00FE0:  BTFSC  00.0
00FE2:  BSF    xA5.6
....................    OutputBoth.B16 = EEpDat >> 7;
00FE4:  CLRF   00
00FE6:  BTFSC  39.7
00FE8:  BSF    00.0
00FEA:  BCF    xA5.7
00FEC:  BTFSC  00.0
00FEE:  BSF    xA5.7
.................... 
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
00FF0:  MOVFF  FF2,C25
00FF4:  BCF    FF2.7
00FF6:  CLRF   FAA
00FF8:  MOVLW  0D
00FFA:  MOVWF  FA9
00FFC:  BCF    FA6.6
00FFE:  BCF    FA6.7
01000:  BSF    FA6.0
01002:  MOVF   FA8,W
01004:  MOVLB  C
01006:  BTFSC  x25.7
01008:  BSF    FF2.7
0100A:  MOVWF  39
....................    Alarm_Indicator1_8 = EEpDat;
0100C:  MOVFF  39,46
.................... 
....................    AlarmIndicator.B1 = EEpDat;
01010:  MOVLB  B
01012:  BCF    xA6.0
01014:  BTFSC  39.0
01016:  BSF    xA6.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
01018:  BCF    FD8.0
0101A:  RRCF   39,W
0101C:  BCF    xA6.1
0101E:  BTFSC  FE8.0
01020:  BSF    xA6.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
01022:  RRCF   39,W
01024:  MOVWF  00
01026:  RRCF   00,F
01028:  MOVLW  3F
0102A:  ANDWF  00,F
0102C:  BCF    xA6.2
0102E:  BTFSC  00.0
01030:  BSF    xA6.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
01032:  RRCF   39,W
01034:  MOVWF  00
01036:  RRCF   00,F
01038:  RRCF   00,F
0103A:  MOVLW  1F
0103C:  ANDWF  00,F
0103E:  BCF    xA6.3
01040:  BTFSC  00.0
01042:  BSF    xA6.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
01044:  SWAPF  39,W
01046:  MOVWF  00
01048:  MOVLW  0F
0104A:  ANDWF  00,F
0104C:  BCF    xA6.4
0104E:  BTFSC  00.0
01050:  BSF    xA6.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
01052:  SWAPF  39,W
01054:  MOVWF  00
01056:  RRCF   00,F
01058:  MOVLW  07
0105A:  ANDWF  00,F
0105C:  BCF    xA6.5
0105E:  BTFSC  00.0
01060:  BSF    xA6.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
01062:  SWAPF  39,W
01064:  MOVWF  00
01066:  RRCF   00,F
01068:  RRCF   00,F
0106A:  MOVLW  03
0106C:  ANDWF  00,F
0106E:  BCF    xA6.6
01070:  BTFSC  00.0
01072:  BSF    xA6.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
01074:  CLRF   00
01076:  BTFSC  39.7
01078:  BSF    00.0
0107A:  BCF    xA6.7
0107C:  BTFSC  00.0
0107E:  BSF    xA6.7
.................... 
....................    EEpDat = read_eeprom(0x0E);   // AlarmIndicator 9-16
01080:  MOVFF  FF2,C25
01084:  BCF    FF2.7
01086:  CLRF   FAA
01088:  MOVLW  0E
0108A:  MOVWF  FA9
0108C:  BCF    FA6.6
0108E:  BCF    FA6.7
01090:  BSF    FA6.0
01092:  MOVF   FA8,W
01094:  MOVLB  C
01096:  BTFSC  x25.7
01098:  BSF    FF2.7
0109A:  MOVWF  39
....................    Alarm_Indicator9_16 = EEpDat;
0109C:  MOVFF  39,47
.................... 
....................    AlarmIndicator.B9 = EEpDat;
010A0:  MOVLB  B
010A2:  BCF    xA7.0
010A4:  BTFSC  39.0
010A6:  BSF    xA7.0
....................    AlarmIndicator.B10 = EEpDat >> 1;
010A8:  BCF    FD8.0
010AA:  RRCF   39,W
010AC:  BCF    xA7.1
010AE:  BTFSC  FE8.0
010B0:  BSF    xA7.1
....................    AlarmIndicator.B11 = EEpDat >> 2;
010B2:  RRCF   39,W
010B4:  MOVWF  00
010B6:  RRCF   00,F
010B8:  MOVLW  3F
010BA:  ANDWF  00,F
010BC:  BCF    xA7.2
010BE:  BTFSC  00.0
010C0:  BSF    xA7.2
....................    AlarmIndicator.B12 = EEpDat >> 3;
010C2:  RRCF   39,W
010C4:  MOVWF  00
010C6:  RRCF   00,F
010C8:  RRCF   00,F
010CA:  MOVLW  1F
010CC:  ANDWF  00,F
010CE:  BCF    xA7.3
010D0:  BTFSC  00.0
010D2:  BSF    xA7.3
....................    AlarmIndicator.B13 = EEpDat >> 4;
010D4:  SWAPF  39,W
010D6:  MOVWF  00
010D8:  MOVLW  0F
010DA:  ANDWF  00,F
010DC:  BCF    xA7.4
010DE:  BTFSC  00.0
010E0:  BSF    xA7.4
....................    AlarmIndicator.B14 = EEpDat >> 5;
010E2:  SWAPF  39,W
010E4:  MOVWF  00
010E6:  RRCF   00,F
010E8:  MOVLW  07
010EA:  ANDWF  00,F
010EC:  BCF    xA7.5
010EE:  BTFSC  00.0
010F0:  BSF    xA7.5
....................    AlarmIndicator.B15 = EEpDat >> 6;
010F2:  SWAPF  39,W
010F4:  MOVWF  00
010F6:  RRCF   00,F
010F8:  RRCF   00,F
010FA:  MOVLW  03
010FC:  ANDWF  00,F
010FE:  BCF    xA7.6
01100:  BTFSC  00.0
01102:  BSF    xA7.6
....................    AlarmIndicator.B16 = EEpDat >> 7;
01104:  CLRF   00
01106:  BTFSC  39.7
01108:  BSF    00.0
0110A:  BCF    xA7.7
0110C:  BTFSC  00.0
0110E:  BSF    xA7.7
.................... 
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
01110:  MOVFF  FF2,C25
01114:  BCF    FF2.7
01116:  CLRF   FAA
01118:  MOVLW  10
0111A:  MOVWF  FA9
0111C:  BCF    FA6.6
0111E:  BCF    FA6.7
01120:  BSF    FA6.0
01122:  MOVF   FA8,W
01124:  MOVLB  C
01126:  BTFSC  x25.7
01128:  BSF    FF2.7
0112A:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
0112C:  MOVLB  B
0112E:  BCF    xB2.0
01130:  BTFSC  39.0
01132:  BSF    xB2.0
....................    RED_Colour.B2 = EEpDat >> 1;
01134:  BCF    FD8.0
01136:  RRCF   39,W
01138:  BCF    xB2.1
0113A:  BTFSC  FE8.0
0113C:  BSF    xB2.1
....................    RED_Colour.B3 = EEpDat >> 2;
0113E:  RRCF   39,W
01140:  MOVWF  00
01142:  RRCF   00,F
01144:  MOVLW  3F
01146:  ANDWF  00,F
01148:  BCF    xB2.2
0114A:  BTFSC  00.0
0114C:  BSF    xB2.2
....................    RED_Colour.B4 = EEpDat >> 3;
0114E:  RRCF   39,W
01150:  MOVWF  00
01152:  RRCF   00,F
01154:  RRCF   00,F
01156:  MOVLW  1F
01158:  ANDWF  00,F
0115A:  BCF    xB2.3
0115C:  BTFSC  00.0
0115E:  BSF    xB2.3
....................    RED_Colour.B5 = EEpDat >> 4;
01160:  SWAPF  39,W
01162:  MOVWF  00
01164:  MOVLW  0F
01166:  ANDWF  00,F
01168:  BCF    xB2.4
0116A:  BTFSC  00.0
0116C:  BSF    xB2.4
....................    RED_Colour.B6 = EEpDat >> 5;
0116E:  SWAPF  39,W
01170:  MOVWF  00
01172:  RRCF   00,F
01174:  MOVLW  07
01176:  ANDWF  00,F
01178:  BCF    xB2.5
0117A:  BTFSC  00.0
0117C:  BSF    xB2.5
....................    RED_Colour.B7 = EEpDat >> 6;
0117E:  SWAPF  39,W
01180:  MOVWF  00
01182:  RRCF   00,F
01184:  RRCF   00,F
01186:  MOVLW  03
01188:  ANDWF  00,F
0118A:  BCF    xB2.6
0118C:  BTFSC  00.0
0118E:  BSF    xB2.6
....................    RED_Colour.B8 = EEpDat >> 7;
01190:  CLRF   00
01192:  BTFSC  39.7
01194:  BSF    00.0
01196:  BCF    xB2.7
01198:  BTFSC  00.0
0119A:  BSF    xB2.7
....................    
....................    EEpDat = read_eeprom(0x11);
0119C:  MOVFF  FF2,C25
011A0:  BCF    FF2.7
011A2:  CLRF   FAA
011A4:  MOVLW  11
011A6:  MOVWF  FA9
011A8:  BCF    FA6.6
011AA:  BCF    FA6.7
011AC:  BSF    FA6.0
011AE:  MOVF   FA8,W
011B0:  MOVLB  C
011B2:  BTFSC  x25.7
011B4:  BSF    FF2.7
011B6:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
011B8:  MOVLB  B
011BA:  BCF    xB3.0
011BC:  BTFSC  39.0
011BE:  BSF    xB3.0
....................    RED_Colour.B10 = EEpDat >> 1;
011C0:  BCF    FD8.0
011C2:  RRCF   39,W
011C4:  BCF    xB3.1
011C6:  BTFSC  FE8.0
011C8:  BSF    xB3.1
....................    
....................    EEpDat = read_eeprom(0x12);
011CA:  MOVFF  FF2,C25
011CE:  BCF    FF2.7
011D0:  CLRF   FAA
011D2:  MOVLW  12
011D4:  MOVWF  FA9
011D6:  BCF    FA6.6
011D8:  BCF    FA6.7
011DA:  BSF    FA6.0
011DC:  MOVF   FA8,W
011DE:  MOVLB  C
011E0:  BTFSC  x25.7
011E2:  BSF    FF2.7
011E4:  MOVWF  39
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
011E6:  MOVLB  B
011E8:  BCF    xB3.2
011EA:  BTFSC  39.0
011EC:  BSF    xB3.2
....................    RED_Colour.B12 = EEpDat >> 1;
011EE:  BCF    FD8.0
011F0:  RRCF   39,W
011F2:  BCF    xB3.3
011F4:  BTFSC  FE8.0
011F6:  BSF    xB3.3
....................    RED_Colour.B13 = EEpDat >> 2;
011F8:  RRCF   39,W
011FA:  MOVWF  00
011FC:  RRCF   00,F
011FE:  MOVLW  3F
01200:  ANDWF  00,F
01202:  BCF    xB3.4
01204:  BTFSC  00.0
01206:  BSF    xB3.4
....................    RED_Colour.B14 = EEpDat >> 3;
01208:  RRCF   39,W
0120A:  MOVWF  00
0120C:  RRCF   00,F
0120E:  RRCF   00,F
01210:  MOVLW  1F
01212:  ANDWF  00,F
01214:  BCF    xB3.5
01216:  BTFSC  00.0
01218:  BSF    xB3.5
....................    RED_Colour.B15 = EEpDat >> 4;
0121A:  SWAPF  39,W
0121C:  MOVWF  00
0121E:  MOVLW  0F
01220:  ANDWF  00,F
01222:  BCF    xB3.6
01224:  BTFSC  00.0
01226:  BSF    xB3.6
....................    RED_Colour.B16 = EEpDat >> 5;
01228:  SWAPF  39,W
0122A:  MOVWF  00
0122C:  RRCF   00,F
0122E:  MOVLW  07
01230:  ANDWF  00,F
01232:  BCF    xB3.7
01234:  BTFSC  00.0
01236:  BSF    xB3.7
.................... 
....................    
....................    EEpDat = read_eeprom(0x14);
01238:  MOVFF  FF2,C25
0123C:  BCF    FF2.7
0123E:  CLRF   FAA
01240:  MOVLW  14
01242:  MOVWF  FA9
01244:  BCF    FA6.6
01246:  BCF    FA6.7
01248:  BSF    FA6.0
0124A:  MOVF   FA8,W
0124C:  MOVLB  C
0124E:  BTFSC  x25.7
01250:  BSF    FF2.7
01252:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
01254:  MOVLB  B
01256:  BCF    xB4.0
01258:  BTFSC  39.0
0125A:  BSF    xB4.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
0125C:  BCF    FD8.0
0125E:  RRCF   39,W
01260:  BCF    xB4.1
01262:  BTFSC  FE8.0
01264:  BSF    xB4.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
01266:  RRCF   39,W
01268:  MOVWF  00
0126A:  RRCF   00,F
0126C:  MOVLW  3F
0126E:  ANDWF  00,F
01270:  BCF    xB4.2
01272:  BTFSC  00.0
01274:  BSF    xB4.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
01276:  RRCF   39,W
01278:  MOVWF  00
0127A:  RRCF   00,F
0127C:  RRCF   00,F
0127E:  MOVLW  1F
01280:  ANDWF  00,F
01282:  BCF    xB4.3
01284:  BTFSC  00.0
01286:  BSF    xB4.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
01288:  SWAPF  39,W
0128A:  MOVWF  00
0128C:  MOVLW  0F
0128E:  ANDWF  00,F
01290:  BCF    xB4.4
01292:  BTFSC  00.0
01294:  BSF    xB4.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
01296:  SWAPF  39,W
01298:  MOVWF  00
0129A:  RRCF   00,F
0129C:  MOVLW  07
0129E:  ANDWF  00,F
012A0:  BCF    xB4.5
012A2:  BTFSC  00.0
012A4:  BSF    xB4.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
012A6:  SWAPF  39,W
012A8:  MOVWF  00
012AA:  RRCF   00,F
012AC:  RRCF   00,F
012AE:  MOVLW  03
012B0:  ANDWF  00,F
012B2:  BCF    xB4.6
012B4:  BTFSC  00.0
012B6:  BSF    xB4.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
012B8:  CLRF   00
012BA:  BTFSC  39.7
012BC:  BSF    00.0
012BE:  BCF    xB4.7
012C0:  BTFSC  00.0
012C2:  BSF    xB4.7
....................    
....................    EEpDat = read_eeprom(0x15);
012C4:  MOVFF  FF2,C25
012C8:  BCF    FF2.7
012CA:  CLRF   FAA
012CC:  MOVLW  15
012CE:  MOVWF  FA9
012D0:  BCF    FA6.6
012D2:  BCF    FA6.7
012D4:  BSF    FA6.0
012D6:  MOVF   FA8,W
012D8:  MOVLB  C
012DA:  BTFSC  x25.7
012DC:  BSF    FF2.7
012DE:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
012E0:  MOVLB  B
012E2:  BCF    xB5.0
012E4:  BTFSC  39.0
012E6:  BSF    xB5.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
012E8:  BCF    FD8.0
012EA:  RRCF   39,W
012EC:  BCF    xB5.1
012EE:  BTFSC  FE8.0
012F0:  BSF    xB5.1
....................    
....................    
....................    EEpDat = read_eeprom(0x16);
012F2:  MOVFF  FF2,C25
012F6:  BCF    FF2.7
012F8:  CLRF   FAA
012FA:  MOVLW  16
012FC:  MOVWF  FA9
012FE:  BCF    FA6.6
01300:  BCF    FA6.7
01302:  BSF    FA6.0
01304:  MOVF   FA8,W
01306:  MOVLB  C
01308:  BTFSC  x25.7
0130A:  BSF    FF2.7
0130C:  MOVWF  39
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
0130E:  MOVLB  B
01310:  BCF    xB5.2
01312:  BTFSC  39.0
01314:  BSF    xB5.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
01316:  BCF    FD8.0
01318:  RRCF   39,W
0131A:  BCF    xB5.3
0131C:  BTFSC  FE8.0
0131E:  BSF    xB5.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
01320:  RRCF   39,W
01322:  MOVWF  00
01324:  RRCF   00,F
01326:  MOVLW  3F
01328:  ANDWF  00,F
0132A:  BCF    xB5.4
0132C:  BTFSC  00.0
0132E:  BSF    xB5.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
01330:  RRCF   39,W
01332:  MOVWF  00
01334:  RRCF   00,F
01336:  RRCF   00,F
01338:  MOVLW  1F
0133A:  ANDWF  00,F
0133C:  BCF    xB5.5
0133E:  BTFSC  00.0
01340:  BSF    xB5.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
01342:  SWAPF  39,W
01344:  MOVWF  00
01346:  MOVLW  0F
01348:  ANDWF  00,F
0134A:  BCF    xB5.6
0134C:  BTFSC  00.0
0134E:  BSF    xB5.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
01350:  SWAPF  39,W
01352:  MOVWF  00
01354:  RRCF   00,F
01356:  MOVLW  07
01358:  ANDWF  00,F
0135A:  BCF    xB5.7
0135C:  BTFSC  00.0
0135E:  BSF    xB5.7
.................... 
....................     //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
01360:  MOVFF  FF2,C25
01364:  BCF    FF2.7
01366:  CLRF   FAA
01368:  MOVLW  18
0136A:  MOVWF  FA9
0136C:  BCF    FA6.6
0136E:  BCF    FA6.7
01370:  BSF    FA6.0
01372:  MOVF   FA8,W
01374:  MOVLB  C
01376:  BTFSC  x25.7
01378:  BSF    FF2.7
0137A:  MOVLB  0
0137C:  MOVWF  x6A
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
0137E:  MOVFF  FF2,C25
01382:  BCF    FF2.7
01384:  CLRF   FAA
01386:  MOVLW  19
01388:  MOVWF  FA9
0138A:  BCF    FA6.6
0138C:  BCF    FA6.7
0138E:  BSF    FA6.0
01390:  MOVF   FA8,W
01392:  MOVLB  C
01394:  BTFSC  x25.7
01396:  BSF    FF2.7
01398:  MOVLB  0
0139A:  MOVWF  x6B
....................    FlashingRate = read_eeprom(0x1A); // Flashing rate
0139C:  MOVFF  FF2,C25
013A0:  BCF    FF2.7
013A2:  CLRF   FAA
013A4:  MOVLW  1A
013A6:  MOVWF  FA9
013A8:  BCF    FA6.6
013AA:  BCF    FA6.7
013AC:  BSF    FA6.0
013AE:  MOVF   FA8,W
013B0:  MOVLB  C
013B2:  BTFSC  x25.7
013B4:  BSF    FF2.7
013B6:  MOVLB  0
013B8:  MOVWF  x6C
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
013BA:  MOVFF  FF2,C25
013BE:  BCF    FF2.7
013C0:  CLRF   FAA
013C2:  MOVLW  1B
013C4:  MOVWF  FA9
013C6:  BCF    FA6.6
013C8:  BCF    FA6.7
013CA:  BSF    FA6.0
013CC:  MOVF   FA8,W
013CE:  MOVLB  C
013D0:  BTFSC  x25.7
013D2:  BSF    FF2.7
013D4:  MOVLB  0
013D6:  MOVWF  x6D
....................    
....................    FaultDelayTime[0] = read_eeprom(0x1C);  // Master or slave sync(flashing)
013D8:  MOVFF  FF2,C25
013DC:  BCF    FF2.7
013DE:  CLRF   FAA
013E0:  MOVLW  1C
013E2:  MOVWF  FA9
013E4:  BCF    FA6.6
013E6:  BCF    FA6.7
013E8:  BSF    FA6.0
013EA:  MOVF   FA8,W
013EC:  MOVLB  C
013EE:  BTFSC  x25.7
013F0:  BSF    FF2.7
013F2:  MOVLB  B
013F4:  CLRF   xE9
013F6:  MOVWF  xE8
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
013F8:  MOVFF  FF2,C25
013FC:  BCF    FF2.7
013FE:  CLRF   FAA
01400:  MOVLW  1D
01402:  MOVWF  FA9
01404:  BCF    FA6.6
01406:  BCF    FA6.7
01408:  BSF    FA6.0
0140A:  MOVF   FA8,W
0140C:  MOVLB  C
0140E:  BTFSC  x25.7
01410:  BSF    FF2.7
01412:  MOVLB  0
01414:  MOVWF  x79
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
01416:  MOVFF  FF2,C25
0141A:  BCF    FF2.7
0141C:  CLRF   FAA
0141E:  MOVLW  1E
01420:  MOVWF  FA9
01422:  BCF    FA6.6
01424:  BCF    FA6.7
01426:  BSF    FA6.0
01428:  MOVF   FA8,W
0142A:  MOVLB  C
0142C:  BTFSC  x25.7
0142E:  BSF    FF2.7
01430:  MOVLB  B
01432:  CLRF   xEB
01434:  MOVWF  xEA
....................    FaultDelayTime[2] = read_eeprom(0x1F);
01436:  MOVFF  FF2,C25
0143A:  BCF    FF2.7
0143C:  CLRF   FAA
0143E:  MOVLW  1F
01440:  MOVWF  FA9
01442:  BCF    FA6.6
01444:  BCF    FA6.7
01446:  BSF    FA6.0
01448:  MOVF   FA8,W
0144A:  MOVLB  C
0144C:  BTFSC  x25.7
0144E:  BSF    FF2.7
01450:  MOVLB  B
01452:  CLRF   xED
01454:  MOVWF  xEC
....................    FaultDelayTime[3] = read_eeprom(0x20);
01456:  MOVFF  FF2,C25
0145A:  BCF    FF2.7
0145C:  CLRF   FAA
0145E:  MOVLW  20
01460:  MOVWF  FA9
01462:  BCF    FA6.6
01464:  BCF    FA6.7
01466:  BSF    FA6.0
01468:  MOVF   FA8,W
0146A:  MOVLB  C
0146C:  BTFSC  x25.7
0146E:  BSF    FF2.7
01470:  MOVLB  B
01472:  CLRF   xEF
01474:  MOVWF  xEE
....................    FaultDelayTime[4] = read_eeprom(0x21);
01476:  MOVFF  FF2,C25
0147A:  BCF    FF2.7
0147C:  CLRF   FAA
0147E:  MOVLW  21
01480:  MOVWF  FA9
01482:  BCF    FA6.6
01484:  BCF    FA6.7
01486:  BSF    FA6.0
01488:  MOVF   FA8,W
0148A:  MOVLB  C
0148C:  BTFSC  x25.7
0148E:  BSF    FF2.7
01490:  MOVLB  B
01492:  CLRF   xF1
01494:  MOVWF  xF0
....................    FaultDelayTime[5] = read_eeprom(0x22);
01496:  MOVFF  FF2,C25
0149A:  BCF    FF2.7
0149C:  CLRF   FAA
0149E:  MOVLW  22
014A0:  MOVWF  FA9
014A2:  BCF    FA6.6
014A4:  BCF    FA6.7
014A6:  BSF    FA6.0
014A8:  MOVF   FA8,W
014AA:  MOVLB  C
014AC:  BTFSC  x25.7
014AE:  BSF    FF2.7
014B0:  MOVLB  B
014B2:  CLRF   xF3
014B4:  MOVWF  xF2
....................    FaultDelayTime[6] = read_eeprom(0x23);
014B6:  MOVFF  FF2,C25
014BA:  BCF    FF2.7
014BC:  CLRF   FAA
014BE:  MOVLW  23
014C0:  MOVWF  FA9
014C2:  BCF    FA6.6
014C4:  BCF    FA6.7
014C6:  BSF    FA6.0
014C8:  MOVF   FA8,W
014CA:  MOVLB  C
014CC:  BTFSC  x25.7
014CE:  BSF    FF2.7
014D0:  MOVLB  B
014D2:  CLRF   xF5
014D4:  MOVWF  xF4
....................    FaultDelayTime[7] = read_eeprom(0x24);
014D6:  MOVFF  FF2,C25
014DA:  BCF    FF2.7
014DC:  CLRF   FAA
014DE:  MOVLW  24
014E0:  MOVWF  FA9
014E2:  BCF    FA6.6
014E4:  BCF    FA6.7
014E6:  BSF    FA6.0
014E8:  MOVF   FA8,W
014EA:  MOVLB  C
014EC:  BTFSC  x25.7
014EE:  BSF    FF2.7
014F0:  MOVLB  B
014F2:  CLRF   xF7
014F4:  MOVWF  xF6
....................    FaultDelayTime[8] = read_eeprom(0x25);
014F6:  MOVFF  FF2,C25
014FA:  BCF    FF2.7
014FC:  CLRF   FAA
014FE:  MOVLW  25
01500:  MOVWF  FA9
01502:  BCF    FA6.6
01504:  BCF    FA6.7
01506:  BSF    FA6.0
01508:  MOVF   FA8,W
0150A:  MOVLB  C
0150C:  BTFSC  x25.7
0150E:  BSF    FF2.7
01510:  MOVLB  B
01512:  CLRF   xF9
01514:  MOVWF  xF8
....................    FaultDelayTime[9] = read_eeprom(0x26);
01516:  MOVFF  FF2,C25
0151A:  BCF    FF2.7
0151C:  CLRF   FAA
0151E:  MOVLW  26
01520:  MOVWF  FA9
01522:  BCF    FA6.6
01524:  BCF    FA6.7
01526:  BSF    FA6.0
01528:  MOVF   FA8,W
0152A:  MOVLB  C
0152C:  BTFSC  x25.7
0152E:  BSF    FF2.7
01530:  MOVLB  B
01532:  CLRF   xFB
01534:  MOVWF  xFA
....................    FaultDelayTime[10] = read_eeprom(0x27);
01536:  MOVFF  FF2,C25
0153A:  BCF    FF2.7
0153C:  CLRF   FAA
0153E:  MOVLW  27
01540:  MOVWF  FA9
01542:  BCF    FA6.6
01544:  BCF    FA6.7
01546:  BSF    FA6.0
01548:  MOVF   FA8,W
0154A:  MOVLB  C
0154C:  BTFSC  x25.7
0154E:  BSF    FF2.7
01550:  MOVLB  B
01552:  CLRF   xFD
01554:  MOVWF  xFC
....................    FaultDelayTime[11] = read_eeprom(0x28);
01556:  MOVFF  FF2,C25
0155A:  BCF    FF2.7
0155C:  CLRF   FAA
0155E:  MOVLW  28
01560:  MOVWF  FA9
01562:  BCF    FA6.6
01564:  BCF    FA6.7
01566:  BSF    FA6.0
01568:  MOVF   FA8,W
0156A:  MOVLB  C
0156C:  BTFSC  x25.7
0156E:  BSF    FF2.7
01570:  MOVLB  B
01572:  CLRF   xFF
01574:  MOVWF  xFE
....................    FaultDelayTime[12] = read_eeprom(0x29);
01576:  MOVFF  FF2,C25
0157A:  BCF    FF2.7
0157C:  CLRF   FAA
0157E:  MOVLW  29
01580:  MOVWF  FA9
01582:  BCF    FA6.6
01584:  BCF    FA6.7
01586:  BSF    FA6.0
01588:  MOVF   FA8,W
0158A:  MOVLB  C
0158C:  BTFSC  x25.7
0158E:  BSF    FF2.7
01590:  CLRF   x01
01592:  MOVWF  x00
....................    FaultDelayTime[13] = read_eeprom(0x2A);
01594:  MOVFF  FF2,C25
01598:  BCF    FF2.7
0159A:  CLRF   FAA
0159C:  MOVLW  2A
0159E:  MOVWF  FA9
015A0:  BCF    FA6.6
015A2:  BCF    FA6.7
015A4:  BSF    FA6.0
015A6:  MOVF   FA8,W
015A8:  BTFSC  x25.7
015AA:  BSF    FF2.7
015AC:  CLRF   x03
015AE:  MOVWF  x02
....................    FaultDelayTime[14] = read_eeprom(0x2B);
015B0:  MOVFF  FF2,C25
015B4:  BCF    FF2.7
015B6:  CLRF   FAA
015B8:  MOVLW  2B
015BA:  MOVWF  FA9
015BC:  BCF    FA6.6
015BE:  BCF    FA6.7
015C0:  BSF    FA6.0
015C2:  MOVF   FA8,W
015C4:  BTFSC  x25.7
015C6:  BSF    FF2.7
015C8:  CLRF   x05
015CA:  MOVWF  x04
....................    FaultDelayTime[15] = read_eeprom(0x2C);
015CC:  MOVFF  FF2,C25
015D0:  BCF    FF2.7
015D2:  CLRF   FAA
015D4:  MOVLW  2C
015D6:  MOVWF  FA9
015D8:  BCF    FA6.6
015DA:  BCF    FA6.7
015DC:  BSF    FA6.0
015DE:  MOVF   FA8,W
015E0:  BTFSC  x25.7
015E2:  BSF    FF2.7
015E4:  CLRF   x07
015E6:  MOVWF  x06
....................    FaultDelayTime[16] = read_eeprom(0x2D);
015E8:  MOVFF  FF2,C25
015EC:  BCF    FF2.7
015EE:  CLRF   FAA
015F0:  MOVLW  2D
015F2:  MOVWF  FA9
015F4:  BCF    FA6.6
015F6:  BCF    FA6.7
015F8:  BSF    FA6.0
015FA:  MOVF   FA8,W
015FC:  BTFSC  x25.7
015FE:  BSF    FF2.7
01600:  CLRF   x09
01602:  MOVWF  x08
....................    FaultDelayTime[17] = read_eeprom(0x2E);
01604:  MOVFF  FF2,C25
01608:  BCF    FF2.7
0160A:  CLRF   FAA
0160C:  MOVLW  2E
0160E:  MOVWF  FA9
01610:  BCF    FA6.6
01612:  BCF    FA6.7
01614:  BSF    FA6.0
01616:  MOVF   FA8,W
01618:  BTFSC  x25.7
0161A:  BSF    FF2.7
0161C:  CLRF   x0B
0161E:  MOVWF  x0A
....................    FaultDelayTime[18] = read_eeprom(0x2F);
01620:  MOVFF  FF2,C25
01624:  BCF    FF2.7
01626:  CLRF   FAA
01628:  MOVLW  2F
0162A:  MOVWF  FA9
0162C:  BCF    FA6.6
0162E:  BCF    FA6.7
01630:  BSF    FA6.0
01632:  MOVF   FA8,W
01634:  BTFSC  x25.7
01636:  BSF    FF2.7
01638:  CLRF   x0D
0163A:  MOVWF  x0C
....................    FaultDelayTime[19] = read_eeprom(0x30);
0163C:  MOVFF  FF2,C25
01640:  BCF    FF2.7
01642:  CLRF   FAA
01644:  MOVLW  30
01646:  MOVWF  FA9
01648:  BCF    FA6.6
0164A:  BCF    FA6.7
0164C:  BSF    FA6.0
0164E:  MOVF   FA8,W
01650:  BTFSC  x25.7
01652:  BSF    FF2.7
01654:  CLRF   x0F
01656:  MOVWF  x0E
....................    FaultDelayTime[20] = read_eeprom(0x31);
01658:  MOVFF  FF2,C25
0165C:  BCF    FF2.7
0165E:  CLRF   FAA
01660:  MOVLW  31
01662:  MOVWF  FA9
01664:  BCF    FA6.6
01666:  BCF    FA6.7
01668:  BSF    FA6.0
0166A:  MOVF   FA8,W
0166C:  BTFSC  x25.7
0166E:  BSF    FF2.7
01670:  CLRF   x11
01672:  MOVWF  x10
....................    
....................       unsigned int  a = 0; 
....................    unsigned char  phonenum;
01674:  CLRF   x1B
....................    for(; ; a++)
....................    {
....................       restart_wdt();
01676:  CLRWDT
....................       phonenum = read_eeprom(0x32 + a);
01678:  MOVLW  32
0167A:  ADDWF  x1B,W
0167C:  MOVWF  x25
0167E:  MOVFF  FF2,C26
01682:  BCF    FF2.7
01684:  CLRF   FAA
01686:  MOVFF  C25,FA9
0168A:  BCF    FA6.6
0168C:  BCF    FA6.7
0168E:  BSF    FA6.0
01690:  MOVF   FA8,W
01692:  BTFSC  x26.7
01694:  BSF    FF2.7
01696:  MOVWF  x1C
....................       if((phonenum == 0x0D) || (a > 15))
01698:  MOVF   x1C,W
0169A:  SUBLW  0D
0169C:  BZ    16A4
0169E:  MOVF   x1B,W
016A0:  SUBLW  0F
016A2:  BC    16EC
....................       {
....................          sms_phonenumber[a] =  '\0';
016A4:  CLRF   03
016A6:  MOVF   x1B,W
016A8:  ADDLW  8B
016AA:  MOVWF  FE9
016AC:  MOVLW  09
016AE:  ADDWFC 03,W
016B0:  MOVWF  FEA
016B2:  CLRF   FEF
....................          write_eeprom(0x32+a,phonenum);
016B4:  MOVLW  32
016B6:  ADDWF  x1B,W
016B8:  MOVWF  x25
016BA:  MOVF   FF2,W
016BC:  MOVWF  00
016BE:  BCF    FF2.7
016C0:  CLRF   FAA
016C2:  MOVFF  C25,FA9
016C6:  MOVFF  C1C,FA8
016CA:  BCF    FA6.6
016CC:  BCF    FA6.7
016CE:  BSF    FA6.2
016D0:  MOVLB  F
016D2:  MOVLW  55
016D4:  MOVWF  FA7
016D6:  MOVLW  AA
016D8:  MOVWF  FA7
016DA:  BSF    FA6.1
016DC:  BTFSC  FA6.1
016DE:  BRA    16DC
016E0:  BCF    FA6.2
016E2:  MOVF   00,W
016E4:  IORWF  FF2,F
....................          break;
016E6:  BRA    1708
....................       }
016E8:  BRA    1700
016EA:  MOVLB  C
....................       else
....................       {
....................          sms_phonenumber[a] = phonenum;
016EC:  CLRF   03
016EE:  MOVF   x1B,W
016F0:  ADDLW  8B
016F2:  MOVWF  FE9
016F4:  MOVLW  09
016F6:  ADDWFC 03,W
016F8:  MOVWF  FEA
016FA:  MOVFF  C1C,FEF
016FE:  MOVLB  F
....................       }
01700:  MOVLB  C
01702:  INCF   x1B,F
01704:  BRA    1676
01706:  MOVLB  F
....................    }
....................    
....................       
....................    int16  i =3,j=0,k=0 , buff;
01708:  MOVLB  C
0170A:  CLRF   x1E
0170C:  MOVLW  03
0170E:  MOVWF  x1D
01710:  CLRF   x20
01712:  CLRF   x1F
01714:  CLRF   x22
01716:  CLRF   x21
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01718:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0171A:  MOVLW  5D
0171C:  ADDWF  x1D,W
0171E:  MOVWF  x25
01720:  MOVLW  00
01722:  ADDWFC x1E,W
01724:  MOVWF  x26
01726:  MOVFF  FF2,C27
0172A:  BCF    FF2.7
0172C:  MOVFF  C26,FAA
01730:  MOVFF  C25,FA9
01734:  BCF    FA6.6
01736:  BCF    FA6.7
01738:  BSF    FA6.0
0173A:  MOVF   FA8,W
0173C:  BTFSC  x27.7
0173E:  BSF    FF2.7
01740:  CLRF   x24
01742:  MOVWF  x23
....................       
....................       if((buff == 0x0D)|| (j>30))
01744:  MOVF   x23,W
01746:  SUBLW  0D
01748:  BNZ   174E
0174A:  MOVF   x24,F
0174C:  BZ    1758
0174E:  MOVF   x20,F
01750:  BNZ   1758
01752:  MOVF   x1F,W
01754:  SUBLW  1E
01756:  BC    176A
....................       {
....................          SMS_Massage1[j] = '\0' ; // end string
01758:  MOVLW  9A
0175A:  ADDWF  x1F,W
0175C:  MOVWF  FE9
0175E:  MOVLW  09
01760:  ADDWFC x20,W
01762:  MOVWF  FEA
01764:  CLRF   FEF
....................          break;
01766:  BRA    178E
....................       }
01768:  BRA    177A
....................       else
....................       {
....................          SMS_Massage1[j] = buff;  
0176A:  MOVLW  9A
0176C:  ADDWF  x1F,W
0176E:  MOVWF  FE9
01770:  MOVLW  09
01772:  ADDWFC x20,W
01774:  MOVWF  FEA
01776:  MOVFF  C23,FEF
....................       }
0177A:  MOVFF  C1E,03
0177E:  MOVF   x1D,W
01780:  INCF   x1D,F
01782:  BTFSC  FD8.2
01784:  INCF   x1E,F
01786:  INCF   x1F,F
01788:  BTFSC  FD8.2
0178A:  INCF   x20,F
0178C:  BRA    1718
....................    }
....................    
....................    i++;
0178E:  INCF   x1D,F
01790:  BTFSC  FD8.2
01792:  INCF   x1E,F
....................    j=0;
01794:  CLRF   x20
01796:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01798:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0179A:  MOVLW  5D
0179C:  ADDWF  x1D,W
0179E:  MOVWF  x25
017A0:  MOVLW  00
017A2:  ADDWFC x1E,W
017A4:  MOVWF  x26
017A6:  MOVFF  FF2,C27
017AA:  BCF    FF2.7
017AC:  MOVFF  C26,FAA
017B0:  MOVFF  C25,FA9
017B4:  BCF    FA6.6
017B6:  BCF    FA6.7
017B8:  BSF    FA6.0
017BA:  MOVF   FA8,W
017BC:  BTFSC  x27.7
017BE:  BSF    FF2.7
017C0:  CLRF   x24
017C2:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
017C4:  MOVF   x23,W
017C6:  SUBLW  0D
017C8:  BNZ   17CE
017CA:  MOVF   x24,F
017CC:  BZ    17D8
017CE:  MOVF   x20,F
017D0:  BNZ   17D8
017D2:  MOVF   x1F,W
017D4:  SUBLW  1E
017D6:  BC    17EA
....................       {
....................          SMS_Massage2[j] = '\0' ; // end string
017D8:  MOVLW  BA
017DA:  ADDWF  x1F,W
017DC:  MOVWF  FE9
017DE:  MOVLW  09
017E0:  ADDWFC x20,W
017E2:  MOVWF  FEA
017E4:  CLRF   FEF
....................          break;
017E6:  BRA    180E
....................       }
017E8:  BRA    17FA
....................       else
....................       {
....................          SMS_Massage2[j] = buff;
017EA:  MOVLW  BA
017EC:  ADDWF  x1F,W
017EE:  MOVWF  FE9
017F0:  MOVLW  09
017F2:  ADDWFC x20,W
017F4:  MOVWF  FEA
017F6:  MOVFF  C23,FEF
....................          
....................       }
017FA:  MOVFF  C1E,03
017FE:  MOVF   x1D,W
01800:  INCF   x1D,F
01802:  BTFSC  FD8.2
01804:  INCF   x1E,F
01806:  INCF   x1F,F
01808:  BTFSC  FD8.2
0180A:  INCF   x20,F
0180C:  BRA    1798
....................    }
....................    
....................    i++;
0180E:  INCF   x1D,F
01810:  BTFSC  FD8.2
01812:  INCF   x1E,F
....................    j=0;
01814:  CLRF   x20
01816:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01818:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0181A:  MOVLW  5D
0181C:  ADDWF  x1D,W
0181E:  MOVWF  x25
01820:  MOVLW  00
01822:  ADDWFC x1E,W
01824:  MOVWF  x26
01826:  MOVFF  FF2,C27
0182A:  BCF    FF2.7
0182C:  MOVFF  C26,FAA
01830:  MOVFF  C25,FA9
01834:  BCF    FA6.6
01836:  BCF    FA6.7
01838:  BSF    FA6.0
0183A:  MOVF   FA8,W
0183C:  BTFSC  x27.7
0183E:  BSF    FF2.7
01840:  CLRF   x24
01842:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01844:  MOVF   x23,W
01846:  SUBLW  0D
01848:  BNZ   184E
0184A:  MOVF   x24,F
0184C:  BZ    1858
0184E:  MOVF   x20,F
01850:  BNZ   1858
01852:  MOVF   x1F,W
01854:  SUBLW  1E
01856:  BC    186A
....................       {
....................          SMS_Massage3[j] = '\0' ; // end string
01858:  MOVLW  DA
0185A:  ADDWF  x1F,W
0185C:  MOVWF  FE9
0185E:  MOVLW  09
01860:  ADDWFC x20,W
01862:  MOVWF  FEA
01864:  CLRF   FEF
....................          break;
01866:  BRA    188E
....................       }
01868:  BRA    187A
....................       else
....................       {
....................          SMS_Massage3[j] = buff;
0186A:  MOVLW  DA
0186C:  ADDWF  x1F,W
0186E:  MOVWF  FE9
01870:  MOVLW  09
01872:  ADDWFC x20,W
01874:  MOVWF  FEA
01876:  MOVFF  C23,FEF
....................          
....................       }
0187A:  MOVFF  C1E,03
0187E:  MOVF   x1D,W
01880:  INCF   x1D,F
01882:  BTFSC  FD8.2
01884:  INCF   x1E,F
01886:  INCF   x1F,F
01888:  BTFSC  FD8.2
0188A:  INCF   x20,F
0188C:  BRA    1818
....................    }
....................    
....................    i++;
0188E:  INCF   x1D,F
01890:  BTFSC  FD8.2
01892:  INCF   x1E,F
....................    j=0;
01894:  CLRF   x20
01896:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01898:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0189A:  MOVLW  5D
0189C:  ADDWF  x1D,W
0189E:  MOVWF  x25
018A0:  MOVLW  00
018A2:  ADDWFC x1E,W
018A4:  MOVWF  x26
018A6:  MOVFF  FF2,C27
018AA:  BCF    FF2.7
018AC:  MOVFF  C26,FAA
018B0:  MOVFF  C25,FA9
018B4:  BCF    FA6.6
018B6:  BCF    FA6.7
018B8:  BSF    FA6.0
018BA:  MOVF   FA8,W
018BC:  BTFSC  x27.7
018BE:  BSF    FF2.7
018C0:  CLRF   x24
018C2:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
018C4:  MOVF   x23,W
018C6:  SUBLW  0D
018C8:  BNZ   18CE
018CA:  MOVF   x24,F
018CC:  BZ    18D8
018CE:  MOVF   x20,F
018D0:  BNZ   18D8
018D2:  MOVF   x1F,W
018D4:  SUBLW  1E
018D6:  BC    18EA
....................       {
....................          SMS_Massage4[j] = '\0' ; // end string
018D8:  MOVLW  FA
018DA:  ADDWF  x1F,W
018DC:  MOVWF  FE9
018DE:  MOVLW  09
018E0:  ADDWFC x20,W
018E2:  MOVWF  FEA
018E4:  CLRF   FEF
....................          break;
018E6:  BRA    190E
....................       }
018E8:  BRA    18FA
....................       else
....................       {
....................          SMS_Massage4[j] = buff;
018EA:  MOVLW  FA
018EC:  ADDWF  x1F,W
018EE:  MOVWF  FE9
018F0:  MOVLW  09
018F2:  ADDWFC x20,W
018F4:  MOVWF  FEA
018F6:  MOVFF  C23,FEF
....................          
....................       }
018FA:  MOVFF  C1E,03
018FE:  MOVF   x1D,W
01900:  INCF   x1D,F
01902:  BTFSC  FD8.2
01904:  INCF   x1E,F
01906:  INCF   x1F,F
01908:  BTFSC  FD8.2
0190A:  INCF   x20,F
0190C:  BRA    1898
....................    }
....................    
....................    i++;
0190E:  INCF   x1D,F
01910:  BTFSC  FD8.2
01912:  INCF   x1E,F
....................    j=0;
01914:  CLRF   x20
01916:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01918:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0191A:  MOVLW  5D
0191C:  ADDWF  x1D,W
0191E:  MOVWF  x25
01920:  MOVLW  00
01922:  ADDWFC x1E,W
01924:  MOVWF  x26
01926:  MOVFF  FF2,C27
0192A:  BCF    FF2.7
0192C:  MOVFF  C26,FAA
01930:  MOVFF  C25,FA9
01934:  BCF    FA6.6
01936:  BCF    FA6.7
01938:  BSF    FA6.0
0193A:  MOVF   FA8,W
0193C:  BTFSC  x27.7
0193E:  BSF    FF2.7
01940:  CLRF   x24
01942:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01944:  MOVF   x23,W
01946:  SUBLW  0D
01948:  BNZ   194E
0194A:  MOVF   x24,F
0194C:  BZ    1958
0194E:  MOVF   x20,F
01950:  BNZ   1958
01952:  MOVF   x1F,W
01954:  SUBLW  1E
01956:  BC    196A
....................       {
....................          SMS_Massage5[j] = '\0' ; // end string
01958:  MOVLW  1A
0195A:  ADDWF  x1F,W
0195C:  MOVWF  FE9
0195E:  MOVLW  0A
01960:  ADDWFC x20,W
01962:  MOVWF  FEA
01964:  CLRF   FEF
....................          break;
01966:  BRA    198E
....................       }
01968:  BRA    197A
....................       else
....................       {
....................          SMS_Massage5[j] = buff;
0196A:  MOVLW  1A
0196C:  ADDWF  x1F,W
0196E:  MOVWF  FE9
01970:  MOVLW  0A
01972:  ADDWFC x20,W
01974:  MOVWF  FEA
01976:  MOVFF  C23,FEF
....................          
....................       }
0197A:  MOVFF  C1E,03
0197E:  MOVF   x1D,W
01980:  INCF   x1D,F
01982:  BTFSC  FD8.2
01984:  INCF   x1E,F
01986:  INCF   x1F,F
01988:  BTFSC  FD8.2
0198A:  INCF   x20,F
0198C:  BRA    1918
....................    }
....................    
....................    i++;
0198E:  INCF   x1D,F
01990:  BTFSC  FD8.2
01992:  INCF   x1E,F
....................    j=0;
01994:  CLRF   x20
01996:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01998:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0199A:  MOVLW  5D
0199C:  ADDWF  x1D,W
0199E:  MOVWF  x25
019A0:  MOVLW  00
019A2:  ADDWFC x1E,W
019A4:  MOVWF  x26
019A6:  MOVFF  FF2,C27
019AA:  BCF    FF2.7
019AC:  MOVFF  C26,FAA
019B0:  MOVFF  C25,FA9
019B4:  BCF    FA6.6
019B6:  BCF    FA6.7
019B8:  BSF    FA6.0
019BA:  MOVF   FA8,W
019BC:  BTFSC  x27.7
019BE:  BSF    FF2.7
019C0:  CLRF   x24
019C2:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
019C4:  MOVF   x23,W
019C6:  SUBLW  0D
019C8:  BNZ   19CE
019CA:  MOVF   x24,F
019CC:  BZ    19D8
019CE:  MOVF   x20,F
019D0:  BNZ   19D8
019D2:  MOVF   x1F,W
019D4:  SUBLW  1E
019D6:  BC    19EA
....................       {
....................          SMS_Massage6[j] = '\0' ; // end string
019D8:  MOVLW  3A
019DA:  ADDWF  x1F,W
019DC:  MOVWF  FE9
019DE:  MOVLW  0A
019E0:  ADDWFC x20,W
019E2:  MOVWF  FEA
019E4:  CLRF   FEF
....................          break;
019E6:  BRA    1A0E
....................       }
019E8:  BRA    19FA
....................       else
....................       {
....................          SMS_Massage6[j] = buff;
019EA:  MOVLW  3A
019EC:  ADDWF  x1F,W
019EE:  MOVWF  FE9
019F0:  MOVLW  0A
019F2:  ADDWFC x20,W
019F4:  MOVWF  FEA
019F6:  MOVFF  C23,FEF
....................          
....................       }
019FA:  MOVFF  C1E,03
019FE:  MOVF   x1D,W
01A00:  INCF   x1D,F
01A02:  BTFSC  FD8.2
01A04:  INCF   x1E,F
01A06:  INCF   x1F,F
01A08:  BTFSC  FD8.2
01A0A:  INCF   x20,F
01A0C:  BRA    1998
....................    }
....................    
....................    i++;
01A0E:  INCF   x1D,F
01A10:  BTFSC  FD8.2
01A12:  INCF   x1E,F
....................    j=0;
01A14:  CLRF   x20
01A16:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01A18:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01A1A:  MOVLW  5D
01A1C:  ADDWF  x1D,W
01A1E:  MOVWF  x25
01A20:  MOVLW  00
01A22:  ADDWFC x1E,W
01A24:  MOVWF  x26
01A26:  MOVFF  FF2,C27
01A2A:  BCF    FF2.7
01A2C:  MOVFF  C26,FAA
01A30:  MOVFF  C25,FA9
01A34:  BCF    FA6.6
01A36:  BCF    FA6.7
01A38:  BSF    FA6.0
01A3A:  MOVF   FA8,W
01A3C:  BTFSC  x27.7
01A3E:  BSF    FF2.7
01A40:  CLRF   x24
01A42:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01A44:  MOVF   x23,W
01A46:  SUBLW  0D
01A48:  BNZ   1A4E
01A4A:  MOVF   x24,F
01A4C:  BZ    1A58
01A4E:  MOVF   x20,F
01A50:  BNZ   1A58
01A52:  MOVF   x1F,W
01A54:  SUBLW  1E
01A56:  BC    1A6A
....................       {
....................          SMS_Massage7[j] = '\0' ; // end string
01A58:  MOVLW  5A
01A5A:  ADDWF  x1F,W
01A5C:  MOVWF  FE9
01A5E:  MOVLW  0A
01A60:  ADDWFC x20,W
01A62:  MOVWF  FEA
01A64:  CLRF   FEF
....................          break;
01A66:  BRA    1A8E
....................       }
01A68:  BRA    1A7A
....................       else
....................       {
....................          SMS_Massage7[j] = buff;
01A6A:  MOVLW  5A
01A6C:  ADDWF  x1F,W
01A6E:  MOVWF  FE9
01A70:  MOVLW  0A
01A72:  ADDWFC x20,W
01A74:  MOVWF  FEA
01A76:  MOVFF  C23,FEF
....................          
....................       }
01A7A:  MOVFF  C1E,03
01A7E:  MOVF   x1D,W
01A80:  INCF   x1D,F
01A82:  BTFSC  FD8.2
01A84:  INCF   x1E,F
01A86:  INCF   x1F,F
01A88:  BTFSC  FD8.2
01A8A:  INCF   x20,F
01A8C:  BRA    1A18
....................    }
....................    
....................    i++;
01A8E:  INCF   x1D,F
01A90:  BTFSC  FD8.2
01A92:  INCF   x1E,F
....................    j=0;
01A94:  CLRF   x20
01A96:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01A98:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01A9A:  MOVLW  5D
01A9C:  ADDWF  x1D,W
01A9E:  MOVWF  x25
01AA0:  MOVLW  00
01AA2:  ADDWFC x1E,W
01AA4:  MOVWF  x26
01AA6:  MOVFF  FF2,C27
01AAA:  BCF    FF2.7
01AAC:  MOVFF  C26,FAA
01AB0:  MOVFF  C25,FA9
01AB4:  BCF    FA6.6
01AB6:  BCF    FA6.7
01AB8:  BSF    FA6.0
01ABA:  MOVF   FA8,W
01ABC:  BTFSC  x27.7
01ABE:  BSF    FF2.7
01AC0:  CLRF   x24
01AC2:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01AC4:  MOVF   x23,W
01AC6:  SUBLW  0D
01AC8:  BNZ   1ACE
01ACA:  MOVF   x24,F
01ACC:  BZ    1AD8
01ACE:  MOVF   x20,F
01AD0:  BNZ   1AD8
01AD2:  MOVF   x1F,W
01AD4:  SUBLW  1E
01AD6:  BC    1AEA
....................       {
....................          SMS_Massage8[j] = '\0' ; // end string
01AD8:  MOVLW  7A
01ADA:  ADDWF  x1F,W
01ADC:  MOVWF  FE9
01ADE:  MOVLW  0A
01AE0:  ADDWFC x20,W
01AE2:  MOVWF  FEA
01AE4:  CLRF   FEF
....................          break;
01AE6:  BRA    1B0E
....................       }
01AE8:  BRA    1AFA
....................       else
....................       {
....................          SMS_Massage8[j] = buff;
01AEA:  MOVLW  7A
01AEC:  ADDWF  x1F,W
01AEE:  MOVWF  FE9
01AF0:  MOVLW  0A
01AF2:  ADDWFC x20,W
01AF4:  MOVWF  FEA
01AF6:  MOVFF  C23,FEF
....................          
....................       }
01AFA:  MOVFF  C1E,03
01AFE:  MOVF   x1D,W
01B00:  INCF   x1D,F
01B02:  BTFSC  FD8.2
01B04:  INCF   x1E,F
01B06:  INCF   x1F,F
01B08:  BTFSC  FD8.2
01B0A:  INCF   x20,F
01B0C:  BRA    1A98
....................    }
....................    
....................    i++;
01B0E:  INCF   x1D,F
01B10:  BTFSC  FD8.2
01B12:  INCF   x1E,F
....................    j=0;
01B14:  CLRF   x20
01B16:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01B18:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01B1A:  MOVLW  5D
01B1C:  ADDWF  x1D,W
01B1E:  MOVWF  x25
01B20:  MOVLW  00
01B22:  ADDWFC x1E,W
01B24:  MOVWF  x26
01B26:  MOVFF  FF2,C27
01B2A:  BCF    FF2.7
01B2C:  MOVFF  C26,FAA
01B30:  MOVFF  C25,FA9
01B34:  BCF    FA6.6
01B36:  BCF    FA6.7
01B38:  BSF    FA6.0
01B3A:  MOVF   FA8,W
01B3C:  BTFSC  x27.7
01B3E:  BSF    FF2.7
01B40:  CLRF   x24
01B42:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01B44:  MOVF   x23,W
01B46:  SUBLW  0D
01B48:  BNZ   1B4E
01B4A:  MOVF   x24,F
01B4C:  BZ    1B58
01B4E:  MOVF   x20,F
01B50:  BNZ   1B58
01B52:  MOVF   x1F,W
01B54:  SUBLW  1E
01B56:  BC    1B6A
....................       {
....................          SMS_Massage9[j] = '\0' ; // end string
01B58:  MOVLW  9A
01B5A:  ADDWF  x1F,W
01B5C:  MOVWF  FE9
01B5E:  MOVLW  0A
01B60:  ADDWFC x20,W
01B62:  MOVWF  FEA
01B64:  CLRF   FEF
....................          break;
01B66:  BRA    1B8E
....................       }
01B68:  BRA    1B7A
....................       else
....................       {
....................          SMS_Massage9[j] = buff;
01B6A:  MOVLW  9A
01B6C:  ADDWF  x1F,W
01B6E:  MOVWF  FE9
01B70:  MOVLW  0A
01B72:  ADDWFC x20,W
01B74:  MOVWF  FEA
01B76:  MOVFF  C23,FEF
....................          
....................       }
01B7A:  MOVFF  C1E,03
01B7E:  MOVF   x1D,W
01B80:  INCF   x1D,F
01B82:  BTFSC  FD8.2
01B84:  INCF   x1E,F
01B86:  INCF   x1F,F
01B88:  BTFSC  FD8.2
01B8A:  INCF   x20,F
01B8C:  BRA    1B18
....................    }
....................    
....................    i++;
01B8E:  INCF   x1D,F
01B90:  BTFSC  FD8.2
01B92:  INCF   x1E,F
....................    j=0;
01B94:  CLRF   x20
01B96:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01B98:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01B9A:  MOVLW  5D
01B9C:  ADDWF  x1D,W
01B9E:  MOVWF  x25
01BA0:  MOVLW  00
01BA2:  ADDWFC x1E,W
01BA4:  MOVWF  x26
01BA6:  MOVFF  FF2,C27
01BAA:  BCF    FF2.7
01BAC:  MOVFF  C26,FAA
01BB0:  MOVFF  C25,FA9
01BB4:  BCF    FA6.6
01BB6:  BCF    FA6.7
01BB8:  BSF    FA6.0
01BBA:  MOVF   FA8,W
01BBC:  BTFSC  x27.7
01BBE:  BSF    FF2.7
01BC0:  CLRF   x24
01BC2:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01BC4:  MOVF   x23,W
01BC6:  SUBLW  0D
01BC8:  BNZ   1BCE
01BCA:  MOVF   x24,F
01BCC:  BZ    1BD8
01BCE:  MOVF   x20,F
01BD0:  BNZ   1BD8
01BD2:  MOVF   x1F,W
01BD4:  SUBLW  1E
01BD6:  BC    1BEA
....................       {
....................          SMS_Massage10[j] = '\0' ; // end string
01BD8:  MOVLW  BA
01BDA:  ADDWF  x1F,W
01BDC:  MOVWF  FE9
01BDE:  MOVLW  0A
01BE0:  ADDWFC x20,W
01BE2:  MOVWF  FEA
01BE4:  CLRF   FEF
....................          break;
01BE6:  BRA    1C0E
....................       }
01BE8:  BRA    1BFA
....................       else
....................       {
....................          SMS_Massage10[j] = buff;
01BEA:  MOVLW  BA
01BEC:  ADDWF  x1F,W
01BEE:  MOVWF  FE9
01BF0:  MOVLW  0A
01BF2:  ADDWFC x20,W
01BF4:  MOVWF  FEA
01BF6:  MOVFF  C23,FEF
....................          
....................       }
01BFA:  MOVFF  C1E,03
01BFE:  MOVF   x1D,W
01C00:  INCF   x1D,F
01C02:  BTFSC  FD8.2
01C04:  INCF   x1E,F
01C06:  INCF   x1F,F
01C08:  BTFSC  FD8.2
01C0A:  INCF   x20,F
01C0C:  BRA    1B98
....................    }
....................       
....................    i++;
01C0E:  INCF   x1D,F
01C10:  BTFSC  FD8.2
01C12:  INCF   x1E,F
....................    j=0;
01C14:  CLRF   x20
01C16:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01C18:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01C1A:  MOVLW  5D
01C1C:  ADDWF  x1D,W
01C1E:  MOVWF  x25
01C20:  MOVLW  00
01C22:  ADDWFC x1E,W
01C24:  MOVWF  x26
01C26:  MOVFF  FF2,C27
01C2A:  BCF    FF2.7
01C2C:  MOVFF  C26,FAA
01C30:  MOVFF  C25,FA9
01C34:  BCF    FA6.6
01C36:  BCF    FA6.7
01C38:  BSF    FA6.0
01C3A:  MOVF   FA8,W
01C3C:  BTFSC  x27.7
01C3E:  BSF    FF2.7
01C40:  CLRF   x24
01C42:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01C44:  MOVF   x23,W
01C46:  SUBLW  0D
01C48:  BNZ   1C4E
01C4A:  MOVF   x24,F
01C4C:  BZ    1C58
01C4E:  MOVF   x20,F
01C50:  BNZ   1C58
01C52:  MOVF   x1F,W
01C54:  SUBLW  1E
01C56:  BC    1C6A
....................       {
....................          SMS_Massage11[j] = '\0' ; // end string
01C58:  MOVLW  DA
01C5A:  ADDWF  x1F,W
01C5C:  MOVWF  FE9
01C5E:  MOVLW  0A
01C60:  ADDWFC x20,W
01C62:  MOVWF  FEA
01C64:  CLRF   FEF
....................          break;
01C66:  BRA    1C8E
....................       }
01C68:  BRA    1C7A
....................       else
....................       {
....................          SMS_Massage11[j] = buff;
01C6A:  MOVLW  DA
01C6C:  ADDWF  x1F,W
01C6E:  MOVWF  FE9
01C70:  MOVLW  0A
01C72:  ADDWFC x20,W
01C74:  MOVWF  FEA
01C76:  MOVFF  C23,FEF
....................          
....................       }
01C7A:  MOVFF  C1E,03
01C7E:  MOVF   x1D,W
01C80:  INCF   x1D,F
01C82:  BTFSC  FD8.2
01C84:  INCF   x1E,F
01C86:  INCF   x1F,F
01C88:  BTFSC  FD8.2
01C8A:  INCF   x20,F
01C8C:  BRA    1C18
....................    }
....................       
....................    i++;
01C8E:  INCF   x1D,F
01C90:  BTFSC  FD8.2
01C92:  INCF   x1E,F
....................    j=0;
01C94:  CLRF   x20
01C96:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01C98:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01C9A:  MOVLW  5D
01C9C:  ADDWF  x1D,W
01C9E:  MOVWF  x25
01CA0:  MOVLW  00
01CA2:  ADDWFC x1E,W
01CA4:  MOVWF  x26
01CA6:  MOVFF  FF2,C27
01CAA:  BCF    FF2.7
01CAC:  MOVFF  C26,FAA
01CB0:  MOVFF  C25,FA9
01CB4:  BCF    FA6.6
01CB6:  BCF    FA6.7
01CB8:  BSF    FA6.0
01CBA:  MOVF   FA8,W
01CBC:  BTFSC  x27.7
01CBE:  BSF    FF2.7
01CC0:  CLRF   x24
01CC2:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01CC4:  MOVF   x23,W
01CC6:  SUBLW  0D
01CC8:  BNZ   1CCE
01CCA:  MOVF   x24,F
01CCC:  BZ    1CD8
01CCE:  MOVF   x20,F
01CD0:  BNZ   1CD8
01CD2:  MOVF   x1F,W
01CD4:  SUBLW  1E
01CD6:  BC    1CEA
....................       {
....................          SMS_Massage12[j] = '\0' ; // end string
01CD8:  MOVLW  FA
01CDA:  ADDWF  x1F,W
01CDC:  MOVWF  FE9
01CDE:  MOVLW  0A
01CE0:  ADDWFC x20,W
01CE2:  MOVWF  FEA
01CE4:  CLRF   FEF
....................          break;
01CE6:  BRA    1D0E
....................       }
01CE8:  BRA    1CFA
....................       else
....................       {
....................          SMS_Massage12[j] = buff;
01CEA:  MOVLW  FA
01CEC:  ADDWF  x1F,W
01CEE:  MOVWF  FE9
01CF0:  MOVLW  0A
01CF2:  ADDWFC x20,W
01CF4:  MOVWF  FEA
01CF6:  MOVFF  C23,FEF
....................          
....................       }
01CFA:  MOVFF  C1E,03
01CFE:  MOVF   x1D,W
01D00:  INCF   x1D,F
01D02:  BTFSC  FD8.2
01D04:  INCF   x1E,F
01D06:  INCF   x1F,F
01D08:  BTFSC  FD8.2
01D0A:  INCF   x20,F
01D0C:  BRA    1C98
....................    }
....................       
....................    i++;
01D0E:  INCF   x1D,F
01D10:  BTFSC  FD8.2
01D12:  INCF   x1E,F
....................    j=0;
01D14:  CLRF   x20
01D16:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01D18:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01D1A:  MOVLW  5D
01D1C:  ADDWF  x1D,W
01D1E:  MOVWF  x25
01D20:  MOVLW  00
01D22:  ADDWFC x1E,W
01D24:  MOVWF  x26
01D26:  MOVFF  FF2,C27
01D2A:  BCF    FF2.7
01D2C:  MOVFF  C26,FAA
01D30:  MOVFF  C25,FA9
01D34:  BCF    FA6.6
01D36:  BCF    FA6.7
01D38:  BSF    FA6.0
01D3A:  MOVF   FA8,W
01D3C:  BTFSC  x27.7
01D3E:  BSF    FF2.7
01D40:  CLRF   x24
01D42:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01D44:  MOVF   x23,W
01D46:  SUBLW  0D
01D48:  BNZ   1D4E
01D4A:  MOVF   x24,F
01D4C:  BZ    1D58
01D4E:  MOVF   x20,F
01D50:  BNZ   1D58
01D52:  MOVF   x1F,W
01D54:  SUBLW  1E
01D56:  BC    1D6A
....................       {
....................          SMS_Massage13[j] = '\0' ; // end string
01D58:  MOVLW  1A
01D5A:  ADDWF  x1F,W
01D5C:  MOVWF  FE9
01D5E:  MOVLW  0B
01D60:  ADDWFC x20,W
01D62:  MOVWF  FEA
01D64:  CLRF   FEF
....................          break;
01D66:  BRA    1D8E
....................       }
01D68:  BRA    1D7A
....................       else
....................       {
....................          SMS_Massage13[j] = buff;
01D6A:  MOVLW  1A
01D6C:  ADDWF  x1F,W
01D6E:  MOVWF  FE9
01D70:  MOVLW  0B
01D72:  ADDWFC x20,W
01D74:  MOVWF  FEA
01D76:  MOVFF  C23,FEF
....................          
....................       }
01D7A:  MOVFF  C1E,03
01D7E:  MOVF   x1D,W
01D80:  INCF   x1D,F
01D82:  BTFSC  FD8.2
01D84:  INCF   x1E,F
01D86:  INCF   x1F,F
01D88:  BTFSC  FD8.2
01D8A:  INCF   x20,F
01D8C:  BRA    1D18
....................    }
....................       
....................    i++;
01D8E:  INCF   x1D,F
01D90:  BTFSC  FD8.2
01D92:  INCF   x1E,F
....................    j=0;
01D94:  CLRF   x20
01D96:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01D98:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01D9A:  MOVLW  5D
01D9C:  ADDWF  x1D,W
01D9E:  MOVWF  x25
01DA0:  MOVLW  00
01DA2:  ADDWFC x1E,W
01DA4:  MOVWF  x26
01DA6:  MOVFF  FF2,C27
01DAA:  BCF    FF2.7
01DAC:  MOVFF  C26,FAA
01DB0:  MOVFF  C25,FA9
01DB4:  BCF    FA6.6
01DB6:  BCF    FA6.7
01DB8:  BSF    FA6.0
01DBA:  MOVF   FA8,W
01DBC:  BTFSC  x27.7
01DBE:  BSF    FF2.7
01DC0:  CLRF   x24
01DC2:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01DC4:  MOVF   x23,W
01DC6:  SUBLW  0D
01DC8:  BNZ   1DCE
01DCA:  MOVF   x24,F
01DCC:  BZ    1DD8
01DCE:  MOVF   x20,F
01DD0:  BNZ   1DD8
01DD2:  MOVF   x1F,W
01DD4:  SUBLW  1E
01DD6:  BC    1DEA
....................       {
....................          SMS_Massage14[j] = '\0' ; // end string
01DD8:  MOVLW  3A
01DDA:  ADDWF  x1F,W
01DDC:  MOVWF  FE9
01DDE:  MOVLW  0B
01DE0:  ADDWFC x20,W
01DE2:  MOVWF  FEA
01DE4:  CLRF   FEF
....................          break;
01DE6:  BRA    1E0E
....................       }
01DE8:  BRA    1DFA
....................       else
....................       {
....................          SMS_Massage14[j] = buff;
01DEA:  MOVLW  3A
01DEC:  ADDWF  x1F,W
01DEE:  MOVWF  FE9
01DF0:  MOVLW  0B
01DF2:  ADDWFC x20,W
01DF4:  MOVWF  FEA
01DF6:  MOVFF  C23,FEF
....................          
....................       }
01DFA:  MOVFF  C1E,03
01DFE:  MOVF   x1D,W
01E00:  INCF   x1D,F
01E02:  BTFSC  FD8.2
01E04:  INCF   x1E,F
01E06:  INCF   x1F,F
01E08:  BTFSC  FD8.2
01E0A:  INCF   x20,F
01E0C:  BRA    1D98
....................    }
....................       
....................    i++;
01E0E:  INCF   x1D,F
01E10:  BTFSC  FD8.2
01E12:  INCF   x1E,F
....................    j=0;
01E14:  CLRF   x20
01E16:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01E18:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01E1A:  MOVLW  5D
01E1C:  ADDWF  x1D,W
01E1E:  MOVWF  x25
01E20:  MOVLW  00
01E22:  ADDWFC x1E,W
01E24:  MOVWF  x26
01E26:  MOVFF  FF2,C27
01E2A:  BCF    FF2.7
01E2C:  MOVFF  C26,FAA
01E30:  MOVFF  C25,FA9
01E34:  BCF    FA6.6
01E36:  BCF    FA6.7
01E38:  BSF    FA6.0
01E3A:  MOVF   FA8,W
01E3C:  BTFSC  x27.7
01E3E:  BSF    FF2.7
01E40:  CLRF   x24
01E42:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01E44:  MOVF   x23,W
01E46:  SUBLW  0D
01E48:  BNZ   1E4E
01E4A:  MOVF   x24,F
01E4C:  BZ    1E58
01E4E:  MOVF   x20,F
01E50:  BNZ   1E58
01E52:  MOVF   x1F,W
01E54:  SUBLW  1E
01E56:  BC    1E6A
....................       {
....................          SMS_Massage15[j] = '\0' ; // end string
01E58:  MOVLW  5A
01E5A:  ADDWF  x1F,W
01E5C:  MOVWF  FE9
01E5E:  MOVLW  0B
01E60:  ADDWFC x20,W
01E62:  MOVWF  FEA
01E64:  CLRF   FEF
....................          break;
01E66:  BRA    1E8E
....................       }
01E68:  BRA    1E7A
....................       else
....................       {
....................          SMS_Massage15[j] = buff;
01E6A:  MOVLW  5A
01E6C:  ADDWF  x1F,W
01E6E:  MOVWF  FE9
01E70:  MOVLW  0B
01E72:  ADDWFC x20,W
01E74:  MOVWF  FEA
01E76:  MOVFF  C23,FEF
....................          
....................       }
01E7A:  MOVFF  C1E,03
01E7E:  MOVF   x1D,W
01E80:  INCF   x1D,F
01E82:  BTFSC  FD8.2
01E84:  INCF   x1E,F
01E86:  INCF   x1F,F
01E88:  BTFSC  FD8.2
01E8A:  INCF   x20,F
01E8C:  BRA    1E18
....................    }
....................       
....................    i++;
01E8E:  INCF   x1D,F
01E90:  BTFSC  FD8.2
01E92:  INCF   x1E,F
....................    j=0;
01E94:  CLRF   x20
01E96:  CLRF   x1F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01E98:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01E9A:  MOVLW  5D
01E9C:  ADDWF  x1D,W
01E9E:  MOVWF  x25
01EA0:  MOVLW  00
01EA2:  ADDWFC x1E,W
01EA4:  MOVWF  x26
01EA6:  MOVFF  FF2,C27
01EAA:  BCF    FF2.7
01EAC:  MOVFF  C26,FAA
01EB0:  MOVFF  C25,FA9
01EB4:  BCF    FA6.6
01EB6:  BCF    FA6.7
01EB8:  BSF    FA6.0
01EBA:  MOVF   FA8,W
01EBC:  BTFSC  x27.7
01EBE:  BSF    FF2.7
01EC0:  CLRF   x24
01EC2:  MOVWF  x23
....................       
....................       if((buff == 0x0D) || (j>30))
01EC4:  MOVF   x23,W
01EC6:  SUBLW  0D
01EC8:  BNZ   1ECE
01ECA:  MOVF   x24,F
01ECC:  BZ    1ED8
01ECE:  MOVF   x20,F
01ED0:  BNZ   1ED8
01ED2:  MOVF   x1F,W
01ED4:  SUBLW  1E
01ED6:  BC    1EEA
....................       {
....................          SMS_Massage16[j] = '\0' ; // end string
01ED8:  MOVLW  7A
01EDA:  ADDWF  x1F,W
01EDC:  MOVWF  FE9
01EDE:  MOVLW  0B
01EE0:  ADDWFC x20,W
01EE2:  MOVWF  FEA
01EE4:  CLRF   FEF
....................          break;
01EE6:  BRA    1F0E
....................       }
01EE8:  BRA    1EFA
....................       else
....................       {
....................          SMS_Massage16[j] = buff;
01EEA:  MOVLW  7A
01EEC:  ADDWF  x1F,W
01EEE:  MOVWF  FE9
01EF0:  MOVLW  0B
01EF2:  ADDWFC x20,W
01EF4:  MOVWF  FEA
01EF6:  MOVFF  C23,FEF
....................          
....................       }
01EFA:  MOVFF  C1E,03
01EFE:  MOVF   x1D,W
01F00:  INCF   x1D,F
01F02:  BTFSC  FD8.2
01F04:  INCF   x1E,F
01F06:  INCF   x1F,F
01F08:  BTFSC  FD8.2
01F0A:  INCF   x20,F
01F0C:  BRA    1E98
....................    }
01F0E:  MOVLB  0
01F10:  GOTO   A7EE (RETURN)
....................    
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
.................... 
....................    //Data = getc();
....................    //putc(Data);
....................    SBUF = getc();
*
00586:  BTFSS  F9E.5
00588:  BRA    0586
0058A:  MOVFF  FAE,2E
....................    checkCommand();
0058E:  BRA    02DA
.................... }
.................... 
00590:  BCF    F9E.5
00592:  GOTO   006C
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
00596:  INCF   19,F
.................... 
....................    if(T_timeout != 0)
00598:  MOVLB  9
0059A:  MOVF   x85,F
0059C:  BZ    05AC
....................    {
....................       T_timeout--;
0059E:  DECF   x85,F
....................       if(T_timeout == 0)
005A0:  MOVF   x85,F
005A2:  BNZ   05AC
....................       {
....................          //sequence = stop_sq;         //timeout
....................          sequence = end_sq;         //timeout   
005A4:  MOVFF  6F,78
....................          output_bit(P485ctrl,0);
005A8:  BCF    F8A.3
005AA:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
005AC:  MOVF   1C,F
005AE:  BZ    05C8
....................    {
....................       TimeBase1s--;
005B0:  DECF   1C,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
005B2:  MOVF   1C,F
005B4:  BNZ   05C8
....................       {
....................          if(AutoAckDelayTime != 0x00)
005B6:  MOVF   1D,F
005B8:  BZ    05C2
....................          {
....................             AutoAckDelayTime--;
005BA:  DECF   1D,F
....................             if(AutoAckDelayTime == 0x00)
005BC:  MOVF   1D,F
005BE:  BNZ   05C2
....................             {
....................                AutoAckFlag = 1 ;
005C0:  BSF    1A.2
....................             }
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
005C2:  BSF    30.4
....................          TimeBase1s = 100;
005C4:  MOVLW  64
005C6:  MOVWF  1C
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 50)    //500mS
005C8:  MOVF   19,W
005CA:  SUBLW  32
005CC:  BNZ   05F6
....................    {
....................       StatusTime = 0;
005CE:  CLRF   19
....................       if(HearthbeatInd == 0)
005D0:  BTFSC  1A.0
005D2:  BRA    05DC
....................       {
....................          HearthbeatInd = 1;
005D4:  BSF    1A.0
....................          output_bit(Pled,1);
005D6:  BSF    F8A.5
005D8:  BCF    F93.5
....................       }
005DA:  BRA    05E2
....................       else
....................       {
....................          HearthbeatInd = 0;
005DC:  BCF    1A.0
....................          output_bit(Pled,0); 
005DE:  BCF    F8A.5
005E0:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................     if(Test == 1)            //Test function
005E2:  BTFSS  1A.6
005E4:  BRA    05F4
....................    {
....................        if(T_test > 0x00) T_test --;
005E6:  MOVF   2F,F
005E8:  BZ    05EC
005EA:  DECF   2F,F
....................        if(T_test == 0x00) Test_fault = 1;
005EC:  MOVF   2F,F
005EE:  BNZ   05F2
005F0:  BSF    1A.5
....................     }
005F2:  BRA    05F6
....................     else
....................     {
....................        //Test = 0;
....................        T_test = 0x00;
005F4:  CLRF   2F
....................     }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
005F6:  MOVF   1B,F
005F8:  BZ    0620
....................    {
....................       FlashingRateTime--;
005FA:  DECF   1B,F
....................       if(FlashingRateTime == 0)
005FC:  MOVF   1B,F
005FE:  BNZ   0614
....................       {
....................          outmcp23 = 0xff;
00600:  SETF   x88
....................          
....................          if(SyncStatus == 0)
00602:  BTFSC  30.1
00604:  BRA    0610
....................          {
....................             if(FlashingFlag == 1)
00606:  BTFSS  1A.1
00608:  BRA    060E
....................             {
....................                FlashingFlag = 0;
0060A:  BCF    1A.1
....................                //output_bit(PSyncS,0);
....................             }
0060C:  BRA    0610
....................             else
....................             {
.................... 
....................                FlashingFlag = 1;
0060E:  BSF    1A.1
....................                //output_bit(PSyncS,1);
....................             }
....................          }
....................          //FlashingFlag = ~FlashingFlag;
....................          FlashingRateTime = FlashingRate;      //reload value
00610:  MOVFF  6C,1B
....................       }
.................... 
....................       if(Synctimer != 0x00)
00614:  MOVF   31,F
00616:  BZ    0620
....................       {
....................          Synctimer--;
00618:  DECF   31,F
....................          if(Synctimer == 0x00)
0061A:  MOVF   31,F
0061C:  BNZ   0620
....................          {
....................             SyncStatus = 0;
0061E:  BCF    30.1
....................          }
....................       }
.................... 
....................    }
....................    
00620:  BCF    F9E.1
00622:  MOVLB  0
00624:  GOTO   006C
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
06C70:  MOVLB  B
06C72:  BTFSS  xA6.0
06C74:  BRA    6D8C
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
06C76:  MOVLW  00
06C78:  BTFSC  x9A.0
06C7A:  MOVLW  01
06C7C:  MOVLB  C
06C7E:  MOVWF  x24
06C80:  MOVLW  00
06C82:  MOVLB  B
06C84:  BTFSC  x9E.0
06C86:  MOVLW  01
06C88:  MOVLB  C
06C8A:  XORWF  x24,W
06C8C:  SUBLW  01
06C8E:  BNZ   6C96
06C90:  MOVLB  B
06C92:  BTFSC  xA0.0
06C94:  BRA    6C9C
06C96:  MOVLB  B
06C98:  BTFSS  xAA.0
06C9A:  BRA    6D84
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
06C9C:  BTFSC  xA8.0
06C9E:  BRA    6D82
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
06CA0:  BTFSC  xAA.0
06CA2:  BRA    6CBC
06CA4:  MOVLB  0
06CA6:  MOVF   x6A,W
06CA8:  SUBLW  0F
06CAA:  BTFSC  FD8.2
06CAC:  BRA    6CB2
06CAE:  MOVLB  B
06CB0:  BRA    6CBC
....................             {
....................                TimeBase1s = 100 ;            //reload again
06CB2:  MOVLW  64
06CB4:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
06CB6:  MOVFF  6B,1D
06CBA:  MOVLB  B
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
06CBC:  BSF    xAA.0
....................             if(FlashingFlag == 0)
06CBE:  BTFSC  1A.1
06CC0:  BRA    6CC6
....................             {
....................                Output.B1 = 0;           //Flash output1
06CC2:  BCF    x9C.0
....................             }
06CC4:  BRA    6CC8
....................             else
....................             {
....................                Output.B1 = 1;
06CC6:  BSF    x9C.0
....................             }
.................... 
....................             if (~AutoTestFlag)
06CC8:  BTFSC  1A.4
06CCA:  BRA    6CE8
....................             {
....................                if(OutputBoth.B1 == 0)                  //Both output
06CCC:  BTFSC  xA4.0
06CCE:  BRA    6CDA
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06CD0:  BSF    F89.4
06CD2:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06CD4:  BSF    F89.3
06CD6:  BCF    F92.3
....................                }
06CD8:  BRA    6CE8
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
06CDA:  BTFSS  xA2.0
06CDC:  BRA    6CE4
06CDE:  BSF    F89.4
06CE0:  BCF    F92.4
06CE2:  BRA    6CE8
....................                   else output_bit(Pbell,1);                          //Bell
06CE4:  BSF    F89.3
06CE6:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending 
....................             if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
06CE8:  BTFSC  xB6.0
06CEA:  BRA    6D82
06CEC:  BTFSC  30.3
06CEE:  BRA    6D82
06CF0:  BTFSC  xA8.0
06CF2:  BRA    6D82
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
06CF4:  MOVLW  28
06CF6:  MOVWF  FF6
06CF8:  MOVLW  06
06CFA:  MOVWF  FF7
06CFC:  MOVLB  0
06CFE:  CALL   2ED0
....................                putc('\n',CH2);
06D02:  MOVLW  0A
06D04:  MOVLB  C
06D06:  MOVWF  x25
06D08:  MOVLB  0
06D0A:  CALL   2E8A
....................                delay_ms(10);
06D0E:  MOVLW  0A
06D10:  MOVLB  C
06D12:  MOVWF  x24
06D14:  MOVLB  0
06D16:  CALL   0952
....................             
....................                SendSMS.B1 =1;
06D1A:  MOVLB  B
06D1C:  BSF    xB6.0
....................                fprintf(CH2,"AT+CMGS=\"");
06D1E:  MOVLW  32
06D20:  MOVWF  FF6
06D22:  MOVLW  06
06D24:  MOVWF  FF7
06D26:  MOVLB  0
06D28:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
06D2C:  MOVLW  09
06D2E:  MOVWF  FEA
06D30:  MOVLW  8B
06D32:  MOVWF  FE9
06D34:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
06D38:  MOVLW  22
06D3A:  MOVLB  C
06D3C:  MOVWF  x25
06D3E:  MOVLB  0
06D40:  CALL   2E8A
....................                putc('\n',CH2);
06D44:  MOVLW  0A
06D46:  MOVLB  C
06D48:  MOVWF  x25
06D4A:  MOVLB  0
06D4C:  CALL   2E8A
....................                delay_ms(50);
06D50:  MOVLW  32
06D52:  MOVLB  C
06D54:  MOVWF  x24
06D56:  MOVLB  0
06D58:  CALL   0952
....................               
....................               fprintf(CH2,SMS_Massage1);
06D5C:  MOVLW  09
06D5E:  MOVWF  FEA
06D60:  MOVLW  9A
06D62:  MOVWF  FE9
06D64:  CALL   6242
....................               putc('\n',CH2);
06D68:  MOVLW  0A
06D6A:  MOVLB  C
06D6C:  MOVWF  x25
06D6E:  MOVLB  0
06D70:  CALL   2E8A
....................               putc(26,CH2);
06D74:  MOVLW  1A
06D76:  MOVLB  C
06D78:  MOVWF  x25
06D7A:  MOVLB  0
06D7C:  CALL   2E8A
06D80:  MOVLB  B
....................             }
....................         }
....................       }
06D82:  BRA    6D8A
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
06D84:  BTFSS  xA0.0
06D86:  BRA    6D8A
06D88:  BCF    xA8.0
....................    }
06D8A:  BRA    6E50
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
06D8C:  MOVLW  00
06D8E:  BTFSC  x9A.0
06D90:  MOVLW  01
06D92:  MOVLB  C
06D94:  MOVWF  x24
06D96:  MOVLW  00
06D98:  MOVLB  B
06D9A:  BTFSC  x9E.0
06D9C:  MOVLW  01
06D9E:  MOVLB  C
06DA0:  XORWF  x24,W
06DA2:  SUBLW  01
06DA4:  BNZ   6E48
....................       {
....................          Output.B1 = 0;
06DA6:  MOVLB  B
06DA8:  BCF    x9C.0
....................          // SMS Sending 
....................          if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
06DAA:  BTFSC  xB6.0
06DAC:  BRA    6E44
06DAE:  BTFSC  30.3
06DB0:  BRA    6E44
06DB2:  BTFSC  xA8.0
06DB4:  BRA    6E44
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
06DB6:  MOVLW  3C
06DB8:  MOVWF  FF6
06DBA:  MOVLW  06
06DBC:  MOVWF  FF7
06DBE:  MOVLB  0
06DC0:  CALL   2ED0
....................             putc('\n',CH2);
06DC4:  MOVLW  0A
06DC6:  MOVLB  C
06DC8:  MOVWF  x25
06DCA:  MOVLB  0
06DCC:  CALL   2E8A
....................             delay_ms(10);
06DD0:  MOVLW  0A
06DD2:  MOVLB  C
06DD4:  MOVWF  x24
06DD6:  MOVLB  0
06DD8:  CALL   0952
....................          
....................             SendSMS.B1 =1;
06DDC:  MOVLB  B
06DDE:  BSF    xB6.0
....................             fprintf(CH2,"AT+CMGS=\"");
06DE0:  MOVLW  46
06DE2:  MOVWF  FF6
06DE4:  MOVLW  06
06DE6:  MOVWF  FF7
06DE8:  MOVLB  0
06DEA:  CALL   2ED0
....................             fprintf(CH2,sms_phonenumber);
06DEE:  MOVLW  09
06DF0:  MOVWF  FEA
06DF2:  MOVLW  8B
06DF4:  MOVWF  FE9
06DF6:  CALL   6242
....................             
....................             fprintf(CH2,"\"");
06DFA:  MOVLW  22
06DFC:  MOVLB  C
06DFE:  MOVWF  x25
06E00:  MOVLB  0
06E02:  CALL   2E8A
....................             putc('\n',CH2);
06E06:  MOVLW  0A
06E08:  MOVLB  C
06E0A:  MOVWF  x25
06E0C:  MOVLB  0
06E0E:  CALL   2E8A
....................             delay_ms(50);
06E12:  MOVLW  32
06E14:  MOVLB  C
06E16:  MOVWF  x24
06E18:  MOVLB  0
06E1A:  CALL   0952
....................            
....................            fprintf(CH2,SMS_Massage1);
06E1E:  MOVLW  09
06E20:  MOVWF  FEA
06E22:  MOVLW  9A
06E24:  MOVWF  FE9
06E26:  CALL   6242
....................            putc('\n',CH2);
06E2A:  MOVLW  0A
06E2C:  MOVLB  C
06E2E:  MOVWF  x25
06E30:  MOVLB  0
06E32:  CALL   2E8A
....................            putc(26,CH2);
06E36:  MOVLW  1A
06E38:  MOVLB  C
06E3A:  MOVWF  x25
06E3C:  MOVLB  0
06E3E:  CALL   2E8A
06E42:  MOVLB  B
....................          }
....................       }
06E44:  BRA    6E50
06E46:  MOVLB  C
....................       else
....................       {
....................          Output.B1 = 1;
06E48:  MOVLB  B
06E4A:  BSF    x9C.0
.................... 
....................          SendSMS.B1 =0;
06E4C:  BCF    xB6.0
....................          functointest_f =0;
06E4E:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
06E50:  BTFSS  xA6.1
06E52:  BRA    6F6A
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
06E54:  MOVLW  00
06E56:  BTFSC  x9A.1
06E58:  MOVLW  01
06E5A:  MOVLB  C
06E5C:  MOVWF  x24
06E5E:  MOVLW  00
06E60:  MOVLB  B
06E62:  BTFSC  x9E.1
06E64:  MOVLW  01
06E66:  MOVLB  C
06E68:  XORWF  x24,W
06E6A:  SUBLW  01
06E6C:  BNZ   6E74
06E6E:  MOVLB  B
06E70:  BTFSC  xA0.1
06E72:  BRA    6E7A
06E74:  MOVLB  B
06E76:  BTFSS  xAA.1
06E78:  BRA    6F62
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
06E7A:  BTFSC  xA8.1
06E7C:  BRA    6F60
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
06E7E:  BTFSC  xAA.1
06E80:  BRA    6E9A
06E82:  MOVLB  0
06E84:  MOVF   x6A,W
06E86:  SUBLW  0F
06E88:  BTFSC  FD8.2
06E8A:  BRA    6E90
06E8C:  MOVLB  B
06E8E:  BRA    6E9A
....................             {
....................                TimeBase1s = 100 ;            //reload again
06E90:  MOVLW  64
06E92:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
06E94:  MOVFF  6B,1D
06E98:  MOVLB  B
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
06E9A:  BSF    xAA.1
....................             if(FlashingFlag == 0)
06E9C:  BTFSC  1A.1
06E9E:  BRA    6EA4
....................             {
....................                Output.B2 = 0;           //Flash output1
06EA0:  BCF    x9C.1
....................             }
06EA2:  BRA    6EA6
....................             else
....................             {
....................                Output.B2 = 1;
06EA4:  BSF    x9C.1
....................             }
.................... 
....................             if (~AutoTestFlag)
06EA6:  BTFSC  1A.4
06EA8:  BRA    6EC6
....................             {
....................                if(OutputBoth.B2 == 0)                  //Both output
06EAA:  BTFSC  xA4.1
06EAC:  BRA    6EB8
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06EAE:  BSF    F89.4
06EB0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06EB2:  BSF    F89.3
06EB4:  BCF    F92.3
....................                }
06EB6:  BRA    6EC6
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
06EB8:  BTFSS  xA2.1
06EBA:  BRA    6EC2
06EBC:  BSF    F89.4
06EBE:  BCF    F92.4
06EC0:  BRA    6EC6
....................                   else output_bit(Pbell,1);                          //Bell
06EC2:  BSF    F89.3
06EC4:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
06EC6:  BTFSC  xB6.1
06EC8:  BRA    6F60
06ECA:  BTFSC  30.3
06ECC:  BRA    6F60
06ECE:  BTFSC  xA8.1
06ED0:  BRA    6F60
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
06ED2:  MOVLW  50
06ED4:  MOVWF  FF6
06ED6:  MOVLW  06
06ED8:  MOVWF  FF7
06EDA:  MOVLB  0
06EDC:  CALL   2ED0
....................                putc('\n',CH2);
06EE0:  MOVLW  0A
06EE2:  MOVLB  C
06EE4:  MOVWF  x25
06EE6:  MOVLB  0
06EE8:  CALL   2E8A
....................                delay_ms(10);
06EEC:  MOVLW  0A
06EEE:  MOVLB  C
06EF0:  MOVWF  x24
06EF2:  MOVLB  0
06EF4:  CALL   0952
....................                 
....................                SendSMS.B2 =1;
06EF8:  MOVLB  B
06EFA:  BSF    xB6.1
....................                fprintf(CH2,"AT+CMGS=\"");
06EFC:  MOVLW  5A
06EFE:  MOVWF  FF6
06F00:  MOVLW  06
06F02:  MOVWF  FF7
06F04:  MOVLB  0
06F06:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
06F0A:  MOVLW  09
06F0C:  MOVWF  FEA
06F0E:  MOVLW  8B
06F10:  MOVWF  FE9
06F12:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
06F16:  MOVLW  22
06F18:  MOVLB  C
06F1A:  MOVWF  x25
06F1C:  MOVLB  0
06F1E:  CALL   2E8A
....................                putc('\n',CH2);
06F22:  MOVLW  0A
06F24:  MOVLB  C
06F26:  MOVWF  x25
06F28:  MOVLB  0
06F2A:  CALL   2E8A
....................                delay_ms(50);
06F2E:  MOVLW  32
06F30:  MOVLB  C
06F32:  MOVWF  x24
06F34:  MOVLB  0
06F36:  CALL   0952
....................                
....................               fprintf(CH2,SMS_Massage2);
06F3A:  MOVLW  09
06F3C:  MOVWF  FEA
06F3E:  MOVLW  BA
06F40:  MOVWF  FE9
06F42:  CALL   6242
....................               putc('\n',CH2);
06F46:  MOVLW  0A
06F48:  MOVLB  C
06F4A:  MOVWF  x25
06F4C:  MOVLB  0
06F4E:  CALL   2E8A
....................              putc(26,CH2);
06F52:  MOVLW  1A
06F54:  MOVLB  C
06F56:  MOVWF  x25
06F58:  MOVLB  0
06F5A:  CALL   2E8A
06F5E:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
06F60:  BRA    6F68
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
06F62:  BTFSS  xA0.1
06F64:  BRA    6F68
06F66:  BCF    xA8.1
....................    }
06F68:  BRA    702E
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
06F6A:  MOVLW  00
06F6C:  BTFSC  x9A.1
06F6E:  MOVLW  01
06F70:  MOVLB  C
06F72:  MOVWF  x24
06F74:  MOVLW  00
06F76:  MOVLB  B
06F78:  BTFSC  x9E.1
06F7A:  MOVLW  01
06F7C:  MOVLB  C
06F7E:  XORWF  x24,W
06F80:  SUBLW  01
06F82:  BNZ   7026
....................       {
....................          Output.B2 = 0;
06F84:  MOVLB  B
06F86:  BCF    x9C.1
....................          // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
06F88:  BTFSC  xB6.1
06F8A:  BRA    7022
06F8C:  BTFSC  30.3
06F8E:  BRA    7022
06F90:  BTFSC  xA8.1
06F92:  BRA    7022
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
06F94:  MOVLW  64
06F96:  MOVWF  FF6
06F98:  MOVLW  06
06F9A:  MOVWF  FF7
06F9C:  MOVLB  0
06F9E:  CALL   2ED0
....................                putc('\n',CH2);
06FA2:  MOVLW  0A
06FA4:  MOVLB  C
06FA6:  MOVWF  x25
06FA8:  MOVLB  0
06FAA:  CALL   2E8A
....................                delay_ms(10);
06FAE:  MOVLW  0A
06FB0:  MOVLB  C
06FB2:  MOVWF  x24
06FB4:  MOVLB  0
06FB6:  CALL   0952
....................                 
....................                SendSMS.B2 =1;
06FBA:  MOVLB  B
06FBC:  BSF    xB6.1
....................                fprintf(CH2,"AT+CMGS=\"");
06FBE:  MOVLW  6E
06FC0:  MOVWF  FF6
06FC2:  MOVLW  06
06FC4:  MOVWF  FF7
06FC6:  MOVLB  0
06FC8:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
06FCC:  MOVLW  09
06FCE:  MOVWF  FEA
06FD0:  MOVLW  8B
06FD2:  MOVWF  FE9
06FD4:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
06FD8:  MOVLW  22
06FDA:  MOVLB  C
06FDC:  MOVWF  x25
06FDE:  MOVLB  0
06FE0:  CALL   2E8A
....................                putc('\n',CH2);
06FE4:  MOVLW  0A
06FE6:  MOVLB  C
06FE8:  MOVWF  x25
06FEA:  MOVLB  0
06FEC:  CALL   2E8A
....................                delay_ms(50);
06FF0:  MOVLW  32
06FF2:  MOVLB  C
06FF4:  MOVWF  x24
06FF6:  MOVLB  0
06FF8:  CALL   0952
....................                
....................               fprintf(CH2,SMS_Massage2);
06FFC:  MOVLW  09
06FFE:  MOVWF  FEA
07000:  MOVLW  BA
07002:  MOVWF  FE9
07004:  CALL   6242
....................               putc('\n',CH2);
07008:  MOVLW  0A
0700A:  MOVLB  C
0700C:  MOVWF  x25
0700E:  MOVLB  0
07010:  CALL   2E8A
....................              putc(26,CH2);
07014:  MOVLW  1A
07016:  MOVLB  C
07018:  MOVWF  x25
0701A:  MOVLB  0
0701C:  CALL   2E8A
07020:  MOVLB  B
....................             } 
....................       }
07022:  BRA    702E
07024:  MOVLB  C
....................       else
....................       {
....................          Output.B2 = 1;
07026:  MOVLB  B
07028:  BSF    x9C.1
....................          SendSMS.B2 =0;
0702A:  BCF    xB6.1
....................          functointest_f =0;
0702C:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
0702E:  BTFSS  xA6.2
07030:  BRA    7148
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
07032:  MOVLW  00
07034:  BTFSC  x9A.2
07036:  MOVLW  01
07038:  MOVLB  C
0703A:  MOVWF  x24
0703C:  MOVLW  00
0703E:  MOVLB  B
07040:  BTFSC  x9E.2
07042:  MOVLW  01
07044:  MOVLB  C
07046:  XORWF  x24,W
07048:  SUBLW  01
0704A:  BNZ   7052
0704C:  MOVLB  B
0704E:  BTFSC  xA0.2
07050:  BRA    7058
07052:  MOVLB  B
07054:  BTFSS  xAA.2
07056:  BRA    7140
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
07058:  BTFSC  xA8.2
0705A:  BRA    713E
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0705C:  BTFSC  xAA.2
0705E:  BRA    7078
07060:  MOVLB  0
07062:  MOVF   x6A,W
07064:  SUBLW  0F
07066:  BTFSC  FD8.2
07068:  BRA    706E
0706A:  MOVLB  B
0706C:  BRA    7078
....................             {
....................                TimeBase1s = 100 ;            //reload again
0706E:  MOVLW  64
07070:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07072:  MOVFF  6B,1D
07076:  MOVLB  B
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
07078:  BSF    xAA.2
....................             if(FlashingFlag == 0)
0707A:  BTFSC  1A.1
0707C:  BRA    7082
....................             {
....................                Output.B3 = 0;           //Flash output1
0707E:  BCF    x9C.2
....................             }
07080:  BRA    7084
....................             else
....................             {
....................                Output.B3 = 1;
07082:  BSF    x9C.2
....................             }
.................... 
....................             if (~AutoTestFlag)
07084:  BTFSC  1A.4
07086:  BRA    70A4
....................             {
....................                if(OutputBoth.B3 == 0)                  //Both output
07088:  BTFSC  xA4.2
0708A:  BRA    7096
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0708C:  BSF    F89.4
0708E:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07090:  BSF    F89.3
07092:  BCF    F92.3
....................                }
07094:  BRA    70A4
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
07096:  BTFSS  xA2.2
07098:  BRA    70A0
0709A:  BSF    F89.4
0709C:  BCF    F92.4
0709E:  BRA    70A4
....................                   else output_bit(Pbell,1);                          //Bell
070A0:  BSF    F89.3
070A2:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
070A4:  BTFSC  xB6.2
070A6:  BRA    713E
070A8:  BTFSC  30.3
070AA:  BRA    713E
070AC:  BTFSC  xA8.2
070AE:  BRA    713E
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
070B0:  MOVLW  78
070B2:  MOVWF  FF6
070B4:  MOVLW  06
070B6:  MOVWF  FF7
070B8:  MOVLB  0
070BA:  CALL   2ED0
....................                putc('\n',CH2);
070BE:  MOVLW  0A
070C0:  MOVLB  C
070C2:  MOVWF  x25
070C4:  MOVLB  0
070C6:  CALL   2E8A
....................                delay_ms(10);
070CA:  MOVLW  0A
070CC:  MOVLB  C
070CE:  MOVWF  x24
070D0:  MOVLB  0
070D2:  CALL   0952
....................                
....................                SendSMS.B3 =1;
070D6:  MOVLB  B
070D8:  BSF    xB6.2
....................                fprintf(CH2,"AT+CMGS=\"");
070DA:  MOVLW  82
070DC:  MOVWF  FF6
070DE:  MOVLW  06
070E0:  MOVWF  FF7
070E2:  MOVLB  0
070E4:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
070E8:  MOVLW  09
070EA:  MOVWF  FEA
070EC:  MOVLW  8B
070EE:  MOVWF  FE9
070F0:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
070F4:  MOVLW  22
070F6:  MOVLB  C
070F8:  MOVWF  x25
070FA:  MOVLB  0
070FC:  CALL   2E8A
....................                putc('\n',CH2);
07100:  MOVLW  0A
07102:  MOVLB  C
07104:  MOVWF  x25
07106:  MOVLB  0
07108:  CALL   2E8A
....................                delay_ms(50);
0710C:  MOVLW  32
0710E:  MOVLB  C
07110:  MOVWF  x24
07112:  MOVLB  0
07114:  CALL   0952
....................               
....................               fprintf(CH2,SMS_Massage3);
07118:  MOVLW  09
0711A:  MOVWF  FEA
0711C:  MOVLW  DA
0711E:  MOVWF  FE9
07120:  CALL   6242
....................               putc('\n',CH2);
07124:  MOVLW  0A
07126:  MOVLB  C
07128:  MOVWF  x25
0712A:  MOVLB  0
0712C:  CALL   2E8A
....................              putc(26,CH2);
07130:  MOVLW  1A
07132:  MOVLB  C
07134:  MOVWF  x25
07136:  MOVLB  0
07138:  CALL   2E8A
0713C:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
0713E:  BRA    7146
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
07140:  BTFSS  xA0.2
07142:  BRA    7146
07144:  BCF    xA8.2
....................    }
07146:  BRA    720C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
07148:  MOVLW  00
0714A:  BTFSC  x9A.2
0714C:  MOVLW  01
0714E:  MOVLB  C
07150:  MOVWF  x24
07152:  MOVLW  00
07154:  MOVLB  B
07156:  BTFSC  x9E.2
07158:  MOVLW  01
0715A:  MOVLB  C
0715C:  XORWF  x24,W
0715E:  SUBLW  01
07160:  BNZ   7204
....................       {
....................          Output.B3 = 0;
07162:  MOVLB  B
07164:  BCF    x9C.2
....................          // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
07166:  BTFSC  xB6.2
07168:  BRA    7200
0716A:  BTFSC  30.3
0716C:  BRA    7200
0716E:  BTFSC  xA8.2
07170:  BRA    7200
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07172:  MOVLW  8C
07174:  MOVWF  FF6
07176:  MOVLW  06
07178:  MOVWF  FF7
0717A:  MOVLB  0
0717C:  CALL   2ED0
....................                putc('\n',CH2);
07180:  MOVLW  0A
07182:  MOVLB  C
07184:  MOVWF  x25
07186:  MOVLB  0
07188:  CALL   2E8A
....................                delay_ms(10);
0718C:  MOVLW  0A
0718E:  MOVLB  C
07190:  MOVWF  x24
07192:  MOVLB  0
07194:  CALL   0952
....................                
....................                SendSMS.B3 =1;
07198:  MOVLB  B
0719A:  BSF    xB6.2
....................                fprintf(CH2,"AT+CMGS=\"");
0719C:  MOVLW  96
0719E:  MOVWF  FF6
071A0:  MOVLW  06
071A2:  MOVWF  FF7
071A4:  MOVLB  0
071A6:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
071AA:  MOVLW  09
071AC:  MOVWF  FEA
071AE:  MOVLW  8B
071B0:  MOVWF  FE9
071B2:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
071B6:  MOVLW  22
071B8:  MOVLB  C
071BA:  MOVWF  x25
071BC:  MOVLB  0
071BE:  CALL   2E8A
....................                putc('\n',CH2);
071C2:  MOVLW  0A
071C4:  MOVLB  C
071C6:  MOVWF  x25
071C8:  MOVLB  0
071CA:  CALL   2E8A
....................                delay_ms(50);
071CE:  MOVLW  32
071D0:  MOVLB  C
071D2:  MOVWF  x24
071D4:  MOVLB  0
071D6:  CALL   0952
....................               
....................               fprintf(CH2,SMS_Massage3);
071DA:  MOVLW  09
071DC:  MOVWF  FEA
071DE:  MOVLW  DA
071E0:  MOVWF  FE9
071E2:  CALL   6242
....................               putc('\n',CH2);
071E6:  MOVLW  0A
071E8:  MOVLB  C
071EA:  MOVWF  x25
071EC:  MOVLB  0
071EE:  CALL   2E8A
....................              putc(26,CH2);
071F2:  MOVLW  1A
071F4:  MOVLB  C
071F6:  MOVWF  x25
071F8:  MOVLB  0
071FA:  CALL   2E8A
071FE:  MOVLB  B
....................             }
....................       }
07200:  BRA    720C
07202:  MOVLB  C
....................       else
....................       {
....................          Output.B3 = 1;
07204:  MOVLB  B
07206:  BSF    x9C.2
....................          SendSMS.B3 =0;
07208:  BCF    xB6.2
....................          functointest_f =0;
0720A:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
0720C:  BTFSS  xA6.3
0720E:  BRA    7326
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
07210:  MOVLW  00
07212:  BTFSC  x9A.3
07214:  MOVLW  01
07216:  MOVLB  C
07218:  MOVWF  x24
0721A:  MOVLW  00
0721C:  MOVLB  B
0721E:  BTFSC  x9E.3
07220:  MOVLW  01
07222:  MOVLB  C
07224:  XORWF  x24,W
07226:  SUBLW  01
07228:  BNZ   7230
0722A:  MOVLB  B
0722C:  BTFSC  xA0.3
0722E:  BRA    7236
07230:  MOVLB  B
07232:  BTFSS  xAA.3
07234:  BRA    731E
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
07236:  BTFSC  xA8.3
07238:  BRA    731C
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0723A:  BTFSC  xAA.3
0723C:  BRA    7256
0723E:  MOVLB  0
07240:  MOVF   x6A,W
07242:  SUBLW  0F
07244:  BTFSC  FD8.2
07246:  BRA    724C
07248:  MOVLB  B
0724A:  BRA    7256
....................             {
....................                TimeBase1s = 100 ;            //reload again
0724C:  MOVLW  64
0724E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07250:  MOVFF  6B,1D
07254:  MOVLB  B
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
07256:  BSF    xAA.3
....................             if(FlashingFlag == 0)
07258:  BTFSC  1A.1
0725A:  BRA    7260
....................             {
....................                Output.B4 = 0;           //Flash output1
0725C:  BCF    x9C.3
....................             }
0725E:  BRA    7262
....................             else
....................             {
....................                Output.B4 = 1;
07260:  BSF    x9C.3
....................             }
.................... 
....................             if (~AutoTestFlag)
07262:  BTFSC  1A.4
07264:  BRA    7282
....................             {
....................                if(OutputBoth.B4 == 0)                  //Both output
07266:  BTFSC  xA4.3
07268:  BRA    7274
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0726A:  BSF    F89.4
0726C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0726E:  BSF    F89.3
07270:  BCF    F92.3
....................                }
07272:  BRA    7282
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
07274:  BTFSS  xA2.3
07276:  BRA    727E
07278:  BSF    F89.4
0727A:  BCF    F92.4
0727C:  BRA    7282
....................                   else output_bit(Pbell,1);                          //Bell
0727E:  BSF    F89.3
07280:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
07282:  BTFSC  xB6.3
07284:  BRA    731C
07286:  BTFSC  30.3
07288:  BRA    731C
0728A:  BTFSC  xA8.3
0728C:  BRA    731C
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0728E:  MOVLW  A0
07290:  MOVWF  FF6
07292:  MOVLW  06
07294:  MOVWF  FF7
07296:  MOVLB  0
07298:  CALL   2ED0
....................                putc('\n',CH2);
0729C:  MOVLW  0A
0729E:  MOVLB  C
072A0:  MOVWF  x25
072A2:  MOVLB  0
072A4:  CALL   2E8A
....................                delay_ms(10);
072A8:  MOVLW  0A
072AA:  MOVLB  C
072AC:  MOVWF  x24
072AE:  MOVLB  0
072B0:  CALL   0952
....................                
....................                SendSMS.B4 =1;
072B4:  MOVLB  B
072B6:  BSF    xB6.3
....................                fprintf(CH2,"AT+CMGS=\"");
072B8:  MOVLW  AA
072BA:  MOVWF  FF6
072BC:  MOVLW  06
072BE:  MOVWF  FF7
072C0:  MOVLB  0
072C2:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
072C6:  MOVLW  09
072C8:  MOVWF  FEA
072CA:  MOVLW  8B
072CC:  MOVWF  FE9
072CE:  CALL   6242
....................             
....................                fprintf(CH2,"\"");
072D2:  MOVLW  22
072D4:  MOVLB  C
072D6:  MOVWF  x25
072D8:  MOVLB  0
072DA:  CALL   2E8A
....................                putc('\n',CH2);
072DE:  MOVLW  0A
072E0:  MOVLB  C
072E2:  MOVWF  x25
072E4:  MOVLB  0
072E6:  CALL   2E8A
....................                delay_ms(50);
072EA:  MOVLW  32
072EC:  MOVLB  C
072EE:  MOVWF  x24
072F0:  MOVLB  0
072F2:  CALL   0952
....................               
....................               fprintf(CH2,SMS_Massage4);
072F6:  MOVLW  09
072F8:  MOVWF  FEA
072FA:  MOVLW  FA
072FC:  MOVWF  FE9
072FE:  CALL   6242
....................               putc('\n',CH2);
07302:  MOVLW  0A
07304:  MOVLB  C
07306:  MOVWF  x25
07308:  MOVLB  0
0730A:  CALL   2E8A
....................              putc(26,CH2);
0730E:  MOVLW  1A
07310:  MOVLB  C
07312:  MOVWF  x25
07314:  MOVLB  0
07316:  CALL   2E8A
0731A:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
0731C:  BRA    7324
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
0731E:  BTFSS  xA0.3
07320:  BRA    7324
07322:  BCF    xA8.3
....................    }
07324:  BRA    73EA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
07326:  MOVLW  00
07328:  BTFSC  x9A.3
0732A:  MOVLW  01
0732C:  MOVLB  C
0732E:  MOVWF  x24
07330:  MOVLW  00
07332:  MOVLB  B
07334:  BTFSC  x9E.3
07336:  MOVLW  01
07338:  MOVLB  C
0733A:  XORWF  x24,W
0733C:  SUBLW  01
0733E:  BNZ   73E2
....................       {
....................          Output.B4 = 0;
07340:  MOVLB  B
07342:  BCF    x9C.3
....................          // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
07344:  BTFSC  xB6.3
07346:  BRA    73DE
07348:  BTFSC  30.3
0734A:  BRA    73DE
0734C:  BTFSC  xA8.3
0734E:  BRA    73DE
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07350:  MOVLW  B4
07352:  MOVWF  FF6
07354:  MOVLW  06
07356:  MOVWF  FF7
07358:  MOVLB  0
0735A:  CALL   2ED0
....................                putc('\n',CH2);
0735E:  MOVLW  0A
07360:  MOVLB  C
07362:  MOVWF  x25
07364:  MOVLB  0
07366:  CALL   2E8A
....................                delay_ms(10);
0736A:  MOVLW  0A
0736C:  MOVLB  C
0736E:  MOVWF  x24
07370:  MOVLB  0
07372:  CALL   0952
....................                
....................                SendSMS.B4 =1;
07376:  MOVLB  B
07378:  BSF    xB6.3
....................                fprintf(CH2,"AT+CMGS=\"");
0737A:  MOVLW  BE
0737C:  MOVWF  FF6
0737E:  MOVLW  06
07380:  MOVWF  FF7
07382:  MOVLB  0
07384:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
07388:  MOVLW  09
0738A:  MOVWF  FEA
0738C:  MOVLW  8B
0738E:  MOVWF  FE9
07390:  CALL   6242
....................             
....................                fprintf(CH2,"\"");
07394:  MOVLW  22
07396:  MOVLB  C
07398:  MOVWF  x25
0739A:  MOVLB  0
0739C:  CALL   2E8A
....................                putc('\n',CH2);
073A0:  MOVLW  0A
073A2:  MOVLB  C
073A4:  MOVWF  x25
073A6:  MOVLB  0
073A8:  CALL   2E8A
....................                delay_ms(50);
073AC:  MOVLW  32
073AE:  MOVLB  C
073B0:  MOVWF  x24
073B2:  MOVLB  0
073B4:  CALL   0952
....................               
....................               fprintf(CH2,SMS_Massage4);
073B8:  MOVLW  09
073BA:  MOVWF  FEA
073BC:  MOVLW  FA
073BE:  MOVWF  FE9
073C0:  CALL   6242
....................               putc('\n',CH2);
073C4:  MOVLW  0A
073C6:  MOVLB  C
073C8:  MOVWF  x25
073CA:  MOVLB  0
073CC:  CALL   2E8A
....................              putc(26,CH2);
073D0:  MOVLW  1A
073D2:  MOVLB  C
073D4:  MOVWF  x25
073D6:  MOVLB  0
073D8:  CALL   2E8A
073DC:  MOVLB  B
....................             }
....................       }
073DE:  BRA    73EA
073E0:  MOVLB  C
....................       else
....................       {
....................          Output.B4 = 1;
073E2:  MOVLB  B
073E4:  BSF    x9C.3
....................          SendSMS.B4 =0;
073E6:  BCF    xB6.3
....................          functointest_f =0;
073E8:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
073EA:  BTFSS  xA6.4
073EC:  BRA    7504
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
073EE:  MOVLW  00
073F0:  BTFSC  x9A.4
073F2:  MOVLW  01
073F4:  MOVLB  C
073F6:  MOVWF  x24
073F8:  MOVLW  00
073FA:  MOVLB  B
073FC:  BTFSC  x9E.4
073FE:  MOVLW  01
07400:  MOVLB  C
07402:  XORWF  x24,W
07404:  SUBLW  01
07406:  BNZ   740E
07408:  MOVLB  B
0740A:  BTFSC  xA0.4
0740C:  BRA    7414
0740E:  MOVLB  B
07410:  BTFSS  xAA.4
07412:  BRA    74FC
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
07414:  BTFSC  xA8.4
07416:  BRA    74FA
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07418:  BTFSC  xAA.4
0741A:  BRA    7434
0741C:  MOVLB  0
0741E:  MOVF   x6A,W
07420:  SUBLW  0F
07422:  BTFSC  FD8.2
07424:  BRA    742A
07426:  MOVLB  B
07428:  BRA    7434
....................             {
....................                TimeBase1s = 100 ;            //reload again
0742A:  MOVLW  64
0742C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0742E:  MOVFF  6B,1D
07432:  MOVLB  B
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
07434:  BSF    xAA.4
....................             if(FlashingFlag == 0)
07436:  BTFSC  1A.1
07438:  BRA    743E
....................             {
....................                Output.B5 = 0;           //Flash output1
0743A:  BCF    x9C.4
....................             }
0743C:  BRA    7440
....................             else
....................             {
....................                Output.B5 = 1;
0743E:  BSF    x9C.4
....................             }
.................... 
....................             if (~AutoTestFlag)
07440:  BTFSC  1A.4
07442:  BRA    7460
....................             {
....................                if(OutputBoth.B5 == 0)                  //Both output
07444:  BTFSC  xA4.4
07446:  BRA    7452
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07448:  BSF    F89.4
0744A:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0744C:  BSF    F89.3
0744E:  BCF    F92.3
....................                }
07450:  BRA    7460
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
07452:  BTFSS  xA2.4
07454:  BRA    745C
07456:  BSF    F89.4
07458:  BCF    F92.4
0745A:  BRA    7460
....................                   else output_bit(Pbell,1);                          //Bell
0745C:  BSF    F89.3
0745E:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
07460:  BTFSC  xB6.4
07462:  BRA    74FA
07464:  BTFSC  30.3
07466:  BRA    74FA
07468:  BTFSC  xA8.4
0746A:  BRA    74FA
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0746C:  MOVLW  C8
0746E:  MOVWF  FF6
07470:  MOVLW  06
07472:  MOVWF  FF7
07474:  MOVLB  0
07476:  CALL   2ED0
....................                putc('\n',CH2);
0747A:  MOVLW  0A
0747C:  MOVLB  C
0747E:  MOVWF  x25
07480:  MOVLB  0
07482:  CALL   2E8A
....................                delay_ms(10);
07486:  MOVLW  0A
07488:  MOVLB  C
0748A:  MOVWF  x24
0748C:  MOVLB  0
0748E:  CALL   0952
....................                
....................                SendSMS.B5 =1;
07492:  MOVLB  B
07494:  BSF    xB6.4
....................                fprintf(CH2,"AT+CMGS=\"");
07496:  MOVLW  D2
07498:  MOVWF  FF6
0749A:  MOVLW  06
0749C:  MOVWF  FF7
0749E:  MOVLB  0
074A0:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
074A4:  MOVLW  09
074A6:  MOVWF  FEA
074A8:  MOVLW  8B
074AA:  MOVWF  FE9
074AC:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
074B0:  MOVLW  22
074B2:  MOVLB  C
074B4:  MOVWF  x25
074B6:  MOVLB  0
074B8:  CALL   2E8A
....................                putc('\n',CH2);
074BC:  MOVLW  0A
074BE:  MOVLB  C
074C0:  MOVWF  x25
074C2:  MOVLB  0
074C4:  CALL   2E8A
....................                delay_ms(50);
074C8:  MOVLW  32
074CA:  MOVLB  C
074CC:  MOVWF  x24
074CE:  MOVLB  0
074D0:  CALL   0952
....................               
....................               fprintf(CH2,SMS_Massage5);
074D4:  MOVLW  0A
074D6:  MOVWF  FEA
074D8:  MOVLW  1A
074DA:  MOVWF  FE9
074DC:  CALL   6242
....................               putc('\n',CH2);
074E0:  MOVLW  0A
074E2:  MOVLB  C
074E4:  MOVWF  x25
074E6:  MOVLB  0
074E8:  CALL   2E8A
....................              putc(26,CH2);
074EC:  MOVLW  1A
074EE:  MOVLB  C
074F0:  MOVWF  x25
074F2:  MOVLB  0
074F4:  CALL   2E8A
074F8:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
074FA:  BRA    7502
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
074FC:  BTFSS  xA0.4
074FE:  BRA    7502
07500:  BCF    xA8.4
....................    }
07502:  BRA    75CA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
07504:  MOVLW  00
07506:  BTFSC  x9A.4
07508:  MOVLW  01
0750A:  MOVLB  C
0750C:  MOVWF  x24
0750E:  MOVLW  00
07510:  MOVLB  B
07512:  BTFSC  x9E.4
07514:  MOVLW  01
07516:  MOVLB  C
07518:  XORWF  x24,W
0751A:  SUBLW  01
0751C:  BNZ   75C0
....................       {
....................          Output.B5 = 0;
0751E:  MOVLB  B
07520:  BCF    x9C.4
....................          // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
07522:  BTFSC  xB6.4
07524:  BRA    75BC
07526:  BTFSC  30.3
07528:  BRA    75BC
0752A:  BTFSC  xA8.4
0752C:  BRA    75BC
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0752E:  MOVLW  DC
07530:  MOVWF  FF6
07532:  MOVLW  06
07534:  MOVWF  FF7
07536:  MOVLB  0
07538:  CALL   2ED0
....................                putc('\n',CH2);
0753C:  MOVLW  0A
0753E:  MOVLB  C
07540:  MOVWF  x25
07542:  MOVLB  0
07544:  CALL   2E8A
....................                delay_ms(10);
07548:  MOVLW  0A
0754A:  MOVLB  C
0754C:  MOVWF  x24
0754E:  MOVLB  0
07550:  CALL   0952
....................                
....................                SendSMS.B5 =1;
07554:  MOVLB  B
07556:  BSF    xB6.4
....................                fprintf(CH2,"AT+CMGS=\"");
07558:  MOVLW  E6
0755A:  MOVWF  FF6
0755C:  MOVLW  06
0755E:  MOVWF  FF7
07560:  MOVLB  0
07562:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
07566:  MOVLW  09
07568:  MOVWF  FEA
0756A:  MOVLW  8B
0756C:  MOVWF  FE9
0756E:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
07572:  MOVLW  22
07574:  MOVLB  C
07576:  MOVWF  x25
07578:  MOVLB  0
0757A:  CALL   2E8A
....................                putc('\n',CH2);
0757E:  MOVLW  0A
07580:  MOVLB  C
07582:  MOVWF  x25
07584:  MOVLB  0
07586:  CALL   2E8A
....................                delay_ms(50);
0758A:  MOVLW  32
0758C:  MOVLB  C
0758E:  MOVWF  x24
07590:  MOVLB  0
07592:  CALL   0952
....................               
....................               fprintf(CH2,SMS_Massage5);
07596:  MOVLW  0A
07598:  MOVWF  FEA
0759A:  MOVLW  1A
0759C:  MOVWF  FE9
0759E:  CALL   6242
....................               putc('\n',CH2);
075A2:  MOVLW  0A
075A4:  MOVLB  C
075A6:  MOVWF  x25
075A8:  MOVLB  0
075AA:  CALL   2E8A
....................              putc(26,CH2);
075AE:  MOVLW  1A
075B0:  MOVLB  C
075B2:  MOVWF  x25
075B4:  MOVLB  0
075B6:  CALL   2E8A
075BA:  MOVLB  B
....................             }
....................       }
075BC:  BRA    75CA
075BE:  MOVLB  C
....................       else
....................       {
....................          Output.B5 = 1;
075C0:  MOVLB  B
075C2:  BSF    x9C.4
....................          Output.B5 = 1;
075C4:  BSF    x9C.4
....................          SendSMS.B5 =0;
075C6:  BCF    xB6.4
....................          functointest_f =0;
075C8:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
075CA:  BTFSS  xA6.5
075CC:  BRA    76E4
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
075CE:  MOVLW  00
075D0:  BTFSC  x9A.5
075D2:  MOVLW  01
075D4:  MOVLB  C
075D6:  MOVWF  x24
075D8:  MOVLW  00
075DA:  MOVLB  B
075DC:  BTFSC  x9E.5
075DE:  MOVLW  01
075E0:  MOVLB  C
075E2:  XORWF  x24,W
075E4:  SUBLW  01
075E6:  BNZ   75EE
075E8:  MOVLB  B
075EA:  BTFSC  xA0.5
075EC:  BRA    75F4
075EE:  MOVLB  B
075F0:  BTFSS  xAA.5
075F2:  BRA    76DC
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
075F4:  BTFSC  xA8.5
075F6:  BRA    76DA
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
075F8:  BTFSC  xAA.5
075FA:  BRA    7614
075FC:  MOVLB  0
075FE:  MOVF   x6A,W
07600:  SUBLW  0F
07602:  BTFSC  FD8.2
07604:  BRA    760A
07606:  MOVLB  B
07608:  BRA    7614
....................             {
....................                TimeBase1s = 100 ;            //reload again
0760A:  MOVLW  64
0760C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0760E:  MOVFF  6B,1D
07612:  MOVLB  B
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
07614:  BSF    xAA.5
....................             if(FlashingFlag == 0)
07616:  BTFSC  1A.1
07618:  BRA    761E
....................             {
....................                Output.B6 = 0;           //Flash output1
0761A:  BCF    x9C.5
....................             }
0761C:  BRA    7620
....................             else
....................             {
....................                Output.B6 = 1;
0761E:  BSF    x9C.5
....................             }
.................... 
....................             if (~AutoTestFlag)
07620:  BTFSC  1A.4
07622:  BRA    7640
....................             {
....................                if(OutputBoth.B6 == 0)                  //Both output
07624:  BTFSC  xA4.5
07626:  BRA    7632
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07628:  BSF    F89.4
0762A:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0762C:  BSF    F89.3
0762E:  BCF    F92.3
....................                }
07630:  BRA    7640
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
07632:  BTFSS  xA2.5
07634:  BRA    763C
07636:  BSF    F89.4
07638:  BCF    F92.4
0763A:  BRA    7640
....................                   else output_bit(Pbell,1);                          //Bell
0763C:  BSF    F89.3
0763E:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
07640:  BTFSC  xB6.5
07642:  BRA    76DA
07644:  BTFSC  30.3
07646:  BRA    76DA
07648:  BTFSC  xA8.5
0764A:  BRA    76DA
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0764C:  MOVLW  F0
0764E:  MOVWF  FF6
07650:  MOVLW  06
07652:  MOVWF  FF7
07654:  MOVLB  0
07656:  CALL   2ED0
....................                putc('\n',CH2);
0765A:  MOVLW  0A
0765C:  MOVLB  C
0765E:  MOVWF  x25
07660:  MOVLB  0
07662:  CALL   2E8A
....................                delay_ms(10);
07666:  MOVLW  0A
07668:  MOVLB  C
0766A:  MOVWF  x24
0766C:  MOVLB  0
0766E:  CALL   0952
....................                
....................                SendSMS.B6 =1;
07672:  MOVLB  B
07674:  BSF    xB6.5
....................                fprintf(CH2,"AT+CMGS=\"");
07676:  MOVLW  FA
07678:  MOVWF  FF6
0767A:  MOVLW  06
0767C:  MOVWF  FF7
0767E:  MOVLB  0
07680:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
07684:  MOVLW  09
07686:  MOVWF  FEA
07688:  MOVLW  8B
0768A:  MOVWF  FE9
0768C:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
07690:  MOVLW  22
07692:  MOVLB  C
07694:  MOVWF  x25
07696:  MOVLB  0
07698:  CALL   2E8A
....................                putc('\n',CH2);
0769C:  MOVLW  0A
0769E:  MOVLB  C
076A0:  MOVWF  x25
076A2:  MOVLB  0
076A4:  CALL   2E8A
....................                delay_ms(50);
076A8:  MOVLW  32
076AA:  MOVLB  C
076AC:  MOVWF  x24
076AE:  MOVLB  0
076B0:  CALL   0952
....................               
....................               fprintf(CH2,SMS_Massage6);
076B4:  MOVLW  0A
076B6:  MOVWF  FEA
076B8:  MOVLW  3A
076BA:  MOVWF  FE9
076BC:  CALL   6242
....................               putc('\n',CH2);
076C0:  MOVLW  0A
076C2:  MOVLB  C
076C4:  MOVWF  x25
076C6:  MOVLB  0
076C8:  CALL   2E8A
....................              putc(26,CH2);
076CC:  MOVLW  1A
076CE:  MOVLB  C
076D0:  MOVWF  x25
076D2:  MOVLB  0
076D4:  CALL   2E8A
076D8:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
076DA:  BRA    76E2
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
076DC:  BTFSS  xA0.5
076DE:  BRA    76E2
076E0:  BCF    xA8.5
....................    }
076E2:  BRA    77A8
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
076E4:  MOVLW  00
076E6:  BTFSC  x9A.5
076E8:  MOVLW  01
076EA:  MOVLB  C
076EC:  MOVWF  x24
076EE:  MOVLW  00
076F0:  MOVLB  B
076F2:  BTFSC  x9E.5
076F4:  MOVLW  01
076F6:  MOVLB  C
076F8:  XORWF  x24,W
076FA:  SUBLW  01
076FC:  BNZ   77A0
....................       {
....................          Output.B6 = 0;
076FE:  MOVLB  B
07700:  BCF    x9C.5
....................          // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
07702:  BTFSC  xB6.5
07704:  BRA    779C
07706:  BTFSC  30.3
07708:  BRA    779C
0770A:  BTFSC  xA8.5
0770C:  BRA    779C
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0770E:  MOVLW  04
07710:  MOVWF  FF6
07712:  MOVLW  07
07714:  MOVWF  FF7
07716:  MOVLB  0
07718:  CALL   2ED0
....................                putc('\n',CH2);
0771C:  MOVLW  0A
0771E:  MOVLB  C
07720:  MOVWF  x25
07722:  MOVLB  0
07724:  CALL   2E8A
....................                delay_ms(10);
07728:  MOVLW  0A
0772A:  MOVLB  C
0772C:  MOVWF  x24
0772E:  MOVLB  0
07730:  CALL   0952
....................                
....................                SendSMS.B6 =1;
07734:  MOVLB  B
07736:  BSF    xB6.5
....................                fprintf(CH2,"AT+CMGS=\"");
07738:  MOVLW  0E
0773A:  MOVWF  FF6
0773C:  MOVLW  07
0773E:  MOVWF  FF7
07740:  MOVLB  0
07742:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
07746:  MOVLW  09
07748:  MOVWF  FEA
0774A:  MOVLW  8B
0774C:  MOVWF  FE9
0774E:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
07752:  MOVLW  22
07754:  MOVLB  C
07756:  MOVWF  x25
07758:  MOVLB  0
0775A:  CALL   2E8A
....................                putc('\n',CH2);
0775E:  MOVLW  0A
07760:  MOVLB  C
07762:  MOVWF  x25
07764:  MOVLB  0
07766:  CALL   2E8A
....................                delay_ms(50);
0776A:  MOVLW  32
0776C:  MOVLB  C
0776E:  MOVWF  x24
07770:  MOVLB  0
07772:  CALL   0952
....................               
....................               fprintf(CH2,SMS_Massage6);
07776:  MOVLW  0A
07778:  MOVWF  FEA
0777A:  MOVLW  3A
0777C:  MOVWF  FE9
0777E:  CALL   6242
....................               putc('\n',CH2);
07782:  MOVLW  0A
07784:  MOVLB  C
07786:  MOVWF  x25
07788:  MOVLB  0
0778A:  CALL   2E8A
....................              putc(26,CH2);
0778E:  MOVLW  1A
07790:  MOVLB  C
07792:  MOVWF  x25
07794:  MOVLB  0
07796:  CALL   2E8A
0779A:  MOVLB  B
....................             }
....................       }
0779C:  BRA    77A8
0779E:  MOVLB  C
....................       else
....................       {
....................          Output.B6 = 1;
077A0:  MOVLB  B
077A2:  BSF    x9C.5
....................          SendSMS.B6 =0;
077A4:  BCF    xB6.5
....................          functointest_f =0;
077A6:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
077A8:  BTFSS  xA6.6
077AA:  BRA    78C2
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
077AC:  MOVLW  00
077AE:  BTFSC  x9A.6
077B0:  MOVLW  01
077B2:  MOVLB  C
077B4:  MOVWF  x24
077B6:  MOVLW  00
077B8:  MOVLB  B
077BA:  BTFSC  x9E.6
077BC:  MOVLW  01
077BE:  MOVLB  C
077C0:  XORWF  x24,W
077C2:  SUBLW  01
077C4:  BNZ   77CC
077C6:  MOVLB  B
077C8:  BTFSC  xA0.6
077CA:  BRA    77D2
077CC:  MOVLB  B
077CE:  BTFSS  xAA.6
077D0:  BRA    78BA
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
077D2:  BTFSC  xA8.6
077D4:  BRA    78B8
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
077D6:  BTFSC  xAA.6
077D8:  BRA    77F2
077DA:  MOVLB  0
077DC:  MOVF   x6A,W
077DE:  SUBLW  0F
077E0:  BTFSC  FD8.2
077E2:  BRA    77E8
077E4:  MOVLB  B
077E6:  BRA    77F2
....................             {
....................                TimeBase1s = 100 ;            //reload again
077E8:  MOVLW  64
077EA:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
077EC:  MOVFF  6B,1D
077F0:  MOVLB  B
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
077F2:  BSF    xAA.6
....................             if(FlashingFlag == 0)
077F4:  BTFSC  1A.1
077F6:  BRA    77FC
....................             {
....................                Output.B7 = 0;           //Flash output1
077F8:  BCF    x9C.6
....................             }
077FA:  BRA    77FE
....................             else
....................             {
....................                Output.B7 = 1;
077FC:  BSF    x9C.6
....................             }
.................... 
....................             if (~AutoTestFlag)
077FE:  BTFSC  1A.4
07800:  BRA    781E
....................             {
....................                if(OutputBoth.B7 == 0)                  //Both output
07802:  BTFSC  xA4.6
07804:  BRA    7810
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07806:  BSF    F89.4
07808:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0780A:  BSF    F89.3
0780C:  BCF    F92.3
....................                }
0780E:  BRA    781E
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
07810:  BTFSS  xA2.6
07812:  BRA    781A
07814:  BSF    F89.4
07816:  BCF    F92.4
07818:  BRA    781E
....................                   else output_bit(Pbell,1);                          //Bell
0781A:  BSF    F89.3
0781C:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
0781E:  BTFSC  xB6.6
07820:  BRA    78B8
07822:  BTFSC  30.3
07824:  BRA    78B8
07826:  BTFSC  xA8.6
07828:  BRA    78B8
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0782A:  MOVLW  18
0782C:  MOVWF  FF6
0782E:  MOVLW  07
07830:  MOVWF  FF7
07832:  MOVLB  0
07834:  CALL   2ED0
....................                putc('\n',CH2);
07838:  MOVLW  0A
0783A:  MOVLB  C
0783C:  MOVWF  x25
0783E:  MOVLB  0
07840:  CALL   2E8A
....................                delay_ms(10);
07844:  MOVLW  0A
07846:  MOVLB  C
07848:  MOVWF  x24
0784A:  MOVLB  0
0784C:  CALL   0952
....................                
....................                SendSMS.B7 =1;
07850:  MOVLB  B
07852:  BSF    xB6.6
....................                fprintf(CH2,"AT+CMGS=\"");
07854:  MOVLW  22
07856:  MOVWF  FF6
07858:  MOVLW  07
0785A:  MOVWF  FF7
0785C:  MOVLB  0
0785E:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
07862:  MOVLW  09
07864:  MOVWF  FEA
07866:  MOVLW  8B
07868:  MOVWF  FE9
0786A:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
0786E:  MOVLW  22
07870:  MOVLB  C
07872:  MOVWF  x25
07874:  MOVLB  0
07876:  CALL   2E8A
....................                putc('\n',CH2);
0787A:  MOVLW  0A
0787C:  MOVLB  C
0787E:  MOVWF  x25
07880:  MOVLB  0
07882:  CALL   2E8A
....................                delay_ms(50);
07886:  MOVLW  32
07888:  MOVLB  C
0788A:  MOVWF  x24
0788C:  MOVLB  0
0788E:  CALL   0952
....................               
....................               fprintf(CH2,SMS_Massage7);  
07892:  MOVLW  0A
07894:  MOVWF  FEA
07896:  MOVLW  5A
07898:  MOVWF  FE9
0789A:  CALL   6242
....................               putc('\n',CH2);
0789E:  MOVLW  0A
078A0:  MOVLB  C
078A2:  MOVWF  x25
078A4:  MOVLB  0
078A6:  CALL   2E8A
....................              putc(26,CH2);
078AA:  MOVLW  1A
078AC:  MOVLB  C
078AE:  MOVWF  x25
078B0:  MOVLB  0
078B2:  CALL   2E8A
078B6:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
078B8:  BRA    78C0
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
078BA:  BTFSS  xA0.6
078BC:  BRA    78C0
078BE:  BCF    xA8.6
....................    }
078C0:  BRA    7986
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
078C2:  MOVLW  00
078C4:  BTFSC  x9A.6
078C6:  MOVLW  01
078C8:  MOVLB  C
078CA:  MOVWF  x24
078CC:  MOVLW  00
078CE:  MOVLB  B
078D0:  BTFSC  x9E.6
078D2:  MOVLW  01
078D4:  MOVLB  C
078D6:  XORWF  x24,W
078D8:  SUBLW  01
078DA:  BNZ   797E
....................       {
....................          Output.B7 = 0;
078DC:  MOVLB  B
078DE:  BCF    x9C.6
....................          // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
078E0:  BTFSC  xB6.6
078E2:  BRA    797A
078E4:  BTFSC  30.3
078E6:  BRA    797A
078E8:  BTFSC  xA8.6
078EA:  BRA    797A
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
078EC:  MOVLW  2C
078EE:  MOVWF  FF6
078F0:  MOVLW  07
078F2:  MOVWF  FF7
078F4:  MOVLB  0
078F6:  CALL   2ED0
....................                putc('\n',CH2);
078FA:  MOVLW  0A
078FC:  MOVLB  C
078FE:  MOVWF  x25
07900:  MOVLB  0
07902:  CALL   2E8A
....................                delay_ms(10);
07906:  MOVLW  0A
07908:  MOVLB  C
0790A:  MOVWF  x24
0790C:  MOVLB  0
0790E:  CALL   0952
....................                
....................                SendSMS.B7 =1;
07912:  MOVLB  B
07914:  BSF    xB6.6
....................                fprintf(CH2,"AT+CMGS=\"");
07916:  MOVLW  36
07918:  MOVWF  FF6
0791A:  MOVLW  07
0791C:  MOVWF  FF7
0791E:  MOVLB  0
07920:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
07924:  MOVLW  09
07926:  MOVWF  FEA
07928:  MOVLW  8B
0792A:  MOVWF  FE9
0792C:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
07930:  MOVLW  22
07932:  MOVLB  C
07934:  MOVWF  x25
07936:  MOVLB  0
07938:  CALL   2E8A
....................                putc('\n',CH2);
0793C:  MOVLW  0A
0793E:  MOVLB  C
07940:  MOVWF  x25
07942:  MOVLB  0
07944:  CALL   2E8A
....................                delay_ms(50);
07948:  MOVLW  32
0794A:  MOVLB  C
0794C:  MOVWF  x24
0794E:  MOVLB  0
07950:  CALL   0952
....................               
....................               fprintf(CH2,SMS_Massage7);  
07954:  MOVLW  0A
07956:  MOVWF  FEA
07958:  MOVLW  5A
0795A:  MOVWF  FE9
0795C:  CALL   6242
....................               putc('\n',CH2);
07960:  MOVLW  0A
07962:  MOVLB  C
07964:  MOVWF  x25
07966:  MOVLB  0
07968:  CALL   2E8A
....................              putc(26,CH2);
0796C:  MOVLW  1A
0796E:  MOVLB  C
07970:  MOVWF  x25
07972:  MOVLB  0
07974:  CALL   2E8A
07978:  MOVLB  B
....................             }
....................       }
0797A:  BRA    7986
0797C:  MOVLB  C
....................       else
....................       {
....................          Output.B7 = 1;
0797E:  MOVLB  B
07980:  BSF    x9C.6
....................          SendSMS.B7 =0;
07982:  BCF    xB6.6
....................          functointest_f =0;
07984:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
07986:  BTFSS  xA6.7
07988:  BRA    7AA0
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
0798A:  MOVLW  00
0798C:  BTFSC  x9A.7
0798E:  MOVLW  01
07990:  MOVLB  C
07992:  MOVWF  x24
07994:  MOVLW  00
07996:  MOVLB  B
07998:  BTFSC  x9E.7
0799A:  MOVLW  01
0799C:  MOVLB  C
0799E:  XORWF  x24,W
079A0:  SUBLW  01
079A2:  BNZ   79AA
079A4:  MOVLB  B
079A6:  BTFSC  xA0.7
079A8:  BRA    79B0
079AA:  MOVLB  B
079AC:  BTFSS  xAA.7
079AE:  BRA    7A98
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
079B0:  BTFSC  xA8.7
079B2:  BRA    7A96
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
079B4:  BTFSC  xAA.7
079B6:  BRA    79D0
079B8:  MOVLB  0
079BA:  MOVF   x6A,W
079BC:  SUBLW  0F
079BE:  BTFSC  FD8.2
079C0:  BRA    79C6
079C2:  MOVLB  B
079C4:  BRA    79D0
....................             {
....................                TimeBase1s = 100 ;            //reload again
079C6:  MOVLW  64
079C8:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
079CA:  MOVFF  6B,1D
079CE:  MOVLB  B
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
079D0:  BSF    xAA.7
....................             if(FlashingFlag == 0)
079D2:  BTFSC  1A.1
079D4:  BRA    79DA
....................             {
....................                Output.B8 = 0;           //Flash output1
079D6:  BCF    x9C.7
....................             }
079D8:  BRA    79DC
....................             else
....................             {
....................                Output.B8 = 1;
079DA:  BSF    x9C.7
....................             }
.................... 
....................             if (~AutoTestFlag)
079DC:  BTFSC  1A.4
079DE:  BRA    79FC
....................             {
....................                if(OutputBoth.B8 == 0)                  //Both output
079E0:  BTFSC  xA4.7
079E2:  BRA    79EE
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
079E4:  BSF    F89.4
079E6:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
079E8:  BSF    F89.3
079EA:  BCF    F92.3
....................                }
079EC:  BRA    79FC
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
079EE:  BTFSS  xA2.7
079F0:  BRA    79F8
079F2:  BSF    F89.4
079F4:  BCF    F92.4
079F6:  BRA    79FC
....................                   else output_bit(Pbell,1);                          //Bell
079F8:  BSF    F89.3
079FA:  BCF    F92.3
....................                }
....................             }
....................                // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
079FC:  BTFSC  xB6.7
079FE:  BRA    7A96
07A00:  BTFSC  30.3
07A02:  BRA    7A96
07A04:  BTFSC  xA8.7
07A06:  BRA    7A96
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07A08:  MOVLW  40
07A0A:  MOVWF  FF6
07A0C:  MOVLW  07
07A0E:  MOVWF  FF7
07A10:  MOVLB  0
07A12:  CALL   2ED0
....................             putc('\n',CH2);
07A16:  MOVLW  0A
07A18:  MOVLB  C
07A1A:  MOVWF  x25
07A1C:  MOVLB  0
07A1E:  CALL   2E8A
....................             delay_ms(10);
07A22:  MOVLW  0A
07A24:  MOVLB  C
07A26:  MOVWF  x24
07A28:  MOVLB  0
07A2A:  CALL   0952
....................             
....................             SendSMS.B8 =1;
07A2E:  MOVLB  B
07A30:  BSF    xB6.7
....................             fprintf(CH2,"AT+CMGS=\"");
07A32:  MOVLW  4A
07A34:  MOVWF  FF6
07A36:  MOVLW  07
07A38:  MOVWF  FF7
07A3A:  MOVLB  0
07A3C:  CALL   2ED0
....................             fprintf(CH2,sms_phonenumber);
07A40:  MOVLW  09
07A42:  MOVWF  FEA
07A44:  MOVLW  8B
07A46:  MOVWF  FE9
07A48:  CALL   6242
....................             
....................             fprintf(CH2,"\"");
07A4C:  MOVLW  22
07A4E:  MOVLB  C
07A50:  MOVWF  x25
07A52:  MOVLB  0
07A54:  CALL   2E8A
....................             putc('\n',CH2);
07A58:  MOVLW  0A
07A5A:  MOVLB  C
07A5C:  MOVWF  x25
07A5E:  MOVLB  0
07A60:  CALL   2E8A
....................             delay_ms(50);
07A64:  MOVLW  32
07A66:  MOVLB  C
07A68:  MOVWF  x24
07A6A:  MOVLB  0
07A6C:  CALL   0952
....................            
....................            printf(SMS_Massage8);  
07A70:  MOVLW  0A
07A72:  MOVWF  FEA
07A74:  MOVLW  7A
07A76:  MOVWF  FE9
07A78:  CALL   6242
....................            putc('\n',CH2);
07A7C:  MOVLW  0A
07A7E:  MOVLB  C
07A80:  MOVWF  x25
07A82:  MOVLB  0
07A84:  CALL   2E8A
....................           putc(26,CH2);
07A88:  MOVLW  1A
07A8A:  MOVLB  C
07A8C:  MOVWF  x25
07A8E:  MOVLB  0
07A90:  CALL   2E8A
07A94:  MOVLB  B
....................          }
....................        }
.................... 
....................       }
07A96:  BRA    7A9E
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
07A98:  BTFSS  xA0.7
07A9A:  BRA    7A9E
07A9C:  BCF    xA8.7
....................    }
07A9E:  BRA    7B64
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
07AA0:  MOVLW  00
07AA2:  BTFSC  x9A.7
07AA4:  MOVLW  01
07AA6:  MOVLB  C
07AA8:  MOVWF  x24
07AAA:  MOVLW  00
07AAC:  MOVLB  B
07AAE:  BTFSC  x9E.7
07AB0:  MOVLW  01
07AB2:  MOVLB  C
07AB4:  XORWF  x24,W
07AB6:  SUBLW  01
07AB8:  BNZ   7B5C
....................       {
....................          Output.B8 = 0;
07ABA:  MOVLB  B
07ABC:  BCF    x9C.7
....................          // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
07ABE:  BTFSC  xB6.7
07AC0:  BRA    7B58
07AC2:  BTFSC  30.3
07AC4:  BRA    7B58
07AC6:  BTFSC  xA8.7
07AC8:  BRA    7B58
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07ACA:  MOVLW  54
07ACC:  MOVWF  FF6
07ACE:  MOVLW  07
07AD0:  MOVWF  FF7
07AD2:  MOVLB  0
07AD4:  CALL   2ED0
....................             putc('\n',CH2);
07AD8:  MOVLW  0A
07ADA:  MOVLB  C
07ADC:  MOVWF  x25
07ADE:  MOVLB  0
07AE0:  CALL   2E8A
....................             delay_ms(10);
07AE4:  MOVLW  0A
07AE6:  MOVLB  C
07AE8:  MOVWF  x24
07AEA:  MOVLB  0
07AEC:  CALL   0952
....................             
....................             SendSMS.B8 =1;
07AF0:  MOVLB  B
07AF2:  BSF    xB6.7
....................             fprintf(CH2,"AT+CMGS=\"");
07AF4:  MOVLW  5E
07AF6:  MOVWF  FF6
07AF8:  MOVLW  07
07AFA:  MOVWF  FF7
07AFC:  MOVLB  0
07AFE:  CALL   2ED0
....................             fprintf(CH2,sms_phonenumber);
07B02:  MOVLW  09
07B04:  MOVWF  FEA
07B06:  MOVLW  8B
07B08:  MOVWF  FE9
07B0A:  CALL   6242
....................             
....................             fprintf(CH2,"\"");
07B0E:  MOVLW  22
07B10:  MOVLB  C
07B12:  MOVWF  x25
07B14:  MOVLB  0
07B16:  CALL   2E8A
....................             putc('\n',CH2);
07B1A:  MOVLW  0A
07B1C:  MOVLB  C
07B1E:  MOVWF  x25
07B20:  MOVLB  0
07B22:  CALL   2E8A
....................             delay_ms(50);
07B26:  MOVLW  32
07B28:  MOVLB  C
07B2A:  MOVWF  x24
07B2C:  MOVLB  0
07B2E:  CALL   0952
....................            
....................            printf(SMS_Massage8);  
07B32:  MOVLW  0A
07B34:  MOVWF  FEA
07B36:  MOVLW  7A
07B38:  MOVWF  FE9
07B3A:  CALL   6242
....................            putc('\n',CH2);
07B3E:  MOVLW  0A
07B40:  MOVLB  C
07B42:  MOVWF  x25
07B44:  MOVLB  0
07B46:  CALL   2E8A
....................           putc(26,CH2);
07B4A:  MOVLW  1A
07B4C:  MOVLB  C
07B4E:  MOVWF  x25
07B50:  MOVLB  0
07B52:  CALL   2E8A
07B56:  MOVLB  B
....................          }
....................       }
07B58:  BRA    7B64
07B5A:  MOVLB  C
....................       else
....................       {
....................          Output.B8 = 1;
07B5C:  MOVLB  B
07B5E:  BSF    x9C.7
....................          SendSMS.B8 =0;
07B60:  BCF    xB6.7
....................          functointest_f =0;
07B62:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if(AlarmIndicator.B9 == 1)    // Alarm Function
07B64:  BTFSS  xA7.0
07B66:  BRA    7C7E
....................    {
....................       if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 1))|| In.B9 == 1)    // alarm1 occure and "Lock type"
07B68:  MOVLW  00
07B6A:  BTFSC  x9B.0
07B6C:  MOVLW  01
07B6E:  MOVLB  C
07B70:  MOVWF  x24
07B72:  MOVLW  00
07B74:  MOVLB  B
07B76:  BTFSC  x9F.0
07B78:  MOVLW  01
07B7A:  MOVLB  C
07B7C:  XORWF  x24,W
07B7E:  SUBLW  01
07B80:  BNZ   7B88
07B82:  MOVLB  B
07B84:  BTFSC  xA1.0
07B86:  BRA    7B8E
07B88:  MOVLB  B
07B8A:  BTFSS  xAB.0
07B8C:  BRA    7C76
....................       //if(Inputt.B9 == 0)
....................       {
....................          if(Ack.B9 == 0)
07B8E:  BTFSC  xA9.0
07B90:  BRA    7C74
....................          {
....................             if(In.B9 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07B92:  BTFSC  xAB.0
07B94:  BRA    7BAE
07B96:  MOVLB  0
07B98:  MOVF   x6A,W
07B9A:  SUBLW  0F
07B9C:  BTFSC  FD8.2
07B9E:  BRA    7BA4
07BA0:  MOVLB  B
07BA2:  BRA    7BAE
....................             {
....................                TimeBase1s = 100 ;            //reload again
07BA4:  MOVLW  64
07BA6:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07BA8:  MOVFF  6B,1D
07BAC:  MOVLB  B
....................             }
.................... 
....................             In.B9 = 1;                                 // setbit in1
07BAE:  BSF    xAB.0
....................             if(FlashingFlag == 0)
07BB0:  BTFSC  1A.1
07BB2:  BRA    7BB8
....................             {
....................                Output.B9 = 0;           //Flash output1
07BB4:  BCF    x9D.0
....................             }
07BB6:  BRA    7BBA
....................             else
....................             {
....................                Output.B9 = 1;
07BB8:  BSF    x9D.0
....................             }
.................... 
....................             if (~AutoTestFlag)
07BBA:  BTFSC  1A.4
07BBC:  BRA    7BDA
....................             {
....................                if(OutputBoth.B9 == 0)                  //Both output
07BBE:  BTFSC  xA5.0
07BC0:  BRA    7BCC
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07BC2:  BSF    F89.4
07BC4:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07BC6:  BSF    F89.3
07BC8:  BCF    F92.3
....................                }
07BCA:  BRA    7BDA
....................                else
....................                {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
07BCC:  BTFSS  xA3.0
07BCE:  BRA    7BD6
07BD0:  BSF    F89.4
07BD2:  BCF    F92.4
07BD4:  BRA    7BDA
....................                   else output_bit(Pbell,1);                          //Bell
07BD6:  BSF    F89.3
07BD8:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
07BDA:  BTFSC  xB7.0
07BDC:  BRA    7C74
07BDE:  BTFSC  30.3
07BE0:  BRA    7C74
07BE2:  BTFSC  xA9.0
07BE4:  BRA    7C74
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07BE6:  MOVLW  68
07BE8:  MOVWF  FF6
07BEA:  MOVLW  07
07BEC:  MOVWF  FF7
07BEE:  MOVLB  0
07BF0:  CALL   2ED0
....................                putc('\n',CH2);
07BF4:  MOVLW  0A
07BF6:  MOVLB  C
07BF8:  MOVWF  x25
07BFA:  MOVLB  0
07BFC:  CALL   2E8A
....................                delay_ms(10);
07C00:  MOVLW  0A
07C02:  MOVLB  C
07C04:  MOVWF  x24
07C06:  MOVLB  0
07C08:  CALL   0952
....................                
....................                SendSMS.B9 =1;
07C0C:  MOVLB  B
07C0E:  BSF    xB7.0
....................                fprintf(CH2,"AT+CMGS=\"");
07C10:  MOVLW  72
07C12:  MOVWF  FF6
07C14:  MOVLW  07
07C16:  MOVWF  FF7
07C18:  MOVLB  0
07C1A:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
07C1E:  MOVLW  09
07C20:  MOVWF  FEA
07C22:  MOVLW  8B
07C24:  MOVWF  FE9
07C26:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
07C2A:  MOVLW  22
07C2C:  MOVLB  C
07C2E:  MOVWF  x25
07C30:  MOVLB  0
07C32:  CALL   2E8A
....................                putc('\n',CH2);
07C36:  MOVLW  0A
07C38:  MOVLB  C
07C3A:  MOVWF  x25
07C3C:  MOVLB  0
07C3E:  CALL   2E8A
....................                delay_ms(50);
07C42:  MOVLW  32
07C44:  MOVLB  C
07C46:  MOVWF  x24
07C48:  MOVLB  0
07C4A:  CALL   0952
....................               
....................               printf(SMS_Massage9);  
07C4E:  MOVLW  0A
07C50:  MOVWF  FEA
07C52:  MOVLW  9A
07C54:  MOVWF  FE9
07C56:  CALL   6242
....................               putc('\n',CH2);
07C5A:  MOVLW  0A
07C5C:  MOVLB  C
07C5E:  MOVWF  x25
07C60:  MOVLB  0
07C62:  CALL   2E8A
....................               putc(26,CH2);
07C66:  MOVLW  1A
07C68:  MOVLB  C
07C6A:  MOVWF  x25
07C6C:  MOVLB  0
07C6E:  CALL   2E8A
07C72:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
07C74:  BRA    7C7C
....................       else if(FaultType.B9 == 1) Ack.B9 = 0;
07C76:  BTFSS  xA1.0
07C78:  BRA    7C7C
07C7A:  BCF    xA9.0
....................    }
07C7C:  BRA    7D42
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B9 ^ InputType.B9) == 1)
07C7E:  MOVLW  00
07C80:  BTFSC  x9B.0
07C82:  MOVLW  01
07C84:  MOVLB  C
07C86:  MOVWF  x24
07C88:  MOVLW  00
07C8A:  MOVLB  B
07C8C:  BTFSC  x9F.0
07C8E:  MOVLW  01
07C90:  MOVLB  C
07C92:  XORWF  x24,W
07C94:  SUBLW  01
07C96:  BNZ   7D3A
....................       {
....................          Output.B9 = 0;
07C98:  MOVLB  B
07C9A:  BCF    x9D.0
....................          // SMS Sending   
....................          if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
07C9C:  BTFSC  xB7.0
07C9E:  BRA    7D36
07CA0:  BTFSC  30.3
07CA2:  BRA    7D36
07CA4:  BTFSC  xA9.0
07CA6:  BRA    7D36
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07CA8:  MOVLW  7C
07CAA:  MOVWF  FF6
07CAC:  MOVLW  07
07CAE:  MOVWF  FF7
07CB0:  MOVLB  0
07CB2:  CALL   2ED0
....................             putc('\n',CH2);
07CB6:  MOVLW  0A
07CB8:  MOVLB  C
07CBA:  MOVWF  x25
07CBC:  MOVLB  0
07CBE:  CALL   2E8A
....................             delay_ms(10);
07CC2:  MOVLW  0A
07CC4:  MOVLB  C
07CC6:  MOVWF  x24
07CC8:  MOVLB  0
07CCA:  CALL   0952
....................             
....................             SendSMS.B9 =1;
07CCE:  MOVLB  B
07CD0:  BSF    xB7.0
....................             fprintf(CH2,"AT+CMGS=\"");
07CD2:  MOVLW  86
07CD4:  MOVWF  FF6
07CD6:  MOVLW  07
07CD8:  MOVWF  FF7
07CDA:  MOVLB  0
07CDC:  CALL   2ED0
....................             fprintf(CH2,sms_phonenumber);
07CE0:  MOVLW  09
07CE2:  MOVWF  FEA
07CE4:  MOVLW  8B
07CE6:  MOVWF  FE9
07CE8:  CALL   6242
....................             
....................             fprintf(CH2,"\"");
07CEC:  MOVLW  22
07CEE:  MOVLB  C
07CF0:  MOVWF  x25
07CF2:  MOVLB  0
07CF4:  CALL   2E8A
....................             putc('\n',CH2);
07CF8:  MOVLW  0A
07CFA:  MOVLB  C
07CFC:  MOVWF  x25
07CFE:  MOVLB  0
07D00:  CALL   2E8A
....................             delay_ms(50);
07D04:  MOVLW  32
07D06:  MOVLB  C
07D08:  MOVWF  x24
07D0A:  MOVLB  0
07D0C:  CALL   0952
....................            
....................            printf(SMS_Massage9);  
07D10:  MOVLW  0A
07D12:  MOVWF  FEA
07D14:  MOVLW  9A
07D16:  MOVWF  FE9
07D18:  CALL   6242
....................            putc('\n',CH2);
07D1C:  MOVLW  0A
07D1E:  MOVLB  C
07D20:  MOVWF  x25
07D22:  MOVLB  0
07D24:  CALL   2E8A
....................            putc(26,CH2);
07D28:  MOVLW  1A
07D2A:  MOVLB  C
07D2C:  MOVWF  x25
07D2E:  MOVLB  0
07D30:  CALL   2E8A
07D34:  MOVLB  B
....................          }
....................       }
07D36:  BRA    7D42
07D38:  MOVLB  C
....................       else
....................       {
....................          Output.B9 = 1;
07D3A:  MOVLB  B
07D3C:  BSF    x9D.0
....................          SendSMS.B9 =0;
07D3E:  BCF    xB7.0
....................          functointest_f =0;
07D40:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if(AlarmIndicator.B10 == 1)    // Alarm Function
07D42:  BTFSS  xA7.1
07D44:  BRA    7E5C
....................    {
....................       if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 1))|| In.B10 == 1)    // alarm1 occure and "Lock type"
07D46:  MOVLW  00
07D48:  BTFSC  x9B.1
07D4A:  MOVLW  01
07D4C:  MOVLB  C
07D4E:  MOVWF  x24
07D50:  MOVLW  00
07D52:  MOVLB  B
07D54:  BTFSC  x9F.1
07D56:  MOVLW  01
07D58:  MOVLB  C
07D5A:  XORWF  x24,W
07D5C:  SUBLW  01
07D5E:  BNZ   7D66
07D60:  MOVLB  B
07D62:  BTFSC  xA1.1
07D64:  BRA    7D6C
07D66:  MOVLB  B
07D68:  BTFSS  xAB.1
07D6A:  BRA    7E54
....................       //if(Inputt.B10 == 0)
....................       {
....................          if(Ack.B10 == 0)
07D6C:  BTFSC  xA9.1
07D6E:  BRA    7E52
....................          {
....................             if(In.B10 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07D70:  BTFSC  xAB.1
07D72:  BRA    7D8C
07D74:  MOVLB  0
07D76:  MOVF   x6A,W
07D78:  SUBLW  0F
07D7A:  BTFSC  FD8.2
07D7C:  BRA    7D82
07D7E:  MOVLB  B
07D80:  BRA    7D8C
....................             {
....................                TimeBase1s = 100 ;            //reload again
07D82:  MOVLW  64
07D84:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07D86:  MOVFF  6B,1D
07D8A:  MOVLB  B
....................             }
.................... 
....................             In.B10 = 1;                                 // setbit in1
07D8C:  BSF    xAB.1
....................             if(FlashingFlag == 0)
07D8E:  BTFSC  1A.1
07D90:  BRA    7D96
....................             {
....................                Output.B10 = 0;           //Flash output1
07D92:  BCF    x9D.1
....................             }
07D94:  BRA    7D98
....................             else
....................             {
....................                Output.B10 = 1;
07D96:  BSF    x9D.1
....................             }
.................... 
....................             if (~AutoTestFlag)
07D98:  BTFSC  1A.4
07D9A:  BRA    7DB8
....................             {
....................                if(OutputBoth.B10 == 0)                  //Both output
07D9C:  BTFSC  xA5.1
07D9E:  BRA    7DAA
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07DA0:  BSF    F89.4
07DA2:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07DA4:  BSF    F89.3
07DA6:  BCF    F92.3
....................                }
07DA8:  BRA    7DB8
....................                else
....................                {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
07DAA:  BTFSS  xA3.1
07DAC:  BRA    7DB4
07DAE:  BSF    F89.4
07DB0:  BCF    F92.4
07DB2:  BRA    7DB8
....................                   else output_bit(Pbell,1);                          //Bell
07DB4:  BSF    F89.3
07DB6:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
07DB8:  BTFSC  xB7.1
07DBA:  BRA    7E52
07DBC:  BTFSC  30.3
07DBE:  BRA    7E52
07DC0:  BTFSC  xA9.1
07DC2:  BRA    7E52
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07DC4:  MOVLW  90
07DC6:  MOVWF  FF6
07DC8:  MOVLW  07
07DCA:  MOVWF  FF7
07DCC:  MOVLB  0
07DCE:  CALL   2ED0
....................                putc('\n',CH2);
07DD2:  MOVLW  0A
07DD4:  MOVLB  C
07DD6:  MOVWF  x25
07DD8:  MOVLB  0
07DDA:  CALL   2E8A
....................                delay_ms(10);
07DDE:  MOVLW  0A
07DE0:  MOVLB  C
07DE2:  MOVWF  x24
07DE4:  MOVLB  0
07DE6:  CALL   0952
....................                
....................                SendSMS.B10 =1;
07DEA:  MOVLB  B
07DEC:  BSF    xB7.1
....................                fprintf(CH2,"AT+CMGS=\"");
07DEE:  MOVLW  9A
07DF0:  MOVWF  FF6
07DF2:  MOVLW  07
07DF4:  MOVWF  FF7
07DF6:  MOVLB  0
07DF8:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
07DFC:  MOVLW  09
07DFE:  MOVWF  FEA
07E00:  MOVLW  8B
07E02:  MOVWF  FE9
07E04:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
07E08:  MOVLW  22
07E0A:  MOVLB  C
07E0C:  MOVWF  x25
07E0E:  MOVLB  0
07E10:  CALL   2E8A
....................                putc('\n',CH2);
07E14:  MOVLW  0A
07E16:  MOVLB  C
07E18:  MOVWF  x25
07E1A:  MOVLB  0
07E1C:  CALL   2E8A
....................                delay_ms(50);
07E20:  MOVLW  32
07E22:  MOVLB  C
07E24:  MOVWF  x24
07E26:  MOVLB  0
07E28:  CALL   0952
....................               
....................               printf(SMS_Massage10);  
07E2C:  MOVLW  0A
07E2E:  MOVWF  FEA
07E30:  MOVLW  BA
07E32:  MOVWF  FE9
07E34:  CALL   6242
....................               putc('\n',CH2);
07E38:  MOVLW  0A
07E3A:  MOVLB  C
07E3C:  MOVWF  x25
07E3E:  MOVLB  0
07E40:  CALL   2E8A
....................               putc(26,CH2);
07E44:  MOVLW  1A
07E46:  MOVLB  C
07E48:  MOVWF  x25
07E4A:  MOVLB  0
07E4C:  CALL   2E8A
07E50:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
07E52:  BRA    7E5A
....................       else if(FaultType.B10 == 1) Ack.B10 = 0;
07E54:  BTFSS  xA1.1
07E56:  BRA    7E5A
07E58:  BCF    xA9.1
....................    }
07E5A:  BRA    7F20
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B10 ^ InputType.B10) == 1)
07E5C:  MOVLW  00
07E5E:  BTFSC  x9B.1
07E60:  MOVLW  01
07E62:  MOVLB  C
07E64:  MOVWF  x24
07E66:  MOVLW  00
07E68:  MOVLB  B
07E6A:  BTFSC  x9F.1
07E6C:  MOVLW  01
07E6E:  MOVLB  C
07E70:  XORWF  x24,W
07E72:  SUBLW  01
07E74:  BNZ   7F18
....................       {
....................          Output.B10 = 0;
07E76:  MOVLB  B
07E78:  BCF    x9D.1
....................          // SMS Sending   
....................          if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
07E7A:  BTFSC  xB7.1
07E7C:  BRA    7F14
07E7E:  BTFSC  30.3
07E80:  BRA    7F14
07E82:  BTFSC  xA9.1
07E84:  BRA    7F14
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07E86:  MOVLW  A4
07E88:  MOVWF  FF6
07E8A:  MOVLW  07
07E8C:  MOVWF  FF7
07E8E:  MOVLB  0
07E90:  CALL   2ED0
....................             putc('\n',CH2);
07E94:  MOVLW  0A
07E96:  MOVLB  C
07E98:  MOVWF  x25
07E9A:  MOVLB  0
07E9C:  CALL   2E8A
....................             delay_ms(10);
07EA0:  MOVLW  0A
07EA2:  MOVLB  C
07EA4:  MOVWF  x24
07EA6:  MOVLB  0
07EA8:  CALL   0952
....................             
....................             SendSMS.B10 =1;
07EAC:  MOVLB  B
07EAE:  BSF    xB7.1
....................             fprintf(CH2,"AT+CMGS=\"");
07EB0:  MOVLW  AE
07EB2:  MOVWF  FF6
07EB4:  MOVLW  07
07EB6:  MOVWF  FF7
07EB8:  MOVLB  0
07EBA:  CALL   2ED0
....................             fprintf(CH2,sms_phonenumber);
07EBE:  MOVLW  09
07EC0:  MOVWF  FEA
07EC2:  MOVLW  8B
07EC4:  MOVWF  FE9
07EC6:  CALL   6242
....................             
....................             fprintf(CH2,"\"");
07ECA:  MOVLW  22
07ECC:  MOVLB  C
07ECE:  MOVWF  x25
07ED0:  MOVLB  0
07ED2:  CALL   2E8A
....................             putc('\n',CH2);
07ED6:  MOVLW  0A
07ED8:  MOVLB  C
07EDA:  MOVWF  x25
07EDC:  MOVLB  0
07EDE:  CALL   2E8A
....................             delay_ms(50);
07EE2:  MOVLW  32
07EE4:  MOVLB  C
07EE6:  MOVWF  x24
07EE8:  MOVLB  0
07EEA:  CALL   0952
....................            
....................            printf(SMS_Massage10);  
07EEE:  MOVLW  0A
07EF0:  MOVWF  FEA
07EF2:  MOVLW  BA
07EF4:  MOVWF  FE9
07EF6:  CALL   6242
....................            putc('\n',CH2);
07EFA:  MOVLW  0A
07EFC:  MOVLB  C
07EFE:  MOVWF  x25
07F00:  MOVLB  0
07F02:  CALL   2E8A
....................            putc(26,CH2);
07F06:  MOVLW  1A
07F08:  MOVLB  C
07F0A:  MOVWF  x25
07F0C:  MOVLB  0
07F0E:  CALL   2E8A
07F12:  MOVLB  B
....................          }
....................       }
07F14:  BRA    7F20
07F16:  MOVLB  C
....................       else
....................       {
....................          Output.B10 = 1;
07F18:  MOVLB  B
07F1A:  BSF    x9D.1
....................          SendSMS.B10 =0;
07F1C:  BCF    xB7.1
....................          functointest_f =0;
07F1E:  BCF    30.3
....................       }
....................    }
.................... //}
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if(AlarmIndicator.B11 == 1)    // Alarm Function
07F20:  BTFSS  xA7.2
07F22:  BRA    803A
....................    {
....................       if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 1))|| In.B11 == 1)    // alarm1 occure and "Lock type"
07F24:  MOVLW  00
07F26:  BTFSC  x9B.2
07F28:  MOVLW  01
07F2A:  MOVLB  C
07F2C:  MOVWF  x24
07F2E:  MOVLW  00
07F30:  MOVLB  B
07F32:  BTFSC  x9F.2
07F34:  MOVLW  01
07F36:  MOVLB  C
07F38:  XORWF  x24,W
07F3A:  SUBLW  01
07F3C:  BNZ   7F44
07F3E:  MOVLB  B
07F40:  BTFSC  xA1.2
07F42:  BRA    7F4A
07F44:  MOVLB  B
07F46:  BTFSS  xAB.2
07F48:  BRA    8032
....................       //if(Inputt.B11 == 0)
....................       {
....................          if(Ack.B11 == 0)
07F4A:  BTFSC  xA9.2
07F4C:  BRA    8030
....................          {
....................             if(In.B11 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07F4E:  BTFSC  xAB.2
07F50:  BRA    7F6A
07F52:  MOVLB  0
07F54:  MOVF   x6A,W
07F56:  SUBLW  0F
07F58:  BTFSC  FD8.2
07F5A:  BRA    7F60
07F5C:  MOVLB  B
07F5E:  BRA    7F6A
....................             {
....................                TimeBase1s = 100 ;            //reload again
07F60:  MOVLW  64
07F62:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07F64:  MOVFF  6B,1D
07F68:  MOVLB  B
....................             }
.................... 
....................             In.B11 = 1;                                 // setbit in1
07F6A:  BSF    xAB.2
....................             if(FlashingFlag == 0)
07F6C:  BTFSC  1A.1
07F6E:  BRA    7F74
....................             {
....................                Output.B11 = 0;           //Flash output1
07F70:  BCF    x9D.2
....................             }
07F72:  BRA    7F76
....................             else
....................             {
....................                Output.B11 = 1;
07F74:  BSF    x9D.2
....................             }
.................... 
....................             if (~AutoTestFlag)
07F76:  BTFSC  1A.4
07F78:  BRA    7F96
....................             {
....................                if(OutputBoth.B11 == 0)                  //Both output
07F7A:  BTFSC  xA5.2
07F7C:  BRA    7F88
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07F7E:  BSF    F89.4
07F80:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07F82:  BSF    F89.3
07F84:  BCF    F92.3
....................                }
07F86:  BRA    7F96
....................                else
....................                {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,1);     //Buzzer
07F88:  BTFSS  xA3.2
07F8A:  BRA    7F92
07F8C:  BSF    F89.4
07F8E:  BCF    F92.4
07F90:  BRA    7F96
....................                   else output_bit(Pbell,1);                          //Bell
07F92:  BSF    F89.3
07F94:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B11 ==0)&& (functointest_f ==0) && (Ack.B11 ==0))
07F96:  BTFSC  xB7.2
07F98:  BRA    8030
07F9A:  BTFSC  30.3
07F9C:  BRA    8030
07F9E:  BTFSC  xA9.2
07FA0:  BRA    8030
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07FA2:  MOVLW  B8
07FA4:  MOVWF  FF6
07FA6:  MOVLW  07
07FA8:  MOVWF  FF7
07FAA:  MOVLB  0
07FAC:  CALL   2ED0
....................                putc('\n',CH2);
07FB0:  MOVLW  0A
07FB2:  MOVLB  C
07FB4:  MOVWF  x25
07FB6:  MOVLB  0
07FB8:  CALL   2E8A
....................                delay_ms(10);
07FBC:  MOVLW  0A
07FBE:  MOVLB  C
07FC0:  MOVWF  x24
07FC2:  MOVLB  0
07FC4:  CALL   0952
....................                
....................                SendSMS.B11 =1;
07FC8:  MOVLB  B
07FCA:  BSF    xB7.2
....................                fprintf(CH2,"AT+CMGS=\"");
07FCC:  MOVLW  C2
07FCE:  MOVWF  FF6
07FD0:  MOVLW  07
07FD2:  MOVWF  FF7
07FD4:  MOVLB  0
07FD6:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
07FDA:  MOVLW  09
07FDC:  MOVWF  FEA
07FDE:  MOVLW  8B
07FE0:  MOVWF  FE9
07FE2:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
07FE6:  MOVLW  22
07FE8:  MOVLB  C
07FEA:  MOVWF  x25
07FEC:  MOVLB  0
07FEE:  CALL   2E8A
....................                putc('\n',CH2);
07FF2:  MOVLW  0A
07FF4:  MOVLB  C
07FF6:  MOVWF  x25
07FF8:  MOVLB  0
07FFA:  CALL   2E8A
....................                delay_ms(50);
07FFE:  MOVLW  32
08000:  MOVLB  C
08002:  MOVWF  x24
08004:  MOVLB  0
08006:  CALL   0952
....................               
....................               printf(SMS_Massage11);  
0800A:  MOVLW  0A
0800C:  MOVWF  FEA
0800E:  MOVLW  DA
08010:  MOVWF  FE9
08012:  CALL   6242
....................               putc('\n',CH2);
08016:  MOVLW  0A
08018:  MOVLB  C
0801A:  MOVWF  x25
0801C:  MOVLB  0
0801E:  CALL   2E8A
....................               putc(26,CH2);
08022:  MOVLW  1A
08024:  MOVLB  C
08026:  MOVWF  x25
08028:  MOVLB  0
0802A:  CALL   2E8A
0802E:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
08030:  BRA    8038
....................       else if(FaultType.B11 == 1) Ack.B11 = 0;
08032:  BTFSS  xA1.2
08034:  BRA    8038
08036:  BCF    xA9.2
....................    }
08038:  BRA    80FE
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B11 ^ InputType.B11) == 1)
0803A:  MOVLW  00
0803C:  BTFSC  x9B.2
0803E:  MOVLW  01
08040:  MOVLB  C
08042:  MOVWF  x24
08044:  MOVLW  00
08046:  MOVLB  B
08048:  BTFSC  x9F.2
0804A:  MOVLW  01
0804C:  MOVLB  C
0804E:  XORWF  x24,W
08050:  SUBLW  01
08052:  BNZ   80F6
....................       {
....................          Output.B11 = 0;
08054:  MOVLB  B
08056:  BCF    x9D.2
....................          // SMS Sending   
....................             if((SendSMS.B11 ==0)&& (functointest_f ==0) && (Ack.B11 ==0))
08058:  BTFSC  xB7.2
0805A:  BRA    80F2
0805C:  BTFSC  30.3
0805E:  BRA    80F2
08060:  BTFSC  xA9.2
08062:  BRA    80F2
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08064:  MOVLW  CC
08066:  MOVWF  FF6
08068:  MOVLW  07
0806A:  MOVWF  FF7
0806C:  MOVLB  0
0806E:  CALL   2ED0
....................                putc('\n',CH2);
08072:  MOVLW  0A
08074:  MOVLB  C
08076:  MOVWF  x25
08078:  MOVLB  0
0807A:  CALL   2E8A
....................                delay_ms(10);
0807E:  MOVLW  0A
08080:  MOVLB  C
08082:  MOVWF  x24
08084:  MOVLB  0
08086:  CALL   0952
....................                
....................                SendSMS.B11 =1;
0808A:  MOVLB  B
0808C:  BSF    xB7.2
....................                fprintf(CH2,"AT+CMGS=\"");
0808E:  MOVLW  D6
08090:  MOVWF  FF6
08092:  MOVLW  07
08094:  MOVWF  FF7
08096:  MOVLB  0
08098:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
0809C:  MOVLW  09
0809E:  MOVWF  FEA
080A0:  MOVLW  8B
080A2:  MOVWF  FE9
080A4:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
080A8:  MOVLW  22
080AA:  MOVLB  C
080AC:  MOVWF  x25
080AE:  MOVLB  0
080B0:  CALL   2E8A
....................                putc('\n',CH2);
080B4:  MOVLW  0A
080B6:  MOVLB  C
080B8:  MOVWF  x25
080BA:  MOVLB  0
080BC:  CALL   2E8A
....................                delay_ms(50);
080C0:  MOVLW  32
080C2:  MOVLB  C
080C4:  MOVWF  x24
080C6:  MOVLB  0
080C8:  CALL   0952
....................               
....................               printf(SMS_Massage11);  
080CC:  MOVLW  0A
080CE:  MOVWF  FEA
080D0:  MOVLW  DA
080D2:  MOVWF  FE9
080D4:  CALL   6242
....................               putc('\n',CH2);
080D8:  MOVLW  0A
080DA:  MOVLB  C
080DC:  MOVWF  x25
080DE:  MOVLB  0
080E0:  CALL   2E8A
....................               putc(26,CH2);
080E4:  MOVLW  1A
080E6:  MOVLB  C
080E8:  MOVWF  x25
080EA:  MOVLB  0
080EC:  CALL   2E8A
080F0:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................       }
080F2:  BRA    80FE
080F4:  MOVLB  C
....................       else
....................       {
....................          Output.B11 = 1;
080F6:  MOVLB  B
080F8:  BSF    x9D.2
....................          SendSMS.B11 =0;
080FA:  BCF    xB7.2
....................          functointest_f =0;
080FC:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if(AlarmIndicator.B12 == 1)    // Alarm Function
080FE:  BTFSS  xA7.3
08100:  BRA    8218
....................    {
....................       if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 1))|| In.B12 == 1)    // alarm1 occure and "Lock type"
08102:  MOVLW  00
08104:  BTFSC  x9B.3
08106:  MOVLW  01
08108:  MOVLB  C
0810A:  MOVWF  x24
0810C:  MOVLW  00
0810E:  MOVLB  B
08110:  BTFSC  x9F.3
08112:  MOVLW  01
08114:  MOVLB  C
08116:  XORWF  x24,W
08118:  SUBLW  01
0811A:  BNZ   8122
0811C:  MOVLB  B
0811E:  BTFSC  xA1.3
08120:  BRA    8128
08122:  MOVLB  B
08124:  BTFSS  xAB.3
08126:  BRA    8210
....................       //if(Inputt.B12 == 0)
....................       {
....................          if(Ack.B12 == 0)
08128:  BTFSC  xA9.3
0812A:  BRA    820E
....................          {
....................             if(In.B12 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0812C:  BTFSC  xAB.3
0812E:  BRA    8148
08130:  MOVLB  0
08132:  MOVF   x6A,W
08134:  SUBLW  0F
08136:  BTFSC  FD8.2
08138:  BRA    813E
0813A:  MOVLB  B
0813C:  BRA    8148
....................             {
....................                TimeBase1s = 100 ;            //reload again
0813E:  MOVLW  64
08140:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
08142:  MOVFF  6B,1D
08146:  MOVLB  B
....................             }
.................... 
....................             In.B12 = 1;                                 // setbit in1
08148:  BSF    xAB.3
....................             if(FlashingFlag == 0)
0814A:  BTFSC  1A.1
0814C:  BRA    8152
....................             {
....................                Output.B12 = 0;           //Flash output1
0814E:  BCF    x9D.3
....................             }
08150:  BRA    8154
....................             else
....................             {
....................                Output.B12 = 1;
08152:  BSF    x9D.3
....................             }
.................... 
....................             if (~AutoTestFlag)
08154:  BTFSC  1A.4
08156:  BRA    8174
....................             {
....................                if(OutputBoth.B12 == 0)                  //Both output
08158:  BTFSC  xA5.3
0815A:  BRA    8166
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0815C:  BSF    F89.4
0815E:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08160:  BSF    F89.3
08162:  BCF    F92.3
....................                }
08164:  BRA    8174
....................                else
....................                {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,1);     //Buzzer
08166:  BTFSS  xA3.3
08168:  BRA    8170
0816A:  BSF    F89.4
0816C:  BCF    F92.4
0816E:  BRA    8174
....................                   else output_bit(Pbell,1);                          //Bell
08170:  BSF    F89.3
08172:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B12 ==0)&& (functointest_f ==0) && (Ack.B12 ==0))
08174:  BTFSC  xB7.3
08176:  BRA    820E
08178:  BTFSC  30.3
0817A:  BRA    820E
0817C:  BTFSC  xA9.3
0817E:  BRA    820E
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08180:  MOVLW  E0
08182:  MOVWF  FF6
08184:  MOVLW  07
08186:  MOVWF  FF7
08188:  MOVLB  0
0818A:  CALL   2ED0
....................                putc('\n',CH2);
0818E:  MOVLW  0A
08190:  MOVLB  C
08192:  MOVWF  x25
08194:  MOVLB  0
08196:  CALL   2E8A
....................                delay_ms(10);
0819A:  MOVLW  0A
0819C:  MOVLB  C
0819E:  MOVWF  x24
081A0:  MOVLB  0
081A2:  CALL   0952
....................                
....................                SendSMS.B12 =1;
081A6:  MOVLB  B
081A8:  BSF    xB7.3
....................                fprintf(CH2,"AT+CMGS=\"");
081AA:  MOVLW  EA
081AC:  MOVWF  FF6
081AE:  MOVLW  07
081B0:  MOVWF  FF7
081B2:  MOVLB  0
081B4:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
081B8:  MOVLW  09
081BA:  MOVWF  FEA
081BC:  MOVLW  8B
081BE:  MOVWF  FE9
081C0:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
081C4:  MOVLW  22
081C6:  MOVLB  C
081C8:  MOVWF  x25
081CA:  MOVLB  0
081CC:  CALL   2E8A
....................                putc('\n',CH2);
081D0:  MOVLW  0A
081D2:  MOVLB  C
081D4:  MOVWF  x25
081D6:  MOVLB  0
081D8:  CALL   2E8A
....................                delay_ms(50);
081DC:  MOVLW  32
081DE:  MOVLB  C
081E0:  MOVWF  x24
081E2:  MOVLB  0
081E4:  CALL   0952
....................               
....................               printf(SMS_Massage12);  
081E8:  MOVLW  0A
081EA:  MOVWF  FEA
081EC:  MOVLW  FA
081EE:  MOVWF  FE9
081F0:  CALL   6242
....................               putc('\n',CH2);
081F4:  MOVLW  0A
081F6:  MOVLB  C
081F8:  MOVWF  x25
081FA:  MOVLB  0
081FC:  CALL   2E8A
....................               putc(26,CH2);
08200:  MOVLW  1A
08202:  MOVLB  C
08204:  MOVWF  x25
08206:  MOVLB  0
08208:  CALL   2E8A
0820C:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................         }
.................... 
....................       }
0820E:  BRA    8216
....................       else if(FaultType.B12 == 1) Ack.B12 = 0;
08210:  BTFSS  xA1.3
08212:  BRA    8216
08214:  BCF    xA9.3
....................    }
08216:  BRA    82DC
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B12 ^ InputType.B12) == 1)
08218:  MOVLW  00
0821A:  BTFSC  x9B.3
0821C:  MOVLW  01
0821E:  MOVLB  C
08220:  MOVWF  x24
08222:  MOVLW  00
08224:  MOVLB  B
08226:  BTFSC  x9F.3
08228:  MOVLW  01
0822A:  MOVLB  C
0822C:  XORWF  x24,W
0822E:  SUBLW  01
08230:  BNZ   82D4
....................       {
....................          Output.B12 = 0;
08232:  MOVLB  B
08234:  BCF    x9D.3
....................          // SMS Sending   
....................             if((SendSMS.B12 ==0)&& (functointest_f ==0) && (Ack.B12 ==0))
08236:  BTFSC  xB7.3
08238:  BRA    82D0
0823A:  BTFSC  30.3
0823C:  BRA    82D0
0823E:  BTFSC  xA9.3
08240:  BRA    82D0
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08242:  MOVLW  F4
08244:  MOVWF  FF6
08246:  MOVLW  07
08248:  MOVWF  FF7
0824A:  MOVLB  0
0824C:  CALL   2ED0
....................                putc('\n',CH2);
08250:  MOVLW  0A
08252:  MOVLB  C
08254:  MOVWF  x25
08256:  MOVLB  0
08258:  CALL   2E8A
....................                delay_ms(10);
0825C:  MOVLW  0A
0825E:  MOVLB  C
08260:  MOVWF  x24
08262:  MOVLB  0
08264:  CALL   0952
....................                
....................                SendSMS.B12 =1;
08268:  MOVLB  B
0826A:  BSF    xB7.3
....................                fprintf(CH2,"AT+CMGS=\"");
0826C:  MOVLW  FE
0826E:  MOVWF  FF6
08270:  MOVLW  07
08272:  MOVWF  FF7
08274:  MOVLB  0
08276:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
0827A:  MOVLW  09
0827C:  MOVWF  FEA
0827E:  MOVLW  8B
08280:  MOVWF  FE9
08282:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
08286:  MOVLW  22
08288:  MOVLB  C
0828A:  MOVWF  x25
0828C:  MOVLB  0
0828E:  CALL   2E8A
....................                putc('\n',CH2);
08292:  MOVLW  0A
08294:  MOVLB  C
08296:  MOVWF  x25
08298:  MOVLB  0
0829A:  CALL   2E8A
....................                delay_ms(50);
0829E:  MOVLW  32
082A0:  MOVLB  C
082A2:  MOVWF  x24
082A4:  MOVLB  0
082A6:  CALL   0952
....................               
....................               printf(SMS_Massage12);  
082AA:  MOVLW  0A
082AC:  MOVWF  FEA
082AE:  MOVLW  FA
082B0:  MOVWF  FE9
082B2:  CALL   6242
....................               putc('\n',CH2);
082B6:  MOVLW  0A
082B8:  MOVLB  C
082BA:  MOVWF  x25
082BC:  MOVLB  0
082BE:  CALL   2E8A
....................               putc(26,CH2);
082C2:  MOVLW  1A
082C4:  MOVLB  C
082C6:  MOVWF  x25
082C8:  MOVLB  0
082CA:  CALL   2E8A
082CE:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................       }
082D0:  BRA    82DC
082D2:  MOVLB  C
....................       else
....................       {
....................          Output.B12 = 1;
082D4:  MOVLB  B
082D6:  BSF    x9D.3
....................          SendSMS.B12 =0;
082D8:  BCF    xB7.3
....................          functointest_f =0;
082DA:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if(AlarmIndicator.B13 == 1)    // Alarm Function
082DC:  BTFSS  xA7.4
082DE:  BRA    83F6
....................    {
....................       if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 1))|| In.B13 == 1)    // alarm1 occure and "Lock type"
082E0:  MOVLW  00
082E2:  BTFSC  x9B.4
082E4:  MOVLW  01
082E6:  MOVLB  C
082E8:  MOVWF  x24
082EA:  MOVLW  00
082EC:  MOVLB  B
082EE:  BTFSC  x9F.4
082F0:  MOVLW  01
082F2:  MOVLB  C
082F4:  XORWF  x24,W
082F6:  SUBLW  01
082F8:  BNZ   8300
082FA:  MOVLB  B
082FC:  BTFSC  xA1.4
082FE:  BRA    8306
08300:  MOVLB  B
08302:  BTFSS  xAB.4
08304:  BRA    83EE
....................       //if(Inputt.B13 == 0)
....................       {
....................          if(Ack.B13 == 0)
08306:  BTFSC  xA9.4
08308:  BRA    83EC
....................          {
....................             if(In.B13 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0830A:  BTFSC  xAB.4
0830C:  BRA    8326
0830E:  MOVLB  0
08310:  MOVF   x6A,W
08312:  SUBLW  0F
08314:  BTFSC  FD8.2
08316:  BRA    831C
08318:  MOVLB  B
0831A:  BRA    8326
....................             {
....................                TimeBase1s = 100 ;            //reload again
0831C:  MOVLW  64
0831E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
08320:  MOVFF  6B,1D
08324:  MOVLB  B
....................             }
.................... 
....................             In.B13 = 1;                                 // setbit in1
08326:  BSF    xAB.4
....................             if(FlashingFlag == 0)
08328:  BTFSC  1A.1
0832A:  BRA    8330
....................             {
....................                Output.B13 = 0;           //Flash output1
0832C:  BCF    x9D.4
....................             }
0832E:  BRA    8332
....................             else
....................             {
....................                Output.B13 = 1;
08330:  BSF    x9D.4
....................             }
.................... 
....................             if (~AutoTestFlag)
08332:  BTFSC  1A.4
08334:  BRA    8352
....................             {
....................                if(OutputBoth.B13 == 0)                  //Both output
08336:  BTFSC  xA5.4
08338:  BRA    8344
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0833A:  BSF    F89.4
0833C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0833E:  BSF    F89.3
08340:  BCF    F92.3
....................                }
08342:  BRA    8352
....................                else
....................                {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,1);     //Buzzer
08344:  BTFSS  xA3.4
08346:  BRA    834E
08348:  BSF    F89.4
0834A:  BCF    F92.4
0834C:  BRA    8352
....................                   else output_bit(Pbell,1);                          //Bell
0834E:  BSF    F89.3
08350:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B13 ==0)&& (functointest_f ==0) && (Ack.B13 ==0))
08352:  BTFSC  xB7.4
08354:  BRA    83EC
08356:  BTFSC  30.3
08358:  BRA    83EC
0835A:  BTFSC  xA9.4
0835C:  BRA    83EC
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0835E:  MOVLW  08
08360:  MOVWF  FF6
08362:  MOVLW  08
08364:  MOVWF  FF7
08366:  MOVLB  0
08368:  CALL   2ED0
....................                putc('\n',CH2);
0836C:  MOVLW  0A
0836E:  MOVLB  C
08370:  MOVWF  x25
08372:  MOVLB  0
08374:  CALL   2E8A
....................                delay_ms(10);
08378:  MOVLW  0A
0837A:  MOVLB  C
0837C:  MOVWF  x24
0837E:  MOVLB  0
08380:  CALL   0952
....................                
....................                SendSMS.B13 =1;
08384:  MOVLB  B
08386:  BSF    xB7.4
....................                fprintf(CH2,"AT+CMGS=\"");
08388:  MOVLW  12
0838A:  MOVWF  FF6
0838C:  MOVLW  08
0838E:  MOVWF  FF7
08390:  MOVLB  0
08392:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
08396:  MOVLW  09
08398:  MOVWF  FEA
0839A:  MOVLW  8B
0839C:  MOVWF  FE9
0839E:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
083A2:  MOVLW  22
083A4:  MOVLB  C
083A6:  MOVWF  x25
083A8:  MOVLB  0
083AA:  CALL   2E8A
....................                putc('\n',CH2);
083AE:  MOVLW  0A
083B0:  MOVLB  C
083B2:  MOVWF  x25
083B4:  MOVLB  0
083B6:  CALL   2E8A
....................                delay_ms(50);
083BA:  MOVLW  32
083BC:  MOVLB  C
083BE:  MOVWF  x24
083C0:  MOVLB  0
083C2:  CALL   0952
....................               
....................               printf(SMS_Massage13);  
083C6:  MOVLW  0B
083C8:  MOVWF  FEA
083CA:  MOVLW  1A
083CC:  MOVWF  FE9
083CE:  CALL   6242
....................               putc('\n',CH2);
083D2:  MOVLW  0A
083D4:  MOVLB  C
083D6:  MOVWF  x25
083D8:  MOVLB  0
083DA:  CALL   2E8A
....................               putc(26,CH2);
083DE:  MOVLW  1A
083E0:  MOVLB  C
083E2:  MOVWF  x25
083E4:  MOVLB  0
083E6:  CALL   2E8A
083EA:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
083EC:  BRA    83F4
....................       else if(FaultType.B13 == 1) Ack.B13 = 0;
083EE:  BTFSS  xA1.4
083F0:  BRA    83F4
083F2:  BCF    xA9.4
....................    }
083F4:  BRA    84BA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B13 ^ InputType.B13) == 1)
083F6:  MOVLW  00
083F8:  BTFSC  x9B.4
083FA:  MOVLW  01
083FC:  MOVLB  C
083FE:  MOVWF  x24
08400:  MOVLW  00
08402:  MOVLB  B
08404:  BTFSC  x9F.4
08406:  MOVLW  01
08408:  MOVLB  C
0840A:  XORWF  x24,W
0840C:  SUBLW  01
0840E:  BNZ   84B2
....................       {
....................          Output.B13 = 0;
08410:  MOVLB  B
08412:  BCF    x9D.4
....................          // SMS Sending   
....................             if((SendSMS.B13 ==0)&& (functointest_f ==0) && (Ack.B13 ==0))
08414:  BTFSC  xB7.4
08416:  BRA    84AE
08418:  BTFSC  30.3
0841A:  BRA    84AE
0841C:  BTFSC  xA9.4
0841E:  BRA    84AE
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08420:  MOVLW  1C
08422:  MOVWF  FF6
08424:  MOVLW  08
08426:  MOVWF  FF7
08428:  MOVLB  0
0842A:  CALL   2ED0
....................                putc('\n',CH2);
0842E:  MOVLW  0A
08430:  MOVLB  C
08432:  MOVWF  x25
08434:  MOVLB  0
08436:  CALL   2E8A
....................                delay_ms(10);
0843A:  MOVLW  0A
0843C:  MOVLB  C
0843E:  MOVWF  x24
08440:  MOVLB  0
08442:  CALL   0952
....................                
....................                SendSMS.B13 =1;
08446:  MOVLB  B
08448:  BSF    xB7.4
....................                fprintf(CH2,"AT+CMGS=\"");
0844A:  MOVLW  26
0844C:  MOVWF  FF6
0844E:  MOVLW  08
08450:  MOVWF  FF7
08452:  MOVLB  0
08454:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
08458:  MOVLW  09
0845A:  MOVWF  FEA
0845C:  MOVLW  8B
0845E:  MOVWF  FE9
08460:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
08464:  MOVLW  22
08466:  MOVLB  C
08468:  MOVWF  x25
0846A:  MOVLB  0
0846C:  CALL   2E8A
....................                putc('\n',CH2);
08470:  MOVLW  0A
08472:  MOVLB  C
08474:  MOVWF  x25
08476:  MOVLB  0
08478:  CALL   2E8A
....................                delay_ms(50);
0847C:  MOVLW  32
0847E:  MOVLB  C
08480:  MOVWF  x24
08482:  MOVLB  0
08484:  CALL   0952
....................               
....................               printf(SMS_Massage13);  
08488:  MOVLW  0B
0848A:  MOVWF  FEA
0848C:  MOVLW  1A
0848E:  MOVWF  FE9
08490:  CALL   6242
....................               putc('\n',CH2);
08494:  MOVLW  0A
08496:  MOVLB  C
08498:  MOVWF  x25
0849A:  MOVLB  0
0849C:  CALL   2E8A
....................               putc(26,CH2);
084A0:  MOVLW  1A
084A2:  MOVLB  C
084A4:  MOVWF  x25
084A6:  MOVLB  0
084A8:  CALL   2E8A
084AC:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................       }
084AE:  BRA    84BA
084B0:  MOVLB  C
....................       else
....................       {
....................          Output.B13 = 1;
084B2:  MOVLB  B
084B4:  BSF    x9D.4
....................          SendSMS.B13 =0;
084B6:  BCF    xB7.4
....................          functointest_f =0;
084B8:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if(AlarmIndicator.B14 == 1)    // Alarm Function
084BA:  BTFSS  xA7.5
084BC:  BRA    85D4
....................    {
....................       if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 1))|| In.B14 == 1)    // alarm1 occure and "Lock type"
084BE:  MOVLW  00
084C0:  BTFSC  x9B.5
084C2:  MOVLW  01
084C4:  MOVLB  C
084C6:  MOVWF  x24
084C8:  MOVLW  00
084CA:  MOVLB  B
084CC:  BTFSC  x9F.5
084CE:  MOVLW  01
084D0:  MOVLB  C
084D2:  XORWF  x24,W
084D4:  SUBLW  01
084D6:  BNZ   84DE
084D8:  MOVLB  B
084DA:  BTFSC  xA1.5
084DC:  BRA    84E4
084DE:  MOVLB  B
084E0:  BTFSS  xAB.5
084E2:  BRA    85CC
....................       //if(Inputt.B14 == 0)
....................       {
....................          if(Ack.B14 == 0)
084E4:  BTFSC  xA9.5
084E6:  BRA    85CA
....................          {
....................             if(In.B14 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
084E8:  BTFSC  xAB.5
084EA:  BRA    8504
084EC:  MOVLB  0
084EE:  MOVF   x6A,W
084F0:  SUBLW  0F
084F2:  BTFSC  FD8.2
084F4:  BRA    84FA
084F6:  MOVLB  B
084F8:  BRA    8504
....................             {
....................                TimeBase1s = 100 ;            //reload again
084FA:  MOVLW  64
084FC:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
084FE:  MOVFF  6B,1D
08502:  MOVLB  B
....................             }
.................... 
....................             In.B14 = 1;                                 // setbit in1
08504:  BSF    xAB.5
....................             if(FlashingFlag == 0)
08506:  BTFSC  1A.1
08508:  BRA    850E
....................             {
....................                Output.B14 = 0;           //Flash output1
0850A:  BCF    x9D.5
....................             }
0850C:  BRA    8510
....................             else
....................             {
....................                Output.B14 = 1;
0850E:  BSF    x9D.5
....................             }
.................... 
....................             if (~AutoTestFlag)
08510:  BTFSC  1A.4
08512:  BRA    8530
....................             {
....................                if(OutputBoth.B14 == 0)                  //Both output
08514:  BTFSC  xA5.5
08516:  BRA    8522
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
08518:  BSF    F89.4
0851A:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0851C:  BSF    F89.3
0851E:  BCF    F92.3
....................                }
08520:  BRA    8530
....................                else
....................                {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,1);     //Buzzer
08522:  BTFSS  xA3.5
08524:  BRA    852C
08526:  BSF    F89.4
08528:  BCF    F92.4
0852A:  BRA    8530
....................                   else output_bit(Pbell,1);                          //Bell
0852C:  BSF    F89.3
0852E:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B14 ==0)&& (functointest_f ==0) && (Ack.B14 ==0))
08530:  BTFSC  xB7.5
08532:  BRA    85CA
08534:  BTFSC  30.3
08536:  BRA    85CA
08538:  BTFSC  xA9.5
0853A:  BRA    85CA
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0853C:  MOVLW  30
0853E:  MOVWF  FF6
08540:  MOVLW  08
08542:  MOVWF  FF7
08544:  MOVLB  0
08546:  CALL   2ED0
....................                putc('\n',CH2);
0854A:  MOVLW  0A
0854C:  MOVLB  C
0854E:  MOVWF  x25
08550:  MOVLB  0
08552:  CALL   2E8A
....................                delay_ms(10);
08556:  MOVLW  0A
08558:  MOVLB  C
0855A:  MOVWF  x24
0855C:  MOVLB  0
0855E:  CALL   0952
....................                
....................                SendSMS.B14 =1;
08562:  MOVLB  B
08564:  BSF    xB7.5
....................                fprintf(CH2,"AT+CMGS=\"");
08566:  MOVLW  3A
08568:  MOVWF  FF6
0856A:  MOVLW  08
0856C:  MOVWF  FF7
0856E:  MOVLB  0
08570:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
08574:  MOVLW  09
08576:  MOVWF  FEA
08578:  MOVLW  8B
0857A:  MOVWF  FE9
0857C:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
08580:  MOVLW  22
08582:  MOVLB  C
08584:  MOVWF  x25
08586:  MOVLB  0
08588:  CALL   2E8A
....................                putc('\n',CH2);
0858C:  MOVLW  0A
0858E:  MOVLB  C
08590:  MOVWF  x25
08592:  MOVLB  0
08594:  CALL   2E8A
....................                delay_ms(50);
08598:  MOVLW  32
0859A:  MOVLB  C
0859C:  MOVWF  x24
0859E:  MOVLB  0
085A0:  CALL   0952
....................               
....................               printf(SMS_Massage14);  
085A4:  MOVLW  0B
085A6:  MOVWF  FEA
085A8:  MOVLW  3A
085AA:  MOVWF  FE9
085AC:  CALL   6242
....................               putc('\n',CH2);
085B0:  MOVLW  0A
085B2:  MOVLB  C
085B4:  MOVWF  x25
085B6:  MOVLB  0
085B8:  CALL   2E8A
....................               putc(26,CH2);
085BC:  MOVLW  1A
085BE:  MOVLB  C
085C0:  MOVWF  x25
085C2:  MOVLB  0
085C4:  CALL   2E8A
085C8:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
085CA:  BRA    85D2
....................       else if(FaultType.B14 == 1) Ack.B14 = 0;
085CC:  BTFSS  xA1.5
085CE:  BRA    85D2
085D0:  BCF    xA9.5
....................    }
085D2:  BRA    8698
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B14 ^ InputType.B14) == 1)
085D4:  MOVLW  00
085D6:  BTFSC  x9B.5
085D8:  MOVLW  01
085DA:  MOVLB  C
085DC:  MOVWF  x24
085DE:  MOVLW  00
085E0:  MOVLB  B
085E2:  BTFSC  x9F.5
085E4:  MOVLW  01
085E6:  MOVLB  C
085E8:  XORWF  x24,W
085EA:  SUBLW  01
085EC:  BNZ   8690
....................       {
....................          Output.B14 = 0;
085EE:  MOVLB  B
085F0:  BCF    x9D.5
....................          // SMS Sending   
....................             if((SendSMS.B14 ==0)&& (functointest_f ==0) && (Ack.B14 ==0))
085F2:  BTFSC  xB7.5
085F4:  BRA    868C
085F6:  BTFSC  30.3
085F8:  BRA    868C
085FA:  BTFSC  xA9.5
085FC:  BRA    868C
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
085FE:  MOVLW  44
08600:  MOVWF  FF6
08602:  MOVLW  08
08604:  MOVWF  FF7
08606:  MOVLB  0
08608:  CALL   2ED0
....................                putc('\n',CH2);
0860C:  MOVLW  0A
0860E:  MOVLB  C
08610:  MOVWF  x25
08612:  MOVLB  0
08614:  CALL   2E8A
....................                delay_ms(10);
08618:  MOVLW  0A
0861A:  MOVLB  C
0861C:  MOVWF  x24
0861E:  MOVLB  0
08620:  CALL   0952
....................                
....................                SendSMS.B14 =1;
08624:  MOVLB  B
08626:  BSF    xB7.5
....................                fprintf(CH2,"AT+CMGS=\"");
08628:  MOVLW  4E
0862A:  MOVWF  FF6
0862C:  MOVLW  08
0862E:  MOVWF  FF7
08630:  MOVLB  0
08632:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
08636:  MOVLW  09
08638:  MOVWF  FEA
0863A:  MOVLW  8B
0863C:  MOVWF  FE9
0863E:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
08642:  MOVLW  22
08644:  MOVLB  C
08646:  MOVWF  x25
08648:  MOVLB  0
0864A:  CALL   2E8A
....................                putc('\n',CH2);
0864E:  MOVLW  0A
08650:  MOVLB  C
08652:  MOVWF  x25
08654:  MOVLB  0
08656:  CALL   2E8A
....................                delay_ms(50);
0865A:  MOVLW  32
0865C:  MOVLB  C
0865E:  MOVWF  x24
08660:  MOVLB  0
08662:  CALL   0952
....................               
....................               printf(SMS_Massage14);  
08666:  MOVLW  0B
08668:  MOVWF  FEA
0866A:  MOVLW  3A
0866C:  MOVWF  FE9
0866E:  CALL   6242
....................               putc('\n',CH2);
08672:  MOVLW  0A
08674:  MOVLB  C
08676:  MOVWF  x25
08678:  MOVLB  0
0867A:  CALL   2E8A
....................               putc(26,CH2);
0867E:  MOVLW  1A
08680:  MOVLB  C
08682:  MOVWF  x25
08684:  MOVLB  0
08686:  CALL   2E8A
0868A:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................       }
0868C:  BRA    8698
0868E:  MOVLB  C
....................       else
....................       {
....................          Output.B14 = 1;
08690:  MOVLB  B
08692:  BSF    x9D.5
....................          SendSMS.B14 =0;
08694:  BCF    xB7.5
....................          functointest_f =0;
08696:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if(AlarmIndicator.B15 == 1)    // Alarm Function
08698:  BTFSS  xA7.6
0869A:  BRA    87B2
....................    {
....................       if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 1))|| In.B15 == 1)    // alarm1 occure and "Lock type"
0869C:  MOVLW  00
0869E:  BTFSC  x9B.6
086A0:  MOVLW  01
086A2:  MOVLB  C
086A4:  MOVWF  x24
086A6:  MOVLW  00
086A8:  MOVLB  B
086AA:  BTFSC  x9F.6
086AC:  MOVLW  01
086AE:  MOVLB  C
086B0:  XORWF  x24,W
086B2:  SUBLW  01
086B4:  BNZ   86BC
086B6:  MOVLB  B
086B8:  BTFSC  xA1.6
086BA:  BRA    86C2
086BC:  MOVLB  B
086BE:  BTFSS  xAB.6
086C0:  BRA    87AA
....................       //if(Inputt.B15 == 0)
....................       {
....................          if(Ack.B15 == 0)
086C2:  BTFSC  xA9.6
086C4:  BRA    87A8
....................          {
....................             if(In.B15 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
086C6:  BTFSC  xAB.6
086C8:  BRA    86E2
086CA:  MOVLB  0
086CC:  MOVF   x6A,W
086CE:  SUBLW  0F
086D0:  BTFSC  FD8.2
086D2:  BRA    86D8
086D4:  MOVLB  B
086D6:  BRA    86E2
....................             {
....................                TimeBase1s = 100 ;            //reload again
086D8:  MOVLW  64
086DA:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
086DC:  MOVFF  6B,1D
086E0:  MOVLB  B
....................             }
.................... 
....................             In.B15 = 1;                                 // setbit in1
086E2:  BSF    xAB.6
....................             if(FlashingFlag == 0)
086E4:  BTFSC  1A.1
086E6:  BRA    86EC
....................             {
....................                Output.B15 = 0;           //Flash output1
086E8:  BCF    x9D.6
....................             }
086EA:  BRA    86EE
....................             else
....................             {
....................                Output.B15 = 1;
086EC:  BSF    x9D.6
....................             }
.................... 
....................             if (~AutoTestFlag)
086EE:  BTFSC  1A.4
086F0:  BRA    870E
....................             {
....................                if(OutputBoth.B15 == 0)                  //Both output
086F2:  BTFSC  xA5.6
086F4:  BRA    8700
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
086F6:  BSF    F89.4
086F8:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
086FA:  BSF    F89.3
086FC:  BCF    F92.3
....................                }
086FE:  BRA    870E
....................                else
....................                {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,1);     //Buzzer
08700:  BTFSS  xA3.6
08702:  BRA    870A
08704:  BSF    F89.4
08706:  BCF    F92.4
08708:  BRA    870E
....................                   else output_bit(Pbell,1);                          //Bell
0870A:  BSF    F89.3
0870C:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B15 ==0)&& (functointest_f ==0) && (Ack.B15 ==0))
0870E:  BTFSC  xB7.6
08710:  BRA    87A8
08712:  BTFSC  30.3
08714:  BRA    87A8
08716:  BTFSC  xA9.6
08718:  BRA    87A8
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0871A:  MOVLW  58
0871C:  MOVWF  FF6
0871E:  MOVLW  08
08720:  MOVWF  FF7
08722:  MOVLB  0
08724:  CALL   2ED0
....................                putc('\n',CH2);
08728:  MOVLW  0A
0872A:  MOVLB  C
0872C:  MOVWF  x25
0872E:  MOVLB  0
08730:  CALL   2E8A
....................                delay_ms(10);
08734:  MOVLW  0A
08736:  MOVLB  C
08738:  MOVWF  x24
0873A:  MOVLB  0
0873C:  CALL   0952
....................                
....................                SendSMS.B15 =1;
08740:  MOVLB  B
08742:  BSF    xB7.6
....................                fprintf(CH2,"AT+CMGS=\"");
08744:  MOVLW  62
08746:  MOVWF  FF6
08748:  MOVLW  08
0874A:  MOVWF  FF7
0874C:  MOVLB  0
0874E:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
08752:  MOVLW  09
08754:  MOVWF  FEA
08756:  MOVLW  8B
08758:  MOVWF  FE9
0875A:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
0875E:  MOVLW  22
08760:  MOVLB  C
08762:  MOVWF  x25
08764:  MOVLB  0
08766:  CALL   2E8A
....................                putc('\n',CH2);
0876A:  MOVLW  0A
0876C:  MOVLB  C
0876E:  MOVWF  x25
08770:  MOVLB  0
08772:  CALL   2E8A
....................                delay_ms(50);
08776:  MOVLW  32
08778:  MOVLB  C
0877A:  MOVWF  x24
0877C:  MOVLB  0
0877E:  CALL   0952
....................               
....................               printf(SMS_Massage15);  
08782:  MOVLW  0B
08784:  MOVWF  FEA
08786:  MOVLW  5A
08788:  MOVWF  FE9
0878A:  CALL   6242
....................               putc('\n',CH2);
0878E:  MOVLW  0A
08790:  MOVLB  C
08792:  MOVWF  x25
08794:  MOVLB  0
08796:  CALL   2E8A
....................               putc(26,CH2);
0879A:  MOVLW  1A
0879C:  MOVLB  C
0879E:  MOVWF  x25
087A0:  MOVLB  0
087A2:  CALL   2E8A
087A6:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
087A8:  BRA    87B0
....................       else if(FaultType.B15 == 1) Ack.B15 = 0;
087AA:  BTFSS  xA1.6
087AC:  BRA    87B0
087AE:  BCF    xA9.6
....................    }
087B0:  BRA    8876
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B15 ^ InputType.B15) == 1)
087B2:  MOVLW  00
087B4:  BTFSC  x9B.6
087B6:  MOVLW  01
087B8:  MOVLB  C
087BA:  MOVWF  x24
087BC:  MOVLW  00
087BE:  MOVLB  B
087C0:  BTFSC  x9F.6
087C2:  MOVLW  01
087C4:  MOVLB  C
087C6:  XORWF  x24,W
087C8:  SUBLW  01
087CA:  BNZ   886E
....................       {
....................          Output.B15 = 0;
087CC:  MOVLB  B
087CE:  BCF    x9D.6
....................          // SMS Sending   
....................             if((SendSMS.B15 ==0)&& (functointest_f ==0) && (Ack.B15 ==0))
087D0:  BTFSC  xB7.6
087D2:  BRA    886A
087D4:  BTFSC  30.3
087D6:  BRA    886A
087D8:  BTFSC  xA9.6
087DA:  BRA    886A
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
087DC:  MOVLW  6C
087DE:  MOVWF  FF6
087E0:  MOVLW  08
087E2:  MOVWF  FF7
087E4:  MOVLB  0
087E6:  CALL   2ED0
....................                putc('\n',CH2);
087EA:  MOVLW  0A
087EC:  MOVLB  C
087EE:  MOVWF  x25
087F0:  MOVLB  0
087F2:  CALL   2E8A
....................                delay_ms(10);
087F6:  MOVLW  0A
087F8:  MOVLB  C
087FA:  MOVWF  x24
087FC:  MOVLB  0
087FE:  CALL   0952
....................                
....................                SendSMS.B15 =1;
08802:  MOVLB  B
08804:  BSF    xB7.6
....................                fprintf(CH2,"AT+CMGS=\"");
08806:  MOVLW  76
08808:  MOVWF  FF6
0880A:  MOVLW  08
0880C:  MOVWF  FF7
0880E:  MOVLB  0
08810:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
08814:  MOVLW  09
08816:  MOVWF  FEA
08818:  MOVLW  8B
0881A:  MOVWF  FE9
0881C:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
08820:  MOVLW  22
08822:  MOVLB  C
08824:  MOVWF  x25
08826:  MOVLB  0
08828:  CALL   2E8A
....................                putc('\n',CH2);
0882C:  MOVLW  0A
0882E:  MOVLB  C
08830:  MOVWF  x25
08832:  MOVLB  0
08834:  CALL   2E8A
....................                delay_ms(50);
08838:  MOVLW  32
0883A:  MOVLB  C
0883C:  MOVWF  x24
0883E:  MOVLB  0
08840:  CALL   0952
....................               
....................               printf(SMS_Massage15);  
08844:  MOVLW  0B
08846:  MOVWF  FEA
08848:  MOVLW  5A
0884A:  MOVWF  FE9
0884C:  CALL   6242
....................               putc('\n',CH2);
08850:  MOVLW  0A
08852:  MOVLB  C
08854:  MOVWF  x25
08856:  MOVLB  0
08858:  CALL   2E8A
....................               putc(26,CH2);
0885C:  MOVLW  1A
0885E:  MOVLB  C
08860:  MOVWF  x25
08862:  MOVLB  0
08864:  CALL   2E8A
08868:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................       }
0886A:  BRA    8876
0886C:  MOVLB  C
....................       else
....................       {
....................          Output.B15 = 1;
0886E:  MOVLB  B
08870:  BSF    x9D.6
....................          SendSMS.B15 =0;
08872:  BCF    xB7.6
....................          functointest_f =0;
08874:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if(AlarmIndicator.B16 == 1)    // Alarm Function
08876:  BTFSS  xA7.7
08878:  BRA    8990
....................    {
....................       if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 1))|| In.B16 == 1)    // alarm1 occure and "Lock type"
0887A:  MOVLW  00
0887C:  BTFSC  x9B.7
0887E:  MOVLW  01
08880:  MOVLB  C
08882:  MOVWF  x24
08884:  MOVLW  00
08886:  MOVLB  B
08888:  BTFSC  x9F.7
0888A:  MOVLW  01
0888C:  MOVLB  C
0888E:  XORWF  x24,W
08890:  SUBLW  01
08892:  BNZ   889A
08894:  MOVLB  B
08896:  BTFSC  xA1.7
08898:  BRA    88A0
0889A:  MOVLB  B
0889C:  BTFSS  xAB.7
0889E:  BRA    8988
....................       //if(Inputt.B16 == 0)
....................       {
....................          if(Ack.B16 == 0)
088A0:  BTFSC  xA9.7
088A2:  BRA    8986
....................          {
....................             if(In.B16 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
088A4:  BTFSC  xAB.7
088A6:  BRA    88C0
088A8:  MOVLB  0
088AA:  MOVF   x6A,W
088AC:  SUBLW  0F
088AE:  BTFSC  FD8.2
088B0:  BRA    88B6
088B2:  MOVLB  B
088B4:  BRA    88C0
....................             {
....................                TimeBase1s = 100 ;            //reload again
088B6:  MOVLW  64
088B8:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
088BA:  MOVFF  6B,1D
088BE:  MOVLB  B
....................             }
.................... 
....................             In.B16 = 1;                                 // setbit in1
088C0:  BSF    xAB.7
....................             if(FlashingFlag == 0)
088C2:  BTFSC  1A.1
088C4:  BRA    88CA
....................             {
....................                Output.B16 = 0;           //Flash output1
088C6:  BCF    x9D.7
....................             }
088C8:  BRA    88CC
....................             else
....................             {
....................                Output.B16 = 1;
088CA:  BSF    x9D.7
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
088CC:  BTFSC  1A.4
088CE:  BRA    88EC
....................             {
....................                if(OutputBoth.B16 == 0)                  //Both output
088D0:  BTFSC  xA5.7
088D2:  BRA    88DE
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
088D4:  BSF    F89.4
088D6:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
088D8:  BSF    F89.3
088DA:  BCF    F92.3
....................                }
088DC:  BRA    88EC
....................                else
....................                {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,1);     //Buzzer
088DE:  BTFSS  xA3.7
088E0:  BRA    88E8
088E2:  BSF    F89.4
088E4:  BCF    F92.4
088E6:  BRA    88EC
....................                   else output_bit(Pbell,1);                          //Bell
088E8:  BSF    F89.3
088EA:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B16 ==0)&& (functointest_f ==0) && (Ack.B16 ==0))
088EC:  BTFSC  xB7.7
088EE:  BRA    8986
088F0:  BTFSC  30.3
088F2:  BRA    8986
088F4:  BTFSC  xA9.7
088F6:  BRA    8986
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
088F8:  MOVLW  80
088FA:  MOVWF  FF6
088FC:  MOVLW  08
088FE:  MOVWF  FF7
08900:  MOVLB  0
08902:  CALL   2ED0
....................                putc('\n',CH2);
08906:  MOVLW  0A
08908:  MOVLB  C
0890A:  MOVWF  x25
0890C:  MOVLB  0
0890E:  CALL   2E8A
....................                delay_ms(10);
08912:  MOVLW  0A
08914:  MOVLB  C
08916:  MOVWF  x24
08918:  MOVLB  0
0891A:  CALL   0952
....................                
....................                SendSMS.B16 =1;
0891E:  MOVLB  B
08920:  BSF    xB7.7
....................                fprintf(CH2,"AT+CMGS=\"");
08922:  MOVLW  8A
08924:  MOVWF  FF6
08926:  MOVLW  08
08928:  MOVWF  FF7
0892A:  MOVLB  0
0892C:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
08930:  MOVLW  09
08932:  MOVWF  FEA
08934:  MOVLW  8B
08936:  MOVWF  FE9
08938:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
0893C:  MOVLW  22
0893E:  MOVLB  C
08940:  MOVWF  x25
08942:  MOVLB  0
08944:  CALL   2E8A
....................                putc('\n',CH2);
08948:  MOVLW  0A
0894A:  MOVLB  C
0894C:  MOVWF  x25
0894E:  MOVLB  0
08950:  CALL   2E8A
....................                delay_ms(50);
08954:  MOVLW  32
08956:  MOVLB  C
08958:  MOVWF  x24
0895A:  MOVLB  0
0895C:  CALL   0952
....................               
....................               printf(SMS_Massage16);  
08960:  MOVLW  0B
08962:  MOVWF  FEA
08964:  MOVLW  7A
08966:  MOVWF  FE9
08968:  CALL   6242
....................               putc('\n',CH2);
0896C:  MOVLW  0A
0896E:  MOVLB  C
08970:  MOVWF  x25
08972:  MOVLB  0
08974:  CALL   2E8A
....................               putc(26,CH2);
08978:  MOVLW  1A
0897A:  MOVLB  C
0897C:  MOVWF  x25
0897E:  MOVLB  0
08980:  CALL   2E8A
08984:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
08986:  BRA    898E
....................       else if(FaultType.B16 == 1) Ack.B16 = 0;
08988:  BTFSS  xA1.7
0898A:  BRA    898E
0898C:  BCF    xA9.7
....................    }
0898E:  BRA    8A54
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B16 ^ InputType.B16) == 1)
08990:  MOVLW  00
08992:  BTFSC  x9B.7
08994:  MOVLW  01
08996:  MOVLB  C
08998:  MOVWF  x24
0899A:  MOVLW  00
0899C:  MOVLB  B
0899E:  BTFSC  x9F.7
089A0:  MOVLW  01
089A2:  MOVLB  C
089A4:  XORWF  x24,W
089A6:  SUBLW  01
089A8:  BNZ   8A4C
....................       {
....................          Output.B16 = 0;
089AA:  MOVLB  B
089AC:  BCF    x9D.7
....................          // SMS Sending   
....................             if((SendSMS.B16 ==0)&& (functointest_f ==0) && (Ack.B16 ==0))
089AE:  BTFSC  xB7.7
089B0:  BRA    8A48
089B2:  BTFSC  30.3
089B4:  BRA    8A48
089B6:  BTFSC  xA9.7
089B8:  BRA    8A48
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
089BA:  MOVLW  94
089BC:  MOVWF  FF6
089BE:  MOVLW  08
089C0:  MOVWF  FF7
089C2:  MOVLB  0
089C4:  CALL   2ED0
....................                putc('\n',CH2);
089C8:  MOVLW  0A
089CA:  MOVLB  C
089CC:  MOVWF  x25
089CE:  MOVLB  0
089D0:  CALL   2E8A
....................                delay_ms(10);
089D4:  MOVLW  0A
089D6:  MOVLB  C
089D8:  MOVWF  x24
089DA:  MOVLB  0
089DC:  CALL   0952
....................                
....................                SendSMS.B16 =1;
089E0:  MOVLB  B
089E2:  BSF    xB7.7
....................                fprintf(CH2,"AT+CMGS=\"");
089E4:  MOVLW  9E
089E6:  MOVWF  FF6
089E8:  MOVLW  08
089EA:  MOVWF  FF7
089EC:  MOVLB  0
089EE:  CALL   2ED0
....................                fprintf(CH2,sms_phonenumber);
089F2:  MOVLW  09
089F4:  MOVWF  FEA
089F6:  MOVLW  8B
089F8:  MOVWF  FE9
089FA:  CALL   6242
....................                
....................                fprintf(CH2,"\"");
089FE:  MOVLW  22
08A00:  MOVLB  C
08A02:  MOVWF  x25
08A04:  MOVLB  0
08A06:  CALL   2E8A
....................                putc('\n',CH2);
08A0A:  MOVLW  0A
08A0C:  MOVLB  C
08A0E:  MOVWF  x25
08A10:  MOVLB  0
08A12:  CALL   2E8A
....................                delay_ms(50);
08A16:  MOVLW  32
08A18:  MOVLB  C
08A1A:  MOVWF  x24
08A1C:  MOVLB  0
08A1E:  CALL   0952
....................               
....................               printf(SMS_Massage16);  
08A22:  MOVLW  0B
08A24:  MOVWF  FEA
08A26:  MOVLW  7A
08A28:  MOVWF  FE9
08A2A:  CALL   6242
....................               putc('\n',CH2);
08A2E:  MOVLW  0A
08A30:  MOVLB  C
08A32:  MOVWF  x25
08A34:  MOVLB  0
08A36:  CALL   2E8A
....................               putc(26,CH2);
08A3A:  MOVLW  1A
08A3C:  MOVLB  C
08A3E:  MOVWF  x25
08A40:  MOVLB  0
08A42:  CALL   2E8A
08A46:  MOVLB  B
....................             }
....................             ///////////////////////////////////
....................       }
08A48:  BRA    8A54
08A4A:  MOVLB  C
....................       else
....................       {
....................          Output.B16 = 1;
08A4C:  MOVLB  B
08A4E:  BSF    x9D.7
....................          SendSMS.B16 =0;
08A50:  BCF    xB7.7
....................          functointest_f =0;
08A52:  BCF    30.3
....................       }
....................    }
.................... //}
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// AUTO RESET ///////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08A54:  MOVLW  00
08A56:  BTFSC  x9A.0
08A58:  MOVLW  01
08A5A:  MOVLB  C
08A5C:  MOVWF  x24
08A5E:  MOVLW  00
08A60:  MOVLB  B
08A62:  BTFSC  x9E.0
08A64:  MOVLW  01
08A66:  MOVLB  C
08A68:  XORWF  x24,W
08A6A:  SUBLW  01
08A6C:  BNZ   8A76
08A6E:  MOVLB  B
08A70:  BTFSS  xA0.0
08A72:  BRA    8A7C
08A74:  MOVLB  C
08A76:  BTFSS  1A.5
08A78:  BRA    8B4C
08A7A:  MOVLB  B
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
08A7C:  BTFSC  xAC.0
08A7E:  BRA    8A9C
08A80:  MOVLB  0
08A82:  MOVF   x6A,W
08A84:  SUBLW  0F
08A86:  BTFSC  FD8.2
08A88:  BRA    8A8E
08A8A:  MOVLB  B
08A8C:  BRA    8A9C
08A8E:  MOVLB  B
08A90:  BTFSC  xA8.0
08A92:  BRA    8A9C
....................       {
....................             TimeBase1s = 100 ;            //reload again
08A94:  MOVLW  64
08A96:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
08A98:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B1 = 1;
08A9C:  BSF    xAC.0
....................       if(Ack.B1 == 0)
08A9E:  BTFSC  xA8.0
08AA0:  BRA    8AD0
....................       {
....................          if(FlashingFlag == 0)
08AA2:  BTFSC  1A.1
08AA4:  BRA    8AAA
....................             {
....................                Output.B1 = 0;           //Flash output1
08AA6:  BCF    x9C.0
....................             }
08AA8:  BRA    8AAC
....................             else
....................             {
....................                Output.B1 = 1;
08AAA:  BSF    x9C.0
....................             }
....................          if (~AutoTestFlag)
08AAC:  BTFSC  1A.4
08AAE:  BRA    8AD0
....................          {
....................             if(AlarmIndicator.B1 == 1){
08AB0:  BTFSS  xA6.0
08AB2:  BRA    8AD0
....................                 if(OutputBoth.B1 == 0)        //Both output
08AB4:  BTFSC  xA4.0
08AB6:  BRA    8AC2
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
08AB8:  BSF    F89.4
08ABA:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08ABC:  BSF    F89.3
08ABE:  BCF    F92.3
....................                 }
08AC0:  BRA    8AD0
....................                 else
....................                 {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
08AC2:  BTFSS  xA2.0
08AC4:  BRA    8ACC
08AC6:  BSF    F89.4
08AC8:  BCF    F92.4
08ACA:  BRA    8AD0
....................                   else output_bit(Pbell,1);                          //Bell
08ACC:  BSF    F89.3
08ACE:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08AD0:  MOVLW  01
08AD2:  MOVLB  C
08AD4:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
08AD6:  MOVLB  B
08AD8:  BTFSC  xB6.0
08ADA:  BRA    8B4A
08ADC:  BTFSC  30.3
08ADE:  BRA    8B4A
08AE0:  BTFSC  xA8.0
08AE2:  BRA    8B4A
....................       {
....................          SendSMS.B1 =1;
08AE4:  BSF    xB6.0
....................          fprintf(CH2,"AT+CMGS=\"");
08AE6:  MOVLW  A8
08AE8:  MOVWF  FF6
08AEA:  MOVLW  08
08AEC:  MOVWF  FF7
08AEE:  MOVLB  0
08AF0:  CALL   2ED0
....................          fprintf(CH2,sms_phonenumber);
08AF4:  MOVLW  09
08AF6:  MOVWF  FEA
08AF8:  MOVLW  8B
08AFA:  MOVWF  FE9
08AFC:  CALL   6242
....................          
....................          fprintf(CH2,"\"");
08B00:  MOVLW  22
08B02:  MOVLB  C
08B04:  MOVWF  x25
08B06:  MOVLB  0
08B08:  CALL   2E8A
....................          putc('\n',CH2);
08B0C:  MOVLW  0A
08B0E:  MOVLB  C
08B10:  MOVWF  x25
08B12:  MOVLB  0
08B14:  CALL   2E8A
....................          delay_ms(50);
08B18:  MOVLW  32
08B1A:  MOVLB  C
08B1C:  MOVWF  x24
08B1E:  MOVLB  0
08B20:  CALL   0952
....................         
....................         fprintf(CH2,SMS_Massage1);   
08B24:  MOVLW  09
08B26:  MOVWF  FEA
08B28:  MOVLW  9A
08B2A:  MOVWF  FE9
08B2C:  CALL   6242
....................         putc('\n',CH2);
08B30:  MOVLW  0A
08B32:  MOVLB  C
08B34:  MOVWF  x25
08B36:  MOVLB  0
08B38:  CALL   2E8A
....................        putc(26,CH2);
08B3C:  MOVLW  1A
08B3E:  MOVLB  C
08B40:  MOVWF  x25
08B42:  MOVLB  0
08B44:  CALL   2E8A
08B48:  MOVLB  B
....................       }
....................    }
08B4A:  BRA    8BF6
....................    else if(FaultType.B1 == 0)
08B4C:  MOVLB  B
08B4E:  BTFSC  xA0.0
08B50:  BRA    8BF6
....................    {
....................       In2.B1 = 0x00;
08B52:  BCF    xAC.0
....................       Ack.B1 = 0;
08B54:  BCF    xA8.0
....................       Output.B1 = 1;      //Off LED
08B56:  BSF    x9C.0
....................       
....................       SendSMS.B1 =0;// Clear SMS
08B58:  BCF    xB6.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0)&& inputflag ==0)      //If Buzzer or Both
08B5A:  BTFSC  xA2.0
08B5C:  BRA    8B62
08B5E:  BTFSC  xA4.0
08B60:  BRA    8B84
08B62:  MOVLB  C
08B64:  MOVF   x17,F
08B66:  BTFSC  FD8.2
08B68:  BRA    8B6E
08B6A:  MOVLB  B
08B6C:  BRA    8B84
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
08B6E:  MOVLW  01
08B70:  MOVWF  x23
08B72:  MOVLB  0
08B74:  CALL   6268
08B78:  DECFSZ 01,W
08B7A:  BRA    8B7E
08B7C:  BRA    8B82
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
08B7E:  BCF    F89.4
08B80:  BCF    F92.4
08B82:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0)&& inputflag ==0)  //If Bell or Both
08B84:  BTFSS  xA2.0
08B86:  BRA    8B8C
08B88:  BTFSC  xA4.0
08B8A:  BRA    8BAE
08B8C:  MOVLB  C
08B8E:  MOVF   x17,F
08B90:  BTFSC  FD8.2
08B92:  BRA    8B98
08B94:  MOVLB  B
08B96:  BRA    8BAE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08B98:  MOVLW  02
08B9A:  MOVWF  x23
08B9C:  MOVLB  0
08B9E:  CALL   6268
08BA2:  DECFSZ 01,W
08BA4:  BRA    8BA8
08BA6:  BRA    8BAC
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08BA8:  BCF    F89.3
08BAA:  BCF    F92.3
08BAC:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
08BAE:  BTFSC  xAC.0
08BB0:  BRA    8BF6
08BB2:  BTFSC  xAC.1
08BB4:  BRA    8BF6
08BB6:  BTFSC  xAC.2
08BB8:  BRA    8BF6
08BBA:  BTFSC  xAC.3
08BBC:  BRA    8BF6
08BBE:  BTFSC  xAC.4
08BC0:  BRA    8BF6
08BC2:  BTFSC  xAC.5
08BC4:  BRA    8BF6
08BC6:  BTFSC  xAC.6
08BC8:  BRA    8BF6
08BCA:  BTFSC  xAC.7
08BCC:  BRA    8BF6
08BCE:  BTFSC  xAD.0
08BD0:  BRA    8BF6
08BD2:  BTFSC  xAD.1
08BD4:  BRA    8BF6
08BD6:  BTFSC  xAD.2
08BD8:  BRA    8BF6
08BDA:  BTFSC  xAD.3
08BDC:  BRA    8BF6
08BDE:  BTFSC  xAD.4
08BE0:  BRA    8BF6
08BE2:  BTFSC  xAD.5
08BE4:  BRA    8BF6
08BE6:  BTFSC  xAD.6
08BE8:  BRA    8BF6
08BEA:  BTFSC  xAD.7
08BEC:  BRA    8BF6
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
08BEE:  BCF    F89.3
08BF0:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08BF2:  BCF    F89.4
08BF4:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08BF6:  MOVLW  00
08BF8:  BTFSC  x9A.1
08BFA:  MOVLW  01
08BFC:  MOVLB  C
08BFE:  MOVWF  x24
08C00:  MOVLW  00
08C02:  MOVLB  B
08C04:  BTFSC  x9E.1
08C06:  MOVLW  01
08C08:  MOVLB  C
08C0A:  XORWF  x24,W
08C0C:  SUBLW  01
08C0E:  BNZ   8C18
08C10:  MOVLB  B
08C12:  BTFSS  xA0.1
08C14:  BRA    8C1E
08C16:  MOVLB  C
08C18:  BTFSS  1A.5
08C1A:  BRA    8CEE
08C1C:  MOVLB  B
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
08C1E:  BTFSC  xAC.1
08C20:  BRA    8C3E
08C22:  MOVLB  0
08C24:  MOVF   x6A,W
08C26:  SUBLW  0F
08C28:  BTFSC  FD8.2
08C2A:  BRA    8C30
08C2C:  MOVLB  B
08C2E:  BRA    8C3E
08C30:  MOVLB  B
08C32:  BTFSC  xA8.1
08C34:  BRA    8C3E
....................       {
....................             TimeBase1s = 100 ;            //reload again
08C36:  MOVLW  64
08C38:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
08C3A:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B2 = 1;
08C3E:  BSF    xAC.1
....................       if(Ack.B2 == 0)
08C40:  BTFSC  xA8.1
08C42:  BRA    8C72
....................       {
....................          if(FlashingFlag == 0)
08C44:  BTFSC  1A.1
08C46:  BRA    8C4C
....................             {
....................                Output.B2 = 0;           //Flash output1
08C48:  BCF    x9C.1
....................             }
08C4A:  BRA    8C4E
....................             else
....................             {
....................                Output.B2 = 1;
08C4C:  BSF    x9C.1
....................             }
....................          if (~AutoTestFlag)
08C4E:  BTFSC  1A.4
08C50:  BRA    8C72
....................          {
....................             if(AlarmIndicator.B2 == 1){
08C52:  BTFSS  xA6.1
08C54:  BRA    8C72
....................                 if(OutputBoth.B2 == 0)        //Both output
08C56:  BTFSC  xA4.1
08C58:  BRA    8C64
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
08C5A:  BSF    F89.4
08C5C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08C5E:  BSF    F89.3
08C60:  BCF    F92.3
....................                 }
08C62:  BRA    8C72
....................                 else
....................                 {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
08C64:  BTFSS  xA2.1
08C66:  BRA    8C6E
08C68:  BSF    F89.4
08C6A:  BCF    F92.4
08C6C:  BRA    8C72
....................                   else output_bit(Pbell,1);                          //Bell
08C6E:  BSF    F89.3
08C70:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08C72:  MOVLW  01
08C74:  MOVLB  C
08C76:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
08C78:  MOVLB  B
08C7A:  BTFSC  xB6.1
08C7C:  BRA    8CEC
08C7E:  BTFSC  30.3
08C80:  BRA    8CEC
08C82:  BTFSC  xA8.1
08C84:  BRA    8CEC
....................       {
....................          SendSMS.B2 =1;
08C86:  BSF    xB6.1
....................          fprintf(CH2,"AT+CMGS=\"");
08C88:  MOVLW  B2
08C8A:  MOVWF  FF6
08C8C:  MOVLW  08
08C8E:  MOVWF  FF7
08C90:  MOVLB  0
08C92:  CALL   2ED0
....................          fprintf(CH2,sms_phonenumber);
08C96:  MOVLW  09
08C98:  MOVWF  FEA
08C9A:  MOVLW  8B
08C9C:  MOVWF  FE9
08C9E:  CALL   6242
....................          
....................          fprintf(CH2,"\"");
08CA2:  MOVLW  22
08CA4:  MOVLB  C
08CA6:  MOVWF  x25
08CA8:  MOVLB  0
08CAA:  CALL   2E8A
....................          putc('\n',CH2);
08CAE:  MOVLW  0A
08CB0:  MOVLB  C
08CB2:  MOVWF  x25
08CB4:  MOVLB  0
08CB6:  CALL   2E8A
....................          delay_ms(50);
08CBA:  MOVLW  32
08CBC:  MOVLB  C
08CBE:  MOVWF  x24
08CC0:  MOVLB  0
08CC2:  CALL   0952
....................         
....................         fprintf(CH2,SMS_Massage2); 
08CC6:  MOVLW  09
08CC8:  MOVWF  FEA
08CCA:  MOVLW  BA
08CCC:  MOVWF  FE9
08CCE:  CALL   6242
....................         putc('\n',CH2);
08CD2:  MOVLW  0A
08CD4:  MOVLB  C
08CD6:  MOVWF  x25
08CD8:  MOVLB  0
08CDA:  CALL   2E8A
....................        putc(26,CH2);
08CDE:  MOVLW  1A
08CE0:  MOVLB  C
08CE2:  MOVWF  x25
08CE4:  MOVLB  0
08CE6:  CALL   2E8A
08CEA:  MOVLB  B
....................       }
....................    }
08CEC:  BRA    8D98
....................    else if(FaultType.B2 == 0)
08CEE:  MOVLB  B
08CF0:  BTFSC  xA0.1
08CF2:  BRA    8D98
....................    {
....................       In2.B2 = 0x00;
08CF4:  BCF    xAC.1
....................       Ack.B2 = 0;
08CF6:  BCF    xA8.1
....................       Output.B2 = 1;      //Off LED
08CF8:  BSF    x9C.1
....................       
....................       SendSMS.B2 =0;// Clear SMS
08CFA:  BCF    xB6.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0)&& inputflag ==0)      //If Buzzer or Both
08CFC:  BTFSC  xA2.1
08CFE:  BRA    8D04
08D00:  BTFSC  xA4.1
08D02:  BRA    8D26
08D04:  MOVLB  C
08D06:  MOVF   x17,F
08D08:  BTFSC  FD8.2
08D0A:  BRA    8D10
08D0C:  MOVLB  B
08D0E:  BRA    8D26
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
08D10:  MOVLW  01
08D12:  MOVWF  x23
08D14:  MOVLB  0
08D16:  CALL   6268
08D1A:  DECFSZ 01,W
08D1C:  BRA    8D20
08D1E:  BRA    8D24
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
08D20:  BCF    F89.4
08D22:  BCF    F92.4
08D24:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0)&& inputflag ==0)  //If Bell or Both
08D26:  BTFSS  xA2.1
08D28:  BRA    8D2E
08D2A:  BTFSC  xA4.1
08D2C:  BRA    8D50
08D2E:  MOVLB  C
08D30:  MOVF   x17,F
08D32:  BTFSC  FD8.2
08D34:  BRA    8D3A
08D36:  MOVLB  B
08D38:  BRA    8D50
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08D3A:  MOVLW  02
08D3C:  MOVWF  x23
08D3E:  MOVLB  0
08D40:  CALL   6268
08D44:  DECFSZ 01,W
08D46:  BRA    8D4A
08D48:  BRA    8D4E
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08D4A:  BCF    F89.3
08D4C:  BCF    F92.3
08D4E:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
08D50:  BTFSC  xAC.0
08D52:  BRA    8D98
08D54:  BTFSC  xAC.1
08D56:  BRA    8D98
08D58:  BTFSC  xAC.2
08D5A:  BRA    8D98
08D5C:  BTFSC  xAC.3
08D5E:  BRA    8D98
08D60:  BTFSC  xAC.4
08D62:  BRA    8D98
08D64:  BTFSC  xAC.5
08D66:  BRA    8D98
08D68:  BTFSC  xAC.6
08D6A:  BRA    8D98
08D6C:  BTFSC  xAC.7
08D6E:  BRA    8D98
08D70:  BTFSC  xAD.0
08D72:  BRA    8D98
08D74:  BTFSC  xAD.1
08D76:  BRA    8D98
08D78:  BTFSC  xAD.2
08D7A:  BRA    8D98
08D7C:  BTFSC  xAD.3
08D7E:  BRA    8D98
08D80:  BTFSC  xAD.4
08D82:  BRA    8D98
08D84:  BTFSC  xAD.5
08D86:  BRA    8D98
08D88:  BTFSC  xAD.6
08D8A:  BRA    8D98
08D8C:  BTFSC  xAD.7
08D8E:  BRA    8D98
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
08D90:  BCF    F89.3
08D92:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08D94:  BCF    F89.4
08D96:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08D98:  MOVLW  00
08D9A:  BTFSC  x9A.2
08D9C:  MOVLW  01
08D9E:  MOVLB  C
08DA0:  MOVWF  x24
08DA2:  MOVLW  00
08DA4:  MOVLB  B
08DA6:  BTFSC  x9E.2
08DA8:  MOVLW  01
08DAA:  MOVLB  C
08DAC:  XORWF  x24,W
08DAE:  SUBLW  01
08DB0:  BNZ   8DBA
08DB2:  MOVLB  B
08DB4:  BTFSS  xA0.2
08DB6:  BRA    8DC0
08DB8:  MOVLB  C
08DBA:  BTFSS  1A.5
08DBC:  BRA    8E90
08DBE:  MOVLB  B
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
08DC0:  BTFSC  xAC.2
08DC2:  BRA    8DE0
08DC4:  MOVLB  0
08DC6:  MOVF   x6A,W
08DC8:  SUBLW  0F
08DCA:  BTFSC  FD8.2
08DCC:  BRA    8DD2
08DCE:  MOVLB  B
08DD0:  BRA    8DE0
08DD2:  MOVLB  B
08DD4:  BTFSC  xA8.2
08DD6:  BRA    8DE0
....................       {
....................             TimeBase1s = 100 ;            //reload again
08DD8:  MOVLW  64
08DDA:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
08DDC:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B3 = 1;
08DE0:  BSF    xAC.2
....................       if(Ack.B3 == 0)
08DE2:  BTFSC  xA8.2
08DE4:  BRA    8E14
....................       {
....................          if(FlashingFlag == 0)
08DE6:  BTFSC  1A.1
08DE8:  BRA    8DEE
....................             {
....................                Output.B3 = 0;           //Flash output1
08DEA:  BCF    x9C.2
....................             }
08DEC:  BRA    8DF0
....................             else
....................             {
....................                Output.B3 = 1;
08DEE:  BSF    x9C.2
....................             }
....................          if (~AutoTestFlag)
08DF0:  BTFSC  1A.4
08DF2:  BRA    8E14
....................          {
....................             if(AlarmIndicator.B3 == 1){
08DF4:  BTFSS  xA6.2
08DF6:  BRA    8E14
....................                 if(OutputBoth.B3 == 0)        //Both output
08DF8:  BTFSC  xA4.2
08DFA:  BRA    8E06
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
08DFC:  BSF    F89.4
08DFE:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08E00:  BSF    F89.3
08E02:  BCF    F92.3
....................                 }
08E04:  BRA    8E14
....................                 else
....................                 {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
08E06:  BTFSS  xA2.2
08E08:  BRA    8E10
08E0A:  BSF    F89.4
08E0C:  BCF    F92.4
08E0E:  BRA    8E14
....................                   else output_bit(Pbell,1);                          //Bell
08E10:  BSF    F89.3
08E12:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08E14:  MOVLW  01
08E16:  MOVLB  C
08E18:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
08E1A:  MOVLB  B
08E1C:  BTFSC  xB6.2
08E1E:  BRA    8E8E
08E20:  BTFSC  30.3
08E22:  BRA    8E8E
08E24:  BTFSC  xA8.2
08E26:  BRA    8E8E
....................       {
....................          SendSMS.B3 =1;
08E28:  BSF    xB6.2
....................          fprintf(CH2,"AT+CMGS=\"");
08E2A:  MOVLW  BC
08E2C:  MOVWF  FF6
08E2E:  MOVLW  08
08E30:  MOVWF  FF7
08E32:  MOVLB  0
08E34:  CALL   2ED0
....................          fprintf(CH2,sms_phonenumber);
08E38:  MOVLW  09
08E3A:  MOVWF  FEA
08E3C:  MOVLW  8B
08E3E:  MOVWF  FE9
08E40:  CALL   6242
....................          
....................          fprintf(CH2,"\"");
08E44:  MOVLW  22
08E46:  MOVLB  C
08E48:  MOVWF  x25
08E4A:  MOVLB  0
08E4C:  CALL   2E8A
....................          putc('\n',CH2);
08E50:  MOVLW  0A
08E52:  MOVLB  C
08E54:  MOVWF  x25
08E56:  MOVLB  0
08E58:  CALL   2E8A
....................          delay_ms(50);
08E5C:  MOVLW  32
08E5E:  MOVLB  C
08E60:  MOVWF  x24
08E62:  MOVLB  0
08E64:  CALL   0952
....................         
....................         fprintf(CH2,SMS_Massage3); 
08E68:  MOVLW  09
08E6A:  MOVWF  FEA
08E6C:  MOVLW  DA
08E6E:  MOVWF  FE9
08E70:  CALL   6242
....................         putc('\n',CH2);
08E74:  MOVLW  0A
08E76:  MOVLB  C
08E78:  MOVWF  x25
08E7A:  MOVLB  0
08E7C:  CALL   2E8A
....................        putc(26,CH2);
08E80:  MOVLW  1A
08E82:  MOVLB  C
08E84:  MOVWF  x25
08E86:  MOVLB  0
08E88:  CALL   2E8A
08E8C:  MOVLB  B
....................       }
....................    }
08E8E:  BRA    8F3A
....................    else if(FaultType.B3 == 0)
08E90:  MOVLB  B
08E92:  BTFSC  xA0.2
08E94:  BRA    8F3A
....................    {
....................       In2.B3 = 0x00;
08E96:  BCF    xAC.2
....................       Ack.B3 = 0;
08E98:  BCF    xA8.2
....................       Output.B3 = 1;      //Off LED
08E9A:  BSF    x9C.2
....................       
....................       SendSMS.B3 =0;// Clear SMS
08E9C:  BCF    xB6.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0)&& inputflag ==0)      //If Buzzer or Both
08E9E:  BTFSC  xA2.2
08EA0:  BRA    8EA6
08EA2:  BTFSC  xA4.2
08EA4:  BRA    8EC8
08EA6:  MOVLB  C
08EA8:  MOVF   x17,F
08EAA:  BTFSC  FD8.2
08EAC:  BRA    8EB2
08EAE:  MOVLB  B
08EB0:  BRA    8EC8
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
08EB2:  MOVLW  01
08EB4:  MOVWF  x23
08EB6:  MOVLB  0
08EB8:  CALL   6268
08EBC:  DECFSZ 01,W
08EBE:  BRA    8EC2
08EC0:  BRA    8EC6
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
08EC2:  BCF    F89.4
08EC4:  BCF    F92.4
08EC6:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0)&& inputflag ==0)  //If Bell or Both
08EC8:  BTFSS  xA2.2
08ECA:  BRA    8ED0
08ECC:  BTFSC  xA4.2
08ECE:  BRA    8EF2
08ED0:  MOVLB  C
08ED2:  MOVF   x17,F
08ED4:  BTFSC  FD8.2
08ED6:  BRA    8EDC
08ED8:  MOVLB  B
08EDA:  BRA    8EF2
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08EDC:  MOVLW  02
08EDE:  MOVWF  x23
08EE0:  MOVLB  0
08EE2:  CALL   6268
08EE6:  DECFSZ 01,W
08EE8:  BRA    8EEC
08EEA:  BRA    8EF0
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08EEC:  BCF    F89.3
08EEE:  BCF    F92.3
08EF0:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
08EF2:  BTFSC  xAC.0
08EF4:  BRA    8F3A
08EF6:  BTFSC  xAC.1
08EF8:  BRA    8F3A
08EFA:  BTFSC  xAC.2
08EFC:  BRA    8F3A
08EFE:  BTFSC  xAC.3
08F00:  BRA    8F3A
08F02:  BTFSC  xAC.4
08F04:  BRA    8F3A
08F06:  BTFSC  xAC.5
08F08:  BRA    8F3A
08F0A:  BTFSC  xAC.6
08F0C:  BRA    8F3A
08F0E:  BTFSC  xAC.7
08F10:  BRA    8F3A
08F12:  BTFSC  xAD.0
08F14:  BRA    8F3A
08F16:  BTFSC  xAD.1
08F18:  BRA    8F3A
08F1A:  BTFSC  xAD.2
08F1C:  BRA    8F3A
08F1E:  BTFSC  xAD.3
08F20:  BRA    8F3A
08F22:  BTFSC  xAD.4
08F24:  BRA    8F3A
08F26:  BTFSC  xAD.5
08F28:  BRA    8F3A
08F2A:  BTFSC  xAD.6
08F2C:  BRA    8F3A
08F2E:  BTFSC  xAD.7
08F30:  BRA    8F3A
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
08F32:  BCF    F89.3
08F34:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08F36:  BCF    F89.4
08F38:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08F3A:  MOVLW  00
08F3C:  BTFSC  x9A.3
08F3E:  MOVLW  01
08F40:  MOVLB  C
08F42:  MOVWF  x24
08F44:  MOVLW  00
08F46:  MOVLB  B
08F48:  BTFSC  x9E.3
08F4A:  MOVLW  01
08F4C:  MOVLB  C
08F4E:  XORWF  x24,W
08F50:  SUBLW  01
08F52:  BNZ   8F5C
08F54:  MOVLB  B
08F56:  BTFSS  xA0.3
08F58:  BRA    8F62
08F5A:  MOVLB  C
08F5C:  BTFSS  1A.5
08F5E:  BRA    9032
08F60:  MOVLB  B
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
08F62:  BTFSC  xAC.3
08F64:  BRA    8F82
08F66:  MOVLB  0
08F68:  MOVF   x6A,W
08F6A:  SUBLW  0F
08F6C:  BTFSC  FD8.2
08F6E:  BRA    8F74
08F70:  MOVLB  B
08F72:  BRA    8F82
08F74:  MOVLB  B
08F76:  BTFSC  xA8.3
08F78:  BRA    8F82
....................       {
....................             TimeBase1s = 100 ;            //reload again
08F7A:  MOVLW  64
08F7C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
08F7E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B4 = 1;
08F82:  BSF    xAC.3
....................       if(Ack.B4 == 0)
08F84:  BTFSC  xA8.3
08F86:  BRA    8FB6
....................       {
....................          if(FlashingFlag == 0)
08F88:  BTFSC  1A.1
08F8A:  BRA    8F90
....................             {
....................                Output.B4 = 0;           //Flash output1
08F8C:  BCF    x9C.3
....................             }
08F8E:  BRA    8F92
....................             else
....................             {
....................                Output.B4 = 1;
08F90:  BSF    x9C.3
....................             }
....................          if (~AutoTestFlag)
08F92:  BTFSC  1A.4
08F94:  BRA    8FB6
....................          {
....................             if(AlarmIndicator.B4 == 1){
08F96:  BTFSS  xA6.3
08F98:  BRA    8FB6
....................                 if(OutputBoth.B4 == 0)        //Both output
08F9A:  BTFSC  xA4.3
08F9C:  BRA    8FA8
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
08F9E:  BSF    F89.4
08FA0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08FA2:  BSF    F89.3
08FA4:  BCF    F92.3
....................                 }
08FA6:  BRA    8FB6
....................                 else
....................                 {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
08FA8:  BTFSS  xA2.3
08FAA:  BRA    8FB2
08FAC:  BSF    F89.4
08FAE:  BCF    F92.4
08FB0:  BRA    8FB6
....................                   else output_bit(Pbell,1);                          //Bell
08FB2:  BSF    F89.3
08FB4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08FB6:  MOVLW  01
08FB8:  MOVLB  C
08FBA:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
08FBC:  MOVLB  B
08FBE:  BTFSC  xB6.3
08FC0:  BRA    9030
08FC2:  BTFSC  30.3
08FC4:  BRA    9030
08FC6:  BTFSC  xA8.3
08FC8:  BRA    9030
....................       {
....................          SendSMS.B4 =1;
08FCA:  BSF    xB6.3
....................          fprintf(CH2,"AT+CMGS=\"");
08FCC:  MOVLW  C6
08FCE:  MOVWF  FF6
08FD0:  MOVLW  08
08FD2:  MOVWF  FF7
08FD4:  MOVLB  0
08FD6:  CALL   2ED0
....................          fprintf(CH2,sms_phonenumber);
08FDA:  MOVLW  09
08FDC:  MOVWF  FEA
08FDE:  MOVLW  8B
08FE0:  MOVWF  FE9
08FE2:  CALL   6242
....................          
....................          fprintf(CH2,"\"");
08FE6:  MOVLW  22
08FE8:  MOVLB  C
08FEA:  MOVWF  x25
08FEC:  MOVLB  0
08FEE:  CALL   2E8A
....................          putc('\n',CH2);
08FF2:  MOVLW  0A
08FF4:  MOVLB  C
08FF6:  MOVWF  x25
08FF8:  MOVLB  0
08FFA:  CALL   2E8A
....................          delay_ms(50);
08FFE:  MOVLW  32
09000:  MOVLB  C
09002:  MOVWF  x24
09004:  MOVLB  0
09006:  CALL   0952
....................         
....................         fprintf(CH2,SMS_Massage4); 
0900A:  MOVLW  09
0900C:  MOVWF  FEA
0900E:  MOVLW  FA
09010:  MOVWF  FE9
09012:  CALL   6242
....................         putc('\n',CH2);
09016:  MOVLW  0A
09018:  MOVLB  C
0901A:  MOVWF  x25
0901C:  MOVLB  0
0901E:  CALL   2E8A
....................        putc(26,CH2);
09022:  MOVLW  1A
09024:  MOVLB  C
09026:  MOVWF  x25
09028:  MOVLB  0
0902A:  CALL   2E8A
0902E:  MOVLB  B
....................       }
....................    }
09030:  BRA    90DC
....................    else if(FaultType.B4 == 0)
09032:  MOVLB  B
09034:  BTFSC  xA0.3
09036:  BRA    90DC
....................    {
....................       In2.B4 = 0x00;
09038:  BCF    xAC.3
....................       Ack.B4 = 0;
0903A:  BCF    xA8.3
....................       Output.B4 = 1;      //Off LED
0903C:  BSF    x9C.3
....................       SendSMS.B4 =0;// Clear SMS
0903E:  BCF    xB6.3
....................       
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0)&& inputflag ==0)      //If Buzzer or Both
09040:  BTFSC  xA2.3
09042:  BRA    9048
09044:  BTFSC  xA4.3
09046:  BRA    906A
09048:  MOVLB  C
0904A:  MOVF   x17,F
0904C:  BTFSC  FD8.2
0904E:  BRA    9054
09050:  MOVLB  B
09052:  BRA    906A
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
09054:  MOVLW  01
09056:  MOVWF  x23
09058:  MOVLB  0
0905A:  CALL   6268
0905E:  DECFSZ 01,W
09060:  BRA    9064
09062:  BRA    9068
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
09064:  BCF    F89.4
09066:  BCF    F92.4
09068:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0)&& inputflag ==0)  //If Bell or Both
0906A:  BTFSS  xA2.3
0906C:  BRA    9072
0906E:  BTFSC  xA4.3
09070:  BRA    9094
09072:  MOVLB  C
09074:  MOVF   x17,F
09076:  BTFSC  FD8.2
09078:  BRA    907E
0907A:  MOVLB  B
0907C:  BRA    9094
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0907E:  MOVLW  02
09080:  MOVWF  x23
09082:  MOVLB  0
09084:  CALL   6268
09088:  DECFSZ 01,W
0908A:  BRA    908E
0908C:  BRA    9092
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0908E:  BCF    F89.3
09090:  BCF    F92.3
09092:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
09094:  BTFSC  xAC.0
09096:  BRA    90DC
09098:  BTFSC  xAC.1
0909A:  BRA    90DC
0909C:  BTFSC  xAC.2
0909E:  BRA    90DC
090A0:  BTFSC  xAC.3
090A2:  BRA    90DC
090A4:  BTFSC  xAC.4
090A6:  BRA    90DC
090A8:  BTFSC  xAC.5
090AA:  BRA    90DC
090AC:  BTFSC  xAC.6
090AE:  BRA    90DC
090B0:  BTFSC  xAC.7
090B2:  BRA    90DC
090B4:  BTFSC  xAD.0
090B6:  BRA    90DC
090B8:  BTFSC  xAD.1
090BA:  BRA    90DC
090BC:  BTFSC  xAD.2
090BE:  BRA    90DC
090C0:  BTFSC  xAD.3
090C2:  BRA    90DC
090C4:  BTFSC  xAD.4
090C6:  BRA    90DC
090C8:  BTFSC  xAD.5
090CA:  BRA    90DC
090CC:  BTFSC  xAD.6
090CE:  BRA    90DC
090D0:  BTFSC  xAD.7
090D2:  BRA    90DC
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
090D4:  BCF    F89.3
090D6:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
090D8:  BCF    F89.4
090DA:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
090DC:  MOVLW  00
090DE:  BTFSC  x9A.4
090E0:  MOVLW  01
090E2:  MOVLB  C
090E4:  MOVWF  x24
090E6:  MOVLW  00
090E8:  MOVLB  B
090EA:  BTFSC  x9E.4
090EC:  MOVLW  01
090EE:  MOVLB  C
090F0:  XORWF  x24,W
090F2:  SUBLW  01
090F4:  BNZ   90FE
090F6:  MOVLB  B
090F8:  BTFSS  xA0.4
090FA:  BRA    9104
090FC:  MOVLB  C
090FE:  BTFSS  1A.5
09100:  BRA    91D4
09102:  MOVLB  B
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
09104:  BTFSC  xAC.4
09106:  BRA    9124
09108:  MOVLB  0
0910A:  MOVF   x6A,W
0910C:  SUBLW  0F
0910E:  BTFSC  FD8.2
09110:  BRA    9116
09112:  MOVLB  B
09114:  BRA    9124
09116:  MOVLB  B
09118:  BTFSC  xA8.4
0911A:  BRA    9124
....................       {
....................             TimeBase1s = 100 ;            //reload again
0911C:  MOVLW  64
0911E:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09120:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B5 = 1;
09124:  BSF    xAC.4
....................       if(Ack.B5 == 0)
09126:  BTFSC  xA8.4
09128:  BRA    9158
....................       {
....................          if(FlashingFlag == 0)
0912A:  BTFSC  1A.1
0912C:  BRA    9132
....................             {
....................                Output.B5 = 0;           //Flash output1
0912E:  BCF    x9C.4
....................             }
09130:  BRA    9134
....................             else
....................             {
....................                Output.B5 = 1;
09132:  BSF    x9C.4
....................             }
....................          if (~AutoTestFlag)
09134:  BTFSC  1A.4
09136:  BRA    9158
....................          {
....................             if(AlarmIndicator.B5 == 1){
09138:  BTFSS  xA6.4
0913A:  BRA    9158
....................                 if(OutputBoth.B5 == 0)        //Both output
0913C:  BTFSC  xA4.4
0913E:  BRA    914A
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
09140:  BSF    F89.4
09142:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
09144:  BSF    F89.3
09146:  BCF    F92.3
....................                 }
09148:  BRA    9158
....................                 else
....................                 {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
0914A:  BTFSS  xA2.4
0914C:  BRA    9154
0914E:  BSF    F89.4
09150:  BCF    F92.4
09152:  BRA    9158
....................                   else output_bit(Pbell,1);                          //Bell
09154:  BSF    F89.3
09156:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09158:  MOVLW  01
0915A:  MOVLB  C
0915C:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
0915E:  MOVLB  B
09160:  BTFSC  xB6.4
09162:  BRA    91D2
09164:  BTFSC  30.3
09166:  BRA    91D2
09168:  BTFSC  xA8.4
0916A:  BRA    91D2
....................       {
....................          SendSMS.B5 =1;
0916C:  BSF    xB6.4
....................          fprintf(CH2,"AT+CMGS=\"");
0916E:  MOVLW  D0
09170:  MOVWF  FF6
09172:  MOVLW  08
09174:  MOVWF  FF7
09176:  MOVLB  0
09178:  CALL   2ED0
....................          fprintf(CH2,sms_phonenumber);
0917C:  MOVLW  09
0917E:  MOVWF  FEA
09180:  MOVLW  8B
09182:  MOVWF  FE9
09184:  CALL   6242
....................          
....................          fprintf(CH2,"\"");
09188:  MOVLW  22
0918A:  MOVLB  C
0918C:  MOVWF  x25
0918E:  MOVLB  0
09190:  CALL   2E8A
....................          putc('\n',CH2);
09194:  MOVLW  0A
09196:  MOVLB  C
09198:  MOVWF  x25
0919A:  MOVLB  0
0919C:  CALL   2E8A
....................          delay_ms(50);
091A0:  MOVLW  32
091A2:  MOVLB  C
091A4:  MOVWF  x24
091A6:  MOVLB  0
091A8:  CALL   0952
....................         
....................         fprintf(CH2,SMS_Massage5); 
091AC:  MOVLW  0A
091AE:  MOVWF  FEA
091B0:  MOVLW  1A
091B2:  MOVWF  FE9
091B4:  CALL   6242
....................         putc('\n',CH2);
091B8:  MOVLW  0A
091BA:  MOVLB  C
091BC:  MOVWF  x25
091BE:  MOVLB  0
091C0:  CALL   2E8A
....................        putc(26,CH2);
091C4:  MOVLW  1A
091C6:  MOVLB  C
091C8:  MOVWF  x25
091CA:  MOVLB  0
091CC:  CALL   2E8A
091D0:  MOVLB  B
....................       }
....................    }
091D2:  BRA    927E
....................    else if(FaultType.B5 == 0)
091D4:  MOVLB  B
091D6:  BTFSC  xA0.4
091D8:  BRA    927E
....................    {
....................       In2.B5 = 0x00;
091DA:  BCF    xAC.4
....................       Ack.B5 = 0;
091DC:  BCF    xA8.4
....................       Output.B5 = 1;      //Off LED
091DE:  BSF    x9C.4
....................       SendSMS.B5 =0;// Clear SMS
091E0:  BCF    xB6.4
....................        
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0)&& inputflag ==0)      //If Buzzer or Both
091E2:  BTFSC  xA2.4
091E4:  BRA    91EA
091E6:  BTFSC  xA4.4
091E8:  BRA    920C
091EA:  MOVLB  C
091EC:  MOVF   x17,F
091EE:  BTFSC  FD8.2
091F0:  BRA    91F6
091F2:  MOVLB  B
091F4:  BRA    920C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
091F6:  MOVLW  01
091F8:  MOVWF  x23
091FA:  MOVLB  0
091FC:  CALL   6268
09200:  DECFSZ 01,W
09202:  BRA    9206
09204:  BRA    920A
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
09206:  BCF    F89.4
09208:  BCF    F92.4
0920A:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0)&& inputflag ==0)  //If Bell or Both
0920C:  BTFSS  xA2.4
0920E:  BRA    9214
09210:  BTFSC  xA4.4
09212:  BRA    9236
09214:  MOVLB  C
09216:  MOVF   x17,F
09218:  BTFSC  FD8.2
0921A:  BRA    9220
0921C:  MOVLB  B
0921E:  BRA    9236
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09220:  MOVLW  02
09222:  MOVWF  x23
09224:  MOVLB  0
09226:  CALL   6268
0922A:  DECFSZ 01,W
0922C:  BRA    9230
0922E:  BRA    9234
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
09230:  BCF    F89.3
09232:  BCF    F92.3
09234:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
09236:  BTFSC  xAC.0
09238:  BRA    927E
0923A:  BTFSC  xAC.1
0923C:  BRA    927E
0923E:  BTFSC  xAC.2
09240:  BRA    927E
09242:  BTFSC  xAC.3
09244:  BRA    927E
09246:  BTFSC  xAC.4
09248:  BRA    927E
0924A:  BTFSC  xAC.5
0924C:  BRA    927E
0924E:  BTFSC  xAC.6
09250:  BRA    927E
09252:  BTFSC  xAC.7
09254:  BRA    927E
09256:  BTFSC  xAD.0
09258:  BRA    927E
0925A:  BTFSC  xAD.1
0925C:  BRA    927E
0925E:  BTFSC  xAD.2
09260:  BRA    927E
09262:  BTFSC  xAD.3
09264:  BRA    927E
09266:  BTFSC  xAD.4
09268:  BRA    927E
0926A:  BTFSC  xAD.5
0926C:  BRA    927E
0926E:  BTFSC  xAD.6
09270:  BRA    927E
09272:  BTFSC  xAD.7
09274:  BRA    927E
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
09276:  BCF    F89.3
09278:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0927A:  BCF    F89.4
0927C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0927E:  MOVLW  00
09280:  BTFSC  x9A.5
09282:  MOVLW  01
09284:  MOVLB  C
09286:  MOVWF  x24
09288:  MOVLW  00
0928A:  MOVLB  B
0928C:  BTFSC  x9E.5
0928E:  MOVLW  01
09290:  MOVLB  C
09292:  XORWF  x24,W
09294:  SUBLW  01
09296:  BNZ   92A0
09298:  MOVLB  B
0929A:  BTFSS  xA0.5
0929C:  BRA    92A6
0929E:  MOVLB  C
092A0:  BTFSS  1A.5
092A2:  BRA    9376
092A4:  MOVLB  B
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
092A6:  BTFSC  xAC.5
092A8:  BRA    92C6
092AA:  MOVLB  0
092AC:  MOVF   x6A,W
092AE:  SUBLW  0F
092B0:  BTFSC  FD8.2
092B2:  BRA    92B8
092B4:  MOVLB  B
092B6:  BRA    92C6
092B8:  MOVLB  B
092BA:  BTFSC  xA8.5
092BC:  BRA    92C6
....................       {
....................             TimeBase1s = 100 ;            //reload again
092BE:  MOVLW  64
092C0:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
092C2:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B6 = 1;
092C6:  BSF    xAC.5
....................       if(Ack.B6 == 0)
092C8:  BTFSC  xA8.5
092CA:  BRA    92FA
....................       {
....................          if(FlashingFlag == 0)
092CC:  BTFSC  1A.1
092CE:  BRA    92D4
....................             {
....................                Output.B6 = 0;           //Flash output1
092D0:  BCF    x9C.5
....................             }
092D2:  BRA    92D6
....................             else
....................             {
....................                Output.B6 = 1;
092D4:  BSF    x9C.5
....................             }
....................          if (~AutoTestFlag)
092D6:  BTFSC  1A.4
092D8:  BRA    92FA
....................          {
....................             if(AlarmIndicator.B6 == 1){
092DA:  BTFSS  xA6.5
092DC:  BRA    92FA
....................                 if(OutputBoth.B6 == 0)        //Both output
092DE:  BTFSC  xA4.5
092E0:  BRA    92EC
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
092E2:  BSF    F89.4
092E4:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
092E6:  BSF    F89.3
092E8:  BCF    F92.3
....................                 }
092EA:  BRA    92FA
....................                 else
....................                 {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
092EC:  BTFSS  xA2.5
092EE:  BRA    92F6
092F0:  BSF    F89.4
092F2:  BCF    F92.4
092F4:  BRA    92FA
....................                   else output_bit(Pbell,1);                          //Bell
092F6:  BSF    F89.3
092F8:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
092FA:  MOVLW  01
092FC:  MOVLB  C
092FE:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
09300:  MOVLB  B
09302:  BTFSC  xB6.5
09304:  BRA    9374
09306:  BTFSC  30.3
09308:  BRA    9374
0930A:  BTFSC  xA8.5
0930C:  BRA    9374
....................       {
....................          SendSMS.B6 =1;
0930E:  BSF    xB6.5
....................          fprintf(CH2,"AT+CMGS=\"");
09310:  MOVLW  DA
09312:  MOVWF  FF6
09314:  MOVLW  08
09316:  MOVWF  FF7
09318:  MOVLB  0
0931A:  CALL   2ED0
....................          fprintf(CH2,sms_phonenumber);
0931E:  MOVLW  09
09320:  MOVWF  FEA
09322:  MOVLW  8B
09324:  MOVWF  FE9
09326:  CALL   6242
....................          
....................          fprintf(CH2,"\"");
0932A:  MOVLW  22
0932C:  MOVLB  C
0932E:  MOVWF  x25
09330:  MOVLB  0
09332:  CALL   2E8A
....................          putc('\n',CH2);
09336:  MOVLW  0A
09338:  MOVLB  C
0933A:  MOVWF  x25
0933C:  MOVLB  0
0933E:  CALL   2E8A
....................          delay_ms(50);
09342:  MOVLW  32
09344:  MOVLB  C
09346:  MOVWF  x24
09348:  MOVLB  0
0934A:  CALL   0952
....................         
....................         fprintf(CH2,SMS_Massage6);  
0934E:  MOVLW  0A
09350:  MOVWF  FEA
09352:  MOVLW  3A
09354:  MOVWF  FE9
09356:  CALL   6242
....................         putc('\n',CH2);
0935A:  MOVLW  0A
0935C:  MOVLB  C
0935E:  MOVWF  x25
09360:  MOVLB  0
09362:  CALL   2E8A
....................        putc(26,CH2);
09366:  MOVLW  1A
09368:  MOVLB  C
0936A:  MOVWF  x25
0936C:  MOVLB  0
0936E:  CALL   2E8A
09372:  MOVLB  B
....................       }
....................    }
09374:  BRA    9420
....................    else if(FaultType.B6 == 0)
09376:  MOVLB  B
09378:  BTFSC  xA0.5
0937A:  BRA    9420
....................    {
....................       In2.B6 = 0x00;
0937C:  BCF    xAC.5
....................       Ack.B6 = 0;
0937E:  BCF    xA8.5
....................       Output.B6 = 1;      //Off LED
09380:  BSF    x9C.5
....................       SendSMS.B6 =0;// Clear SMS
09382:  BCF    xB6.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)      //If Buzzer or Both
09384:  BTFSC  xA2.5
09386:  BRA    938C
09388:  BTFSC  xA4.5
0938A:  BRA    93AE
0938C:  MOVLB  C
0938E:  MOVF   x17,F
09390:  BTFSC  FD8.2
09392:  BRA    9398
09394:  MOVLB  B
09396:  BRA    93AE
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
09398:  MOVLW  01
0939A:  MOVWF  x23
0939C:  MOVLB  0
0939E:  CALL   6268
093A2:  DECFSZ 01,W
093A4:  BRA    93A8
093A6:  BRA    93AC
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
093A8:  BCF    F89.4
093AA:  BCF    F92.4
093AC:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)  //If Bell or Both
093AE:  BTFSS  xA2.5
093B0:  BRA    93B6
093B2:  BTFSC  xA4.5
093B4:  BRA    93D8
093B6:  MOVLB  C
093B8:  MOVF   x17,F
093BA:  BTFSC  FD8.2
093BC:  BRA    93C2
093BE:  MOVLB  B
093C0:  BRA    93D8
....................       {
....................          if(CheckAutoReset(0x02) == 1);
093C2:  MOVLW  02
093C4:  MOVWF  x23
093C6:  MOVLB  0
093C8:  CALL   6268
093CC:  DECFSZ 01,W
093CE:  BRA    93D2
093D0:  BRA    93D6
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
093D2:  BCF    F89.3
093D4:  BCF    F92.3
093D6:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
093D8:  BTFSC  xAC.0
093DA:  BRA    9420
093DC:  BTFSC  xAC.1
093DE:  BRA    9420
093E0:  BTFSC  xAC.2
093E2:  BRA    9420
093E4:  BTFSC  xAC.3
093E6:  BRA    9420
093E8:  BTFSC  xAC.4
093EA:  BRA    9420
093EC:  BTFSC  xAC.5
093EE:  BRA    9420
093F0:  BTFSC  xAC.6
093F2:  BRA    9420
093F4:  BTFSC  xAC.7
093F6:  BRA    9420
093F8:  BTFSC  xAD.0
093FA:  BRA    9420
093FC:  BTFSC  xAD.1
093FE:  BRA    9420
09400:  BTFSC  xAD.2
09402:  BRA    9420
09404:  BTFSC  xAD.3
09406:  BRA    9420
09408:  BTFSC  xAD.4
0940A:  BRA    9420
0940C:  BTFSC  xAD.5
0940E:  BRA    9420
09410:  BTFSC  xAD.6
09412:  BRA    9420
09414:  BTFSC  xAD.7
09416:  BRA    9420
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
09418:  BCF    F89.3
0941A:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0941C:  BCF    F89.4
0941E:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09420:  MOVLW  00
09422:  BTFSC  x9A.6
09424:  MOVLW  01
09426:  MOVLB  C
09428:  MOVWF  x24
0942A:  MOVLW  00
0942C:  MOVLB  B
0942E:  BTFSC  x9E.6
09430:  MOVLW  01
09432:  MOVLB  C
09434:  XORWF  x24,W
09436:  SUBLW  01
09438:  BNZ   9442
0943A:  MOVLB  B
0943C:  BTFSS  xA0.6
0943E:  BRA    9448
09440:  MOVLB  C
09442:  BTFSS  1A.5
09444:  BRA    9518
09446:  MOVLB  B
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
09448:  BTFSC  xAC.6
0944A:  BRA    9468
0944C:  MOVLB  0
0944E:  MOVF   x6A,W
09450:  SUBLW  0F
09452:  BTFSC  FD8.2
09454:  BRA    945A
09456:  MOVLB  B
09458:  BRA    9468
0945A:  MOVLB  B
0945C:  BTFSC  xA8.6
0945E:  BRA    9468
....................       {
....................             TimeBase1s = 100 ;            //reload again
09460:  MOVLW  64
09462:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09464:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B7 = 1;
09468:  BSF    xAC.6
....................       if(Ack.B7 == 0)
0946A:  BTFSC  xA8.6
0946C:  BRA    949C
....................       {
....................          if(FlashingFlag == 0)
0946E:  BTFSC  1A.1
09470:  BRA    9476
....................             {
....................                Output.B7 = 0;           //Flash output1
09472:  BCF    x9C.6
....................             }
09474:  BRA    9478
....................             else
....................             {
....................                Output.B7 = 1;
09476:  BSF    x9C.6
....................             }
....................          if (~AutoTestFlag)
09478:  BTFSC  1A.4
0947A:  BRA    949C
....................          {
....................             if(AlarmIndicator.B7 == 1){
0947C:  BTFSS  xA6.6
0947E:  BRA    949C
....................                 if(OutputBoth.B7 == 0)        //Both output
09480:  BTFSC  xA4.6
09482:  BRA    948E
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
09484:  BSF    F89.4
09486:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
09488:  BSF    F89.3
0948A:  BCF    F92.3
....................                 }
0948C:  BRA    949C
....................                 else
....................                 {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
0948E:  BTFSS  xA2.6
09490:  BRA    9498
09492:  BSF    F89.4
09494:  BCF    F92.4
09496:  BRA    949C
....................                   else output_bit(Pbell,1);                          //Bell
09498:  BSF    F89.3
0949A:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0949C:  MOVLW  01
0949E:  MOVLB  C
094A0:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
094A2:  MOVLB  B
094A4:  BTFSC  xB6.6
094A6:  BRA    9516
094A8:  BTFSC  30.3
094AA:  BRA    9516
094AC:  BTFSC  xA8.6
094AE:  BRA    9516
....................       {
....................          SendSMS.B7 =1;
094B0:  BSF    xB6.6
....................          fprintf(CH2,"AT+CMGS=\"");
094B2:  MOVLW  E4
094B4:  MOVWF  FF6
094B6:  MOVLW  08
094B8:  MOVWF  FF7
094BA:  MOVLB  0
094BC:  CALL   2ED0
....................          fprintf(CH2,sms_phonenumber);
094C0:  MOVLW  09
094C2:  MOVWF  FEA
094C4:  MOVLW  8B
094C6:  MOVWF  FE9
094C8:  CALL   6242
....................          
....................          fprintf(CH2,"\"");
094CC:  MOVLW  22
094CE:  MOVLB  C
094D0:  MOVWF  x25
094D2:  MOVLB  0
094D4:  CALL   2E8A
....................          putc('\n',CH2);
094D8:  MOVLW  0A
094DA:  MOVLB  C
094DC:  MOVWF  x25
094DE:  MOVLB  0
094E0:  CALL   2E8A
....................          delay_ms(50);
094E4:  MOVLW  32
094E6:  MOVLB  C
094E8:  MOVWF  x24
094EA:  MOVLB  0
094EC:  CALL   0952
....................         
....................         fprintf(CH2,SMS_Massage7);  
094F0:  MOVLW  0A
094F2:  MOVWF  FEA
094F4:  MOVLW  5A
094F6:  MOVWF  FE9
094F8:  CALL   6242
....................         putc('\n',CH2);
094FC:  MOVLW  0A
094FE:  MOVLB  C
09500:  MOVWF  x25
09502:  MOVLB  0
09504:  CALL   2E8A
....................        putc(26,CH2);
09508:  MOVLW  1A
0950A:  MOVLB  C
0950C:  MOVWF  x25
0950E:  MOVLB  0
09510:  CALL   2E8A
09514:  MOVLB  B
....................       }
....................    }
09516:  BRA    95C2
....................    else if(FaultType.B7 == 0)
09518:  MOVLB  B
0951A:  BTFSC  xA0.6
0951C:  BRA    95C2
....................    {
....................       In2.B7 = 0x00;
0951E:  BCF    xAC.6
....................       Ack.B7 = 0;
09520:  BCF    xA8.6
....................       Output.B7 = 1;      //Off LED
09522:  BSF    x9C.6
....................       SendSMS.B7 =0;// Clear SMS
09524:  BCF    xB6.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)      //If Buzzer or Both
09526:  BTFSC  xA2.6
09528:  BRA    952E
0952A:  BTFSC  xA4.6
0952C:  BRA    9550
0952E:  MOVLB  C
09530:  MOVF   x17,F
09532:  BTFSC  FD8.2
09534:  BRA    953A
09536:  MOVLB  B
09538:  BRA    9550
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0953A:  MOVLW  01
0953C:  MOVWF  x23
0953E:  MOVLB  0
09540:  CALL   6268
09544:  DECFSZ 01,W
09546:  BRA    954A
09548:  BRA    954E
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0954A:  BCF    F89.4
0954C:  BCF    F92.4
0954E:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)  //If Bell or Both
09550:  BTFSS  xA2.6
09552:  BRA    9558
09554:  BTFSC  xA4.6
09556:  BRA    957A
09558:  MOVLB  C
0955A:  MOVF   x17,F
0955C:  BTFSC  FD8.2
0955E:  BRA    9564
09560:  MOVLB  B
09562:  BRA    957A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09564:  MOVLW  02
09566:  MOVWF  x23
09568:  MOVLB  0
0956A:  CALL   6268
0956E:  DECFSZ 01,W
09570:  BRA    9574
09572:  BRA    9578
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
09574:  BCF    F89.3
09576:  BCF    F92.3
09578:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0957A:  BTFSC  xAC.0
0957C:  BRA    95C2
0957E:  BTFSC  xAC.1
09580:  BRA    95C2
09582:  BTFSC  xAC.2
09584:  BRA    95C2
09586:  BTFSC  xAC.3
09588:  BRA    95C2
0958A:  BTFSC  xAC.4
0958C:  BRA    95C2
0958E:  BTFSC  xAC.5
09590:  BRA    95C2
09592:  BTFSC  xAC.6
09594:  BRA    95C2
09596:  BTFSC  xAC.7
09598:  BRA    95C2
0959A:  BTFSC  xAD.0
0959C:  BRA    95C2
0959E:  BTFSC  xAD.1
095A0:  BRA    95C2
095A2:  BTFSC  xAD.2
095A4:  BRA    95C2
095A6:  BTFSC  xAD.3
095A8:  BRA    95C2
095AA:  BTFSC  xAD.4
095AC:  BRA    95C2
095AE:  BTFSC  xAD.5
095B0:  BRA    95C2
095B2:  BTFSC  xAD.6
095B4:  BRA    95C2
095B6:  BTFSC  xAD.7
095B8:  BRA    95C2
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
095BA:  BCF    F89.3
095BC:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
095BE:  BCF    F89.4
095C0:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
095C2:  MOVLW  00
095C4:  BTFSC  x9A.7
095C6:  MOVLW  01
095C8:  MOVLB  C
095CA:  MOVWF  x24
095CC:  MOVLW  00
095CE:  MOVLB  B
095D0:  BTFSC  x9E.7
095D2:  MOVLW  01
095D4:  MOVLB  C
095D6:  XORWF  x24,W
095D8:  SUBLW  01
095DA:  BNZ   95E4
095DC:  MOVLB  B
095DE:  BTFSS  xA0.7
095E0:  BRA    95EA
095E2:  MOVLB  C
095E4:  BTFSS  1A.5
095E6:  BRA    96BA
095E8:  MOVLB  B
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
095EA:  BTFSC  xAC.7
095EC:  BRA    960A
095EE:  MOVLB  0
095F0:  MOVF   x6A,W
095F2:  SUBLW  0F
095F4:  BTFSC  FD8.2
095F6:  BRA    95FC
095F8:  MOVLB  B
095FA:  BRA    960A
095FC:  MOVLB  B
095FE:  BTFSC  xA8.7
09600:  BRA    960A
....................       {
....................             TimeBase1s = 100 ;            //reload again
09602:  MOVLW  64
09604:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09606:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B8 = 1;
0960A:  BSF    xAC.7
....................       if(Ack.B8 == 0)
0960C:  BTFSC  xA8.7
0960E:  BRA    963E
....................       {
....................          if(FlashingFlag == 0)
09610:  BTFSC  1A.1
09612:  BRA    9618
....................             {
....................                Output.B8 = 0;           //Flash output1
09614:  BCF    x9C.7
....................             }
09616:  BRA    961A
....................             else
....................             {
....................                Output.B8 = 1;
09618:  BSF    x9C.7
....................             }
....................          if (~AutoTestFlag)
0961A:  BTFSC  1A.4
0961C:  BRA    963E
....................          {
....................             if(AlarmIndicator.B8 == 1){
0961E:  BTFSS  xA6.7
09620:  BRA    963E
....................                 if(OutputBoth.B8 == 0)        //Both output
09622:  BTFSC  xA4.7
09624:  BRA    9630
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
09626:  BSF    F89.4
09628:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0962A:  BSF    F89.3
0962C:  BCF    F92.3
....................                 }
0962E:  BRA    963E
....................                 else
....................                 {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
09630:  BTFSS  xA2.7
09632:  BRA    963A
09634:  BSF    F89.4
09636:  BCF    F92.4
09638:  BRA    963E
....................                   else output_bit(Pbell,1);                          //Bell
0963A:  BSF    F89.3
0963C:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0963E:  MOVLW  01
09640:  MOVLB  C
09642:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B8 ==0) && (functointest_f ==0) && (Ack.B8 ==0))
09644:  MOVLB  B
09646:  BTFSC  xB6.7
09648:  BRA    96B8
0964A:  BTFSC  30.3
0964C:  BRA    96B8
0964E:  BTFSC  xA8.7
09650:  BRA    96B8
....................       {
....................          SendSMS.B8 =1;
09652:  BSF    xB6.7
....................          fprintf(CH2,"AT+CMGS=\"");
09654:  MOVLW  EE
09656:  MOVWF  FF6
09658:  MOVLW  08
0965A:  MOVWF  FF7
0965C:  MOVLB  0
0965E:  CALL   2ED0
....................          fprintf(CH2,sms_phonenumber);
09662:  MOVLW  09
09664:  MOVWF  FEA
09666:  MOVLW  8B
09668:  MOVWF  FE9
0966A:  CALL   6242
....................          
....................          fprintf(CH2,"\"");
0966E:  MOVLW  22
09670:  MOVLB  C
09672:  MOVWF  x25
09674:  MOVLB  0
09676:  CALL   2E8A
....................          putc('\n',CH2);
0967A:  MOVLW  0A
0967C:  MOVLB  C
0967E:  MOVWF  x25
09680:  MOVLB  0
09682:  CALL   2E8A
....................          delay_ms(50);
09686:  MOVLW  32
09688:  MOVLB  C
0968A:  MOVWF  x24
0968C:  MOVLB  0
0968E:  CALL   0952
....................         
....................         fprintf(CH2,SMS_Massage8);   
09692:  MOVLW  0A
09694:  MOVWF  FEA
09696:  MOVLW  7A
09698:  MOVWF  FE9
0969A:  CALL   6242
....................         putc('\n',CH2);
0969E:  MOVLW  0A
096A0:  MOVLB  C
096A2:  MOVWF  x25
096A4:  MOVLB  0
096A6:  CALL   2E8A
....................         putc(26,CH2);
096AA:  MOVLW  1A
096AC:  MOVLB  C
096AE:  MOVWF  x25
096B0:  MOVLB  0
096B2:  CALL   2E8A
096B6:  MOVLB  B
....................       }
....................    }
096B8:  BRA    9764
....................    else if(FaultType.B8 == 0)
096BA:  MOVLB  B
096BC:  BTFSC  xA0.7
096BE:  BRA    9764
....................    {
....................       In2.B8 = 0x00;
096C0:  BCF    xAC.7
....................       Ack.B8 = 0;
096C2:  BCF    xA8.7
....................       Output.B8 = 1;      //Off LED
096C4:  BSF    x9C.7
....................       SendSMS.B8 =0;// Clear SMS
096C6:  BCF    xB6.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)      //If Buzzer or Both
096C8:  BTFSC  xA2.7
096CA:  BRA    96D0
096CC:  BTFSC  xA4.7
096CE:  BRA    96F2
096D0:  MOVLB  C
096D2:  MOVF   x17,F
096D4:  BTFSC  FD8.2
096D6:  BRA    96DC
096D8:  MOVLB  B
096DA:  BRA    96F2
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
096DC:  MOVLW  01
096DE:  MOVWF  x23
096E0:  MOVLB  0
096E2:  CALL   6268
096E6:  DECFSZ 01,W
096E8:  BRA    96EC
096EA:  BRA    96F0
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
096EC:  BCF    F89.4
096EE:  BCF    F92.4
096F0:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)  //If Bell or Both
096F2:  BTFSS  xA2.7
096F4:  BRA    96FA
096F6:  BTFSC  xA4.7
096F8:  BRA    971C
096FA:  MOVLB  C
096FC:  MOVF   x17,F
096FE:  BTFSC  FD8.2
09700:  BRA    9706
09702:  MOVLB  B
09704:  BRA    971C
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09706:  MOVLW  02
09708:  MOVWF  x23
0970A:  MOVLB  0
0970C:  CALL   6268
09710:  DECFSZ 01,W
09712:  BRA    9716
09714:  BRA    971A
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
09716:  BCF    F89.3
09718:  BCF    F92.3
0971A:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0971C:  BTFSC  xAC.0
0971E:  BRA    9764
09720:  BTFSC  xAC.1
09722:  BRA    9764
09724:  BTFSC  xAC.2
09726:  BRA    9764
09728:  BTFSC  xAC.3
0972A:  BRA    9764
0972C:  BTFSC  xAC.4
0972E:  BRA    9764
09730:  BTFSC  xAC.5
09732:  BRA    9764
09734:  BTFSC  xAC.6
09736:  BRA    9764
09738:  BTFSC  xAC.7
0973A:  BRA    9764
0973C:  BTFSC  xAD.0
0973E:  BRA    9764
09740:  BTFSC  xAD.1
09742:  BRA    9764
09744:  BTFSC  xAD.2
09746:  BRA    9764
09748:  BTFSC  xAD.3
0974A:  BRA    9764
0974C:  BTFSC  xAD.4
0974E:  BRA    9764
09750:  BTFSC  xAD.5
09752:  BRA    9764
09754:  BTFSC  xAD.6
09756:  BRA    9764
09758:  BTFSC  xAD.7
0975A:  BRA    9764
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0975C:  BCF    F89.3
0975E:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
09760:  BCF    F89.4
09762:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09764:  MOVLW  00
09766:  BTFSC  x9B.0
09768:  MOVLW  01
0976A:  MOVLB  C
0976C:  MOVWF  x24
0976E:  MOVLW  00
09770:  MOVLB  B
09772:  BTFSC  x9F.0
09774:  MOVLW  01
09776:  MOVLB  C
09778:  XORWF  x24,W
0977A:  SUBLW  01
0977C:  BNZ   9786
0977E:  MOVLB  B
09780:  BTFSS  xA1.0
09782:  BRA    978C
09784:  MOVLB  C
09786:  BTFSS  1A.5
09788:  BRA    985C
0978A:  MOVLB  B
....................    {
....................       if(In2.B9 == 0 && AutoAck == 0x0F && Ack.B9 == 0)   //use auto acknowlegde
0978C:  BTFSC  xAD.0
0978E:  BRA    97AC
09790:  MOVLB  0
09792:  MOVF   x6A,W
09794:  SUBLW  0F
09796:  BTFSC  FD8.2
09798:  BRA    979E
0979A:  MOVLB  B
0979C:  BRA    97AC
0979E:  MOVLB  B
097A0:  BTFSC  xA9.0
097A2:  BRA    97AC
....................       {
....................             TimeBase1s = 100 ;            //reload again
097A4:  MOVLW  64
097A6:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
097A8:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B9 = 1;
097AC:  BSF    xAD.0
....................       if(Ack.B9 == 0)
097AE:  BTFSC  xA9.0
097B0:  BRA    97E0
....................       {
....................          if(FlashingFlag == 0)
097B2:  BTFSC  1A.1
097B4:  BRA    97BA
....................             {
....................                Output.B9 = 0;           //Flash output1
097B6:  BCF    x9D.0
....................             }
097B8:  BRA    97BC
....................             else
....................             {
....................                Output.B9 = 1;
097BA:  BSF    x9D.0
....................             }
....................          if (~AutoTestFlag)
097BC:  BTFSC  1A.4
097BE:  BRA    97E0
....................          {
....................             if(AlarmIndicator.B9 == 1){
097C0:  BTFSS  xA7.0
097C2:  BRA    97E0
....................                 if(OutputBoth.B9 == 0)        //Both output
097C4:  BTFSC  xA5.0
097C6:  BRA    97D2
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
097C8:  BSF    F89.4
097CA:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
097CC:  BSF    F89.3
097CE:  BCF    F92.3
....................                 }
097D0:  BRA    97E0
....................                 else
....................                 {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
097D2:  BTFSS  xA3.0
097D4:  BRA    97DC
097D6:  BSF    F89.4
097D8:  BCF    F92.4
097DA:  BRA    97E0
....................                   else output_bit(Pbell,1);                          //Bell
097DC:  BSF    F89.3
097DE:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
097E0:  MOVLW  01
097E2:  MOVLB  C
097E4:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B9 ==0) && (functointest_f ==0) && (Ack.B9 ==0))
097E6:  MOVLB  B
097E8:  BTFSC  xB7.0
097EA:  BRA    985A
097EC:  BTFSC  30.3
097EE:  BRA    985A
097F0:  BTFSC  xA9.0
097F2:  BRA    985A
....................       {
....................          SendSMS.B9 =1;
097F4:  BSF    xB7.0
....................          fprintf(CH2,"AT+CMGS=\"");
097F6:  MOVLW  F8
097F8:  MOVWF  FF6
097FA:  MOVLW  08
097FC:  MOVWF  FF7
097FE:  MOVLB  0
09800:  CALL   2ED0
....................          fprintf(CH2,sms_phonenumber);
09804:  MOVLW  09
09806:  MOVWF  FEA
09808:  MOVLW  8B
0980A:  MOVWF  FE9
0980C:  CALL   6242
....................          
....................          fprintf(CH2,"\"");
09810:  MOVLW  22
09812:  MOVLB  C
09814:  MOVWF  x25
09816:  MOVLB  0
09818:  CALL   2E8A
....................          putc('\n',CH2);
0981C:  MOVLW  0A
0981E:  MOVLB  C
09820:  MOVWF  x25
09822:  MOVLB  0
09824:  CALL   2E8A
....................          delay_ms(50);
09828:  MOVLW  32
0982A:  MOVLB  C
0982C:  MOVWF  x24
0982E:  MOVLB  0
09830:  CALL   0952
....................         
....................         fprintf(CH2,SMS_Massage9);   
09834:  MOVLW  0A
09836:  MOVWF  FEA
09838:  MOVLW  9A
0983A:  MOVWF  FE9
0983C:  CALL   6242
....................         putc('\n',CH2);
09840:  MOVLW  0A
09842:  MOVLB  C
09844:  MOVWF  x25
09846:  MOVLB  0
09848:  CALL   2E8A
....................         putc(26,CH2);
0984C:  MOVLW  1A
0984E:  MOVLB  C
09850:  MOVWF  x25
09852:  MOVLB  0
09854:  CALL   2E8A
09858:  MOVLB  B
....................       }
....................    }
0985A:  BRA    9906
....................    else if(FaultType.B9 == 0)
0985C:  MOVLB  B
0985E:  BTFSC  xA1.0
09860:  BRA    9906
....................    {
....................       In2.B9 = 0x00;
09862:  BCF    xAD.0
....................       Ack.B9 = 0;
09864:  BCF    xA9.0
....................       Output.B9 = 1;      //Off LED
09866:  BSF    x9D.0
....................       SendSMS.B9 =0;// Clear SMS
09868:  BCF    xB7.0
.................... 
....................       if((OutputType.B9 == 1 || OutputBoth.B9 == 0)&& inputflag ==0)      //If Buzzer or Both
0986A:  BTFSC  xA3.0
0986C:  BRA    9872
0986E:  BTFSC  xA5.0
09870:  BRA    9894
09872:  MOVLB  C
09874:  MOVF   x17,F
09876:  BTFSC  FD8.2
09878:  BRA    987E
0987A:  MOVLB  B
0987C:  BRA    9894
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0987E:  MOVLW  01
09880:  MOVWF  x23
09882:  MOVLB  0
09884:  CALL   6268
09888:  DECFSZ 01,W
0988A:  BRA    988E
0988C:  BRA    9892
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0988E:  BCF    F89.4
09890:  BCF    F92.4
09892:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B9 == 0 || OutputBoth.B9 == 0)&& inputflag ==0)  //If Bell or Both
09894:  BTFSS  xA3.0
09896:  BRA    989C
09898:  BTFSC  xA5.0
0989A:  BRA    98BE
0989C:  MOVLB  C
0989E:  MOVF   x17,F
098A0:  BTFSC  FD8.2
098A2:  BRA    98A8
098A4:  MOVLB  B
098A6:  BRA    98BE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
098A8:  MOVLW  02
098AA:  MOVWF  x23
098AC:  MOVLB  0
098AE:  CALL   6268
098B2:  DECFSZ 01,W
098B4:  BRA    98B8
098B6:  BRA    98BC
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
098B8:  BCF    F89.3
098BA:  BCF    F92.3
098BC:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
098BE:  BTFSC  xAC.0
098C0:  BRA    9906
098C2:  BTFSC  xAC.1
098C4:  BRA    9906
098C6:  BTFSC  xAC.2
098C8:  BRA    9906
098CA:  BTFSC  xAC.3
098CC:  BRA    9906
098CE:  BTFSC  xAC.4
098D0:  BRA    9906
098D2:  BTFSC  xAC.5
098D4:  BRA    9906
098D6:  BTFSC  xAC.6
098D8:  BRA    9906
098DA:  BTFSC  xAC.7
098DC:  BRA    9906
098DE:  BTFSC  xAD.0
098E0:  BRA    9906
098E2:  BTFSC  xAD.1
098E4:  BRA    9906
098E6:  BTFSC  xAD.2
098E8:  BRA    9906
098EA:  BTFSC  xAD.3
098EC:  BRA    9906
098EE:  BTFSC  xAD.4
098F0:  BRA    9906
098F2:  BTFSC  xAD.5
098F4:  BRA    9906
098F6:  BTFSC  xAD.6
098F8:  BRA    9906
098FA:  BTFSC  xAD.7
098FC:  BRA    9906
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
098FE:  BCF    F89.3
09900:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
09902:  BCF    F89.4
09904:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09906:  MOVLW  00
09908:  BTFSC  x9B.1
0990A:  MOVLW  01
0990C:  MOVLB  C
0990E:  MOVWF  x24
09910:  MOVLW  00
09912:  MOVLB  B
09914:  BTFSC  x9F.1
09916:  MOVLW  01
09918:  MOVLB  C
0991A:  XORWF  x24,W
0991C:  SUBLW  01
0991E:  BNZ   9928
09920:  MOVLB  B
09922:  BTFSS  xA1.1
09924:  BRA    992E
09926:  MOVLB  C
09928:  BTFSS  1A.5
0992A:  BRA    99FE
0992C:  MOVLB  B
....................    {
....................       if(In2.B10 == 0 && AutoAck == 0x0F && Ack.B10 == 0)   //use auto acknowlegde
0992E:  BTFSC  xAD.1
09930:  BRA    994E
09932:  MOVLB  0
09934:  MOVF   x6A,W
09936:  SUBLW  0F
09938:  BTFSC  FD8.2
0993A:  BRA    9940
0993C:  MOVLB  B
0993E:  BRA    994E
09940:  MOVLB  B
09942:  BTFSC  xA9.1
09944:  BRA    994E
....................       {
....................             TimeBase1s = 100 ;            //reload again
09946:  MOVLW  64
09948:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0994A:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B10 = 1;
0994E:  BSF    xAD.1
....................       if(Ack.B10 == 0)
09950:  BTFSC  xA9.1
09952:  BRA    9982
....................       {
....................          if(FlashingFlag == 0)
09954:  BTFSC  1A.1
09956:  BRA    995C
....................             {
....................                Output.B10 = 0;           //Flash output1
09958:  BCF    x9D.1
....................             }
0995A:  BRA    995E
....................             else
....................             {
....................                Output.B10 = 1;
0995C:  BSF    x9D.1
....................             }
....................          if (~AutoTestFlag)
0995E:  BTFSC  1A.4
09960:  BRA    9982
....................          {
....................             if(AlarmIndicator.B10 == 1){
09962:  BTFSS  xA7.1
09964:  BRA    9982
....................                 if(OutputBoth.B10 == 0)        //Both output
09966:  BTFSC  xA5.1
09968:  BRA    9974
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0996A:  BSF    F89.4
0996C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0996E:  BSF    F89.3
09970:  BCF    F92.3
....................                 }
09972:  BRA    9982
....................                 else
....................                 {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
09974:  BTFSS  xA3.1
09976:  BRA    997E
09978:  BSF    F89.4
0997A:  BCF    F92.4
0997C:  BRA    9982
....................                   else output_bit(Pbell,1);                          //Bell
0997E:  BSF    F89.3
09980:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09982:  MOVLW  01
09984:  MOVLB  C
09986:  MOVWF  x17
....................       // SMS Sending   
....................       if((SendSMS.B10 ==0) && (functointest_f ==0) && (Ack.B10 ==0))
09988:  MOVLB  B
0998A:  BTFSC  xB7.1
0998C:  BRA    99FC
0998E:  BTFSC  30.3
09990:  BRA    99FC
09992:  BTFSC  xA9.1
09994:  BRA    99FC
....................       {
....................          SendSMS.B10 =1;
09996:  BSF    xB7.1
....................          fprintf(CH2,"AT+CMGS=\"");
09998:  MOVLW  02
0999A:  MOVWF  FF6
0999C:  MOVLW  09
0999E:  MOVWF  FF7
099A0:  MOVLB  0
099A2:  CALL   2ED0
....................          fprintf(CH2,sms_phonenumber);
099A6:  MOVLW  09
099A8:  MOVWF  FEA
099AA:  MOVLW  8B
099AC:  MOVWF  FE9
099AE:  CALL   6242
....................          
....................          fprintf(CH2,"\"");
099B2:  MOVLW  22
099B4:  MOVLB  C
099B6:  MOVWF  x25
099B8:  MOVLB  0
099BA:  CALL   2E8A
....................          putc('\n',CH2);
099BE:  MOVLW  0A
099C0:  MOVLB  C
099C2:  MOVWF  x25
099C4:  MOVLB  0
099C6:  CALL   2E8A
....................          delay_ms(50);
099CA:  MOVLW  32
099CC:  MOVLB  C
099CE:  MOVWF  x24
099D0:  MOVLB  0
099D2:  CALL   0952
....................         
....................         fprintf(CH2,SMS_Massage10);   
099D6:  MOVLW  0A
099D8:  MOVWF  FEA
099DA:  MOVLW  BA
099DC:  MOVWF  FE9
099DE:  CALL   6242
....................         putc('\n',CH2);
099E2:  MOVLW  0A
099E4:  MOVLB  C
099E6:  MOVWF  x25
099E8:  MOVLB  0
099EA:  CALL   2E8A
....................         putc(26,CH2);
099EE:  MOVLW  1A
099F0:  MOVLB  C
099F2:  MOVWF  x25
099F4:  MOVLB  0
099F6:  CALL   2E8A
099FA:  MOVLB  B
....................       }
....................    }
099FC:  BRA    9AA8
....................    else if(FaultType.B10 == 0)
099FE:  MOVLB  B
09A00:  BTFSC  xA1.1
09A02:  BRA    9AA8
....................    {
....................       In2.B10 = 0x00;
09A04:  BCF    xAD.1
....................       Ack.B10 = 0;
09A06:  BCF    xA9.1
....................       Output.B10 = 1;      //Off LED
09A08:  BSF    x9D.1
....................       SendSMS.B10 =0;// Clear SMS
09A0A:  BCF    xB7.1
.................... 
....................       if((OutputType.B10 == 1 || OutputBoth.B10 == 0)&& inputflag ==0)      //If Buzzer or Both
09A0C:  BTFSC  xA3.1
09A0E:  BRA    9A14
09A10:  BTFSC  xA5.1
09A12:  BRA    9A36
09A14:  MOVLB  C
09A16:  MOVF   x17,F
09A18:  BTFSC  FD8.2
09A1A:  BRA    9A20
09A1C:  MOVLB  B
09A1E:  BRA    9A36
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
09A20:  MOVLW  01
09A22:  MOVWF  x23
09A24:  MOVLB  0
09A26:  CALL   6268
09A2A:  DECFSZ 01,W
09A2C:  BRA    9A30
09A2E:  BRA    9A34
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
09A30:  BCF    F89.4
09A32:  BCF    F92.4
09A34:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B10 == 0 || OutputBoth.B10 == 0)&& inputflag ==0)  //If Bell or Both
09A36:  BTFSS  xA3.1
09A38:  BRA    9A3E
09A3A:  BTFSC  xA5.1
09A3C:  BRA    9A60
09A3E:  MOVLB  C
09A40:  MOVF   x17,F
09A42:  BTFSC  FD8.2
09A44:  BRA    9A4A
09A46:  MOVLB  B
09A48:  BRA    9A60
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09A4A:  MOVLW  02
09A4C:  MOVWF  x23
09A4E:  MOVLB  0
09A50:  CALL   6268
09A54:  DECFSZ 01,W
09A56:  BRA    9A5A
09A58:  BRA    9A5E
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
09A5A:  BCF    F89.3
09A5C:  BCF    F92.3
09A5E:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
09A60:  BTFSC  xAC.0
09A62:  BRA    9AA8
09A64:  BTFSC  xAC.1
09A66:  BRA    9AA8
09A68:  BTFSC  xAC.2
09A6A:  BRA    9AA8
09A6C:  BTFSC  xAC.3
09A6E:  BRA    9AA8
09A70:  BTFSC  xAC.4
09A72:  BRA    9AA8
09A74:  BTFSC  xAC.5
09A76:  BRA    9AA8
09A78:  BTFSC  xAC.6
09A7A:  BRA    9AA8
09A7C:  BTFSC  xAC.7
09A7E:  BRA    9AA8
09A80:  BTFSC  xAD.0
09A82:  BRA    9AA8
09A84:  BTFSC  xAD.1
09A86:  BRA    9AA8
09A88:  BTFSC  xAD.2
09A8A:  BRA    9AA8
09A8C:  BTFSC  xAD.3
09A8E:  BRA    9AA8
09A90:  BTFSC  xAD.4
09A92:  BRA    9AA8
09A94:  BTFSC  xAD.5
09A96:  BRA    9AA8
09A98:  BTFSC  xAD.6
09A9A:  BRA    9AA8
09A9C:  BTFSC  xAD.7
09A9E:  BRA    9AA8
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
09AA0:  BCF    F89.3
09AA2:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
09AA4:  BCF    F89.4
09AA6:  BCF    F92.4
....................       }
....................    }
....................    
.................... //}
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09AA8:  MOVLW  00
09AAA:  BTFSC  x9B.2
09AAC:  MOVLW  01
09AAE:  MOVLB  C
09AB0:  MOVWF  x24
09AB2:  MOVLW  00
09AB4:  MOVLB  B
09AB6:  BTFSC  x9F.2
09AB8:  MOVLW  01
09ABA:  MOVLB  C
09ABC:  XORWF  x24,W
09ABE:  SUBLW  01
09AC0:  BNZ   9ACA
09AC2:  MOVLB  B
09AC4:  BTFSS  xA1.2
09AC6:  BRA    9AD0
09AC8:  MOVLB  C
09ACA:  BTFSS  1A.5
09ACC:  BRA    9BA0
09ACE:  MOVLB  B
....................    {
....................       if(In2.B11 == 0 && AutoAck == 0x0F && Ack.B11 == 0)   //use auto acknowlegde
09AD0:  BTFSC  xAD.2
09AD2:  BRA    9AF0
09AD4:  MOVLB  0
09AD6:  MOVF   x6A,W
09AD8:  SUBLW  0F
09ADA:  BTFSC  FD8.2
09ADC:  BRA    9AE2
09ADE:  MOVLB  B
09AE0:  BRA    9AF0
09AE2:  MOVLB  B
09AE4:  BTFSC  xA9.2
09AE6:  BRA    9AF0
....................       {
....................             TimeBase1s = 100 ;            //reload again
09AE8:  MOVLW  64
09AEA:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09AEC:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B11 = 1;
09AF0:  BSF    xAD.2
....................       if(Ack.B11 == 0)
09AF2:  BTFSC  xA9.2
09AF4:  BRA    9B24
....................       {
....................          if(FlashingFlag == 0)
09AF6:  BTFSC  1A.1
09AF8:  BRA    9AFE
....................             {
....................                Output.B11 = 0;           //Flash output1
09AFA:  BCF    x9D.2
....................             }
09AFC:  BRA    9B00
....................             else
....................             {
....................                Output.B11 = 1;
09AFE:  BSF    x9D.2
....................             }
....................          if (~AutoTestFlag)
09B00:  BTFSC  1A.4
09B02:  BRA    9B24
....................          {
....................             if(AlarmIndicator.B11 == 1){
09B04:  BTFSS  xA7.2
09B06:  BRA    9B24
....................                 if(OutputBoth.B11 == 0)        //Both output
09B08:  BTFSC  xA5.2
09B0A:  BRA    9B16
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
09B0C:  BSF    F89.4
09B0E:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
09B10:  BSF    F89.3
09B12:  BCF    F92.3
....................                 }
09B14:  BRA    9B24
....................                 else
....................                 {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,1);     //Buzzer
09B16:  BTFSS  xA3.2
09B18:  BRA    9B20
09B1A:  BSF    F89.4
09B1C:  BCF    F92.4
09B1E:  BRA    9B24
....................                   else output_bit(Pbell,1);                          //Bell
09B20:  BSF    F89.3
09B22:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09B24:  MOVLW  01
09B26:  MOVLB  C
09B28:  MOVWF  x17
....................       // SMS Sending   
....................         if((SendSMS.B11 ==0) && (functointest_f ==0) && (Ack.B11 ==0))
09B2A:  MOVLB  B
09B2C:  BTFSC  xB7.2
09B2E:  BRA    9B9E
09B30:  BTFSC  30.3
09B32:  BRA    9B9E
09B34:  BTFSC  xA9.2
09B36:  BRA    9B9E
....................         {
....................           SendSMS.B11 =1;
09B38:  BSF    xB7.2
....................           fprintf(CH2,"AT+CMGS=\"");
09B3A:  MOVLW  0C
09B3C:  MOVWF  FF6
09B3E:  MOVLW  09
09B40:  MOVWF  FF7
09B42:  MOVLB  0
09B44:  CALL   2ED0
....................           fprintf(CH2,sms_phonenumber);
09B48:  MOVLW  09
09B4A:  MOVWF  FEA
09B4C:  MOVLW  8B
09B4E:  MOVWF  FE9
09B50:  CALL   6242
....................           
....................           fprintf(CH2,"\"");
09B54:  MOVLW  22
09B56:  MOVLB  C
09B58:  MOVWF  x25
09B5A:  MOVLB  0
09B5C:  CALL   2E8A
....................           putc('\n',CH2);
09B60:  MOVLW  0A
09B62:  MOVLB  C
09B64:  MOVWF  x25
09B66:  MOVLB  0
09B68:  CALL   2E8A
....................           delay_ms(50);
09B6C:  MOVLW  32
09B6E:  MOVLB  C
09B70:  MOVWF  x24
09B72:  MOVLB  0
09B74:  CALL   0952
....................          
....................          fprintf(CH2,SMS_Massage11);   
09B78:  MOVLW  0A
09B7A:  MOVWF  FEA
09B7C:  MOVLW  DA
09B7E:  MOVWF  FE9
09B80:  CALL   6242
....................          putc('\n',CH2);
09B84:  MOVLW  0A
09B86:  MOVLB  C
09B88:  MOVWF  x25
09B8A:  MOVLB  0
09B8C:  CALL   2E8A
....................          putc(26,CH2);
09B90:  MOVLW  1A
09B92:  MOVLB  C
09B94:  MOVWF  x25
09B96:  MOVLB  0
09B98:  CALL   2E8A
09B9C:  MOVLB  B
....................         }
....................    }
09B9E:  BRA    9C4A
....................    else if(FaultType.B11 == 0)
09BA0:  MOVLB  B
09BA2:  BTFSC  xA1.2
09BA4:  BRA    9C4A
....................    {
....................       In2.B11 = 0x00;
09BA6:  BCF    xAD.2
....................       Ack.B11 = 0;
09BA8:  BCF    xA9.2
....................       Output.B11 = 1;      //Off LED
09BAA:  BSF    x9D.2
....................       SendSMS.B11 =0;// Clear SMS
09BAC:  BCF    xB7.2
.................... 
....................       if((OutputType.B11 == 1 || OutputBoth.B11 == 0)&& inputflag ==0)      //If Buzzer or Both
09BAE:  BTFSC  xA3.2
09BB0:  BRA    9BB6
09BB2:  BTFSC  xA5.2
09BB4:  BRA    9BD8
09BB6:  MOVLB  C
09BB8:  MOVF   x17,F
09BBA:  BTFSC  FD8.2
09BBC:  BRA    9BC2
09BBE:  MOVLB  B
09BC0:  BRA    9BD8
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
09BC2:  MOVLW  01
09BC4:  MOVWF  x23
09BC6:  MOVLB  0
09BC8:  CALL   6268
09BCC:  DECFSZ 01,W
09BCE:  BRA    9BD2
09BD0:  BRA    9BD6
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
09BD2:  BCF    F89.4
09BD4:  BCF    F92.4
09BD6:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B11 == 0 || OutputBoth.B11 == 0)&& inputflag ==0)  //If Bell or Both
09BD8:  BTFSS  xA3.2
09BDA:  BRA    9BE0
09BDC:  BTFSC  xA5.2
09BDE:  BRA    9C02
09BE0:  MOVLB  C
09BE2:  MOVF   x17,F
09BE4:  BTFSC  FD8.2
09BE6:  BRA    9BEC
09BE8:  MOVLB  B
09BEA:  BRA    9C02
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09BEC:  MOVLW  02
09BEE:  MOVWF  x23
09BF0:  MOVLB  0
09BF2:  CALL   6268
09BF6:  DECFSZ 01,W
09BF8:  BRA    9BFC
09BFA:  BRA    9C00
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
09BFC:  BCF    F89.3
09BFE:  BCF    F92.3
09C00:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
09C02:  BTFSC  xAC.0
09C04:  BRA    9C4A
09C06:  BTFSC  xAC.1
09C08:  BRA    9C4A
09C0A:  BTFSC  xAC.2
09C0C:  BRA    9C4A
09C0E:  BTFSC  xAC.3
09C10:  BRA    9C4A
09C12:  BTFSC  xAC.4
09C14:  BRA    9C4A
09C16:  BTFSC  xAC.5
09C18:  BRA    9C4A
09C1A:  BTFSC  xAC.6
09C1C:  BRA    9C4A
09C1E:  BTFSC  xAC.7
09C20:  BRA    9C4A
09C22:  BTFSC  xAD.0
09C24:  BRA    9C4A
09C26:  BTFSC  xAD.1
09C28:  BRA    9C4A
09C2A:  BTFSC  xAD.2
09C2C:  BRA    9C4A
09C2E:  BTFSC  xAD.3
09C30:  BRA    9C4A
09C32:  BTFSC  xAD.4
09C34:  BRA    9C4A
09C36:  BTFSC  xAD.5
09C38:  BRA    9C4A
09C3A:  BTFSC  xAD.6
09C3C:  BRA    9C4A
09C3E:  BTFSC  xAD.7
09C40:  BRA    9C4A
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
09C42:  BCF    F89.3
09C44:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
09C46:  BCF    F89.4
09C48:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09C4A:  MOVLW  00
09C4C:  BTFSC  x9B.3
09C4E:  MOVLW  01
09C50:  MOVLB  C
09C52:  MOVWF  x24
09C54:  MOVLW  00
09C56:  MOVLB  B
09C58:  BTFSC  x9F.3
09C5A:  MOVLW  01
09C5C:  MOVLB  C
09C5E:  XORWF  x24,W
09C60:  SUBLW  01
09C62:  BNZ   9C6C
09C64:  MOVLB  B
09C66:  BTFSS  xA1.3
09C68:  BRA    9C72
09C6A:  MOVLB  C
09C6C:  BTFSS  1A.5
09C6E:  BRA    9D42
09C70:  MOVLB  B
....................    {
....................       if(In2.B12 == 0 && AutoAck == 0x0F && Ack.B12 == 0)   //use auto acknowlegde
09C72:  BTFSC  xAD.3
09C74:  BRA    9C92
09C76:  MOVLB  0
09C78:  MOVF   x6A,W
09C7A:  SUBLW  0F
09C7C:  BTFSC  FD8.2
09C7E:  BRA    9C84
09C80:  MOVLB  B
09C82:  BRA    9C92
09C84:  MOVLB  B
09C86:  BTFSC  xA9.3
09C88:  BRA    9C92
....................       {
....................             TimeBase1s = 100 ;            //reload again
09C8A:  MOVLW  64
09C8C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09C8E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B12 = 1;
09C92:  BSF    xAD.3
....................       if(Ack.B12 == 0)
09C94:  BTFSC  xA9.3
09C96:  BRA    9CC6
....................       {
....................          if(FlashingFlag == 0)
09C98:  BTFSC  1A.1
09C9A:  BRA    9CA0
....................             {
....................                Output.B12 = 0;           //Flash output1
09C9C:  BCF    x9D.3
....................             }
09C9E:  BRA    9CA2
....................             else
....................             {
....................                Output.B12 = 1;
09CA0:  BSF    x9D.3
....................             }
....................          if (~AutoTestFlag)
09CA2:  BTFSC  1A.4
09CA4:  BRA    9CC6
....................          {
....................             if(AlarmIndicator.B12 == 1){
09CA6:  BTFSS  xA7.3
09CA8:  BRA    9CC6
....................                 if(OutputBoth.B12 == 0)        //Both output
09CAA:  BTFSC  xA5.3
09CAC:  BRA    9CB8
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
09CAE:  BSF    F89.4
09CB0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
09CB2:  BSF    F89.3
09CB4:  BCF    F92.3
....................                 }
09CB6:  BRA    9CC6
....................                 else
....................                 {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,1);     //Buzzer
09CB8:  BTFSS  xA3.3
09CBA:  BRA    9CC2
09CBC:  BSF    F89.4
09CBE:  BCF    F92.4
09CC0:  BRA    9CC6
....................                   else output_bit(Pbell,1);                          //Bell
09CC2:  BSF    F89.3
09CC4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09CC6:  MOVLW  01
09CC8:  MOVLB  C
09CCA:  MOVWF  x17
....................       // SMS Sending   
....................         if((SendSMS.B12 ==0) && (functointest_f ==0) && (Ack.B12 ==0))
09CCC:  MOVLB  B
09CCE:  BTFSC  xB7.3
09CD0:  BRA    9D40
09CD2:  BTFSC  30.3
09CD4:  BRA    9D40
09CD6:  BTFSC  xA9.3
09CD8:  BRA    9D40
....................         {
....................           SendSMS.B12 =1;
09CDA:  BSF    xB7.3
....................           fprintf(CH2,"AT+CMGS=\"");
09CDC:  MOVLW  16
09CDE:  MOVWF  FF6
09CE0:  MOVLW  09
09CE2:  MOVWF  FF7
09CE4:  MOVLB  0
09CE6:  CALL   2ED0
....................           fprintf(CH2,sms_phonenumber);
09CEA:  MOVLW  09
09CEC:  MOVWF  FEA
09CEE:  MOVLW  8B
09CF0:  MOVWF  FE9
09CF2:  CALL   6242
....................           
....................           fprintf(CH2,"\"");
09CF6:  MOVLW  22
09CF8:  MOVLB  C
09CFA:  MOVWF  x25
09CFC:  MOVLB  0
09CFE:  CALL   2E8A
....................           putc('\n',CH2);
09D02:  MOVLW  0A
09D04:  MOVLB  C
09D06:  MOVWF  x25
09D08:  MOVLB  0
09D0A:  CALL   2E8A
....................           delay_ms(50);
09D0E:  MOVLW  32
09D10:  MOVLB  C
09D12:  MOVWF  x24
09D14:  MOVLB  0
09D16:  CALL   0952
....................          
....................          fprintf(CH2,SMS_Massage12);   
09D1A:  MOVLW  0A
09D1C:  MOVWF  FEA
09D1E:  MOVLW  FA
09D20:  MOVWF  FE9
09D22:  CALL   6242
....................          putc('\n',CH2);
09D26:  MOVLW  0A
09D28:  MOVLB  C
09D2A:  MOVWF  x25
09D2C:  MOVLB  0
09D2E:  CALL   2E8A
....................          putc(26,CH2);
09D32:  MOVLW  1A
09D34:  MOVLB  C
09D36:  MOVWF  x25
09D38:  MOVLB  0
09D3A:  CALL   2E8A
09D3E:  MOVLB  B
....................         }
....................    }
09D40:  BRA    9DEC
....................    else if(FaultType.B12 == 0)
09D42:  MOVLB  B
09D44:  BTFSC  xA1.3
09D46:  BRA    9DEC
....................    {
....................       In2.B12 = 0x00;
09D48:  BCF    xAD.3
....................       Ack.B12 = 0;
09D4A:  BCF    xA9.3
....................       Output.B12 = 1;      //Off LED
09D4C:  BSF    x9D.3
....................       SendSMS.B12 =0;// Clear SMS
09D4E:  BCF    xB7.3
.................... 
....................       if((OutputType.B12 == 1 || OutputBoth.B12 == 0)&& inputflag ==0)      //If Buzzer or Both
09D50:  BTFSC  xA3.3
09D52:  BRA    9D58
09D54:  BTFSC  xA5.3
09D56:  BRA    9D7A
09D58:  MOVLB  C
09D5A:  MOVF   x17,F
09D5C:  BTFSC  FD8.2
09D5E:  BRA    9D64
09D60:  MOVLB  B
09D62:  BRA    9D7A
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
09D64:  MOVLW  01
09D66:  MOVWF  x23
09D68:  MOVLB  0
09D6A:  CALL   6268
09D6E:  DECFSZ 01,W
09D70:  BRA    9D74
09D72:  BRA    9D78
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
09D74:  BCF    F89.4
09D76:  BCF    F92.4
09D78:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B12 == 0 || OutputBoth.B12 == 0)&& inputflag ==0)  //If Bell or Both
09D7A:  BTFSS  xA3.3
09D7C:  BRA    9D82
09D7E:  BTFSC  xA5.3
09D80:  BRA    9DA4
09D82:  MOVLB  C
09D84:  MOVF   x17,F
09D86:  BTFSC  FD8.2
09D88:  BRA    9D8E
09D8A:  MOVLB  B
09D8C:  BRA    9DA4
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09D8E:  MOVLW  02
09D90:  MOVWF  x23
09D92:  MOVLB  0
09D94:  CALL   6268
09D98:  DECFSZ 01,W
09D9A:  BRA    9D9E
09D9C:  BRA    9DA2
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
09D9E:  BCF    F89.3
09DA0:  BCF    F92.3
09DA2:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
09DA4:  BTFSC  xAC.0
09DA6:  BRA    9DEC
09DA8:  BTFSC  xAC.1
09DAA:  BRA    9DEC
09DAC:  BTFSC  xAC.2
09DAE:  BRA    9DEC
09DB0:  BTFSC  xAC.3
09DB2:  BRA    9DEC
09DB4:  BTFSC  xAC.4
09DB6:  BRA    9DEC
09DB8:  BTFSC  xAC.5
09DBA:  BRA    9DEC
09DBC:  BTFSC  xAC.6
09DBE:  BRA    9DEC
09DC0:  BTFSC  xAC.7
09DC2:  BRA    9DEC
09DC4:  BTFSC  xAD.0
09DC6:  BRA    9DEC
09DC8:  BTFSC  xAD.1
09DCA:  BRA    9DEC
09DCC:  BTFSC  xAD.2
09DCE:  BRA    9DEC
09DD0:  BTFSC  xAD.3
09DD2:  BRA    9DEC
09DD4:  BTFSC  xAD.4
09DD6:  BRA    9DEC
09DD8:  BTFSC  xAD.5
09DDA:  BRA    9DEC
09DDC:  BTFSC  xAD.6
09DDE:  BRA    9DEC
09DE0:  BTFSC  xAD.7
09DE2:  BRA    9DEC
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
09DE4:  BCF    F89.3
09DE6:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
09DE8:  BCF    F89.4
09DEA:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09DEC:  MOVLW  00
09DEE:  BTFSC  x9B.4
09DF0:  MOVLW  01
09DF2:  MOVLB  C
09DF4:  MOVWF  x24
09DF6:  MOVLW  00
09DF8:  MOVLB  B
09DFA:  BTFSC  x9F.4
09DFC:  MOVLW  01
09DFE:  MOVLB  C
09E00:  XORWF  x24,W
09E02:  SUBLW  01
09E04:  BNZ   9E0E
09E06:  MOVLB  B
09E08:  BTFSS  xA1.4
09E0A:  BRA    9E14
09E0C:  MOVLB  C
09E0E:  BTFSS  1A.5
09E10:  BRA    9EE4
09E12:  MOVLB  B
....................    {
....................       if(In2.B13 == 0 && AutoAck == 0x0F && Ack.B13 == 0)   //use auto acknowlegde
09E14:  BTFSC  xAD.4
09E16:  BRA    9E34
09E18:  MOVLB  0
09E1A:  MOVF   x6A,W
09E1C:  SUBLW  0F
09E1E:  BTFSC  FD8.2
09E20:  BRA    9E26
09E22:  MOVLB  B
09E24:  BRA    9E34
09E26:  MOVLB  B
09E28:  BTFSC  xA9.4
09E2A:  BRA    9E34
....................       {
....................             TimeBase1s = 100 ;            //reload again
09E2C:  MOVLW  64
09E2E:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09E30:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B13 = 1;
09E34:  BSF    xAD.4
....................       if(Ack.B13 == 0)
09E36:  BTFSC  xA9.4
09E38:  BRA    9E68
....................       {
....................          if(FlashingFlag == 0)
09E3A:  BTFSC  1A.1
09E3C:  BRA    9E42
....................             {
....................                Output.B13 = 0;           //Flash output1
09E3E:  BCF    x9D.4
....................             }
09E40:  BRA    9E44
....................             else
....................             {
....................                Output.B13 = 1;
09E42:  BSF    x9D.4
....................             }
....................          if (~AutoTestFlag)
09E44:  BTFSC  1A.4
09E46:  BRA    9E68
....................          {
....................             if(AlarmIndicator.B13 == 1){
09E48:  BTFSS  xA7.4
09E4A:  BRA    9E68
....................                 if(OutputBoth.B13 == 0)        //Both output
09E4C:  BTFSC  xA5.4
09E4E:  BRA    9E5A
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
09E50:  BSF    F89.4
09E52:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
09E54:  BSF    F89.3
09E56:  BCF    F92.3
....................                 }
09E58:  BRA    9E68
....................                 else
....................                 {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,1);     //Buzzer
09E5A:  BTFSS  xA3.4
09E5C:  BRA    9E64
09E5E:  BSF    F89.4
09E60:  BCF    F92.4
09E62:  BRA    9E68
....................                   else output_bit(Pbell,1);                          //Bell
09E64:  BSF    F89.3
09E66:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09E68:  MOVLW  01
09E6A:  MOVLB  C
09E6C:  MOVWF  x17
....................       // SMS Sending   
....................         if((SendSMS.B13 ==0) && (functointest_f ==0) && (Ack.B13 ==0))
09E6E:  MOVLB  B
09E70:  BTFSC  xB7.4
09E72:  BRA    9EE2
09E74:  BTFSC  30.3
09E76:  BRA    9EE2
09E78:  BTFSC  xA9.4
09E7A:  BRA    9EE2
....................         {
....................           SendSMS.B13 =1;
09E7C:  BSF    xB7.4
....................           fprintf(CH2,"AT+CMGS=\"");
09E7E:  MOVLW  20
09E80:  MOVWF  FF6
09E82:  MOVLW  09
09E84:  MOVWF  FF7
09E86:  MOVLB  0
09E88:  CALL   2ED0
....................           fprintf(CH2,sms_phonenumber);
09E8C:  MOVLW  09
09E8E:  MOVWF  FEA
09E90:  MOVLW  8B
09E92:  MOVWF  FE9
09E94:  CALL   6242
....................           
....................           fprintf(CH2,"\"");
09E98:  MOVLW  22
09E9A:  MOVLB  C
09E9C:  MOVWF  x25
09E9E:  MOVLB  0
09EA0:  CALL   2E8A
....................           putc('\n',CH2);
09EA4:  MOVLW  0A
09EA6:  MOVLB  C
09EA8:  MOVWF  x25
09EAA:  MOVLB  0
09EAC:  CALL   2E8A
....................           delay_ms(50);
09EB0:  MOVLW  32
09EB2:  MOVLB  C
09EB4:  MOVWF  x24
09EB6:  MOVLB  0
09EB8:  CALL   0952
....................          
....................          fprintf(CH2,SMS_Massage13);   
09EBC:  MOVLW  0B
09EBE:  MOVWF  FEA
09EC0:  MOVLW  1A
09EC2:  MOVWF  FE9
09EC4:  CALL   6242
....................          putc('\n',CH2);
09EC8:  MOVLW  0A
09ECA:  MOVLB  C
09ECC:  MOVWF  x25
09ECE:  MOVLB  0
09ED0:  CALL   2E8A
....................          putc(26,CH2);
09ED4:  MOVLW  1A
09ED6:  MOVLB  C
09ED8:  MOVWF  x25
09EDA:  MOVLB  0
09EDC:  CALL   2E8A
09EE0:  MOVLB  B
....................         }
....................    }
09EE2:  BRA    9F8E
....................    else if(FaultType.B13 == 0)
09EE4:  MOVLB  B
09EE6:  BTFSC  xA1.4
09EE8:  BRA    9F8E
....................    {
....................       In2.B13 = 0x00;
09EEA:  BCF    xAD.4
....................       Ack.B13 = 0;
09EEC:  BCF    xA9.4
....................       Output.B13 = 1;      //Off LED
09EEE:  BSF    x9D.4
....................       SendSMS.B13 =0;// Clear SMS
09EF0:  BCF    xB7.4
.................... 
....................       if((OutputType.B13 == 1 || OutputBoth.B13 == 0)&& inputflag ==0)      //If Buzzer or Both
09EF2:  BTFSC  xA3.4
09EF4:  BRA    9EFA
09EF6:  BTFSC  xA5.4
09EF8:  BRA    9F1C
09EFA:  MOVLB  C
09EFC:  MOVF   x17,F
09EFE:  BTFSC  FD8.2
09F00:  BRA    9F06
09F02:  MOVLB  B
09F04:  BRA    9F1C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
09F06:  MOVLW  01
09F08:  MOVWF  x23
09F0A:  MOVLB  0
09F0C:  CALL   6268
09F10:  DECFSZ 01,W
09F12:  BRA    9F16
09F14:  BRA    9F1A
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
09F16:  BCF    F89.4
09F18:  BCF    F92.4
09F1A:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B13 == 0 || OutputBoth.B13 == 0)&& inputflag ==0)  //If Bell or Both
09F1C:  BTFSS  xA3.4
09F1E:  BRA    9F24
09F20:  BTFSC  xA5.4
09F22:  BRA    9F46
09F24:  MOVLB  C
09F26:  MOVF   x17,F
09F28:  BTFSC  FD8.2
09F2A:  BRA    9F30
09F2C:  MOVLB  B
09F2E:  BRA    9F46
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09F30:  MOVLW  02
09F32:  MOVWF  x23
09F34:  MOVLB  0
09F36:  CALL   6268
09F3A:  DECFSZ 01,W
09F3C:  BRA    9F40
09F3E:  BRA    9F44
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
09F40:  BCF    F89.3
09F42:  BCF    F92.3
09F44:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
09F46:  BTFSC  xAC.0
09F48:  BRA    9F8E
09F4A:  BTFSC  xAC.1
09F4C:  BRA    9F8E
09F4E:  BTFSC  xAC.2
09F50:  BRA    9F8E
09F52:  BTFSC  xAC.3
09F54:  BRA    9F8E
09F56:  BTFSC  xAC.4
09F58:  BRA    9F8E
09F5A:  BTFSC  xAC.5
09F5C:  BRA    9F8E
09F5E:  BTFSC  xAC.6
09F60:  BRA    9F8E
09F62:  BTFSC  xAC.7
09F64:  BRA    9F8E
09F66:  BTFSC  xAD.0
09F68:  BRA    9F8E
09F6A:  BTFSC  xAD.1
09F6C:  BRA    9F8E
09F6E:  BTFSC  xAD.2
09F70:  BRA    9F8E
09F72:  BTFSC  xAD.3
09F74:  BRA    9F8E
09F76:  BTFSC  xAD.4
09F78:  BRA    9F8E
09F7A:  BTFSC  xAD.5
09F7C:  BRA    9F8E
09F7E:  BTFSC  xAD.6
09F80:  BRA    9F8E
09F82:  BTFSC  xAD.7
09F84:  BRA    9F8E
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
09F86:  BCF    F89.3
09F88:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
09F8A:  BCF    F89.4
09F8C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09F8E:  MOVLW  00
09F90:  BTFSC  x9B.5
09F92:  MOVLW  01
09F94:  MOVLB  C
09F96:  MOVWF  x24
09F98:  MOVLW  00
09F9A:  MOVLB  B
09F9C:  BTFSC  x9F.5
09F9E:  MOVLW  01
09FA0:  MOVLB  C
09FA2:  XORWF  x24,W
09FA4:  SUBLW  01
09FA6:  BNZ   9FB0
09FA8:  MOVLB  B
09FAA:  BTFSS  xA1.5
09FAC:  BRA    9FB6
09FAE:  MOVLB  C
09FB0:  BTFSS  1A.5
09FB2:  BRA    A086
09FB4:  MOVLB  B
....................    {
....................       if(In2.B14 == 0 && AutoAck == 0x0F && Ack.B14 == 0)   //use auto acknowlegde
09FB6:  BTFSC  xAD.5
09FB8:  BRA    9FD6
09FBA:  MOVLB  0
09FBC:  MOVF   x6A,W
09FBE:  SUBLW  0F
09FC0:  BTFSC  FD8.2
09FC2:  BRA    9FC8
09FC4:  MOVLB  B
09FC6:  BRA    9FD6
09FC8:  MOVLB  B
09FCA:  BTFSC  xA9.5
09FCC:  BRA    9FD6
....................       {
....................             TimeBase1s = 100 ;            //reload again
09FCE:  MOVLW  64
09FD0:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09FD2:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B14 = 1;
09FD6:  BSF    xAD.5
....................       if(Ack.B14 == 0)
09FD8:  BTFSC  xA9.5
09FDA:  BRA    A00A
....................       {
....................          if(FlashingFlag == 0)
09FDC:  BTFSC  1A.1
09FDE:  BRA    9FE4
....................             {
....................                Output.B14 = 0;           //Flash output1
09FE0:  BCF    x9D.5
....................             }
09FE2:  BRA    9FE6
....................             else
....................             {
....................                Output.B14 = 1;
09FE4:  BSF    x9D.5
....................             }
....................          if (~AutoTestFlag)
09FE6:  BTFSC  1A.4
09FE8:  BRA    A00A
....................          {
....................             if(AlarmIndicator.B14 == 1){
09FEA:  BTFSS  xA7.5
09FEC:  BRA    A00A
....................                 if(OutputBoth.B14 == 0)        //Both output
09FEE:  BTFSC  xA5.5
09FF0:  BRA    9FFC
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
09FF2:  BSF    F89.4
09FF4:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
09FF6:  BSF    F89.3
09FF8:  BCF    F92.3
....................                 }
09FFA:  BRA    A00A
....................                 else
....................                 {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,1);     //Buzzer
09FFC:  BTFSS  xA3.5
09FFE:  BRA    A006
0A000:  BSF    F89.4
0A002:  BCF    F92.4
0A004:  BRA    A00A
....................                   else output_bit(Pbell,1);                          //Bell
0A006:  BSF    F89.3
0A008:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A00A:  MOVLW  01
0A00C:  MOVLB  C
0A00E:  MOVWF  x17
....................       // SMS Sending   
....................         if((SendSMS.B14 ==0) && (functointest_f ==0) && (Ack.B14 ==0))
0A010:  MOVLB  B
0A012:  BTFSC  xB7.5
0A014:  BRA    A084
0A016:  BTFSC  30.3
0A018:  BRA    A084
0A01A:  BTFSC  xA9.5
0A01C:  BRA    A084
....................         {
....................           SendSMS.B14 =1;
0A01E:  BSF    xB7.5
....................           fprintf(CH2,"AT+CMGS=\"");
0A020:  MOVLW  2A
0A022:  MOVWF  FF6
0A024:  MOVLW  09
0A026:  MOVWF  FF7
0A028:  MOVLB  0
0A02A:  CALL   2ED0
....................           fprintf(CH2,sms_phonenumber);
0A02E:  MOVLW  09
0A030:  MOVWF  FEA
0A032:  MOVLW  8B
0A034:  MOVWF  FE9
0A036:  CALL   6242
....................           
....................           fprintf(CH2,"\"");
0A03A:  MOVLW  22
0A03C:  MOVLB  C
0A03E:  MOVWF  x25
0A040:  MOVLB  0
0A042:  CALL   2E8A
....................           putc('\n',CH2);
0A046:  MOVLW  0A
0A048:  MOVLB  C
0A04A:  MOVWF  x25
0A04C:  MOVLB  0
0A04E:  CALL   2E8A
....................           delay_ms(50);
0A052:  MOVLW  32
0A054:  MOVLB  C
0A056:  MOVWF  x24
0A058:  MOVLB  0
0A05A:  CALL   0952
....................          
....................          fprintf(CH2,SMS_Massage14);   
0A05E:  MOVLW  0B
0A060:  MOVWF  FEA
0A062:  MOVLW  3A
0A064:  MOVWF  FE9
0A066:  CALL   6242
....................          putc('\n',CH2);
0A06A:  MOVLW  0A
0A06C:  MOVLB  C
0A06E:  MOVWF  x25
0A070:  MOVLB  0
0A072:  CALL   2E8A
....................          putc(26,CH2);
0A076:  MOVLW  1A
0A078:  MOVLB  C
0A07A:  MOVWF  x25
0A07C:  MOVLB  0
0A07E:  CALL   2E8A
0A082:  MOVLB  B
....................         }
....................    }
0A084:  BRA    A130
....................    else if(FaultType.B14 == 0)
0A086:  MOVLB  B
0A088:  BTFSC  xA1.5
0A08A:  BRA    A130
....................    {
....................       In2.B14 = 0x00;
0A08C:  BCF    xAD.5
....................       Ack.B14 = 0;
0A08E:  BCF    xA9.5
....................       Output.B14 = 1;      //Off LED
0A090:  BSF    x9D.5
....................       SendSMS.B14 =0;// Clear SMS
0A092:  BCF    xB7.5
.................... 
....................       if((OutputType.B14 == 1 || OutputBoth.B14 == 0)&& inputflag ==0)      //If Buzzer or Both
0A094:  BTFSC  xA3.5
0A096:  BRA    A09C
0A098:  BTFSC  xA5.5
0A09A:  BRA    A0BE
0A09C:  MOVLB  C
0A09E:  MOVF   x17,F
0A0A0:  BTFSC  FD8.2
0A0A2:  BRA    A0A8
0A0A4:  MOVLB  B
0A0A6:  BRA    A0BE
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0A0A8:  MOVLW  01
0A0AA:  MOVWF  x23
0A0AC:  MOVLB  0
0A0AE:  CALL   6268
0A0B2:  DECFSZ 01,W
0A0B4:  BRA    A0B8
0A0B6:  BRA    A0BC
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0A0B8:  BCF    F89.4
0A0BA:  BCF    F92.4
0A0BC:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B14 == 0 || OutputBoth.B14 == 0)&& inputflag ==0)  //If Bell or Both
0A0BE:  BTFSS  xA3.5
0A0C0:  BRA    A0C6
0A0C2:  BTFSC  xA5.5
0A0C4:  BRA    A0E8
0A0C6:  MOVLB  C
0A0C8:  MOVF   x17,F
0A0CA:  BTFSC  FD8.2
0A0CC:  BRA    A0D2
0A0CE:  MOVLB  B
0A0D0:  BRA    A0E8
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A0D2:  MOVLW  02
0A0D4:  MOVWF  x23
0A0D6:  MOVLB  0
0A0D8:  CALL   6268
0A0DC:  DECFSZ 01,W
0A0DE:  BRA    A0E2
0A0E0:  BRA    A0E6
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0A0E2:  BCF    F89.3
0A0E4:  BCF    F92.3
0A0E6:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0A0E8:  BTFSC  xAC.0
0A0EA:  BRA    A130
0A0EC:  BTFSC  xAC.1
0A0EE:  BRA    A130
0A0F0:  BTFSC  xAC.2
0A0F2:  BRA    A130
0A0F4:  BTFSC  xAC.3
0A0F6:  BRA    A130
0A0F8:  BTFSC  xAC.4
0A0FA:  BRA    A130
0A0FC:  BTFSC  xAC.5
0A0FE:  BRA    A130
0A100:  BTFSC  xAC.6
0A102:  BRA    A130
0A104:  BTFSC  xAC.7
0A106:  BRA    A130
0A108:  BTFSC  xAD.0
0A10A:  BRA    A130
0A10C:  BTFSC  xAD.1
0A10E:  BRA    A130
0A110:  BTFSC  xAD.2
0A112:  BRA    A130
0A114:  BTFSC  xAD.3
0A116:  BRA    A130
0A118:  BTFSC  xAD.4
0A11A:  BRA    A130
0A11C:  BTFSC  xAD.5
0A11E:  BRA    A130
0A120:  BTFSC  xAD.6
0A122:  BRA    A130
0A124:  BTFSC  xAD.7
0A126:  BRA    A130
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0A128:  BCF    F89.3
0A12A:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0A12C:  BCF    F89.4
0A12E:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A130:  MOVLW  00
0A132:  BTFSC  x9B.6
0A134:  MOVLW  01
0A136:  MOVLB  C
0A138:  MOVWF  x24
0A13A:  MOVLW  00
0A13C:  MOVLB  B
0A13E:  BTFSC  x9F.6
0A140:  MOVLW  01
0A142:  MOVLB  C
0A144:  XORWF  x24,W
0A146:  SUBLW  01
0A148:  BNZ   A152
0A14A:  MOVLB  B
0A14C:  BTFSS  xA1.6
0A14E:  BRA    A158
0A150:  MOVLB  C
0A152:  BTFSS  1A.5
0A154:  BRA    A228
0A156:  MOVLB  B
....................    {
....................       if(In2.B15 == 0 && AutoAck == 0x0F && Ack.B15 == 0)   //use auto acknowlegde
0A158:  BTFSC  xAD.6
0A15A:  BRA    A178
0A15C:  MOVLB  0
0A15E:  MOVF   x6A,W
0A160:  SUBLW  0F
0A162:  BTFSC  FD8.2
0A164:  BRA    A16A
0A166:  MOVLB  B
0A168:  BRA    A178
0A16A:  MOVLB  B
0A16C:  BTFSC  xA9.6
0A16E:  BRA    A178
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A170:  MOVLW  64
0A172:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A174:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B15 = 1;
0A178:  BSF    xAD.6
....................       if(Ack.B15 == 0)
0A17A:  BTFSC  xA9.6
0A17C:  BRA    A1AC
....................       {
....................          if(FlashingFlag == 0)
0A17E:  BTFSC  1A.1
0A180:  BRA    A186
....................             {
....................                Output.B15 = 0;           //Flash output1
0A182:  BCF    x9D.6
....................             }
0A184:  BRA    A188
....................             else
....................             {
....................                Output.B15 = 1;
0A186:  BSF    x9D.6
....................             }
....................          if (~AutoTestFlag)
0A188:  BTFSC  1A.4
0A18A:  BRA    A1AC
....................          {
....................             if(AlarmIndicator.B15 == 1){
0A18C:  BTFSS  xA7.6
0A18E:  BRA    A1AC
....................                 if(OutputBoth.B15 == 0)        //Both output
0A190:  BTFSC  xA5.6
0A192:  BRA    A19E
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0A194:  BSF    F89.4
0A196:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0A198:  BSF    F89.3
0A19A:  BCF    F92.3
....................                 }
0A19C:  BRA    A1AC
....................                 else
....................                 {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,1);     //Buzzer
0A19E:  BTFSS  xA3.6
0A1A0:  BRA    A1A8
0A1A2:  BSF    F89.4
0A1A4:  BCF    F92.4
0A1A6:  BRA    A1AC
....................                   else output_bit(Pbell,1);                          //Bell
0A1A8:  BSF    F89.3
0A1AA:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A1AC:  MOVLW  01
0A1AE:  MOVLB  C
0A1B0:  MOVWF  x17
....................       // SMS Sending   
....................         if((SendSMS.B15 ==0) && (functointest_f ==0) && (Ack.B15 ==0))
0A1B2:  MOVLB  B
0A1B4:  BTFSC  xB7.6
0A1B6:  BRA    A226
0A1B8:  BTFSC  30.3
0A1BA:  BRA    A226
0A1BC:  BTFSC  xA9.6
0A1BE:  BRA    A226
....................         {
....................           SendSMS.B15 =1;
0A1C0:  BSF    xB7.6
....................           fprintf(CH2,"AT+CMGS=\"");
0A1C2:  MOVLW  34
0A1C4:  MOVWF  FF6
0A1C6:  MOVLW  09
0A1C8:  MOVWF  FF7
0A1CA:  MOVLB  0
0A1CC:  CALL   2ED0
....................           fprintf(CH2,sms_phonenumber);
0A1D0:  MOVLW  09
0A1D2:  MOVWF  FEA
0A1D4:  MOVLW  8B
0A1D6:  MOVWF  FE9
0A1D8:  CALL   6242
....................           
....................           fprintf(CH2,"\"");
0A1DC:  MOVLW  22
0A1DE:  MOVLB  C
0A1E0:  MOVWF  x25
0A1E2:  MOVLB  0
0A1E4:  CALL   2E8A
....................           putc('\n',CH2);
0A1E8:  MOVLW  0A
0A1EA:  MOVLB  C
0A1EC:  MOVWF  x25
0A1EE:  MOVLB  0
0A1F0:  CALL   2E8A
....................           delay_ms(50);
0A1F4:  MOVLW  32
0A1F6:  MOVLB  C
0A1F8:  MOVWF  x24
0A1FA:  MOVLB  0
0A1FC:  CALL   0952
....................          
....................          fprintf(CH2,SMS_Massage15);   
0A200:  MOVLW  0B
0A202:  MOVWF  FEA
0A204:  MOVLW  5A
0A206:  MOVWF  FE9
0A208:  CALL   6242
....................          putc('\n',CH2);
0A20C:  MOVLW  0A
0A20E:  MOVLB  C
0A210:  MOVWF  x25
0A212:  MOVLB  0
0A214:  CALL   2E8A
....................          putc(26,CH2);
0A218:  MOVLW  1A
0A21A:  MOVLB  C
0A21C:  MOVWF  x25
0A21E:  MOVLB  0
0A220:  CALL   2E8A
0A224:  MOVLB  B
....................         }
....................    }
0A226:  BRA    A2D2
....................    else if(FaultType.B15 == 0)
0A228:  MOVLB  B
0A22A:  BTFSC  xA1.6
0A22C:  BRA    A2D2
....................    {
....................       In2.B15 = 0x00;
0A22E:  BCF    xAD.6
....................       Ack.B15 = 0;
0A230:  BCF    xA9.6
....................       Output.B15 = 1;      //Off LED
0A232:  BSF    x9D.6
....................       SendSMS.B15 =0;// Clear SMS
0A234:  BCF    xB7.6
.................... 
....................       if((OutputType.B15 == 1 || OutputBoth.B15 == 0)&& inputflag ==0)      //If Buzzer or Both
0A236:  BTFSC  xA3.6
0A238:  BRA    A23E
0A23A:  BTFSC  xA5.6
0A23C:  BRA    A260
0A23E:  MOVLB  C
0A240:  MOVF   x17,F
0A242:  BTFSC  FD8.2
0A244:  BRA    A24A
0A246:  MOVLB  B
0A248:  BRA    A260
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0A24A:  MOVLW  01
0A24C:  MOVWF  x23
0A24E:  MOVLB  0
0A250:  CALL   6268
0A254:  DECFSZ 01,W
0A256:  BRA    A25A
0A258:  BRA    A25E
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0A25A:  BCF    F89.4
0A25C:  BCF    F92.4
0A25E:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B15 == 0 || OutputBoth.B15 == 0)&& inputflag ==0)  //If Bell or Both
0A260:  BTFSS  xA3.6
0A262:  BRA    A268
0A264:  BTFSC  xA5.6
0A266:  BRA    A28A
0A268:  MOVLB  C
0A26A:  MOVF   x17,F
0A26C:  BTFSC  FD8.2
0A26E:  BRA    A274
0A270:  MOVLB  B
0A272:  BRA    A28A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A274:  MOVLW  02
0A276:  MOVWF  x23
0A278:  MOVLB  0
0A27A:  CALL   6268
0A27E:  DECFSZ 01,W
0A280:  BRA    A284
0A282:  BRA    A288
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0A284:  BCF    F89.3
0A286:  BCF    F92.3
0A288:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0A28A:  BTFSC  xAC.0
0A28C:  BRA    A2D2
0A28E:  BTFSC  xAC.1
0A290:  BRA    A2D2
0A292:  BTFSC  xAC.2
0A294:  BRA    A2D2
0A296:  BTFSC  xAC.3
0A298:  BRA    A2D2
0A29A:  BTFSC  xAC.4
0A29C:  BRA    A2D2
0A29E:  BTFSC  xAC.5
0A2A0:  BRA    A2D2
0A2A2:  BTFSC  xAC.6
0A2A4:  BRA    A2D2
0A2A6:  BTFSC  xAC.7
0A2A8:  BRA    A2D2
0A2AA:  BTFSC  xAD.0
0A2AC:  BRA    A2D2
0A2AE:  BTFSC  xAD.1
0A2B0:  BRA    A2D2
0A2B2:  BTFSC  xAD.2
0A2B4:  BRA    A2D2
0A2B6:  BTFSC  xAD.3
0A2B8:  BRA    A2D2
0A2BA:  BTFSC  xAD.4
0A2BC:  BRA    A2D2
0A2BE:  BTFSC  xAD.5
0A2C0:  BRA    A2D2
0A2C2:  BTFSC  xAD.6
0A2C4:  BRA    A2D2
0A2C6:  BTFSC  xAD.7
0A2C8:  BRA    A2D2
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0A2CA:  BCF    F89.3
0A2CC:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0A2CE:  BCF    F89.4
0A2D0:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A2D2:  MOVLW  00
0A2D4:  BTFSC  x9B.7
0A2D6:  MOVLW  01
0A2D8:  MOVLB  C
0A2DA:  MOVWF  x24
0A2DC:  MOVLW  00
0A2DE:  MOVLB  B
0A2E0:  BTFSC  x9F.7
0A2E2:  MOVLW  01
0A2E4:  MOVLB  C
0A2E6:  XORWF  x24,W
0A2E8:  SUBLW  01
0A2EA:  BNZ   A2F4
0A2EC:  MOVLB  B
0A2EE:  BTFSS  xA1.7
0A2F0:  BRA    A2FA
0A2F2:  MOVLB  C
0A2F4:  BTFSS  1A.5
0A2F6:  BRA    A3CA
0A2F8:  MOVLB  B
....................    {
....................       if(In2.B16 == 0 && AutoAck == 0x0F && Ack.B16 == 0)   //use auto acknowlegde
0A2FA:  BTFSC  xAD.7
0A2FC:  BRA    A31A
0A2FE:  MOVLB  0
0A300:  MOVF   x6A,W
0A302:  SUBLW  0F
0A304:  BTFSC  FD8.2
0A306:  BRA    A30C
0A308:  MOVLB  B
0A30A:  BRA    A31A
0A30C:  MOVLB  B
0A30E:  BTFSC  xA9.7
0A310:  BRA    A31A
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A312:  MOVLW  64
0A314:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A316:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B16 = 1;
0A31A:  BSF    xAD.7
....................       if(Ack.B16 == 0)
0A31C:  BTFSC  xA9.7
0A31E:  BRA    A34E
....................       {
....................          if(FlashingFlag == 0)
0A320:  BTFSC  1A.1
0A322:  BRA    A328
....................             {
....................                Output.B16 = 0;         //Flash output1
0A324:  BCF    x9D.7
....................             }
0A326:  BRA    A32A
....................             else
....................             {
....................                Output.B16 = 1;
0A328:  BSF    x9D.7
....................             }
....................          if (~AutoTestFlag)
0A32A:  BTFSC  1A.4
0A32C:  BRA    A34E
....................          {
....................             if(AlarmIndicator.B16 == 1){
0A32E:  BTFSS  xA7.7
0A330:  BRA    A34E
....................                 if(OutputBoth.B16 == 0)        //Both output
0A332:  BTFSC  xA5.7
0A334:  BRA    A340
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0A336:  BSF    F89.4
0A338:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0A33A:  BSF    F89.3
0A33C:  BCF    F92.3
....................                 }
0A33E:  BRA    A34E
....................                 else
....................                 {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,1);     //Buzzer
0A340:  BTFSS  xA3.7
0A342:  BRA    A34A
0A344:  BSF    F89.4
0A346:  BCF    F92.4
0A348:  BRA    A34E
....................                   else output_bit(Pbell,1);                          //Bell
0A34A:  BSF    F89.3
0A34C:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A34E:  MOVLW  01
0A350:  MOVLB  C
0A352:  MOVWF  x17
....................       // SMS Sending   
....................      if((SendSMS.B16 ==0) && (functointest_f ==0) && (Ack.B16 ==0))
0A354:  MOVLB  B
0A356:  BTFSC  xB7.7
0A358:  BRA    A3C8
0A35A:  BTFSC  30.3
0A35C:  BRA    A3C8
0A35E:  BTFSC  xA9.7
0A360:  BRA    A3C8
....................      {
....................        SendSMS.B16 =1;
0A362:  BSF    xB7.7
....................        fprintf(CH2,"AT+CMGS=\"");
0A364:  MOVLW  3E
0A366:  MOVWF  FF6
0A368:  MOVLW  09
0A36A:  MOVWF  FF7
0A36C:  MOVLB  0
0A36E:  CALL   2ED0
....................        fprintf(CH2,sms_phonenumber);
0A372:  MOVLW  09
0A374:  MOVWF  FEA
0A376:  MOVLW  8B
0A378:  MOVWF  FE9
0A37A:  CALL   6242
....................        
....................        fprintf(CH2,"\"");
0A37E:  MOVLW  22
0A380:  MOVLB  C
0A382:  MOVWF  x25
0A384:  MOVLB  0
0A386:  CALL   2E8A
....................        putc('\n',CH2);
0A38A:  MOVLW  0A
0A38C:  MOVLB  C
0A38E:  MOVWF  x25
0A390:  MOVLB  0
0A392:  CALL   2E8A
....................        delay_ms(50);
0A396:  MOVLW  32
0A398:  MOVLB  C
0A39A:  MOVWF  x24
0A39C:  MOVLB  0
0A39E:  CALL   0952
....................       
....................       fprintf(CH2,SMS_Massage16);   
0A3A2:  MOVLW  0B
0A3A4:  MOVWF  FEA
0A3A6:  MOVLW  7A
0A3A8:  MOVWF  FE9
0A3AA:  CALL   6242
....................       putc('\n',CH2);
0A3AE:  MOVLW  0A
0A3B0:  MOVLB  C
0A3B2:  MOVWF  x25
0A3B4:  MOVLB  0
0A3B6:  CALL   2E8A
....................       putc(26,CH2);
0A3BA:  MOVLW  1A
0A3BC:  MOVLB  C
0A3BE:  MOVWF  x25
0A3C0:  MOVLB  0
0A3C2:  CALL   2E8A
0A3C6:  MOVLB  B
....................      }
....................    }
0A3C8:  BRA    A474
....................    else if(FaultType.B16 == 0)
0A3CA:  MOVLB  B
0A3CC:  BTFSC  xA1.7
0A3CE:  BRA    A474
....................    {
....................       In2.B16 = 0x00;
0A3D0:  BCF    xAD.7
....................       Ack.B16 = 0;
0A3D2:  BCF    xA9.7
....................       Output.B16 = 1;      //Off LED
0A3D4:  BSF    x9D.7
....................       SendSMS.B16 =0;// Clear SMS
0A3D6:  BCF    xB7.7
.................... 
....................       if((OutputType.B16 == 1 || OutputBoth.B16 == 0)&& inputflag ==0)      //If Buzzer or Both
0A3D8:  BTFSC  xA3.7
0A3DA:  BRA    A3E0
0A3DC:  BTFSC  xA5.7
0A3DE:  BRA    A402
0A3E0:  MOVLB  C
0A3E2:  MOVF   x17,F
0A3E4:  BTFSC  FD8.2
0A3E6:  BRA    A3EC
0A3E8:  MOVLB  B
0A3EA:  BRA    A402
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0A3EC:  MOVLW  01
0A3EE:  MOVWF  x23
0A3F0:  MOVLB  0
0A3F2:  CALL   6268
0A3F6:  DECFSZ 01,W
0A3F8:  BRA    A3FC
0A3FA:  BRA    A400
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0A3FC:  BCF    F89.4
0A3FE:  BCF    F92.4
0A400:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B16 == 0 || OutputBoth.B16 == 0)&& inputflag ==0)  //If Bell or Both
0A402:  BTFSS  xA3.7
0A404:  BRA    A40A
0A406:  BTFSC  xA5.7
0A408:  BRA    A42C
0A40A:  MOVLB  C
0A40C:  MOVF   x17,F
0A40E:  BTFSC  FD8.2
0A410:  BRA    A416
0A412:  MOVLB  B
0A414:  BRA    A42C
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A416:  MOVLW  02
0A418:  MOVWF  x23
0A41A:  MOVLB  0
0A41C:  CALL   6268
0A420:  DECFSZ 01,W
0A422:  BRA    A426
0A424:  BRA    A42A
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0A426:  BCF    F89.3
0A428:  BCF    F92.3
0A42A:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0A42C:  BTFSC  xAC.0
0A42E:  BRA    A474
0A430:  BTFSC  xAC.1
0A432:  BRA    A474
0A434:  BTFSC  xAC.2
0A436:  BRA    A474
0A438:  BTFSC  xAC.3
0A43A:  BRA    A474
0A43C:  BTFSC  xAC.4
0A43E:  BRA    A474
0A440:  BTFSC  xAC.5
0A442:  BRA    A474
0A444:  BTFSC  xAC.6
0A446:  BRA    A474
0A448:  BTFSC  xAC.7
0A44A:  BRA    A474
0A44C:  BTFSC  xAD.0
0A44E:  BRA    A474
0A450:  BTFSC  xAD.1
0A452:  BRA    A474
0A454:  BTFSC  xAD.2
0A456:  BRA    A474
0A458:  BTFSC  xAD.3
0A45A:  BRA    A474
0A45C:  BTFSC  xAD.4
0A45E:  BRA    A474
0A460:  BTFSC  xAD.5
0A462:  BRA    A474
0A464:  BTFSC  xAD.6
0A466:  BRA    A474
0A468:  BTFSC  xAD.7
0A46A:  BRA    A474
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0A46C:  BCF    F89.3
0A46E:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0A470:  BCF    F89.4
0A472:  BCF    F92.4
....................       }
....................    }
0A474:  MOVLB  0
0A476:  RETURN 0
....................    
....................    
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Send_Ouput(void)
.................... {
....................     Red1_7 = 0;
*
02AE0:  CLRF   4E
....................     Red8_8 = 0;
02AE2:  CLRF   4F
....................     Red9_15 = 0;
02AE4:  CLRF   50
....................     Red16_16 = 0;
02AE6:  CLRF   51
.................... 
....................     Green1_7 = 0;
02AE8:  CLRF   52
....................     Green8_8 = 0;
02AEA:  CLRF   53
....................     Green9_15 = 0;
02AEC:  CLRF   54
....................     Green16_16 = 0;
02AEE:  CLRF   55
.................... 
....................    if(T_test == 0x00)
02AF0:  MOVF   2F,F
02AF2:  BTFSS  FD8.2
02AF4:  BRA    2E88
....................    {
....................       //if(NoOfPoint >= 10)
....................       //{
....................       
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
02AF6:  MOVLB  B
02AF8:  BTFSS  x9C.0
02AFA:  BRA    2B02
....................            {
....................              bit_clear(Red1_7,1); bit_clear(Green1_7,1);
02AFC:  BCF    4E.1
02AFE:  BCF    52.1
....................            }
02B00:  BRA    2B2A
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
02B02:  BTFSS  xB2.0
02B04:  BRA    2B10
02B06:  BTFSC  xB4.0
02B08:  BRA    2B10
....................              {
....................                bit_set(Red1_7,1); bit_clear(Green1_7,1);
02B0A:  BSF    4E.1
02B0C:  BCF    52.1
....................              }
02B0E:  BRA    2B2A
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
02B10:  BTFSC  xB2.0
02B12:  BRA    2B1E
02B14:  BTFSS  xB4.0
02B16:  BRA    2B1E
....................              {
....................                bit_clear(Red1_7,1); bit_set(Green1_7,1); 
02B18:  BCF    4E.1
02B1A:  BSF    52.1
....................              }
02B1C:  BRA    2B2A
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
02B1E:  BTFSS  xB2.0
02B20:  BRA    2B2A
02B22:  BTFSS  xB4.0
02B24:  BRA    2B2A
....................              {
....................                bit_set(Red1_7,1); bit_set(Green1_7,1) ; 
02B26:  BSF    4E.1
02B28:  BSF    52.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
02B2A:  BTFSS  x9C.1
02B2C:  BRA    2B34
....................            {
....................              bit_clear(Red1_7,2); bit_clear(Green1_7,2);
02B2E:  BCF    4E.2
02B30:  BCF    52.2
....................            }
02B32:  BRA    2B5C
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
02B34:  BTFSS  xB2.1
02B36:  BRA    2B42
02B38:  BTFSC  xB4.1
02B3A:  BRA    2B42
....................              {
....................                bit_set(Red1_7,2); bit_clear(Green1_7,2);
02B3C:  BSF    4E.2
02B3E:  BCF    52.2
....................              }
02B40:  BRA    2B5C
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
02B42:  BTFSC  xB2.1
02B44:  BRA    2B50
02B46:  BTFSS  xB4.1
02B48:  BRA    2B50
....................              {
....................                bit_clear(Red1_7,2); bit_set(Green1_7,2); 
02B4A:  BCF    4E.2
02B4C:  BSF    52.2
....................              }
02B4E:  BRA    2B5C
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
02B50:  BTFSS  xB2.1
02B52:  BRA    2B5C
02B54:  BTFSS  xB4.1
02B56:  BRA    2B5C
....................              {
....................                bit_set(Red1_7,2); bit_set(Green1_7,2) ; 
02B58:  BSF    4E.2
02B5A:  BSF    52.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
02B5C:  BTFSS  x9C.2
02B5E:  BRA    2B66
....................            {
....................              bit_clear(Red1_7,3); bit_clear(Green1_7,3);
02B60:  BCF    4E.3
02B62:  BCF    52.3
....................            }
02B64:  BRA    2B8E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
02B66:  BTFSS  xB2.2
02B68:  BRA    2B74
02B6A:  BTFSC  xB4.2
02B6C:  BRA    2B74
....................              {
....................                bit_set(Red1_7,3); bit_clear(Green1_7,3);
02B6E:  BSF    4E.3
02B70:  BCF    52.3
....................              }
02B72:  BRA    2B8E
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
02B74:  BTFSC  xB2.2
02B76:  BRA    2B82
02B78:  BTFSS  xB4.2
02B7A:  BRA    2B82
....................              {
....................                bit_clear(Red1_7,3); bit_set(Green1_7,3); 
02B7C:  BCF    4E.3
02B7E:  BSF    52.3
....................              }
02B80:  BRA    2B8E
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
02B82:  BTFSS  xB2.2
02B84:  BRA    2B8E
02B86:  BTFSS  xB4.2
02B88:  BRA    2B8E
....................              {
....................                bit_set(Red1_7,3); bit_set(Green1_7,3) ; 
02B8A:  BSF    4E.3
02B8C:  BSF    52.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
02B8E:  BTFSS  x9C.3
02B90:  BRA    2B98
....................            {
....................              bit_clear(Red1_7,4); bit_clear(Green1_7,4);
02B92:  BCF    4E.4
02B94:  BCF    52.4
....................            }
02B96:  BRA    2BC0
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
02B98:  BTFSS  xB2.3
02B9A:  BRA    2BA6
02B9C:  BTFSC  xB4.3
02B9E:  BRA    2BA6
....................              {
....................                bit_set(Red1_7,4); bit_clear(Green1_7,4);
02BA0:  BSF    4E.4
02BA2:  BCF    52.4
....................              }
02BA4:  BRA    2BC0
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
02BA6:  BTFSC  xB2.3
02BA8:  BRA    2BB4
02BAA:  BTFSS  xB4.3
02BAC:  BRA    2BB4
....................              {
....................                bit_clear(Red1_7,4); bit_set(Green1_7,4); 
02BAE:  BCF    4E.4
02BB0:  BSF    52.4
....................              }
02BB2:  BRA    2BC0
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
02BB4:  BTFSS  xB2.3
02BB6:  BRA    2BC0
02BB8:  BTFSS  xB4.3
02BBA:  BRA    2BC0
....................              {
....................                bit_set(Red1_7,4); bit_set(Green1_7,4) ; 
02BBC:  BSF    4E.4
02BBE:  BSF    52.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
02BC0:  BTFSS  x9C.4
02BC2:  BRA    2BCA
....................            {
....................              bit_clear(Red1_7,5); bit_clear(Green1_7,5);
02BC4:  BCF    4E.5
02BC6:  BCF    52.5
....................            }
02BC8:  BRA    2BF2
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
02BCA:  BTFSS  xB2.4
02BCC:  BRA    2BD8
02BCE:  BTFSC  xB4.4
02BD0:  BRA    2BD8
....................              {
....................                bit_set(Red1_7,5); bit_clear(Green1_7,5);
02BD2:  BSF    4E.5
02BD4:  BCF    52.5
....................              }
02BD6:  BRA    2BF2
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
02BD8:  BTFSC  xB2.4
02BDA:  BRA    2BE6
02BDC:  BTFSS  xB4.4
02BDE:  BRA    2BE6
....................              {
....................                bit_clear(Red1_7,5); bit_set(Green1_7,5); 
02BE0:  BCF    4E.5
02BE2:  BSF    52.5
....................              }
02BE4:  BRA    2BF2
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
02BE6:  BTFSS  xB2.4
02BE8:  BRA    2BF2
02BEA:  BTFSS  xB4.4
02BEC:  BRA    2BF2
....................              {
....................                bit_set(Red1_7,5); bit_set(Green1_7,5) ; 
02BEE:  BSF    4E.5
02BF0:  BSF    52.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
02BF2:  BTFSS  x9C.5
02BF4:  BRA    2BFC
....................            {
....................              bit_clear(Red1_7,6); bit_clear(Green1_7,6);
02BF6:  BCF    4E.6
02BF8:  BCF    52.6
....................            }
02BFA:  BRA    2C24
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
02BFC:  BTFSS  xB2.5
02BFE:  BRA    2C0A
02C00:  BTFSC  xB4.5
02C02:  BRA    2C0A
....................              {
....................                bit_set(Red1_7,6); bit_clear(Green1_7,6);
02C04:  BSF    4E.6
02C06:  BCF    52.6
....................              }
02C08:  BRA    2C24
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
02C0A:  BTFSC  xB2.5
02C0C:  BRA    2C18
02C0E:  BTFSS  xB4.5
02C10:  BRA    2C18
....................              {
....................                bit_clear(Red1_7,6); bit_set(Green1_7,6); 
02C12:  BCF    4E.6
02C14:  BSF    52.6
....................              }
02C16:  BRA    2C24
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
02C18:  BTFSS  xB2.5
02C1A:  BRA    2C24
02C1C:  BTFSS  xB4.5
02C1E:  BRA    2C24
....................              {
....................                bit_set(Red1_7,6); bit_set(Green1_7,6) ; 
02C20:  BSF    4E.6
02C22:  BSF    52.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
02C24:  BTFSS  x9C.6
02C26:  BRA    2C2E
....................            {
....................              bit_clear(Red1_7,7); bit_clear(Green1_7,7);
02C28:  BCF    4E.7
02C2A:  BCF    52.7
....................            }
02C2C:  BRA    2C56
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
02C2E:  BTFSS  xB2.6
02C30:  BRA    2C3C
02C32:  BTFSC  xB4.6
02C34:  BRA    2C3C
....................              {
....................                bit_set(Red1_7,7); bit_clear(Green1_7,7);
02C36:  BSF    4E.7
02C38:  BCF    52.7
....................              }
02C3A:  BRA    2C56
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
02C3C:  BTFSC  xB2.6
02C3E:  BRA    2C4A
02C40:  BTFSS  xB4.6
02C42:  BRA    2C4A
....................              {
....................                bit_clear(Red1_7,7); bit_set(Green1_7,7); 
02C44:  BCF    4E.7
02C46:  BSF    52.7
....................              }
02C48:  BRA    2C56
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
02C4A:  BTFSS  xB2.6
02C4C:  BRA    2C56
02C4E:  BTFSS  xB4.6
02C50:  BRA    2C56
....................              {
....................                bit_set(Red1_7,7); bit_set(Green
02C52:  BSF    4E.7
02C54:  BSF    52.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
02C56:  BTFSS  x9C.7
02C58:  BRA    2C60
....................            {
....................              bit_clear(Red8_8,0); bit_clear(Green8_8,0);
02C5A:  BCF    4F.0
02C5C:  BCF    53.0
....................            }
02C5E:  BRA    2C88
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
02C60:  BTFSS  xB2.7
02C62:  BRA    2C6E
02C64:  BTFSC  xB4.7
02C66:  BRA    2C6E
....................              {
....................                bit_set(Red8_8,0); bit_clear(Green8_8,0);
02C68:  BSF    4F.0
02C6A:  BCF    53.0
....................              }
02C6C:  BRA    2C88
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
02C6E:  BTFSC  xB2.7
02C70:  BRA    2C7C
02C72:  BTFSS  xB4.7
02C74:  BRA    2C7C
....................              {
....................                bit_clear(Red8_8,0); bit_set(Green8_8,0); 
02C76:  BCF    4F.0
02C78:  BSF    53.0
....................              }
02C7A:  BRA    2C88
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
02C7C:  BTFSS  xB2.7
02C7E:  BRA    2C88
02C80:  BTFSS  xB4.7
02C82:  BRA    2C88
....................              {
....................                bit_set(Red8_8,0); bit_set(Green8_8,0) ; 
02C84:  BSF    4F.0
02C86:  BSF    53.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            ////////////////////////////////////////////////////////
....................            if(Output.B9)//++++++++++++B9+++++++++++++++++++++
02C88:  BTFSS  x9D.0
02C8A:  BRA    2C92
....................            {
....................              bit_clear(Red9_15,1); bit_clear(Green9_15,1);
02C8C:  BCF    50.1
02C8E:  BCF    54.1
....................            }
02C90:  BRA    2CBA
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B9 )&&(GREEN_Colour.B9 ==0 ))//Red
02C92:  BTFSS  xB3.0
02C94:  BRA    2CA0
02C96:  BTFSC  xB5.0
02C98:  BRA    2CA0
....................              {
....................                bit_set(Red9_15,1); bit_clear(Green9_15,1);
02C9A:  BSF    50.1
02C9C:  BCF    54.1
....................              }
02C9E:  BRA    2CBA
....................              else if((RED_Colour.B9==0 )&&(GREEN_Colour.B9))//Green
02CA0:  BTFSC  xB3.0
02CA2:  BRA    2CAE
02CA4:  BTFSS  xB5.0
02CA6:  BRA    2CAE
....................              {
....................                bit_clear(Red9_15,1); bit_set(Green9_15,1); 
02CA8:  BCF    50.1
02CAA:  BSF    54.1
....................              }
02CAC:  BRA    2CBA
....................              else if((RED_Colour.B9)&&(GREEN_Colour.B9))//Ambian
02CAE:  BTFSS  xB3.0
02CB0:  BRA    2CBA
02CB2:  BTFSS  xB5.0
02CB4:  BRA    2CBA
....................              {
....................                bit_set(Red9_15,1); bit_set(Green9_15,1) ; 
02CB6:  BSF    50.1
02CB8:  BSF    54.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B10)//++++++++++++B10+++++++++++++++++++++
02CBA:  BTFSS  x9D.1
02CBC:  BRA    2CC4
....................            {
....................              bit_clear(Red9_15,2); bit_clear(Green9_15,2);
02CBE:  BCF    50.2
02CC0:  BCF    54.2
....................            }
02CC2:  BRA    2CEC
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B10 )&&(GREEN_Colour.B10 ==0 ))//Red
02CC4:  BTFSS  xB3.1
02CC6:  BRA    2CD2
02CC8:  BTFSC  xB5.1
02CCA:  BRA    2CD2
....................              {
....................                bit_set(Red9_15,2); bit_clear(Green9_15,2);
02CCC:  BSF    50.2
02CCE:  BCF    54.2
....................              }
02CD0:  BRA    2CEC
....................              else if((RED_Colour.B10==0 )&&(GREEN_Colour.B10))//Green
02CD2:  BTFSC  xB3.1
02CD4:  BRA    2CE0
02CD6:  BTFSS  xB5.1
02CD8:  BRA    2CE0
....................              {
....................                bit_clear(Red9_15,2); bit_set(Green9_15,2); 
02CDA:  BCF    50.2
02CDC:  BSF    54.2
....................              }
02CDE:  BRA    2CEC
....................              else if((RED_Colour.B10)&&(GREEN_Colour.B10))//Ambian
02CE0:  BTFSS  xB3.1
02CE2:  BRA    2CEC
02CE4:  BTFSS  xB5.1
02CE6:  BRA    2CEC
....................              {
....................                bit_set(Red9_15,2); bit_set(Green9_15,2) ; 
02CE8:  BSF    50.2
02CEA:  BSF    54.2
....................              }  
....................            }
....................            
....................        // }
....................         
....................        // if(NoOfPoint >= 20)
....................       //{   
....................            ////////////////////////////////////////////////////////
....................             if(Output.B11)//++++++++++++B11+++++++++++++++++++++
02CEC:  BTFSS  x9D.2
02CEE:  BRA    2CF6
....................            {
....................              bit_clear(Red9_15,3); bit_clear(Green9_15,3);
02CF0:  BCF    50.3
02CF2:  BCF    54.3
....................            }
02CF4:  BRA    2D1E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B11 )&&(GREEN_Colour.B11 ==0 ))//Red
02CF6:  BTFSS  xB3.2
02CF8:  BRA    2D04
02CFA:  BTFSC  xB5.2
02CFC:  BRA    2D04
....................              {
....................                bit_set(Red9_15,3); bit_clear(Green9_15,3);
02CFE:  BSF    50.3
02D00:  BCF    54.3
....................              }
02D02:  BRA    2D1E
....................              else if((RED_Colour.B11==0 )&&(GREEN_Colour.B11))//Green
02D04:  BTFSC  xB3.2
02D06:  BRA    2D12
02D08:  BTFSS  xB5.2
02D0A:  BRA    2D12
....................              {
....................                bit_clear(Red9_15,3); bit_set(Green9_15,3); 
02D0C:  BCF    50.3
02D0E:  BSF    54.3
....................              }
02D10:  BRA    2D1E
....................              else if((RED_Colour.B11)&&(GREEN_Colour.B11))//Ambian
02D12:  BTFSS  xB3.2
02D14:  BRA    2D1E
02D16:  BTFSS  xB5.2
02D18:  BRA    2D1E
....................              {
....................                bit_set(Red9_15,3); bit_set(Green9_15,3) ; 
02D1A:  BSF    50.3
02D1C:  BSF    54.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B12)//++++++++++++B12+++++++++++++++++++++
02D1E:  BTFSS  x9D.3
02D20:  BRA    2D28
....................            {
....................              bit_clear(Red9_15,4); bit_clear(Green9_15,4);
02D22:  BCF    50.4
02D24:  BCF    54.4
....................            }
02D26:  BRA    2D50
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B12 )&&(GREEN_Colour.B12 ==0 ))//Red
02D28:  BTFSS  xB3.3
02D2A:  BRA    2D36
02D2C:  BTFSC  xB5.3
02D2E:  BRA    2D36
....................              {
....................                bit_set(Red9_15,4); bit_clear(Green9_15,4);
02D30:  BSF    50.4
02D32:  BCF    54.4
....................              }
02D34:  BRA    2D50
....................              else if((RED_Colour.B12==0 )&&(GREEN_Colour.B12))//Green
02D36:  BTFSC  xB3.3
02D38:  BRA    2D44
02D3A:  BTFSS  xB5.3
02D3C:  BRA    2D44
....................              {
....................                bit_clear(Red9_15,4); bit_set(Green9_15,4); 
02D3E:  BCF    50.4
02D40:  BSF    54.4
....................              }
02D42:  BRA    2D50
....................              else if((RED_Colour.B12)&&(GREEN_Colour.B12))//Ambian
02D44:  BTFSS  xB3.3
02D46:  BRA    2D50
02D48:  BTFSS  xB5.3
02D4A:  BRA    2D50
....................              {
....................                bit_set(Red9_15,4); bit_set(Green9_15,4) ; 
02D4C:  BSF    50.4
02D4E:  BSF    54.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B13)//++++++++++++B13+++++++++++++++++++++
02D50:  BTFSS  x9D.4
02D52:  BRA    2D5A
....................            {
....................              bit_clear(Red9_15,5); bit_clear(Green9_15,5);
02D54:  BCF    50.5
02D56:  BCF    54.5
....................            }
02D58:  BRA    2D82
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B13 )&&(GREEN_Colour.B13 ==0 ))//Red
02D5A:  BTFSS  xB3.4
02D5C:  BRA    2D68
02D5E:  BTFSC  xB5.4
02D60:  BRA    2D68
....................              {
....................                bit_set(Red9_15,5); bit_clear(Green9_15,5);
02D62:  BSF    50.5
02D64:  BCF    54.5
....................              }
02D66:  BRA    2D82
....................              else if((RED_Colour.B13==0 )&&(GREEN_Colour.B13))//Green
02D68:  BTFSC  xB3.4
02D6A:  BRA    2D76
02D6C:  BTFSS  xB5.4
02D6E:  BRA    2D76
....................              {
....................                bit_clear(Red9_15,5); bit_set(Green9_15,5); 
02D70:  BCF    50.5
02D72:  BSF    54.5
....................              }
02D74:  BRA    2D82
....................              else if((RED_Colour.B13)&&(GREEN_Colour.B13))//Ambian
02D76:  BTFSS  xB3.4
02D78:  BRA    2D82
02D7A:  BTFSS  xB5.4
02D7C:  BRA    2D82
....................              {
....................                bit_set(Red9_15,5); bit_set(Green9_15,5) ; 
02D7E:  BSF    50.5
02D80:  BSF    54.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B14)//++++++++++++B14+++++++++++++++++++++
02D82:  BTFSS  x9D.5
02D84:  BRA    2D8C
....................            {
....................              bit_clear(Red9_15,6); bit_clear(Green9_15,6);
02D86:  BCF    50.6
02D88:  BCF    54.6
....................            }
02D8A:  BRA    2DB4
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B14 )&&(GREEN_Colour.B14 ==0 ))//Red
02D8C:  BTFSS  xB3.5
02D8E:  BRA    2D9A
02D90:  BTFSC  xB5.5
02D92:  BRA    2D9A
....................              {
....................                bit_set(Red9_15,6); bit_clear(Green9_15,6);
02D94:  BSF    50.6
02D96:  BCF    54.6
....................              }
02D98:  BRA    2DB4
....................              else if((RED_Colour.B14==0 )&&(GREEN_Colour.B14))//Green
02D9A:  BTFSC  xB3.5
02D9C:  BRA    2DA8
02D9E:  BTFSS  xB5.5
02DA0:  BRA    2DA8
....................              {
....................                bit_clear(Red9_15,6); bit_set(Green9_15,6); 
02DA2:  BCF    50.6
02DA4:  BSF    54.6
....................              }
02DA6:  BRA    2DB4
....................              else if((RED_Colour.B14)&&(GREEN_Colour.B14))//Ambian
02DA8:  BTFSS  xB3.5
02DAA:  BRA    2DB4
02DAC:  BTFSS  xB5.5
02DAE:  BRA    2DB4
....................              {
....................                bit_set(Red9_15,6); bit_set(Green9_15,6) ; 
02DB0:  BSF    50.6
02DB2:  BSF    54.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B15)//++++++++++++B15+++++++++++++++++++++
02DB4:  BTFSS  x9D.6
02DB6:  BRA    2DBE
....................            {
....................              bit_clear(Red9_15,7); bit_clear(Green9_15,7);
02DB8:  BCF    50.7
02DBA:  BCF    54.7
....................            }
02DBC:  BRA    2DE6
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B15 )&&(GREEN_Colour.B15 ==0 ))//Red
02DBE:  BTFSS  xB3.6
02DC0:  BRA    2DCC
02DC2:  BTFSC  xB5.6
02DC4:  BRA    2DCC
....................              {
....................                bit_set(Red9_15,7); bit_clear(Green9_15,7);
02DC6:  BSF    50.7
02DC8:  BCF    54.7
....................              }
02DCA:  BRA    2DE6
....................              else if((RED_Colour.B15==0 )&&(GREEN_Colour.B15))//Green
02DCC:  BTFSC  xB3.6
02DCE:  BRA    2DDA
02DD0:  BTFSS  xB5.6
02DD2:  BRA    2DDA
....................              {
....................                bit_clear(Red9_15,7); bit_set(Green9_15,7); 
02DD4:  BCF    50.7
02DD6:  BSF    54.7
....................              }
02DD8:  BRA    2DE6
....................              else if((RED_Colour.B15)&&(GREEN_Colour.B15))//Ambian
02DDA:  BTFSS  xB3.6
02DDC:  BRA    2DE6
02DDE:  BTFSS  xB5.6
02DE0:  BRA    2DE6
....................              {
....................                bit_set(Red9_15,7); bit_set(Green9_15,7) ; 
02DE2:  BSF    50.7
02DE4:  BSF    54.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B16)//++++++++++++B16+++++++++++++++++++++
02DE6:  BTFSS  x9D.7
02DE8:  BRA    2DF0
....................            {
....................              bit_clear(Red16_16,0); bit_clear(Green16_16,0);
02DEA:  BCF    51.0
02DEC:  BCF    55.0
....................            }
02DEE:  BRA    2E18
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B16 )&&(GREEN_Colour.B16 ==0 ))//Red
02DF0:  BTFSS  xB3.7
02DF2:  BRA    2DFE
02DF4:  BTFSC  xB5.7
02DF6:  BRA    2DFE
....................              {
....................                bit_set(Red16_16,0); bit_clear(Green16_16,0);
02DF8:  BSF    51.0
02DFA:  BCF    55.0
....................              }
02DFC:  BRA    2E18
....................              else if((RED_Colour.B16==0 )&&(GREEN_Colour.B16))//Green
02DFE:  BTFSC  xB3.7
02E00:  BRA    2E0C
02E02:  BTFSS  xB5.7
02E04:  BRA    2E0C
....................              {
....................                bit_clear(Red16_16,0); bit_set(Green16_16,0); 
02E06:  BCF    51.0
02E08:  BSF    55.0
....................              }
02E0A:  BRA    2E18
....................              else if((RED_Colour.B16)&&(GREEN_Colour.B16))//Ambian
02E0C:  BTFSS  xB3.7
02E0E:  BRA    2E18
02E10:  BTFSS  xB5.7
02E12:  BRA    2E18
....................              {
....................                bit_set(Red16_16,0); bit_set(Green16_16,0) ; 
02E14:  BSF    51.0
02E16:  BSF    55.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            
....................             /*
....................           
....................           
....................            ////////////////////////////////////////////////////////
....................            if(Output.B17)//++++++++++++B17+++++++++++++++++++++
....................            {
....................              bit_clear(Green11_18,6); bit_clear(Red11_18,6);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B17 )&&(GREEN_Colour.B17 ==0 ))//Red
....................              {
....................                bit_set(Red11_18,6); bit_clear(Green11_18,6);
....................              }
....................              else if((RED_Colour.B17==0 )&&(GREEN_Colour.B17))//Green
....................              {
....................                bit_clear(Red11_18,6); bit_set(Green11_18,6); 
....................              }
....................              else if((RED_Colour.B17)&&(GREEN_Colour.B17))//Ambian
....................              {
....................                bit_set(Red11_18,6); bit_set(Green11_18,6) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B18)//++++++++++++B18+++++++++++++++++++++
....................            {
....................              bit_clear(Green11_18,7); bit_clear(Red11_18,7);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B18 )&&(GREEN_Colour.B18 ==0 ))//Red
....................              {
....................                bit_set(Red11_18,7); bit_clear(Green11_18,7);
....................              }
....................              else if((RED_Colour.B18==0 )&&(GREEN_Colour.B18))//Green
....................              {
....................                bit_clear(Red11_18,7); bit_set(Green11_18,7); 
....................              }
....................              else if((RED_Colour.B18)&&(GREEN_Colour.B18))//Ambian
....................              {
....................                bit_set(Red11_18,7); bit_set(Green11_18,7) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B19)//++++++++++++B19+++++++++++++++++++++
....................            {
....................              bit_clear(Green19_20,0); bit_clear(Red19_20,0);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B19 )&&(GREEN_Colour.B19 ==0 ))//Red
....................              {
....................                bit_set(Red19_20,0); bit_clear(Green19_20,0);
....................              }
....................              else if((RED_Colour.B19==0 )&&(GREEN_Colour.B19))//Green
....................              {
....................                bit_clear(Red19_20,0); bit_set(Green19_20,0); 
....................              }
....................              else if((RED_Colour.B19)&&(GREEN_Colour.B19))//Ambian
....................              {
....................                bit_set(Red19_20,0); bit_set(Green19_20,0) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B20)//++++++++++++B20+++++++++++++++++++++
....................            {
....................              bit_clear(Green19_20,1); bit_clear(Red19_20,1);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B20 )&&(GREEN_Colour.B20 ==0 ))//Red
....................              {
....................                bit_set(Red19_20,1); bit_clear(Green19_20,1);
....................              }
....................              else if((RED_Colour.B20==0 )&&(GREEN_Colour.B20))//Green
....................              {
....................                bit_clear(Red19_20,1); bit_set(Green19_20,1); 
....................              }
....................              else if((RED_Colour.B20)&&(GREEN_Colour.B20))//Ambian
....................              {
....................                bit_set(Red19_20,1); bit_set(Green19_20,1) ; 
....................              }  
....................            }
....................            
....................            
....................            ////////////////////////////////////////////////////////
....................          
....................       //} 
.................... 
....................         */
....................         
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_7);
02E18:  MOVLW  04
02E1A:  MOVLB  C
02E1C:  MOVWF  x23
02E1E:  MOVFF  4E,C24
02E22:  MOVLB  0
02E24:  RCALL  2AB4
....................            IO_OUTPUT_B(IO_DEVICE_2, Red8_8);
02E26:  MOVLW  04
02E28:  MOVLB  C
02E2A:  MOVWF  x23
02E2C:  MOVFF  4F,C24
02E30:  MOVLB  0
02E32:  RCALL  2ACA
....................                       
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_7);
02E34:  MOVLW  06
02E36:  MOVLB  C
02E38:  MOVWF  x23
02E3A:  MOVFF  52,C24
02E3E:  MOVLB  0
02E40:  RCALL  2AB4
....................            IO_OUTPUT_B(IO_DEVICE_3, Green8_8);
02E42:  MOVLW  06
02E44:  MOVLB  C
02E46:  MOVWF  x23
02E48:  MOVFF  53,C24
02E4C:  MOVLB  0
02E4E:  RCALL  2ACA
....................            
....................            IO_OUTPUT_A(IO_DEVICE_5, Red9_15);                                                                                                                                      
02E50:  MOVLW  0A
02E52:  MOVLB  C
02E54:  MOVWF  x23
02E56:  MOVFF  50,C24
02E5A:  MOVLB  0
02E5C:  RCALL  2AB4
....................            IO_OUTPUT_B(IO_DEVICE_5, Red16_16);
02E5E:  MOVLW  0A
02E60:  MOVLB  C
02E62:  MOVWF  x23
02E64:  MOVFF  51,C24
02E68:  MOVLB  0
02E6A:  RCALL  2ACA
....................                      
....................            IO_OUTPUT_A(IO_DEVICE_4, Green9_15);
02E6C:  MOVLW  08
02E6E:  MOVLB  C
02E70:  MOVWF  x23
02E72:  MOVFF  54,C24
02E76:  MOVLB  0
02E78:  RCALL  2AB4
....................            IO_OUTPUT_B(IO_DEVICE_4, Green16_16);
02E7A:  MOVLW  08
02E7C:  MOVLB  C
02E7E:  MOVWF  x23
02E80:  MOVFF  55,C24
02E84:  MOVLB  0
02E86:  RCALL  2ACA
....................            
....................                                 
....................            //IO_OUTPUT_A(IO_DEVICE_4, Red1_8); //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_4, Red9_10); //jj test
....................            
....................            //IO_OUTPUT_A(IO_DEVICE_5, Green1_8);  //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_5, Green9_10); //jj test
....................                                            
....................            
....................    }
02E88:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
....................    if(NoOfPoint == 8)
*
06168:  MOVF   x6D,W
0616A:  SUBLW  08
0616C:  BNZ   61B4
....................    {
....................       Inputt.B1 = ~InputType.B1;
0616E:  MOVLB  B
06170:  BCF    x9A.0
06172:  BTFSS  x9E.0
06174:  BSF    x9A.0
....................       Inputt.B2 = ~InputType.B2;
06176:  BCF    x9A.1
06178:  BTFSS  x9E.1
0617A:  BSF    x9A.1
....................       Inputt.B3 = ~InputType.B3;
0617C:  BCF    x9A.2
0617E:  BTFSS  x9E.2
06180:  BSF    x9A.2
....................       Inputt.B4 = ~InputType.B4;
06182:  BCF    x9A.3
06184:  BTFSS  x9E.3
06186:  BSF    x9A.3
....................       Inputt.B5 = ~InputType.B5;
06188:  BCF    x9A.4
0618A:  BTFSS  x9E.4
0618C:  BSF    x9A.4
....................       Inputt.B6 = ~InputType.B6;
0618E:  BCF    x9A.5
06190:  BTFSS  x9E.5
06192:  BSF    x9A.5
....................       Inputt.B7 = ~InputType.B7;
06194:  BCF    x9A.6
06196:  BTFSS  x9E.6
06198:  BSF    x9A.6
....................       Inputt.B8 = ~InputType.B8;
0619A:  BCF    x9A.7
0619C:  BTFSS  x9E.7
0619E:  BSF    x9A.7
....................       Ack.B1 = 0;
061A0:  BCF    xA8.0
....................       Ack.B2 = 0;
061A2:  BCF    xA8.1
....................       Ack.B3 = 0;
061A4:  BCF    xA8.2
....................       Ack.B4 = 0;
061A6:  BCF    xA8.3
....................       Ack.B5 = 0;
061A8:  BCF    xA8.4
....................       Ack.B6 = 0;
061AA:  BCF    xA8.5
....................       Ack.B7 = 0;
061AC:  BCF    xA8.6
....................       Ack.B8 = 0;
061AE:  BCF    xA8.7
....................    }
061B0:  BRA    623C
061B2:  MOVLB  0
....................    else if(NoOfPoint == 16)
061B4:  MOVF   x6D,W
061B6:  SUBLW  10
061B8:  BNZ   623C
....................    {
....................       Inputt.B1 = ~InputType.B1;
061BA:  MOVLB  B
061BC:  BCF    x9A.0
061BE:  BTFSS  x9E.0
061C0:  BSF    x9A.0
....................       Inputt.B2 = ~InputType.B2;
061C2:  BCF    x9A.1
061C4:  BTFSS  x9E.1
061C6:  BSF    x9A.1
....................       Inputt.B3 = ~InputType.B3;
061C8:  BCF    x9A.2
061CA:  BTFSS  x9E.2
061CC:  BSF    x9A.2
....................       Inputt.B4 = ~InputType.B4;
061CE:  BCF    x9A.3
061D0:  BTFSS  x9E.3
061D2:  BSF    x9A.3
....................       Inputt.B5 = ~InputType.B5;
061D4:  BCF    x9A.4
061D6:  BTFSS  x9E.4
061D8:  BSF    x9A.4
....................       Inputt.B6 = ~InputType.B6;
061DA:  BCF    x9A.5
061DC:  BTFSS  x9E.5
061DE:  BSF    x9A.5
....................       Inputt.B7 = ~InputType.B7;
061E0:  BCF    x9A.6
061E2:  BTFSS  x9E.6
061E4:  BSF    x9A.6
....................       Inputt.B8 = ~InputType.B8;
061E6:  BCF    x9A.7
061E8:  BTFSS  x9E.7
061EA:  BSF    x9A.7
....................       Inputt.B9 = ~InputType.B9;
061EC:  BCF    x9B.0
061EE:  BTFSS  x9F.0
061F0:  BSF    x9B.0
....................       Inputt.B10 = ~InputType.B10;
061F2:  BCF    x9B.1
061F4:  BTFSS  x9F.1
061F6:  BSF    x9B.1
....................       Inputt.B11 = ~InputType.B11;
061F8:  BCF    x9B.2
061FA:  BTFSS  x9F.2
061FC:  BSF    x9B.2
....................       Inputt.B12 = ~InputType.B12;
061FE:  BCF    x9B.3
06200:  BTFSS  x9F.3
06202:  BSF    x9B.3
....................       Inputt.B13 = ~InputType.B13;
06204:  BCF    x9B.4
06206:  BTFSS  x9F.4
06208:  BSF    x9B.4
....................       Inputt.B14 = ~InputType.B14;
0620A:  BCF    x9B.5
0620C:  BTFSS  x9F.5
0620E:  BSF    x9B.5
....................       Inputt.B15 = ~InputType.B15;
06210:  BCF    x9B.6
06212:  BTFSS  x9F.6
06214:  BSF    x9B.6
....................       Inputt.B16 = ~InputType.B16;
06216:  BCF    x9B.7
06218:  BTFSS  x9F.7
0621A:  BSF    x9B.7
....................       Ack.B1 = 0;
0621C:  BCF    xA8.0
....................       Ack.B2 = 0;
0621E:  BCF    xA8.1
....................       Ack.B3 = 0;
06220:  BCF    xA8.2
....................       Ack.B4 = 0;
06222:  BCF    xA8.3
....................       Ack.B5 = 0;
06224:  BCF    xA8.4
....................       Ack.B6 = 0;
06226:  BCF    xA8.5
....................       Ack.B7 = 0;
06228:  BCF    xA8.6
....................       Ack.B8 = 0;
0622A:  BCF    xA8.7
....................       Ack.B9 = 0;
0622C:  BCF    xA9.0
....................       Ack.B10 = 0;
0622E:  BCF    xA9.1
....................       Ack.B11 = 0;
06230:  BCF    xA9.2
....................       Ack.B12 = 0;
06232:  BCF    xA9.3
....................       Ack.B13 = 0;
06234:  BCF    xA9.4
....................       Ack.B14 = 0;
06236:  BCF    xA9.5
....................       Ack.B15 = 0;
06238:  BCF    xA9.6
....................       Ack.B16 = 0;
0623A:  BCF    xA9.7
0623C:  MOVLB  0
....................    }
0623E:  GOTO   A54C (RETURN)
....................   
.................... }
.................... 
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
*
0A478:  MOVFF  32,C1B
....................    output_temp[1] = output9_16;
0A47C:  MOVFF  33,C1C
.................... 
.................... 
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
0A480:  BSF    F94.2
0A482:  BTFSC  F82.2
0A484:  BRA    A48A
0A486:  BTFSS  1A.6
0A488:  BRA    A48E
0A48A:  BTFSS  1A.4
0A48C:  BRA    A49A
0A48E:  MOVLW  32
0A490:  MOVLB  C
0A492:  MOVWF  x24
0A494:  MOVLB  0
0A496:  CALL   0952
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
0A49A:  BSF    F94.2
0A49C:  BTFSC  F82.2
0A49E:  BRA    A4A4
0A4A0:  BTFSS  1A.6
0A4A2:  BRA    A4A8
0A4A4:  BTFSS  1A.4
0A4A6:  BRA    A534
....................        {
....................            if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
0A4A8:  BSF    F94.2
0A4AA:  BTFSC  F82.2
0A4AC:  BRA    A4B2
0A4AE:  BTFSS  1A.6
0A4B0:  BRA    A4B6
0A4B2:  BTFSS  1A.4
0A4B4:  BRA    A532
....................            {
....................              restart_wdt();
0A4B6:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
0A4B8:  MOVF   2F,F
0A4BA:  BNZ   A4C0
0A4BC:  MOVLW  06
0A4BE:  MOVWF  2F
....................              Test = 1;
0A4C0:  BSF    1A.6
....................               //if(NoOfPoint >= 16)
....................              // {
....................              
....................                  IO_OUTPUT_A(IO_DEVICE_2, 0xFF);
0A4C2:  MOVLW  04
0A4C4:  MOVLB  C
0A4C6:  MOVWF  x23
0A4C8:  SETF   x24
0A4CA:  MOVLB  0
0A4CC:  CALL   2AB4
....................                  IO_OUTPUT_B(IO_DEVICE_2, 0xFF);
0A4D0:  MOVLW  04
0A4D2:  MOVLB  C
0A4D4:  MOVWF  x23
0A4D6:  SETF   x24
0A4D8:  MOVLB  0
0A4DA:  CALL   2ACA
....................                             
....................                  IO_OUTPUT_A(IO_DEVICE_3, 0xFF);
0A4DE:  MOVLW  06
0A4E0:  MOVLB  C
0A4E2:  MOVWF  x23
0A4E4:  SETF   x24
0A4E6:  MOVLB  0
0A4E8:  CALL   2AB4
....................                  IO_OUTPUT_B(IO_DEVICE_3, 0xFF);
0A4EC:  MOVLW  06
0A4EE:  MOVLB  C
0A4F0:  MOVWF  x23
0A4F2:  SETF   x24
0A4F4:  MOVLB  0
0A4F6:  CALL   2ACA
....................                  
....................                  IO_OUTPUT_A(IO_DEVICE_4, 0xFF);
0A4FA:  MOVLW  08
0A4FC:  MOVLB  C
0A4FE:  MOVWF  x23
0A500:  SETF   x24
0A502:  MOVLB  0
0A504:  CALL   2AB4
....................                  IO_OUTPUT_B(IO_DEVICE_4, 0xFF);
0A508:  MOVLW  08
0A50A:  MOVLB  C
0A50C:  MOVWF  x23
0A50E:  SETF   x24
0A510:  MOVLB  0
0A512:  CALL   2ACA
....................                            
....................                  IO_OUTPUT_A(IO_DEVICE_5, 0xFF);
0A516:  MOVLW  0A
0A518:  MOVLB  C
0A51A:  MOVWF  x23
0A51C:  SETF   x24
0A51E:  MOVLB  0
0A520:  CALL   2AB4
....................                  IO_OUTPUT_B(IO_DEVICE_5, 0xFF);
0A524:  MOVLW  0A
0A526:  MOVLB  C
0A528:  MOVWF  x23
0A52A:  SETF   x24
0A52C:  MOVLB  0
0A52E:  CALL   2ACA
....................                  //PCF8575_write(0xFF,0x00,Input1_8_Wr_addr);
....................                  //PCF8575_write(0xFF,0x00,Input9_16_Wr_addr);
....................                  //IO_OUTPUT_B(IO_DEVICE_0, 0x00);
....................                  //IO_OUTPUT_B(IO_DEVICE_1, 0x00);
....................              // }
....................              
....................            }
....................        }
0A532:  BRA    A544
....................        else if(input(Ptest) == 1 && Test == 1)
0A534:  BSF    F94.2
0A536:  BTFSS  F82.2
0A538:  BRA    A544
0A53A:  BTFSS  1A.6
0A53C:  BRA    A544
....................        {
....................            T_test = 0x00;
0A53E:  CLRF   2F
....................            Test = 0;
0A540:  BCF    1A.6
....................            Test_fault = 0;
0A542:  BCF    1A.5
....................        }
.................... 
.................... 
....................        if(Test_fault == 1)
0A544:  BTFSS  1A.5
0A546:  BRA    A55A
....................        {
....................           ForceAllAlarm();
0A548:  GOTO   6168
....................           Anal_Function();
0A54C:  CALL   6C70
....................           if(input(Ptest) == 1)
0A550:  BSF    F94.2
0A552:  BTFSS  F82.2
0A554:  BRA    A558
....................           {
....................             Test_fault = 0;
0A556:  BCF    1A.5
....................           }
....................        }
0A558:  BRA    A570
....................       
....................        else if(input(Ptest) == 1 && Test == 1)
0A55A:  BSF    F94.2
0A55C:  BTFSS  F82.2
0A55E:  BRA    A570
0A560:  BTFSS  1A.6
0A562:  BRA    A570
....................        {
....................           if(NoOfPoint >= 16)
0A564:  MOVF   x6D,W
0A566:  SUBLW  0F
0A568:  BC    A56A
....................           {
....................              //PCF8575_write(0xFF,output_temp[0],Input1_8_Wr_addr);
....................              //PCF8575_write(0xFF,output_temp[1],Input9_16_Wr_addr);
....................              //IO_OUTPUT_B(IO_DEVICE_0, output_temp[0]);
....................              //IO_OUTPUT_B(IO_DEVICE_1, output_temp[1]); 
....................           }
....................           
.................... 
....................           T_test = 0x00;
0A56A:  CLRF   2F
....................           Test = 0;
0A56C:  BCF    1A.6
....................           Test_fault = 0;
0A56E:  BCF    1A.5
....................        }
0A570:  GOTO   AE58 (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
0329C:  BSF    F94.0
0329E:  BTFSC  F82.0
032A0:  BRA    32A6
032A2:  BTFSS  1A.7
032A4:  BRA    32AA
032A6:  BTFSS  1A.2
032A8:  BRA    32B6
032AA:  MOVLW  32
032AC:  MOVLB  C
032AE:  MOVWF  x24
032B0:  MOVLB  0
032B2:  CALL   0952
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
032B6:  BSF    F94.0
032B8:  BTFSC  F82.0
032BA:  BRA    32C0
032BC:  BTFSS  1A.7
032BE:  BRA    32C4
032C0:  BTFSS  1A.2
032C2:  BRA    33D8
....................    {
....................             AutoAckFlag = 0;
032C4:  BCF    1A.2
....................             AutoAckDelayTime = 0x00;
032C6:  CLRF   1D
....................       
....................                   //if(In.B1 == 1 || ((Inputt.B1 ^ InputType.B1) == 1))
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
032C8:  MOVLB  B
032CA:  BTFSC  xAA.0
032CC:  BRA    32D2
032CE:  BTFSS  xAC.0
032D0:  BRA    32DA
....................            {
....................              Ack.B1 = 1;
032D2:  BSF    xA8.0
....................              In.B1 = 0;
032D4:  BCF    xAA.0
....................              In2.B1 = 0;      //for auto reset
032D6:  BCF    xAC.0
....................              Output.B1 = 0;
032D8:  BCF    x9C.0
....................            }
....................            //if(In.B2 == 1 || ((Inputt.B2 ^ InputType.B2) == 1))
....................            if((In.B2 == 1)||(In2.B2 == 1))
032DA:  BTFSC  xAA.1
032DC:  BRA    32E2
032DE:  BTFSS  xAC.1
032E0:  BRA    32EA
....................            {
....................              Ack.B2 = 1;
032E2:  BSF    xA8.1
....................              In.B2 = 0;
032E4:  BCF    xAA.1
....................              In2.B2 = 0;      //for auto reset
032E6:  BCF    xAC.1
....................              Output.B2 = 0;
032E8:  BCF    x9C.1
....................            }
....................            //if(In.B3 == 1 || ((Inputt.B3 ^ InputType.B3) == 1))
....................            if((In.B3 == 1)||(In2.B3 == 1))
032EA:  BTFSC  xAA.2
032EC:  BRA    32F2
032EE:  BTFSS  xAC.2
032F0:  BRA    32FA
....................            {
....................              Ack.B3 = 1;
032F2:  BSF    xA8.2
....................              In.B3 = 0;
032F4:  BCF    xAA.2
....................              In2.B3 = 0;      //for auto reset
032F6:  BCF    xAC.2
....................              Output.B3 = 0;
032F8:  BCF    x9C.2
....................            }
....................            //if(In.B4 == 1 || ((Inputt.B4 ^ InputType.B4) == 1))
....................            if((In.B4 == 1)||(In2.B4 == 1))
032FA:  BTFSC  xAA.3
032FC:  BRA    3302
032FE:  BTFSS  xAC.3
03300:  BRA    330A
....................            {
....................              Ack.B4 = 1;
03302:  BSF    xA8.3
....................              In.B4 = 0;
03304:  BCF    xAA.3
....................              In2.B4 = 0;      //for auto reset
03306:  BCF    xAC.3
....................              Output.B4 = 0;
03308:  BCF    x9C.3
....................            }
....................            //if(In.B5 == 1 || ((Inputt.B5 ^ InputType.B5) == 1))
....................            if((In.B5 == 1)||(In2.B5 == 1))
0330A:  BTFSC  xAA.4
0330C:  BRA    3312
0330E:  BTFSS  xAC.4
03310:  BRA    331A
....................            {
....................              Ack.B5 = 1;
03312:  BSF    xA8.4
....................              In.B5 = 0;
03314:  BCF    xAA.4
....................              In2.B5 = 0;      //for auto reset
03316:  BCF    xAC.4
....................              Output.B5 = 0;
03318:  BCF    x9C.4
....................            }
....................            //if(In.B6 == 1 || ((Inputt.B6 ^ InputType.B6) == 1))
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
0331A:  BTFSC  xAA.5
0331C:  BRA    3322
0331E:  BTFSS  xAC.5
03320:  BRA    332A
....................            {
....................              Ack.B6 = 1;
03322:  BSF    xA8.5
....................              In.B6 = 0;
03324:  BCF    xAA.5
....................              In2.B6 = 0;      //for auto reset
03326:  BCF    xAC.5
....................              Output.B6 = 0;
03328:  BCF    x9C.5
....................            }
....................            //if(In.B7 == 1 || ((Inputt.B7 ^ InputType.B7) == 1))
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
0332A:  BTFSC  xAA.6
0332C:  BRA    3332
0332E:  BTFSS  xAC.6
03330:  BRA    333A
....................            {
....................              Ack.B7 = 1;
03332:  BSF    xA8.6
....................              In.B7 = 0;
03334:  BCF    xAA.6
....................              In2.B7 = 0;      //for auto reset
03336:  BCF    xAC.6
....................              Output.B7 = 0;
03338:  BCF    x9C.6
....................            }
....................            //if(In.B8 == 1 || ((Inputt.B8 ^ InputType.B8) == 1))
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
0333A:  BTFSC  xAA.7
0333C:  BRA    3342
0333E:  BTFSS  xAC.7
03340:  BRA    334A
....................            {
....................              Ack.B8 = 1;
03342:  BSF    xA8.7
....................              In.B8 = 0;
03344:  BCF    xAA.7
....................              In2.B8 = 0;      //for auto reset
03346:  BCF    xAC.7
....................              Output.B8 = 0;
03348:  BCF    x9C.7
....................            }
....................           // if(In.B9 == 1 || ((Inputt.B9 ^ InputType.B9) == 1))
....................            if((In.B9 == 1 )||(In2.B9 == 1 ))
0334A:  BTFSC  xAB.0
0334C:  BRA    3352
0334E:  BTFSS  xAD.0
03350:  BRA    335A
....................            {
....................              Ack.B9 = 1;
03352:  BSF    xA9.0
....................              In.B9 = 0;
03354:  BCF    xAB.0
....................              In2.B9 = 0;      //for auto reset
03356:  BCF    xAD.0
....................              Output.B9 = 0;
03358:  BCF    x9D.0
....................            }
....................            //if(In.B10 == 1 || ((Inputt.B10 ^ InputType.B10) == 1))
....................            if((In.B10 == 1)||(In2.B10 == 1))
0335A:  BTFSC  xAB.1
0335C:  BRA    3362
0335E:  BTFSS  xAD.1
03360:  BRA    336A
....................            {
....................              Ack.B10 = 1;
03362:  BSF    xA9.1
....................              In.B10 = 0;
03364:  BCF    xAB.1
....................              In2.B10 = 0;      //for auto reset
03366:  BCF    xAD.1
....................              Output.B10 = 0;
03368:  BCF    x9D.1
....................            }
....................            //if(In.B11 == 1 || ((Inputt.B11 ^ InputType.B11) == 1))
....................            if((In.B11 == 1)||(In2.B11 == 1))
0336A:  BTFSC  xAB.2
0336C:  BRA    3372
0336E:  BTFSS  xAD.2
03370:  BRA    337A
....................            {
....................              Ack.B11 = 1;
03372:  BSF    xA9.2
....................              In.B11 = 0;
03374:  BCF    xAB.2
....................              In2.B11 = 0;      //for auto reset
03376:  BCF    xAD.2
....................              Output.B11 = 0;
03378:  BCF    x9D.2
....................            }
....................            //if(In.B12 == 1 || ((Inputt.B12 ^ InputType.B12) == 1))
....................            if((In.B12 == 1)||(In2.B12 == 1))
0337A:  BTFSC  xAB.3
0337C:  BRA    3382
0337E:  BTFSS  xAD.3
03380:  BRA    338A
....................            {
....................              Ack.B12 = 1;
03382:  BSF    xA9.3
....................              In.B12 = 0;
03384:  BCF    xAB.3
....................              In2.B12 = 0;      //for auto reset
03386:  BCF    xAD.3
....................              Output.B12 = 0;
03388:  BCF    x9D.3
....................            }
....................            //if(In.B13 == 1 || ((Inputt.B13 ^ InputType.B13) == 1))
....................            if((In.B13 == 1 )||(In2.B13 == 1 ))
0338A:  BTFSC  xAB.4
0338C:  BRA    3392
0338E:  BTFSS  xAD.4
03390:  BRA    339A
....................            {
....................              Ack.B13 = 1;
03392:  BSF    xA9.4
....................              In.B13 = 0;
03394:  BCF    xAB.4
....................              In2.B13 = 0;      //for auto reset
03396:  BCF    xAD.4
....................              Output.B13 = 0;
03398:  BCF    x9D.4
....................            }
....................            //if(In.B14 == 1 || ((Inputt.B14 ^ InputType.B14) == 1))
....................            if((In.B14 == 1)||(In2.B14 == 1))
0339A:  BTFSC  xAB.5
0339C:  BRA    33A2
0339E:  BTFSS  xAD.5
033A0:  BRA    33AA
....................            {
....................              Ack.B14 = 1;
033A2:  BSF    xA9.5
....................              In.B14 = 0;
033A4:  BCF    xAB.5
....................              In2.B14 = 0;      //for auto reset
033A6:  BCF    xAD.5
....................              Output.B14 = 0;
033A8:  BCF    x9D.5
....................            }
....................            //if(In.B15 == 1 || ((Inputt.B15 ^ InputType.B15) == 1))
....................            if((In.B15 == 1)||(In2.B15 == 1))
033AA:  BTFSC  xAB.6
033AC:  BRA    33B2
033AE:  BTFSS  xAD.6
033B0:  BRA    33BA
....................            {
....................              Ack.B15 = 1;
033B2:  BSF    xA9.6
....................              In.B15 = 0;
033B4:  BCF    xAB.6
....................              In2.B15 = 0;      //for auto reset
033B6:  BCF    xAD.6
....................              Output.B15 = 0;
033B8:  BCF    x9D.6
....................            }
....................            //if(In.B16 == 1 || ((Inputt.B16 ^ InputType.B16) == 1))
....................            if((In.B16 == 1)||(In2.B16 == 1))
033BA:  BTFSC  xAB.7
033BC:  BRA    33C2
033BE:  BTFSS  xAD.7
033C0:  BRA    33CA
....................            {
....................              Ack.B16 = 1;
033C2:  BSF    xA9.7
....................              In.B16 = 0;
033C4:  BCF    xAB.7
....................              In2.B16 = 0;      //for auto reset
033C6:  BCF    xAD.7
....................              Output.B16 = 0;
033C8:  BCF    x9D.7
....................            }     
....................       
....................             Ack_F = 1;
033CA:  BSF    1A.7
....................             output_bit(Pbuzzer,0);   //Buzzer
033CC:  BCF    F89.4
033CE:  BCF    F92.4
....................             output_bit(Pbell,0);     //Bell
033D0:  BCF    F89.3
033D2:  BCF    F92.3
....................    }
033D4:  BRA    33E6
033D6:  MOVLB  0
....................    else if(input(Pack) == 1 && Ack_F == 1)
033D8:  BSF    F94.0
033DA:  BTFSS  F82.0
033DC:  BRA    33E4
033DE:  BTFSS  1A.7
033E0:  BRA    33E4
....................    {
....................       Ack_F = 0;
033E2:  BCF    1A.7
033E4:  MOVLB  B
....................    }
033E6:  MOVLB  0
033E8:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
033EA:  BSF    F94.1
033EC:  BTFSC  F82.1
033EE:  BRA    33F4
033F0:  BTFSS  30.0
033F2:  BRA    33F8
033F4:  BTFSS  1A.3
033F6:  BRA    3404
033F8:  MOVLW  32
033FA:  MOVLB  C
033FC:  MOVWF  x24
033FE:  MOVLB  0
03400:  CALL   0952
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
03404:  BSF    F94.1
03406:  BTFSC  F82.1
03408:  BRA    340E
0340A:  BTFSS  30.0
0340C:  BRA    3412
0340E:  BTFSS  1A.3
03410:  BRA    369A
....................     {
....................        AutoResetFlag = 0;
03412:  BCF    1A.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
03414:  MOVLW  00
03416:  MOVLB  B
03418:  BTFSC  x9A.0
0341A:  MOVLW  01
0341C:  MOVLB  C
0341E:  MOVWF  x25
03420:  MOVLW  00
03422:  MOVLB  B
03424:  BTFSC  x9E.0
03426:  MOVLW  01
03428:  MOVLB  C
0342A:  XORWF  x25,W
0342C:  BNZ   343C
0342E:  MOVLB  B
03430:  BTFSS  xAA.0
03432:  BRA    3438
03434:  MOVLB  C
03436:  BRA    343C
03438:  BSF    x9C.0
0343A:  MOVLB  C
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
0343C:  MOVLW  00
0343E:  MOVLB  B
03440:  BTFSC  x9A.1
03442:  MOVLW  01
03444:  MOVLB  C
03446:  MOVWF  x25
03448:  MOVLW  00
0344A:  MOVLB  B
0344C:  BTFSC  x9E.1
0344E:  MOVLW  01
03450:  MOVLB  C
03452:  XORWF  x25,W
03454:  BNZ   3464
03456:  MOVLB  B
03458:  BTFSS  xAA.1
0345A:  BRA    3460
0345C:  MOVLB  C
0345E:  BRA    3464
03460:  BSF    x9C.1
03462:  MOVLB  C
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
03464:  MOVLW  00
03466:  MOVLB  B
03468:  BTFSC  x9A.2
0346A:  MOVLW  01
0346C:  MOVLB  C
0346E:  MOVWF  x25
03470:  MOVLW  00
03472:  MOVLB  B
03474:  BTFSC  x9E.2
03476:  MOVLW  01
03478:  MOVLB  C
0347A:  XORWF  x25,W
0347C:  BNZ   348C
0347E:  MOVLB  B
03480:  BTFSS  xAA.2
03482:  BRA    3488
03484:  MOVLB  C
03486:  BRA    348C
03488:  BSF    x9C.2
0348A:  MOVLB  C
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
0348C:  MOVLW  00
0348E:  MOVLB  B
03490:  BTFSC  x9A.3
03492:  MOVLW  01
03494:  MOVLB  C
03496:  MOVWF  x25
03498:  MOVLW  00
0349A:  MOVLB  B
0349C:  BTFSC  x9E.3
0349E:  MOVLW  01
034A0:  MOVLB  C
034A2:  XORWF  x25,W
034A4:  BNZ   34B4
034A6:  MOVLB  B
034A8:  BTFSS  xAA.3
034AA:  BRA    34B0
034AC:  MOVLB  C
034AE:  BRA    34B4
034B0:  BSF    x9C.3
034B2:  MOVLB  C
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
034B4:  MOVLW  00
034B6:  MOVLB  B
034B8:  BTFSC  x9A.4
034BA:  MOVLW  01
034BC:  MOVLB  C
034BE:  MOVWF  x25
034C0:  MOVLW  00
034C2:  MOVLB  B
034C4:  BTFSC  x9E.4
034C6:  MOVLW  01
034C8:  MOVLB  C
034CA:  XORWF  x25,W
034CC:  BNZ   34DC
034CE:  MOVLB  B
034D0:  BTFSS  xAA.4
034D2:  BRA    34D8
034D4:  MOVLB  C
034D6:  BRA    34DC
034D8:  BSF    x9C.4
034DA:  MOVLB  C
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
034DC:  MOVLW  00
034DE:  MOVLB  B
034E0:  BTFSC  x9A.5
034E2:  MOVLW  01
034E4:  MOVLB  C
034E6:  MOVWF  x25
034E8:  MOVLW  00
034EA:  MOVLB  B
034EC:  BTFSC  x9E.5
034EE:  MOVLW  01
034F0:  MOVLB  C
034F2:  XORWF  x25,W
034F4:  BNZ   3504
034F6:  MOVLB  B
034F8:  BTFSS  xAA.5
034FA:  BRA    3500
034FC:  MOVLB  C
034FE:  BRA    3504
03500:  BSF    x9C.5
03502:  MOVLB  C
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
03504:  MOVLW  00
03506:  MOVLB  B
03508:  BTFSC  x9A.6
0350A:  MOVLW  01
0350C:  MOVLB  C
0350E:  MOVWF  x25
03510:  MOVLW  00
03512:  MOVLB  B
03514:  BTFSC  x9E.6
03516:  MOVLW  01
03518:  MOVLB  C
0351A:  XORWF  x25,W
0351C:  BNZ   352C
0351E:  MOVLB  B
03520:  BTFSS  xAA.6
03522:  BRA    3528
03524:  MOVLB  C
03526:  BRA    352C
03528:  BSF    x9C.6
0352A:  MOVLB  C
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
0352C:  MOVLW  00
0352E:  MOVLB  B
03530:  BTFSC  x9A.7
03532:  MOVLW  01
03534:  MOVLB  C
03536:  MOVWF  x25
03538:  MOVLW  00
0353A:  MOVLB  B
0353C:  BTFSC  x9E.7
0353E:  MOVLW  01
03540:  MOVLB  C
03542:  XORWF  x25,W
03544:  BNZ   3554
03546:  MOVLB  B
03548:  BTFSS  xAA.7
0354A:  BRA    3550
0354C:  MOVLB  C
0354E:  BRA    3554
03550:  BSF    x9C.7
03552:  MOVLB  C
....................        if((Inputt.B9 ^ InputType.B9) == 0 && In.B9 == 0) Output.B9 = 1;
03554:  MOVLW  00
03556:  MOVLB  B
03558:  BTFSC  x9B.0
0355A:  MOVLW  01
0355C:  MOVLB  C
0355E:  MOVWF  x25
03560:  MOVLW  00
03562:  MOVLB  B
03564:  BTFSC  x9F.0
03566:  MOVLW  01
03568:  MOVLB  C
0356A:  XORWF  x25,W
0356C:  BNZ   357C
0356E:  MOVLB  B
03570:  BTFSS  xAB.0
03572:  BRA    3578
03574:  MOVLB  C
03576:  BRA    357C
03578:  BSF    x9D.0
0357A:  MOVLB  C
....................        if((Inputt.B10 ^ InputType.B10) == 0 && In.B10 == 0) Output.B10 = 1;
0357C:  MOVLW  00
0357E:  MOVLB  B
03580:  BTFSC  x9B.1
03582:  MOVLW  01
03584:  MOVLB  C
03586:  MOVWF  x25
03588:  MOVLW  00
0358A:  MOVLB  B
0358C:  BTFSC  x9F.1
0358E:  MOVLW  01
03590:  MOVLB  C
03592:  XORWF  x25,W
03594:  BNZ   35A4
03596:  MOVLB  B
03598:  BTFSS  xAB.1
0359A:  BRA    35A0
0359C:  MOVLB  C
0359E:  BRA    35A4
035A0:  BSF    x9D.1
035A2:  MOVLB  C
....................        if((Inputt.B11 ^ InputType.B11) == 0 && In.B11 == 0) Output.B11 = 1;
035A4:  MOVLW  00
035A6:  MOVLB  B
035A8:  BTFSC  x9B.2
035AA:  MOVLW  01
035AC:  MOVLB  C
035AE:  MOVWF  x25
035B0:  MOVLW  00
035B2:  MOVLB  B
035B4:  BTFSC  x9F.2
035B6:  MOVLW  01
035B8:  MOVLB  C
035BA:  XORWF  x25,W
035BC:  BNZ   35CC
035BE:  MOVLB  B
035C0:  BTFSS  xAB.2
035C2:  BRA    35C8
035C4:  MOVLB  C
035C6:  BRA    35CC
035C8:  BSF    x9D.2
035CA:  MOVLB  C
....................        if((Inputt.B12 ^ InputType.B12) == 0 && In.B12 == 0) Output.B12 = 1;
035CC:  MOVLW  00
035CE:  MOVLB  B
035D0:  BTFSC  x9B.3
035D2:  MOVLW  01
035D4:  MOVLB  C
035D6:  MOVWF  x25
035D8:  MOVLW  00
035DA:  MOVLB  B
035DC:  BTFSC  x9F.3
035DE:  MOVLW  01
035E0:  MOVLB  C
035E2:  XORWF  x25,W
035E4:  BNZ   35F4
035E6:  MOVLB  B
035E8:  BTFSS  xAB.3
035EA:  BRA    35F0
035EC:  MOVLB  C
035EE:  BRA    35F4
035F0:  BSF    x9D.3
035F2:  MOVLB  C
....................        if((Inputt.B13 ^ InputType.B13) == 0 && In.B13 == 0) Output.B13 = 1;
035F4:  MOVLW  00
035F6:  MOVLB  B
035F8:  BTFSC  x9B.4
035FA:  MOVLW  01
035FC:  MOVLB  C
035FE:  MOVWF  x25
03600:  MOVLW  00
03602:  MOVLB  B
03604:  BTFSC  x9F.4
03606:  MOVLW  01
03608:  MOVLB  C
0360A:  XORWF  x25,W
0360C:  BNZ   361C
0360E:  MOVLB  B
03610:  BTFSS  xAB.4
03612:  BRA    3618
03614:  MOVLB  C
03616:  BRA    361C
03618:  BSF    x9D.4
0361A:  MOVLB  C
....................        if((Inputt.B14 ^ InputType.B14) == 0 && In.B14 == 0) Output.B14 = 1;
0361C:  MOVLW  00
0361E:  MOVLB  B
03620:  BTFSC  x9B.5
03622:  MOVLW  01
03624:  MOVLB  C
03626:  MOVWF  x25
03628:  MOVLW  00
0362A:  MOVLB  B
0362C:  BTFSC  x9F.5
0362E:  MOVLW  01
03630:  MOVLB  C
03632:  XORWF  x25,W
03634:  BNZ   3644
03636:  MOVLB  B
03638:  BTFSS  xAB.5
0363A:  BRA    3640
0363C:  MOVLB  C
0363E:  BRA    3644
03640:  BSF    x9D.5
03642:  MOVLB  C
....................        if((Inputt.B15 ^ InputType.B15) == 0 && In.B15 == 0) Output.B15 = 1;
03644:  MOVLW  00
03646:  MOVLB  B
03648:  BTFSC  x9B.6
0364A:  MOVLW  01
0364C:  MOVLB  C
0364E:  MOVWF  x25
03650:  MOVLW  00
03652:  MOVLB  B
03654:  BTFSC  x9F.6
03656:  MOVLW  01
03658:  MOVLB  C
0365A:  XORWF  x25,W
0365C:  BNZ   366C
0365E:  MOVLB  B
03660:  BTFSS  xAB.6
03662:  BRA    3668
03664:  MOVLB  C
03666:  BRA    366C
03668:  BSF    x9D.6
0366A:  MOVLB  C
....................        if((Inputt.B16 ^ InputType.B16) == 0 && In.B16 == 0) Output.B16 = 1;
0366C:  MOVLW  00
0366E:  MOVLB  B
03670:  BTFSC  x9B.7
03672:  MOVLW  01
03674:  MOVLB  C
03676:  MOVWF  x25
03678:  MOVLW  00
0367A:  MOVLB  B
0367C:  BTFSC  x9F.7
0367E:  MOVLW  01
03680:  MOVLB  C
03682:  XORWF  x25,W
03684:  BNZ   3694
03686:  MOVLB  B
03688:  BTFSS  xAB.7
0368A:  BRA    3690
0368C:  MOVLB  C
0368E:  BRA    3694
03690:  BSF    x9D.7
03692:  MOVLB  C
....................        /*
....................        if((Inputt.B17 ^ InputType.B17) == 0 && In.B17 == 0) Output.B17 = 1;
....................        if((Inputt.B18 ^ InputType.B18) == 0 && In.B18 == 0) Output.B18 = 1;
....................        if((Inputt.B19 ^ InputType.B19) == 0 && In.B19 == 0) Output.B19 = 1;
....................        if((Inputt.B20 ^ InputType.B20) == 0 && In.B20 == 0) Output.B20 = 1;
....................        */
.................... 
....................        Reset_F = 1;
03694:  BSF    30.0
....................     }
03696:  BRA    36A8
03698:  MOVLB  0
....................     else if(input(Preset) == 1 && Reset_F == 1)
0369A:  BSF    F94.1
0369C:  BTFSS  F82.1
0369E:  BRA    36A6
036A0:  BTFSS  30.0
036A2:  BRA    36A6
....................     {
....................        Reset_F = 0;
036A4:  BCF    30.0
036A6:  MOVLB  C
....................     }
036A8:  MOVLB  0
036AA:  RETURN 0
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////// Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
06268:  MOVLB  C
0626A:  DECFSZ x23,W
0626C:  BRA    6766
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
0626E:  MOVLW  00
06270:  MOVLB  B
06272:  BTFSC  xAA.0
06274:  MOVLW  01
06276:  MOVLB  C
06278:  MOVWF  x26
0627A:  MOVLW  00
0627C:  MOVLB  B
0627E:  BTFSC  xAC.0
06280:  MOVLW  01
06282:  MOVLB  C
06284:  IORWF  x26,W
06286:  MOVWF  x25
06288:  MOVLW  00
0628A:  MOVLB  B
0628C:  BTFSS  xA8.0
0628E:  MOVLW  01
06290:  MOVLB  C
06292:  ANDWF  x25,F
06294:  MOVLW  00
06296:  MOVLB  B
06298:  BTFSC  xA2.0
0629A:  MOVLW  01
0629C:  MOVLB  C
0629E:  MOVWF  x28
062A0:  MOVLW  00
062A2:  MOVLB  B
062A4:  BTFSC  xA4.0
062A6:  MOVLW  01
062A8:  MOVLB  C
062AA:  IORWF  x28,W
062AC:  ANDWF  x25,W
062AE:  BCF    x24.0
062B0:  BTFSC  FE8.0
062B2:  BSF    x24.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
062B4:  MOVLW  00
062B6:  BTFSC  x24.0
062B8:  MOVLW  01
062BA:  MOVWF  x25
062BC:  MOVLW  00
062BE:  MOVLB  B
062C0:  BTFSC  xAA.1
062C2:  MOVLW  01
062C4:  MOVLB  C
062C6:  MOVWF  x27
062C8:  MOVLW  00
062CA:  MOVLB  B
062CC:  BTFSC  xAC.1
062CE:  MOVLW  01
062D0:  MOVLB  C
062D2:  IORWF  x27,W
062D4:  MOVWF  x26
062D6:  MOVLW  00
062D8:  MOVLB  B
062DA:  BTFSS  xA8.1
062DC:  MOVLW  01
062DE:  MOVLB  C
062E0:  ANDWF  x26,F
062E2:  MOVLW  00
062E4:  MOVLB  B
062E6:  BTFSC  xA2.1
062E8:  MOVLW  01
062EA:  MOVLB  C
062EC:  MOVWF  x29
062EE:  MOVLW  00
062F0:  MOVLB  B
062F2:  BTFSC  xA4.1
062F4:  MOVLW  01
062F6:  MOVLB  C
062F8:  IORWF  x29,W
062FA:  ANDWF  x26,W
062FC:  IORWF  x25,W
062FE:  BCF    x24.0
06300:  BTFSC  FE8.0
06302:  BSF    x24.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
06304:  MOVLW  00
06306:  BTFSC  x24.0
06308:  MOVLW  01
0630A:  MOVWF  x25
0630C:  MOVLW  00
0630E:  MOVLB  B
06310:  BTFSC  xAA.2
06312:  MOVLW  01
06314:  MOVLB  C
06316:  MOVWF  x27
06318:  MOVLW  00
0631A:  MOVLB  B
0631C:  BTFSC  xAC.2
0631E:  MOVLW  01
06320:  MOVLB  C
06322:  IORWF  x27,W
06324:  MOVWF  x26
06326:  MOVLW  00
06328:  MOVLB  B
0632A:  BTFSS  xA8.2
0632C:  MOVLW  01
0632E:  MOVLB  C
06330:  ANDWF  x26,F
06332:  MOVLW  00
06334:  MOVLB  B
06336:  BTFSC  xA2.2
06338:  MOVLW  01
0633A:  MOVLB  C
0633C:  MOVWF  x29
0633E:  MOVLW  00
06340:  MOVLB  B
06342:  BTFSC  xA4.2
06344:  MOVLW  01
06346:  MOVLB  C
06348:  IORWF  x29,W
0634A:  ANDWF  x26,W
0634C:  IORWF  x25,W
0634E:  BCF    x24.0
06350:  BTFSC  FE8.0
06352:  BSF    x24.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
06354:  MOVLW  00
06356:  BTFSC  x24.0
06358:  MOVLW  01
0635A:  MOVWF  x25
0635C:  MOVLW  00
0635E:  MOVLB  B
06360:  BTFSC  xAA.3
06362:  MOVLW  01
06364:  MOVLB  C
06366:  MOVWF  x27
06368:  MOVLW  00
0636A:  MOVLB  B
0636C:  BTFSC  xAC.3
0636E:  MOVLW  01
06370:  MOVLB  C
06372:  IORWF  x27,W
06374:  MOVWF  x26
06376:  MOVLW  00
06378:  MOVLB  B
0637A:  BTFSS  xA8.3
0637C:  MOVLW  01
0637E:  MOVLB  C
06380:  ANDWF  x26,F
06382:  MOVLW  00
06384:  MOVLB  B
06386:  BTFSC  xA2.3
06388:  MOVLW  01
0638A:  MOVLB  C
0638C:  MOVWF  x29
0638E:  MOVLW  00
06390:  MOVLB  B
06392:  BTFSC  xA4.3
06394:  MOVLW  01
06396:  MOVLB  C
06398:  IORWF  x29,W
0639A:  ANDWF  x26,W
0639C:  IORWF  x25,W
0639E:  BCF    x24.0
063A0:  BTFSC  FE8.0
063A2:  BSF    x24.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
063A4:  MOVLW  00
063A6:  BTFSC  x24.0
063A8:  MOVLW  01
063AA:  MOVWF  x25
063AC:  MOVLW  00
063AE:  MOVLB  B
063B0:  BTFSC  xAA.4
063B2:  MOVLW  01
063B4:  MOVLB  C
063B6:  MOVWF  x27
063B8:  MOVLW  00
063BA:  MOVLB  B
063BC:  BTFSC  xAC.4
063BE:  MOVLW  01
063C0:  MOVLB  C
063C2:  IORWF  x27,W
063C4:  MOVWF  x26
063C6:  MOVLW  00
063C8:  MOVLB  B
063CA:  BTFSS  xA8.4
063CC:  MOVLW  01
063CE:  MOVLB  C
063D0:  ANDWF  x26,F
063D2:  MOVLW  00
063D4:  MOVLB  B
063D6:  BTFSC  xA2.4
063D8:  MOVLW  01
063DA:  MOVLB  C
063DC:  MOVWF  x29
063DE:  MOVLW  00
063E0:  MOVLB  B
063E2:  BTFSC  xA4.4
063E4:  MOVLW  01
063E6:  MOVLB  C
063E8:  IORWF  x29,W
063EA:  ANDWF  x26,W
063EC:  IORWF  x25,W
063EE:  BCF    x24.0
063F0:  BTFSC  FE8.0
063F2:  BSF    x24.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
063F4:  MOVLW  00
063F6:  BTFSC  x24.0
063F8:  MOVLW  01
063FA:  MOVWF  x25
063FC:  MOVLW  00
063FE:  MOVLB  B
06400:  BTFSC  xAA.5
06402:  MOVLW  01
06404:  MOVLB  C
06406:  MOVWF  x27
06408:  MOVLW  00
0640A:  MOVLB  B
0640C:  BTFSC  xAC.5
0640E:  MOVLW  01
06410:  MOVLB  C
06412:  IORWF  x27,W
06414:  MOVWF  x26
06416:  MOVLW  00
06418:  MOVLB  B
0641A:  BTFSS  xA8.5
0641C:  MOVLW  01
0641E:  MOVLB  C
06420:  ANDWF  x26,F
06422:  MOVLW  00
06424:  MOVLB  B
06426:  BTFSC  xA2.5
06428:  MOVLW  01
0642A:  MOVLB  C
0642C:  MOVWF  x29
0642E:  MOVLW  00
06430:  MOVLB  B
06432:  BTFSC  xA4.5
06434:  MOVLW  01
06436:  MOVLB  C
06438:  IORWF  x29,W
0643A:  ANDWF  x26,W
0643C:  IORWF  x25,W
0643E:  BCF    x24.0
06440:  BTFSC  FE8.0
06442:  BSF    x24.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
06444:  MOVLW  00
06446:  BTFSC  x24.0
06448:  MOVLW  01
0644A:  MOVWF  x25
0644C:  MOVLW  00
0644E:  MOVLB  B
06450:  BTFSC  xAA.6
06452:  MOVLW  01
06454:  MOVLB  C
06456:  MOVWF  x27
06458:  MOVLW  00
0645A:  MOVLB  B
0645C:  BTFSC  xAC.6
0645E:  MOVLW  01
06460:  MOVLB  C
06462:  IORWF  x27,W
06464:  MOVWF  x26
06466:  MOVLW  00
06468:  MOVLB  B
0646A:  BTFSS  xA8.6
0646C:  MOVLW  01
0646E:  MOVLB  C
06470:  ANDWF  x26,F
06472:  MOVLW  00
06474:  MOVLB  B
06476:  BTFSC  xA2.6
06478:  MOVLW  01
0647A:  MOVLB  C
0647C:  MOVWF  x29
0647E:  MOVLW  00
06480:  MOVLB  B
06482:  BTFSC  xA4.6
06484:  MOVLW  01
06486:  MOVLB  C
06488:  IORWF  x29,W
0648A:  ANDWF  x26,W
0648C:  IORWF  x25,W
0648E:  BCF    x24.0
06490:  BTFSC  FE8.0
06492:  BSF    x24.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
06494:  MOVLW  00
06496:  BTFSC  x24.0
06498:  MOVLW  01
0649A:  MOVWF  x25
0649C:  MOVLW  00
0649E:  MOVLB  B
064A0:  BTFSC  xAA.7
064A2:  MOVLW  01
064A4:  MOVLB  C
064A6:  MOVWF  x27
064A8:  MOVLW  00
064AA:  MOVLB  B
064AC:  BTFSC  xAC.7
064AE:  MOVLW  01
064B0:  MOVLB  C
064B2:  IORWF  x27,W
064B4:  MOVWF  x26
064B6:  MOVLW  00
064B8:  MOVLB  B
064BA:  BTFSS  xA8.7
064BC:  MOVLW  01
064BE:  MOVLB  C
064C0:  ANDWF  x26,F
064C2:  MOVLW  00
064C4:  MOVLB  B
064C6:  BTFSC  xA2.7
064C8:  MOVLW  01
064CA:  MOVLB  C
064CC:  MOVWF  x29
064CE:  MOVLW  00
064D0:  MOVLB  B
064D2:  BTFSC  xA4.7
064D4:  MOVLW  01
064D6:  MOVLB  C
064D8:  IORWF  x29,W
064DA:  ANDWF  x26,W
064DC:  IORWF  x25,W
064DE:  BCF    x24.0
064E0:  BTFSC  FE8.0
064E2:  BSF    x24.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (OutputType.B9 | OutputBoth.B9));
064E4:  MOVLW  00
064E6:  BTFSC  x24.0
064E8:  MOVLW  01
064EA:  MOVWF  x25
064EC:  MOVLW  00
064EE:  MOVLB  B
064F0:  BTFSC  xAB.0
064F2:  MOVLW  01
064F4:  MOVLB  C
064F6:  MOVWF  x27
064F8:  MOVLW  00
064FA:  MOVLB  B
064FC:  BTFSC  xAD.0
064FE:  MOVLW  01
06500:  MOVLB  C
06502:  IORWF  x27,W
06504:  MOVWF  x26
06506:  MOVLW  00
06508:  MOVLB  B
0650A:  BTFSS  xA9.0
0650C:  MOVLW  01
0650E:  MOVLB  C
06510:  ANDWF  x26,F
06512:  MOVLW  00
06514:  MOVLB  B
06516:  BTFSC  xA3.0
06518:  MOVLW  01
0651A:  MOVLB  C
0651C:  MOVWF  x29
0651E:  MOVLW  00
06520:  MOVLB  B
06522:  BTFSC  xA5.0
06524:  MOVLW  01
06526:  MOVLB  C
06528:  IORWF  x29,W
0652A:  ANDWF  x26,W
0652C:  IORWF  x25,W
0652E:  BCF    x24.0
06530:  BTFSC  FE8.0
06532:  BSF    x24.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (OutputType.B10 | OutputBoth.B10));
06534:  MOVLW  00
06536:  BTFSC  x24.0
06538:  MOVLW  01
0653A:  MOVWF  x25
0653C:  MOVLW  00
0653E:  MOVLB  B
06540:  BTFSC  xAB.1
06542:  MOVLW  01
06544:  MOVLB  C
06546:  MOVWF  x27
06548:  MOVLW  00
0654A:  MOVLB  B
0654C:  BTFSC  xAD.1
0654E:  MOVLW  01
06550:  MOVLB  C
06552:  IORWF  x27,W
06554:  MOVWF  x26
06556:  MOVLW  00
06558:  MOVLB  B
0655A:  BTFSS  xA9.1
0655C:  MOVLW  01
0655E:  MOVLB  C
06560:  ANDWF  x26,F
06562:  MOVLW  00
06564:  MOVLB  B
06566:  BTFSC  xA3.1
06568:  MOVLW  01
0656A:  MOVLB  C
0656C:  MOVWF  x29
0656E:  MOVLW  00
06570:  MOVLB  B
06572:  BTFSC  xA5.1
06574:  MOVLW  01
06576:  MOVLB  C
06578:  IORWF  x29,W
0657A:  ANDWF  x26,W
0657C:  IORWF  x25,W
0657E:  BCF    x24.0
06580:  BTFSC  FE8.0
06582:  BSF    x24.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (OutputType.B11 | OutputBoth.B11));
06584:  MOVLW  00
06586:  BTFSC  x24.0
06588:  MOVLW  01
0658A:  MOVWF  x25
0658C:  MOVLW  00
0658E:  MOVLB  B
06590:  BTFSC  xAB.2
06592:  MOVLW  01
06594:  MOVLB  C
06596:  MOVWF  x27
06598:  MOVLW  00
0659A:  MOVLB  B
0659C:  BTFSC  xAD.2
0659E:  MOVLW  01
065A0:  MOVLB  C
065A2:  IORWF  x27,W
065A4:  MOVWF  x26
065A6:  MOVLW  00
065A8:  MOVLB  B
065AA:  BTFSS  xA9.2
065AC:  MOVLW  01
065AE:  MOVLB  C
065B0:  ANDWF  x26,F
065B2:  MOVLW  00
065B4:  MOVLB  B
065B6:  BTFSC  xA3.2
065B8:  MOVLW  01
065BA:  MOVLB  C
065BC:  MOVWF  x29
065BE:  MOVLW  00
065C0:  MOVLB  B
065C2:  BTFSC  xA5.2
065C4:  MOVLW  01
065C6:  MOVLB  C
065C8:  IORWF  x29,W
065CA:  ANDWF  x26,W
065CC:  IORWF  x25,W
065CE:  BCF    x24.0
065D0:  BTFSC  FE8.0
065D2:  BSF    x24.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (OutputType.B12 | OutputBoth.B12));
065D4:  MOVLW  00
065D6:  BTFSC  x24.0
065D8:  MOVLW  01
065DA:  MOVWF  x25
065DC:  MOVLW  00
065DE:  MOVLB  B
065E0:  BTFSC  xAB.3
065E2:  MOVLW  01
065E4:  MOVLB  C
065E6:  MOVWF  x27
065E8:  MOVLW  00
065EA:  MOVLB  B
065EC:  BTFSC  xAD.3
065EE:  MOVLW  01
065F0:  MOVLB  C
065F2:  IORWF  x27,W
065F4:  MOVWF  x26
065F6:  MOVLW  00
065F8:  MOVLB  B
065FA:  BTFSS  xA9.3
065FC:  MOVLW  01
065FE:  MOVLB  C
06600:  ANDWF  x26,F
06602:  MOVLW  00
06604:  MOVLB  B
06606:  BTFSC  xA3.3
06608:  MOVLW  01
0660A:  MOVLB  C
0660C:  MOVWF  x29
0660E:  MOVLW  00
06610:  MOVLB  B
06612:  BTFSC  xA5.3
06614:  MOVLW  01
06616:  MOVLB  C
06618:  IORWF  x29,W
0661A:  ANDWF  x26,W
0661C:  IORWF  x25,W
0661E:  BCF    x24.0
06620:  BTFSC  FE8.0
06622:  BSF    x24.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (OutputType.B13 | OutputBoth.B13));
06624:  MOVLW  00
06626:  BTFSC  x24.0
06628:  MOVLW  01
0662A:  MOVWF  x25
0662C:  MOVLW  00
0662E:  MOVLB  B
06630:  BTFSC  xAB.4
06632:  MOVLW  01
06634:  MOVLB  C
06636:  MOVWF  x27
06638:  MOVLW  00
0663A:  MOVLB  B
0663C:  BTFSC  xAD.4
0663E:  MOVLW  01
06640:  MOVLB  C
06642:  IORWF  x27,W
06644:  MOVWF  x26
06646:  MOVLW  00
06648:  MOVLB  B
0664A:  BTFSS  xA9.4
0664C:  MOVLW  01
0664E:  MOVLB  C
06650:  ANDWF  x26,F
06652:  MOVLW  00
06654:  MOVLB  B
06656:  BTFSC  xA3.4
06658:  MOVLW  01
0665A:  MOVLB  C
0665C:  MOVWF  x29
0665E:  MOVLW  00
06660:  MOVLB  B
06662:  BTFSC  xA5.4
06664:  MOVLW  01
06666:  MOVLB  C
06668:  IORWF  x29,W
0666A:  ANDWF  x26,W
0666C:  IORWF  x25,W
0666E:  BCF    x24.0
06670:  BTFSC  FE8.0
06672:  BSF    x24.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (OutputType.B14 | OutputBoth.B14));
06674:  MOVLW  00
06676:  BTFSC  x24.0
06678:  MOVLW  01
0667A:  MOVWF  x25
0667C:  MOVLW  00
0667E:  MOVLB  B
06680:  BTFSC  xAB.5
06682:  MOVLW  01
06684:  MOVLB  C
06686:  MOVWF  x27
06688:  MOVLW  00
0668A:  MOVLB  B
0668C:  BTFSC  xAD.5
0668E:  MOVLW  01
06690:  MOVLB  C
06692:  IORWF  x27,W
06694:  MOVWF  x26
06696:  MOVLW  00
06698:  MOVLB  B
0669A:  BTFSS  xA9.5
0669C:  MOVLW  01
0669E:  MOVLB  C
066A0:  ANDWF  x26,F
066A2:  MOVLW  00
066A4:  MOVLB  B
066A6:  BTFSC  xA3.5
066A8:  MOVLW  01
066AA:  MOVLB  C
066AC:  MOVWF  x29
066AE:  MOVLW  00
066B0:  MOVLB  B
066B2:  BTFSC  xA5.5
066B4:  MOVLW  01
066B6:  MOVLB  C
066B8:  IORWF  x29,W
066BA:  ANDWF  x26,W
066BC:  IORWF  x25,W
066BE:  BCF    x24.0
066C0:  BTFSC  FE8.0
066C2:  BSF    x24.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (OutputType.B15 | OutputBoth.B15));
066C4:  MOVLW  00
066C6:  BTFSC  x24.0
066C8:  MOVLW  01
066CA:  MOVWF  x25
066CC:  MOVLW  00
066CE:  MOVLB  B
066D0:  BTFSC  xAB.6
066D2:  MOVLW  01
066D4:  MOVLB  C
066D6:  MOVWF  x27
066D8:  MOVLW  00
066DA:  MOVLB  B
066DC:  BTFSC  xAD.6
066DE:  MOVLW  01
066E0:  MOVLB  C
066E2:  IORWF  x27,W
066E4:  MOVWF  x26
066E6:  MOVLW  00
066E8:  MOVLB  B
066EA:  BTFSS  xA9.6
066EC:  MOVLW  01
066EE:  MOVLB  C
066F0:  ANDWF  x26,F
066F2:  MOVLW  00
066F4:  MOVLB  B
066F6:  BTFSC  xA3.6
066F8:  MOVLW  01
066FA:  MOVLB  C
066FC:  MOVWF  x29
066FE:  MOVLW  00
06700:  MOVLB  B
06702:  BTFSC  xA5.6
06704:  MOVLW  01
06706:  MOVLB  C
06708:  IORWF  x29,W
0670A:  ANDWF  x26,W
0670C:  IORWF  x25,W
0670E:  BCF    x24.0
06710:  BTFSC  FE8.0
06712:  BSF    x24.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (OutputType.B16 | OutputBoth.B16));
06714:  MOVLW  00
06716:  BTFSC  x24.0
06718:  MOVLW  01
0671A:  MOVWF  x25
0671C:  MOVLW  00
0671E:  MOVLB  B
06720:  BTFSC  xAB.7
06722:  MOVLW  01
06724:  MOVLB  C
06726:  MOVWF  x27
06728:  MOVLW  00
0672A:  MOVLB  B
0672C:  BTFSC  xAD.7
0672E:  MOVLW  01
06730:  MOVLB  C
06732:  IORWF  x27,W
06734:  MOVWF  x26
06736:  MOVLW  00
06738:  MOVLB  B
0673A:  BTFSS  xA9.7
0673C:  MOVLW  01
0673E:  MOVLB  C
06740:  ANDWF  x26,F
06742:  MOVLW  00
06744:  MOVLB  B
06746:  BTFSC  xA3.7
06748:  MOVLW  01
0674A:  MOVLB  C
0674C:  MOVWF  x29
0674E:  MOVLW  00
06750:  MOVLB  B
06752:  BTFSC  xA5.7
06754:  MOVLW  01
06756:  MOVLB  C
06758:  IORWF  x29,W
0675A:  ANDWF  x26,W
0675C:  IORWF  x25,W
0675E:  BCF    x24.0
06760:  BTFSC  FE8.0
06762:  BSF    x24.0
....................       /*
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (OutputType.B17 | OutputBoth.B17));
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (OutputType.B18 | OutputBoth.B18));
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (OutputType.B19 | OutputBoth.B19));
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (OutputType.B20 | OutputBoth.B20));
....................       */
....................      
....................    }
06764:  BRA    6C64
....................    else if(DatType == 0x02)             //Bell
06766:  MOVF   x23,W
06768:  SUBLW  02
0676A:  BTFSS  FD8.2
0676C:  BRA    6C64
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
0676E:  MOVLW  00
06770:  MOVLB  B
06772:  BTFSC  xAA.0
06774:  MOVLW  01
06776:  MOVLB  C
06778:  MOVWF  x26
0677A:  MOVLW  00
0677C:  MOVLB  B
0677E:  BTFSC  xAC.0
06780:  MOVLW  01
06782:  MOVLB  C
06784:  IORWF  x26,W
06786:  MOVWF  x25
06788:  MOVLW  00
0678A:  MOVLB  B
0678C:  BTFSS  xA8.0
0678E:  MOVLW  01
06790:  MOVLB  C
06792:  ANDWF  x25,F
06794:  MOVLW  00
06796:  MOVLB  B
06798:  BTFSS  xA2.0
0679A:  MOVLW  01
0679C:  MOVLB  C
0679E:  MOVWF  x28
067A0:  MOVLW  00
067A2:  MOVLB  B
067A4:  BTFSC  xA4.0
067A6:  MOVLW  01
067A8:  MOVLB  C
067AA:  IORWF  x28,W
067AC:  ANDWF  x25,W
067AE:  BCF    x24.0
067B0:  BTFSC  FE8.0
067B2:  BSF    x24.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
067B4:  MOVLW  00
067B6:  BTFSC  x24.0
067B8:  MOVLW  01
067BA:  MOVWF  x25
067BC:  MOVLW  00
067BE:  MOVLB  B
067C0:  BTFSC  xAA.1
067C2:  MOVLW  01
067C4:  MOVLB  C
067C6:  MOVWF  x27
067C8:  MOVLW  00
067CA:  MOVLB  B
067CC:  BTFSC  xAC.1
067CE:  MOVLW  01
067D0:  MOVLB  C
067D2:  IORWF  x27,W
067D4:  MOVWF  x26
067D6:  MOVLW  00
067D8:  MOVLB  B
067DA:  BTFSS  xA8.1
067DC:  MOVLW  01
067DE:  MOVLB  C
067E0:  ANDWF  x26,F
067E2:  MOVLW  00
067E4:  MOVLB  B
067E6:  BTFSS  xA2.1
067E8:  MOVLW  01
067EA:  MOVLB  C
067EC:  MOVWF  x29
067EE:  MOVLW  00
067F0:  MOVLB  B
067F2:  BTFSC  xA4.1
067F4:  MOVLW  01
067F6:  MOVLB  C
067F8:  IORWF  x29,W
067FA:  ANDWF  x26,W
067FC:  IORWF  x25,W
067FE:  BCF    x24.0
06800:  BTFSC  FE8.0
06802:  BSF    x24.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
06804:  MOVLW  00
06806:  BTFSC  x24.0
06808:  MOVLW  01
0680A:  MOVWF  x25
0680C:  MOVLW  00
0680E:  MOVLB  B
06810:  BTFSC  xAA.2
06812:  MOVLW  01
06814:  MOVLB  C
06816:  MOVWF  x27
06818:  MOVLW  00
0681A:  MOVLB  B
0681C:  BTFSC  xAC.2
0681E:  MOVLW  01
06820:  MOVLB  C
06822:  IORWF  x27,W
06824:  MOVWF  x26
06826:  MOVLW  00
06828:  MOVLB  B
0682A:  BTFSS  xA8.2
0682C:  MOVLW  01
0682E:  MOVLB  C
06830:  ANDWF  x26,F
06832:  MOVLW  00
06834:  MOVLB  B
06836:  BTFSS  xA2.2
06838:  MOVLW  01
0683A:  MOVLB  C
0683C:  MOVWF  x29
0683E:  MOVLW  00
06840:  MOVLB  B
06842:  BTFSC  xA4.2
06844:  MOVLW  01
06846:  MOVLB  C
06848:  IORWF  x29,W
0684A:  ANDWF  x26,W
0684C:  IORWF  x25,W
0684E:  BCF    x24.0
06850:  BTFSC  FE8.0
06852:  BSF    x24.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
06854:  MOVLW  00
06856:  BTFSC  x24.0
06858:  MOVLW  01
0685A:  MOVWF  x25
0685C:  MOVLW  00
0685E:  MOVLB  B
06860:  BTFSC  xAA.3
06862:  MOVLW  01
06864:  MOVLB  C
06866:  MOVWF  x27
06868:  MOVLW  00
0686A:  MOVLB  B
0686C:  BTFSC  xAC.3
0686E:  MOVLW  01
06870:  MOVLB  C
06872:  IORWF  x27,W
06874:  MOVWF  x26
06876:  MOVLW  00
06878:  MOVLB  B
0687A:  BTFSS  xA8.3
0687C:  MOVLW  01
0687E:  MOVLB  C
06880:  ANDWF  x26,F
06882:  MOVLW  00
06884:  MOVLB  B
06886:  BTFSS  xA2.3
06888:  MOVLW  01
0688A:  MOVLB  C
0688C:  MOVWF  x29
0688E:  MOVLW  00
06890:  MOVLB  B
06892:  BTFSC  xA4.3
06894:  MOVLW  01
06896:  MOVLB  C
06898:  IORWF  x29,W
0689A:  ANDWF  x26,W
0689C:  IORWF  x25,W
0689E:  BCF    x24.0
068A0:  BTFSC  FE8.0
068A2:  BSF    x24.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
068A4:  MOVLW  00
068A6:  BTFSC  x24.0
068A8:  MOVLW  01
068AA:  MOVWF  x25
068AC:  MOVLW  00
068AE:  MOVLB  B
068B0:  BTFSC  xAA.4
068B2:  MOVLW  01
068B4:  MOVLB  C
068B6:  MOVWF  x27
068B8:  MOVLW  00
068BA:  MOVLB  B
068BC:  BTFSC  xAC.4
068BE:  MOVLW  01
068C0:  MOVLB  C
068C2:  IORWF  x27,W
068C4:  MOVWF  x26
068C6:  MOVLW  00
068C8:  MOVLB  B
068CA:  BTFSS  xA8.4
068CC:  MOVLW  01
068CE:  MOVLB  C
068D0:  ANDWF  x26,F
068D2:  MOVLW  00
068D4:  MOVLB  B
068D6:  BTFSS  xA2.4
068D8:  MOVLW  01
068DA:  MOVLB  C
068DC:  MOVWF  x29
068DE:  MOVLW  00
068E0:  MOVLB  B
068E2:  BTFSC  xA4.4
068E4:  MOVLW  01
068E6:  MOVLB  C
068E8:  IORWF  x29,W
068EA:  ANDWF  x26,W
068EC:  IORWF  x25,W
068EE:  BCF    x24.0
068F0:  BTFSC  FE8.0
068F2:  BSF    x24.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
068F4:  MOVLW  00
068F6:  BTFSC  x24.0
068F8:  MOVLW  01
068FA:  MOVWF  x25
068FC:  MOVLW  00
068FE:  MOVLB  B
06900:  BTFSC  xAA.5
06902:  MOVLW  01
06904:  MOVLB  C
06906:  MOVWF  x27
06908:  MOVLW  00
0690A:  MOVLB  B
0690C:  BTFSC  xAC.5
0690E:  MOVLW  01
06910:  MOVLB  C
06912:  IORWF  x27,W
06914:  MOVWF  x26
06916:  MOVLW  00
06918:  MOVLB  B
0691A:  BTFSS  xA8.5
0691C:  MOVLW  01
0691E:  MOVLB  C
06920:  ANDWF  x26,F
06922:  MOVLW  00
06924:  MOVLB  B
06926:  BTFSS  xA2.5
06928:  MOVLW  01
0692A:  MOVLB  C
0692C:  MOVWF  x29
0692E:  MOVLW  00
06930:  MOVLB  B
06932:  BTFSC  xA4.5
06934:  MOVLW  01
06936:  MOVLB  C
06938:  IORWF  x29,W
0693A:  ANDWF  x26,W
0693C:  IORWF  x25,W
0693E:  BCF    x24.0
06940:  BTFSC  FE8.0
06942:  BSF    x24.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
06944:  MOVLW  00
06946:  BTFSC  x24.0
06948:  MOVLW  01
0694A:  MOVWF  x25
0694C:  MOVLW  00
0694E:  MOVLB  B
06950:  BTFSC  xAA.6
06952:  MOVLW  01
06954:  MOVLB  C
06956:  MOVWF  x27
06958:  MOVLW  00
0695A:  MOVLB  B
0695C:  BTFSC  xAC.6
0695E:  MOVLW  01
06960:  MOVLB  C
06962:  IORWF  x27,W
06964:  MOVWF  x26
06966:  MOVLW  00
06968:  MOVLB  B
0696A:  BTFSS  xA8.6
0696C:  MOVLW  01
0696E:  MOVLB  C
06970:  ANDWF  x26,F
06972:  MOVLW  00
06974:  MOVLB  B
06976:  BTFSS  xA2.6
06978:  MOVLW  01
0697A:  MOVLB  C
0697C:  MOVWF  x29
0697E:  MOVLW  00
06980:  MOVLB  B
06982:  BTFSC  xA4.6
06984:  MOVLW  01
06986:  MOVLB  C
06988:  IORWF  x29,W
0698A:  ANDWF  x26,W
0698C:  IORWF  x25,W
0698E:  BCF    x24.0
06990:  BTFSC  FE8.0
06992:  BSF    x24.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
06994:  MOVLW  00
06996:  BTFSC  x24.0
06998:  MOVLW  01
0699A:  MOVWF  x25
0699C:  MOVLW  00
0699E:  MOVLB  B
069A0:  BTFSC  xAA.7
069A2:  MOVLW  01
069A4:  MOVLB  C
069A6:  MOVWF  x27
069A8:  MOVLW  00
069AA:  MOVLB  B
069AC:  BTFSC  xAC.7
069AE:  MOVLW  01
069B0:  MOVLB  C
069B2:  IORWF  x27,W
069B4:  MOVWF  x26
069B6:  MOVLW  00
069B8:  MOVLB  B
069BA:  BTFSS  xA8.7
069BC:  MOVLW  01
069BE:  MOVLB  C
069C0:  ANDWF  x26,F
069C2:  MOVLW  00
069C4:  MOVLB  B
069C6:  BTFSS  xA2.7
069C8:  MOVLW  01
069CA:  MOVLB  C
069CC:  MOVWF  x29
069CE:  MOVLW  00
069D0:  MOVLB  B
069D2:  BTFSC  xA4.7
069D4:  MOVLW  01
069D6:  MOVLB  C
069D8:  IORWF  x29,W
069DA:  ANDWF  x26,W
069DC:  IORWF  x25,W
069DE:  BCF    x24.0
069E0:  BTFSC  FE8.0
069E2:  BSF    x24.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (~OutputType.B9 | OutputBoth.B9));
069E4:  MOVLW  00
069E6:  BTFSC  x24.0
069E8:  MOVLW  01
069EA:  MOVWF  x25
069EC:  MOVLW  00
069EE:  MOVLB  B
069F0:  BTFSC  xAB.0
069F2:  MOVLW  01
069F4:  MOVLB  C
069F6:  MOVWF  x27
069F8:  MOVLW  00
069FA:  MOVLB  B
069FC:  BTFSC  xAD.0
069FE:  MOVLW  01
06A00:  MOVLB  C
06A02:  IORWF  x27,W
06A04:  MOVWF  x26
06A06:  MOVLW  00
06A08:  MOVLB  B
06A0A:  BTFSS  xA9.0
06A0C:  MOVLW  01
06A0E:  MOVLB  C
06A10:  ANDWF  x26,F
06A12:  MOVLW  00
06A14:  MOVLB  B
06A16:  BTFSS  xA3.0
06A18:  MOVLW  01
06A1A:  MOVLB  C
06A1C:  MOVWF  x29
06A1E:  MOVLW  00
06A20:  MOVLB  B
06A22:  BTFSC  xA5.0
06A24:  MOVLW  01
06A26:  MOVLB  C
06A28:  IORWF  x29,W
06A2A:  ANDWF  x26,W
06A2C:  IORWF  x25,W
06A2E:  BCF    x24.0
06A30:  BTFSC  FE8.0
06A32:  BSF    x24.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (~OutputType.B10 | OutputBoth.B10));
06A34:  MOVLW  00
06A36:  BTFSC  x24.0
06A38:  MOVLW  01
06A3A:  MOVWF  x25
06A3C:  MOVLW  00
06A3E:  MOVLB  B
06A40:  BTFSC  xAB.1
06A42:  MOVLW  01
06A44:  MOVLB  C
06A46:  MOVWF  x27
06A48:  MOVLW  00
06A4A:  MOVLB  B
06A4C:  BTFSC  xAD.1
06A4E:  MOVLW  01
06A50:  MOVLB  C
06A52:  IORWF  x27,W
06A54:  MOVWF  x26
06A56:  MOVLW  00
06A58:  MOVLB  B
06A5A:  BTFSS  xA9.1
06A5C:  MOVLW  01
06A5E:  MOVLB  C
06A60:  ANDWF  x26,F
06A62:  MOVLW  00
06A64:  MOVLB  B
06A66:  BTFSS  xA3.1
06A68:  MOVLW  01
06A6A:  MOVLB  C
06A6C:  MOVWF  x29
06A6E:  MOVLW  00
06A70:  MOVLB  B
06A72:  BTFSC  xA5.1
06A74:  MOVLW  01
06A76:  MOVLB  C
06A78:  IORWF  x29,W
06A7A:  ANDWF  x26,W
06A7C:  IORWF  x25,W
06A7E:  BCF    x24.0
06A80:  BTFSC  FE8.0
06A82:  BSF    x24.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (~OutputType.B11 | OutputBoth.B11));
06A84:  MOVLW  00
06A86:  BTFSC  x24.0
06A88:  MOVLW  01
06A8A:  MOVWF  x25
06A8C:  MOVLW  00
06A8E:  MOVLB  B
06A90:  BTFSC  xAB.2
06A92:  MOVLW  01
06A94:  MOVLB  C
06A96:  MOVWF  x27
06A98:  MOVLW  00
06A9A:  MOVLB  B
06A9C:  BTFSC  xAD.2
06A9E:  MOVLW  01
06AA0:  MOVLB  C
06AA2:  IORWF  x27,W
06AA4:  MOVWF  x26
06AA6:  MOVLW  00
06AA8:  MOVLB  B
06AAA:  BTFSS  xA9.2
06AAC:  MOVLW  01
06AAE:  MOVLB  C
06AB0:  ANDWF  x26,F
06AB2:  MOVLW  00
06AB4:  MOVLB  B
06AB6:  BTFSS  xA3.2
06AB8:  MOVLW  01
06ABA:  MOVLB  C
06ABC:  MOVWF  x29
06ABE:  MOVLW  00
06AC0:  MOVLB  B
06AC2:  BTFSC  xA5.2
06AC4:  MOVLW  01
06AC6:  MOVLB  C
06AC8:  IORWF  x29,W
06ACA:  ANDWF  x26,W
06ACC:  IORWF  x25,W
06ACE:  BCF    x24.0
06AD0:  BTFSC  FE8.0
06AD2:  BSF    x24.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (~OutputType.B12 | OutputBoth.B12));
06AD4:  MOVLW  00
06AD6:  BTFSC  x24.0
06AD8:  MOVLW  01
06ADA:  MOVWF  x25
06ADC:  MOVLW  00
06ADE:  MOVLB  B
06AE0:  BTFSC  xAB.3
06AE2:  MOVLW  01
06AE4:  MOVLB  C
06AE6:  MOVWF  x27
06AE8:  MOVLW  00
06AEA:  MOVLB  B
06AEC:  BTFSC  xAD.3
06AEE:  MOVLW  01
06AF0:  MOVLB  C
06AF2:  IORWF  x27,W
06AF4:  MOVWF  x26
06AF6:  MOVLW  00
06AF8:  MOVLB  B
06AFA:  BTFSS  xA9.3
06AFC:  MOVLW  01
06AFE:  MOVLB  C
06B00:  ANDWF  x26,F
06B02:  MOVLW  00
06B04:  MOVLB  B
06B06:  BTFSS  xA3.3
06B08:  MOVLW  01
06B0A:  MOVLB  C
06B0C:  MOVWF  x29
06B0E:  MOVLW  00
06B10:  MOVLB  B
06B12:  BTFSC  xA5.3
06B14:  MOVLW  01
06B16:  MOVLB  C
06B18:  IORWF  x29,W
06B1A:  ANDWF  x26,W
06B1C:  IORWF  x25,W
06B1E:  BCF    x24.0
06B20:  BTFSC  FE8.0
06B22:  BSF    x24.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (~OutputType.B13 | OutputBoth.B13));
06B24:  MOVLW  00
06B26:  BTFSC  x24.0
06B28:  MOVLW  01
06B2A:  MOVWF  x25
06B2C:  MOVLW  00
06B2E:  MOVLB  B
06B30:  BTFSC  xAB.4
06B32:  MOVLW  01
06B34:  MOVLB  C
06B36:  MOVWF  x27
06B38:  MOVLW  00
06B3A:  MOVLB  B
06B3C:  BTFSC  xAD.4
06B3E:  MOVLW  01
06B40:  MOVLB  C
06B42:  IORWF  x27,W
06B44:  MOVWF  x26
06B46:  MOVLW  00
06B48:  MOVLB  B
06B4A:  BTFSS  xA9.4
06B4C:  MOVLW  01
06B4E:  MOVLB  C
06B50:  ANDWF  x26,F
06B52:  MOVLW  00
06B54:  MOVLB  B
06B56:  BTFSS  xA3.4
06B58:  MOVLW  01
06B5A:  MOVLB  C
06B5C:  MOVWF  x29
06B5E:  MOVLW  00
06B60:  MOVLB  B
06B62:  BTFSC  xA5.4
06B64:  MOVLW  01
06B66:  MOVLB  C
06B68:  IORWF  x29,W
06B6A:  ANDWF  x26,W
06B6C:  IORWF  x25,W
06B6E:  BCF    x24.0
06B70:  BTFSC  FE8.0
06B72:  BSF    x24.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (~OutputType.B14 | OutputBoth.B14));
06B74:  MOVLW  00
06B76:  BTFSC  x24.0
06B78:  MOVLW  01
06B7A:  MOVWF  x25
06B7C:  MOVLW  00
06B7E:  MOVLB  B
06B80:  BTFSC  xAB.5
06B82:  MOVLW  01
06B84:  MOVLB  C
06B86:  MOVWF  x27
06B88:  MOVLW  00
06B8A:  MOVLB  B
06B8C:  BTFSC  xAD.5
06B8E:  MOVLW  01
06B90:  MOVLB  C
06B92:  IORWF  x27,W
06B94:  MOVWF  x26
06B96:  MOVLW  00
06B98:  MOVLB  B
06B9A:  BTFSS  xA9.5
06B9C:  MOVLW  01
06B9E:  MOVLB  C
06BA0:  ANDWF  x26,F
06BA2:  MOVLW  00
06BA4:  MOVLB  B
06BA6:  BTFSS  xA3.5
06BA8:  MOVLW  01
06BAA:  MOVLB  C
06BAC:  MOVWF  x29
06BAE:  MOVLW  00
06BB0:  MOVLB  B
06BB2:  BTFSC  xA5.5
06BB4:  MOVLW  01
06BB6:  MOVLB  C
06BB8:  IORWF  x29,W
06BBA:  ANDWF  x26,W
06BBC:  IORWF  x25,W
06BBE:  BCF    x24.0
06BC0:  BTFSC  FE8.0
06BC2:  BSF    x24.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (~OutputType.B15 | OutputBoth.B15));
06BC4:  MOVLW  00
06BC6:  BTFSC  x24.0
06BC8:  MOVLW  01
06BCA:  MOVWF  x25
06BCC:  MOVLW  00
06BCE:  MOVLB  B
06BD0:  BTFSC  xAB.6
06BD2:  MOVLW  01
06BD4:  MOVLB  C
06BD6:  MOVWF  x27
06BD8:  MOVLW  00
06BDA:  MOVLB  B
06BDC:  BTFSC  xAD.6
06BDE:  MOVLW  01
06BE0:  MOVLB  C
06BE2:  IORWF  x27,W
06BE4:  MOVWF  x26
06BE6:  MOVLW  00
06BE8:  MOVLB  B
06BEA:  BTFSS  xA9.6
06BEC:  MOVLW  01
06BEE:  MOVLB  C
06BF0:  ANDWF  x26,F
06BF2:  MOVLW  00
06BF4:  MOVLB  B
06BF6:  BTFSS  xA3.6
06BF8:  MOVLW  01
06BFA:  MOVLB  C
06BFC:  MOVWF  x29
06BFE:  MOVLW  00
06C00:  MOVLB  B
06C02:  BTFSC  xA5.6
06C04:  MOVLW  01
06C06:  MOVLB  C
06C08:  IORWF  x29,W
06C0A:  ANDWF  x26,W
06C0C:  IORWF  x25,W
06C0E:  BCF    x24.0
06C10:  BTFSC  FE8.0
06C12:  BSF    x24.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (~OutputType.B16 | OutputBoth.B16));
06C14:  MOVLW  00
06C16:  BTFSC  x24.0
06C18:  MOVLW  01
06C1A:  MOVWF  x25
06C1C:  MOVLW  00
06C1E:  MOVLB  B
06C20:  BTFSC  xAB.7
06C22:  MOVLW  01
06C24:  MOVLB  C
06C26:  MOVWF  x27
06C28:  MOVLW  00
06C2A:  MOVLB  B
06C2C:  BTFSC  xAD.7
06C2E:  MOVLW  01
06C30:  MOVLB  C
06C32:  IORWF  x27,W
06C34:  MOVWF  x26
06C36:  MOVLW  00
06C38:  MOVLB  B
06C3A:  BTFSS  xA9.7
06C3C:  MOVLW  01
06C3E:  MOVLB  C
06C40:  ANDWF  x26,F
06C42:  MOVLW  00
06C44:  MOVLB  B
06C46:  BTFSS  xA3.7
06C48:  MOVLW  01
06C4A:  MOVLB  C
06C4C:  MOVWF  x29
06C4E:  MOVLW  00
06C50:  MOVLB  B
06C52:  BTFSC  xA5.7
06C54:  MOVLW  01
06C56:  MOVLB  C
06C58:  IORWF  x29,W
06C5A:  ANDWF  x26,W
06C5C:  IORWF  x25,W
06C5E:  BCF    x24.0
06C60:  BTFSC  FE8.0
06C62:  BSF    x24.0
....................       /*
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (~OutputType.B17 | OutputBoth.B17));
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (~OutputType.B18 | OutputBoth.B18));
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (~OutputType.B19 | OutputBoth.B19));
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (~OutputType.B20 | OutputBoth.B20));
....................       */
.................... 
....................    }
....................    return(check);
06C64:  MOVLW  00
06C66:  BTFSC  x24.0
06C68:  MOVLW  01
06C6A:  MOVWF  01
06C6C:  MOVLB  0
06C6E:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... void main()
*
0A574:  CLRF   FF8
0A576:  BCF    FD0.7
0A578:  BSF    07.7
0A57A:  MOVLW  70
0A57C:  MOVWF  FD3
0A57E:  BCF    F9B.6
0A580:  BCF    F9B.7
0A582:  BSF    FB8.3
0A584:  MOVLW  A0
0A586:  MOVWF  FAF
0A588:  MOVLW  01
0A58A:  MOVWF  FB0
0A58C:  MOVLW  A6
0A58E:  MOVWF  FAC
0A590:  MOVLW  90
0A592:  MOVWF  FAB
0A594:  BCF    F93.0
0A596:  BSF    F8A.0
0A598:  CLRF   19
0A59A:  BCF    1A.0
0A59C:  MOVLW  19
0A59E:  MOVWF  1B
0A5A0:  BCF    1A.1
0A5A2:  MOVLW  64
0A5A4:  MOVWF  1C
0A5A6:  CLRF   1D
0A5A8:  BCF    1A.2
0A5AA:  BCF    1A.3
0A5AC:  BCF    1A.4
0A5AE:  CLRF   2E
0A5B0:  BCF    1A.5
0A5B2:  CLRF   2F
0A5B4:  BCF    1A.6
0A5B6:  BCF    1A.7
0A5B8:  BCF    30.0
0A5BA:  BCF    30.1
0A5BC:  BCF    30.2
0A5BE:  CLRF   31
0A5C0:  BCF    30.3
0A5C2:  BCF    30.4
0A5C4:  MOVLW  11
0A5C6:  MOVWF  x6F
0A5C8:  MOVLW  12
0A5CA:  MOVWF  x70
0A5CC:  MOVLW  13
0A5CE:  MOVWF  x71
0A5D0:  MOVLW  14
0A5D2:  MOVWF  x72
0A5D4:  MOVLW  16
0A5D6:  MOVWF  x73
0A5D8:  MOVLW  17
0A5DA:  MOVWF  x74
0A5DC:  MOVLW  18
0A5DE:  MOVWF  x75
0A5E0:  MOVLW  19
0A5E2:  MOVWF  x76
0A5E4:  MOVLW  20
0A5E6:  MOVWF  x77
0A5E8:  BCF    30.5
0A5EA:  CLRF   x7A
0A5EC:  MOVLW  01
0A5EE:  MOVLB  5
0A5F0:  MOVWF  x7D
0A5F2:  MOVLW  F4
0A5F4:  MOVWF  x7C
0A5F6:  CLRF   x7F
0A5F8:  CLRF   x7E
0A5FA:  CLRF   x81
0A5FC:  CLRF   x80
0A5FE:  CLRF   x82
0A600:  MOVLB  9
0A602:  CLRF   x87
0A604:  CLRF   x86
0A606:  CLRF   x88
0A608:  CLRF   x8A
0A60A:  CLRF   x89
0A60C:  MOVLB  C
0A60E:  CLRF   x16
0A610:  CLRF   x15
0A612:  MOVLB  F
0A614:  CLRF   x38
0A616:  CLRF   x39
0A618:  CLRF   x3A
0A61A:  CLRF   F77
0A61C:  CLRF   F78
0A61E:  CLRF   F79
0A620:  MOVLB  C
0A622:  CLRF   x17
.................... {
....................    
....................    
....................    delay_ms(50);
0A624:  MOVLW  32
0A626:  MOVWF  x24
0A628:  MOVLB  0
0A62A:  CALL   0952
....................    output_bit(Pled,0);   //power on watchdog signal
0A62E:  BCF    F8A.5
0A630:  BCF    F93.5
....................    
....................    setup_timer_0(RTCC_INTERNAL);
0A632:  MOVLW  80
0A634:  MOVWF  FD5
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
0A636:  MOVLW  78
0A638:  IORLW  06
0A63A:  MOVWF  FBA
0A63C:  MOVLW  C4
0A63E:  MOVWF  FBB
....................    enable_interrupts(INT_TIMER2);
0A640:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
0A642:  BSF    F9D.5
....................    
....................    
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_64); //master1 jj
0A644:  BCF    FC6.5
0A646:  BCF    F94.5
0A648:  BSF    F94.4
0A64A:  BCF    F94.3
0A64C:  MOVLW  22
0A64E:  MOVWF  FC6
0A650:  MOVLW  40
0A652:  MOVWF  FC7
.................... 
....................   
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
0A654:  GOTO   09B4
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
0A658:  MOVLB  C
0A65A:  CLRF   x1B
0A65C:  SETF   x1C
0A65E:  MOVLB  0
0A660:  CALL   0A4A
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
0A664:  MOVLB  C
0A666:  CLRF   x1B
0A668:  SETF   x1C
0A66A:  MOVLB  0
0A66C:  CALL   0A5C
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
0A670:  MOVLW  02
0A672:  MOVLB  C
0A674:  MOVWF  x1B
0A676:  SETF   x1C
0A678:  MOVLB  0
0A67A:  CALL   0A4A
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input 
0A67E:  MOVLW  02
0A680:  MOVLB  C
0A682:  MOVWF  x1B
0A684:  SETF   x1C
0A686:  MOVLB  0
0A688:  CALL   0A5C
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
0A68C:  MOVLB  C
0A68E:  CLRF   x25
0A690:  MOVLW  06
0A692:  MOVWF  x26
0A694:  SETF   x27
0A696:  MOVLB  0
0A698:  CALL   0982
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
0A69C:  MOVLB  C
0A69E:  CLRF   x25
0A6A0:  MOVLW  16
0A6A2:  MOVWF  x26
0A6A4:  SETF   x27
0A6A6:  MOVLB  0
0A6A8:  CALL   0982
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
0A6AC:  MOVLW  02
0A6AE:  MOVLB  C
0A6B0:  MOVWF  x25
0A6B2:  MOVLW  06
0A6B4:  MOVWF  x26
0A6B6:  SETF   x27
0A6B8:  MOVLB  0
0A6BA:  CALL   0982
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
0A6BE:  MOVLW  02
0A6C0:  MOVLB  C
0A6C2:  MOVWF  x25
0A6C4:  MOVLW  16
0A6C6:  MOVWF  x26
0A6C8:  SETF   x27
0A6CA:  MOVLB  0
0A6CC:  CALL   0982
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
0A6D0:  MOVLW  04
0A6D2:  MOVLB  C
0A6D4:  MOVWF  x1B
0A6D6:  CLRF   x1C
0A6D8:  MOVLB  0
0A6DA:  CALL   0A4A
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
0A6DE:  MOVLW  04
0A6E0:  MOVLB  C
0A6E2:  MOVWF  x1B
0A6E4:  CLRF   x1C
0A6E6:  MOVLB  0
0A6E8:  CALL   0A5C
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
0A6EC:  MOVLW  06
0A6EE:  MOVLB  C
0A6F0:  MOVWF  x1B
0A6F2:  CLRF   x1C
0A6F4:  MOVLB  0
0A6F6:  CALL   0A4A
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
0A6FA:  MOVLW  06
0A6FC:  MOVLB  C
0A6FE:  MOVWF  x1B
0A700:  CLRF   x1C
0A702:  MOVLB  0
0A704:  CALL   0A5C
....................    IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
0A708:  MOVLW  08
0A70A:  MOVLB  C
0A70C:  MOVWF  x1B
0A70E:  CLRF   x1C
0A710:  MOVLB  0
0A712:  CALL   0A4A
....................    IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
0A716:  MOVLW  08
0A718:  MOVLB  C
0A71A:  MOVWF  x1B
0A71C:  CLRF   x1C
0A71E:  MOVLB  0
0A720:  CALL   0A5C
....................    IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0A724:  MOVLW  0A
0A726:  MOVLB  C
0A728:  MOVWF  x1B
0A72A:  CLRF   x1C
0A72C:  MOVLB  0
0A72E:  CALL   0A4A
....................    IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
0A732:  MOVLW  0A
0A734:  MOVLB  C
0A736:  MOVWF  x1B
0A738:  CLRF   x1C
0A73A:  MOVLB  0
0A73C:  CALL   0A5C
....................    
....................    FlashingFlag = 1;
0A740:  BSF    1A.1
....................    //output_bit(P485ctrl,0);
....................    sequence = end_sq;
0A742:  MOVFF  6F,78
....................    Address = 1;
0A746:  MOVLW  01
0A748:  MOVWF  x79
.................... 
....................    Output.B1 = 1;
0A74A:  MOVLB  B
0A74C:  BSF    x9C.0
....................    Output.B2 = 1;
0A74E:  BSF    x9C.1
....................    Output.B3 = 1;
0A750:  BSF    x9C.2
....................    Output.B4 = 1;
0A752:  BSF    x9C.3
....................    Output.B5 = 1;
0A754:  BSF    x9C.4
....................    Output.B6 = 1;
0A756:  BSF    x9C.5
....................    Output.B7 = 1;
0A758:  BSF    x9C.6
....................    Output.B8 = 1;
0A75A:  BSF    x9C.7
....................    Output.B9 = 1;
0A75C:  BSF    x9D.0
....................    Output.B10 = 1;
0A75E:  BSF    x9D.1
....................    Output.B11 = 1;
0A760:  BSF    x9D.2
....................    Output.B12 = 1;
0A762:  BSF    x9D.3
....................    Output.B13 = 1;
0A764:  BSF    x9D.4
....................    Output.B14 = 1;
0A766:  BSF    x9D.5
....................    Output.B15 = 1;
0A768:  BSF    x9D.6
....................    Output.B16 = 1;
0A76A:  BSF    x9D.7
....................    
....................    ////////////////////
....................    In.B1 = 0;
0A76C:  BCF    xAA.0
....................    In.B2 = 0;
0A76E:  BCF    xAA.1
....................    In.B3 = 0;
0A770:  BCF    xAA.2
....................    In.B4 = 0;
0A772:  BCF    xAA.3
....................    In.B5 = 0;
0A774:  BCF    xAA.4
....................    In.B6 = 0;
0A776:  BCF    xAA.5
....................    In.B7 = 0;
0A778:  BCF    xAA.6
....................    In.B8 = 0;
0A77A:  BCF    xAA.7
....................    In.B9 = 0;
0A77C:  BCF    xAB.0
....................    In.B10 = 0;
0A77E:  BCF    xAB.1
....................    In.B11 = 0;
0A780:  BCF    xAB.2
....................    In.B12 = 0;
0A782:  BCF    xAB.3
....................    In.B13 = 0;
0A784:  BCF    xAB.4
....................    In.B14 = 0;
0A786:  BCF    xAB.5
....................    In.B15 = 0;
0A788:  BCF    xAB.6
....................    In.B16 = 0;
0A78A:  BCF    xAB.7
....................     ////////////////////
....................    In2.B1 = 0;
0A78C:  BCF    xAC.0
....................    In2.B2 = 0;
0A78E:  BCF    xAC.1
....................    In2.B3 = 0;
0A790:  BCF    xAC.2
....................    In2.B4 = 0;
0A792:  BCF    xAC.3
....................    In2.B5 = 0;
0A794:  BCF    xAC.4
....................    In2.B6 = 0;
0A796:  BCF    xAC.5
....................    In2.B7 = 0;
0A798:  BCF    xAC.6
....................    In2.B8 = 0;
0A79A:  BCF    xAC.7
....................    In2.B9 = 0;
0A79C:  BCF    xAD.0
....................    In2.B10 = 0;
0A79E:  BCF    xAD.1
....................    In2.B11 = 0;
0A7A0:  BCF    xAD.2
....................    In2.B12 = 0;
0A7A2:  BCF    xAD.3
....................    In2.B13 = 0;
0A7A4:  BCF    xAD.4
....................    In2.B14 = 0;
0A7A6:  BCF    xAD.5
....................    In2.B15 = 0;
0A7A8:  BCF    xAD.6
....................    In2.B16 = 0;
0A7AA:  BCF    xAD.7
....................   
....................    ////////////////////////
....................    Ack.B1 = 0;
0A7AC:  BCF    xA8.0
....................    Ack.B2 = 0;
0A7AE:  BCF    xA8.1
....................    Ack.B3 = 0;
0A7B0:  BCF    xA8.2
....................    Ack.B4 = 0;
0A7B2:  BCF    xA8.3
....................    Ack.B5 = 0;
0A7B4:  BCF    xA8.4
....................    Ack.B6 = 0;
0A7B6:  BCF    xA8.5
....................    Ack.B7 = 0;
0A7B8:  BCF    xA8.6
....................    Ack.B8 = 0;
0A7BA:  BCF    xA8.7
....................    Ack.B9 = 0;
0A7BC:  BCF    xA9.0
....................    Ack.B10 = 0;
0A7BE:  BCF    xA9.1
....................    Ack.B11 = 0;
0A7C0:  BCF    xA9.2
....................    Ack.B12 = 0;
0A7C2:  BCF    xA9.3
....................    Ack.B13 = 0;
0A7C4:  BCF    xA9.4
....................    Ack.B14 = 0;
0A7C6:  BCF    xA9.5
....................    Ack.B15 = 0;
0A7C8:  BCF    xA9.6
....................    Ack.B16 = 0;
0A7CA:  BCF    xA9.7
.................... 
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0x0F)
0A7CC:  MOVFF  FF2,C1B
0A7D0:  BCF    FF2.7
0A7D2:  CLRF   FAA
0A7D4:  CLRF   FA9
0A7D6:  BCF    FA6.6
0A7D8:  BCF    FA6.7
0A7DA:  BSF    FA6.0
0A7DC:  MOVF   FA8,W
0A7DE:  MOVLB  C
0A7E0:  BTFSC  x1B.7
0A7E2:  BSF    FF2.7
0A7E4:  SUBLW  0F
0A7E6:  BNZ   A7F2
....................    {
....................       Read_Config();
0A7E8:  MOVLB  0
0A7EA:  GOTO   0A70
....................    }
0A7EE:  BRA    AB4E
0A7F0:  MOVLB  C
....................    else
....................    {
....................       FlashingRateTime = 25;
0A7F2:  MOVLW  19
0A7F4:  MOVWF  1B
....................       AutoAck = 0xF0; //not use auto ack
0A7F6:  MOVLW  F0
0A7F8:  MOVLB  0
0A7FA:  MOVWF  x6A
....................       Address = 0x01;
0A7FC:  MOVLW  01
0A7FE:  MOVWF  x79
.................... 
....................       AutoAckTime = 5;
0A800:  MOVLW  05
0A802:  MOVWF  x6B
....................       FlashingRate = 25;
0A804:  MOVLW  19
0A806:  MOVWF  x6C
....................       NoOfPoint = 16;
0A808:  MOVLW  10
0A80A:  MOVWF  x6D
....................       char i;
....................       for(i =0; i<=NoOfPoint; i++)
0A80C:  MOVLB  C
0A80E:  CLRF   x18
0A810:  MOVF   x18,W
0A812:  MOVLB  0
0A814:  SUBWF  x6D,W
0A816:  BNC   A836
....................       {
....................          FaultDelayTime[i] = 0;
0A818:  BCF    FD8.0
0A81A:  MOVLB  C
0A81C:  RLCF   x18,W
0A81E:  CLRF   03
0A820:  ADDLW  E8
0A822:  MOVWF  FE9
0A824:  MOVLW  0B
0A826:  ADDWFC 03,W
0A828:  MOVWF  FEA
0A82A:  CLRF   FEC
0A82C:  MOVF   FED,F
0A82E:  CLRF   FEF
0A830:  INCF   x18,F
0A832:  BRA    A810
0A834:  MOVLB  0
....................       }
.................... 
....................       InputType.B1 = 1;
0A836:  MOVLB  B
0A838:  BSF    x9E.0
....................       InputType.B2 = 1;
0A83A:  BSF    x9E.1
....................       InputType.B3 = 1;
0A83C:  BSF    x9E.2
....................       InputType.B4 = 1;
0A83E:  BSF    x9E.3
....................       InputType.B5 = 1;
0A840:  BSF    x9E.4
....................       InputType.B6 = 1;
0A842:  BSF    x9E.5
....................       InputType.B7 = 1;
0A844:  BSF    x9E.6
....................       InputType.B8 = 1;
0A846:  BSF    x9E.7
....................       InputType.B9 = 1;
0A848:  BSF    x9F.0
....................       InputType.B10 = 1;
0A84A:  BSF    x9F.1
....................       InputType.B11 = 1;
0A84C:  BSF    x9F.2
....................       InputType.B12 = 1;
0A84E:  BSF    x9F.3
....................       InputType.B13 = 1;
0A850:  BSF    x9F.4
....................       InputType.B14 = 1;
0A852:  BSF    x9F.5
....................       InputType.B15 = 1;
0A854:  BSF    x9F.6
....................       InputType.B16 = 1;
0A856:  BSF    x9F.7
....................       
....................       FaultNCNO[1] = 1;
0A858:  MOVLB  C
0A85A:  BSF    x12.1
....................       FaultNCNO[2] = 1;
0A85C:  BSF    x12.2
....................       FaultNCNO[3] = 1;
0A85E:  BSF    x12.3
....................       FaultNCNO[4] = 1;
0A860:  BSF    x12.4
....................       FaultNCNO[5] = 1;
0A862:  BSF    x12.5
....................       FaultNCNO[6] = 1;
0A864:  BSF    x12.6
....................       FaultNCNO[7] = 1;
0A866:  BSF    x12.7
....................       FaultNCNO[8] = 1;
0A868:  BSF    x13.0
....................       FaultNCNO[9] = 1;
0A86A:  BSF    x13.1
....................       FaultNCNO[10] = 1;
0A86C:  BSF    x13.2
....................       FaultNCNO[11] = 1;
0A86E:  BSF    x13.3
....................       FaultNCNO[12] = 1;
0A870:  BSF    x13.4
....................       FaultNCNO[13] = 1;
0A872:  BSF    x13.5
....................       FaultNCNO[14] = 1;
0A874:  BSF    x13.6
....................       FaultNCNO[15] = 1;
0A876:  BSF    x13.7
....................       FaultNCNO[16] = 1;
0A878:  BSF    x14.0
....................       
....................       /////////////////////////////
....................       FaultType.B1 = 1;
0A87A:  MOVLB  B
0A87C:  BSF    xA0.0
....................       FaultType.B2= 1;
0A87E:  BSF    xA0.1
....................       FaultType.B3 = 1;
0A880:  BSF    xA0.2
....................       FaultType.B4 = 1;
0A882:  BSF    xA0.3
....................       FaultType.B5 = 1;
0A884:  BSF    xA0.4
....................       FaultType.B6 = 1;
0A886:  BSF    xA0.5
....................       FaultType.B7 = 1;
0A888:  BSF    xA0.6
....................       FaultType.B8 = 1;
0A88A:  BSF    xA0.7
....................       FaultType.B9 = 1;
0A88C:  BSF    xA1.0
....................       FaultType.B10 = 1;
0A88E:  BSF    xA1.1
....................       FaultType.B11 = 1;
0A890:  BSF    xA1.2
....................       FaultType.B12 = 1;
0A892:  BSF    xA1.3
....................       FaultType.B13 = 1;
0A894:  BSF    xA1.4
....................       FaultType.B14 = 1;
0A896:  BSF    xA1.5
....................       FaultType.B15 = 1;
0A898:  BSF    xA1.6
....................       FaultType.B16 = 1;
0A89A:  BSF    xA1.7
....................       
....................       ////////////////////////////
....................       OutputType.B1 = 1;
0A89C:  BSF    xA2.0
....................       OutputType.B2 = 1;
0A89E:  BSF    xA2.1
....................       OutputType.B3 = 1;
0A8A0:  BSF    xA2.2
....................       OutputType.B4 = 1;
0A8A2:  BSF    xA2.3
....................       OutputType.B5 = 1;
0A8A4:  BSF    xA2.4
....................       OutputType.B6 = 1;
0A8A6:  BSF    xA2.5
....................       OutputType.B7 = 1;
0A8A8:  BSF    xA2.6
....................       OutputType.B8 = 1;
0A8AA:  BSF    xA2.7
....................       OutputType.B9 = 1;
0A8AC:  BSF    xA3.0
....................       OutputType.B10 = 1;
0A8AE:  BSF    xA3.1
....................       OutputType.B11 = 1;
0A8B0:  BSF    xA3.2
....................       OutputType.B12 = 1;
0A8B2:  BSF    xA3.3
....................       OutputType.B13 = 1;
0A8B4:  BSF    xA3.4
....................       OutputType.B14 = 1;
0A8B6:  BSF    xA3.5
....................       OutputType.B15 = 1;
0A8B8:  BSF    xA3.6
....................       OutputType.B16 = 1;
0A8BA:  BSF    xA3.7
....................  
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
0A8BC:  BSF    xA4.0
....................       OutputBoth.B2 = 1;
0A8BE:  BSF    xA4.1
....................       OutputBoth.B3 = 1;
0A8C0:  BSF    xA4.2
....................       OutputBoth.B4 = 1;
0A8C2:  BSF    xA4.3
....................       OutputBoth.B5 = 1;
0A8C4:  BSF    xA4.4
....................       OutputBoth.B6 = 1;
0A8C6:  BSF    xA4.5
....................       OutputBoth.B7 = 1;
0A8C8:  BSF    xA4.6
....................       OutputBoth.B8 = 1;
0A8CA:  BSF    xA4.7
....................       OutputBoth.B9 = 1;
0A8CC:  BSF    xA5.0
....................       OutputBoth.B10 = 1;
0A8CE:  BSF    xA5.1
....................       OutputBoth.B11 = 1;
0A8D0:  BSF    xA5.2
....................       OutputBoth.B12 = 1;
0A8D2:  BSF    xA5.3
....................       OutputBoth.B13 = 1;
0A8D4:  BSF    xA5.4
....................       OutputBoth.B14 = 1;
0A8D6:  BSF    xA5.5
....................       OutputBoth.B15 = 1;
0A8D8:  BSF    xA5.6
....................       OutputBoth.B16 = 1;
0A8DA:  BSF    xA5.7
....................       
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
0A8DC:  BSF    xA6.0
....................       AlarmIndicator.B2 = 1;
0A8DE:  BSF    xA6.1
....................       AlarmIndicator.B3 = 1;
0A8E0:  BSF    xA6.2
....................       AlarmIndicator.B4 = 1;
0A8E2:  BSF    xA6.3
....................       AlarmIndicator.B5 = 1;
0A8E4:  BSF    xA6.4
....................       AlarmIndicator.B6 = 1;
0A8E6:  BSF    xA6.5
....................       AlarmIndicator.B7 = 1;
0A8E8:  BSF    xA6.6
....................       AlarmIndicator.B8 = 1;
0A8EA:  BSF    xA6.7
....................       AlarmIndicator.B9 = 1;
0A8EC:  BSF    xA7.0
....................       AlarmIndicator.B10 = 1;
0A8EE:  BSF    xA7.1
....................       AlarmIndicator.B11 = 1;
0A8F0:  BSF    xA7.2
....................       AlarmIndicator.B12 = 1;
0A8F2:  BSF    xA7.3
....................       AlarmIndicator.B13 = 1;
0A8F4:  BSF    xA7.4
....................       AlarmIndicator.B14 = 1;
0A8F6:  BSF    xA7.5
....................       AlarmIndicator.B15 = 1;
0A8F8:  BSF    xA7.6
....................       AlarmIndicator.B16 = 1;
0A8FA:  BSF    xA7.7
....................       
....................       ///////////// JACK///////////////////
....................    EEpDat = read_eeprom(0x10);
0A8FC:  MOVFF  FF2,C1B
0A900:  BCF    FF2.7
0A902:  CLRF   FAA
0A904:  MOVLW  10
0A906:  MOVWF  FA9
0A908:  BCF    FA6.6
0A90A:  BCF    FA6.7
0A90C:  BSF    FA6.0
0A90E:  MOVF   FA8,W
0A910:  MOVLB  C
0A912:  BTFSC  x1B.7
0A914:  BSF    FF2.7
0A916:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
0A918:  MOVLB  B
0A91A:  BCF    xB2.0
0A91C:  BTFSC  39.0
0A91E:  BSF    xB2.0
....................    RED_Colour.B2 = EEpDat >> 1;
0A920:  BCF    FD8.0
0A922:  RRCF   39,W
0A924:  BCF    xB2.1
0A926:  BTFSC  FE8.0
0A928:  BSF    xB2.1
....................    RED_Colour.B3 = EEpDat >> 2;
0A92A:  RRCF   39,W
0A92C:  MOVWF  00
0A92E:  RRCF   00,F
0A930:  MOVLW  3F
0A932:  ANDWF  00,F
0A934:  BCF    xB2.2
0A936:  BTFSC  00.0
0A938:  BSF    xB2.2
....................    RED_Colour.B4 = EEpDat >> 3;
0A93A:  RRCF   39,W
0A93C:  MOVWF  00
0A93E:  RRCF   00,F
0A940:  RRCF   00,F
0A942:  MOVLW  1F
0A944:  ANDWF  00,F
0A946:  BCF    xB2.3
0A948:  BTFSC  00.0
0A94A:  BSF    xB2.3
....................    RED_Colour.B5 = EEpDat >> 4;
0A94C:  SWAPF  39,W
0A94E:  MOVWF  00
0A950:  MOVLW  0F
0A952:  ANDWF  00,F
0A954:  BCF    xB2.4
0A956:  BTFSC  00.0
0A958:  BSF    xB2.4
....................    RED_Colour.B6 = EEpDat >> 5;
0A95A:  SWAPF  39,W
0A95C:  MOVWF  00
0A95E:  RRCF   00,F
0A960:  MOVLW  07
0A962:  ANDWF  00,F
0A964:  BCF    xB2.5
0A966:  BTFSC  00.0
0A968:  BSF    xB2.5
....................    RED_Colour.B7 = EEpDat >> 6;
0A96A:  SWAPF  39,W
0A96C:  MOVWF  00
0A96E:  RRCF   00,F
0A970:  RRCF   00,F
0A972:  MOVLW  03
0A974:  ANDWF  00,F
0A976:  BCF    xB2.6
0A978:  BTFSC  00.0
0A97A:  BSF    xB2.6
....................    RED_Colour.B8 = EEpDat >> 7;
0A97C:  CLRF   00
0A97E:  BTFSC  39.7
0A980:  BSF    00.0
0A982:  BCF    xB2.7
0A984:  BTFSC  00.0
0A986:  BSF    xB2.7
....................    
....................    EEpDat = read_eeprom(0x11);
0A988:  MOVFF  FF2,C1B
0A98C:  BCF    FF2.7
0A98E:  CLRF   FAA
0A990:  MOVLW  11
0A992:  MOVWF  FA9
0A994:  BCF    FA6.6
0A996:  BCF    FA6.7
0A998:  BSF    FA6.0
0A99A:  MOVF   FA8,W
0A99C:  MOVLB  C
0A99E:  BTFSC  x1B.7
0A9A0:  BSF    FF2.7
0A9A2:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
0A9A4:  MOVLB  B
0A9A6:  BCF    xB3.0
0A9A8:  BTFSC  39.0
0A9AA:  BSF    xB3.0
....................    RED_Colour.B10 = EEpDat >> 1;
0A9AC:  BCF    FD8.0
0A9AE:  RRCF   39,W
0A9B0:  BCF    xB3.1
0A9B2:  BTFSC  FE8.0
0A9B4:  BSF    xB3.1
....................    
....................    
....................    EEpDat = read_eeprom(0x12);
0A9B6:  MOVFF  FF2,C1B
0A9BA:  BCF    FF2.7
0A9BC:  CLRF   FAA
0A9BE:  MOVLW  12
0A9C0:  MOVWF  FA9
0A9C2:  BCF    FA6.6
0A9C4:  BCF    FA6.7
0A9C6:  BSF    FA6.0
0A9C8:  MOVF   FA8,W
0A9CA:  MOVLB  C
0A9CC:  BTFSC  x1B.7
0A9CE:  BSF    FF2.7
0A9D0:  MOVWF  39
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
0A9D2:  MOVLB  B
0A9D4:  BCF    xB3.2
0A9D6:  BTFSC  39.0
0A9D8:  BSF    xB3.2
....................    RED_Colour.B12 = EEpDat >> 1;
0A9DA:  BCF    FD8.0
0A9DC:  RRCF   39,W
0A9DE:  BCF    xB3.3
0A9E0:  BTFSC  FE8.0
0A9E2:  BSF    xB3.3
....................    RED_Colour.B13 = EEpDat >> 2;
0A9E4:  RRCF   39,W
0A9E6:  MOVWF  00
0A9E8:  RRCF   00,F
0A9EA:  MOVLW  3F
0A9EC:  ANDWF  00,F
0A9EE:  BCF    xB3.4
0A9F0:  BTFSC  00.0
0A9F2:  BSF    xB3.4
....................    RED_Colour.B14 = EEpDat >> 3;
0A9F4:  RRCF   39,W
0A9F6:  MOVWF  00
0A9F8:  RRCF   00,F
0A9FA:  RRCF   00,F
0A9FC:  MOVLW  1F
0A9FE:  ANDWF  00,F
0AA00:  BCF    xB3.5
0AA02:  BTFSC  00.0
0AA04:  BSF    xB3.5
....................    RED_Colour.B15 = EEpDat >> 4;
0AA06:  SWAPF  39,W
0AA08:  MOVWF  00
0AA0A:  MOVLW  0F
0AA0C:  ANDWF  00,F
0AA0E:  BCF    xB3.6
0AA10:  BTFSC  00.0
0AA12:  BSF    xB3.6
....................    RED_Colour.B16 = EEpDat >> 5;
0AA14:  SWAPF  39,W
0AA16:  MOVWF  00
0AA18:  RRCF   00,F
0AA1A:  MOVLW  07
0AA1C:  ANDWF  00,F
0AA1E:  BCF    xB3.7
0AA20:  BTFSC  00.0
0AA22:  BSF    xB3.7
....................   
....................    EEpDat = read_eeprom(0x14);
0AA24:  MOVFF  FF2,C1B
0AA28:  BCF    FF2.7
0AA2A:  CLRF   FAA
0AA2C:  MOVLW  14
0AA2E:  MOVWF  FA9
0AA30:  BCF    FA6.6
0AA32:  BCF    FA6.7
0AA34:  BSF    FA6.0
0AA36:  MOVF   FA8,W
0AA38:  MOVLB  C
0AA3A:  BTFSC  x1B.7
0AA3C:  BSF    FF2.7
0AA3E:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
0AA40:  MOVLB  B
0AA42:  BCF    xB4.0
0AA44:  BTFSC  39.0
0AA46:  BSF    xB4.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
0AA48:  BCF    FD8.0
0AA4A:  RRCF   39,W
0AA4C:  BCF    xB4.1
0AA4E:  BTFSC  FE8.0
0AA50:  BSF    xB4.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
0AA52:  RRCF   39,W
0AA54:  MOVWF  00
0AA56:  RRCF   00,F
0AA58:  MOVLW  3F
0AA5A:  ANDWF  00,F
0AA5C:  BCF    xB4.2
0AA5E:  BTFSC  00.0
0AA60:  BSF    xB4.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
0AA62:  RRCF   39,W
0AA64:  MOVWF  00
0AA66:  RRCF   00,F
0AA68:  RRCF   00,F
0AA6A:  MOVLW  1F
0AA6C:  ANDWF  00,F
0AA6E:  BCF    xB4.3
0AA70:  BTFSC  00.0
0AA72:  BSF    xB4.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
0AA74:  SWAPF  39,W
0AA76:  MOVWF  00
0AA78:  MOVLW  0F
0AA7A:  ANDWF  00,F
0AA7C:  BCF    xB4.4
0AA7E:  BTFSC  00.0
0AA80:  BSF    xB4.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
0AA82:  SWAPF  39,W
0AA84:  MOVWF  00
0AA86:  RRCF   00,F
0AA88:  MOVLW  07
0AA8A:  ANDWF  00,F
0AA8C:  BCF    xB4.5
0AA8E:  BTFSC  00.0
0AA90:  BSF    xB4.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
0AA92:  SWAPF  39,W
0AA94:  MOVWF  00
0AA96:  RRCF   00,F
0AA98:  RRCF   00,F
0AA9A:  MOVLW  03
0AA9C:  ANDWF  00,F
0AA9E:  BCF    xB4.6
0AAA0:  BTFSC  00.0
0AAA2:  BSF    xB4.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
0AAA4:  CLRF   00
0AAA6:  BTFSC  39.7
0AAA8:  BSF    00.0
0AAAA:  BCF    xB4.7
0AAAC:  BTFSC  00.0
0AAAE:  BSF    xB4.7
....................    
....................    EEpDat = read_eeprom(0x15);
0AAB0:  MOVFF  FF2,C1B
0AAB4:  BCF    FF2.7
0AAB6:  CLRF   FAA
0AAB8:  MOVLW  15
0AABA:  MOVWF  FA9
0AABC:  BCF    FA6.6
0AABE:  BCF    FA6.7
0AAC0:  BSF    FA6.0
0AAC2:  MOVF   FA8,W
0AAC4:  MOVLB  C
0AAC6:  BTFSC  x1B.7
0AAC8:  BSF    FF2.7
0AACA:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
0AACC:  MOVLB  B
0AACE:  BCF    xB5.0
0AAD0:  BTFSC  39.0
0AAD2:  BSF    xB5.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
0AAD4:  BCF    FD8.0
0AAD6:  RRCF   39,W
0AAD8:  BCF    xB5.1
0AADA:  BTFSC  FE8.0
0AADC:  BSF    xB5.1
....................    
....................    
....................    EEpDat = read_eeprom(0x16);
0AADE:  MOVFF  FF2,C1B
0AAE2:  BCF    FF2.7
0AAE4:  CLRF   FAA
0AAE6:  MOVLW  16
0AAE8:  MOVWF  FA9
0AAEA:  BCF    FA6.6
0AAEC:  BCF    FA6.7
0AAEE:  BSF    FA6.0
0AAF0:  MOVF   FA8,W
0AAF2:  MOVLB  C
0AAF4:  BTFSC  x1B.7
0AAF6:  BSF    FF2.7
0AAF8:  MOVWF  39
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
0AAFA:  MOVLB  B
0AAFC:  BCF    xB5.2
0AAFE:  BTFSC  39.0
0AB00:  BSF    xB5.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
0AB02:  BCF    FD8.0
0AB04:  RRCF   39,W
0AB06:  BCF    xB5.3
0AB08:  BTFSC  FE8.0
0AB0A:  BSF    xB5.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
0AB0C:  RRCF   39,W
0AB0E:  MOVWF  00
0AB10:  RRCF   00,F
0AB12:  MOVLW  3F
0AB14:  ANDWF  00,F
0AB16:  BCF    xB5.4
0AB18:  BTFSC  00.0
0AB1A:  BSF    xB5.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
0AB1C:  RRCF   39,W
0AB1E:  MOVWF  00
0AB20:  RRCF   00,F
0AB22:  RRCF   00,F
0AB24:  MOVLW  1F
0AB26:  ANDWF  00,F
0AB28:  BCF    xB5.5
0AB2A:  BTFSC  00.0
0AB2C:  BSF    xB5.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
0AB2E:  SWAPF  39,W
0AB30:  MOVWF  00
0AB32:  MOVLW  0F
0AB34:  ANDWF  00,F
0AB36:  BCF    xB5.6
0AB38:  BTFSC  00.0
0AB3A:  BSF    xB5.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
0AB3C:  SWAPF  39,W
0AB3E:  MOVWF  00
0AB40:  RRCF   00,F
0AB42:  MOVLW  07
0AB44:  ANDWF  00,F
0AB46:  BCF    xB5.7
0AB48:  BTFSC  00.0
0AB4A:  BSF    xB5.7
0AB4C:  MOVLB  0
.................... 
....................    
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
....................    
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
0AB4E:  MOVLW  00
0AB50:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
0AB52:  MOVWF  F93
....................    enable_interrupts(GLOBAL);
0AB54:  MOVLW  C0
0AB56:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
0AB58:  BSF    FD1.0
....................    Read_input(); restart_wdt();
0AB5A:  CALL   207C
0AB5E:  CLRWDT
....................    
....................    output_bit(Pbuzzer,0);   //Clear Buzzer
0AB60:  BCF    F89.4
0AB62:  BCF    F92.4
....................    output_bit(Pbell,0);      //Clear Bell
0AB64:  BCF    F89.3
0AB66:  BCF    F92.3
....................    output_bit(P485ctrl,0);
0AB68:  BCF    F8A.3
0AB6A:  BCF    F93.3
....................    //output_bit(P485ctrl,0);
....................    output_bit(PIN_B4,1); //jj
0AB6C:  BSF    F8A.4
0AB6E:  BCF    F93.4
....................    Send_Ouput();
0AB70:  CALL   2AE0
....................    
....................    IO_OUTPUT_A(IO_DEVICE_2, 0xff);
0AB74:  MOVLW  04
0AB76:  MOVLB  C
0AB78:  MOVWF  x23
0AB7A:  SETF   x24
0AB7C:  MOVLB  0
0AB7E:  CALL   2AB4
....................    IO_OUTPUT_B(IO_DEVICE_2, 0xff);
0AB82:  MOVLW  04
0AB84:  MOVLB  C
0AB86:  MOVWF  x23
0AB88:  SETF   x24
0AB8A:  MOVLB  0
0AB8C:  CALL   2ACA
....................             
....................    IO_OUTPUT_A(IO_DEVICE_3, 0xff);
0AB90:  MOVLW  06
0AB92:  MOVLB  C
0AB94:  MOVWF  x23
0AB96:  SETF   x24
0AB98:  MOVLB  0
0AB9A:  CALL   2AB4
....................    IO_OUTPUT_B(IO_DEVICE_3, 0xff);
0AB9E:  MOVLW  06
0ABA0:  MOVLB  C
0ABA2:  MOVWF  x23
0ABA4:  SETF   x24
0ABA6:  MOVLB  0
0ABA8:  CALL   2ACA
....................   
....................    IO_OUTPUT_A(IO_DEVICE_5, 0xff);  
0ABAC:  MOVLW  0A
0ABAE:  MOVLB  C
0ABB0:  MOVWF  x23
0ABB2:  SETF   x24
0ABB4:  MOVLB  0
0ABB6:  CALL   2AB4
....................    IO_OUTPUT_B(IO_DEVICE_5, 0xff);
0ABBA:  MOVLW  0A
0ABBC:  MOVLB  C
0ABBE:  MOVWF  x23
0ABC0:  SETF   x24
0ABC2:  MOVLB  0
0ABC4:  CALL   2ACA
....................             
....................    IO_OUTPUT_A(IO_DEVICE_4, 0xff);
0ABC8:  MOVLW  08
0ABCA:  MOVLB  C
0ABCC:  MOVWF  x23
0ABCE:  SETF   x24
0ABD0:  MOVLB  0
0ABD2:  CALL   2AB4
....................    IO_OUTPUT_B(IO_DEVICE_4, 0xff);
0ABD6:  MOVLW  08
0ABD8:  MOVLB  C
0ABDA:  MOVWF  x23
0ABDC:  SETF   x24
0ABDE:  MOVLB  0
0ABE0:  CALL   2ACA
....................      
....................    // jj
....................    char i;
....................    for(i=1;i<=16;i++)
0ABE4:  MOVLW  01
0ABE6:  MOVLB  C
0ABE8:  MOVWF  x19
0ABEA:  MOVF   x19,W
0ABEC:  SUBLW  10
0ABEE:  BTFSS  FD8.0
0ABF0:  BRA    AD7E
....................    {
....................       FaultAgo[i] = 0;
0ABF2:  MOVFF  C19,C2C
0ABF6:  CLRF   x2D
0ABF8:  MOVLW  0B
0ABFA:  MOVWF  x2F
0ABFC:  MOVLW  B8
0ABFE:  MOVWF  x2E
0AC00:  MOVLB  0
0AC02:  CALL   1FDC
....................       FaultNow[i] = 0;
0AC06:  MOVFF  C19,C2C
0AC0A:  MOVLB  C
0AC0C:  CLRF   x2D
0AC0E:  MOVLW  0B
0AC10:  MOVWF  x2F
0AC12:  MOVLW  BB
0AC14:  MOVWF  x2E
0AC16:  MOVLB  0
0AC18:  CALL   1FDC
....................       ReleaseTime[i] = 0;
0AC1C:  BCF    FD8.0
0AC1E:  MOVLB  C
0AC20:  RLCF   x19,W
0AC22:  CLRF   03
0AC24:  ADDLW  BE
0AC26:  MOVWF  FE9
0AC28:  MOVLW  0B
0AC2A:  ADDWFC 03,W
0AC2C:  MOVWF  FEA
0AC2E:  CLRF   FEC
0AC30:  MOVF   FED,F
0AC32:  CLRF   FEF
....................       if(FaultNCNO[i] ==NO)
0AC34:  MOVFF  C19,C2C
0AC38:  MOVLW  0C
0AC3A:  MOVWF  x2E
0AC3C:  MOVLW  12
0AC3E:  MOVWF  x2D
0AC40:  MOVLB  0
0AC42:  CALL   1F84
0AC46:  MOVF   01,W
0AC48:  ANDLW  01
0AC4A:  SUBLW  01
0AC4C:  BNZ   ACE6
....................       {
....................          switch(i)
0AC4E:  MOVLW  01
0AC50:  MOVLB  C
0AC52:  SUBWF  x19,W
0AC54:  ADDLW  F0
0AC56:  BC    ACE2
0AC58:  ADDLW  10
0AC5A:  MOVLB  0
0AC5C:  GOTO   AF98
....................          {
....................             case 1:
....................                Inputt.B1 = 1; 
0AC60:  MOVLB  B
0AC62:  BSF    x9A.0
....................             break;
0AC64:  MOVLB  C
0AC66:  BRA    ACE2
....................             case 2:
....................                Inputt.B2 = 1; 
0AC68:  MOVLB  B
0AC6A:  BSF    x9A.1
....................             break;
0AC6C:  MOVLB  C
0AC6E:  BRA    ACE2
....................             case 3:
....................                Inputt.B3 = 1; 
0AC70:  MOVLB  B
0AC72:  BSF    x9A.2
....................             break;
0AC74:  MOVLB  C
0AC76:  BRA    ACE2
....................             case 4:
....................                Inputt.B4 = 1; 
0AC78:  MOVLB  B
0AC7A:  BSF    x9A.3
....................             break;
0AC7C:  MOVLB  C
0AC7E:  BRA    ACE2
....................             case 5:
....................                Inputt.B5 = 1; 
0AC80:  MOVLB  B
0AC82:  BSF    x9A.4
....................             break;
0AC84:  MOVLB  C
0AC86:  BRA    ACE2
....................             case 6:
....................                Inputt.B6 = 1; 
0AC88:  MOVLB  B
0AC8A:  BSF    x9A.5
....................             break;
0AC8C:  MOVLB  C
0AC8E:  BRA    ACE2
....................             case 7:
....................                Inputt.B7 = 1; 
0AC90:  MOVLB  B
0AC92:  BSF    x9A.6
....................              break;
0AC94:  MOVLB  C
0AC96:  BRA    ACE2
....................              case 8:
....................                Inputt.B8 = 1; 
0AC98:  MOVLB  B
0AC9A:  BSF    x9A.7
....................             break;
0AC9C:  MOVLB  C
0AC9E:  BRA    ACE2
....................             case 9:
....................                Inputt.B9 = 1; 
0ACA0:  MOVLB  B
0ACA2:  BSF    x9B.0
....................             break;
0ACA4:  MOVLB  C
0ACA6:  BRA    ACE2
....................             case 10:
....................                Inputt.B10 = 1; 
0ACA8:  MOVLB  B
0ACAA:  BSF    x9B.1
....................             break;
0ACAC:  MOVLB  C
0ACAE:  BRA    ACE2
....................             case 11:
....................                Inputt.B11 = 1; 
0ACB0:  MOVLB  B
0ACB2:  BSF    x9B.2
....................             break;
0ACB4:  MOVLB  C
0ACB6:  BRA    ACE2
....................             case 12:
....................                Inputt.B12 = 1; 
0ACB8:  MOVLB  B
0ACBA:  BSF    x9B.3
....................             break;
0ACBC:  MOVLB  C
0ACBE:  BRA    ACE2
....................             case 13:
....................                Inputt.B13 = 1; 
0ACC0:  MOVLB  B
0ACC2:  BSF    x9B.4
....................             break;
0ACC4:  MOVLB  C
0ACC6:  BRA    ACE2
....................             case 14:
....................                Inputt.B14 = 1; 
0ACC8:  MOVLB  B
0ACCA:  BSF    x9B.5
....................             break;
0ACCC:  MOVLB  C
0ACCE:  BRA    ACE2
....................             case 15:
....................                Inputt.B15 = 1; 
0ACD0:  MOVLB  B
0ACD2:  BSF    x9B.6
....................             break;
0ACD4:  MOVLB  C
0ACD6:  BRA    ACE2
....................             case 16:
....................                 Inputt.B16 = 1;
0ACD8:  MOVLB  B
0ACDA:  BSF    x9B.7
....................              break;
0ACDC:  MOVLB  C
0ACDE:  BRA    ACE2
0ACE0:  MOVLB  C
....................                        
....................          }                 
....................       }
0ACE2:  BRA    AD7A
0ACE4:  MOVLB  0
....................       else
....................       {
....................          switch(i)
0ACE6:  MOVLW  01
0ACE8:  MOVLB  C
0ACEA:  SUBWF  x19,W
0ACEC:  ADDLW  F0
0ACEE:  BC    AD7A
0ACF0:  ADDLW  10
0ACF2:  MOVLB  0
0ACF4:  GOTO   AFD2
....................          {
....................             case 1:
....................                Inputt.B1 = 0; 
0ACF8:  MOVLB  B
0ACFA:  BCF    x9A.0
....................             break;
0ACFC:  MOVLB  C
0ACFE:  BRA    AD7A
....................             case 2:
....................                Inputt.B2 = 0; 
0AD00:  MOVLB  B
0AD02:  BCF    x9A.1
....................             break;
0AD04:  MOVLB  C
0AD06:  BRA    AD7A
....................             case 3:
....................                Inputt.B3 = 0; 
0AD08:  MOVLB  B
0AD0A:  BCF    x9A.2
....................             break;
0AD0C:  MOVLB  C
0AD0E:  BRA    AD7A
....................             case 4:
....................                Inputt.B4 = 0; 
0AD10:  MOVLB  B
0AD12:  BCF    x9A.3
....................             break;
0AD14:  MOVLB  C
0AD16:  BRA    AD7A
....................             case 5:
....................                Inputt.B5 = 0; 
0AD18:  MOVLB  B
0AD1A:  BCF    x9A.4
....................             break;
0AD1C:  MOVLB  C
0AD1E:  BRA    AD7A
....................             case 6:
....................                Inputt.B6 = 0; 
0AD20:  MOVLB  B
0AD22:  BCF    x9A.5
....................             break;
0AD24:  MOVLB  C
0AD26:  BRA    AD7A
....................             case 7:
....................                Inputt.B7 = 0; 
0AD28:  MOVLB  B
0AD2A:  BCF    x9A.6
....................              break;
0AD2C:  MOVLB  C
0AD2E:  BRA    AD7A
....................              case 8:
....................                Inputt.B8 = 0; 
0AD30:  MOVLB  B
0AD32:  BCF    x9A.7
....................             break;
0AD34:  MOVLB  C
0AD36:  BRA    AD7A
....................             case 9:
....................                Inputt.B9 = 0; 
0AD38:  MOVLB  B
0AD3A:  BCF    x9B.0
....................             break;
0AD3C:  MOVLB  C
0AD3E:  BRA    AD7A
....................             case 10:
....................                Inputt.B10 = 0; 
0AD40:  MOVLB  B
0AD42:  BCF    x9B.1
....................             break;
0AD44:  MOVLB  C
0AD46:  BRA    AD7A
....................             case 11:
....................                Inputt.B11 = 0; 
0AD48:  MOVLB  B
0AD4A:  BCF    x9B.2
....................             break;
0AD4C:  MOVLB  C
0AD4E:  BRA    AD7A
....................             case 12:
....................                Inputt.B12 = 0; 
0AD50:  MOVLB  B
0AD52:  BCF    x9B.3
....................             break;
0AD54:  MOVLB  C
0AD56:  BRA    AD7A
....................             case 13:
....................                Inputt.B13 = 0; 
0AD58:  MOVLB  B
0AD5A:  BCF    x9B.4
....................             break;
0AD5C:  MOVLB  C
0AD5E:  BRA    AD7A
....................             case 14:
....................                Inputt.B14 = 0; 
0AD60:  MOVLB  B
0AD62:  BCF    x9B.5
....................             break;
0AD64:  MOVLB  C
0AD66:  BRA    AD7A
....................             case 15:
....................                Inputt.B15 = 0; 
0AD68:  MOVLB  B
0AD6A:  BCF    x9B.6
....................             break;
0AD6C:  MOVLB  C
0AD6E:  BRA    AD7A
....................             case 16:
....................                 Inputt.B16 = 0;
0AD70:  MOVLB  B
0AD72:  BCF    x9B.7
....................              break;
0AD74:  MOVLB  C
0AD76:  BRA    AD7A
0AD78:  MOVLB  C
....................                        
....................          }                 
....................       }
0AD7A:  INCF   x19,F
0AD7C:  BRA    ABEA
....................       
....................    }
.................... 
....................   //GSM SIM900 Init
....................    delay_ms(1000);
0AD7E:  MOVLW  04
0AD80:  MOVWF  x1B
0AD82:  MOVLW  FA
0AD84:  MOVWF  x24
0AD86:  MOVLB  0
0AD88:  CALL   0952
0AD8C:  MOVLB  C
0AD8E:  DECFSZ x1B,F
0AD90:  BRA    AD82
....................    fprintf(CH2,"AT+CMGF=1"); 
0AD92:  MOVLW  48
0AD94:  MOVWF  FF6
0AD96:  MOVLW  09
0AD98:  MOVWF  FF7
0AD9A:  MOVLB  0
0AD9C:  CALL   2ED0
....................    putc('\n',CH2);
0ADA0:  MOVLW  0A
0ADA2:  MOVLB  C
0ADA4:  MOVWF  x25
0ADA6:  MOVLB  0
0ADA8:  CALL   2E8A
....................    delay_ms(50);
0ADAC:  MOVLW  32
0ADAE:  MOVLB  C
0ADB0:  MOVWF  x24
0ADB2:  MOVLB  0
0ADB4:  CALL   0952
....................    
....................    SendSMS.B1 =0;
0ADB8:  MOVLB  B
0ADBA:  BCF    xB6.0
....................    SendSMS.B2 =0;
0ADBC:  BCF    xB6.1
....................    SendSMS.B3 =0;
0ADBE:  BCF    xB6.2
....................    SendSMS.B4 =0;
0ADC0:  BCF    xB6.3
....................    SendSMS.B5 =0;
0ADC2:  BCF    xB6.4
....................    SendSMS.B6 =0;
0ADC4:  BCF    xB6.5
....................    SendSMS.B7 =0;
0ADC6:  BCF    xB6.6
....................    SendSMS.B8 =0;
0ADC8:  BCF    xB6.7
....................    SendSMS.B9 =0;
0ADCA:  BCF    xB7.0
....................    SendSMS.B10 =0;
0ADCC:  BCF    xB7.1
....................    SendSMS.B11 =0;
0ADCE:  BCF    xB7.2
....................    SendSMS.B12 =0;
0ADD0:  BCF    xB7.3
....................    SendSMS.B13 =0;
0ADD2:  BCF    xB7.4
....................    SendSMS.B14 =0;
0ADD4:  BCF    xB7.5
....................    SendSMS.B15 =0;
0ADD6:  BCF    xB7.6
....................    SendSMS.B16 =0;
0ADD8:  BCF    xB7.7
....................    
....................    char m;
....................    for(m=0; m<10; m++)
0ADDA:  MOVLB  C
0ADDC:  CLRF   x1A
0ADDE:  MOVF   x1A,W
0ADE0:  SUBLW  09
0ADE2:  BNC   AE16
....................    {
....................       sms_phonenumber[m] = read_eeprom(0x32 + m);
0ADE4:  CLRF   03
0ADE6:  MOVF   x1A,W
0ADE8:  ADDLW  8B
0ADEA:  MOVWF  FE9
0ADEC:  MOVLW  09
0ADEE:  ADDWFC 03,W
0ADF0:  MOVWF  FEA
0ADF2:  MOVLW  32
0ADF4:  ADDWF  x1A,W
0ADF6:  MOVWF  x1D
0ADF8:  MOVFF  FF2,C1E
0ADFC:  BCF    FF2.7
0ADFE:  CLRF   FAA
0AE00:  MOVFF  C1D,FA9
0AE04:  BCF    FA6.6
0AE06:  BCF    FA6.7
0AE08:  BSF    FA6.0
0AE0A:  MOVF   FA8,W
0AE0C:  BTFSC  x1E.7
0AE0E:  BSF    FF2.7
0AE10:  MOVWF  FEF
0AE12:  INCF   x1A,F
0AE14:  BRA    ADDE
....................    }
....................    sms_phonenumber[m] = '\0' ; // end string
0AE16:  CLRF   03
0AE18:  MOVF   x1A,W
0AE1A:  ADDLW  8B
0AE1C:  MOVWF  FE9
0AE1E:  MOVLW  09
0AE20:  ADDWFC 03,W
0AE22:  MOVWF  FEA
0AE24:  CLRF   FEF
....................    delay_ms(500);
0AE26:  MOVLW  02
0AE28:  MOVWF  x1B
0AE2A:  MOVLW  FA
0AE2C:  MOVWF  x24
0AE2E:  MOVLB  0
0AE30:  CALL   0952
0AE34:  MOVLB  C
0AE36:  DECFSZ x1B,F
0AE38:  BRA    AE2A
....................  
....................    while(TRUE)
....................    {
.................... 
....................       
....................       restart_wdt();
0AE3A:  CLRWDT
.................... 
....................       if(recieve_completed == 1)
0AE3C:  BTFSS  30.5
0AE3E:  BRA    AE4A
....................       {
....................          Modbus_Function();
0AE40:  MOVLB  0
0AE42:  GOTO   36AC
....................          recieve_completed = 0;
0AE46:  BCF    30.5
0AE48:  MOVLB  C
....................       }
....................       
....................       check_ack();
0AE4A:  MOVLB  0
0AE4C:  CALL   329C
....................       check_reset();
0AE50:  CALL   33EA
....................       check_test();
0AE54:  GOTO   A478
....................       
....................       restart_wdt();
0AE58:  CLRWDT
....................       
....................       Read_input(); restart_wdt();// Must be first
0AE5A:  CALL   207C
0AE5E:  CLRWDT
....................       Anal_Function(); restart_wdt();
0AE60:  CALL   6C70
0AE64:  CLRWDT
....................       Send_Ouput(); restart_wdt();
0AE66:  CALL   2AE0
0AE6A:  CLRWDT
....................       
....................       //Driver595(); restart_wdt();
....................       output_toggle(PIN_A0);
0AE6C:  BCF    F92.0
0AE6E:  BTG    F89.0
....................       
....................       
....................       if(RefreshConfigData)
0AE70:  BTFSS  30.4
0AE72:  BRA    AF5E
....................       {
....................          RefreshConfigData =0;
0AE74:  BCF    30.4
....................          //Read_Config();
....................          //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................   
....................          IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
0AE76:  MOVLB  C
0AE78:  CLRF   x1B
0AE7A:  SETF   x1C
0AE7C:  MOVLB  0
0AE7E:  CALL   0A4A
....................          IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
0AE82:  MOVLB  C
0AE84:  CLRF   x1B
0AE86:  SETF   x1C
0AE88:  MOVLB  0
0AE8A:  CALL   0A5C
....................          IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
0AE8E:  MOVLW  02
0AE90:  MOVLB  C
0AE92:  MOVWF  x1B
0AE94:  SETF   x1C
0AE96:  MOVLB  0
0AE98:  CALL   0A4A
....................          IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input 
0AE9C:  MOVLW  02
0AE9E:  MOVLB  C
0AEA0:  MOVWF  x1B
0AEA2:  SETF   x1C
0AEA4:  MOVLB  0
0AEA6:  CALL   0A5C
....................          //  jj
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
0AEAA:  MOVLB  C
0AEAC:  CLRF   x25
0AEAE:  MOVLW  06
0AEB0:  MOVWF  x26
0AEB2:  SETF   x27
0AEB4:  MOVLB  0
0AEB6:  CALL   0982
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
0AEBA:  MOVLB  C
0AEBC:  CLRF   x25
0AEBE:  MOVLW  16
0AEC0:  MOVWF  x26
0AEC2:  SETF   x27
0AEC4:  MOVLB  0
0AEC6:  CALL   0982
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
0AECA:  MOVLW  02
0AECC:  MOVLB  C
0AECE:  MOVWF  x25
0AED0:  MOVLW  06
0AED2:  MOVWF  x26
0AED4:  SETF   x27
0AED6:  MOVLB  0
0AED8:  CALL   0982
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
0AEDC:  MOVLW  02
0AEDE:  MOVLB  C
0AEE0:  MOVWF  x25
0AEE2:  MOVLW  16
0AEE4:  MOVWF  x26
0AEE6:  SETF   x27
0AEE8:  MOVLB  0
0AEEA:  CALL   0982
....................          //  jj
....................          IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
0AEEE:  MOVLW  04
0AEF0:  MOVLB  C
0AEF2:  MOVWF  x1B
0AEF4:  CLRF   x1C
0AEF6:  MOVLB  0
0AEF8:  CALL   0A4A
....................          IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
0AEFC:  MOVLW  04
0AEFE:  MOVLB  C
0AF00:  MOVWF  x1B
0AF02:  CLRF   x1C
0AF04:  MOVLB  0
0AF06:  CALL   0A5C
....................          IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
0AF0A:  MOVLW  06
0AF0C:  MOVLB  C
0AF0E:  MOVWF  x1B
0AF10:  CLRF   x1C
0AF12:  MOVLB  0
0AF14:  CALL   0A4A
....................          IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
0AF18:  MOVLW  06
0AF1A:  MOVLB  C
0AF1C:  MOVWF  x1B
0AF1E:  CLRF   x1C
0AF20:  MOVLB  0
0AF22:  CALL   0A5C
....................          IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
0AF26:  MOVLW  08
0AF28:  MOVLB  C
0AF2A:  MOVWF  x1B
0AF2C:  CLRF   x1C
0AF2E:  MOVLB  0
0AF30:  CALL   0A4A
....................          IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
0AF34:  MOVLW  08
0AF36:  MOVLB  C
0AF38:  MOVWF  x1B
0AF3A:  CLRF   x1C
0AF3C:  MOVLB  0
0AF3E:  CALL   0A5C
....................          IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0AF42:  MOVLW  0A
0AF44:  MOVLB  C
0AF46:  MOVWF  x1B
0AF48:  CLRF   x1C
0AF4A:  MOVLB  0
0AF4C:  CALL   0A4A
....................          IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
0AF50:  MOVLW  0A
0AF52:  MOVLB  C
0AF54:  MOVWF  x1B
0AF56:  CLRF   x1C
0AF58:  MOVLB  0
0AF5A:  CALL   0A5C
....................          
....................         
....................       }
....................       
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
0AF5E:  MOVLB  C
0AF60:  CLRF   x23
0AF62:  SETF   x24
0AF64:  MOVLB  0
0AF66:  CALL   2AB4
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
0AF6A:  MOVLB  C
0AF6C:  CLRF   x23
0AF6E:  SETF   x24
0AF70:  MOVLB  0
0AF72:  CALL   2ACA
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
0AF76:  MOVLW  02
0AF78:  MOVLB  C
0AF7A:  MOVWF  x23
0AF7C:  SETF   x24
0AF7E:  MOVLB  0
0AF80:  CALL   2AB4
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
0AF84:  MOVLW  02
0AF86:  MOVLB  C
0AF88:  MOVWF  x23
0AF8A:  SETF   x24
0AF8C:  MOVLB  0
0AF8E:  CALL   2ACA
0AF92:  MOVLB  C
0AF94:  BRA    AE3A
....................       
....................    }
....................    
.................... }
0AF96:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
