CCS PCH C Compiler, Version 5.091, 5967               28-¡.Â.-21 16:46

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_16 - Delay - SP - SMD - SMS\ESPAN-04.lst

               ROM used:   38496 bytes (59%)
                           Largest free fragment is 27036
               RAM used:   3256 (84%) at main() level
                           3277 (84%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   8C06
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.1
00056:  GOTO   0060
0005A:  BTFSC  F9E.1
0005C:  GOTO   05AA
00060:  BTFSS  F9D.5
00062:  GOTO   006C
00066:  BTFSC  F9E.5
00068:  GOTO   059A
0006C:  MOVFF  0E,00
00070:  MOVFF  0F,01
00074:  MOVFF  10,02
00078:  MOVFF  11,03
0007C:  MOVFF  0C,FE9
00080:  MOVFF  07,FEA
00084:  BSF    07.7
00086:  MOVFF  08,FE1
0008A:  MOVFF  09,FE2
0008E:  MOVFF  0A,FD9
00092:  MOVFF  0B,FDA
00096:  MOVFF  12,FF3
0009A:  MOVFF  13,FF4
0009E:  MOVFF  14,FFA
000A2:  MOVFF  15,FF5
000A6:  MOVFF  16,FF6
000AA:  MOVFF  17,FF7
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - SMS\string.h"
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STRING
.................... #define _STRING
.................... #include <stddef.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDDEF
.................... 
.................... #define _STDDEF
.................... 
.................... #if sizeof(unsigned int8 *)==1
.................... #define ptrdiff_t unsigned int8
.................... #else
.................... #define ptrdiff_t unsigned int16
.................... #endif
.................... 
.................... #if defined(__PCB__) || defined(__PCM__)
.................... #define size_t unsigned int8
.................... #else
.................... #define size_t unsigned int16
.................... #endif
.................... #define wchar_t unsigned char
.................... #define NULL 0
.................... 
.................... #define offsetof(s,f) (offsetofbit(s,f)/8)
.................... 
.................... #endif
.................... 
.................... #include <ctype.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _CTYPE
.................... #define _CTYPE
.................... 
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
.................... #define isdigit(x)  isamong(x,"0123456789")
.................... #define isspace(x)  ((x)==' ')
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef")
.................... #define iscntrl(x)  ((x)<' ')
.................... #define isprint(x)  ((x)>=' ')
.................... #define isgraph(x)  ((x)>' ')
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x))
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //////////////////////////////////////////////
.................... //// Uncomment the following define to    ////
.................... //// allow some functions to use a        ////
.................... //// quicker algorithm, but use more ROM  ////
.................... ////                                      ////
.................... //// #define FASTER_BUT_MORE_ROM          ////
.................... //////////////////////////////////////////////
.................... 
.................... #device PIC18F26K22 
000BA:  CLRF   FF7
000BC:  ADDLW  CA
000BE:  MOVWF  FF6
000C0:  MOVLW  00
000C2:  ADDWFC FF7,F
000C4:  TBLRD*+
000C6:  MOVF   FF5,W
000C8:  RETURN 0
000CA:  DATA 00,C1
000CC:  DATA 81,40
000CE:  DATA 01,C0
000D0:  DATA 80,41
000D2:  DATA 01,C0
000D4:  DATA 80,41
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 00,C1
000E0:  DATA 81,40
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 01,C0
000EC:  DATA 80,41
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 00,C1
000F4:  DATA 81,40
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 01,C0
00100:  DATA 80,41
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 00,C1
00110:  DATA 81,40
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 01,C0
00120:  DATA 80,41
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 00,C1
0012C:  DATA 81,40
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 01,C0
00134:  DATA 80,41
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 00,C1
00140:  DATA 81,40
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 01,C0
0014C:  DATA 80,41
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 00,C1
00154:  DATA 81,40
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 01,C0
00160:  DATA 80,41
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 00,C1
0016C:  DATA 81,40
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 01,C0
00174:  DATA 80,41
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 00,C1
00180:  DATA 81,40
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 01,C0
00190:  DATA 80,41
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 00,C1
001A0:  DATA 81,40
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 01,C0
001AC:  DATA 80,41
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 00,C1
001B4:  DATA 81,40
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 01,C0
001C0:  DATA 80,41
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  CLRF   FF7
001CC:  ADDLW  DA
001CE:  MOVWF  FF6
001D0:  MOVLW  01
001D2:  ADDWFC FF7,F
001D4:  TBLRD*+
001D6:  MOVF   FF5,W
001D8:  RETURN 0
001DA:  DATA 00,C0
001DC:  DATA C1,01
001DE:  DATA C3,03
001E0:  DATA 02,C2
001E2:  DATA C6,06
001E4:  DATA 07,C7
001E6:  DATA 05,C5
001E8:  DATA C4,04
001EA:  DATA CC,0C
001EC:  DATA 0D,CD
001EE:  DATA 0F,CF
001F0:  DATA CE,0E
001F2:  DATA 0A,CA
001F4:  DATA CB,0B
001F6:  DATA C9,09
001F8:  DATA 08,C8
001FA:  DATA D8,18
001FC:  DATA 19,D9
001FE:  DATA 1B,DB
00200:  DATA DA,1A
00202:  DATA 1E,DE
00204:  DATA DF,1F
00206:  DATA DD,1D
00208:  DATA 1C,DC
0020A:  DATA 14,D4
0020C:  DATA D5,15
0020E:  DATA D7,17
00210:  DATA 16,D6
00212:  DATA D2,12
00214:  DATA 13,D3
00216:  DATA 11,D1
00218:  DATA D0,10
0021A:  DATA F0,30
0021C:  DATA 31,F1
0021E:  DATA 33,F3
00220:  DATA F2,32
00222:  DATA 36,F6
00224:  DATA F7,37
00226:  DATA F5,35
00228:  DATA 34,F4
0022A:  DATA 3C,FC
0022C:  DATA FD,3D
0022E:  DATA FF,3F
00230:  DATA 3E,FE
00232:  DATA FA,3A
00234:  DATA 3B,FB
00236:  DATA 39,F9
00238:  DATA F8,38
0023A:  DATA 28,E8
0023C:  DATA E9,29
0023E:  DATA EB,2B
00240:  DATA 2A,EA
00242:  DATA EE,2E
00244:  DATA 2F,EF
00246:  DATA 2D,ED
00248:  DATA EC,2C
0024A:  DATA E4,24
0024C:  DATA 25,E5
0024E:  DATA 27,E7
00250:  DATA E6,26
00252:  DATA 22,E2
00254:  DATA E3,23
00256:  DATA E1,21
00258:  DATA 20,E0
0025A:  DATA A0,60
0025C:  DATA 61,A1
0025E:  DATA 63,A3
00260:  DATA A2,62
00262:  DATA 66,A6
00264:  DATA A7,67
00266:  DATA A5,65
00268:  DATA 64,A4
0026A:  DATA 6C,AC
0026C:  DATA AD,6D
0026E:  DATA AF,6F
00270:  DATA 6E,AE
00272:  DATA AA,6A
00274:  DATA 6B,AB
00276:  DATA 69,A9
00278:  DATA A8,68
0027A:  DATA 78,B8
0027C:  DATA B9,79
0027E:  DATA BB,7B
00280:  DATA 7A,BA
00282:  DATA BE,7E
00284:  DATA 7F,BF
00286:  DATA 7D,BD
00288:  DATA BC,7C
0028A:  DATA B4,74
0028C:  DATA 75,B5
0028E:  DATA 77,B7
00290:  DATA B6,76
00292:  DATA 72,B2
00294:  DATA B3,73
00296:  DATA B1,71
00298:  DATA 70,B0
0029A:  DATA 50,90
0029C:  DATA 91,51
0029E:  DATA 93,53
002A0:  DATA 52,92
002A2:  DATA 96,56
002A4:  DATA 57,97
002A6:  DATA 55,95
002A8:  DATA 94,54
002AA:  DATA 9C,5C
002AC:  DATA 5D,9D
002AE:  DATA 5F,9F
002B0:  DATA 9E,5E
002B2:  DATA 5A,9A
002B4:  DATA 9B,5B
002B6:  DATA 99,59
002B8:  DATA 58,98
002BA:  DATA 88,48
002BC:  DATA 49,89
002BE:  DATA 4B,8B
002C0:  DATA 8A,4A
002C2:  DATA 4E,8E
002C4:  DATA 8F,4F
002C6:  DATA 8D,4D
002C8:  DATA 4C,8C
002CA:  DATA 44,84
002CC:  DATA 85,45
002CE:  DATA 87,47
002D0:  DATA 46,86
002D2:  DATA 82,42
002D4:  DATA 43,83
002D6:  DATA 41,81
002D8:  DATA 80,40
002DA:  DATA 41,54
002DC:  DATA 2B,43
002DE:  DATA 4D,47
002E0:  DATA 46,3D
002E2:  DATA 31,00
002E4:  DATA 41,54
002E6:  DATA 2B,43
002E8:  DATA 4D,47
002EA:  DATA 53,3D
002EC:  DATA 22,00
*
0064E:  DATA 41,54
00650:  DATA 2B,43
00652:  DATA 4D,47
00654:  DATA 46,3D
00656:  DATA 31,00
*
01B7A:  MOVLB  C
01B7C:  MOVF   xC5,W
01B7E:  ANDLW  07
01B80:  MOVWF  00
01B82:  RRCF   xC5,W
01B84:  MOVWF  01
01B86:  RRCF   01,F
01B88:  RRCF   01,F
01B8A:  MOVLW  1F
01B8C:  ANDWF  01,F
01B8E:  MOVF   01,W
01B90:  ADDWF  xC6,W
01B92:  MOVWF  FE9
01B94:  MOVLW  00
01B96:  ADDWFC xC7,W
01B98:  MOVWF  FEA
01B9A:  MOVFF  FEF,01
01B9E:  INCF   00,F
01BA0:  BRA    1BA4
01BA2:  RRCF   01,F
01BA4:  DECFSZ 00,F
01BA6:  BRA    1BA2
01BA8:  MOVLW  01
01BAA:  ANDWF  01,F
01BAC:  MOVLB  0
01BAE:  RETURN 0
01BB0:  MOVLB  C
01BB2:  MOVF   xC6,W
01BB4:  MULWF  xC8
01BB6:  MOVFF  FF3,01
01BBA:  MOVFF  FF4,00
01BBE:  MULWF  xC9
01BC0:  MOVF   FF3,W
01BC2:  ADDWF  00,F
01BC4:  MOVF   xC7,W
01BC6:  MULWF  xC8
01BC8:  MOVF   FF3,W
01BCA:  ADDWFC 00,W
01BCC:  MOVWF  02
01BCE:  MOVLB  0
01BD0:  RETURN 0
01BD2:  MOVLB  C
01BD4:  MOVF   xC5,W
01BD6:  ANDLW  07
01BD8:  MOVWF  00
01BDA:  RRCF   xC5,W
01BDC:  MOVWF  01
01BDE:  RRCF   01,F
01BE0:  RRCF   01,F
01BE2:  MOVLW  1F
01BE4:  ANDWF  01,F
01BE6:  MOVF   01,W
01BE8:  ADDWF  xC7,W
01BEA:  MOVWF  FE9
01BEC:  MOVLW  00
01BEE:  ADDWFC xC8,W
01BF0:  MOVWF  FEA
01BF2:  CLRF   01
01BF4:  INCF   01,F
01BF6:  INCF   00,F
01BF8:  BRA    1BFC
01BFA:  RLCF   01,F
01BFC:  DECFSZ 00,F
01BFE:  BRA    1BFA
01C00:  MOVF   xC6,F
01C02:  BZ    1C0A
01C04:  MOVF   01,W
01C06:  IORWF  FEF,F
01C08:  BRA    1C10
01C0A:  COMF   01,F
01C0C:  MOVF   01,W
01C0E:  ANDWF  FEF,F
01C10:  MOVLB  0
01C12:  RETURN 0
*
024E0:  ADDWF  FE8,W
024E2:  CLRF   FF7
024E4:  RLCF   FF7,F
024E6:  ADDLW  FB
024E8:  MOVWF  FF6
024EA:  MOVLW  24
024EC:  ADDWFC FF7,F
024EE:  TBLRD*-
024F0:  MOVF   FF5,W
024F2:  MOVWF  FFA
024F4:  TBLRD*
024F6:  MOVF   FF5,W
024F8:  MOVWF  FF9
024FA:  DATA F0,1E
024FC:  DATA F6,1E
024FE:  DATA FC,1E
02500:  DATA 02,1F
02502:  DATA 08,1F
02504:  DATA 0E,1F
02506:  DATA 14,1F
02508:  DATA 1A,1F
0250A:  DATA 20,1F
0250C:  DATA 26,1F
0250E:  DATA 2C,1F
02510:  DATA 32,1F
02512:  DATA 38,1F
02514:  DATA 3E,1F
02516:  DATA 44,1F
02518:  DATA 4A,1F
0251A:  ADDWF  FE8,W
0251C:  CLRF   FF7
0251E:  RLCF   FF7,F
02520:  ADDLW  35
02522:  MOVWF  FF6
02524:  MOVLW  25
02526:  ADDWFC FF7,F
02528:  TBLRD*-
0252A:  MOVF   FF5,W
0252C:  MOVWF  FFA
0252E:  TBLRD*
02530:  MOVF   FF5,W
02532:  MOVWF  FF9
02534:  DATA 30,20
02536:  DATA 36,20
02538:  DATA 3C,20
0253A:  DATA 42,20
0253C:  DATA 48,20
0253E:  DATA 4E,20
02540:  DATA 54,20
02542:  DATA 5A,20
02544:  DATA 60,20
02546:  DATA 66,20
02548:  DATA 6C,20
0254A:  DATA 72,20
0254C:  DATA 78,20
0254E:  DATA 7E,20
02550:  DATA 84,20
02552:  DATA 8A,20
02554:  ADDWF  FE8,W
02556:  CLRF   FF7
02558:  RLCF   FF7,F
0255A:  ADDLW  6F
0255C:  MOVWF  FF6
0255E:  MOVLW  25
02560:  ADDWFC FF7,F
02562:  TBLRD*-
02564:  MOVF   FF5,W
02566:  MOVWF  FFA
02568:  TBLRD*
0256A:  MOVF   FF5,W
0256C:  MOVWF  FF9
0256E:  DATA A4,21
02570:  DATA AA,21
02572:  DATA B0,21
02574:  DATA B6,21
02576:  DATA BC,21
02578:  DATA C2,21
0257A:  DATA C8,21
0257C:  DATA CE,21
0257E:  DATA D4,21
02580:  DATA DA,21
02582:  DATA E0,21
02584:  DATA E6,21
02586:  DATA EC,21
02588:  DATA F2,21
0258A:  DATA F8,21
0258C:  DATA FE,21
0258E:  ADDWF  FE8,W
02590:  CLRF   FF7
02592:  RLCF   FF7,F
02594:  ADDLW  A9
02596:  MOVWF  FF6
02598:  MOVLW  25
0259A:  ADDWFC FF7,F
0259C:  TBLRD*-
0259E:  MOVF   FF5,W
025A0:  MOVWF  FFA
025A2:  TBLRD*
025A4:  MOVF   FF5,W
025A6:  MOVWF  FF9
025A8:  DATA E2,22
025AA:  DATA E8,22
025AC:  DATA EE,22
025AE:  DATA F4,22
025B0:  DATA FA,22
025B2:  DATA 00,23
025B4:  DATA 06,23
025B6:  DATA 0C,23
025B8:  DATA 12,23
025BA:  DATA 18,23
025BC:  DATA 1E,23
025BE:  DATA 24,23
025C0:  DATA 2A,23
025C2:  DATA 30,23
025C4:  DATA 36,23
025C6:  DATA 3C,23
*
029E2:  TBLRD*+
029E4:  MOVF   FF5,F
029E6:  BZ    2A00
029E8:  MOVFF  FF6,CB4
029EC:  MOVFF  FF7,CB5
029F0:  MOVFF  FF5,CB6
029F4:  RCALL  299C
029F6:  MOVFF  CB4,FF6
029FA:  MOVFF  CB5,FF7
029FE:  BRA    29E2
02A00:  RETURN 0
*
08B2A:  MOVF   FEF,F
08B2C:  BZ    8B4E
08B2E:  MOVFF  FEA,CB5
08B32:  MOVFF  FE9,CB4
08B36:  MOVFF  FEF,CB6
08B3A:  CALL   299C
08B3E:  MOVFF  CB5,FEA
08B42:  MOVFF  CB4,FE9
08B46:  INCF   FE9,F
08B48:  BTFSC  FD8.2
08B4A:  INCF   FEA,F
08B4C:  BRA    8B2A
08B4E:  RETURN 0
*
095F0:  ADDWF  FE8,W
095F2:  CLRF   FF7
095F4:  RLCF   FF7,F
095F6:  ADDLW  0B
095F8:  MOVWF  FF6
095FA:  MOVLW  96
095FC:  ADDWFC FF7,F
095FE:  TBLRD*-
09600:  MOVF   FF5,W
09602:  MOVWF  FFA
09604:  TBLRD*
09606:  MOVF   FF5,W
09608:  MOVWF  FF9
0960A:  DATA F0,92
0960C:  DATA F6,92
0960E:  DATA FC,92
09610:  DATA 02,93
09612:  DATA 08,93
09614:  DATA 0E,93
09616:  DATA 14,93
09618:  DATA 1A,93
0961A:  DATA 20,93
0961C:  DATA 26,93
0961E:  DATA 2C,93
09620:  DATA 32,93
09622:  DATA 38,93
09624:  DATA 3E,93
09626:  DATA 44,93
09628:  DATA 4A,93
0962A:  ADDWF  FE8,W
0962C:  CLRF   FF7
0962E:  RLCF   FF7,F
09630:  ADDLW  45
09632:  MOVWF  FF6
09634:  MOVLW  96
09636:  ADDWFC FF7,F
09638:  TBLRD*-
0963A:  MOVF   FF5,W
0963C:  MOVWF  FFA
0963E:  TBLRD*
09640:  MOVF   FF5,W
09642:  MOVWF  FF9
09644:  DATA 68,93
09646:  DATA 6E,93
09648:  DATA 74,93
0964A:  DATA 7A,93
0964C:  DATA 80,93
0964E:  DATA 86,93
09650:  DATA 8C,93
09652:  DATA 92,93
09654:  DATA 98,93
09656:  DATA 9E,93
09658:  DATA A4,93
0965A:  DATA AA,93
0965C:  DATA B0,93
0965E:  DATA B6,93
09660:  DATA BC,93
09662:  DATA C2,93
.................... 
.................... /*Copying functions*/
.................... /* standard template:
....................    void *memmove(void *s1, void *s2, size_t n).
....................    Copies max of n characters safely (not following ending '\0')
....................    from s2 in s1; if s2 has less than n characters, appends 0 */
.................... 
.................... unsigned char *memmove(void *s1,void *s2,size_t n)
.................... {
....................    unsigned char *sc1;
....................    unsigned char *sc2;
....................    sc1=s1;
....................    sc2=s2;
....................    if(sc2<sc1 && sc1 <sc2 +n)
....................       for(sc1+=n,sc2+=n;0<n;--n)
....................          *--sc1=*--sc2;
....................    else
....................       for(;0<n;--n)
....................          *sc1++=*sc2++;
....................   return s1;
....................   }
.................... 
.................... /* Standard template: char *strcpy(char *s1, const char *s2)
....................    copies the string s2 including the null character to s1.
....................    This is a compiler built in to handle the different address
....................    spaces */
.................... 
.................... #define strcopy strcpy
.................... 
.................... /* standard template:
....................    char *strncpy(char *s1, const char *s2, size_t n).
....................    Copies max of n characters (not following ending '\0')
....................    from s2 in s1; if s2 has less than n characters, appends 0 */
.................... 
.................... char *strncpy(char *s1, char *s2, size_t n)
.................... {
....................   char *s;
.................... 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--)
....................      *s++ = *s2++;
....................   for (; n > 0; n--)
....................      *s++ = '\0';
.................... 
....................   return(s1);
.................... }
.................... /***********************************************************/
.................... 
.................... /*concatenation functions*/
.................... /* standard template: char *strcat(char *s1, const char *s2)
.................... appends s2 to s1*/
.................... 
.................... char *strcat(char *s1, char *s2)
.................... {
....................    unsigned char *s;
.................... 
....................    for (s = s1; *s != '\0'; ++s);
*
05CF6:  MOVFF  CB5,CB9
05CFA:  MOVFF  CB4,CB8
05CFE:  MOVFF  CB9,FEA
05D02:  MOVLB  C
05D04:  MOVFF  CB8,FE9
05D08:  MOVF   FEF,F
05D0A:  BZ    5D18
05D0C:  INCF   xB8,F
05D0E:  BTFSC  FD8.2
05D10:  INCF   xB9,F
05D12:  MOVLB  0
05D14:  BRA    5CFE
05D16:  MOVLB  C
....................    while(*s2 != '\0')
05D18:  MOVFF  CB7,FEA
05D1C:  MOVFF  CB6,FE9
05D20:  MOVF   FEF,F
05D22:  BZ    5D4A
....................    {
....................       *s = *s2;
05D24:  MOVFF  CB7,FEA
05D28:  MOVFF  CB6,FE9
05D2C:  MOVFF  FEF,CBC
05D30:  MOVFF  CB9,FEA
05D34:  MOVFF  CB8,FE9
05D38:  MOVFF  CBC,FEF
....................       ++s;
05D3C:  INCF   xB8,F
05D3E:  BTFSC  FD8.2
05D40:  INCF   xB9,F
....................       ++s2;
05D42:  INCF   xB6,F
05D44:  BTFSC  FD8.2
05D46:  INCF   xB7,F
05D48:  BRA    5D18
....................    }
.................... 
....................    *s = '\0';
05D4A:  MOVFF  CB9,FEA
05D4E:  MOVFF  CB8,FE9
05D52:  CLRF   FEF
....................    return(s1);
05D54:  MOVFF  CB4,01
05D58:  MOVFF  CB5,02
05D5C:  MOVLB  0
05D5E:  RETURN 0
.................... }
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n)
.................... appends not more than n characters from s2 to s1*/
.................... 
.................... char *strncat(char *s1, char *s2, size_t n)
.................... {
....................    char *s;
.................... 
....................    for (s = s1; *s != '\0'; ++s);
....................    while(*s2 != '\0' && 0<n)
....................    {
....................       *s = *s2;
....................       ++s;
....................       ++s2;
....................       --n;
....................    }
.................... 
....................    *s = '\0';
....................    return(s1);
.................... }
.................... 
.................... /***********************************************************/
.................... 
.................... 
.................... /*comparison functions*/
.................... /* standard template: signed int memcmp(void *s1, void *s2).
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */
.................... 
.................... signed int memcmp(void * s1,void *s2,size_t n)
.................... {
.................... unsigned char *su1, *su2;
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n)
.................... {
....................    if(*su1!=*su2)
....................       return ((*su1<*su2)?-1:1);
.................... }
.................... return 0;
.................... }
.................... 
.................... /* standard template: int strcmp(const char *s1, const char *s2).
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */
.................... 
.................... signed int strcmp(char *s1, char *s2)
.................... {
....................    for (; *s1 == *s2; s1++, s2++)
*
08AB0:  MOVFF  CB5,FEA
08AB4:  MOVLB  C
08AB6:  MOVFF  CB4,FE9
08ABA:  MOVFF  FEF,CB8
08ABE:  MOVFF  CB7,FEA
08AC2:  MOVFF  CB6,FE9
08AC6:  MOVF   FEF,W
08AC8:  SUBWF  xB8,W
08ACA:  BNZ   8AFA
....................       if (*s1 == '\0')
08ACC:  MOVFF  CB5,03
08AD0:  MOVFF  CB4,FE9
08AD4:  MOVFF  03,FEA
08AD8:  MOVF   FEF,F
08ADA:  BNZ   8AE2
....................          return(0);
08ADC:  MOVLW  00
08ADE:  MOVWF  01
08AE0:  BRA    8B24
08AE2:  MOVFF  CB5,03
08AE6:  MOVF   xB4,W
08AE8:  INCF   xB4,F
08AEA:  BTFSC  FD8.2
08AEC:  INCF   xB5,F
08AEE:  INCF   xB6,F
08AF0:  BTFSC  FD8.2
08AF2:  INCF   xB7,F
08AF4:  MOVLB  0
08AF6:  BRA    8AB0
08AF8:  MOVLB  C
....................    return((*s1 < *s2) ? -1: 1);
08AFA:  MOVFF  CB5,03
08AFE:  MOVFF  CB4,FE9
08B02:  MOVFF  03,FEA
08B06:  MOVFF  FEF,CB8
08B0A:  MOVFF  CB7,03
08B0E:  MOVFF  CB6,FE9
08B12:  MOVFF  03,FEA
08B16:  MOVF   FEF,W
08B18:  SUBWF  xB8,W
08B1A:  BC    8B20
08B1C:  MOVLW  FF
08B1E:  BRA    8B22
08B20:  MOVLW  01
08B22:  MOVWF  01
08B24:  MOVLB  0
08B26:  GOTO   8B66 (RETURN)
.................... }
.................... /* standard template: int strcoll(const char *s1, const char *s2).
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */
.................... 
.................... signed int strcoll(char *s1, char *s2)
.................... {
....................    for (; *s1 == *s2; s1++, s2++)
....................       if (*s1 == '\0')
....................          return(0);
....................    return((*s1 < *s2) ? -1: 1);
.................... }
.................... 
.................... /* standard template:
....................    int strncmp(const char *s1, const char *s2, size_t n).
....................    Compares max of n characters (not following 0) from s1 to s2;
....................    returns same as strcmp */
.................... 
.................... signed int strncmp(char *s1, char *s2, size_t n)
.................... {
....................    for (; n > 0; s1++, s2++, n--)
....................       if (*s1 != *s2)
....................          return((*s1 <*s2) ? -1: 1);
....................       else if (*s1 == '\0')
....................          return(0);
....................    return(0);
.................... }
.................... /* standard template:
....................    int strxfrm(const char *s1, const char *s2, size_t n).
....................    transforms maximum of n characters from s2 and places them into s1, returns number of chars written ot s1.
....................    if s1 is NULL and n is 0, then it returns the length of s2.*/
.................... size_t strxfrm(char *s1, char *s2, size_t n)
.................... {
....................    char c;
....................    unsigned int8 n1;
....................    
....................    if (!s1 && !n)
....................       n = -1; //find length
.................... 
....................    n1 = 0;
....................    
....................    for (; n1 < n; n1++)
....................    {
....................       c = *s2++;
....................       if (!c)
....................          break;
....................       if (s1)
....................          *s1++ = c;
....................    }
.................... 
....................   return(n1);
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... /***********************************************************/
.................... /*Search functions*/
.................... /* standard template: void *memchr(const char *s, int c).
....................    Finds first occurrence of c in n characters of s */
.................... 
.................... char *memchr(void *s,unsigned int8 c,size_t n)
.................... {
....................    char uc;
....................    char *su;
....................    uc=c;
....................    for(su=s;0<n;++su,--n)
....................       if(*su==uc)
....................       return su;
....................    return NULL;
.................... }
.................... 
.................... /* standard template: char *strchr(const char *s, int c).
....................    Finds first occurrence of c in s */
.................... 
.................... char *strchr(char *s, char c)
.................... {
....................    for (; *s != c; s++)
....................       if (*s == '\0')
....................          return(0);
....................    return(s);
.................... }
.................... /* standard template:
....................    size_t strcspn(const char *s1, const char *s2).
....................    Computes length of max initial segment of s1 that
....................    consists entirely of characters NOT from s2*/
.................... 
.................... size_t strcspn(char *s1, char *s2)
.................... {
....................    char *sc1, *sc2;
.................... 
....................    for (sc1 = s1; *sc1 != 0; sc1++)
....................       for (sc2 = s2; *sc2 != 0; sc2++)
....................          if (*sc1 == *sc2)
....................             return(sc1 - s1);
....................    return(sc1 - s1);
.................... }
.................... /* standard template:
....................    char *strpbrk(const char *s1, const char *s2).
....................    Locates first occurence of any character from s2 in s1;
....................    returns s1 if s2 is empty string */
.................... 
.................... char *strpbrk(char *s1, char *s2)
.................... {
....................    char *sc1, *sc2;
.................... 
....................    for (sc1 = s1; *sc1 != 0; sc1++)
....................       for (sc2 = s2; *sc2 != 0; sc2++)
....................          if (*sc1 == *sc2)
....................             return(sc1);
....................    return(0);
.................... }
.................... 
.................... 
.................... /* standard template: char *strrchr(const char *s, int c).
....................    Finds last occurrence of c in s */
.................... 
.................... char *strrchr(char *s, char c)
.................... {
....................    char *p;
.................... 
....................    for (p = 0; ; s++)
....................    {
....................       if (*s == c)
....................          p = s;
....................       if (*s == '\0')
....................          return(p);
....................    }
.................... }
.................... /* computes length of max initial segment of s1 consisting
....................    entirely of characters from s2 */
.................... 
.................... size_t strspn(char *s1, char *s2)
.................... {
....................    char *sc1, *sc2;
.................... 
....................    for (sc1 = s1; *sc1 != 0; sc1++)
....................       for (sc2 = s2; ; sc2++)
....................     if (*sc2 == '\0')
....................        return(sc1 - s1);
....................          else if (*sc1 == *sc2)
....................             break;
....................    return(sc1 - s1);
.................... }
.................... /* standard template:
....................    char *strstr(const char *s1, const char *s2);
....................    Locates first occurence of character sequence s2 in s1;
....................    returns 0 if s2 is empty string
.................... 
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the
....................    file to use the faster algorithm */
.................... char *strstr(char *s1, char *s2)
.................... {
....................    char *s, *t;
.................... 
....................    #ifdef FASTER_BUT_MORE_ROM
....................    if (*s2 == '\0')
....................          return(s1);
....................    #endif
.................... 
....................    while (*s1)
....................    {
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t);
.................... 
....................       if (*t == '\0')
....................          return s1;
....................       ++s1;
....................       #ifdef FASTER_BUT_MORE_ROM
....................          while(*s1 != '\0' && *s1 != *s2)
....................             ++s1;
....................       #endif
....................    }
....................    return 0;
.................... }
.................... 
.................... /* standard template: size_t strlen(const char *s).
....................    Computes length of s1 (preceding terminating 0) */
.................... 
.................... size_t strlen(char *s)
.................... {
....................    char *sc;
.................... 
....................    for (sc = s; *sc != 0; sc++);
....................    return(sc - s);
.................... }
.................... 
.................... /* standard template: char *strtok(char *s1, const char *s2).
.................... 
....................    Finds next token in s1 delimited by a character from separator
....................    string s2 (which can be different from call to call).  First call
....................    starts at beginning of s1 searching for first character NOT
....................    contained in s2; returns 0 if none is found.
....................    If one is found, it is the start of first token (return value).
....................    Function then searches from there for a character contained in s2.
....................    If none is found, current token extends to end of s1, and subsequent
....................    searches for a token will return 0.  If one is found, it is
....................    overwritten by '\0', which terminates current token.  Function saves
....................    pointer to following character from which next search will start.
....................    Each subsequent call, with 0 as first argument, starts searching
....................    from saved pointer */
.................... 
.................... char *strtok(char *s1, char *s2)
.................... {
....................    char *beg, *end;
....................    static char *save;
.................... 
....................    beg = (s1)? s1: save;
....................    beg += strspn(beg, s2);
....................    if (*beg == '\0')
....................       return(0);
....................       
....................    end = strpbrk(beg, s2);
....................    if (end != '\0')
....................    {
....................       *end = '\0';
....................       end++;
....................       save = end;
....................    }
....................    else
....................       save = beg + strlen(beg);
....................    
....................    return(beg);
.................... }
.................... 
.................... /*****************************************************************/
.................... /*Miscellaneous functions*/
.................... /* standard template
.................... maps error number in errnum to an error message string
.................... Returns: Pointer to string
.................... */
.................... #ifdef _ERRNO
.................... char * strerror(unsigned int8 errnum)
.................... {
.................... static unsigned char s[13];
.................... switch( errnum)
.................... {
.................... case 0:
....................    strcpy(s,"no errors");
....................    return s;
.................... case EDOM :
....................    strcpy(s,"domain error");
....................    return s;
.................... case ERANGE:
....................    strcpy(s,"range error");
....................    return s;
.................... }
.................... }
.................... #ENDIF
.................... 
.................... /* standard template: size_t stricmp(const char *s1, const char *s2).
....................    Compares s1 to s2 ignoring case (upper vs. lower) */
.................... 
.................... signed int stricmp(char *s1, char *s2)
.................... {
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&((char)*s1==(char)*s2+(char)32||(char)*s2==(char)*s1+(char)32));
....................     s1++, s2++)
....................     if (*s1 == '\0')
....................        return(0);
....................  return((*s1 < *s2) ? -1: 1);
.................... }
.................... 
.................... 
.................... /* standard template: char *strlwr(char *s).
....................    Replaces uppercase letters by lowercase;
....................    returns pointer to new string s */
.................... 
.................... char *strlwr(char *s)
.................... {
....................    char *p;
.................... 
....................    for (p = s; *p != '\0'; p++)
....................       if (*p >= 'A' && *p <='Z')
....................          *p += 'a' - 'A';
....................    return(s);
.................... }
.................... 
.................... /* standard template: char *strupr(char *s).
....................    Replaces lowercase letters by upercase;
....................    returns pointer to new string s */
.................... 
.................... char *strupr(char *s)
.................... {
....................    char *p;
.................... 
....................    for (p = s; *p != '\0'; p++)
....................       if (*p >= 'a' && *p <='z')
....................          *p -= 'a' - 'A';
....................    return(s);
.................... }
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... 
.................... #endif
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#device icd = true
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
00658:  MOVLW  0C
0065A:  MOVWF  FEA
0065C:  MOVLW  BD
0065E:  MOVWF  FE9
00660:  MOVF   FEF,W
00662:  BZ    0686
00664:  MOVLW  05
00666:  MOVWF  01
00668:  MOVLW  BF
0066A:  MOVWF  00
0066C:  CLRWDT
0066E:  DECFSZ 00,F
00670:  BRA    066C
00672:  DECFSZ 01,F
00674:  BRA    0668
00676:  MOVLW  2E
00678:  MOVWF  00
0067A:  DECFSZ 00,F
0067C:  BRA    067A
0067E:  NOP   
00680:  CLRWDT
00682:  DECFSZ FEF,F
00684:  BRA    0664
00686:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR    0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP     0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW    0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL    0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
006BA:  BCF    F92.5
006BC:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
006BE:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
006C0:  MOVLB  C
006C2:  CLRF   xBE
006C4:  MOVLW  0A
006C6:  MOVWF  xBF
006C8:  MOVLW  AA
006CA:  MOVWF  xC0
006CC:  MOVLB  0
006CE:  RCALL  0688
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
006D0:  MOVLW  02
006D2:  MOVLB  C
006D4:  MOVWF  xBE
006D6:  MOVLW  0A
006D8:  MOVWF  xBF
006DA:  MOVLW  AA
006DC:  MOVWF  xC0
006DE:  MOVLB  0
006E0:  RCALL  0688
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
006E2:  MOVLW  04
006E4:  MOVLB  C
006E6:  MOVWF  xBE
006E8:  MOVLW  0A
006EA:  MOVWF  xBF
006EC:  MOVLW  AA
006EE:  MOVWF  xC0
006F0:  MOVLB  0
006F2:  RCALL  0688
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
006F4:  MOVLW  06
006F6:  MOVLB  C
006F8:  MOVWF  xBE
006FA:  MOVLW  0A
006FC:  MOVWF  xBF
006FE:  MOVLW  AA
00700:  MOVWF  xC0
00702:  MOVLB  0
00704:  RCALL  0688
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
00706:  MOVLW  08
00708:  MOVLB  C
0070A:  MOVWF  xBE
0070C:  MOVLW  0A
0070E:  MOVWF  xBF
00710:  MOVLW  AA
00712:  MOVWF  xC0
00714:  MOVLB  0
00716:  RCALL  0688
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
00718:  MOVLW  0A
0071A:  MOVLB  C
0071C:  MOVWF  xBE
0071E:  MOVWF  xBF
00720:  MOVLW  AA
00722:  MOVWF  xC0
00724:  MOVLB  0
00726:  RCALL  0688
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
00728:  MOVLW  0C
0072A:  MOVLB  C
0072C:  MOVWF  xBE
0072E:  MOVLW  0A
00730:  MOVWF  xBF
00732:  MOVLW  AA
00734:  MOVWF  xC0
00736:  MOVLB  0
00738:  RCALL  0688
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
0073A:  MOVLW  0E
0073C:  MOVLB  C
0073E:  MOVWF  xBE
00740:  MOVLW  0A
00742:  MOVWF  xBF
00744:  MOVLW  AA
00746:  MOVWF  xC0
00748:  MOVLB  0
0074A:  RCALL  0688
....................    #endif
0074C:  GOTO   8D06 (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
00688:  BCF    F92.5
0068A:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
0068C:  MOVLB  C
0068E:  MOVF   xBE,W
00690:  IORLW  40
00692:  MOVWF  xC1
00694:  MOVF   FC9,W
00696:  MOVFF  CC1,FC9
0069A:  RRCF   FC7,W
0069C:  BNC   069A
....................    #endif
....................    
....................    spi_write(reg);
0069E:  MOVF   FC9,W
006A0:  MOVFF  CBF,FC9
006A4:  RRCF   FC7,W
006A6:  BNC   06A4
....................    spi_write(data);
006A8:  MOVF   FC9,W
006AA:  MOVFF  CC0,FC9
006AE:  RRCF   FC7,W
006B0:  BNC   06AE
....................    
....................    output_high(IO_CS_PIN);
006B2:  BCF    F92.5
006B4:  BSF    F89.5
006B6:  MOVLB  0
006B8:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
01B0A:  BCF    F92.5
01B0C:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
01B0E:  MOVLB  C
01B10:  MOVF   xC4,W
01B12:  IORLW  41
01B14:  MOVWF  xC7
01B16:  MOVF   FC9,W
01B18:  MOVFF  CC7,FC9
01B1C:  RRCF   FC7,W
01B1E:  BNC   1B1C
....................    #endif
....................    
....................    spi_write(reg);
01B20:  MOVF   FC9,W
01B22:  MOVFF  CC5,FC9
01B26:  RRCF   FC7,W
01B28:  BNC   1B26
....................    retVal = spi_read(0);
01B2A:  MOVF   FC9,W
01B2C:  CLRF   FC9
01B2E:  RRCF   FC7,W
01B30:  BNC   1B2E
01B32:  MOVFF  FC9,CC6
....................    
....................    output_high(IO_CS_PIN);
01B36:  BCF    F92.5
01B38:  BSF    F89.5
....................    
....................    return retVal;
01B3A:  MOVFF  CC6,01
01B3E:  MOVLB  0
01B40:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
025C8:  MOVFF  CBC,CBE
025CC:  MOVLW  0A
025CE:  MOVLB  C
025D0:  MOVWF  xBF
025D2:  MOVFF  CBD,CC0
025D6:  MOVLB  0
025D8:  CALL   0688
....................    #endif
025DC:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
025DE:  MOVFF  CBC,CBE
025E2:  MOVLW  1A
025E4:  MOVLB  C
025E6:  MOVWF  xBF
025E8:  MOVFF  CBD,CC0
025EC:  MOVLB  0
025EE:  CALL   0688
....................    #endif
025F2:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
01B42:  MOVFF  CC2,CC4
01B46:  MOVLW  09
01B48:  MOVLB  C
01B4A:  MOVWF  xC5
01B4C:  MOVLB  0
01B4E:  RCALL  1B0A
01B50:  MOVFF  01,CC3
....................    #endif
....................    
....................    return retVal;
01B54:  MOVLB  C
01B56:  MOVFF  CC3,01
01B5A:  MOVLB  0
01B5C:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
01B5E:  MOVFF  CC2,CC4
01B62:  MOVLW  19
01B64:  MOVLB  C
01B66:  MOVWF  xC5
01B68:  MOVLB  0
01B6A:  RCALL  1B0A
01B6C:  MOVFF  01,CC3
....................    #endif
....................    
....................    return retVal;
01B70:  MOVLB  C
01B72:  MOVFF  CC3,01
01B76:  MOVLB  0
01B78:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
00750:  MOVFF  CB4,CBE
00754:  MOVLB  C
00756:  CLRF   xBF
00758:  MOVFF  CB5,CC0
0075C:  MOVLB  0
0075E:  RCALL  0688
....................    #endif
00760:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
00762:  MOVFF  CB4,CBE
00766:  MOVLW  10
00768:  MOVLB  C
0076A:  MOVWF  xBF
0076C:  MOVFF  CB5,CC0
00770:  MOVLB  0
00772:  RCALL  0688
....................    #endif
00774:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... 
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... 
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... 
.................... ///#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
02A58:  BTFSS  F9E.4
02A5A:  BRA    2A58
02A5C:  MOVWF  FAD
02A5E:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... 
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_B1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
*
0299C:  BCF    F93.0
0299E:  BCF    F8A.0
029A0:  MOVLW  08
029A2:  MOVWF  01
029A4:  BRA    29A6
029A6:  NOP   
029A8:  BSF    01.7
029AA:  BRA    29CC
029AC:  BCF    01.7
029AE:  MOVLB  C
029B0:  RRCF   xB6,F
029B2:  MOVLB  0
029B4:  BTFSC  FD8.0
029B6:  BSF    F8A.0
029B8:  BTFSS  FD8.0
029BA:  BCF    F8A.0
029BC:  BSF    01.6
029BE:  BRA    29CC
029C0:  BCF    01.6
029C2:  DECFSZ 01,F
029C4:  BRA    29AE
029C6:  BRA    29C8
029C8:  NOP   
029CA:  BSF    F8A.0
029CC:  MOVLW  84
029CE:  MOVWF  FE9
029D0:  DECFSZ FE9,F
029D2:  BRA    29D0
029D4:  BRA    29D6
029D6:  NOP   
029D8:  BTFSC  01.7
029DA:  BRA    29AC
029DC:  BTFSC  01.6
029DE:  BRA    29C0
029E0:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... /*
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_C1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
.................... */
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... //int8 Input1_8;
.................... //int8 Input9_16;
.................... 
.................... volatile int1 functointest_f = 0;
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... int8 Output595[4];
.................... 
.................... int8 tempdata;
.................... //int8 EEP_Config = 0x00;   //
.................... //int8 NUMBER_OF_595 ;
.................... 
.................... int8 EEpDat;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_16;
.................... 
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Red1_7;
.................... int8 Red8_8;
.................... int8 Red9_15;
.................... int8 Red16_16;
.................... 
.................... int8 Green1_7;
.................... int8 Green8_8;
.................... int8 Green9_15;
.................... int8 Green16_16;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_16;
.................... 
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... 
.................... int8 Green1_8 ;
.................... int8 Green9_16 ;
.................... 
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_16 ;
.................... 
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... 
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_16 ;
.................... 
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... 
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... int8 MasterSlaveSync;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... 
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////
.................... unsigned char const addr_sq = 0x10,end_sq = 0x11,code_sq = 0x12,start_addr_hi_sq = 0x13,start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15, ubyte_lo_sq = 0x16, crc_hi_sq = 0x17,second_numofdata = 0x18, byte_count_sq = 0x19, data_sq = 0x20;      //serial sequnce
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned char RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[255];
.................... unsigned char RxD_Buff[1024];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[1024];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;   //use for calculate RxD timeout
.................... int16 index = 0x00;         //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... volatile int16 MCP23_ReadError =0;
.................... 
.................... unsigned char sms_phonenumber[15];
.................... 
.................... //unsigned char SMS_Massage[20][20];
.................... 
.................... unsigned char SMS_Massage1[32];
.................... unsigned char SMS_Massage2[32];
.................... unsigned char SMS_Massage3[32];
.................... unsigned char SMS_Massage4[32];
.................... unsigned char SMS_Massage5[32];
.................... unsigned char SMS_Massage6[32];
.................... unsigned char SMS_Massage7[32];
.................... unsigned char SMS_Massage8[32];
.................... unsigned char SMS_Massage9[32];
.................... unsigned char SMS_Massage10[32];
.................... unsigned char SMS_Massage11[32];
.................... unsigned char SMS_Massage12[32];
.................... unsigned char SMS_Massage13[32];
.................... unsigned char SMS_Massage14[32];
.................... unsigned char SMS_Massage15[32];
.................... unsigned char SMS_Massage16[32];
.................... 
.................... unsigned char SMS_MassageSUM[160] = ">>";
.................... 
.................... unsigned char spacestring[] = " ";
.................... 
.................... volatile int8 send_SMS_period ,send_SMS_count ;
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... } ; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Input
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8,B9,B10;
....................    int1 B11,B12,B13,B14,B15,B16;
.................... };
.................... 
.................... 
....................    //Output   (LED Lit = "0")
....................    //Input Type NO/NC (NO = "1" , NC = "0")
....................    //Fault Type Manual/Auto (Manual = "1" , Auto = "0")
....................    //Output Type Buz/Bell (Buzzer = "1" , Bell = "0")
....................    //Output Both (Normal = "1" , Both = "0")
....................    //Acknowledge flag (Acked = "1" , non Ack = "0")
.................... 
.................... //struct Bit64 Input,Output,InputType,FaultType,OutputType,OutputBoth;
.................... struct Bit64 Inputt;
.................... struct Bit64 Output;
.................... struct Bit64 InputType;
.................... struct Bit64 FaultType;
.................... struct Bit64 OutputType;
.................... struct Bit64 OutputBoth;
.................... 
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 LED_Colour,AckSend,RED_Colour,GREEN_Colour;
.................... 
.................... struct Bit64 SendSMS;
.................... 
.................... int1 FaultAgo[17];
.................... int1 FaultNow[17];
.................... int16 ReleaseTime[17];
.................... int16 FaultDelayTime[17];
.................... 
.................... int1 FaultNCNO[17];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //volatile int8 ReadIn_Count =0;
.................... //int1 ReadIn_flag = 0;
.................... 
.................... 
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void StoreReleaseFault()
*
01C14:  MOVLB  C
01C16:  CLRF   xC2
.................... {
....................    Signed int8 i=0;
....................    for(i=1;i<=16;i++)
01C18:  MOVLW  01
01C1A:  MOVWF  xC2
01C1C:  BTFSC  xC2.7
01C1E:  BRA    1C26
01C20:  MOVF   xC2,W
01C22:  SUBLW  10
01C24:  BNC   1C6C
....................    {
....................       FaultAgo[i] = FaultNow[i];
01C26:  CLRF   03
01C28:  MOVF   xC2,W
01C2A:  MOVWF  00
01C2C:  BTFSC  FE8.7
01C2E:  DECF   03,F
01C30:  MOVWF  xC3
01C32:  MOVFF  03,CC4
01C36:  CLRF   03
01C38:  MOVF   xC2,W
01C3A:  MOVWF  00
01C3C:  BTFSC  FE8.7
01C3E:  DECF   03,F
01C40:  MOVWF  xC5
01C42:  MOVLW  0C
01C44:  MOVWF  xC7
01C46:  MOVLW  61
01C48:  MOVWF  xC6
01C4A:  MOVLB  0
01C4C:  RCALL  1B7A
01C4E:  MOVFF  CC3,CC5
01C52:  MOVLB  C
01C54:  CLRF   xC6
01C56:  BTFSC  01.0
01C58:  INCF   xC6,F
01C5A:  MOVLW  0C
01C5C:  MOVWF  xC8
01C5E:  MOVLW  5E
01C60:  MOVWF  xC7
01C62:  MOVLB  0
01C64:  RCALL  1BD2
01C66:  MOVLB  C
01C68:  INCF   xC2,F
01C6A:  BRA    1C1C
....................    }
01C6C:  MOVLB  0
01C6E:  GOTO   236C (RETURN)
.................... }
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
02A02:  MOVLB  5
02A04:  SETF   x7D
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
02A06:  SETF   x7C
.................... 
....................    for(i = 0;i < usDataLen;i++)
02A08:  MOVLB  C
02A0A:  CLRF   xC2
02A0C:  MOVF   xC0,W
02A0E:  SUBWF  xC2,W
02A10:  BC    2A54
....................    {
....................       restart_wdt();
02A12:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
02A14:  MOVF   xC2,W
02A16:  ADDWF  xBE,W
02A18:  MOVWF  FE9
02A1A:  MOVLW  00
02A1C:  ADDWFC xBF,W
02A1E:  MOVWF  FEA
02A20:  MOVF   FEF,W
02A22:  MOVLB  5
02A24:  XORWF  x7D,W
02A26:  MOVLB  C
02A28:  MOVWF  xC1
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
02A2A:  CLRF   03
02A2C:  MOVF   xC1,W
02A2E:  MOVLB  0
02A30:  CALL   00BA
02A34:  MOVWF  01
02A36:  MOVLB  5
02A38:  MOVF   x7C,W
02A3A:  XORWF  01,W
02A3C:  MOVWF  x7D
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
02A3E:  CLRF   03
02A40:  MOVLB  C
02A42:  MOVF   xC1,W
02A44:  MOVLB  0
02A46:  CALL   01CA
02A4A:  MOVFF  FE8,57C
02A4E:  MOVLB  C
02A50:  INCF   xC2,F
02A52:  BRA    2A0C
....................    }
02A54:  MOVLB  0
02A56:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... /*
.................... void Driver595()
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
....................     
....................     data_out = (~Input19_20);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input11_18);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input9_10);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input1_8);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................  
....................    output_high(EXP_OUT_ENABLE);
....................    delay_us(1);
....................    output_low(EXP_OUT_ENABLE);
.................... }
.................... */
.................... ////////////////////////////////////////////////////////////////////////////////
.................... char blankSigned[] = ">>";
.................... void sendsum_sms(void)
.................... {
....................    if(strcmp(SMS_MassageSUM, blankSigned) != 0){
*
08B50:  MOVLW  0B
08B52:  MOVLB  C
08B54:  MOVWF  xB5
08B56:  MOVLW  9C
08B58:  MOVWF  xB4
08B5A:  MOVLW  0C
08B5C:  MOVWF  xB7
08B5E:  MOVLW  AB
08B60:  MOVWF  xB6
08B62:  MOVLB  0
08B64:  BRA    8AB0
08B66:  MOVF   01,F
08B68:  BZ    8C02
....................    
....................       fprintf(CH2,"AT+CMGF=1"); 
08B6A:  MOVLW  DA
08B6C:  MOVWF  FF6
08B6E:  MOVLW  02
08B70:  MOVWF  FF7
08B72:  CALL   29E2
....................       putc('\n',CH2);
08B76:  MOVLW  0A
08B78:  MOVLB  C
08B7A:  MOVWF  xB6
08B7C:  MOVLB  0
08B7E:  CALL   299C
....................       delay_ms(10);
08B82:  MOVLW  0A
08B84:  MOVLB  C
08B86:  MOVWF  xBD
08B88:  MOVLB  0
08B8A:  CALL   0658
....................    
....................       fprintf(CH2,"AT+CMGS=\"");
08B8E:  MOVLW  E4
08B90:  MOVWF  FF6
08B92:  MOVLW  02
08B94:  MOVWF  FF7
08B96:  CALL   29E2
....................       fprintf(CH2,sms_phonenumber);
08B9A:  MOVLW  09
08B9C:  MOVWF  FEA
08B9E:  MOVLW  8D
08BA0:  MOVWF  FE9
08BA2:  RCALL  8B2A
....................       
....................       fprintf(CH2,"\"");
08BA4:  MOVLW  22
08BA6:  MOVLB  C
08BA8:  MOVWF  xB6
08BAA:  MOVLB  0
08BAC:  CALL   299C
....................       putc('\n',CH2);
08BB0:  MOVLW  0A
08BB2:  MOVLB  C
08BB4:  MOVWF  xB6
08BB6:  MOVLB  0
08BB8:  CALL   299C
....................       delay_ms(50);
08BBC:  MOVLW  32
08BBE:  MOVLB  C
08BC0:  MOVWF  xBD
08BC2:  MOVLB  0
08BC4:  CALL   0658
....................      
....................      fprintf(CH2,SMS_MassageSUM);
08BC8:  MOVLW  0B
08BCA:  MOVWF  FEA
08BCC:  MOVLW  9C
08BCE:  MOVWF  FE9
08BD0:  RCALL  8B2A
....................      putc('\n',CH2);
08BD2:  MOVLW  0A
08BD4:  MOVLB  C
08BD6:  MOVWF  xB6
08BD8:  MOVLB  0
08BDA:  CALL   299C
....................      putc(26,CH2);
08BDE:  MOVLW  1A
08BE0:  MOVLB  C
08BE2:  MOVWF  xB6
08BE4:  MOVLB  0
08BE6:  CALL   299C
....................      
....................      strcpy(SMS_MassageSUM, blankSigned);
08BEA:  MOVLW  0B
08BEC:  MOVWF  FEA
08BEE:  MOVLW  9C
08BF0:  MOVWF  FE9
08BF2:  MOVLW  0C
08BF4:  MOVWF  FE2
08BF6:  MOVLW  AB
08BF8:  MOVWF  FE1
08BFA:  MOVF   FE7,F
08BFC:  MOVFF  FE6,FEE
08C00:  BNZ   8BFA
.................... 
....................    }
08C02:  GOTO   94C8 (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
02A60:  CLRF   20
....................    Input9_16_Send = 0x00;
02A62:  CLRF   21
....................    
....................    
....................    Ack1_8_Send = 0x00;
02A64:  CLRF   28
....................    Ack9_16_Send = 0x00;
02A66:  CLRF   29
.................... 
....................    
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
02A68:  MOVLB  C
02A6A:  BTFSC  x50.0
02A6C:  BRA    2A76
02A6E:  BTFSC  x42.0
02A70:  BRA    2A76
....................       AckSend.B1 = 1;
02A72:  BSF    x56.0
02A74:  BRA    2A78
....................    else
....................       AckSend.B1 = 0;
02A76:  BCF    x56.0
....................    if((In.B2 == 0) && (Output.B2 ==0))
02A78:  BTFSC  x50.1
02A7A:  BRA    2A84
02A7C:  BTFSC  x42.1
02A7E:  BRA    2A84
....................       AckSend.B2 = 1;
02A80:  BSF    x56.1
02A82:  BRA    2A86
....................    else
....................       AckSend.B2 = 0;
02A84:  BCF    x56.1
....................    if((In.B3 == 0) && (Output.B3 ==0))
02A86:  BTFSC  x50.2
02A88:  BRA    2A92
02A8A:  BTFSC  x42.2
02A8C:  BRA    2A92
....................       AckSend.B3 = 1;
02A8E:  BSF    x56.2
02A90:  BRA    2A94
....................    else
....................       AckSend.B3 = 0;
02A92:  BCF    x56.2
....................    if((In.B4 == 0) && (Output.B4 ==0))
02A94:  BTFSC  x50.3
02A96:  BRA    2AA0
02A98:  BTFSC  x42.3
02A9A:  BRA    2AA0
....................       AckSend.B4 = 1;
02A9C:  BSF    x56.3
02A9E:  BRA    2AA2
....................    else
....................       AckSend.B4 = 0;
02AA0:  BCF    x56.3
....................    if((In.B5 == 0) && (Output.B5 ==0))
02AA2:  BTFSC  x50.4
02AA4:  BRA    2AAE
02AA6:  BTFSC  x42.4
02AA8:  BRA    2AAE
....................       AckSend.B5 = 1;
02AAA:  BSF    x56.4
02AAC:  BRA    2AB0
....................    else
....................       AckSend.B5 = 0;
02AAE:  BCF    x56.4
....................    if((In.B6 == 0) && (Output.B6 ==0))
02AB0:  BTFSC  x50.5
02AB2:  BRA    2ABC
02AB4:  BTFSC  x42.5
02AB6:  BRA    2ABC
....................       AckSend.B6 = 1;
02AB8:  BSF    x56.5
02ABA:  BRA    2ABE
....................    else
....................       AckSend.B6 = 0;
02ABC:  BCF    x56.5
....................    if((In.B7 == 0) && (Output.B7 ==0))
02ABE:  BTFSC  x50.6
02AC0:  BRA    2ACA
02AC2:  BTFSC  x42.6
02AC4:  BRA    2ACA
....................       AckSend.B7 = 1;
02AC6:  BSF    x56.6
02AC8:  BRA    2ACC
....................    else
....................       AckSend.B7 = 0;
02ACA:  BCF    x56.6
....................    if((In.B8 == 0) && (Output.B8 ==0))
02ACC:  BTFSC  x50.7
02ACE:  BRA    2AD8
02AD0:  BTFSC  x42.7
02AD2:  BRA    2AD8
....................       AckSend.B8 = 1;
02AD4:  BSF    x56.7
02AD6:  BRA    2ADA
....................    else
....................       AckSend.B8 = 0;
02AD8:  BCF    x56.7
....................    if((In.B9 == 0) && (Output.B9 ==0))
02ADA:  BTFSC  x51.0
02ADC:  BRA    2AE6
02ADE:  BTFSC  x43.0
02AE0:  BRA    2AE6
....................       AckSend.B9 = 1;
02AE2:  BSF    x57.0
02AE4:  BRA    2AE8
....................    else
....................       AckSend.B9 = 0;
02AE6:  BCF    x57.0
....................    if((In.B10 == 0) && (Output.B10 ==0))
02AE8:  BTFSC  x51.1
02AEA:  BRA    2AF4
02AEC:  BTFSC  x43.1
02AEE:  BRA    2AF4
....................       AckSend.B10 = 1;
02AF0:  BSF    x57.1
02AF2:  BRA    2AF6
....................    else
....................       AckSend.B10 = 0;
02AF4:  BCF    x57.1
....................    if((In.B11 == 0) && (Output.B11 ==0))
02AF6:  BTFSC  x51.2
02AF8:  BRA    2B02
02AFA:  BTFSC  x43.2
02AFC:  BRA    2B02
....................       AckSend.B11 = 1;
02AFE:  BSF    x57.2
02B00:  BRA    2B04
....................    else
....................       AckSend.B11 = 0;
02B02:  BCF    x57.2
....................    if((In.B12 == 0) && (Output.B12 ==0))
02B04:  BTFSC  x51.3
02B06:  BRA    2B10
02B08:  BTFSC  x43.3
02B0A:  BRA    2B10
....................       AckSend.B12 = 1;
02B0C:  BSF    x57.3
02B0E:  BRA    2B12
....................    else
....................       AckSend.B12 = 0;
02B10:  BCF    x57.3
....................    if((In.B13 == 0) && (Output.B13 ==0))
02B12:  BTFSC  x51.4
02B14:  BRA    2B1E
02B16:  BTFSC  x43.4
02B18:  BRA    2B1E
....................       AckSend.B13 = 1;
02B1A:  BSF    x57.4
02B1C:  BRA    2B20
....................    else
....................       AckSend.B13 = 0;
02B1E:  BCF    x57.4
....................    if((In.B14 == 0) && (Output.B14 ==0))
02B20:  BTFSC  x51.5
02B22:  BRA    2B2C
02B24:  BTFSC  x43.5
02B26:  BRA    2B2C
....................       AckSend.B14 = 1;
02B28:  BSF    x57.5
02B2A:  BRA    2B2E
....................    else
....................       AckSend.B14 = 0;
02B2C:  BCF    x57.5
....................    if((In.B15 == 0) && (Output.B15 ==0))
02B2E:  BTFSC  x51.6
02B30:  BRA    2B3A
02B32:  BTFSC  x43.6
02B34:  BRA    2B3A
....................       AckSend.B15 = 1;
02B36:  BSF    x57.6
02B38:  BRA    2B3C
....................    else
....................       AckSend.B15 = 0;
02B3A:  BCF    x57.6
....................    if((In.B16 == 0) && (Output.B16 ==0))
02B3C:  BTFSC  x51.7
02B3E:  BRA    2B48
02B40:  BTFSC  x43.7
02B42:  BRA    2B48
....................       AckSend.B16 = 1;
02B44:  BSF    x57.7
02B46:  BRA    2B4A
....................    else
....................       AckSend.B16 = 0;
02B48:  BCF    x57.7
.................... 
....................       
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
02B4A:  MOVLW  00
02B4C:  BTFSC  x56.7
02B4E:  MOVLW  01
02B50:  IORWF  28,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
02B52:  BCF    FD8.0
02B54:  RLCF   28,W
02B56:  MOVWF  xBE
02B58:  MOVLW  00
02B5A:  BTFSC  x56.6
02B5C:  MOVLW  01
02B5E:  IORWF  xBE,W
02B60:  MOVWF  28
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
02B62:  BCF    FD8.0
02B64:  RLCF   28,W
02B66:  MOVWF  xBE
02B68:  MOVLW  00
02B6A:  BTFSC  x56.5
02B6C:  MOVLW  01
02B6E:  IORWF  xBE,W
02B70:  MOVWF  28
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
02B72:  BCF    FD8.0
02B74:  RLCF   28,W
02B76:  MOVWF  xBE
02B78:  MOVLW  00
02B7A:  BTFSC  x56.4
02B7C:  MOVLW  01
02B7E:  IORWF  xBE,W
02B80:  MOVWF  28
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
02B82:  BCF    FD8.0
02B84:  RLCF   28,W
02B86:  MOVWF  xBE
02B88:  MOVLW  00
02B8A:  BTFSC  x56.3
02B8C:  MOVLW  01
02B8E:  IORWF  xBE,W
02B90:  MOVWF  28
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
02B92:  BCF    FD8.0
02B94:  RLCF   28,W
02B96:  MOVWF  xBE
02B98:  MOVLW  00
02B9A:  BTFSC  x56.2
02B9C:  MOVLW  01
02B9E:  IORWF  xBE,W
02BA0:  MOVWF  28
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
02BA2:  BCF    FD8.0
02BA4:  RLCF   28,W
02BA6:  MOVWF  xBE
02BA8:  MOVLW  00
02BAA:  BTFSC  x56.1
02BAC:  MOVLW  01
02BAE:  IORWF  xBE,W
02BB0:  MOVWF  28
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
02BB2:  BCF    FD8.0
02BB4:  RLCF   28,W
02BB6:  MOVWF  xBE
02BB8:  MOVLW  00
02BBA:  BTFSC  x56.0
02BBC:  MOVLW  01
02BBE:  IORWF  xBE,W
02BC0:  MOVWF  28
....................    
....................    Ack9_16_Send = Ack9_16_Send | AckSend.B16;
02BC2:  MOVLW  00
02BC4:  BTFSC  x57.7
02BC6:  MOVLW  01
02BC8:  IORWF  29,F
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B15;
02BCA:  BCF    FD8.0
02BCC:  RLCF   29,W
02BCE:  MOVWF  xBE
02BD0:  MOVLW  00
02BD2:  BTFSC  x57.6
02BD4:  MOVLW  01
02BD6:  IORWF  xBE,W
02BD8:  MOVWF  29
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B14;
02BDA:  BCF    FD8.0
02BDC:  RLCF   29,W
02BDE:  MOVWF  xBE
02BE0:  MOVLW  00
02BE2:  BTFSC  x57.5
02BE4:  MOVLW  01
02BE6:  IORWF  xBE,W
02BE8:  MOVWF  29
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B13;
02BEA:  BCF    FD8.0
02BEC:  RLCF   29,W
02BEE:  MOVWF  xBE
02BF0:  MOVLW  00
02BF2:  BTFSC  x57.4
02BF4:  MOVLW  01
02BF6:  IORWF  xBE,W
02BF8:  MOVWF  29
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B12;
02BFA:  BCF    FD8.0
02BFC:  RLCF   29,W
02BFE:  MOVWF  xBE
02C00:  MOVLW  00
02C02:  BTFSC  x57.3
02C04:  MOVLW  01
02C06:  IORWF  xBE,W
02C08:  MOVWF  29
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B11;
02C0A:  BCF    FD8.0
02C0C:  RLCF   29,W
02C0E:  MOVWF  xBE
02C10:  MOVLW  00
02C12:  BTFSC  x57.2
02C14:  MOVLW  01
02C16:  IORWF  xBE,W
02C18:  MOVWF  29
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B10;
02C1A:  BCF    FD8.0
02C1C:  RLCF   29,W
02C1E:  MOVWF  xBE
02C20:  MOVLW  00
02C22:  BTFSC  x57.1
02C24:  MOVLW  01
02C26:  IORWF  xBE,W
02C28:  MOVWF  29
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B9;
02C2A:  BCF    FD8.0
02C2C:  RLCF   29,W
02C2E:  MOVWF  xBE
02C30:  MOVLW  00
02C32:  BTFSC  x57.0
02C34:  MOVLW  01
02C36:  IORWF  xBE,W
02C38:  MOVWF  29
....................       
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
02C3A:  MOVLW  00
02C3C:  BTFSC  x50.7
02C3E:  MOVLW  01
02C40:  IORWF  20,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
02C42:  BCF    FD8.0
02C44:  RLCF   20,W
02C46:  MOVWF  xBE
02C48:  MOVLW  00
02C4A:  BTFSC  x50.6
02C4C:  MOVLW  01
02C4E:  IORWF  xBE,W
02C50:  MOVWF  20
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
02C52:  BCF    FD8.0
02C54:  RLCF   20,W
02C56:  MOVWF  xBE
02C58:  MOVLW  00
02C5A:  BTFSC  x50.5
02C5C:  MOVLW  01
02C5E:  IORWF  xBE,W
02C60:  MOVWF  20
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
02C62:  BCF    FD8.0
02C64:  RLCF   20,W
02C66:  MOVWF  xBE
02C68:  MOVLW  00
02C6A:  BTFSC  x50.4
02C6C:  MOVLW  01
02C6E:  IORWF  xBE,W
02C70:  MOVWF  20
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
02C72:  BCF    FD8.0
02C74:  RLCF   20,W
02C76:  MOVWF  xBE
02C78:  MOVLW  00
02C7A:  BTFSC  x50.3
02C7C:  MOVLW  01
02C7E:  IORWF  xBE,W
02C80:  MOVWF  20
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
02C82:  BCF    FD8.0
02C84:  RLCF   20,W
02C86:  MOVWF  xBE
02C88:  MOVLW  00
02C8A:  BTFSC  x50.2
02C8C:  MOVLW  01
02C8E:  IORWF  xBE,W
02C90:  MOVWF  20
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
02C92:  BCF    FD8.0
02C94:  RLCF   20,W
02C96:  MOVWF  xBE
02C98:  MOVLW  00
02C9A:  BTFSC  x50.1
02C9C:  MOVLW  01
02C9E:  IORWF  xBE,W
02CA0:  MOVWF  20
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
02CA2:  BCF    FD8.0
02CA4:  RLCF   20,W
02CA6:  MOVWF  xBE
02CA8:  MOVLW  00
02CAA:  BTFSC  x50.0
02CAC:  MOVLW  01
02CAE:  IORWF  xBE,W
02CB0:  MOVWF  20
....................    
....................    Input9_16_Send = Input9_16_Send | In.B16;
02CB2:  MOVLW  00
02CB4:  BTFSC  x51.7
02CB6:  MOVLW  01
02CB8:  IORWF  21,F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B15;
02CBA:  BCF    FD8.0
02CBC:  RLCF   21,W
02CBE:  MOVWF  xBE
02CC0:  MOVLW  00
02CC2:  BTFSC  x51.6
02CC4:  MOVLW  01
02CC6:  IORWF  xBE,W
02CC8:  MOVWF  21
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B14;
02CCA:  BCF    FD8.0
02CCC:  RLCF   21,W
02CCE:  MOVWF  xBE
02CD0:  MOVLW  00
02CD2:  BTFSC  x51.5
02CD4:  MOVLW  01
02CD6:  IORWF  xBE,W
02CD8:  MOVWF  21
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B13;
02CDA:  BCF    FD8.0
02CDC:  RLCF   21,W
02CDE:  MOVWF  xBE
02CE0:  MOVLW  00
02CE2:  BTFSC  x51.4
02CE4:  MOVLW  01
02CE6:  IORWF  xBE,W
02CE8:  MOVWF  21
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B12;
02CEA:  BCF    FD8.0
02CEC:  RLCF   21,W
02CEE:  MOVWF  xBE
02CF0:  MOVLW  00
02CF2:  BTFSC  x51.3
02CF4:  MOVLW  01
02CF6:  IORWF  xBE,W
02CF8:  MOVWF  21
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B11;
02CFA:  BCF    FD8.0
02CFC:  RLCF   21,W
02CFE:  MOVWF  xBE
02D00:  MOVLW  00
02D02:  BTFSC  x51.2
02D04:  MOVLW  01
02D06:  IORWF  xBE,W
02D08:  MOVWF  21
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B10;
02D0A:  BCF    FD8.0
02D0C:  RLCF   21,W
02D0E:  MOVWF  xBE
02D10:  MOVLW  00
02D12:  BTFSC  x51.1
02D14:  MOVLW  01
02D16:  IORWF  xBE,W
02D18:  MOVWF  21
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B9;
02D1A:  BCF    FD8.0
02D1C:  RLCF   21,W
02D1E:  MOVWF  xBE
02D20:  MOVLW  00
02D22:  BTFSC  x51.0
02D24:  MOVLW  01
02D26:  IORWF  xBE,W
02D28:  MOVWF  21
02D2A:  MOVLB  0
02D2C:  GOTO   39A0 (RETURN)
....................     
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void checkCommand(void)
.................... {
....................    restart_wdt();
*
002EE:  CLRWDT
.................... 
....................    //if(sequence == end_sq && Address == SBUF)     //check Address
....................    if(sequence == end_sq )     //check Address
002F0:  MOVF   x71,W
002F2:  SUBWF  x7A,W
002F4:  BNZ   031C
....................    {
....................      RxD_DataLen = 0x00 ;
002F6:  CLRF   x7C
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002F8:  MOVLW  7C
002FA:  ADDWF  x7C,W
002FC:  MOVWF  FE9
002FE:  MOVLW  01
00300:  MOVWF  FEA
00302:  BTFSC  FD8.0
00304:  INCF   FEA,F
00306:  MOVFF  30,FEF
....................      restart_wdt();
0030A:  CLRWDT
....................      RxD_DataLen ++ ;
0030C:  INCF   x7C,F
....................      sequence = addr_sq;
0030E:  MOVLW  10
00310:  MOVWF  x7A
....................      T_timeout = 0x14; //200ms
00312:  MOVLW  14
00314:  MOVLB  9
00316:  MOVWF  x87
....................    }
00318:  BRA    0594
0031A:  MOVLB  0
....................    else if(sequence == addr_sq)
0031C:  MOVF   x7A,W
0031E:  SUBLW  10
00320:  BNZ   03DA
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
00322:  MOVLW  7C
00324:  ADDWF  x7C,W
00326:  MOVWF  FE9
00328:  MOVLW  01
0032A:  MOVWF  FEA
0032C:  BTFSC  FD8.0
0032E:  INCF   FEA,F
00330:  MOVFF  30,FEF
....................       restart_wdt();
00334:  CLRWDT
....................       RxD_DataLen ++ ;
00336:  INCF   x7C,F
.................... 
....................        if(RxD_Buff[RxD_DataLen - 1] < 0x17)   //Function Code Must be less than 0x20
00338:  MOVLW  01
0033A:  SUBWF  x7C,W
0033C:  ADDLW  7C
0033E:  MOVWF  FE9
00340:  MOVLW  01
00342:  MOVWF  FEA
00344:  BTFSC  FD8.0
00346:  INCF   FEA,F
00348:  MOVF   FEF,W
0034A:  SUBLW  16
0034C:  BNC   035C
....................        {
....................            sequence = code_sq;
0034E:  MOVFF  72,7A
....................            T_timeout = 0x14; //200ms
00352:  MOVLW  14
00354:  MOVLB  9
00356:  MOVWF  x87
....................        }
00358:  BRA    03D6
0035A:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x20)   /////Read Setting//////
0035C:  MOVLW  01
0035E:  SUBWF  x7C,W
00360:  ADDLW  7C
00362:  MOVWF  FE9
00364:  MOVLW  01
00366:  MOVWF  FEA
00368:  BTFSC  FD8.0
0036A:  INCF   FEA,F
0036C:  MOVF   FEF,W
0036E:  SUBLW  20
00370:  BNZ   0380
....................        {
....................           sequence = ubyte_lo_sq;
00372:  MOVFF  75,7A
....................           T_timeout = 0x14; //200ms
00376:  MOVLW  14
00378:  MOVLB  9
0037A:  MOVWF  x87
....................        }
0037C:  BRA    03D6
0037E:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x21)   /////Write setting/////
00380:  MOVLW  01
00382:  SUBWF  x7C,W
00384:  ADDLW  7C
00386:  MOVWF  FE9
00388:  MOVLW  01
0038A:  MOVWF  FEA
0038C:  BTFSC  FD8.0
0038E:  INCF   FEA,F
00390:  MOVF   FEF,W
00392:  SUBLW  21
00394:  BNZ   03A4
....................        {
....................           sequence = byte_count_sq ;
00396:  MOVFF  78,7A
....................           T_timeout = 0x14; //200ms
0039A:  MOVLW  14
0039C:  MOVLB  9
0039E:  MOVWF  x87
....................        }
003A0:  BRA    03D6
003A2:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x22)   /////SMS setting/////
003A4:  MOVLW  01
003A6:  SUBWF  x7C,W
003A8:  ADDLW  7C
003AA:  MOVWF  FE9
003AC:  MOVLW  01
003AE:  MOVWF  FEA
003B0:  BTFSC  FD8.0
003B2:  INCF   FEA,F
003B4:  MOVF   FEF,W
003B6:  SUBLW  22
003B8:  BNZ   03C8
....................        {
....................           sequence = second_numofdata ;
003BA:  MOVFF  77,7A
....................           T_timeout = 0x14; //200ms
003BE:  MOVLW  14
003C0:  MOVLB  9
003C2:  MOVWF  x87
....................        }
003C4:  BRA    03D6
003C6:  MOVLB  0
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
003C8:  CLRF   x7C
....................           sequence = end_sq;
003CA:  MOVFF  71,7A
....................           T_timeout = 0x00;
003CE:  MOVLB  9
003D0:  CLRF   x87
....................           output_bit(P485ctrl,0);
003D2:  BCF    F8A.3
003D4:  BCF    F93.3
....................        }
....................    }
003D6:  BRA    0594
003D8:  MOVLB  0
....................    else if(sequence == second_numofdata)
003DA:  MOVF   x77,W
003DC:  SUBWF  x7A,W
003DE:  BNZ   0404
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
003E0:  MOVLW  7C
003E2:  ADDWF  x7C,W
003E4:  MOVWF  FE9
003E6:  MOVLW  01
003E8:  MOVWF  FEA
003EA:  BTFSC  FD8.0
003EC:  INCF   FEA,F
003EE:  MOVFF  30,FEF
....................       restart_wdt();
003F2:  CLRWDT
....................       RxD_DataLen ++ ;
003F4:  INCF   x7C,F
....................       sequence = byte_count_sq;
003F6:  MOVFF  78,7A
....................       T_timeout = 0x14; //200ms
003FA:  MOVLW  14
003FC:  MOVLB  9
003FE:  MOVWF  x87
....................    }
00400:  BRA    0594
00402:  MOVLB  0
....................    else if(sequence == byte_count_sq)
00404:  MOVF   x78,W
00406:  SUBWF  x7A,W
00408:  BNZ   0460
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
0040A:  MOVLW  7C
0040C:  ADDWF  x7C,W
0040E:  MOVWF  FE9
00410:  MOVLW  01
00412:  MOVWF  FEA
00414:  BTFSC  FD8.0
00416:  INCF   FEA,F
00418:  MOVFF  30,FEF
....................       restart_wdt();
0041C:  CLRWDT
....................       RxD_DataLen ++ ;
0041E:  INCF   x7C,F
....................       if(RxD_Buff[1] == 0x22)   /////SMS setting/////
00420:  MOVLB  1
00422:  MOVF   x7D,W
00424:  SUBLW  22
00426:  BNZ   043A
....................       {
....................          index = (RxD_Buff[2] * 0x64) + RxD_Buff[3];
00428:  MOVF   x7E,W
0042A:  MULLW  64
0042C:  MOVF   FF3,W
0042E:  ADDWF  x7F,W
00430:  MOVLB  9
00432:  MOVWF  x88
00434:  CLRF   x89
....................       }
00436:  BRA    0454
00438:  MOVLB  1
....................       else{
....................          index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
0043A:  MOVLW  01
0043C:  MOVLB  0
0043E:  SUBWF  x7C,W
00440:  ADDLW  7C
00442:  MOVWF  FE9
00444:  MOVLW  01
00446:  MOVWF  FEA
00448:  BTFSC  FD8.0
0044A:  INCF   FEA,F
0044C:  MOVLB  9
0044E:  CLRF   x89
00450:  MOVFF  FEF,988
....................       }
....................       T_timeout = 0x14; //200ms
00454:  MOVLW  14
00456:  MOVWF  x87
....................       sequence = data_sq ;
00458:  MOVFF  79,7A
....................    }
0045C:  BRA    0594
0045E:  MOVLB  0
....................    else if(sequence == data_sq)
00460:  MOVF   x79,W
00462:  SUBWF  x7A,W
00464:  BNZ   049A
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
00466:  MOVLW  7C
00468:  ADDWF  x7C,W
0046A:  MOVWF  FE9
0046C:  MOVLW  01
0046E:  MOVWF  FEA
00470:  BTFSC  FD8.0
00472:  INCF   FEA,F
00474:  MOVFF  30,FEF
....................       restart_wdt();
00478:  CLRWDT
....................       RxD_DataLen ++ ;
0047A:  INCF   x7C,F
....................       index -- ;                     //Data Byte Count
0047C:  MOVLB  9
0047E:  MOVF   x88,W
00480:  BTFSC  FD8.2
00482:  DECF   x89,F
00484:  DECF   x88,F
....................       if(index == 0x00)
00486:  MOVF   x88,F
00488:  BNZ   0492
0048A:  MOVF   x89,F
0048C:  BNZ   0492
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
0048E:  MOVFF  75,7A
....................       }
....................       T_timeout = 0x14; //200ms
00492:  MOVLW  14
00494:  MOVWF  x87
....................    }
00496:  BRA    0594
00498:  MOVLB  0
....................    else if(sequence == code_sq)
0049A:  MOVF   x72,W
0049C:  SUBWF  x7A,W
0049E:  BNZ   04C4
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
004A0:  MOVLW  7C
004A2:  ADDWF  x7C,W
004A4:  MOVWF  FE9
004A6:  MOVLW  01
004A8:  MOVWF  FEA
004AA:  BTFSC  FD8.0
004AC:  INCF   FEA,F
004AE:  MOVFF  30,FEF
....................       restart_wdt();
004B2:  CLRWDT
....................       RxD_DataLen ++ ;
004B4:  INCF   x7C,F
....................       sequence = start_addr_hi_sq;
004B6:  MOVFF  73,7A
....................       T_timeout = 0x14; //200ms
004BA:  MOVLW  14
004BC:  MOVLB  9
004BE:  MOVWF  x87
....................    }
004C0:  BRA    0594
004C2:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
004C4:  MOVF   x73,W
004C6:  SUBWF  x7A,W
004C8:  BNZ   04EE
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
004CA:  MOVLW  7C
004CC:  ADDWF  x7C,W
004CE:  MOVWF  FE9
004D0:  MOVLW  01
004D2:  MOVWF  FEA
004D4:  BTFSC  FD8.0
004D6:  INCF   FEA,F
004D8:  MOVFF  30,FEF
....................       restart_wdt();
004DC:  CLRWDT
....................       RxD_DataLen ++ ;
004DE:  INCF   x7C,F
....................       sequence = start_addr_lo_sq;
004E0:  MOVFF  74,7A
....................       T_timeout = 0x14; //200ms
004E4:  MOVLW  14
004E6:  MOVLB  9
004E8:  MOVWF  x87
....................    }
004EA:  BRA    0594
004EC:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
004EE:  MOVF   x74,W
004F0:  SUBWF  x7A,W
004F2:  BNZ   0518
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
004F4:  MOVLW  7C
004F6:  ADDWF  x7C,W
004F8:  MOVWF  FE9
004FA:  MOVLW  01
004FC:  MOVWF  FEA
004FE:  BTFSC  FD8.0
00500:  INCF   FEA,F
00502:  MOVFF  30,FEF
....................       restart_wdt();
00506:  CLRWDT
....................       RxD_DataLen ++ ;
00508:  INCF   x7C,F
....................       sequence = ubyte_hi_sq;
0050A:  MOVLW  15
0050C:  MOVWF  x7A
....................       T_timeout = 0x14; //200ms
0050E:  MOVLW  14
00510:  MOVLB  9
00512:  MOVWF  x87
....................    }
00514:  BRA    0594
00516:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
00518:  MOVF   x7A,W
0051A:  SUBLW  15
0051C:  BNZ   0542
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
0051E:  MOVLW  7C
00520:  ADDWF  x7C,W
00522:  MOVWF  FE9
00524:  MOVLW  01
00526:  MOVWF  FEA
00528:  BTFSC  FD8.0
0052A:  INCF   FEA,F
0052C:  MOVFF  30,FEF
....................       restart_wdt();
00530:  CLRWDT
....................       RxD_DataLen ++ ;
00532:  INCF   x7C,F
....................       sequence = ubyte_lo_sq;
00534:  MOVFF  75,7A
....................       T_timeout = 0x14; //200ms
00538:  MOVLW  14
0053A:  MOVLB  9
0053C:  MOVWF  x87
....................    }
0053E:  BRA    0594
00540:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
00542:  MOVF   x75,W
00544:  SUBWF  x7A,W
00546:  BNZ   056C
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
00548:  MOVLW  7C
0054A:  ADDWF  x7C,W
0054C:  MOVWF  FE9
0054E:  MOVLW  01
00550:  MOVWF  FEA
00552:  BTFSC  FD8.0
00554:  INCF   FEA,F
00556:  MOVFF  30,FEF
....................       restart_wdt();
0055A:  CLRWDT
....................       RxD_DataLen ++ ;
0055C:  INCF   x7C,F
....................       sequence = crc_hi_sq;
0055E:  MOVFF  76,7A
....................       T_timeout = 0x14; //200ms
00562:  MOVLW  14
00564:  MOVLB  9
00566:  MOVWF  x87
....................    }
00568:  BRA    0594
0056A:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
0056C:  MOVF   x76,W
0056E:  SUBWF  x7A,W
00570:  BNZ   0594
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
00572:  MOVLW  7C
00574:  ADDWF  x7C,W
00576:  MOVWF  FE9
00578:  MOVLW  01
0057A:  MOVWF  FEA
0057C:  BTFSC  FD8.0
0057E:  INCF   FEA,F
00580:  MOVFF  30,FEF
....................       restart_wdt();
00584:  CLRWDT
....................       sequence = end_sq;
00586:  MOVFF  71,7A
....................       T_timeout = 0x00;
0058A:  MOVLB  9
0058C:  CLRF   x87
....................       //T_timeout = 0x14; //200ms
....................       recieve_completed = 1 ;            //Recieve completed then translate
0058E:  BSF    32.5
....................       output_bit(P485ctrl,0);
00590:  BCF    F8A.3
00592:  BCF    F93.3
00594:  MOVLB  0
....................    }
00596:  GOTO   05A4 (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
03068:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
0306A:  MOVLW  01
0306C:  SUBWF  x7C,W
0306E:  MOVLB  C
03070:  MOVWF  xBD
03072:  MOVLW  01
03074:  MOVWF  xBF
03076:  MOVLW  7C
03078:  MOVWF  xBE
0307A:  MOVFF  CBD,CC0
0307E:  MOVLB  0
03080:  RCALL  2A02
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
03082:  MOVLW  01
03084:  SUBWF  x7C,W
03086:  ADDLW  7C
03088:  MOVWF  FE9
0308A:  MOVLW  01
0308C:  MOVWF  FEA
0308E:  BTFSC  FD8.0
03090:  INCF   FEA,F
03092:  MOVF   FEF,W
03094:  MOVLB  5
03096:  SUBWF  x7D,W
03098:  BTFSS  FD8.2
0309A:  GOTO   5B0E
0309E:  MOVLW  7C
030A0:  MOVLB  0
030A2:  ADDWF  x7C,W
030A4:  MOVWF  FE9
030A6:  MOVLW  01
030A8:  MOVWF  FEA
030AA:  BTFSC  FD8.0
030AC:  INCF   FEA,F
030AE:  MOVF   FEF,W
030B0:  MOVLB  5
030B2:  SUBWF  x7C,W
030B4:  BTFSS  FD8.2
030B6:  GOTO   5B0E
....................    {
....................    
....................          
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
030BA:  MOVLB  1
030BC:  MOVF   x7C,W
030BE:  SUBLW  AA
030C0:  BTFSS  FD8.2
030C2:  BRA    355C
030C4:  MOVF   x7D,W
030C6:  SUBLW  20
030C8:  BTFSS  FD8.2
030CA:  BRA    355C
....................       {
....................          TxD_Buff[0] = Address ;         //Address
030CC:  MOVFF  7B,7D
....................          TxD_Buff[1] = 0x20 ;            //function code
030D0:  MOVLW  20
030D2:  MOVLB  0
030D4:  MOVWF  x7E
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
030D6:  MOVLW  1C
030D8:  MOVWF  x7F
....................          
....................          /////////////////////////////////////////////
....................          InputType1_8 = 0x00;
030DA:  CLRF   3C
....................          InputType1_8 = InputType1_8 | FaultNCNO[8];
030DC:  MOVLW  00
030DE:  MOVLB  C
030E0:  BTFSC  xA9.0
030E2:  MOVLW  01
030E4:  IORWF  3C,F
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[7];
030E6:  BCF    FD8.0
030E8:  RLCF   3C,W
030EA:  MOVWF  xBE
030EC:  MOVLW  00
030EE:  BTFSC  xA8.7
030F0:  MOVLW  01
030F2:  IORWF  xBE,W
030F4:  MOVWF  3C
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[6];
030F6:  BCF    FD8.0
030F8:  RLCF   3C,W
030FA:  MOVWF  xBE
030FC:  MOVLW  00
030FE:  BTFSC  xA8.6
03100:  MOVLW  01
03102:  IORWF  xBE,W
03104:  MOVWF  3C
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[5];
03106:  BCF    FD8.0
03108:  RLCF   3C,W
0310A:  MOVWF  xBE
0310C:  MOVLW  00
0310E:  BTFSC  xA8.5
03110:  MOVLW  01
03112:  IORWF  xBE,W
03114:  MOVWF  3C
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[4];
03116:  BCF    FD8.0
03118:  RLCF   3C,W
0311A:  MOVWF  xBE
0311C:  MOVLW  00
0311E:  BTFSC  xA8.4
03120:  MOVLW  01
03122:  IORWF  xBE,W
03124:  MOVWF  3C
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[3];
03126:  BCF    FD8.0
03128:  RLCF   3C,W
0312A:  MOVWF  xBE
0312C:  MOVLW  00
0312E:  BTFSC  xA8.3
03130:  MOVLW  01
03132:  IORWF  xBE,W
03134:  MOVWF  3C
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[2];
03136:  BCF    FD8.0
03138:  RLCF   3C,W
0313A:  MOVWF  xBE
0313C:  MOVLW  00
0313E:  BTFSC  xA8.2
03140:  MOVLW  01
03142:  IORWF  xBE,W
03144:  MOVWF  3C
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[1];
03146:  BCF    FD8.0
03148:  RLCF   3C,W
0314A:  MOVWF  xBE
0314C:  MOVLW  00
0314E:  BTFSC  xA8.1
03150:  MOVLW  01
03152:  IORWF  xBE,W
03154:  MOVWF  3C
.................... 
....................          InputType9_16 = 0x00;
03156:  CLRF   3D
....................          InputType9_16 = InputType9_16 | FaultNCNO[16];
03158:  MOVLW  00
0315A:  BTFSC  xAA.0
0315C:  MOVLW  01
0315E:  IORWF  3D,F
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[15];
03160:  BCF    FD8.0
03162:  RLCF   3D,W
03164:  MOVWF  xBE
03166:  MOVLW  00
03168:  BTFSC  xA9.7
0316A:  MOVLW  01
0316C:  IORWF  xBE,W
0316E:  MOVWF  3D
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[14];
03170:  BCF    FD8.0
03172:  RLCF   3D,W
03174:  MOVWF  xBE
03176:  MOVLW  00
03178:  BTFSC  xA9.6
0317A:  MOVLW  01
0317C:  IORWF  xBE,W
0317E:  MOVWF  3D
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[13];
03180:  BCF    FD8.0
03182:  RLCF   3D,W
03184:  MOVWF  xBE
03186:  MOVLW  00
03188:  BTFSC  xA9.5
0318A:  MOVLW  01
0318C:  IORWF  xBE,W
0318E:  MOVWF  3D
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[12];
03190:  BCF    FD8.0
03192:  RLCF   3D,W
03194:  MOVWF  xBE
03196:  MOVLW  00
03198:  BTFSC  xA9.4
0319A:  MOVLW  01
0319C:  IORWF  xBE,W
0319E:  MOVWF  3D
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[11];
031A0:  BCF    FD8.0
031A2:  RLCF   3D,W
031A4:  MOVWF  xBE
031A6:  MOVLW  00
031A8:  BTFSC  xA9.3
031AA:  MOVLW  01
031AC:  IORWF  xBE,W
031AE:  MOVWF  3D
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[10];
031B0:  BCF    FD8.0
031B2:  RLCF   3D,W
031B4:  MOVWF  xBE
031B6:  MOVLW  00
031B8:  BTFSC  xA9.2
031BA:  MOVLW  01
031BC:  IORWF  xBE,W
031BE:  MOVWF  3D
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[9];
031C0:  BCF    FD8.0
031C2:  RLCF   3D,W
031C4:  MOVWF  xBE
031C6:  MOVLW  00
031C8:  BTFSC  xA9.1
031CA:  MOVLW  01
031CC:  IORWF  xBE,W
031CE:  MOVWF  3D
....................          
....................          FaultType17_24 = 0x00;
031D0:  CLRF   41
....................          FaultType17_24 = FaultType17_24 | FaultNCNO[24];
031D2:  MOVLW  00
031D4:  BTFSC  xAB.0
031D6:  MOVLW  01
031D8:  IORWF  41,F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[23];
031DA:  BCF    FD8.0
031DC:  RLCF   41,W
031DE:  MOVWF  xBE
031E0:  MOVLW  00
031E2:  BTFSC  xAA.7
031E4:  MOVLW  01
031E6:  IORWF  xBE,W
031E8:  MOVWF  41
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[22];
031EA:  BCF    FD8.0
031EC:  RLCF   41,W
031EE:  MOVWF  xBE
031F0:  MOVLW  00
031F2:  BTFSC  xAA.6
031F4:  MOVLW  01
031F6:  IORWF  xBE,W
031F8:  MOVWF  41
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[21];
031FA:  BCF    FD8.0
031FC:  RLCF   41,W
031FE:  MOVWF  xBE
03200:  MOVLW  00
03202:  BTFSC  xAA.5
03204:  MOVLW  01
03206:  IORWF  xBE,W
03208:  MOVWF  41
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[20];
0320A:  BCF    FD8.0
0320C:  RLCF   41,W
0320E:  MOVWF  xBE
03210:  MOVLW  00
03212:  BTFSC  xAA.4
03214:  MOVLW  01
03216:  IORWF  xBE,W
03218:  MOVWF  41
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[19];
0321A:  BCF    FD8.0
0321C:  RLCF   41,W
0321E:  MOVWF  xBE
03220:  MOVLW  00
03222:  BTFSC  xAA.3
03224:  MOVLW  01
03226:  IORWF  xBE,W
03228:  MOVWF  41
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[18];
0322A:  BCF    FD8.0
0322C:  RLCF   41,W
0322E:  MOVWF  xBE
03230:  MOVLW  00
03232:  BTFSC  xAA.2
03234:  MOVLW  01
03236:  IORWF  xBE,W
03238:  MOVWF  41
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[17];
0323A:  BCF    FD8.0
0323C:  RLCF   41,W
0323E:  MOVWF  xBE
03240:  MOVLW  00
03242:  BTFSC  xAA.1
03244:  MOVLW  01
03246:  IORWF  xBE,W
03248:  MOVWF  41
....................          
....................          ///////////////////////////////////////////
....................          
....................          TxD_Buff[3] = InputType1_8 ;    //1
0324A:  MOVFF  3C,80
....................          TxD_Buff[4] = InputType9_16 ;  //2
0324E:  MOVFF  3D,81
....................          TxD_Buff[5] = InputType17_24 ;//3
03252:  MOVFF  3E,82
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
03256:  MOVFF  3F,83
....................          TxD_Buff[7] = FaultType9_16 ; //5
0325A:  MOVFF  40,84
....................          TxD_Buff[8] = FaultType17_24 ;   //6
0325E:  MOVFF  41,85
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
03262:  MOVFF  42,86
....................          TxD_Buff[10] = OutputType9_16 ;  //8
03266:  MOVFF  43,87
....................          TxD_Buff[11] = OutputType17_24 ; //9
0326A:  MOVFF  44,88
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
0326E:  MOVFF  45,89
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
03272:  MOVFF  46,8A
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
03276:  MOVFF  47,8B
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
0327A:  MOVFF  48,8C
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
0327E:  MOVFF  49,8D
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
03282:  MOVFF  4A,8E
....................         
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
03286:  MOVFF  FF2,CBD
0328A:  BCF    FF2.7
0328C:  CLRF   FAA
0328E:  MOVLW  10
03290:  MOVWF  FA9
03292:  BCF    FA6.6
03294:  BCF    FA6.7
03296:  BSF    FA6.0
03298:  MOVF   FA8,W
0329A:  BTFSC  xBD.7
0329C:  BSF    FF2.7
0329E:  MOVLB  0
032A0:  MOVWF  x8F
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
032A2:  MOVFF  FF2,CBD
032A6:  BCF    FF2.7
032A8:  CLRF   FAA
032AA:  MOVLW  11
032AC:  MOVWF  FA9
032AE:  BCF    FA6.6
032B0:  BCF    FA6.7
032B2:  BSF    FA6.0
032B4:  MOVF   FA8,W
032B6:  MOVLB  C
032B8:  BTFSC  xBD.7
032BA:  BSF    FF2.7
032BC:  MOVLB  0
032BE:  MOVWF  x90
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
032C0:  MOVFF  FF2,CBD
032C4:  BCF    FF2.7
032C6:  CLRF   FAA
032C8:  MOVLW  12
032CA:  MOVWF  FA9
032CC:  BCF    FA6.6
032CE:  BCF    FA6.7
032D0:  BSF    FA6.0
032D2:  MOVF   FA8,W
032D4:  MOVLB  C
032D6:  BTFSC  xBD.7
032D8:  BSF    FF2.7
032DA:  MOVLB  0
032DC:  MOVWF  x91
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
032DE:  MOVFF  FF2,CBD
032E2:  BCF    FF2.7
032E4:  CLRF   FAA
032E6:  MOVLW  13
032E8:  MOVWF  FA9
032EA:  BCF    FA6.6
032EC:  BCF    FA6.7
032EE:  BSF    FA6.0
032F0:  MOVF   FA8,W
032F2:  MOVLB  C
032F4:  BTFSC  xBD.7
032F6:  BSF    FF2.7
032F8:  MOVLB  0
032FA:  MOVWF  x92
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
032FC:  MOVFF  FF2,CBD
03300:  BCF    FF2.7
03302:  CLRF   FAA
03304:  MOVLW  14
03306:  MOVWF  FA9
03308:  BCF    FA6.6
0330A:  BCF    FA6.7
0330C:  BSF    FA6.0
0330E:  MOVF   FA8,W
03310:  MOVLB  C
03312:  BTFSC  xBD.7
03314:  BSF    FF2.7
03316:  MOVLB  0
03318:  MOVWF  x93
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
0331A:  MOVFF  FF2,CBD
0331E:  BCF    FF2.7
03320:  CLRF   FAA
03322:  MOVLW  15
03324:  MOVWF  FA9
03326:  BCF    FA6.6
03328:  BCF    FA6.7
0332A:  BSF    FA6.0
0332C:  MOVF   FA8,W
0332E:  MOVLB  C
03330:  BTFSC  xBD.7
03332:  BSF    FF2.7
03334:  MOVLB  0
03336:  MOVWF  x94
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
03338:  MOVFF  FF2,CBD
0333C:  BCF    FF2.7
0333E:  CLRF   FAA
03340:  MOVLW  16
03342:  MOVWF  FA9
03344:  BCF    FA6.6
03346:  BCF    FA6.7
03348:  BSF    FA6.0
0334A:  MOVF   FA8,W
0334C:  MOVLB  C
0334E:  BTFSC  xBD.7
03350:  BSF    FF2.7
03352:  MOVLB  0
03354:  MOVWF  x95
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
03356:  MOVFF  FF2,CBD
0335A:  BCF    FF2.7
0335C:  CLRF   FAA
0335E:  MOVLW  17
03360:  MOVWF  FA9
03362:  BCF    FA6.6
03364:  BCF    FA6.7
03366:  BSF    FA6.0
03368:  MOVF   FA8,W
0336A:  MOVLB  C
0336C:  BTFSC  xBD.7
0336E:  BSF    FF2.7
03370:  MOVLB  0
03372:  MOVWF  x96
....................        
....................          ///////////////////////////////////////jj------------------
....................          
....................          /*
....................          Red1_8 = Red1_8 | RED_Colour.B8;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B7;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B6;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B5;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B4;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B3;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B2;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B1;
....................          
....................          Red9_10 = Red9_10 | RED_Colour.B10;
....................          Red9_10 = (Red9_10 << 1) | RED_Colour.B9;
....................          
....................          Red11_18 = Red11_18 | RED_Colour.B16;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B15;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B14;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B13;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B12;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B11;
....................          //Red11_18 = (Red11_18 << 1) | RED_Colour.B2;
....................          //Red11_18 = (Red11_18 << 1) | RED_Colour.B1;
....................         
....................          Green1_8 = Green1_8 | GREEN_Colour.B8;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B7;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B6;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B5;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B4;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B3;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B2;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B1;
....................          
....................          Green9_10 = Green9_10 | GREEN_Colour.B10;
....................          Green9_10 = (Green9_10 << 1) | GREEN_Colour.B9;
....................          
....................          Green11_18 = Green11_18 | GREEN_Colour.B16;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B15;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B14;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B13;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B12;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B11;
....................          
....................           //TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
....................           TxD_Buff[18] = Red1_8;//Red1_8;    //16
....................           
....................           TxD_Buff[19] = Red9_10;//Red9_10;      //17
....................           TxD_Buff[20] = Red11_18;//Red11_18;     //18
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
....................           
....................           //TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
....................           TxD_Buff[22] = Green1_8;//Green1_8;     //20
....................           
....................           TxD_Buff[23] = Green9_10;//Green9_10;    //21
....................           TxD_Buff[24] = Green11_18;//Green11_18;      //22
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
....................           */
....................           ///////////////////////////////////////jj------------------
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
03374:  MOVFF  6C,97
....................          TxD_Buff[27] = AutoAckTime ;        //25
03378:  MOVFF  6D,98
....................          TxD_Buff[28] = FlashingRate ;       //26
0337C:  MOVFF  6E,99
....................          TxD_Buff[29] = NoOfPoint ;          //27
03380:  MOVFF  6F,9A
....................          TxD_Buff[30] = FaultDelayTime ;    //28
03384:  MOVLW  86
03386:  MOVWF  x9B
....................          TxD_Buff[31] = Address ;            //29
03388:  MOVFF  7B,9C
.................... 
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
0338C:  MOVFF  C88,9D
....................          TxD_Buff[33] = FaultDelayTime[2] ;
03390:  MOVFF  C8A,9E
....................          TxD_Buff[34] = FaultDelayTime[3] ;
03394:  MOVFF  C8C,9F
....................          TxD_Buff[35] = FaultDelayTime[4] ;
03398:  MOVFF  C8E,A0
....................          TxD_Buff[36] = FaultDelayTime[5] ;
0339C:  MOVFF  C90,A1
....................          TxD_Buff[37] = FaultDelayTime[6] ;
033A0:  MOVFF  C92,A2
....................          TxD_Buff[38] = FaultDelayTime[7] ;
033A4:  MOVFF  C94,A3
....................          TxD_Buff[39] = FaultDelayTime[8] ;
033A8:  MOVFF  C96,A4
....................          TxD_Buff[40] = FaultDelayTime[9] ;
033AC:  MOVFF  C98,A5
....................          TxD_Buff[41] = FaultDelayTime[10] ;
033B0:  MOVFF  C9A,A6
....................          TxD_Buff[42] = FaultDelayTime[11] ;
033B4:  MOVFF  C9C,A7
....................          TxD_Buff[43] = FaultDelayTime[12] ;
033B8:  MOVFF  C9E,A8
....................          TxD_Buff[44] = FaultDelayTime[13] ;
033BC:  MOVFF  CA0,A9
....................          TxD_Buff[45] = FaultDelayTime[14] ;
033C0:  MOVFF  CA2,AA
....................          TxD_Buff[46] = FaultDelayTime[15] ;
033C4:  MOVFF  CA4,AB
....................          TxD_Buff[47] = FaultDelayTime[16] ;
033C8:  MOVFF  CA6,AC
....................          TxD_Buff[48] = FaultDelayTime[17] ;
033CC:  MOVFF  CA8,AD
....................          TxD_Buff[49] = FaultDelayTime[18] ;
033D0:  MOVFF  CAA,AE
....................          TxD_Buff[50] = FaultDelayTime[19] ;
033D4:  MOVFF  CAC,AF
....................          TxD_Buff[51] = FaultDelayTime[20] ;
033D8:  MOVFF  CAE,B0
....................          
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
033DC:  MOVLB  C
033DE:  CLRF   xBF
033E0:  MOVLW  7D
033E2:  MOVWF  xBE
033E4:  MOVLW  34
033E6:  MOVWF  xC0
033E8:  MOVLB  0
033EA:  CALL   2A02
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
033EE:  MOVFF  57D,B1
....................          TxD_Buff[53] = CRC_Lo ;
033F2:  MOVFF  57C,B2
.................... 
....................          output_bit(P485ctrl,1);
033F6:  BSF    F8A.3
033F8:  BCF    F93.3
....................          delay_ms(10);
033FA:  MOVLW  0A
033FC:  MOVLB  C
033FE:  MOVWF  xBD
03400:  MOVLB  0
03402:  CALL   0658
.................... 
....................          putc(Txd_Buff[0]);
03406:  MOVF   x7D,W
03408:  CALL   2A58
....................          putc(Txd_Buff[1]);
0340C:  MOVF   x7E,W
0340E:  CALL   2A58
....................          putc(Txd_Buff[2]);
03412:  MOVF   x7F,W
03414:  CALL   2A58
....................          putc(Txd_Buff[3]);
03418:  MOVF   x80,W
0341A:  CALL   2A58
....................          putc(Txd_Buff[4]);
0341E:  MOVF   x81,W
03420:  CALL   2A58
....................          putc(Txd_Buff[5]);
03424:  MOVF   x82,W
03426:  CALL   2A58
....................          putc(Txd_Buff[6]);
0342A:  MOVF   x83,W
0342C:  CALL   2A58
....................          putc(Txd_Buff[7]);
03430:  MOVF   x84,W
03432:  CALL   2A58
....................          putc(Txd_Buff[8]);
03436:  MOVF   x85,W
03438:  CALL   2A58
....................          putc(Txd_Buff[9]);
0343C:  MOVF   x86,W
0343E:  CALL   2A58
....................          putc(Txd_Buff[10]);
03442:  MOVF   x87,W
03444:  CALL   2A58
....................          putc(Txd_Buff[11]);
03448:  MOVF   x88,W
0344A:  CALL   2A58
....................          putc(Txd_Buff[12]);
0344E:  MOVF   x89,W
03450:  CALL   2A58
....................          putc(Txd_Buff[13]);
03454:  MOVF   x8A,W
03456:  CALL   2A58
....................          putc(Txd_Buff[14]);
0345A:  MOVF   x8B,W
0345C:  CALL   2A58
....................          putc(Txd_Buff[15]);
03460:  MOVF   x8C,W
03462:  CALL   2A58
....................          putc(Txd_Buff[16]);
03466:  MOVF   x8D,W
03468:  CALL   2A58
....................          putc(Txd_Buff[17]);
0346C:  MOVF   x8E,W
0346E:  CALL   2A58
....................          putc(Txd_Buff[18]);
03472:  MOVF   x8F,W
03474:  CALL   2A58
....................          putc(Txd_Buff[19]);
03478:  MOVF   x90,W
0347A:  CALL   2A58
....................          putc(Txd_Buff[20]);
0347E:  MOVF   x91,W
03480:  CALL   2A58
....................          putc(Txd_Buff[21]);
03484:  MOVF   x92,W
03486:  CALL   2A58
....................          putc(Txd_Buff[22]);
0348A:  MOVF   x93,W
0348C:  CALL   2A58
....................          putc(Txd_Buff[23]);
03490:  MOVF   x94,W
03492:  CALL   2A58
....................          putc(Txd_Buff[24]);
03496:  MOVF   x95,W
03498:  CALL   2A58
....................          putc(Txd_Buff[25]);
0349C:  MOVF   x96,W
0349E:  CALL   2A58
....................          putc(Txd_Buff[26]);
034A2:  MOVF   x97,W
034A4:  CALL   2A58
....................          putc(Txd_Buff[27]);
034A8:  MOVF   x98,W
034AA:  CALL   2A58
....................          putc(Txd_Buff[28]);
034AE:  MOVF   x99,W
034B0:  CALL   2A58
....................          putc(Txd_Buff[29]);
034B4:  MOVF   x9A,W
034B6:  CALL   2A58
....................          putc(Txd_Buff[30]);
034BA:  MOVF   x9B,W
034BC:  CALL   2A58
....................          putc(Txd_Buff[31]);
034C0:  MOVF   x9C,W
034C2:  CALL   2A58
....................          
....................          putc(Txd_Buff[32]);
034C6:  MOVF   x9D,W
034C8:  CALL   2A58
....................          putc(Txd_Buff[33]);
034CC:  MOVF   x9E,W
034CE:  CALL   2A58
....................          putc(Txd_Buff[34]);
034D2:  MOVF   x9F,W
034D4:  CALL   2A58
....................          putc(Txd_Buff[35]);
034D8:  MOVF   xA0,W
034DA:  CALL   2A58
....................          putc(Txd_Buff[36]);
034DE:  MOVF   xA1,W
034E0:  CALL   2A58
....................          putc(Txd_Buff[37]);
034E4:  MOVF   xA2,W
034E6:  CALL   2A58
....................          putc(Txd_Buff[38]);
034EA:  MOVF   xA3,W
034EC:  CALL   2A58
....................          putc(Txd_Buff[39]);
034F0:  MOVF   xA4,W
034F2:  CALL   2A58
....................          putc(Txd_Buff[40]);
034F6:  MOVF   xA5,W
034F8:  CALL   2A58
....................          putc(Txd_Buff[41]);
034FC:  MOVF   xA6,W
034FE:  CALL   2A58
....................          
....................          putc(Txd_Buff[42]);
03502:  MOVF   xA7,W
03504:  CALL   2A58
....................          putc(Txd_Buff[43]);
03508:  MOVF   xA8,W
0350A:  CALL   2A58
....................          putc(Txd_Buff[44]);
0350E:  MOVF   xA9,W
03510:  CALL   2A58
....................          putc(Txd_Buff[45]);
03514:  MOVF   xAA,W
03516:  CALL   2A58
....................          putc(Txd_Buff[46]);
0351A:  MOVF   xAB,W
0351C:  CALL   2A58
....................          putc(Txd_Buff[47]);
03520:  MOVF   xAC,W
03522:  CALL   2A58
....................          putc(Txd_Buff[48]);
03526:  MOVF   xAD,W
03528:  CALL   2A58
....................          putc(Txd_Buff[49]);
0352C:  MOVF   xAE,W
0352E:  CALL   2A58
....................          putc(Txd_Buff[50]);
03532:  MOVF   xAF,W
03534:  CALL   2A58
....................          putc(Txd_Buff[51]);
03538:  MOVF   xB0,W
0353A:  CALL   2A58
....................          
....................          putc(Txd_Buff[52]);
0353E:  MOVF   xB1,W
03540:  CALL   2A58
....................          putc(Txd_Buff[53]);
03544:  MOVF   xB2,W
03546:  CALL   2A58
....................        
....................          delay_ms(3);
0354A:  MOVLW  03
0354C:  MOVLB  C
0354E:  MOVWF  xBD
03550:  MOVLB  0
03552:  CALL   0658
....................          output_bit(P485ctrl,0);        
03556:  BCF    F8A.3
03558:  BCF    F93.3
0355A:  MOVLB  1
....................       }
....................    
....................    ///////////////////////////////////////////////////////////////
....................       if(RxD_Buff[0] == Address)
0355C:  MOVLB  0
0355E:  MOVF   x7B,W
03560:  MOVLB  1
03562:  SUBWF  x7C,W
03564:  BTFSS  FD8.2
03566:  GOTO   5B04
....................       {
....................       
....................          if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
0356A:  DECFSZ x7D,W
0356C:  BRA    3992
....................          {
....................                //Do Read Coil
....................                Start_Address = RxD_Buff[2] ;
0356E:  MOVLB  5
03570:  CLRF   x81
03572:  MOVFF  17E,580
....................                Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
03576:  MOVFF  580,581
0357A:  MOVLB  C
0357C:  CLRF   xBD
0357E:  MOVF   xBD,W
03580:  MOVLB  1
03582:  IORWF  x7F,W
03584:  MOVLB  5
03586:  MOVWF  x80
03588:  MOVLB  5
....................                No_PointCount = RxD_Buff[4] ;
0358A:  CLRF   x83
0358C:  MOVFF  180,582
....................                No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //No. of Point 16 bit
03590:  MOVFF  582,583
03594:  MOVLB  C
03596:  CLRF   xBD
03598:  MOVF   xBD,W
0359A:  MOVLB  1
0359C:  IORWF  x81,W
0359E:  MOVLB  5
035A0:  MOVWF  x82
035A2:  MOVLB  5
....................    
....................                if(Start_Address < 0x10 && (Start_Address + No_PointCount) < 0x11)  //Valid point 0-15
035A4:  MOVF   x81,F
035A6:  BTFSS  FD8.2
035A8:  BRA    3920
035AA:  MOVF   x80,W
035AC:  SUBLW  0F
035AE:  BTFSS  FD8.0
035B0:  BRA    3920
035B2:  MOVF   x82,W
035B4:  ADDWF  x80,W
035B6:  MOVLB  C
035B8:  MOVWF  xBD
035BA:  MOVLB  5
035BC:  MOVF   x83,W
035BE:  ADDWFC x81,W
035C0:  MOVLB  C
035C2:  MOVWF  xBE
035C4:  MOVF   xBE,F
035C6:  BTFSC  FD8.2
035C8:  BRA    35CE
035CA:  MOVLB  5
035CC:  BRA    3920
035CE:  MOVF   xBD,W
035D0:  SUBLW  10
035D2:  BTFSC  FD8.0
035D4:  BRA    35DA
035D6:  MOVLB  5
035D8:  BRA    3920
....................                {
....................                   if(No_PointCount < 9) Data_ByteCount = 0x01 ;
035DA:  MOVLB  5
035DC:  MOVF   x83,F
035DE:  BNZ   35EC
035E0:  MOVF   x82,W
035E2:  SUBLW  08
035E4:  BNC   35EC
035E6:  MOVLW  01
035E8:  MOVWF  x84
035EA:  BRA    3610
....................                   else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
035EC:  MOVF   x83,F
035EE:  BNZ   35FC
035F0:  MOVF   x82,W
035F2:  SUBLW  10
035F4:  BNC   35FC
035F6:  MOVLW  02
035F8:  MOVWF  x84
035FA:  BRA    3610
....................                   else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
035FC:  MOVF   x83,F
035FE:  BNZ   360C
03600:  MOVF   x82,W
03602:  SUBLW  18
03604:  BNC   360C
03606:  MOVLW  03
03608:  MOVWF  x84
0360A:  BRA    3610
....................                   else   Data_ByteCount = 0x01 ; //----Jack
0360C:  MOVLW  01
0360E:  MOVWF  x84
....................    
....................                   if(Data_ByteCount == 0x01)
03610:  DECFSZ x84,W
03612:  BRA    3758
....................                   {
....................    
....................                      if(Start_Address < 0x09)
03614:  MOVF   x81,F
03616:  BNZ   3632
03618:  MOVF   x80,W
0361A:  SUBLW  08
0361C:  BNC   3632
....................                      {
....................                         //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                         //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                         //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                          Data_Buff[0] = Input1_8 >> Start_Address ;
0361E:  MOVFF  4B,585
03622:  MOVF   x80,W
03624:  MOVWF  01
03626:  BZ    3630
03628:  BCF    FD8.0
0362A:  RRCF   x85,F
0362C:  DECFSZ 01,F
0362E:  BRA    3628
....................                          //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                          //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                      }
03630:  BRA    3666
....................                      else if(Start_Address > 0x08 && Start_Address < 0x10)
03632:  MOVF   x81,F
03634:  BNZ   363C
03636:  MOVF   x80,W
03638:  SUBLW  08
0363A:  BC    3666
0363C:  MOVF   x81,F
0363E:  BNZ   3666
03640:  MOVF   x80,W
03642:  SUBLW  0F
03644:  BNC   3666
....................                      {
....................                         //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                         Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
03646:  MOVLW  08
03648:  SUBWF  x80,W
0364A:  MOVWF  00
0364C:  MOVLW  00
0364E:  SUBWFB x81,W
03650:  MOVWF  03
03652:  MOVFF  00,01
03656:  MOVFF  4C,585
0365A:  MOVF   01,F
0365C:  BZ    3666
0365E:  BCF    FD8.0
03660:  RRCF   x85,F
03662:  DECFSZ 01,F
03664:  BRA    365E
....................                      }
....................    
....................    
....................                      if(No_PointCount == 0x08)
03666:  MOVF   x82,W
03668:  SUBLW  08
0366A:  BNZ   3672
0366C:  MOVF   x83,F
0366E:  BNZ   3672
....................                      {
....................                         Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                      }
03670:  BRA    36DC
....................                      else if(No_PointCount == 0x07)
03672:  MOVF   x82,W
03674:  SUBLW  07
03676:  BNZ   3680
03678:  MOVF   x83,F
0367A:  BNZ   3680
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
0367C:  BCF    x85.7
....................                      }
0367E:  BRA    36DC
....................                      else if(No_PointCount == 0x06)
03680:  MOVF   x82,W
03682:  SUBLW  06
03684:  BNZ   3690
03686:  MOVF   x83,F
03688:  BNZ   3690
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
0368A:  MOVLW  3F
0368C:  ANDWF  x85,F
....................                      }
0368E:  BRA    36DC
....................                      else if(No_PointCount == 0x05)
03690:  MOVF   x82,W
03692:  SUBLW  05
03694:  BNZ   36A0
03696:  MOVF   x83,F
03698:  BNZ   36A0
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
0369A:  MOVLW  1F
0369C:  ANDWF  x85,F
....................                      }
0369E:  BRA    36DC
....................                      else if(No_PointCount == 0x04)
036A0:  MOVF   x82,W
036A2:  SUBLW  04
036A4:  BNZ   36B0
036A6:  MOVF   x83,F
036A8:  BNZ   36B0
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
036AA:  MOVLW  0F
036AC:  ANDWF  x85,F
....................                      }
036AE:  BRA    36DC
....................                      else if(No_PointCount == 0x03)
036B0:  MOVF   x82,W
036B2:  SUBLW  03
036B4:  BNZ   36C0
036B6:  MOVF   x83,F
036B8:  BNZ   36C0
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
036BA:  MOVLW  07
036BC:  ANDWF  x85,F
....................                      }
036BE:  BRA    36DC
....................                      else if(No_PointCount == 0x02)
036C0:  MOVF   x82,W
036C2:  SUBLW  02
036C4:  BNZ   36D0
036C6:  MOVF   x83,F
036C8:  BNZ   36D0
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
036CA:  MOVLW  03
036CC:  ANDWF  x85,F
....................                      }
036CE:  BRA    36DC
....................                      else if(No_PointCount == 0x01)
036D0:  DECFSZ x82,W
036D2:  BRA    36DC
036D4:  MOVF   x83,F
036D6:  BNZ   36DC
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
036D8:  MOVLW  01
036DA:  ANDWF  x85,F
....................                      }
....................    
....................                      TxD_Buff[0] = Address ;         //Address
036DC:  MOVFF  7B,7D
....................                      TxD_Buff[1] = 0x01 ;         //Function Code
036E0:  MOVLW  01
036E2:  MOVLB  0
036E4:  MOVWF  x7E
....................                      TxD_Buff[2] = Data_ByteCount ;   //Byte Count
036E6:  MOVFF  584,7F
....................                      TxD_Buff[3] = Data_Buff[0] ;   //Data
036EA:  MOVFF  585,80
....................    
....................                      CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
036EE:  MOVLB  C
036F0:  CLRF   xBF
036F2:  MOVLW  7D
036F4:  MOVWF  xBE
036F6:  MOVLW  04
036F8:  MOVWF  xC0
036FA:  MOVLB  0
036FC:  CALL   2A02
....................    
....................                      TxD_Buff[4] = CRC_Hi ;
03700:  MOVFF  57D,81
....................                      TxD_Buff[5] = CRC_Lo ;
03704:  MOVFF  57C,82
....................    
....................                      //TxD_DataLen = 0x06 ;
....................                      //rs485_ctrl = 1;
....................                      //dmsec(4);
....................                      //send = 1;
....................                      //TI=1;
....................                      output_bit(P485ctrl,1);
03708:  BSF    F8A.3
0370A:  BCF    F93.3
....................                      restart_wdt();
0370C:  CLRWDT
....................                      delay_ms(4);
0370E:  MOVLW  04
03710:  MOVLB  C
03712:  MOVWF  xBD
03714:  MOVLB  0
03716:  CALL   0658
....................                      restart_wdt();
0371A:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
0371C:  MOVF   x7D,W
0371E:  CALL   2A58
....................                      putc(TxD_Buff[1]) ;               //Function Code
03722:  MOVF   x7E,W
03724:  CALL   2A58
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03728:  MOVF   x7F,W
0372A:  CALL   2A58
....................                      putc(TxD_Buff[3]) ;
0372E:  MOVF   x80,W
03730:  CALL   2A58
....................                      putc(TxD_Buff[4]) ;
03734:  MOVF   x81,W
03736:  CALL   2A58
....................                      putc(TxD_Buff[5]) ;
0373A:  MOVF   x82,W
0373C:  CALL   2A58
....................                      //putc(TxD_Buff[6]) ;
....................                      //putc(TxD_Buff[7]) ;
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................                   
....................                      restart_wdt();
03740:  CLRWDT
....................                      delay_ms(3);
03742:  MOVLW  03
03744:  MOVLB  C
03746:  MOVWF  xBD
03748:  MOVLB  0
0374A:  CALL   0658
....................                      restart_wdt();
0374E:  CLRWDT
....................                      output_bit(P485ctrl,0);
03750:  BCF    F8A.3
03752:  BCF    F93.3
....................                  
....................                   }
03754:  BRA    391C
03756:  MOVLB  5
....................                   else if(Data_ByteCount == 0x02)
03758:  MOVF   x84,W
0375A:  SUBLW  02
0375C:  BTFSS  FD8.2
0375E:  BRA    391E
....................                   {
....................                      //Data_Buff[1] = ~output[1] >> Start_Address ;
....................                      //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                      //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                      
....................                      //Data_Buff[1] = Output9_16 >> Start_Address ;//jj
....................                      //DataTemp = Output9_16 << (0x08 - Start_Address) ;//jj
....................                      //Data_Buff[0] = (Output1_8 >> Start_Address) | DataTemp;   //Low Byte//jj
....................                      Data_Buff[0] = Input1_8 >> Start_Address ;
03760:  MOVFF  4B,585
03764:  MOVF   x80,W
03766:  MOVWF  01
03768:  BZ    3772
0376A:  BCF    FD8.0
0376C:  RRCF   x85,F
0376E:  DECFSZ 01,F
03770:  BRA    376A
....................                      Data_Buff[1] = Input9_16 ;// >> Start_Address ;
03772:  MOVFF  4C,586
....................    
....................    
....................                      if((No_PointCount - 0x07) == 0x08)
03776:  MOVLW  07
03778:  SUBWF  x82,W
0377A:  MOVLB  C
0377C:  MOVWF  xBD
0377E:  MOVLW  00
03780:  MOVLB  5
03782:  SUBWFB x83,W
03784:  MOVLB  C
03786:  MOVWF  xBE
03788:  MOVF   xBD,W
0378A:  SUBLW  08
0378C:  BNZ   3794
0378E:  MOVF   xBE,F
03790:  BNZ   3794
....................                      {
....................                         Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                      }
03792:  BRA    389A
....................                      else if((No_PointCount - 0x07) == 0x07)
03794:  MOVLW  07
03796:  MOVLB  5
03798:  SUBWF  x82,W
0379A:  MOVLB  C
0379C:  MOVWF  xBD
0379E:  MOVLW  00
037A0:  MOVLB  5
037A2:  SUBWFB x83,W
037A4:  MOVLB  C
037A6:  MOVWF  xBE
037A8:  MOVF   xBD,W
037AA:  SUBLW  07
037AC:  BNZ   37B8
037AE:  MOVF   xBE,F
037B0:  BNZ   37B8
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
037B2:  MOVLB  5
037B4:  BCF    x86.7
....................                      }
037B6:  BRA    3898
....................                      else if((No_PointCount - 0x07) == 0x06)
037B8:  MOVLW  07
037BA:  MOVLB  5
037BC:  SUBWF  x82,W
037BE:  MOVLB  C
037C0:  MOVWF  xBD
037C2:  MOVLW  00
037C4:  MOVLB  5
037C6:  SUBWFB x83,W
037C8:  MOVLB  C
037CA:  MOVWF  xBE
037CC:  MOVF   xBD,W
037CE:  SUBLW  06
037D0:  BNZ   37DE
037D2:  MOVF   xBE,F
037D4:  BNZ   37DE
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
037D6:  MOVLW  3F
037D8:  MOVLB  5
037DA:  ANDWF  x86,F
....................                      }
037DC:  BRA    3898
....................                      else if((No_PointCount - 0x07) == 0x05)
037DE:  MOVLW  07
037E0:  MOVLB  5
037E2:  SUBWF  x82,W
037E4:  MOVLB  C
037E6:  MOVWF  xBD
037E8:  MOVLW  00
037EA:  MOVLB  5
037EC:  SUBWFB x83,W
037EE:  MOVLB  C
037F0:  MOVWF  xBE
037F2:  MOVF   xBD,W
037F4:  SUBLW  05
037F6:  BNZ   3804
037F8:  MOVF   xBE,F
037FA:  BNZ   3804
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
037FC:  MOVLW  1F
037FE:  MOVLB  5
03800:  ANDWF  x86,F
....................                      }
03802:  BRA    3898
....................                      else if((No_PointCount - 0x07) == 0x04)
03804:  MOVLW  07
03806:  MOVLB  5
03808:  SUBWF  x82,W
0380A:  MOVLB  C
0380C:  MOVWF  xBD
0380E:  MOVLW  00
03810:  MOVLB  5
03812:  SUBWFB x83,W
03814:  MOVLB  C
03816:  MOVWF  xBE
03818:  MOVF   xBD,W
0381A:  SUBLW  04
0381C:  BNZ   382A
0381E:  MOVF   xBE,F
03820:  BNZ   382A
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
03822:  MOVLW  0F
03824:  MOVLB  5
03826:  ANDWF  x86,F
....................                      }
03828:  BRA    3898
....................                      else if((No_PointCount - 0x07) == 0x03)
0382A:  MOVLW  07
0382C:  MOVLB  5
0382E:  SUBWF  x82,W
03830:  MOVLB  C
03832:  MOVWF  xBD
03834:  MOVLW  00
03836:  MOVLB  5
03838:  SUBWFB x83,W
0383A:  MOVLB  C
0383C:  MOVWF  xBE
0383E:  MOVF   xBD,W
03840:  SUBLW  03
03842:  BNZ   3850
03844:  MOVF   xBE,F
03846:  BNZ   3850
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
03848:  MOVLW  07
0384A:  MOVLB  5
0384C:  ANDWF  x86,F
....................                      }
0384E:  BRA    3898
....................                      else if((No_PointCount - 0x07) == 0x02)
03850:  MOVLW  07
03852:  MOVLB  5
03854:  SUBWF  x82,W
03856:  MOVLB  C
03858:  MOVWF  xBD
0385A:  MOVLW  00
0385C:  MOVLB  5
0385E:  SUBWFB x83,W
03860:  MOVLB  C
03862:  MOVWF  xBE
03864:  MOVF   xBD,W
03866:  SUBLW  02
03868:  BNZ   3876
0386A:  MOVF   xBE,F
0386C:  BNZ   3876
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
0386E:  MOVLW  03
03870:  MOVLB  5
03872:  ANDWF  x86,F
....................                      }
03874:  BRA    3898
....................                      else if((No_PointCount - 0x07) == 0x01)
03876:  MOVLW  07
03878:  MOVLB  5
0387A:  SUBWF  x82,W
0387C:  MOVLB  C
0387E:  MOVWF  xBD
03880:  MOVLW  00
03882:  MOVLB  5
03884:  SUBWFB x83,W
03886:  MOVLB  C
03888:  MOVWF  xBE
0388A:  DECFSZ xBD,W
0388C:  BRA    389A
0388E:  MOVF   xBE,F
03890:  BNZ   389A
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
03892:  MOVLW  01
03894:  MOVLB  5
03896:  ANDWF  x86,F
03898:  MOVLB  C
....................                      }
....................    
....................                      TxD_Buff[0] = Address ;         //Address
0389A:  MOVFF  7B,7D
....................                      TxD_Buff[1] = 0x01 ;         //Function Code
0389E:  MOVLW  01
038A0:  MOVLB  0
038A2:  MOVWF  x7E
....................                      TxD_Buff[2] = Data_ByteCount ;   //Byte Count
038A4:  MOVFF  584,7F
....................                      TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
038A8:  MOVFF  585,80
....................                      TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
038AC:  MOVFF  586,81
....................    
....................                      CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
038B0:  MOVLB  C
038B2:  CLRF   xBF
038B4:  MOVLW  7D
038B6:  MOVWF  xBE
038B8:  MOVLW  05
038BA:  MOVWF  xC0
038BC:  MOVLB  0
038BE:  CALL   2A02
....................    
....................                      TxD_Buff[5] = CRC_Hi ;
038C2:  MOVFF  57D,82
....................                      TxD_Buff[6] = CRC_Lo ;
038C6:  MOVFF  57C,83
....................    
....................                      //TxD_DataLen = 0x07 ;
....................                      //rs485_ctrl = 1;
....................                      //dmsec(4);
....................                      //send = 1;
....................                      //TI=1;
....................                      output_bit(P485ctrl,1);
038CA:  BSF    F8A.3
038CC:  BCF    F93.3
....................                      restart_wdt();
038CE:  CLRWDT
....................                      delay_ms(4);
038D0:  MOVLW  04
038D2:  MOVLB  C
038D4:  MOVWF  xBD
038D6:  MOVLB  0
038D8:  CALL   0658
....................                      restart_wdt();
038DC:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
038DE:  MOVF   x7D,W
038E0:  CALL   2A58
....................                      putc(TxD_Buff[1]) ;               //Function Code
038E4:  MOVF   x7E,W
038E6:  CALL   2A58
....................                      putc(TxD_Buff[2]) ;               //Byte Count
038EA:  MOVF   x7F,W
038EC:  CALL   2A58
....................                      putc(TxD_Buff[3]) ;
038F0:  MOVF   x80,W
038F2:  CALL   2A58
....................                      putc(TxD_Buff[4]) ;
038F6:  MOVF   x81,W
038F8:  CALL   2A58
....................                      putc(TxD_Buff[5]) ;
038FC:  MOVF   x82,W
038FE:  CALL   2A58
....................                      putc(TxD_Buff[6]) ;
03902:  MOVF   x83,W
03904:  CALL   2A58
....................                      //putc(TxD_Buff[7]) ;
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
03908:  CLRWDT
....................                      delay_ms(3);
0390A:  MOVLW  03
0390C:  MOVLB  C
0390E:  MOVWF  xBD
03910:  MOVLB  0
03912:  CALL   0658
....................                      restart_wdt();
03916:  CLRWDT
....................                      output_bit(P485ctrl,0);
03918:  BCF    F8A.3
0391A:  BCF    F93.3
0391C:  MOVLB  5
....................                  
....................                   }
....................                }
0391E:  BRA    3990
....................                else
....................                {
....................                   //invalid parameter
....................                   TxD_Buff[0] = Address ;         //Address
03920:  MOVFF  7B,7D
....................                   TxD_Buff[1] = 0x81 ;         //Function Code
03924:  MOVLW  81
03926:  MOVLB  0
03928:  MOVWF  x7E
....................                   TxD_Buff[2] = 0x02 ;         //illegal data address
0392A:  MOVLW  02
0392C:  MOVWF  x7F
....................    
....................                   CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
0392E:  MOVLB  C
03930:  CLRF   xBF
03932:  MOVLW  7D
03934:  MOVWF  xBE
03936:  MOVLW  03
03938:  MOVWF  xC0
0393A:  MOVLB  0
0393C:  CALL   2A02
....................    
....................                   TxD_Buff[3] = CRC_Hi ;
03940:  MOVFF  57D,80
....................                   TxD_Buff[4] = CRC_Lo ;
03944:  MOVFF  57C,81
....................    
....................                   //TxD_DataLen = 0x05 ;
....................                   //rs485_ctrl = 1;
....................                   //restart_wdt();
....................                   //dmsec(4);
....................                   //restart_wdt();
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
03948:  BSF    F8A.3
0394A:  BCF    F93.3
....................                   restart_wdt();
0394C:  CLRWDT
....................                   delay_ms(4);
0394E:  MOVLW  04
03950:  MOVLB  C
03952:  MOVWF  xBD
03954:  MOVLB  0
03956:  CALL   0658
....................                   restart_wdt();
0395A:  CLRWDT
....................    
....................                   putc(TxD_Buff[0]) ;               //Address
0395C:  MOVF   x7D,W
0395E:  CALL   2A58
....................                   putc(TxD_Buff[1]) ;               //Function Code
03962:  MOVF   x7E,W
03964:  CALL   2A58
....................                   putc(TxD_Buff[2]) ;               //Byte Count
03968:  MOVF   x7F,W
0396A:  CALL   2A58
....................                   putc(TxD_Buff[3]) ;
0396E:  MOVF   x80,W
03970:  CALL   2A58
....................                   putc(TxD_Buff[4]) ;
03974:  MOVF   x81,W
03976:  CALL   2A58
....................                  //putc(TxD_Buff[5]) ;
....................                   //putc(TxD_Buff[6]) ;
....................                   //putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
....................    
....................                   restart_wdt();
0397A:  CLRWDT
....................                   delay_ms(3);
0397C:  MOVLW  03
0397E:  MOVLB  C
03980:  MOVWF  xBD
03982:  MOVLB  0
03984:  CALL   0658
....................                   restart_wdt();
03988:  CLRWDT
....................                   output_bit(P485ctrl,0);
0398A:  BCF    F8A.3
0398C:  BCF    F93.3
0398E:  MOVLB  5
03990:  MOVLB  1
....................                   
....................                }
....................             }
....................    
....................     
....................          if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
03992:  MOVF   x7D,W
03994:  SUBLW  07
03996:  BTFSS  FD8.2
03998:  BRA    3AFC
....................          {
....................             alarmtosend();
0399A:  MOVLB  0
0399C:  GOTO   2A60
....................             
....................             disable_interrupts(INT_TIMER2);
039A0:  BCF    F9D.1
....................             //----------------------------------jj----------------------------//
....................             
....................                Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
039A2:  MOVFF  20,585
....................                Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
039A6:  MOVFF  21,586
....................                Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
039AA:  MOVFF  22,587
....................                Data_Buff[3] = Input25_32_Send ;
039AE:  MOVFF  23,588
....................                Data_Buff[4] = Input33_40_Send ;
039B2:  MOVFF  24,589
....................                Data_Buff[5] = Input41_48_Send ;
039B6:  MOVFF  25,58A
....................                Data_Buff[6] = Input49_56_Send ;
039BA:  MOVFF  26,58B
....................                Data_Buff[7] = Input57_64_Send ;
039BE:  MOVFF  27,58C
....................               
....................                Data_Buff[8] = Ack1_8_Send ;
039C2:  MOVFF  28,58D
....................                Data_Buff[9] = Ack9_16_Send ;
039C6:  MOVFF  29,58E
....................                Data_Buff[10] = Ack17_24_Send ;
039CA:  MOVFF  2A,58F
....................                Data_Buff[11] = Ack25_32_Send ;
039CE:  MOVFF  2B,590
....................                Data_Buff[12] = Ack33_40_Send ;
039D2:  MOVFF  2C,591
....................                Data_Buff[13] = Ack41_48_Send ;
039D6:  MOVFF  2D,592
....................                Data_Buff[14] = Ack49_56_Send ;
039DA:  MOVFF  2E,593
....................                Data_Buff[15] = Ack57_64_Send ;
039DE:  MOVFF  2F,594
....................       
....................                
....................                
....................                TxD_Buff[0] = Address ;         //Address
039E2:  MOVFF  7B,7D
....................                TxD_Buff[1] = 0x07 ;         //Function Code
039E6:  MOVLW  07
039E8:  MOVWF  x7E
....................                TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
039EA:  MOVLW  10
039EC:  MOVLB  5
039EE:  MOVWF  x84
039F0:  MOVFF  584,7F
....................                TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
039F4:  MOVFF  585,80
....................                TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
039F8:  MOVFF  586,81
....................                TxD_Buff[5] = Data_Buff[2] ;  
039FC:  MOVFF  587,82
....................                TxD_Buff[6] = Data_Buff[3] ;
03A00:  MOVFF  588,83
....................                TxD_Buff[7] = Data_Buff[4] ;
03A04:  MOVFF  589,84
....................                TxD_Buff[8] = Data_Buff[5] ;
03A08:  MOVFF  58A,85
....................                TxD_Buff[9] = Data_Buff[6] ;
03A0C:  MOVFF  58B,86
....................                TxD_Buff[10] = Data_Buff[7] ;
03A10:  MOVFF  58C,87
....................                  
....................               TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
03A14:  MOVFF  58D,88
....................               TxD_Buff[12] = Data_Buff[9] ;
03A18:  MOVFF  58E,89
....................               TxD_Buff[13] = Data_Buff[10] ;
03A1C:  MOVFF  58F,8A
....................               TxD_Buff[14] = Data_Buff[11] ;
03A20:  MOVFF  590,8B
....................               TxD_Buff[15] = Data_Buff[12] ;
03A24:  MOVFF  591,8C
....................               TxD_Buff[16] = Data_Buff[13] ;
03A28:  MOVFF  592,8D
....................               TxD_Buff[17] = Data_Buff[14] ;
03A2C:  MOVFF  593,8E
....................               TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
03A30:  MOVFF  594,8F
....................    
....................               CRC(TxD_Buff,19);            //Cal CRC 5 Byte
03A34:  MOVLB  C
03A36:  CLRF   xBF
03A38:  MOVLW  7D
03A3A:  MOVWF  xBE
03A3C:  MOVLW  13
03A3E:  MOVWF  xC0
03A40:  MOVLB  0
03A42:  CALL   2A02
....................    
....................              TxD_Buff[19] = CRC_Hi ;
03A46:  MOVFF  57D,90
....................              TxD_Buff[20] = CRC_Lo ;
03A4A:  MOVFF  57C,91
....................    
....................            
....................             output_bit(P485ctrl,1);
03A4E:  BSF    F8A.3
03A50:  BCF    F93.3
....................             restart_wdt();
03A52:  CLRWDT
....................             delay_ms(4);
03A54:  MOVLW  04
03A56:  MOVLB  C
03A58:  MOVWF  xBD
03A5A:  MOVLB  0
03A5C:  CALL   0658
....................             restart_wdt();
03A60:  CLRWDT
....................             
....................             
....................             
....................             putc(TxD_Buff[0]) ;               //Address
03A62:  MOVF   x7D,W
03A64:  CALL   2A58
....................             putc(TxD_Buff[1]) ;               //Function Code
03A68:  MOVF   x7E,W
03A6A:  CALL   2A58
....................             putc(TxD_Buff[2]) ;               //Byte Count
03A6E:  MOVF   x7F,W
03A70:  CALL   2A58
....................             putc(TxD_Buff[3]) ;
03A74:  MOVF   x80,W
03A76:  CALL   2A58
....................             putc(TxD_Buff[4]) ;
03A7A:  MOVF   x81,W
03A7C:  CALL   2A58
....................             putc(TxD_Buff[5]) ;
03A80:  MOVF   x82,W
03A82:  CALL   2A58
....................             putc(TxD_Buff[6]) ;
03A86:  MOVF   x83,W
03A88:  CALL   2A58
....................             putc(TxD_Buff[7]) ;
03A8C:  MOVF   x84,W
03A8E:  CALL   2A58
....................             putc(TxD_Buff[8]) ;
03A92:  MOVF   x85,W
03A94:  CALL   2A58
....................             putc(TxD_Buff[9]) ;
03A98:  MOVF   x86,W
03A9A:  CALL   2A58
....................             putc(TxD_Buff[10]) ;
03A9E:  MOVF   x87,W
03AA0:  CALL   2A58
....................             putc(TxD_Buff[11]) ;
03AA4:  MOVF   x88,W
03AA6:  CALL   2A58
....................             putc(TxD_Buff[12]) ;
03AAA:  MOVF   x89,W
03AAC:  CALL   2A58
....................             putc(TxD_Buff[13]) ;
03AB0:  MOVF   x8A,W
03AB2:  CALL   2A58
....................             putc(TxD_Buff[14]) ;
03AB6:  MOVF   x8B,W
03AB8:  CALL   2A58
....................             putc(TxD_Buff[15]) ;
03ABC:  MOVF   x8C,W
03ABE:  CALL   2A58
....................             putc(TxD_Buff[16]) ;
03AC2:  MOVF   x8D,W
03AC4:  CALL   2A58
....................             putc(TxD_Buff[17]) ;
03AC8:  MOVF   x8E,W
03ACA:  CALL   2A58
....................             putc(TxD_Buff[18]) ;
03ACE:  MOVF   x8F,W
03AD0:  CALL   2A58
....................             putc(TxD_Buff[19]) ;
03AD4:  MOVF   x90,W
03AD6:  CALL   2A58
....................             putc(TxD_Buff[20]) ;
03ADA:  MOVF   x91,W
03ADC:  CALL   2A58
....................    
....................             restart_wdt();
03AE0:  CLRWDT
....................             delay_ms(3);
03AE2:  MOVLW  03
03AE4:  MOVLB  C
03AE6:  MOVWF  xBD
03AE8:  MOVLB  0
03AEA:  CALL   0658
....................             restart_wdt();
03AEE:  CLRWDT
....................             output_bit(P485ctrl,0);
03AF0:  BCF    F8A.3
03AF2:  BCF    F93.3
....................               
....................            
....................             /////////////////////////////////////////
....................             
....................            enable_interrupts(INT_TIMER2); 
03AF4:  BSF    F9D.1
....................         
....................           }
03AF6:  GOTO   5A6E
03AFA:  MOVLB  1
....................    
....................           else if(RxD_Buff[1] == 0x05)///////////// FORCE COIL /////////////////////
03AFC:  MOVF   x7D,W
03AFE:  SUBLW  05
03B00:  BTFSS  FD8.2
03B02:  BRA    3FF0
....................           {
....................                //Do Force Coil
....................                Start_Address = RxD_Buff[2] ;
03B04:  MOVLB  5
03B06:  CLRF   x81
03B08:  MOVFF  17E,580
....................                Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Coil Address 16 bit
03B0C:  MOVFF  580,581
03B10:  MOVLB  C
03B12:  CLRF   xBD
03B14:  MOVF   xBD,W
03B16:  MOVLB  1
03B18:  IORWF  x7F,W
03B1A:  MOVLB  5
03B1C:  MOVWF  x80
03B1E:  MOVLB  5
....................                No_PointCount = RxD_Buff[4] ;
03B20:  CLRF   x83
03B22:  MOVFF  180,582
....................                No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //Force Data 16 bit FF00 = ON, 00FF = OFF
03B26:  MOVFF  582,583
03B2A:  MOVLB  C
03B2C:  CLRF   xBD
03B2E:  MOVF   xBD,W
03B30:  MOVLB  1
03B32:  IORWF  x81,W
03B34:  MOVLB  5
03B36:  MOVWF  x82
03B38:  MOVLB  5
....................    
....................                if(Start_Address == 0x00)   ////// Acknowlegde //////
03B3A:  MOVF   x80,F
03B3C:  BNZ   3BDC
03B3E:  MOVF   x81,F
03B40:  BNZ   3BDC
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
03B42:  MOVF   x82,F
03B44:  BNZ   3BDA
03B46:  INCFSZ x83,W
03B48:  BRA    3BDA
....................                   {
....................                      //Modbus_ACK = 1 ;
....................                      AutoAckFlag = 1;
03B4A:  BSF    1C.2
....................    
....................                      TxD_Buff[0] = Address ;         //Address
03B4C:  MOVFF  7B,7D
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
03B50:  MOVLW  05
03B52:  MOVLB  0
03B54:  MOVWF  x7E
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
03B56:  MOVFF  17E,7F
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
03B5A:  MOVFF  17F,80
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03B5E:  MOVFF  180,81
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03B62:  MOVFF  181,82
....................    
....................                      CRC(TxD_Buff,6);            //Cal CRC 6 Byte
03B66:  MOVLB  C
03B68:  CLRF   xBF
03B6A:  MOVLW  7D
03B6C:  MOVWF  xBE
03B6E:  MOVLW  06
03B70:  MOVWF  xC0
03B72:  MOVLB  0
03B74:  CALL   2A02
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
03B78:  MOVFF  57D,83
....................                      TxD_Buff[7] = CRC_Lo ;
03B7C:  MOVFF  57C,84
....................    
....................                  output_bit(P485ctrl,1);
03B80:  BSF    F8A.3
03B82:  BCF    F93.3
....................                      restart_wdt();
03B84:  CLRWDT
....................                      delay_ms(4);
03B86:  MOVLW  04
03B88:  MOVLB  C
03B8A:  MOVWF  xBD
03B8C:  MOVLB  0
03B8E:  CALL   0658
....................                      restart_wdt();
03B92:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
03B94:  MOVF   x7D,W
03B96:  CALL   2A58
....................                      putc(TxD_Buff[1]) ;               //Function Code
03B9A:  MOVF   x7E,W
03B9C:  CALL   2A58
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03BA0:  MOVF   x7F,W
03BA2:  CALL   2A58
....................                      putc(TxD_Buff[3]) ;
03BA6:  MOVF   x80,W
03BA8:  CALL   2A58
....................                      putc(TxD_Buff[4]) ;
03BAC:  MOVF   x81,W
03BAE:  CALL   2A58
....................                      putc(TxD_Buff[5]) ;
03BB2:  MOVF   x82,W
03BB4:  CALL   2A58
....................                      putc(TxD_Buff[6]) ;
03BB8:  MOVF   x83,W
03BBA:  CALL   2A58
....................                      putc(TxD_Buff[7]) ;
03BBE:  MOVF   x84,W
03BC0:  CALL   2A58
....................    
....................                      restart_wdt();
03BC4:  CLRWDT
....................                      delay_ms(3);
03BC6:  MOVLW  03
03BC8:  MOVLB  C
03BCA:  MOVWF  xBD
03BCC:  MOVLB  0
03BCE:  CALL   0658
....................                      restart_wdt();
03BD2:  CLRWDT
....................                      output_bit(P485ctrl,0);
03BD4:  BCF    F8A.3
03BD6:  BCF    F93.3
03BD8:  MOVLB  5
....................                  
....................                   }
....................                }
03BDA:  BRA    3FEA
....................                else if(Start_Address == 0x01)   ///// Reset //////
03BDC:  DECFSZ x80,W
03BDE:  BRA    3C7E
03BE0:  MOVF   x81,F
03BE2:  BNZ   3C7E
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
03BE4:  MOVF   x82,F
03BE6:  BNZ   3C7C
03BE8:  INCFSZ x83,W
03BEA:  BRA    3C7C
....................                   {
....................                      //Modbus_RET = 1 ;
....................                      AutoResetFlag = 1;
03BEC:  BSF    1C.3
....................                      
....................                      TxD_Buff[0] = Address ;         //Address
03BEE:  MOVFF  7B,7D
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
03BF2:  MOVLW  05
03BF4:  MOVLB  0
03BF6:  MOVWF  x7E
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
03BF8:  MOVFF  17E,7F
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
03BFC:  MOVFF  17F,80
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03C00:  MOVFF  180,81
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03C04:  MOVFF  181,82
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
03C08:  MOVLB  C
03C0A:  CLRF   xBF
03C0C:  MOVLW  7D
03C0E:  MOVWF  xBE
03C10:  MOVLW  06
03C12:  MOVWF  xC0
03C14:  MOVLB  0
03C16:  CALL   2A02
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
03C1A:  MOVFF  57D,83
....................                      TxD_Buff[7] = CRC_Lo ;
03C1E:  MOVFF  57C,84
....................    
....................                      output_bit(P485ctrl,1);
03C22:  BSF    F8A.3
03C24:  BCF    F93.3
....................                      restart_wdt();
03C26:  CLRWDT
....................                      delay_ms(4);
03C28:  MOVLW  04
03C2A:  MOVLB  C
03C2C:  MOVWF  xBD
03C2E:  MOVLB  0
03C30:  CALL   0658
....................                      restart_wdt();
03C34:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
03C36:  MOVF   x7D,W
03C38:  CALL   2A58
....................                      putc(TxD_Buff[1]) ;               //Function Code
03C3C:  MOVF   x7E,W
03C3E:  CALL   2A58
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03C42:  MOVF   x7F,W
03C44:  CALL   2A58
....................                      putc(TxD_Buff[3]) ;
03C48:  MOVF   x80,W
03C4A:  CALL   2A58
....................                      putc(TxD_Buff[4]) ;
03C4E:  MOVF   x81,W
03C50:  CALL   2A58
....................                      putc(TxD_Buff[5]) ;
03C54:  MOVF   x82,W
03C56:  CALL   2A58
....................                      putc(TxD_Buff[6]) ;
03C5A:  MOVF   x83,W
03C5C:  CALL   2A58
....................                      putc(TxD_Buff[7]) ;
03C60:  MOVF   x84,W
03C62:  CALL   2A58
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
03C66:  CLRWDT
....................                      delay_ms(3);
03C68:  MOVLW  03
03C6A:  MOVLB  C
03C6C:  MOVWF  xBD
03C6E:  MOVLB  0
03C70:  CALL   0658
....................                      restart_wdt();
03C74:  CLRWDT
....................                      output_bit(P485ctrl,0);
03C76:  BCF    F8A.3
03C78:  BCF    F93.3
03C7A:  MOVLB  5
....................                  
....................                   }
....................                }
03C7C:  BRA    3FEA
....................                else if(Start_Address == 0x02)   ///// Test //////
03C7E:  MOVF   x80,W
03C80:  SUBLW  02
03C82:  BTFSS  FD8.2
03C84:  BRA    3DD0
03C86:  MOVF   x81,F
03C88:  BTFSS  FD8.2
03C8A:  BRA    3DD0
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
03C8C:  MOVF   x82,F
03C8E:  BNZ   3D26
03C90:  INCFSZ x83,W
03C92:  BRA    3D26
....................                   {
....................                      //Modbus_Lamp_Test = 1 ;
....................                      AutoTestFlag = 1;
03C94:  BSF    1C.4
....................    
....................                      TxD_Buff[0] = Address ;         //Address
03C96:  MOVFF  7B,7D
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
03C9A:  MOVLW  05
03C9C:  MOVLB  0
03C9E:  MOVWF  x7E
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
03CA0:  MOVFF  17E,7F
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
03CA4:  MOVFF  17F,80
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03CA8:  MOVFF  180,81
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03CAC:  MOVFF  181,82
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
03CB0:  MOVLB  C
03CB2:  CLRF   xBF
03CB4:  MOVLW  7D
03CB6:  MOVWF  xBE
03CB8:  MOVLW  06
03CBA:  MOVWF  xC0
03CBC:  MOVLB  0
03CBE:  CALL   2A02
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
03CC2:  MOVFF  57D,83
....................                      TxD_Buff[7] = CRC_Lo ;
03CC6:  MOVFF  57C,84
....................    
....................                      output_bit(P485ctrl,1);
03CCA:  BSF    F8A.3
03CCC:  BCF    F93.3
....................                      restart_wdt();
03CCE:  CLRWDT
....................                      delay_ms(4);
03CD0:  MOVLW  04
03CD2:  MOVLB  C
03CD4:  MOVWF  xBD
03CD6:  MOVLB  0
03CD8:  CALL   0658
....................                      restart_wdt();
03CDC:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
03CDE:  MOVF   x7D,W
03CE0:  CALL   2A58
....................                      putc(TxD_Buff[1]) ;               //Function Code
03CE4:  MOVF   x7E,W
03CE6:  CALL   2A58
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03CEA:  MOVF   x7F,W
03CEC:  CALL   2A58
....................                      putc(TxD_Buff[3]) ;
03CF0:  MOVF   x80,W
03CF2:  CALL   2A58
....................                      putc(TxD_Buff[4]) ;
03CF6:  MOVF   x81,W
03CF8:  CALL   2A58
....................                      putc(TxD_Buff[5]) ;
03CFC:  MOVF   x82,W
03CFE:  CALL   2A58
....................                      putc(TxD_Buff[6]) ;
03D02:  MOVF   x83,W
03D04:  CALL   2A58
....................                      putc(TxD_Buff[7]) ;
03D08:  MOVF   x84,W
03D0A:  CALL   2A58
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
03D0E:  CLRWDT
....................                      delay_ms(3);
03D10:  MOVLW  03
03D12:  MOVLB  C
03D14:  MOVWF  xBD
03D16:  MOVLB  0
03D18:  CALL   0658
....................                      restart_wdt();
03D1C:  CLRWDT
....................                      output_bit(P485ctrl,0);
03D1E:  BCF    F8A.3
03D20:  BCF    F93.3
....................                 
....................                   }
03D22:  BRA    3DCC
03D24:  MOVLB  5
....................                   else if(No_PointCount == 0x00)   //OFF
03D26:  MOVF   x82,F
03D28:  BNZ   3DCE
03D2A:  MOVF   x83,F
03D2C:  BNZ   3DCE
....................                   {
....................                      //Modbus_Lamp_Test = 0 ;
....................                      AutoTestFlag = 0;
03D2E:  BCF    1C.4
....................                      Read_input();
03D30:  MOVLB  0
03D32:  CALL   1C72
....................                      AutoAckFlag = 1;
03D36:  BSF    1C.2
....................                      check_ack();
03D38:  CALL   2D30
....................                      AutoResetFlag = 1;
03D3C:  BSF    1C.3
....................                      check_reset();
03D3E:  CALL   2EA4
....................    
....................                      TxD_Buff[0] = Address ;         //Address
03D42:  MOVFF  7B,7D
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
03D46:  MOVLW  05
03D48:  MOVWF  x7E
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
03D4A:  MOVFF  17E,7F
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
03D4E:  MOVFF  17F,80
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03D52:  MOVFF  180,81
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03D56:  MOVFF  181,82
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
03D5A:  MOVLB  C
03D5C:  CLRF   xBF
03D5E:  MOVLW  7D
03D60:  MOVWF  xBE
03D62:  MOVLW  06
03D64:  MOVWF  xC0
03D66:  MOVLB  0
03D68:  CALL   2A02
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
03D6C:  MOVFF  57D,83
....................                      TxD_Buff[7] = CRC_Lo ;
03D70:  MOVFF  57C,84
....................    
....................                      output_bit(P485ctrl,1);
03D74:  BSF    F8A.3
03D76:  BCF    F93.3
....................                      restart_wdt();
03D78:  CLRWDT
....................                      delay_ms(4);
03D7A:  MOVLW  04
03D7C:  MOVLB  C
03D7E:  MOVWF  xBD
03D80:  MOVLB  0
03D82:  CALL   0658
....................                      restart_wdt();
03D86:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
03D88:  MOVF   x7D,W
03D8A:  CALL   2A58
....................                      putc(TxD_Buff[1]) ;               //Function Code
03D8E:  MOVF   x7E,W
03D90:  CALL   2A58
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03D94:  MOVF   x7F,W
03D96:  CALL   2A58
....................                      putc(TxD_Buff[3]) ;
03D9A:  MOVF   x80,W
03D9C:  CALL   2A58
....................                      putc(TxD_Buff[4]) ;
03DA0:  MOVF   x81,W
03DA2:  CALL   2A58
....................                      putc(TxD_Buff[5]) ;
03DA6:  MOVF   x82,W
03DA8:  CALL   2A58
....................                      putc(TxD_Buff[6]) ;
03DAC:  MOVF   x83,W
03DAE:  CALL   2A58
....................                      putc(TxD_Buff[7]) ;
03DB2:  MOVF   x84,W
03DB4:  CALL   2A58
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
03DB8:  CLRWDT
....................                      delay_ms(3);
03DBA:  MOVLW  03
03DBC:  MOVLB  C
03DBE:  MOVWF  xBD
03DC0:  MOVLB  0
03DC2:  CALL   0658
....................                      restart_wdt();
03DC6:  CLRWDT
....................                      output_bit(P485ctrl,0);
03DC8:  BCF    F8A.3
03DCA:  BCF    F93.3
03DCC:  MOVLB  5
....................                      
....................                   }
....................                }
03DCE:  BRA    3FEA
....................                else if(Start_Address == 0x03)   ///// Function Test //////
03DD0:  MOVF   x80,W
03DD2:  SUBLW  03
03DD4:  BTFSS  FD8.2
03DD6:  BRA    3F22
03DD8:  MOVF   x81,F
03DDA:  BTFSS  FD8.2
03DDC:  BRA    3F22
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
03DDE:  MOVF   x82,F
03DE0:  BNZ   3E78
03DE2:  INCFSZ x83,W
03DE4:  BRA    3E78
....................                   {
....................                      //Modbus_Lamp_Test = 1 ;
....................                      Test_fault = 1 ;
03DE6:  BSF    1C.5
....................    
....................                      TxD_Buff[0] = Address ;         //Address
03DE8:  MOVFF  7B,7D
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
03DEC:  MOVLW  05
03DEE:  MOVLB  0
03DF0:  MOVWF  x7E
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
03DF2:  MOVFF  17E,7F
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
03DF6:  MOVFF  17F,80
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03DFA:  MOVFF  180,81
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03DFE:  MOVFF  181,82
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
03E02:  MOVLB  C
03E04:  CLRF   xBF
03E06:  MOVLW  7D
03E08:  MOVWF  xBE
03E0A:  MOVLW  06
03E0C:  MOVWF  xC0
03E0E:  MOVLB  0
03E10:  CALL   2A02
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
03E14:  MOVFF  57D,83
....................                      TxD_Buff[7] = CRC_Lo ;
03E18:  MOVFF  57C,84
....................    
....................                      output_bit(P485ctrl,1);
03E1C:  BSF    F8A.3
03E1E:  BCF    F93.3
....................                      restart_wdt();
03E20:  CLRWDT
....................                      delay_ms(4);
03E22:  MOVLW  04
03E24:  MOVLB  C
03E26:  MOVWF  xBD
03E28:  MOVLB  0
03E2A:  CALL   0658
....................                      restart_wdt();
03E2E:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
03E30:  MOVF   x7D,W
03E32:  CALL   2A58
....................                      putc(TxD_Buff[1]) ;               //Function Code
03E36:  MOVF   x7E,W
03E38:  CALL   2A58
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03E3C:  MOVF   x7F,W
03E3E:  CALL   2A58
....................                      putc(TxD_Buff[3]) ;
03E42:  MOVF   x80,W
03E44:  CALL   2A58
....................                      putc(TxD_Buff[4]) ;
03E48:  MOVF   x81,W
03E4A:  CALL   2A58
....................                      putc(TxD_Buff[5]) ;
03E4E:  MOVF   x82,W
03E50:  CALL   2A58
....................                      putc(TxD_Buff[6]) ;
03E54:  MOVF   x83,W
03E56:  CALL   2A58
....................                      putc(TxD_Buff[7]) ;
03E5A:  MOVF   x84,W
03E5C:  CALL   2A58
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
03E60:  CLRWDT
....................                      delay_ms(10);
03E62:  MOVLW  0A
03E64:  MOVLB  C
03E66:  MOVWF  xBD
03E68:  MOVLB  0
03E6A:  CALL   0658
....................                      restart_wdt();
03E6E:  CLRWDT
....................                      output_bit(P485ctrl,0);
03E70:  BCF    F8A.3
03E72:  BCF    F93.3
....................                   }
03E74:  BRA    3F1E
03E76:  MOVLB  5
....................                   else if(No_PointCount == 0x00)   //OFF
03E78:  MOVF   x82,F
03E7A:  BNZ   3F20
03E7C:  MOVF   x83,F
03E7E:  BNZ   3F20
....................                   {
....................                      //Modbus_Lamp_Test = 0 ;
....................                      Test_fault = 0;
03E80:  BCF    1C.5
....................                      Read_input();
03E82:  MOVLB  0
03E84:  CALL   1C72
....................                      AutoAckFlag = 1;
03E88:  BSF    1C.2
....................                      check_ack();
03E8A:  CALL   2D30
....................                      AutoResetFlag = 1;
03E8E:  BSF    1C.3
....................                      check_reset();
03E90:  CALL   2EA4
....................    
....................                      TxD_Buff[0] = Address ;         //Address
03E94:  MOVFF  7B,7D
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
03E98:  MOVLW  05
03E9A:  MOVWF  x7E
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
03E9C:  MOVFF  17E,7F
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
03EA0:  MOVFF  17F,80
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03EA4:  MOVFF  180,81
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03EA8:  MOVFF  181,82
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
03EAC:  MOVLB  C
03EAE:  CLRF   xBF
03EB0:  MOVLW  7D
03EB2:  MOVWF  xBE
03EB4:  MOVLW  06
03EB6:  MOVWF  xC0
03EB8:  MOVLB  0
03EBA:  CALL   2A02
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
03EBE:  MOVFF  57D,83
....................                      TxD_Buff[7] = CRC_Lo ;
03EC2:  MOVFF  57C,84
....................    
....................                      output_bit(P485ctrl,1);
03EC6:  BSF    F8A.3
03EC8:  BCF    F93.3
....................                      restart_wdt();
03ECA:  CLRWDT
....................                      delay_ms(4);
03ECC:  MOVLW  04
03ECE:  MOVLB  C
03ED0:  MOVWF  xBD
03ED2:  MOVLB  0
03ED4:  CALL   0658
....................                      restart_wdt();
03ED8:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
03EDA:  MOVF   x7D,W
03EDC:  CALL   2A58
....................                      putc(TxD_Buff[1]) ;               //Function Code
03EE0:  MOVF   x7E,W
03EE2:  CALL   2A58
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03EE6:  MOVF   x7F,W
03EE8:  CALL   2A58
....................                      putc(TxD_Buff[3]) ;
03EEC:  MOVF   x80,W
03EEE:  CALL   2A58
....................                      putc(TxD_Buff[4]) ;
03EF2:  MOVF   x81,W
03EF4:  CALL   2A58
....................                      putc(TxD_Buff[5]) ;
03EF8:  MOVF   x82,W
03EFA:  CALL   2A58
....................                      putc(TxD_Buff[6]) ;
03EFE:  MOVF   x83,W
03F00:  CALL   2A58
....................                      putc(TxD_Buff[7]) ;
03F04:  MOVF   x84,W
03F06:  CALL   2A58
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
03F0A:  CLRWDT
....................                      delay_ms(3);
03F0C:  MOVLW  03
03F0E:  MOVLB  C
03F10:  MOVWF  xBD
03F12:  MOVLB  0
03F14:  CALL   0658
....................                      restart_wdt();
03F18:  CLRWDT
....................                      output_bit(P485ctrl,0);
03F1A:  BCF    F8A.3
03F1C:  BCF    F93.3
03F1E:  MOVLB  5
....................                      
....................                   }
....................                }
03F20:  BRA    3FEA
....................                else if(Start_Address == 0x64)   ///// Change Modbus Addr //////
03F22:  MOVF   x80,W
03F24:  SUBLW  64
03F26:  BNZ   3FEA
03F28:  MOVF   x81,F
03F2A:  BNZ   3FEA
....................                {
....................                   Address = No_PointCount;
03F2C:  MOVFF  582,7B
....................                   write_eeprom(0x1D,Address);   //Communication Address
03F30:  MOVF   FF2,W
03F32:  MOVWF  00
03F34:  BCF    FF2.7
03F36:  CLRF   FAA
03F38:  MOVLW  1D
03F3A:  MOVWF  FA9
03F3C:  MOVFF  7B,FA8
03F40:  BCF    FA6.6
03F42:  BCF    FA6.7
03F44:  BSF    FA6.2
03F46:  MOVLB  F
03F48:  MOVLW  55
03F4A:  MOVWF  FA7
03F4C:  MOVLW  AA
03F4E:  MOVWF  FA7
03F50:  BSF    FA6.1
03F52:  BTFSC  FA6.1
03F54:  BRA    3F52
03F56:  BCF    FA6.2
03F58:  MOVF   00,W
03F5A:  IORWF  FF2,F
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
03F5C:  MOVFF  7B,7D
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
03F60:  MOVLW  05
03F62:  MOVLB  0
03F64:  MOVWF  x7E
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
03F66:  MOVFF  17E,7F
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
03F6A:  MOVFF  17F,80
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03F6E:  MOVFF  180,81
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03F72:  MOVFF  181,82
....................    
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
03F76:  MOVLB  C
03F78:  CLRF   xBF
03F7A:  MOVLW  7D
03F7C:  MOVWF  xBE
03F7E:  MOVLW  06
03F80:  MOVWF  xC0
03F82:  MOVLB  0
03F84:  CALL   2A02
....................    
....................                   TxD_Buff[6] = CRC_Hi ;
03F88:  MOVFF  57D,83
....................                   TxD_Buff[7] = CRC_Lo ;
03F8C:  MOVFF  57C,84
....................    
....................                   output_bit(P485ctrl,1);
03F90:  BSF    F8A.3
03F92:  BCF    F93.3
....................                   restart_wdt();
03F94:  CLRWDT
....................                   delay_ms(4);
03F96:  MOVLW  04
03F98:  MOVLB  C
03F9A:  MOVWF  xBD
03F9C:  MOVLB  0
03F9E:  CALL   0658
....................                   restart_wdt();
03FA2:  CLRWDT
....................    
....................                   putc(TxD_Buff[0]) ;               //Address
03FA4:  MOVF   x7D,W
03FA6:  CALL   2A58
....................                   putc(TxD_Buff[1]) ;               //Function Code
03FAA:  MOVF   x7E,W
03FAC:  CALL   2A58
....................                   putc(TxD_Buff[2]) ;               //Byte Count
03FB0:  MOVF   x7F,W
03FB2:  CALL   2A58
....................                   putc(TxD_Buff[3]) ;
03FB6:  MOVF   x80,W
03FB8:  CALL   2A58
....................                   putc(TxD_Buff[4]) ;
03FBC:  MOVF   x81,W
03FBE:  CALL   2A58
....................                   putc(TxD_Buff[5]) ;
03FC2:  MOVF   x82,W
03FC4:  CALL   2A58
....................                   putc(TxD_Buff[6]) ;
03FC8:  MOVF   x83,W
03FCA:  CALL   2A58
....................                   putc(TxD_Buff[7]) ;
03FCE:  MOVF   x84,W
03FD0:  CALL   2A58
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
....................    
....................                   restart_wdt();
03FD4:  CLRWDT
....................                   delay_ms(3);
03FD6:  MOVLW  03
03FD8:  MOVLB  C
03FDA:  MOVWF  xBD
03FDC:  MOVLB  0
03FDE:  CALL   0658
....................                   restart_wdt();
03FE2:  CLRWDT
....................                   output_bit(P485ctrl,0);
03FE4:  BCF    F8A.3
03FE6:  BCF    F93.3
03FE8:  MOVLB  5
....................    
....................    
....................                   //save_addr();
....................                }
....................             }
03FEA:  GOTO   5A70
03FEE:  MOVLB  1
....................             //--------------------------------------------------//
....................    
....................             else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
03FF0:  MOVF   x7D,W
03FF2:  SUBLW  21
03FF4:  BTFSS  FD8.2
03FF6:  GOTO   495E
....................             {
....................    
....................                write_eeprom(0x00,0x0F);
03FFA:  MOVF   FF2,W
03FFC:  MOVWF  00
03FFE:  BCF    FF2.7
04000:  CLRF   FAA
04002:  CLRF   FA9
04004:  MOVLW  0F
04006:  MOVWF  FA8
04008:  BCF    FA6.6
0400A:  BCF    FA6.7
0400C:  BSF    FA6.2
0400E:  MOVLB  F
04010:  MOVLW  55
04012:  MOVWF  FA7
04014:  MOVLW  AA
04016:  MOVWF  FA7
04018:  BSF    FA6.1
0401A:  BTFSC  FA6.1
0401C:  BRA    401A
0401E:  BCF    FA6.2
04020:  MOVF   00,W
04022:  IORWF  FF2,F
....................    
....................                write_eeprom(0x01,RxD_Buff[3]);   //Input Type
04024:  MOVFF  FF2,00
04028:  BCF    FF2.7
0402A:  CLRF   FAA
0402C:  MOVLW  01
0402E:  MOVWF  FA9
04030:  MOVFF  17F,FA8
04034:  BCF    FA6.6
04036:  BCF    FA6.7
04038:  BSF    FA6.2
0403A:  MOVLW  55
0403C:  MOVWF  FA7
0403E:  MOVLW  AA
04040:  MOVWF  FA7
04042:  BSF    FA6.1
04044:  BTFSC  FA6.1
04046:  BRA    4044
04048:  BCF    FA6.2
0404A:  MOVF   00,W
0404C:  IORWF  FF2,F
....................                write_eeprom(0x02,RxD_Buff[4]);
0404E:  MOVFF  FF2,00
04052:  BCF    FF2.7
04054:  CLRF   FAA
04056:  MOVLW  02
04058:  MOVWF  FA9
0405A:  MOVFF  180,FA8
0405E:  BCF    FA6.6
04060:  BCF    FA6.7
04062:  BSF    FA6.2
04064:  MOVLW  55
04066:  MOVWF  FA7
04068:  MOVLW  AA
0406A:  MOVWF  FA7
0406C:  BSF    FA6.1
0406E:  BTFSC  FA6.1
04070:  BRA    406E
04072:  BCF    FA6.2
04074:  MOVF   00,W
04076:  IORWF  FF2,F
....................                write_eeprom(0x03,RxD_Buff[5]);
04078:  MOVFF  FF2,00
0407C:  BCF    FF2.7
0407E:  CLRF   FAA
04080:  MOVLW  03
04082:  MOVWF  FA9
04084:  MOVFF  181,FA8
04088:  BCF    FA6.6
0408A:  BCF    FA6.7
0408C:  BSF    FA6.2
0408E:  MOVLW  55
04090:  MOVWF  FA7
04092:  MOVLW  AA
04094:  MOVWF  FA7
04096:  BSF    FA6.1
04098:  BTFSC  FA6.1
0409A:  BRA    4098
0409C:  BCF    FA6.2
0409E:  MOVF   00,W
040A0:  IORWF  FF2,F
....................    
....................    
....................                write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
040A2:  MOVFF  FF2,00
040A6:  BCF    FF2.7
040A8:  CLRF   FAA
040AA:  MOVLW  04
040AC:  MOVWF  FA9
040AE:  MOVFF  182,FA8
040B2:  BCF    FA6.6
040B4:  BCF    FA6.7
040B6:  BSF    FA6.2
040B8:  MOVLW  55
040BA:  MOVWF  FA7
040BC:  MOVLW  AA
040BE:  MOVWF  FA7
040C0:  BSF    FA6.1
040C2:  BTFSC  FA6.1
040C4:  BRA    40C2
040C6:  BCF    FA6.2
040C8:  MOVF   00,W
040CA:  IORWF  FF2,F
....................                write_eeprom(0x05,RxD_Buff[7]);
040CC:  MOVFF  FF2,00
040D0:  BCF    FF2.7
040D2:  CLRF   FAA
040D4:  MOVLW  05
040D6:  MOVWF  FA9
040D8:  MOVFF  183,FA8
040DC:  BCF    FA6.6
040DE:  BCF    FA6.7
040E0:  BSF    FA6.2
040E2:  MOVLW  55
040E4:  MOVWF  FA7
040E6:  MOVLW  AA
040E8:  MOVWF  FA7
040EA:  BSF    FA6.1
040EC:  BTFSC  FA6.1
040EE:  BRA    40EC
040F0:  BCF    FA6.2
040F2:  MOVF   00,W
040F4:  IORWF  FF2,F
....................                write_eeprom(0x06,RxD_Buff[8]);
040F6:  MOVFF  FF2,00
040FA:  BCF    FF2.7
040FC:  CLRF   FAA
040FE:  MOVLW  06
04100:  MOVWF  FA9
04102:  MOVFF  184,FA8
04106:  BCF    FA6.6
04108:  BCF    FA6.7
0410A:  BSF    FA6.2
0410C:  MOVLW  55
0410E:  MOVWF  FA7
04110:  MOVLW  AA
04112:  MOVWF  FA7
04114:  BSF    FA6.1
04116:  BTFSC  FA6.1
04118:  BRA    4116
0411A:  BCF    FA6.2
0411C:  MOVF   00,W
0411E:  IORWF  FF2,F
....................    
....................                write_eeprom(0x07,RxD_Buff[9]);   //Output Type
04120:  MOVFF  FF2,00
04124:  BCF    FF2.7
04126:  CLRF   FAA
04128:  MOVLW  07
0412A:  MOVWF  FA9
0412C:  MOVFF  185,FA8
04130:  BCF    FA6.6
04132:  BCF    FA6.7
04134:  BSF    FA6.2
04136:  MOVLW  55
04138:  MOVWF  FA7
0413A:  MOVLW  AA
0413C:  MOVWF  FA7
0413E:  BSF    FA6.1
04140:  BTFSC  FA6.1
04142:  BRA    4140
04144:  BCF    FA6.2
04146:  MOVF   00,W
04148:  IORWF  FF2,F
....................                write_eeprom(0x08,RxD_Buff[10]);
0414A:  MOVFF  FF2,00
0414E:  BCF    FF2.7
04150:  CLRF   FAA
04152:  MOVLW  08
04154:  MOVWF  FA9
04156:  MOVFF  186,FA8
0415A:  BCF    FA6.6
0415C:  BCF    FA6.7
0415E:  BSF    FA6.2
04160:  MOVLW  55
04162:  MOVWF  FA7
04164:  MOVLW  AA
04166:  MOVWF  FA7
04168:  BSF    FA6.1
0416A:  BTFSC  FA6.1
0416C:  BRA    416A
0416E:  BCF    FA6.2
04170:  MOVF   00,W
04172:  IORWF  FF2,F
....................                write_eeprom(0x09,RxD_Buff[11]);
04174:  MOVFF  FF2,00
04178:  BCF    FF2.7
0417A:  CLRF   FAA
0417C:  MOVLW  09
0417E:  MOVWF  FA9
04180:  MOVFF  187,FA8
04184:  BCF    FA6.6
04186:  BCF    FA6.7
04188:  BSF    FA6.2
0418A:  MOVLW  55
0418C:  MOVWF  FA7
0418E:  MOVLW  AA
04190:  MOVWF  FA7
04192:  BSF    FA6.1
04194:  BTFSC  FA6.1
04196:  BRA    4194
04198:  BCF    FA6.2
0419A:  MOVF   00,W
0419C:  IORWF  FF2,F
....................    
....................                write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
0419E:  MOVFF  FF2,00
041A2:  BCF    FF2.7
041A4:  CLRF   FAA
041A6:  MOVLW  0A
041A8:  MOVWF  FA9
041AA:  MOVFF  188,FA8
041AE:  BCF    FA6.6
041B0:  BCF    FA6.7
041B2:  BSF    FA6.2
041B4:  MOVLW  55
041B6:  MOVWF  FA7
041B8:  MOVLW  AA
041BA:  MOVWF  FA7
041BC:  BSF    FA6.1
041BE:  BTFSC  FA6.1
041C0:  BRA    41BE
041C2:  BCF    FA6.2
041C4:  MOVF   00,W
041C6:  IORWF  FF2,F
....................                write_eeprom(0x0B,RxD_Buff[13]);
041C8:  MOVFF  FF2,00
041CC:  BCF    FF2.7
041CE:  CLRF   FAA
041D0:  MOVLW  0B
041D2:  MOVWF  FA9
041D4:  MOVFF  189,FA8
041D8:  BCF    FA6.6
041DA:  BCF    FA6.7
041DC:  BSF    FA6.2
041DE:  MOVLW  55
041E0:  MOVWF  FA7
041E2:  MOVLW  AA
041E4:  MOVWF  FA7
041E6:  BSF    FA6.1
041E8:  BTFSC  FA6.1
041EA:  BRA    41E8
041EC:  BCF    FA6.2
041EE:  MOVF   00,W
041F0:  IORWF  FF2,F
....................                write_eeprom(0x0C,RxD_Buff[14]);
041F2:  MOVFF  FF2,00
041F6:  BCF    FF2.7
041F8:  CLRF   FAA
041FA:  MOVLW  0C
041FC:  MOVWF  FA9
041FE:  MOVFF  18A,FA8
04202:  BCF    FA6.6
04204:  BCF    FA6.7
04206:  BSF    FA6.2
04208:  MOVLW  55
0420A:  MOVWF  FA7
0420C:  MOVLW  AA
0420E:  MOVWF  FA7
04210:  BSF    FA6.1
04212:  BTFSC  FA6.1
04214:  BRA    4212
04216:  BCF    FA6.2
04218:  MOVF   00,W
0421A:  IORWF  FF2,F
....................     
....................                write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
0421C:  MOVFF  FF2,00
04220:  BCF    FF2.7
04222:  CLRF   FAA
04224:  MOVLW  0D
04226:  MOVWF  FA9
04228:  MOVFF  18B,FA8
0422C:  BCF    FA6.6
0422E:  BCF    FA6.7
04230:  BSF    FA6.2
04232:  MOVLW  55
04234:  MOVWF  FA7
04236:  MOVLW  AA
04238:  MOVWF  FA7
0423A:  BSF    FA6.1
0423C:  BTFSC  FA6.1
0423E:  BRA    423C
04240:  BCF    FA6.2
04242:  MOVF   00,W
04244:  IORWF  FF2,F
....................                write_eeprom(0x0E,RxD_Buff[16]);
04246:  MOVFF  FF2,00
0424A:  BCF    FF2.7
0424C:  CLRF   FAA
0424E:  MOVLW  0E
04250:  MOVWF  FA9
04252:  MOVFF  18C,FA8
04256:  BCF    FA6.6
04258:  BCF    FA6.7
0425A:  BSF    FA6.2
0425C:  MOVLW  55
0425E:  MOVWF  FA7
04260:  MOVLW  AA
04262:  MOVWF  FA7
04264:  BSF    FA6.1
04266:  BTFSC  FA6.1
04268:  BRA    4266
0426A:  BCF    FA6.2
0426C:  MOVF   00,W
0426E:  IORWF  FF2,F
....................                write_eeprom(0x0F,RxD_Buff[17]);
04270:  MOVFF  FF2,00
04274:  BCF    FF2.7
04276:  CLRF   FAA
04278:  MOVLW  0F
0427A:  MOVWF  FA9
0427C:  MOVFF  18D,FA8
04280:  BCF    FA6.6
04282:  BCF    FA6.7
04284:  BSF    FA6.2
04286:  MOVLW  55
04288:  MOVWF  FA7
0428A:  MOVLW  AA
0428C:  MOVWF  FA7
0428E:  BSF    FA6.1
04290:  BTFSC  FA6.1
04292:  BRA    4290
04294:  BCF    FA6.2
04296:  MOVF   00,W
04298:  IORWF  FF2,F
....................    
....................                // LED Colour Config
....................                write_eeprom(0x10,RxD_Buff[18]); //Red1_8
0429A:  MOVFF  FF2,00
0429E:  BCF    FF2.7
042A0:  CLRF   FAA
042A2:  MOVLW  10
042A4:  MOVWF  FA9
042A6:  MOVFF  18E,FA8
042AA:  BCF    FA6.6
042AC:  BCF    FA6.7
042AE:  BSF    FA6.2
042B0:  MOVLW  55
042B2:  MOVWF  FA7
042B4:  MOVLW  AA
042B6:  MOVWF  FA7
042B8:  BSF    FA6.1
042BA:  BTFSC  FA6.1
042BC:  BRA    42BA
042BE:  BCF    FA6.2
042C0:  MOVF   00,W
042C2:  IORWF  FF2,F
....................                write_eeprom(0x11,RxD_Buff[19]); //Red9_10
042C4:  MOVFF  FF2,00
042C8:  BCF    FF2.7
042CA:  CLRF   FAA
042CC:  MOVLW  11
042CE:  MOVWF  FA9
042D0:  MOVFF  18F,FA8
042D4:  BCF    FA6.6
042D6:  BCF    FA6.7
042D8:  BSF    FA6.2
042DA:  MOVLW  55
042DC:  MOVWF  FA7
042DE:  MOVLW  AA
042E0:  MOVWF  FA7
042E2:  BSF    FA6.1
042E4:  BTFSC  FA6.1
042E6:  BRA    42E4
042E8:  BCF    FA6.2
042EA:  MOVF   00,W
042EC:  IORWF  FF2,F
....................                write_eeprom(0x12,RxD_Buff[20]); //Red11_18
042EE:  MOVFF  FF2,00
042F2:  BCF    FF2.7
042F4:  CLRF   FAA
042F6:  MOVLW  12
042F8:  MOVWF  FA9
042FA:  MOVFF  190,FA8
042FE:  BCF    FA6.6
04300:  BCF    FA6.7
04302:  BSF    FA6.2
04304:  MOVLW  55
04306:  MOVWF  FA7
04308:  MOVLW  AA
0430A:  MOVWF  FA7
0430C:  BSF    FA6.1
0430E:  BTFSC  FA6.1
04310:  BRA    430E
04312:  BCF    FA6.2
04314:  MOVF   00,W
04316:  IORWF  FF2,F
....................                write_eeprom(0x13,RxD_Buff[21]); //Red19_20
04318:  MOVFF  FF2,00
0431C:  BCF    FF2.7
0431E:  CLRF   FAA
04320:  MOVLW  13
04322:  MOVWF  FA9
04324:  MOVFF  191,FA8
04328:  BCF    FA6.6
0432A:  BCF    FA6.7
0432C:  BSF    FA6.2
0432E:  MOVLW  55
04330:  MOVWF  FA7
04332:  MOVLW  AA
04334:  MOVWF  FA7
04336:  BSF    FA6.1
04338:  BTFSC  FA6.1
0433A:  BRA    4338
0433C:  BCF    FA6.2
0433E:  MOVF   00,W
04340:  IORWF  FF2,F
....................                write_eeprom(0x14,RxD_Buff[22]); //Green1_8
04342:  MOVFF  FF2,00
04346:  BCF    FF2.7
04348:  CLRF   FAA
0434A:  MOVLW  14
0434C:  MOVWF  FA9
0434E:  MOVFF  192,FA8
04352:  BCF    FA6.6
04354:  BCF    FA6.7
04356:  BSF    FA6.2
04358:  MOVLW  55
0435A:  MOVWF  FA7
0435C:  MOVLW  AA
0435E:  MOVWF  FA7
04360:  BSF    FA6.1
04362:  BTFSC  FA6.1
04364:  BRA    4362
04366:  BCF    FA6.2
04368:  MOVF   00,W
0436A:  IORWF  FF2,F
....................                write_eeprom(0x15,RxD_Buff[23]); //Green9_10
0436C:  MOVFF  FF2,00
04370:  BCF    FF2.7
04372:  CLRF   FAA
04374:  MOVLW  15
04376:  MOVWF  FA9
04378:  MOVFF  193,FA8
0437C:  BCF    FA6.6
0437E:  BCF    FA6.7
04380:  BSF    FA6.2
04382:  MOVLW  55
04384:  MOVWF  FA7
04386:  MOVLW  AA
04388:  MOVWF  FA7
0438A:  BSF    FA6.1
0438C:  BTFSC  FA6.1
0438E:  BRA    438C
04390:  BCF    FA6.2
04392:  MOVF   00,W
04394:  IORWF  FF2,F
....................                write_eeprom(0x16,RxD_Buff[24]); //Green11_18
04396:  MOVFF  FF2,00
0439A:  BCF    FF2.7
0439C:  CLRF   FAA
0439E:  MOVLW  16
043A0:  MOVWF  FA9
043A2:  MOVFF  194,FA8
043A6:  BCF    FA6.6
043A8:  BCF    FA6.7
043AA:  BSF    FA6.2
043AC:  MOVLW  55
043AE:  MOVWF  FA7
043B0:  MOVLW  AA
043B2:  MOVWF  FA7
043B4:  BSF    FA6.1
043B6:  BTFSC  FA6.1
043B8:  BRA    43B6
043BA:  BCF    FA6.2
043BC:  MOVF   00,W
043BE:  IORWF  FF2,F
....................                write_eeprom(0x17,RxD_Buff[25]); //Green19_20
043C0:  MOVFF  FF2,00
043C4:  BCF    FF2.7
043C6:  CLRF   FAA
043C8:  MOVLW  17
043CA:  MOVWF  FA9
043CC:  MOVFF  195,FA8
043D0:  BCF    FA6.6
043D2:  BCF    FA6.7
043D4:  BSF    FA6.2
043D6:  MOVLW  55
043D8:  MOVWF  FA7
043DA:  MOVLW  AA
043DC:  MOVWF  FA7
043DE:  BSF    FA6.1
043E0:  BTFSC  FA6.1
043E2:  BRA    43E0
043E4:  BCF    FA6.2
043E6:  MOVF   00,W
043E8:  IORWF  FF2,F
....................                   
....................                write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
043EA:  MOVFF  FF2,00
043EE:  BCF    FF2.7
043F0:  CLRF   FAA
043F2:  MOVLW  18
043F4:  MOVWF  FA9
043F6:  MOVFF  196,FA8
043FA:  BCF    FA6.6
043FC:  BCF    FA6.7
043FE:  BSF    FA6.2
04400:  MOVLW  55
04402:  MOVWF  FA7
04404:  MOVLW  AA
04406:  MOVWF  FA7
04408:  BSF    FA6.1
0440A:  BTFSC  FA6.1
0440C:  BRA    440A
0440E:  BCF    FA6.2
04410:  MOVF   00,W
04412:  IORWF  FF2,F
....................                write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
04414:  MOVFF  FF2,00
04418:  BCF    FF2.7
0441A:  CLRF   FAA
0441C:  MOVLW  19
0441E:  MOVWF  FA9
04420:  MOVFF  197,FA8
04424:  BCF    FA6.6
04426:  BCF    FA6.7
04428:  BSF    FA6.2
0442A:  MOVLW  55
0442C:  MOVWF  FA7
0442E:  MOVLW  AA
04430:  MOVWF  FA7
04432:  BSF    FA6.1
04434:  BTFSC  FA6.1
04436:  BRA    4434
04438:  BCF    FA6.2
0443A:  MOVF   00,W
0443C:  IORWF  FF2,F
....................                write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
0443E:  MOVFF  FF2,00
04442:  BCF    FF2.7
04444:  CLRF   FAA
04446:  MOVLW  1A
04448:  MOVWF  FA9
0444A:  MOVFF  198,FA8
0444E:  BCF    FA6.6
04450:  BCF    FA6.7
04452:  BSF    FA6.2
04454:  MOVLW  55
04456:  MOVWF  FA7
04458:  MOVLW  AA
0445A:  MOVWF  FA7
0445C:  BSF    FA6.1
0445E:  BTFSC  FA6.1
04460:  BRA    445E
04462:  BCF    FA6.2
04464:  MOVF   00,W
04466:  IORWF  FF2,F
....................                write_eeprom(0x1B,RxD_Buff[29]);   //No of point
04468:  MOVFF  FF2,00
0446C:  BCF    FF2.7
0446E:  CLRF   FAA
04470:  MOVLW  1B
04472:  MOVWF  FA9
04474:  MOVFF  199,FA8
04478:  BCF    FA6.6
0447A:  BCF    FA6.7
0447C:  BSF    FA6.2
0447E:  MOVLW  55
04480:  MOVWF  FA7
04482:  MOVLW  AA
04484:  MOVWF  FA7
04486:  BSF    FA6.1
04488:  BTFSC  FA6.1
0448A:  BRA    4488
0448C:  BCF    FA6.2
0448E:  MOVF   00,W
04490:  IORWF  FF2,F
....................                write_eeprom(0x1C,RxD_Buff[30]);   //Master / Slave
04492:  MOVFF  FF2,00
04496:  BCF    FF2.7
04498:  CLRF   FAA
0449A:  MOVLW  1C
0449C:  MOVWF  FA9
0449E:  MOVFF  19A,FA8
044A2:  BCF    FA6.6
044A4:  BCF    FA6.7
044A6:  BSF    FA6.2
044A8:  MOVLW  55
044AA:  MOVWF  FA7
044AC:  MOVLW  AA
044AE:  MOVWF  FA7
044B0:  BSF    FA6.1
044B2:  BTFSC  FA6.1
044B4:  BRA    44B2
044B6:  BCF    FA6.2
044B8:  MOVF   00,W
044BA:  IORWF  FF2,F
....................                write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
044BC:  MOVFF  FF2,00
044C0:  BCF    FF2.7
044C2:  CLRF   FAA
044C4:  MOVLW  1D
044C6:  MOVWF  FA9
044C8:  MOVFF  19B,FA8
044CC:  BCF    FA6.6
044CE:  BCF    FA6.7
044D0:  BSF    FA6.2
044D2:  MOVLW  55
044D4:  MOVWF  FA7
044D6:  MOVLW  AA
044D8:  MOVWF  FA7
044DA:  BSF    FA6.1
044DC:  BTFSC  FA6.1
044DE:  BRA    44DC
044E0:  BCF    FA6.2
044E2:  MOVF   00,W
044E4:  IORWF  FF2,F
....................    
....................                write_eeprom(0x1E,RxD_Buff[32]);   //Communication Address
044E6:  MOVFF  FF2,00
044EA:  BCF    FF2.7
044EC:  CLRF   FAA
044EE:  MOVLW  1E
044F0:  MOVWF  FA9
044F2:  MOVFF  19C,FA8
044F6:  BCF    FA6.6
044F8:  BCF    FA6.7
044FA:  BSF    FA6.2
044FC:  MOVLW  55
044FE:  MOVWF  FA7
04500:  MOVLW  AA
04502:  MOVWF  FA7
04504:  BSF    FA6.1
04506:  BTFSC  FA6.1
04508:  BRA    4506
0450A:  BCF    FA6.2
0450C:  MOVF   00,W
0450E:  IORWF  FF2,F
....................                write_eeprom(0x1F,RxD_Buff[33]);   //Communication Address
04510:  MOVFF  FF2,00
04514:  BCF    FF2.7
04516:  CLRF   FAA
04518:  MOVLW  1F
0451A:  MOVWF  FA9
0451C:  MOVFF  19D,FA8
04520:  BCF    FA6.6
04522:  BCF    FA6.7
04524:  BSF    FA6.2
04526:  MOVLW  55
04528:  MOVWF  FA7
0452A:  MOVLW  AA
0452C:  MOVWF  FA7
0452E:  BSF    FA6.1
04530:  BTFSC  FA6.1
04532:  BRA    4530
04534:  BCF    FA6.2
04536:  MOVF   00,W
04538:  IORWF  FF2,F
....................                write_eeprom(0x20,RxD_Buff[34]);   //Communication Address
0453A:  MOVFF  FF2,00
0453E:  BCF    FF2.7
04540:  CLRF   FAA
04542:  MOVLW  20
04544:  MOVWF  FA9
04546:  MOVFF  19E,FA8
0454A:  BCF    FA6.6
0454C:  BCF    FA6.7
0454E:  BSF    FA6.2
04550:  MOVLW  55
04552:  MOVWF  FA7
04554:  MOVLW  AA
04556:  MOVWF  FA7
04558:  BSF    FA6.1
0455A:  BTFSC  FA6.1
0455C:  BRA    455A
0455E:  BCF    FA6.2
04560:  MOVF   00,W
04562:  IORWF  FF2,F
....................                write_eeprom(0x21,RxD_Buff[35]);   //Communication Address
04564:  MOVFF  FF2,00
04568:  BCF    FF2.7
0456A:  CLRF   FAA
0456C:  MOVLW  21
0456E:  MOVWF  FA9
04570:  MOVFF  19F,FA8
04574:  BCF    FA6.6
04576:  BCF    FA6.7
04578:  BSF    FA6.2
0457A:  MOVLW  55
0457C:  MOVWF  FA7
0457E:  MOVLW  AA
04580:  MOVWF  FA7
04582:  BSF    FA6.1
04584:  BTFSC  FA6.1
04586:  BRA    4584
04588:  BCF    FA6.2
0458A:  MOVF   00,W
0458C:  IORWF  FF2,F
....................                write_eeprom(0x22,RxD_Buff[36]);   //Communication Address
0458E:  MOVFF  FF2,00
04592:  BCF    FF2.7
04594:  CLRF   FAA
04596:  MOVLW  22
04598:  MOVWF  FA9
0459A:  MOVFF  1A0,FA8
0459E:  BCF    FA6.6
045A0:  BCF    FA6.7
045A2:  BSF    FA6.2
045A4:  MOVLW  55
045A6:  MOVWF  FA7
045A8:  MOVLW  AA
045AA:  MOVWF  FA7
045AC:  BSF    FA6.1
045AE:  BTFSC  FA6.1
045B0:  BRA    45AE
045B2:  BCF    FA6.2
045B4:  MOVF   00,W
045B6:  IORWF  FF2,F
....................                write_eeprom(0x23,RxD_Buff[37]);   //Communication Address
045B8:  MOVFF  FF2,00
045BC:  BCF    FF2.7
045BE:  CLRF   FAA
045C0:  MOVLW  23
045C2:  MOVWF  FA9
045C4:  MOVFF  1A1,FA8
045C8:  BCF    FA6.6
045CA:  BCF    FA6.7
045CC:  BSF    FA6.2
045CE:  MOVLW  55
045D0:  MOVWF  FA7
045D2:  MOVLW  AA
045D4:  MOVWF  FA7
045D6:  BSF    FA6.1
045D8:  BTFSC  FA6.1
045DA:  BRA    45D8
045DC:  BCF    FA6.2
045DE:  MOVF   00,W
045E0:  IORWF  FF2,F
....................                write_eeprom(0x24,RxD_Buff[38]);   //Communication Address
045E2:  MOVFF  FF2,00
045E6:  BCF    FF2.7
045E8:  CLRF   FAA
045EA:  MOVLW  24
045EC:  MOVWF  FA9
045EE:  MOVFF  1A2,FA8
045F2:  BCF    FA6.6
045F4:  BCF    FA6.7
045F6:  BSF    FA6.2
045F8:  MOVLW  55
045FA:  MOVWF  FA7
045FC:  MOVLW  AA
045FE:  MOVWF  FA7
04600:  BSF    FA6.1
04602:  BTFSC  FA6.1
04604:  BRA    4602
04606:  BCF    FA6.2
04608:  MOVF   00,W
0460A:  IORWF  FF2,F
....................                write_eeprom(0x25,RxD_Buff[39]);   //Communication Address
0460C:  MOVFF  FF2,00
04610:  BCF    FF2.7
04612:  CLRF   FAA
04614:  MOVLW  25
04616:  MOVWF  FA9
04618:  MOVFF  1A3,FA8
0461C:  BCF    FA6.6
0461E:  BCF    FA6.7
04620:  BSF    FA6.2
04622:  MOVLW  55
04624:  MOVWF  FA7
04626:  MOVLW  AA
04628:  MOVWF  FA7
0462A:  BSF    FA6.1
0462C:  BTFSC  FA6.1
0462E:  BRA    462C
04630:  BCF    FA6.2
04632:  MOVF   00,W
04634:  IORWF  FF2,F
....................                write_eeprom(0x26,RxD_Buff[40]);   //Communication Address
04636:  MOVFF  FF2,00
0463A:  BCF    FF2.7
0463C:  CLRF   FAA
0463E:  MOVLW  26
04640:  MOVWF  FA9
04642:  MOVFF  1A4,FA8
04646:  BCF    FA6.6
04648:  BCF    FA6.7
0464A:  BSF    FA6.2
0464C:  MOVLW  55
0464E:  MOVWF  FA7
04650:  MOVLW  AA
04652:  MOVWF  FA7
04654:  BSF    FA6.1
04656:  BTFSC  FA6.1
04658:  BRA    4656
0465A:  BCF    FA6.2
0465C:  MOVF   00,W
0465E:  IORWF  FF2,F
....................                write_eeprom(0x27,RxD_Buff[41]);   //Communication Address
04660:  MOVFF  FF2,00
04664:  BCF    FF2.7
04666:  CLRF   FAA
04668:  MOVLW  27
0466A:  MOVWF  FA9
0466C:  MOVFF  1A5,FA8
04670:  BCF    FA6.6
04672:  BCF    FA6.7
04674:  BSF    FA6.2
04676:  MOVLW  55
04678:  MOVWF  FA7
0467A:  MOVLW  AA
0467C:  MOVWF  FA7
0467E:  BSF    FA6.1
04680:  BTFSC  FA6.1
04682:  BRA    4680
04684:  BCF    FA6.2
04686:  MOVF   00,W
04688:  IORWF  FF2,F
....................                write_eeprom(0x28,RxD_Buff[42]);   //Communication Address
0468A:  MOVFF  FF2,00
0468E:  BCF    FF2.7
04690:  CLRF   FAA
04692:  MOVLW  28
04694:  MOVWF  FA9
04696:  MOVFF  1A6,FA8
0469A:  BCF    FA6.6
0469C:  BCF    FA6.7
0469E:  BSF    FA6.2
046A0:  MOVLW  55
046A2:  MOVWF  FA7
046A4:  MOVLW  AA
046A6:  MOVWF  FA7
046A8:  BSF    FA6.1
046AA:  BTFSC  FA6.1
046AC:  BRA    46AA
046AE:  BCF    FA6.2
046B0:  MOVF   00,W
046B2:  IORWF  FF2,F
....................                write_eeprom(0x29,RxD_Buff[43]);   //Communication Address
046B4:  MOVFF  FF2,00
046B8:  BCF    FF2.7
046BA:  CLRF   FAA
046BC:  MOVLW  29
046BE:  MOVWF  FA9
046C0:  MOVFF  1A7,FA8
046C4:  BCF    FA6.6
046C6:  BCF    FA6.7
046C8:  BSF    FA6.2
046CA:  MOVLW  55
046CC:  MOVWF  FA7
046CE:  MOVLW  AA
046D0:  MOVWF  FA7
046D2:  BSF    FA6.1
046D4:  BTFSC  FA6.1
046D6:  BRA    46D4
046D8:  BCF    FA6.2
046DA:  MOVF   00,W
046DC:  IORWF  FF2,F
....................                write_eeprom(0x2A,RxD_Buff[44]);   //Communication Address
046DE:  MOVFF  FF2,00
046E2:  BCF    FF2.7
046E4:  CLRF   FAA
046E6:  MOVLW  2A
046E8:  MOVWF  FA9
046EA:  MOVFF  1A8,FA8
046EE:  BCF    FA6.6
046F0:  BCF    FA6.7
046F2:  BSF    FA6.2
046F4:  MOVLW  55
046F6:  MOVWF  FA7
046F8:  MOVLW  AA
046FA:  MOVWF  FA7
046FC:  BSF    FA6.1
046FE:  BTFSC  FA6.1
04700:  BRA    46FE
04702:  BCF    FA6.2
04704:  MOVF   00,W
04706:  IORWF  FF2,F
....................                write_eeprom(0x2B,RxD_Buff[45]);   //Communication Address
04708:  MOVFF  FF2,00
0470C:  BCF    FF2.7
0470E:  CLRF   FAA
04710:  MOVLW  2B
04712:  MOVWF  FA9
04714:  MOVFF  1A9,FA8
04718:  BCF    FA6.6
0471A:  BCF    FA6.7
0471C:  BSF    FA6.2
0471E:  MOVLW  55
04720:  MOVWF  FA7
04722:  MOVLW  AA
04724:  MOVWF  FA7
04726:  BSF    FA6.1
04728:  BTFSC  FA6.1
0472A:  BRA    4728
0472C:  BCF    FA6.2
0472E:  MOVF   00,W
04730:  IORWF  FF2,F
....................                write_eeprom(0x2C,RxD_Buff[46]);   //Communication Address
04732:  MOVFF  FF2,00
04736:  BCF    FF2.7
04738:  CLRF   FAA
0473A:  MOVLW  2C
0473C:  MOVWF  FA9
0473E:  MOVFF  1AA,FA8
04742:  BCF    FA6.6
04744:  BCF    FA6.7
04746:  BSF    FA6.2
04748:  MOVLW  55
0474A:  MOVWF  FA7
0474C:  MOVLW  AA
0474E:  MOVWF  FA7
04750:  BSF    FA6.1
04752:  BTFSC  FA6.1
04754:  BRA    4752
04756:  BCF    FA6.2
04758:  MOVF   00,W
0475A:  IORWF  FF2,F
....................                write_eeprom(0x2D,RxD_Buff[47]);   //Communication Address
0475C:  MOVFF  FF2,00
04760:  BCF    FF2.7
04762:  CLRF   FAA
04764:  MOVLW  2D
04766:  MOVWF  FA9
04768:  MOVFF  1AB,FA8
0476C:  BCF    FA6.6
0476E:  BCF    FA6.7
04770:  BSF    FA6.2
04772:  MOVLW  55
04774:  MOVWF  FA7
04776:  MOVLW  AA
04778:  MOVWF  FA7
0477A:  BSF    FA6.1
0477C:  BTFSC  FA6.1
0477E:  BRA    477C
04780:  BCF    FA6.2
04782:  MOVF   00,W
04784:  IORWF  FF2,F
....................                write_eeprom(0x2E,RxD_Buff[48]);   //Communication Address
04786:  MOVFF  FF2,00
0478A:  BCF    FF2.7
0478C:  CLRF   FAA
0478E:  MOVLW  2E
04790:  MOVWF  FA9
04792:  MOVFF  1AC,FA8
04796:  BCF    FA6.6
04798:  BCF    FA6.7
0479A:  BSF    FA6.2
0479C:  MOVLW  55
0479E:  MOVWF  FA7
047A0:  MOVLW  AA
047A2:  MOVWF  FA7
047A4:  BSF    FA6.1
047A6:  BTFSC  FA6.1
047A8:  BRA    47A6
047AA:  BCF    FA6.2
047AC:  MOVF   00,W
047AE:  IORWF  FF2,F
....................                write_eeprom(0x2F,RxD_Buff[49]);   //Communication Address
047B0:  MOVFF  FF2,00
047B4:  BCF    FF2.7
047B6:  CLRF   FAA
047B8:  MOVLW  2F
047BA:  MOVWF  FA9
047BC:  MOVFF  1AD,FA8
047C0:  BCF    FA6.6
047C2:  BCF    FA6.7
047C4:  BSF    FA6.2
047C6:  MOVLW  55
047C8:  MOVWF  FA7
047CA:  MOVLW  AA
047CC:  MOVWF  FA7
047CE:  BSF    FA6.1
047D0:  BTFSC  FA6.1
047D2:  BRA    47D0
047D4:  BCF    FA6.2
047D6:  MOVF   00,W
047D8:  IORWF  FF2,F
....................                write_eeprom(0x30,RxD_Buff[50]);   //Communication Address
047DA:  MOVFF  FF2,00
047DE:  BCF    FF2.7
047E0:  CLRF   FAA
047E2:  MOVLW  30
047E4:  MOVWF  FA9
047E6:  MOVFF  1AE,FA8
047EA:  BCF    FA6.6
047EC:  BCF    FA6.7
047EE:  BSF    FA6.2
047F0:  MOVLW  55
047F2:  MOVWF  FA7
047F4:  MOVLW  AA
047F6:  MOVWF  FA7
047F8:  BSF    FA6.1
047FA:  BTFSC  FA6.1
047FC:  BRA    47FA
047FE:  BCF    FA6.2
04800:  MOVF   00,W
04802:  IORWF  FF2,F
....................                write_eeprom(0x31,RxD_Buff[51]);   //Communication Address
04804:  MOVFF  FF2,00
04808:  BCF    FF2.7
0480A:  CLRF   FAA
0480C:  MOVLW  31
0480E:  MOVWF  FA9
04810:  MOVFF  1AF,FA8
04814:  BCF    FA6.6
04816:  BCF    FA6.7
04818:  BSF    FA6.2
0481A:  MOVLW  55
0481C:  MOVWF  FA7
0481E:  MOVLW  AA
04820:  MOVWF  FA7
04822:  BSF    FA6.1
04824:  BTFSC  FA6.1
04826:  BRA    4824
04828:  BCF    FA6.2
0482A:  MOVF   00,W
0482C:  IORWF  FF2,F
....................                
....................                int16  a = 0; 
....................                unsigned char  phonenum;
0482E:  MOVLB  C
04830:  CLRF   xB5
04832:  CLRF   xB4
....................                for(; ; a++)
....................                {
....................                   restart_wdt();
04834:  CLRWDT
....................                   phonenum = RxD_Buff[52 + a];
04836:  MOVLW  B0
04838:  ADDWF  xB4,W
0483A:  MOVWF  FE9
0483C:  MOVLW  01
0483E:  ADDWFC xB5,W
04840:  MOVWF  FEA
04842:  MOVFF  FEF,CB6
....................                   if((phonenum == 0x0D) || (a > 15))
04846:  MOVF   xB6,W
04848:  SUBLW  0D
0484A:  BZ    4856
0484C:  MOVF   xB5,F
0484E:  BNZ   4856
04850:  MOVF   xB4,W
04852:  SUBLW  0F
04854:  BC    48A4
....................                   {
....................                      sms_phonenumber[a] =  '\0' ;
04856:  MOVLW  8D
04858:  ADDWF  xB4,W
0485A:  MOVWF  FE9
0485C:  MOVLW  09
0485E:  ADDWFC xB5,W
04860:  MOVWF  FEA
04862:  CLRF   FEF
....................                      write_eeprom(0x32+a,phonenum);
04864:  MOVLW  32
04866:  ADDWF  xB4,W
04868:  MOVWF  xBD
0486A:  MOVLW  00
0486C:  ADDWFC xB5,W
0486E:  MOVWF  xBE
04870:  MOVF   FF2,W
04872:  MOVWF  00
04874:  BCF    FF2.7
04876:  MOVFF  CBE,FAA
0487A:  MOVFF  CBD,FA9
0487E:  MOVFF  CB6,FA8
04882:  BCF    FA6.6
04884:  BCF    FA6.7
04886:  BSF    FA6.2
04888:  MOVLB  F
0488A:  MOVLW  55
0488C:  MOVWF  FA7
0488E:  MOVLW  AA
04890:  MOVWF  FA7
04892:  BSF    FA6.1
04894:  BTFSC  FA6.1
04896:  BRA    4894
04898:  BCF    FA6.2
0489A:  MOVF   00,W
0489C:  IORWF  FF2,F
....................                      break;
0489E:  BRA    48FA
....................                   }
048A0:  BRA    48EE
048A2:  MOVLB  C
....................                   else
....................                   {
....................                      sms_phonenumber[a] = phonenum;
048A4:  MOVLW  8D
048A6:  ADDWF  xB4,W
048A8:  MOVWF  FE9
048AA:  MOVLW  09
048AC:  ADDWFC xB5,W
048AE:  MOVWF  FEA
048B0:  MOVFF  CB6,FEF
....................                      
....................                      write_eeprom(0x32+a,phonenum);
048B4:  MOVLW  32
048B6:  ADDWF  xB4,W
048B8:  MOVWF  xBD
048BA:  MOVLW  00
048BC:  ADDWFC xB5,W
048BE:  MOVWF  xBE
048C0:  MOVF   FF2,W
048C2:  MOVWF  00
048C4:  BCF    FF2.7
048C6:  MOVFF  CBE,FAA
048CA:  MOVFF  CBD,FA9
048CE:  MOVFF  CB6,FA8
048D2:  BCF    FA6.6
048D4:  BCF    FA6.7
048D6:  BSF    FA6.2
048D8:  MOVLB  F
048DA:  MOVLW  55
048DC:  MOVWF  FA7
048DE:  MOVLW  AA
048E0:  MOVWF  FA7
048E2:  BSF    FA6.1
048E4:  BTFSC  FA6.1
048E6:  BRA    48E4
048E8:  BCF    FA6.2
048EA:  MOVF   00,W
048EC:  IORWF  FF2,F
....................                   }
048EE:  MOVLB  C
048F0:  INCF   xB4,F
048F2:  BTFSC  FD8.2
048F4:  INCF   xB5,F
048F6:  BRA    4834
048F8:  MOVLB  F
....................                }
....................             
....................             
....................                TxD_Buff[0] = Address ;         //Address
048FA:  MOVFF  7B,7D
....................                TxD_Buff[1] = 0x21 ;            //return function code
048FE:  MOVLW  21
04900:  MOVLB  0
04902:  MOVWF  x7E
....................    
....................                CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
04904:  MOVLB  C
04906:  CLRF   xBF
04908:  MOVLW  7D
0490A:  MOVWF  xBE
0490C:  MOVLW  02
0490E:  MOVWF  xC0
04910:  MOVLB  0
04912:  CALL   2A02
....................    
....................                TxD_Buff[2] = CRC_Hi ;
04916:  MOVFF  57D,7F
....................                TxD_Buff[3] = CRC_Lo ;
0491A:  MOVFF  57C,80
....................    
....................                output_bit(P485ctrl,1);
0491E:  BSF    F8A.3
04920:  BCF    F93.3
....................                delay_ms(10);
04922:  MOVLW  0A
04924:  MOVLB  C
04926:  MOVWF  xBD
04928:  MOVLB  0
0492A:  CALL   0658
....................    
....................                putc(Txd_Buff[0]);
0492E:  MOVF   x7D,W
04930:  CALL   2A58
....................                putc(Txd_Buff[1]);
04934:  MOVF   x7E,W
04936:  CALL   2A58
....................                putc(Txd_Buff[2]);
0493A:  MOVF   x7F,W
0493C:  CALL   2A58
....................                putc(Txd_Buff[3]);
04940:  MOVF   x80,W
04942:  CALL   2A58
....................    
....................                delay_ms(3);
04946:  MOVLW  03
04948:  MOVLB  C
0494A:  MOVWF  xBD
0494C:  MOVLB  0
0494E:  CALL   0658
....................                output_bit(P485ctrl,0);
04952:  BCF    F8A.3
04954:  BCF    F93.3
....................                
....................                reset_cpu();
04956:  RESET
....................                //Read_Config(); //jj
....................             }
04958:  GOTO   5A6E
0495C:  MOVLB  1
....................             
....................             else if(RxD_Buff[1] == 0x22)///////////// WRITE Faultname /////////////////////
0495E:  MOVF   x7D,W
04960:  SUBLW  22
04962:  BTFSS  FD8.2
04964:  GOTO   5A6E
....................             {
....................                
....................                //SMS_Massage
....................                int16  i =4,j=0,k=0; //i =4 are first data from RxD_Buff[]
04968:  MOVLB  C
0496A:  CLRF   xB8
0496C:  MOVLW  04
0496E:  MOVWF  xB7
04970:  CLRF   xBA
04972:  CLRF   xB9
04974:  CLRF   xBC
04976:  CLRF   xBB
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
04978:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0497A:  MOVLW  7C
0497C:  ADDWF  xB7,W
0497E:  MOVWF  FE9
04980:  MOVLW  01
04982:  ADDWFC xB8,W
04984:  MOVWF  FEA
04986:  MOVF   FEF,W
04988:  SUBLW  0D
0498A:  BZ    4996
0498C:  MOVF   xBA,F
0498E:  BNZ   4996
04990:  MOVF   xB9,W
04992:  SUBLW  1E
04994:  BC    49D6
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
04996:  MOVLW  5D
04998:  ADDWF  xB7,W
0499A:  MOVWF  xBD
0499C:  MOVLW  00
0499E:  ADDWFC xB8,W
049A0:  MOVWF  xBE
049A2:  MOVF   FF2,W
049A4:  MOVWF  00
049A6:  BCF    FF2.7
049A8:  MOVFF  CBE,FAA
049AC:  MOVFF  CBD,FA9
049B0:  MOVLW  0D
049B2:  MOVWF  FA8
049B4:  BCF    FA6.6
049B6:  BCF    FA6.7
049B8:  BSF    FA6.2
049BA:  MOVLB  F
049BC:  MOVLW  55
049BE:  MOVWF  FA7
049C0:  MOVLW  AA
049C2:  MOVWF  FA7
049C4:  BSF    FA6.1
049C6:  BTFSC  FA6.1
049C8:  BRA    49C6
049CA:  BCF    FA6.2
049CC:  MOVF   00,W
049CE:  IORWF  FF2,F
....................                      break;
049D0:  BRA    4A60
....................                   }
049D2:  BRA    4A48
049D4:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage1[j] = RxD_Buff[i];
049D6:  MOVLW  9C
049D8:  ADDWF  xB9,W
049DA:  MOVWF  01
049DC:  MOVLW  09
049DE:  ADDWFC xBA,W
049E0:  MOVWF  03
049E2:  MOVLW  7C
049E4:  ADDWF  xB7,W
049E6:  MOVWF  FE9
049E8:  MOVLW  01
049EA:  ADDWFC xB8,W
049EC:  MOVWF  FEA
049EE:  MOVFF  FEF,CBF
049F2:  MOVFF  03,FEA
049F6:  MOVFF  01,FE9
049FA:  MOVFF  CBF,FEF
....................                      
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
049FE:  MOVLW  5D
04A00:  ADDWF  xB7,W
04A02:  MOVWF  xBD
04A04:  MOVLW  00
04A06:  ADDWFC xB8,W
04A08:  MOVWF  xBE
04A0A:  MOVLW  7C
04A0C:  ADDWF  xB7,W
04A0E:  MOVWF  FE9
04A10:  MOVLW  01
04A12:  ADDWFC xB8,W
04A14:  MOVWF  FEA
04A16:  MOVFF  FEF,CBF
04A1A:  MOVF   FF2,W
04A1C:  MOVWF  00
04A1E:  BCF    FF2.7
04A20:  MOVFF  CBE,FAA
04A24:  MOVFF  CBD,FA9
04A28:  MOVFF  CBF,FA8
04A2C:  BCF    FA6.6
04A2E:  BCF    FA6.7
04A30:  BSF    FA6.2
04A32:  MOVLB  F
04A34:  MOVLW  55
04A36:  MOVWF  FA7
04A38:  MOVLW  AA
04A3A:  MOVWF  FA7
04A3C:  BSF    FA6.1
04A3E:  BTFSC  FA6.1
04A40:  BRA    4A3E
04A42:  BCF    FA6.2
04A44:  MOVF   00,W
04A46:  IORWF  FF2,F
....................                   }
04A48:  MOVLB  C
04A4A:  MOVFF  CB8,03
04A4E:  MOVF   xB7,W
04A50:  INCF   xB7,F
04A52:  BTFSC  FD8.2
04A54:  INCF   xB8,F
04A56:  INCF   xB9,F
04A58:  BTFSC  FD8.2
04A5A:  INCF   xBA,F
04A5C:  BRA    4978
04A5E:  MOVLB  F
....................                }
....................                SMS_Massage1[j] = '\0' ; // end string
04A60:  MOVLW  9C
04A62:  MOVLB  C
04A64:  ADDWF  xB9,W
04A66:  MOVWF  FE9
04A68:  MOVLW  09
04A6A:  ADDWFC xBA,W
04A6C:  MOVWF  FEA
04A6E:  CLRF   FEF
....................                
....................                j=0;
04A70:  CLRF   xBA
04A72:  CLRF   xB9
....................                i++;
04A74:  INCF   xB7,F
04A76:  BTFSC  FD8.2
04A78:  INCF   xB8,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
04A7A:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
04A7C:  MOVLW  7C
04A7E:  ADDWF  xB7,W
04A80:  MOVWF  FE9
04A82:  MOVLW  01
04A84:  ADDWFC xB8,W
04A86:  MOVWF  FEA
04A88:  MOVF   FEF,W
04A8A:  SUBLW  0D
04A8C:  BZ    4A98
04A8E:  MOVF   xBA,F
04A90:  BNZ   4A98
04A92:  MOVF   xB9,W
04A94:  SUBLW  1E
04A96:  BC    4AD8
....................                   {  
....................                      write_eeprom(0x5D+i,0x0D);
04A98:  MOVLW  5D
04A9A:  ADDWF  xB7,W
04A9C:  MOVWF  xBD
04A9E:  MOVLW  00
04AA0:  ADDWFC xB8,W
04AA2:  MOVWF  xBE
04AA4:  MOVF   FF2,W
04AA6:  MOVWF  00
04AA8:  BCF    FF2.7
04AAA:  MOVFF  CBE,FAA
04AAE:  MOVFF  CBD,FA9
04AB2:  MOVLW  0D
04AB4:  MOVWF  FA8
04AB6:  BCF    FA6.6
04AB8:  BCF    FA6.7
04ABA:  BSF    FA6.2
04ABC:  MOVLB  F
04ABE:  MOVLW  55
04AC0:  MOVWF  FA7
04AC2:  MOVLW  AA
04AC4:  MOVWF  FA7
04AC6:  BSF    FA6.1
04AC8:  BTFSC  FA6.1
04ACA:  BRA    4AC8
04ACC:  BCF    FA6.2
04ACE:  MOVF   00,W
04AD0:  IORWF  FF2,F
....................                      break;
04AD2:  BRA    4B62
....................                   }
04AD4:  BRA    4B4A
04AD6:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage2[j] = RxD_Buff[i];
04AD8:  MOVLW  BC
04ADA:  ADDWF  xB9,W
04ADC:  MOVWF  01
04ADE:  MOVLW  09
04AE0:  ADDWFC xBA,W
04AE2:  MOVWF  03
04AE4:  MOVLW  7C
04AE6:  ADDWF  xB7,W
04AE8:  MOVWF  FE9
04AEA:  MOVLW  01
04AEC:  ADDWFC xB8,W
04AEE:  MOVWF  FEA
04AF0:  MOVFF  FEF,CBF
04AF4:  MOVFF  03,FEA
04AF8:  MOVFF  01,FE9
04AFC:  MOVFF  CBF,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
04B00:  MOVLW  5D
04B02:  ADDWF  xB7,W
04B04:  MOVWF  xBD
04B06:  MOVLW  00
04B08:  ADDWFC xB8,W
04B0A:  MOVWF  xBE
04B0C:  MOVLW  7C
04B0E:  ADDWF  xB7,W
04B10:  MOVWF  FE9
04B12:  MOVLW  01
04B14:  ADDWFC xB8,W
04B16:  MOVWF  FEA
04B18:  MOVFF  FEF,CBF
04B1C:  MOVF   FF2,W
04B1E:  MOVWF  00
04B20:  BCF    FF2.7
04B22:  MOVFF  CBE,FAA
04B26:  MOVFF  CBD,FA9
04B2A:  MOVFF  CBF,FA8
04B2E:  BCF    FA6.6
04B30:  BCF    FA6.7
04B32:  BSF    FA6.2
04B34:  MOVLB  F
04B36:  MOVLW  55
04B38:  MOVWF  FA7
04B3A:  MOVLW  AA
04B3C:  MOVWF  FA7
04B3E:  BSF    FA6.1
04B40:  BTFSC  FA6.1
04B42:  BRA    4B40
04B44:  BCF    FA6.2
04B46:  MOVF   00,W
04B48:  IORWF  FF2,F
....................                   }
04B4A:  MOVLB  C
04B4C:  MOVFF  CB8,03
04B50:  MOVF   xB7,W
04B52:  INCF   xB7,F
04B54:  BTFSC  FD8.2
04B56:  INCF   xB8,F
04B58:  INCF   xB9,F
04B5A:  BTFSC  FD8.2
04B5C:  INCF   xBA,F
04B5E:  BRA    4A7A
04B60:  MOVLB  F
....................                }
....................                SMS_Massage2[j] = '\0' ; // end string
04B62:  MOVLW  BC
04B64:  MOVLB  C
04B66:  ADDWF  xB9,W
04B68:  MOVWF  FE9
04B6A:  MOVLW  09
04B6C:  ADDWFC xBA,W
04B6E:  MOVWF  FEA
04B70:  CLRF   FEF
....................                
....................                j=0;
04B72:  CLRF   xBA
04B74:  CLRF   xB9
....................                i++;
04B76:  INCF   xB7,F
04B78:  BTFSC  FD8.2
04B7A:  INCF   xB8,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
04B7C:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
04B7E:  MOVLW  7C
04B80:  ADDWF  xB7,W
04B82:  MOVWF  FE9
04B84:  MOVLW  01
04B86:  ADDWFC xB8,W
04B88:  MOVWF  FEA
04B8A:  MOVF   FEF,W
04B8C:  SUBLW  0D
04B8E:  BZ    4B9A
04B90:  MOVF   xBA,F
04B92:  BNZ   4B9A
04B94:  MOVF   xB9,W
04B96:  SUBLW  1E
04B98:  BC    4BDA
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
04B9A:  MOVLW  5D
04B9C:  ADDWF  xB7,W
04B9E:  MOVWF  xBD
04BA0:  MOVLW  00
04BA2:  ADDWFC xB8,W
04BA4:  MOVWF  xBE
04BA6:  MOVF   FF2,W
04BA8:  MOVWF  00
04BAA:  BCF    FF2.7
04BAC:  MOVFF  CBE,FAA
04BB0:  MOVFF  CBD,FA9
04BB4:  MOVLW  0D
04BB6:  MOVWF  FA8
04BB8:  BCF    FA6.6
04BBA:  BCF    FA6.7
04BBC:  BSF    FA6.2
04BBE:  MOVLB  F
04BC0:  MOVLW  55
04BC2:  MOVWF  FA7
04BC4:  MOVLW  AA
04BC6:  MOVWF  FA7
04BC8:  BSF    FA6.1
04BCA:  BTFSC  FA6.1
04BCC:  BRA    4BCA
04BCE:  BCF    FA6.2
04BD0:  MOVF   00,W
04BD2:  IORWF  FF2,F
....................                      break;
04BD4:  BRA    4C64
....................                   }
04BD6:  BRA    4C4C
04BD8:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage3[j] = RxD_Buff[i];
04BDA:  MOVLW  DC
04BDC:  ADDWF  xB9,W
04BDE:  MOVWF  01
04BE0:  MOVLW  09
04BE2:  ADDWFC xBA,W
04BE4:  MOVWF  03
04BE6:  MOVLW  7C
04BE8:  ADDWF  xB7,W
04BEA:  MOVWF  FE9
04BEC:  MOVLW  01
04BEE:  ADDWFC xB8,W
04BF0:  MOVWF  FEA
04BF2:  MOVFF  FEF,CBF
04BF6:  MOVFF  03,FEA
04BFA:  MOVFF  01,FE9
04BFE:  MOVFF  CBF,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
04C02:  MOVLW  5D
04C04:  ADDWF  xB7,W
04C06:  MOVWF  xBD
04C08:  MOVLW  00
04C0A:  ADDWFC xB8,W
04C0C:  MOVWF  xBE
04C0E:  MOVLW  7C
04C10:  ADDWF  xB7,W
04C12:  MOVWF  FE9
04C14:  MOVLW  01
04C16:  ADDWFC xB8,W
04C18:  MOVWF  FEA
04C1A:  MOVFF  FEF,CBF
04C1E:  MOVF   FF2,W
04C20:  MOVWF  00
04C22:  BCF    FF2.7
04C24:  MOVFF  CBE,FAA
04C28:  MOVFF  CBD,FA9
04C2C:  MOVFF  CBF,FA8
04C30:  BCF    FA6.6
04C32:  BCF    FA6.7
04C34:  BSF    FA6.2
04C36:  MOVLB  F
04C38:  MOVLW  55
04C3A:  MOVWF  FA7
04C3C:  MOVLW  AA
04C3E:  MOVWF  FA7
04C40:  BSF    FA6.1
04C42:  BTFSC  FA6.1
04C44:  BRA    4C42
04C46:  BCF    FA6.2
04C48:  MOVF   00,W
04C4A:  IORWF  FF2,F
....................                   }
04C4C:  MOVLB  C
04C4E:  MOVFF  CB8,03
04C52:  MOVF   xB7,W
04C54:  INCF   xB7,F
04C56:  BTFSC  FD8.2
04C58:  INCF   xB8,F
04C5A:  INCF   xB9,F
04C5C:  BTFSC  FD8.2
04C5E:  INCF   xBA,F
04C60:  BRA    4B7C
04C62:  MOVLB  F
....................                }
....................                SMS_Massage3[j] = '\0' ; // end string
04C64:  MOVLW  DC
04C66:  MOVLB  C
04C68:  ADDWF  xB9,W
04C6A:  MOVWF  FE9
04C6C:  MOVLW  09
04C6E:  ADDWFC xBA,W
04C70:  MOVWF  FEA
04C72:  CLRF   FEF
....................                
....................                j=0;
04C74:  CLRF   xBA
04C76:  CLRF   xB9
....................                i++;
04C78:  INCF   xB7,F
04C7A:  BTFSC  FD8.2
04C7C:  INCF   xB8,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
04C7E:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
04C80:  MOVLW  7C
04C82:  ADDWF  xB7,W
04C84:  MOVWF  FE9
04C86:  MOVLW  01
04C88:  ADDWFC xB8,W
04C8A:  MOVWF  FEA
04C8C:  MOVF   FEF,W
04C8E:  SUBLW  0D
04C90:  BZ    4C9C
04C92:  MOVF   xBA,F
04C94:  BNZ   4C9C
04C96:  MOVF   xB9,W
04C98:  SUBLW  1E
04C9A:  BC    4CDC
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
04C9C:  MOVLW  5D
04C9E:  ADDWF  xB7,W
04CA0:  MOVWF  xBD
04CA2:  MOVLW  00
04CA4:  ADDWFC xB8,W
04CA6:  MOVWF  xBE
04CA8:  MOVF   FF2,W
04CAA:  MOVWF  00
04CAC:  BCF    FF2.7
04CAE:  MOVFF  CBE,FAA
04CB2:  MOVFF  CBD,FA9
04CB6:  MOVLW  0D
04CB8:  MOVWF  FA8
04CBA:  BCF    FA6.6
04CBC:  BCF    FA6.7
04CBE:  BSF    FA6.2
04CC0:  MOVLB  F
04CC2:  MOVLW  55
04CC4:  MOVWF  FA7
04CC6:  MOVLW  AA
04CC8:  MOVWF  FA7
04CCA:  BSF    FA6.1
04CCC:  BTFSC  FA6.1
04CCE:  BRA    4CCC
04CD0:  BCF    FA6.2
04CD2:  MOVF   00,W
04CD4:  IORWF  FF2,F
....................                      break;
04CD6:  BRA    4D66
....................                   }
04CD8:  BRA    4D4E
04CDA:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage4[j] = RxD_Buff[i];
04CDC:  MOVLW  FC
04CDE:  ADDWF  xB9,W
04CE0:  MOVWF  01
04CE2:  MOVLW  09
04CE4:  ADDWFC xBA,W
04CE6:  MOVWF  03
04CE8:  MOVLW  7C
04CEA:  ADDWF  xB7,W
04CEC:  MOVWF  FE9
04CEE:  MOVLW  01
04CF0:  ADDWFC xB8,W
04CF2:  MOVWF  FEA
04CF4:  MOVFF  FEF,CBF
04CF8:  MOVFF  03,FEA
04CFC:  MOVFF  01,FE9
04D00:  MOVFF  CBF,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
04D04:  MOVLW  5D
04D06:  ADDWF  xB7,W
04D08:  MOVWF  xBD
04D0A:  MOVLW  00
04D0C:  ADDWFC xB8,W
04D0E:  MOVWF  xBE
04D10:  MOVLW  7C
04D12:  ADDWF  xB7,W
04D14:  MOVWF  FE9
04D16:  MOVLW  01
04D18:  ADDWFC xB8,W
04D1A:  MOVWF  FEA
04D1C:  MOVFF  FEF,CBF
04D20:  MOVF   FF2,W
04D22:  MOVWF  00
04D24:  BCF    FF2.7
04D26:  MOVFF  CBE,FAA
04D2A:  MOVFF  CBD,FA9
04D2E:  MOVFF  CBF,FA8
04D32:  BCF    FA6.6
04D34:  BCF    FA6.7
04D36:  BSF    FA6.2
04D38:  MOVLB  F
04D3A:  MOVLW  55
04D3C:  MOVWF  FA7
04D3E:  MOVLW  AA
04D40:  MOVWF  FA7
04D42:  BSF    FA6.1
04D44:  BTFSC  FA6.1
04D46:  BRA    4D44
04D48:  BCF    FA6.2
04D4A:  MOVF   00,W
04D4C:  IORWF  FF2,F
....................                   }
04D4E:  MOVLB  C
04D50:  MOVFF  CB8,03
04D54:  MOVF   xB7,W
04D56:  INCF   xB7,F
04D58:  BTFSC  FD8.2
04D5A:  INCF   xB8,F
04D5C:  INCF   xB9,F
04D5E:  BTFSC  FD8.2
04D60:  INCF   xBA,F
04D62:  BRA    4C7E
04D64:  MOVLB  F
....................                }
....................                SMS_Massage4[j] = '\0' ; // end string
04D66:  MOVLW  FC
04D68:  MOVLB  C
04D6A:  ADDWF  xB9,W
04D6C:  MOVWF  FE9
04D6E:  MOVLW  09
04D70:  ADDWFC xBA,W
04D72:  MOVWF  FEA
04D74:  CLRF   FEF
....................                
....................                j=0;
04D76:  CLRF   xBA
04D78:  CLRF   xB9
....................                i++;
04D7A:  INCF   xB7,F
04D7C:  BTFSC  FD8.2
04D7E:  INCF   xB8,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
04D80:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
04D82:  MOVLW  7C
04D84:  ADDWF  xB7,W
04D86:  MOVWF  FE9
04D88:  MOVLW  01
04D8A:  ADDWFC xB8,W
04D8C:  MOVWF  FEA
04D8E:  MOVF   FEF,W
04D90:  SUBLW  0D
04D92:  BZ    4D9E
04D94:  MOVF   xBA,F
04D96:  BNZ   4D9E
04D98:  MOVF   xB9,W
04D9A:  SUBLW  1E
04D9C:  BC    4DDE
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
04D9E:  MOVLW  5D
04DA0:  ADDWF  xB7,W
04DA2:  MOVWF  xBD
04DA4:  MOVLW  00
04DA6:  ADDWFC xB8,W
04DA8:  MOVWF  xBE
04DAA:  MOVF   FF2,W
04DAC:  MOVWF  00
04DAE:  BCF    FF2.7
04DB0:  MOVFF  CBE,FAA
04DB4:  MOVFF  CBD,FA9
04DB8:  MOVLW  0D
04DBA:  MOVWF  FA8
04DBC:  BCF    FA6.6
04DBE:  BCF    FA6.7
04DC0:  BSF    FA6.2
04DC2:  MOVLB  F
04DC4:  MOVLW  55
04DC6:  MOVWF  FA7
04DC8:  MOVLW  AA
04DCA:  MOVWF  FA7
04DCC:  BSF    FA6.1
04DCE:  BTFSC  FA6.1
04DD0:  BRA    4DCE
04DD2:  BCF    FA6.2
04DD4:  MOVF   00,W
04DD6:  IORWF  FF2,F
....................                      break;
04DD8:  BRA    4E68
....................                   }
04DDA:  BRA    4E50
04DDC:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage5[j] = RxD_Buff[i];
04DDE:  MOVLW  1C
04DE0:  ADDWF  xB9,W
04DE2:  MOVWF  01
04DE4:  MOVLW  0A
04DE6:  ADDWFC xBA,W
04DE8:  MOVWF  03
04DEA:  MOVLW  7C
04DEC:  ADDWF  xB7,W
04DEE:  MOVWF  FE9
04DF0:  MOVLW  01
04DF2:  ADDWFC xB8,W
04DF4:  MOVWF  FEA
04DF6:  MOVFF  FEF,CBF
04DFA:  MOVFF  03,FEA
04DFE:  MOVFF  01,FE9
04E02:  MOVFF  CBF,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
04E06:  MOVLW  5D
04E08:  ADDWF  xB7,W
04E0A:  MOVWF  xBD
04E0C:  MOVLW  00
04E0E:  ADDWFC xB8,W
04E10:  MOVWF  xBE
04E12:  MOVLW  7C
04E14:  ADDWF  xB7,W
04E16:  MOVWF  FE9
04E18:  MOVLW  01
04E1A:  ADDWFC xB8,W
04E1C:  MOVWF  FEA
04E1E:  MOVFF  FEF,CBF
04E22:  MOVF   FF2,W
04E24:  MOVWF  00
04E26:  BCF    FF2.7
04E28:  MOVFF  CBE,FAA
04E2C:  MOVFF  CBD,FA9
04E30:  MOVFF  CBF,FA8
04E34:  BCF    FA6.6
04E36:  BCF    FA6.7
04E38:  BSF    FA6.2
04E3A:  MOVLB  F
04E3C:  MOVLW  55
04E3E:  MOVWF  FA7
04E40:  MOVLW  AA
04E42:  MOVWF  FA7
04E44:  BSF    FA6.1
04E46:  BTFSC  FA6.1
04E48:  BRA    4E46
04E4A:  BCF    FA6.2
04E4C:  MOVF   00,W
04E4E:  IORWF  FF2,F
....................                   }
04E50:  MOVLB  C
04E52:  MOVFF  CB8,03
04E56:  MOVF   xB7,W
04E58:  INCF   xB7,F
04E5A:  BTFSC  FD8.2
04E5C:  INCF   xB8,F
04E5E:  INCF   xB9,F
04E60:  BTFSC  FD8.2
04E62:  INCF   xBA,F
04E64:  BRA    4D80
04E66:  MOVLB  F
....................                }
....................                SMS_Massage5[j] = '\0' ; // end string
04E68:  MOVLW  1C
04E6A:  MOVLB  C
04E6C:  ADDWF  xB9,W
04E6E:  MOVWF  FE9
04E70:  MOVLW  0A
04E72:  ADDWFC xBA,W
04E74:  MOVWF  FEA
04E76:  CLRF   FEF
....................                
....................                j=0;
04E78:  CLRF   xBA
04E7A:  CLRF   xB9
....................                i++;
04E7C:  INCF   xB7,F
04E7E:  BTFSC  FD8.2
04E80:  INCF   xB8,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
04E82:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
04E84:  MOVLW  7C
04E86:  ADDWF  xB7,W
04E88:  MOVWF  FE9
04E8A:  MOVLW  01
04E8C:  ADDWFC xB8,W
04E8E:  MOVWF  FEA
04E90:  MOVF   FEF,W
04E92:  SUBLW  0D
04E94:  BZ    4EA0
04E96:  MOVF   xBA,F
04E98:  BNZ   4EA0
04E9A:  MOVF   xB9,W
04E9C:  SUBLW  1E
04E9E:  BC    4EE0
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
04EA0:  MOVLW  5D
04EA2:  ADDWF  xB7,W
04EA4:  MOVWF  xBD
04EA6:  MOVLW  00
04EA8:  ADDWFC xB8,W
04EAA:  MOVWF  xBE
04EAC:  MOVF   FF2,W
04EAE:  MOVWF  00
04EB0:  BCF    FF2.7
04EB2:  MOVFF  CBE,FAA
04EB6:  MOVFF  CBD,FA9
04EBA:  MOVLW  0D
04EBC:  MOVWF  FA8
04EBE:  BCF    FA6.6
04EC0:  BCF    FA6.7
04EC2:  BSF    FA6.2
04EC4:  MOVLB  F
04EC6:  MOVLW  55
04EC8:  MOVWF  FA7
04ECA:  MOVLW  AA
04ECC:  MOVWF  FA7
04ECE:  BSF    FA6.1
04ED0:  BTFSC  FA6.1
04ED2:  BRA    4ED0
04ED4:  BCF    FA6.2
04ED6:  MOVF   00,W
04ED8:  IORWF  FF2,F
....................                      break;
04EDA:  BRA    4F6E
....................                   }
04EDC:  BRA    4F56
04EDE:  MOVLB  C
....................                   else
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
04EE0:  MOVLW  5D
04EE2:  ADDWF  xB7,W
04EE4:  MOVWF  xBD
04EE6:  MOVLW  00
04EE8:  ADDWFC xB8,W
04EEA:  MOVWF  xBE
04EEC:  MOVLW  7C
04EEE:  ADDWF  xB7,W
04EF0:  MOVWF  FE9
04EF2:  MOVLW  01
04EF4:  ADDWFC xB8,W
04EF6:  MOVWF  FEA
04EF8:  MOVFF  FEF,CBF
04EFC:  MOVF   FF2,W
04EFE:  MOVWF  00
04F00:  BCF    FF2.7
04F02:  MOVFF  CBE,FAA
04F06:  MOVFF  CBD,FA9
04F0A:  MOVFF  CBF,FA8
04F0E:  BCF    FA6.6
04F10:  BCF    FA6.7
04F12:  BSF    FA6.2
04F14:  MOVLB  F
04F16:  MOVLW  55
04F18:  MOVWF  FA7
04F1A:  MOVLW  AA
04F1C:  MOVWF  FA7
04F1E:  BSF    FA6.1
04F20:  BTFSC  FA6.1
04F22:  BRA    4F20
04F24:  BCF    FA6.2
04F26:  MOVF   00,W
04F28:  IORWF  FF2,F
....................                      SMS_Massage6[j] = RxD_Buff[i];
04F2A:  MOVLW  3C
04F2C:  MOVLB  C
04F2E:  ADDWF  xB9,W
04F30:  MOVWF  01
04F32:  MOVLW  0A
04F34:  ADDWFC xBA,W
04F36:  MOVWF  03
04F38:  MOVLW  7C
04F3A:  ADDWF  xB7,W
04F3C:  MOVWF  FE9
04F3E:  MOVLW  01
04F40:  ADDWFC xB8,W
04F42:  MOVWF  FEA
04F44:  MOVFF  FEF,CBF
04F48:  MOVFF  03,FEA
04F4C:  MOVFF  01,FE9
04F50:  MOVFF  CBF,FEF
04F54:  MOVLB  F
....................                   }
04F56:  MOVLB  C
04F58:  MOVFF  CB8,03
04F5C:  MOVF   xB7,W
04F5E:  INCF   xB7,F
04F60:  BTFSC  FD8.2
04F62:  INCF   xB8,F
04F64:  INCF   xB9,F
04F66:  BTFSC  FD8.2
04F68:  INCF   xBA,F
04F6A:  BRA    4E82
04F6C:  MOVLB  F
....................                }
....................                SMS_Massage6[j] = '\0' ; // end string
04F6E:  MOVLW  3C
04F70:  MOVLB  C
04F72:  ADDWF  xB9,W
04F74:  MOVWF  FE9
04F76:  MOVLW  0A
04F78:  ADDWFC xBA,W
04F7A:  MOVWF  FEA
04F7C:  CLRF   FEF
....................                
....................                j=0;
04F7E:  CLRF   xBA
04F80:  CLRF   xB9
....................                i++;
04F82:  INCF   xB7,F
04F84:  BTFSC  FD8.2
04F86:  INCF   xB8,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
04F88:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
04F8A:  MOVLW  7C
04F8C:  ADDWF  xB7,W
04F8E:  MOVWF  FE9
04F90:  MOVLW  01
04F92:  ADDWFC xB8,W
04F94:  MOVWF  FEA
04F96:  MOVF   FEF,W
04F98:  SUBLW  0D
04F9A:  BZ    4FA6
04F9C:  MOVF   xBA,F
04F9E:  BNZ   4FA6
04FA0:  MOVF   xB9,W
04FA2:  SUBLW  1E
04FA4:  BC    4FE6
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
04FA6:  MOVLW  5D
04FA8:  ADDWF  xB7,W
04FAA:  MOVWF  xBD
04FAC:  MOVLW  00
04FAE:  ADDWFC xB8,W
04FB0:  MOVWF  xBE
04FB2:  MOVF   FF2,W
04FB4:  MOVWF  00
04FB6:  BCF    FF2.7
04FB8:  MOVFF  CBE,FAA
04FBC:  MOVFF  CBD,FA9
04FC0:  MOVLW  0D
04FC2:  MOVWF  FA8
04FC4:  BCF    FA6.6
04FC6:  BCF    FA6.7
04FC8:  BSF    FA6.2
04FCA:  MOVLB  F
04FCC:  MOVLW  55
04FCE:  MOVWF  FA7
04FD0:  MOVLW  AA
04FD2:  MOVWF  FA7
04FD4:  BSF    FA6.1
04FD6:  BTFSC  FA6.1
04FD8:  BRA    4FD6
04FDA:  BCF    FA6.2
04FDC:  MOVF   00,W
04FDE:  IORWF  FF2,F
....................                      break;
04FE0:  BRA    5070
....................                   }
04FE2:  BRA    5058
04FE4:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage7[j] = RxD_Buff[i];
04FE6:  MOVLW  5C
04FE8:  ADDWF  xB9,W
04FEA:  MOVWF  01
04FEC:  MOVLW  0A
04FEE:  ADDWFC xBA,W
04FF0:  MOVWF  03
04FF2:  MOVLW  7C
04FF4:  ADDWF  xB7,W
04FF6:  MOVWF  FE9
04FF8:  MOVLW  01
04FFA:  ADDWFC xB8,W
04FFC:  MOVWF  FEA
04FFE:  MOVFF  FEF,CBF
05002:  MOVFF  03,FEA
05006:  MOVFF  01,FE9
0500A:  MOVFF  CBF,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0500E:  MOVLW  5D
05010:  ADDWF  xB7,W
05012:  MOVWF  xBD
05014:  MOVLW  00
05016:  ADDWFC xB8,W
05018:  MOVWF  xBE
0501A:  MOVLW  7C
0501C:  ADDWF  xB7,W
0501E:  MOVWF  FE9
05020:  MOVLW  01
05022:  ADDWFC xB8,W
05024:  MOVWF  FEA
05026:  MOVFF  FEF,CBF
0502A:  MOVF   FF2,W
0502C:  MOVWF  00
0502E:  BCF    FF2.7
05030:  MOVFF  CBE,FAA
05034:  MOVFF  CBD,FA9
05038:  MOVFF  CBF,FA8
0503C:  BCF    FA6.6
0503E:  BCF    FA6.7
05040:  BSF    FA6.2
05042:  MOVLB  F
05044:  MOVLW  55
05046:  MOVWF  FA7
05048:  MOVLW  AA
0504A:  MOVWF  FA7
0504C:  BSF    FA6.1
0504E:  BTFSC  FA6.1
05050:  BRA    504E
05052:  BCF    FA6.2
05054:  MOVF   00,W
05056:  IORWF  FF2,F
....................                   }
05058:  MOVLB  C
0505A:  MOVFF  CB8,03
0505E:  MOVF   xB7,W
05060:  INCF   xB7,F
05062:  BTFSC  FD8.2
05064:  INCF   xB8,F
05066:  INCF   xB9,F
05068:  BTFSC  FD8.2
0506A:  INCF   xBA,F
0506C:  BRA    4F88
0506E:  MOVLB  F
....................                }
....................                SMS_Massage7[j] = '\0' ; // end string
05070:  MOVLW  5C
05072:  MOVLB  C
05074:  ADDWF  xB9,W
05076:  MOVWF  FE9
05078:  MOVLW  0A
0507A:  ADDWFC xBA,W
0507C:  MOVWF  FEA
0507E:  CLRF   FEF
....................                
....................                j=0;
05080:  CLRF   xBA
05082:  CLRF   xB9
....................                i++;
05084:  INCF   xB7,F
05086:  BTFSC  FD8.2
05088:  INCF   xB8,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
0508A:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0508C:  MOVLW  7C
0508E:  ADDWF  xB7,W
05090:  MOVWF  FE9
05092:  MOVLW  01
05094:  ADDWFC xB8,W
05096:  MOVWF  FEA
05098:  MOVF   FEF,W
0509A:  SUBLW  0D
0509C:  BZ    50A8
0509E:  MOVF   xBA,F
050A0:  BNZ   50A8
050A2:  MOVF   xB9,W
050A4:  SUBLW  1E
050A6:  BC    50E8
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
050A8:  MOVLW  5D
050AA:  ADDWF  xB7,W
050AC:  MOVWF  xBD
050AE:  MOVLW  00
050B0:  ADDWFC xB8,W
050B2:  MOVWF  xBE
050B4:  MOVF   FF2,W
050B6:  MOVWF  00
050B8:  BCF    FF2.7
050BA:  MOVFF  CBE,FAA
050BE:  MOVFF  CBD,FA9
050C2:  MOVLW  0D
050C4:  MOVWF  FA8
050C6:  BCF    FA6.6
050C8:  BCF    FA6.7
050CA:  BSF    FA6.2
050CC:  MOVLB  F
050CE:  MOVLW  55
050D0:  MOVWF  FA7
050D2:  MOVLW  AA
050D4:  MOVWF  FA7
050D6:  BSF    FA6.1
050D8:  BTFSC  FA6.1
050DA:  BRA    50D8
050DC:  BCF    FA6.2
050DE:  MOVF   00,W
050E0:  IORWF  FF2,F
....................                      break;
050E2:  BRA    5172
....................                   }
050E4:  BRA    515A
050E6:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage8[j] = RxD_Buff[i];
050E8:  MOVLW  7C
050EA:  ADDWF  xB9,W
050EC:  MOVWF  01
050EE:  MOVLW  0A
050F0:  ADDWFC xBA,W
050F2:  MOVWF  03
050F4:  MOVLW  7C
050F6:  ADDWF  xB7,W
050F8:  MOVWF  FE9
050FA:  MOVLW  01
050FC:  ADDWFC xB8,W
050FE:  MOVWF  FEA
05100:  MOVFF  FEF,CBF
05104:  MOVFF  03,FEA
05108:  MOVFF  01,FE9
0510C:  MOVFF  CBF,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05110:  MOVLW  5D
05112:  ADDWF  xB7,W
05114:  MOVWF  xBD
05116:  MOVLW  00
05118:  ADDWFC xB8,W
0511A:  MOVWF  xBE
0511C:  MOVLW  7C
0511E:  ADDWF  xB7,W
05120:  MOVWF  FE9
05122:  MOVLW  01
05124:  ADDWFC xB8,W
05126:  MOVWF  FEA
05128:  MOVFF  FEF,CBF
0512C:  MOVF   FF2,W
0512E:  MOVWF  00
05130:  BCF    FF2.7
05132:  MOVFF  CBE,FAA
05136:  MOVFF  CBD,FA9
0513A:  MOVFF  CBF,FA8
0513E:  BCF    FA6.6
05140:  BCF    FA6.7
05142:  BSF    FA6.2
05144:  MOVLB  F
05146:  MOVLW  55
05148:  MOVWF  FA7
0514A:  MOVLW  AA
0514C:  MOVWF  FA7
0514E:  BSF    FA6.1
05150:  BTFSC  FA6.1
05152:  BRA    5150
05154:  BCF    FA6.2
05156:  MOVF   00,W
05158:  IORWF  FF2,F
....................                   }
0515A:  MOVLB  C
0515C:  MOVFF  CB8,03
05160:  MOVF   xB7,W
05162:  INCF   xB7,F
05164:  BTFSC  FD8.2
05166:  INCF   xB8,F
05168:  INCF   xB9,F
0516A:  BTFSC  FD8.2
0516C:  INCF   xBA,F
0516E:  BRA    508A
05170:  MOVLB  F
....................                }
....................                SMS_Massage8[j] = '\0' ; // end string
05172:  MOVLW  7C
05174:  MOVLB  C
05176:  ADDWF  xB9,W
05178:  MOVWF  FE9
0517A:  MOVLW  0A
0517C:  ADDWFC xBA,W
0517E:  MOVWF  FEA
05180:  CLRF   FEF
....................                
....................                /////////////////////////////////////////////
....................                j=0;
05182:  CLRF   xBA
05184:  CLRF   xB9
....................                i++;
05186:  INCF   xB7,F
05188:  BTFSC  FD8.2
0518A:  INCF   xB8,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
0518C:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0518E:  MOVLW  7C
05190:  ADDWF  xB7,W
05192:  MOVWF  FE9
05194:  MOVLW  01
05196:  ADDWFC xB8,W
05198:  MOVWF  FEA
0519A:  MOVF   FEF,W
0519C:  SUBLW  0D
0519E:  BZ    51AA
051A0:  MOVF   xBA,F
051A2:  BNZ   51AA
051A4:  MOVF   xB9,W
051A6:  SUBLW  1E
051A8:  BC    51FA
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
051AA:  MOVLW  5D
051AC:  ADDWF  xB7,W
051AE:  MOVWF  xBD
051B0:  MOVLW  00
051B2:  ADDWFC xB8,W
051B4:  MOVWF  xBE
051B6:  MOVLW  7C
051B8:  ADDWF  xB7,W
051BA:  MOVWF  FE9
051BC:  MOVLW  01
051BE:  ADDWFC xB8,W
051C0:  MOVWF  FEA
051C2:  MOVFF  FEF,CBF
051C6:  MOVF   FF2,W
051C8:  MOVWF  00
051CA:  BCF    FF2.7
051CC:  MOVFF  CBE,FAA
051D0:  MOVFF  CBD,FA9
051D4:  MOVFF  CBF,FA8
051D8:  BCF    FA6.6
051DA:  BCF    FA6.7
051DC:  BSF    FA6.2
051DE:  MOVLB  F
051E0:  MOVLW  55
051E2:  MOVWF  FA7
051E4:  MOVLW  AA
051E6:  MOVWF  FA7
051E8:  BSF    FA6.1
051EA:  BTFSC  FA6.1
051EC:  BRA    51EA
051EE:  BCF    FA6.2
051F0:  MOVF   00,W
051F2:  IORWF  FF2,F
....................                      break;
051F4:  BRA    5284
....................                   }
051F6:  BRA    526C
051F8:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage9[j] = RxD_Buff[i];
051FA:  MOVLW  9C
051FC:  ADDWF  xB9,W
051FE:  MOVWF  01
05200:  MOVLW  0A
05202:  ADDWFC xBA,W
05204:  MOVWF  03
05206:  MOVLW  7C
05208:  ADDWF  xB7,W
0520A:  MOVWF  FE9
0520C:  MOVLW  01
0520E:  ADDWFC xB8,W
05210:  MOVWF  FEA
05212:  MOVFF  FEF,CBF
05216:  MOVFF  03,FEA
0521A:  MOVFF  01,FE9
0521E:  MOVFF  CBF,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05222:  MOVLW  5D
05224:  ADDWF  xB7,W
05226:  MOVWF  xBD
05228:  MOVLW  00
0522A:  ADDWFC xB8,W
0522C:  MOVWF  xBE
0522E:  MOVLW  7C
05230:  ADDWF  xB7,W
05232:  MOVWF  FE9
05234:  MOVLW  01
05236:  ADDWFC xB8,W
05238:  MOVWF  FEA
0523A:  MOVFF  FEF,CBF
0523E:  MOVF   FF2,W
05240:  MOVWF  00
05242:  BCF    FF2.7
05244:  MOVFF  CBE,FAA
05248:  MOVFF  CBD,FA9
0524C:  MOVFF  CBF,FA8
05250:  BCF    FA6.6
05252:  BCF    FA6.7
05254:  BSF    FA6.2
05256:  MOVLB  F
05258:  MOVLW  55
0525A:  MOVWF  FA7
0525C:  MOVLW  AA
0525E:  MOVWF  FA7
05260:  BSF    FA6.1
05262:  BTFSC  FA6.1
05264:  BRA    5262
05266:  BCF    FA6.2
05268:  MOVF   00,W
0526A:  IORWF  FF2,F
....................                   }
0526C:  MOVLB  C
0526E:  MOVFF  CB8,03
05272:  MOVF   xB7,W
05274:  INCF   xB7,F
05276:  BTFSC  FD8.2
05278:  INCF   xB8,F
0527A:  INCF   xB9,F
0527C:  BTFSC  FD8.2
0527E:  INCF   xBA,F
05280:  BRA    518C
05282:  MOVLB  F
....................                }
....................                SMS_Massage9[j] = '\0' ; // end string
05284:  MOVLW  9C
05286:  MOVLB  C
05288:  ADDWF  xB9,W
0528A:  MOVWF  FE9
0528C:  MOVLW  0A
0528E:  ADDWFC xBA,W
05290:  MOVWF  FEA
05292:  CLRF   FEF
....................                j=0;
05294:  CLRF   xBA
05296:  CLRF   xB9
....................                i++;
05298:  INCF   xB7,F
0529A:  BTFSC  FD8.2
0529C:  INCF   xB8,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
0529E:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
052A0:  MOVLW  7C
052A2:  ADDWF  xB7,W
052A4:  MOVWF  FE9
052A6:  MOVLW  01
052A8:  ADDWFC xB8,W
052AA:  MOVWF  FEA
052AC:  MOVF   FEF,W
052AE:  SUBLW  0D
052B0:  BZ    52BC
052B2:  MOVF   xBA,F
052B4:  BNZ   52BC
052B6:  MOVF   xB9,W
052B8:  SUBLW  1E
052BA:  BC    530C
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
052BC:  MOVLW  5D
052BE:  ADDWF  xB7,W
052C0:  MOVWF  xBD
052C2:  MOVLW  00
052C4:  ADDWFC xB8,W
052C6:  MOVWF  xBE
052C8:  MOVLW  7C
052CA:  ADDWF  xB7,W
052CC:  MOVWF  FE9
052CE:  MOVLW  01
052D0:  ADDWFC xB8,W
052D2:  MOVWF  FEA
052D4:  MOVFF  FEF,CBF
052D8:  MOVF   FF2,W
052DA:  MOVWF  00
052DC:  BCF    FF2.7
052DE:  MOVFF  CBE,FAA
052E2:  MOVFF  CBD,FA9
052E6:  MOVFF  CBF,FA8
052EA:  BCF    FA6.6
052EC:  BCF    FA6.7
052EE:  BSF    FA6.2
052F0:  MOVLB  F
052F2:  MOVLW  55
052F4:  MOVWF  FA7
052F6:  MOVLW  AA
052F8:  MOVWF  FA7
052FA:  BSF    FA6.1
052FC:  BTFSC  FA6.1
052FE:  BRA    52FC
05300:  BCF    FA6.2
05302:  MOVF   00,W
05304:  IORWF  FF2,F
....................                      break;
05306:  BRA    5396
....................                   }
05308:  BRA    537E
0530A:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage10[j] = RxD_Buff[i];
0530C:  MOVLW  BC
0530E:  ADDWF  xB9,W
05310:  MOVWF  01
05312:  MOVLW  0A
05314:  ADDWFC xBA,W
05316:  MOVWF  03
05318:  MOVLW  7C
0531A:  ADDWF  xB7,W
0531C:  MOVWF  FE9
0531E:  MOVLW  01
05320:  ADDWFC xB8,W
05322:  MOVWF  FEA
05324:  MOVFF  FEF,CBF
05328:  MOVFF  03,FEA
0532C:  MOVFF  01,FE9
05330:  MOVFF  CBF,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05334:  MOVLW  5D
05336:  ADDWF  xB7,W
05338:  MOVWF  xBD
0533A:  MOVLW  00
0533C:  ADDWFC xB8,W
0533E:  MOVWF  xBE
05340:  MOVLW  7C
05342:  ADDWF  xB7,W
05344:  MOVWF  FE9
05346:  MOVLW  01
05348:  ADDWFC xB8,W
0534A:  MOVWF  FEA
0534C:  MOVFF  FEF,CBF
05350:  MOVF   FF2,W
05352:  MOVWF  00
05354:  BCF    FF2.7
05356:  MOVFF  CBE,FAA
0535A:  MOVFF  CBD,FA9
0535E:  MOVFF  CBF,FA8
05362:  BCF    FA6.6
05364:  BCF    FA6.7
05366:  BSF    FA6.2
05368:  MOVLB  F
0536A:  MOVLW  55
0536C:  MOVWF  FA7
0536E:  MOVLW  AA
05370:  MOVWF  FA7
05372:  BSF    FA6.1
05374:  BTFSC  FA6.1
05376:  BRA    5374
05378:  BCF    FA6.2
0537A:  MOVF   00,W
0537C:  IORWF  FF2,F
....................                   }
0537E:  MOVLB  C
05380:  MOVFF  CB8,03
05384:  MOVF   xB7,W
05386:  INCF   xB7,F
05388:  BTFSC  FD8.2
0538A:  INCF   xB8,F
0538C:  INCF   xB9,F
0538E:  BTFSC  FD8.2
05390:  INCF   xBA,F
05392:  BRA    529E
05394:  MOVLB  F
....................                }
....................                SMS_Massage10[j] = '\0' ; // end string
05396:  MOVLW  BC
05398:  MOVLB  C
0539A:  ADDWF  xB9,W
0539C:  MOVWF  FE9
0539E:  MOVLW  0A
053A0:  ADDWFC xBA,W
053A2:  MOVWF  FEA
053A4:  CLRF   FEF
....................                
....................                j=0;
053A6:  CLRF   xBA
053A8:  CLRF   xB9
....................                i++;
053AA:  INCF   xB7,F
053AC:  BTFSC  FD8.2
053AE:  INCF   xB8,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
053B0:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
053B2:  MOVLW  7C
053B4:  ADDWF  xB7,W
053B6:  MOVWF  FE9
053B8:  MOVLW  01
053BA:  ADDWFC xB8,W
053BC:  MOVWF  FEA
053BE:  MOVF   FEF,W
053C0:  SUBLW  0D
053C2:  BZ    53CE
053C4:  MOVF   xBA,F
053C6:  BNZ   53CE
053C8:  MOVF   xB9,W
053CA:  SUBLW  1E
053CC:  BC    541E
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
053CE:  MOVLW  5D
053D0:  ADDWF  xB7,W
053D2:  MOVWF  xBD
053D4:  MOVLW  00
053D6:  ADDWFC xB8,W
053D8:  MOVWF  xBE
053DA:  MOVLW  7C
053DC:  ADDWF  xB7,W
053DE:  MOVWF  FE9
053E0:  MOVLW  01
053E2:  ADDWFC xB8,W
053E4:  MOVWF  FEA
053E6:  MOVFF  FEF,CBF
053EA:  MOVF   FF2,W
053EC:  MOVWF  00
053EE:  BCF    FF2.7
053F0:  MOVFF  CBE,FAA
053F4:  MOVFF  CBD,FA9
053F8:  MOVFF  CBF,FA8
053FC:  BCF    FA6.6
053FE:  BCF    FA6.7
05400:  BSF    FA6.2
05402:  MOVLB  F
05404:  MOVLW  55
05406:  MOVWF  FA7
05408:  MOVLW  AA
0540A:  MOVWF  FA7
0540C:  BSF    FA6.1
0540E:  BTFSC  FA6.1
05410:  BRA    540E
05412:  BCF    FA6.2
05414:  MOVF   00,W
05416:  IORWF  FF2,F
....................                      break;
05418:  BRA    54A8
....................                   }
0541A:  BRA    5490
0541C:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage11[j] = RxD_Buff[i];
0541E:  MOVLW  DC
05420:  ADDWF  xB9,W
05422:  MOVWF  01
05424:  MOVLW  0A
05426:  ADDWFC xBA,W
05428:  MOVWF  03
0542A:  MOVLW  7C
0542C:  ADDWF  xB7,W
0542E:  MOVWF  FE9
05430:  MOVLW  01
05432:  ADDWFC xB8,W
05434:  MOVWF  FEA
05436:  MOVFF  FEF,CBF
0543A:  MOVFF  03,FEA
0543E:  MOVFF  01,FE9
05442:  MOVFF  CBF,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05446:  MOVLW  5D
05448:  ADDWF  xB7,W
0544A:  MOVWF  xBD
0544C:  MOVLW  00
0544E:  ADDWFC xB8,W
05450:  MOVWF  xBE
05452:  MOVLW  7C
05454:  ADDWF  xB7,W
05456:  MOVWF  FE9
05458:  MOVLW  01
0545A:  ADDWFC xB8,W
0545C:  MOVWF  FEA
0545E:  MOVFF  FEF,CBF
05462:  MOVF   FF2,W
05464:  MOVWF  00
05466:  BCF    FF2.7
05468:  MOVFF  CBE,FAA
0546C:  MOVFF  CBD,FA9
05470:  MOVFF  CBF,FA8
05474:  BCF    FA6.6
05476:  BCF    FA6.7
05478:  BSF    FA6.2
0547A:  MOVLB  F
0547C:  MOVLW  55
0547E:  MOVWF  FA7
05480:  MOVLW  AA
05482:  MOVWF  FA7
05484:  BSF    FA6.1
05486:  BTFSC  FA6.1
05488:  BRA    5486
0548A:  BCF    FA6.2
0548C:  MOVF   00,W
0548E:  IORWF  FF2,F
....................                   }
05490:  MOVLB  C
05492:  MOVFF  CB8,03
05496:  MOVF   xB7,W
05498:  INCF   xB7,F
0549A:  BTFSC  FD8.2
0549C:  INCF   xB8,F
0549E:  INCF   xB9,F
054A0:  BTFSC  FD8.2
054A2:  INCF   xBA,F
054A4:  BRA    53B0
054A6:  MOVLB  F
....................                }
....................                SMS_Massage11[j] = '\0' ; // end string
054A8:  MOVLW  DC
054AA:  MOVLB  C
054AC:  ADDWF  xB9,W
054AE:  MOVWF  FE9
054B0:  MOVLW  0A
054B2:  ADDWFC xBA,W
054B4:  MOVWF  FEA
054B6:  CLRF   FEF
....................                
....................                j=0;
054B8:  CLRF   xBA
054BA:  CLRF   xB9
....................                i++;
054BC:  INCF   xB7,F
054BE:  BTFSC  FD8.2
054C0:  INCF   xB8,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
054C2:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
054C4:  MOVLW  7C
054C6:  ADDWF  xB7,W
054C8:  MOVWF  FE9
054CA:  MOVLW  01
054CC:  ADDWFC xB8,W
054CE:  MOVWF  FEA
054D0:  MOVF   FEF,W
054D2:  SUBLW  0D
054D4:  BZ    54E0
054D6:  MOVF   xBA,F
054D8:  BNZ   54E0
054DA:  MOVF   xB9,W
054DC:  SUBLW  1E
054DE:  BC    5530
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
054E0:  MOVLW  5D
054E2:  ADDWF  xB7,W
054E4:  MOVWF  xBD
054E6:  MOVLW  00
054E8:  ADDWFC xB8,W
054EA:  MOVWF  xBE
054EC:  MOVLW  7C
054EE:  ADDWF  xB7,W
054F0:  MOVWF  FE9
054F2:  MOVLW  01
054F4:  ADDWFC xB8,W
054F6:  MOVWF  FEA
054F8:  MOVFF  FEF,CBF
054FC:  MOVF   FF2,W
054FE:  MOVWF  00
05500:  BCF    FF2.7
05502:  MOVFF  CBE,FAA
05506:  MOVFF  CBD,FA9
0550A:  MOVFF  CBF,FA8
0550E:  BCF    FA6.6
05510:  BCF    FA6.7
05512:  BSF    FA6.2
05514:  MOVLB  F
05516:  MOVLW  55
05518:  MOVWF  FA7
0551A:  MOVLW  AA
0551C:  MOVWF  FA7
0551E:  BSF    FA6.1
05520:  BTFSC  FA6.1
05522:  BRA    5520
05524:  BCF    FA6.2
05526:  MOVF   00,W
05528:  IORWF  FF2,F
....................                      break;
0552A:  BRA    55BA
....................                   }
0552C:  BRA    55A2
0552E:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage12[j] = RxD_Buff[i];
05530:  MOVLW  FC
05532:  ADDWF  xB9,W
05534:  MOVWF  01
05536:  MOVLW  0A
05538:  ADDWFC xBA,W
0553A:  MOVWF  03
0553C:  MOVLW  7C
0553E:  ADDWF  xB7,W
05540:  MOVWF  FE9
05542:  MOVLW  01
05544:  ADDWFC xB8,W
05546:  MOVWF  FEA
05548:  MOVFF  FEF,CBF
0554C:  MOVFF  03,FEA
05550:  MOVFF  01,FE9
05554:  MOVFF  CBF,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05558:  MOVLW  5D
0555A:  ADDWF  xB7,W
0555C:  MOVWF  xBD
0555E:  MOVLW  00
05560:  ADDWFC xB8,W
05562:  MOVWF  xBE
05564:  MOVLW  7C
05566:  ADDWF  xB7,W
05568:  MOVWF  FE9
0556A:  MOVLW  01
0556C:  ADDWFC xB8,W
0556E:  MOVWF  FEA
05570:  MOVFF  FEF,CBF
05574:  MOVF   FF2,W
05576:  MOVWF  00
05578:  BCF    FF2.7
0557A:  MOVFF  CBE,FAA
0557E:  MOVFF  CBD,FA9
05582:  MOVFF  CBF,FA8
05586:  BCF    FA6.6
05588:  BCF    FA6.7
0558A:  BSF    FA6.2
0558C:  MOVLB  F
0558E:  MOVLW  55
05590:  MOVWF  FA7
05592:  MOVLW  AA
05594:  MOVWF  FA7
05596:  BSF    FA6.1
05598:  BTFSC  FA6.1
0559A:  BRA    5598
0559C:  BCF    FA6.2
0559E:  MOVF   00,W
055A0:  IORWF  FF2,F
....................                   }
055A2:  MOVLB  C
055A4:  MOVFF  CB8,03
055A8:  MOVF   xB7,W
055AA:  INCF   xB7,F
055AC:  BTFSC  FD8.2
055AE:  INCF   xB8,F
055B0:  INCF   xB9,F
055B2:  BTFSC  FD8.2
055B4:  INCF   xBA,F
055B6:  BRA    54C2
055B8:  MOVLB  F
....................                }
....................                SMS_Massage12[j] = '\0' ; // end string
055BA:  MOVLW  FC
055BC:  MOVLB  C
055BE:  ADDWF  xB9,W
055C0:  MOVWF  FE9
055C2:  MOVLW  0A
055C4:  ADDWFC xBA,W
055C6:  MOVWF  FEA
055C8:  CLRF   FEF
....................                
....................                j=0;
055CA:  CLRF   xBA
055CC:  CLRF   xB9
....................                i++;
055CE:  INCF   xB7,F
055D0:  BTFSC  FD8.2
055D2:  INCF   xB8,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
055D4:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
055D6:  MOVLW  7C
055D8:  ADDWF  xB7,W
055DA:  MOVWF  FE9
055DC:  MOVLW  01
055DE:  ADDWFC xB8,W
055E0:  MOVWF  FEA
055E2:  MOVF   FEF,W
055E4:  SUBLW  0D
055E6:  BZ    55F2
055E8:  MOVF   xBA,F
055EA:  BNZ   55F2
055EC:  MOVF   xB9,W
055EE:  SUBLW  1E
055F0:  BC    5642
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
055F2:  MOVLW  5D
055F4:  ADDWF  xB7,W
055F6:  MOVWF  xBD
055F8:  MOVLW  00
055FA:  ADDWFC xB8,W
055FC:  MOVWF  xBE
055FE:  MOVLW  7C
05600:  ADDWF  xB7,W
05602:  MOVWF  FE9
05604:  MOVLW  01
05606:  ADDWFC xB8,W
05608:  MOVWF  FEA
0560A:  MOVFF  FEF,CBF
0560E:  MOVF   FF2,W
05610:  MOVWF  00
05612:  BCF    FF2.7
05614:  MOVFF  CBE,FAA
05618:  MOVFF  CBD,FA9
0561C:  MOVFF  CBF,FA8
05620:  BCF    FA6.6
05622:  BCF    FA6.7
05624:  BSF    FA6.2
05626:  MOVLB  F
05628:  MOVLW  55
0562A:  MOVWF  FA7
0562C:  MOVLW  AA
0562E:  MOVWF  FA7
05630:  BSF    FA6.1
05632:  BTFSC  FA6.1
05634:  BRA    5632
05636:  BCF    FA6.2
05638:  MOVF   00,W
0563A:  IORWF  FF2,F
....................                      break;
0563C:  BRA    56CC
....................                   }
0563E:  BRA    56B4
05640:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage13[j] = RxD_Buff[i];
05642:  MOVLW  1C
05644:  ADDWF  xB9,W
05646:  MOVWF  01
05648:  MOVLW  0B
0564A:  ADDWFC xBA,W
0564C:  MOVWF  03
0564E:  MOVLW  7C
05650:  ADDWF  xB7,W
05652:  MOVWF  FE9
05654:  MOVLW  01
05656:  ADDWFC xB8,W
05658:  MOVWF  FEA
0565A:  MOVFF  FEF,CBF
0565E:  MOVFF  03,FEA
05662:  MOVFF  01,FE9
05666:  MOVFF  CBF,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0566A:  MOVLW  5D
0566C:  ADDWF  xB7,W
0566E:  MOVWF  xBD
05670:  MOVLW  00
05672:  ADDWFC xB8,W
05674:  MOVWF  xBE
05676:  MOVLW  7C
05678:  ADDWF  xB7,W
0567A:  MOVWF  FE9
0567C:  MOVLW  01
0567E:  ADDWFC xB8,W
05680:  MOVWF  FEA
05682:  MOVFF  FEF,CBF
05686:  MOVF   FF2,W
05688:  MOVWF  00
0568A:  BCF    FF2.7
0568C:  MOVFF  CBE,FAA
05690:  MOVFF  CBD,FA9
05694:  MOVFF  CBF,FA8
05698:  BCF    FA6.6
0569A:  BCF    FA6.7
0569C:  BSF    FA6.2
0569E:  MOVLB  F
056A0:  MOVLW  55
056A2:  MOVWF  FA7
056A4:  MOVLW  AA
056A6:  MOVWF  FA7
056A8:  BSF    FA6.1
056AA:  BTFSC  FA6.1
056AC:  BRA    56AA
056AE:  BCF    FA6.2
056B0:  MOVF   00,W
056B2:  IORWF  FF2,F
....................                   }
056B4:  MOVLB  C
056B6:  MOVFF  CB8,03
056BA:  MOVF   xB7,W
056BC:  INCF   xB7,F
056BE:  BTFSC  FD8.2
056C0:  INCF   xB8,F
056C2:  INCF   xB9,F
056C4:  BTFSC  FD8.2
056C6:  INCF   xBA,F
056C8:  BRA    55D4
056CA:  MOVLB  F
....................                }
....................                SMS_Massage13[j] = '\0' ; // end string
056CC:  MOVLW  1C
056CE:  MOVLB  C
056D0:  ADDWF  xB9,W
056D2:  MOVWF  FE9
056D4:  MOVLW  0B
056D6:  ADDWFC xBA,W
056D8:  MOVWF  FEA
056DA:  CLRF   FEF
....................                
....................                j=0;
056DC:  CLRF   xBA
056DE:  CLRF   xB9
....................                i++;
056E0:  INCF   xB7,F
056E2:  BTFSC  FD8.2
056E4:  INCF   xB8,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
056E6:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
056E8:  MOVLW  7C
056EA:  ADDWF  xB7,W
056EC:  MOVWF  FE9
056EE:  MOVLW  01
056F0:  ADDWFC xB8,W
056F2:  MOVWF  FEA
056F4:  MOVF   FEF,W
056F6:  SUBLW  0D
056F8:  BZ    5704
056FA:  MOVF   xBA,F
056FC:  BNZ   5704
056FE:  MOVF   xB9,W
05700:  SUBLW  1E
05702:  BC    5754
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05704:  MOVLW  5D
05706:  ADDWF  xB7,W
05708:  MOVWF  xBD
0570A:  MOVLW  00
0570C:  ADDWFC xB8,W
0570E:  MOVWF  xBE
05710:  MOVLW  7C
05712:  ADDWF  xB7,W
05714:  MOVWF  FE9
05716:  MOVLW  01
05718:  ADDWFC xB8,W
0571A:  MOVWF  FEA
0571C:  MOVFF  FEF,CBF
05720:  MOVF   FF2,W
05722:  MOVWF  00
05724:  BCF    FF2.7
05726:  MOVFF  CBE,FAA
0572A:  MOVFF  CBD,FA9
0572E:  MOVFF  CBF,FA8
05732:  BCF    FA6.6
05734:  BCF    FA6.7
05736:  BSF    FA6.2
05738:  MOVLB  F
0573A:  MOVLW  55
0573C:  MOVWF  FA7
0573E:  MOVLW  AA
05740:  MOVWF  FA7
05742:  BSF    FA6.1
05744:  BTFSC  FA6.1
05746:  BRA    5744
05748:  BCF    FA6.2
0574A:  MOVF   00,W
0574C:  IORWF  FF2,F
....................                      break;
0574E:  BRA    57DE
....................                   }
05750:  BRA    57C6
05752:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage14[j] = RxD_Buff[i];
05754:  MOVLW  3C
05756:  ADDWF  xB9,W
05758:  MOVWF  01
0575A:  MOVLW  0B
0575C:  ADDWFC xBA,W
0575E:  MOVWF  03
05760:  MOVLW  7C
05762:  ADDWF  xB7,W
05764:  MOVWF  FE9
05766:  MOVLW  01
05768:  ADDWFC xB8,W
0576A:  MOVWF  FEA
0576C:  MOVFF  FEF,CBF
05770:  MOVFF  03,FEA
05774:  MOVFF  01,FE9
05778:  MOVFF  CBF,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0577C:  MOVLW  5D
0577E:  ADDWF  xB7,W
05780:  MOVWF  xBD
05782:  MOVLW  00
05784:  ADDWFC xB8,W
05786:  MOVWF  xBE
05788:  MOVLW  7C
0578A:  ADDWF  xB7,W
0578C:  MOVWF  FE9
0578E:  MOVLW  01
05790:  ADDWFC xB8,W
05792:  MOVWF  FEA
05794:  MOVFF  FEF,CBF
05798:  MOVF   FF2,W
0579A:  MOVWF  00
0579C:  BCF    FF2.7
0579E:  MOVFF  CBE,FAA
057A2:  MOVFF  CBD,FA9
057A6:  MOVFF  CBF,FA8
057AA:  BCF    FA6.6
057AC:  BCF    FA6.7
057AE:  BSF    FA6.2
057B0:  MOVLB  F
057B2:  MOVLW  55
057B4:  MOVWF  FA7
057B6:  MOVLW  AA
057B8:  MOVWF  FA7
057BA:  BSF    FA6.1
057BC:  BTFSC  FA6.1
057BE:  BRA    57BC
057C0:  BCF    FA6.2
057C2:  MOVF   00,W
057C4:  IORWF  FF2,F
....................                   }
057C6:  MOVLB  C
057C8:  MOVFF  CB8,03
057CC:  MOVF   xB7,W
057CE:  INCF   xB7,F
057D0:  BTFSC  FD8.2
057D2:  INCF   xB8,F
057D4:  INCF   xB9,F
057D6:  BTFSC  FD8.2
057D8:  INCF   xBA,F
057DA:  BRA    56E6
057DC:  MOVLB  F
....................                }
....................                SMS_Massage14[j] = '\0' ; // end string
057DE:  MOVLW  3C
057E0:  MOVLB  C
057E2:  ADDWF  xB9,W
057E4:  MOVWF  FE9
057E6:  MOVLW  0B
057E8:  ADDWFC xBA,W
057EA:  MOVWF  FEA
057EC:  CLRF   FEF
....................                
....................                j=0;
057EE:  CLRF   xBA
057F0:  CLRF   xB9
....................                i++;
057F2:  INCF   xB7,F
057F4:  BTFSC  FD8.2
057F6:  INCF   xB8,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
057F8:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
057FA:  MOVLW  7C
057FC:  ADDWF  xB7,W
057FE:  MOVWF  FE9
05800:  MOVLW  01
05802:  ADDWFC xB8,W
05804:  MOVWF  FEA
05806:  MOVF   FEF,W
05808:  SUBLW  0D
0580A:  BZ    5816
0580C:  MOVF   xBA,F
0580E:  BNZ   5816
05810:  MOVF   xB9,W
05812:  SUBLW  1E
05814:  BC    5866
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05816:  MOVLW  5D
05818:  ADDWF  xB7,W
0581A:  MOVWF  xBD
0581C:  MOVLW  00
0581E:  ADDWFC xB8,W
05820:  MOVWF  xBE
05822:  MOVLW  7C
05824:  ADDWF  xB7,W
05826:  MOVWF  FE9
05828:  MOVLW  01
0582A:  ADDWFC xB8,W
0582C:  MOVWF  FEA
0582E:  MOVFF  FEF,CBF
05832:  MOVF   FF2,W
05834:  MOVWF  00
05836:  BCF    FF2.7
05838:  MOVFF  CBE,FAA
0583C:  MOVFF  CBD,FA9
05840:  MOVFF  CBF,FA8
05844:  BCF    FA6.6
05846:  BCF    FA6.7
05848:  BSF    FA6.2
0584A:  MOVLB  F
0584C:  MOVLW  55
0584E:  MOVWF  FA7
05850:  MOVLW  AA
05852:  MOVWF  FA7
05854:  BSF    FA6.1
05856:  BTFSC  FA6.1
05858:  BRA    5856
0585A:  BCF    FA6.2
0585C:  MOVF   00,W
0585E:  IORWF  FF2,F
....................                      break;
05860:  BRA    58F0
....................                   }
05862:  BRA    58D8
05864:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage15[j] = RxD_Buff[i];
05866:  MOVLW  5C
05868:  ADDWF  xB9,W
0586A:  MOVWF  01
0586C:  MOVLW  0B
0586E:  ADDWFC xBA,W
05870:  MOVWF  03
05872:  MOVLW  7C
05874:  ADDWF  xB7,W
05876:  MOVWF  FE9
05878:  MOVLW  01
0587A:  ADDWFC xB8,W
0587C:  MOVWF  FEA
0587E:  MOVFF  FEF,CBF
05882:  MOVFF  03,FEA
05886:  MOVFF  01,FE9
0588A:  MOVFF  CBF,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0588E:  MOVLW  5D
05890:  ADDWF  xB7,W
05892:  MOVWF  xBD
05894:  MOVLW  00
05896:  ADDWFC xB8,W
05898:  MOVWF  xBE
0589A:  MOVLW  7C
0589C:  ADDWF  xB7,W
0589E:  MOVWF  FE9
058A0:  MOVLW  01
058A2:  ADDWFC xB8,W
058A4:  MOVWF  FEA
058A6:  MOVFF  FEF,CBF
058AA:  MOVF   FF2,W
058AC:  MOVWF  00
058AE:  BCF    FF2.7
058B0:  MOVFF  CBE,FAA
058B4:  MOVFF  CBD,FA9
058B8:  MOVFF  CBF,FA8
058BC:  BCF    FA6.6
058BE:  BCF    FA6.7
058C0:  BSF    FA6.2
058C2:  MOVLB  F
058C4:  MOVLW  55
058C6:  MOVWF  FA7
058C8:  MOVLW  AA
058CA:  MOVWF  FA7
058CC:  BSF    FA6.1
058CE:  BTFSC  FA6.1
058D0:  BRA    58CE
058D2:  BCF    FA6.2
058D4:  MOVF   00,W
058D6:  IORWF  FF2,F
....................                   }
058D8:  MOVLB  C
058DA:  MOVFF  CB8,03
058DE:  MOVF   xB7,W
058E0:  INCF   xB7,F
058E2:  BTFSC  FD8.2
058E4:  INCF   xB8,F
058E6:  INCF   xB9,F
058E8:  BTFSC  FD8.2
058EA:  INCF   xBA,F
058EC:  BRA    57F8
058EE:  MOVLB  F
....................                }
....................                SMS_Massage15[j] = '\0' ; // end string
058F0:  MOVLW  5C
058F2:  MOVLB  C
058F4:  ADDWF  xB9,W
058F6:  MOVWF  FE9
058F8:  MOVLW  0B
058FA:  ADDWFC xBA,W
058FC:  MOVWF  FEA
058FE:  CLRF   FEF
....................                
....................                j=0;
05900:  CLRF   xBA
05902:  CLRF   xB9
....................                i++;
05904:  INCF   xB7,F
05906:  BTFSC  FD8.2
05908:  INCF   xB8,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
0590A:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0590C:  MOVLW  7C
0590E:  ADDWF  xB7,W
05910:  MOVWF  FE9
05912:  MOVLW  01
05914:  ADDWFC xB8,W
05916:  MOVWF  FEA
05918:  MOVF   FEF,W
0591A:  SUBLW  0D
0591C:  BZ    5928
0591E:  MOVF   xBA,F
05920:  BNZ   5928
05922:  MOVF   xB9,W
05924:  SUBLW  1E
05926:  BC    5978
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05928:  MOVLW  5D
0592A:  ADDWF  xB7,W
0592C:  MOVWF  xBD
0592E:  MOVLW  00
05930:  ADDWFC xB8,W
05932:  MOVWF  xBE
05934:  MOVLW  7C
05936:  ADDWF  xB7,W
05938:  MOVWF  FE9
0593A:  MOVLW  01
0593C:  ADDWFC xB8,W
0593E:  MOVWF  FEA
05940:  MOVFF  FEF,CBF
05944:  MOVF   FF2,W
05946:  MOVWF  00
05948:  BCF    FF2.7
0594A:  MOVFF  CBE,FAA
0594E:  MOVFF  CBD,FA9
05952:  MOVFF  CBF,FA8
05956:  BCF    FA6.6
05958:  BCF    FA6.7
0595A:  BSF    FA6.2
0595C:  MOVLB  F
0595E:  MOVLW  55
05960:  MOVWF  FA7
05962:  MOVLW  AA
05964:  MOVWF  FA7
05966:  BSF    FA6.1
05968:  BTFSC  FA6.1
0596A:  BRA    5968
0596C:  BCF    FA6.2
0596E:  MOVF   00,W
05970:  IORWF  FF2,F
....................                      break;
05972:  BRA    5A02
....................                   }
05974:  BRA    59EA
05976:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage16[j] = RxD_Buff[i];
05978:  MOVLW  7C
0597A:  ADDWF  xB9,W
0597C:  MOVWF  01
0597E:  MOVLW  0B
05980:  ADDWFC xBA,W
05982:  MOVWF  03
05984:  MOVLW  7C
05986:  ADDWF  xB7,W
05988:  MOVWF  FE9
0598A:  MOVLW  01
0598C:  ADDWFC xB8,W
0598E:  MOVWF  FEA
05990:  MOVFF  FEF,CBF
05994:  MOVFF  03,FEA
05998:  MOVFF  01,FE9
0599C:  MOVFF  CBF,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
059A0:  MOVLW  5D
059A2:  ADDWF  xB7,W
059A4:  MOVWF  xBD
059A6:  MOVLW  00
059A8:  ADDWFC xB8,W
059AA:  MOVWF  xBE
059AC:  MOVLW  7C
059AE:  ADDWF  xB7,W
059B0:  MOVWF  FE9
059B2:  MOVLW  01
059B4:  ADDWFC xB8,W
059B6:  MOVWF  FEA
059B8:  MOVFF  FEF,CBF
059BC:  MOVF   FF2,W
059BE:  MOVWF  00
059C0:  BCF    FF2.7
059C2:  MOVFF  CBE,FAA
059C6:  MOVFF  CBD,FA9
059CA:  MOVFF  CBF,FA8
059CE:  BCF    FA6.6
059D0:  BCF    FA6.7
059D2:  BSF    FA6.2
059D4:  MOVLB  F
059D6:  MOVLW  55
059D8:  MOVWF  FA7
059DA:  MOVLW  AA
059DC:  MOVWF  FA7
059DE:  BSF    FA6.1
059E0:  BTFSC  FA6.1
059E2:  BRA    59E0
059E4:  BCF    FA6.2
059E6:  MOVF   00,W
059E8:  IORWF  FF2,F
....................                   }
059EA:  MOVLB  C
059EC:  MOVFF  CB8,03
059F0:  MOVF   xB7,W
059F2:  INCF   xB7,F
059F4:  BTFSC  FD8.2
059F6:  INCF   xB8,F
059F8:  INCF   xB9,F
059FA:  BTFSC  FD8.2
059FC:  INCF   xBA,F
059FE:  BRA    590A
05A00:  MOVLB  F
....................                }
....................                SMS_Massage16[j] = '\0' ; // end string
05A02:  MOVLW  7C
05A04:  MOVLB  C
05A06:  ADDWF  xB9,W
05A08:  MOVWF  FE9
05A0A:  MOVLW  0B
05A0C:  ADDWFC xBA,W
05A0E:  MOVWF  FEA
05A10:  CLRF   FEF
....................                
....................             
....................                TxD_Buff[0] = Address ;         //Address
05A12:  MOVFF  7B,7D
....................                TxD_Buff[1] = 0x22 ;            //return function code
05A16:  MOVLW  22
05A18:  MOVLB  0
05A1A:  MOVWF  x7E
....................    
....................                CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
05A1C:  MOVLB  C
05A1E:  CLRF   xBF
05A20:  MOVLW  7D
05A22:  MOVWF  xBE
05A24:  MOVLW  02
05A26:  MOVWF  xC0
05A28:  MOVLB  0
05A2A:  CALL   2A02
....................    
....................                TxD_Buff[2] = CRC_Hi ;
05A2E:  MOVFF  57D,7F
....................                TxD_Buff[3] = CRC_Lo ;
05A32:  MOVFF  57C,80
....................    
....................                output_bit(P485ctrl,1);
05A36:  BSF    F8A.3
05A38:  BCF    F93.3
....................                delay_ms(10);
05A3A:  MOVLW  0A
05A3C:  MOVLB  C
05A3E:  MOVWF  xBD
05A40:  MOVLB  0
05A42:  CALL   0658
....................    
....................                putc(Txd_Buff[0]);
05A46:  MOVF   x7D,W
05A48:  CALL   2A58
....................                putc(Txd_Buff[1]);
05A4C:  MOVF   x7E,W
05A4E:  CALL   2A58
....................                putc(Txd_Buff[2]);
05A52:  MOVF   x7F,W
05A54:  CALL   2A58
....................                putc(Txd_Buff[3]);
05A58:  MOVF   x80,W
05A5A:  CALL   2A58
....................    
....................                delay_ms(3);
05A5E:  MOVLW  03
05A60:  MOVLB  C
05A62:  MOVWF  xBD
05A64:  MOVLB  0
05A66:  CALL   0658
....................                output_bit(P485ctrl,0);
05A6A:  BCF    F8A.3
05A6C:  BCF    F93.3
05A6E:  MOVLB  5
....................             }
....................             ////////////////////////////// WRITE Faultname //////////////////////////
....................    
....................             if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
05A70:  MOVLB  1
05A72:  MOVF   x7D,W
05A74:  SUBLW  03
05A76:  BNZ   5B04
....................             {
....................                Data_Buff[0] = Input9_16;
05A78:  MOVFF  4C,585
....................                Data_Buff[1] = Input1_8;
05A7C:  MOVFF  4B,586
....................                
....................                
....................                TxD_Buff[0] = Address ;         //Address
05A80:  MOVFF  7B,7D
....................                TxD_Buff[1] = 0x03 ;           //Function Code
05A84:  MOVLW  03
05A86:  MOVLB  0
05A88:  MOVWF  x7E
....................                TxD_Buff[2] = 0x02 ;          //Byte Count
05A8A:  MOVLW  02
05A8C:  MOVWF  x7F
....................                TxD_Buff[3] = Data_Buff[0];   //first byte Data
05A8E:  MOVFF  585,80
....................                TxD_Buff[4] = Data_Buff[1];   //first byte Data
05A92:  MOVFF  586,81
....................    
....................                CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
05A96:  MOVLB  C
05A98:  CLRF   xBF
05A9A:  MOVLW  7D
05A9C:  MOVWF  xBE
05A9E:  MOVLW  05
05AA0:  MOVWF  xC0
05AA2:  MOVLB  0
05AA4:  CALL   2A02
....................    
....................                TxD_Buff[5] = CRC_Hi ;
05AA8:  MOVFF  57D,82
....................                TxD_Buff[6] = CRC_Lo ;
05AAC:  MOVFF  57C,83
....................    
....................                output_bit(P485ctrl,1);
05AB0:  BSF    F8A.3
05AB2:  BCF    F93.3
....................                restart_wdt();
05AB4:  CLRWDT
....................                delay_ms(4);
05AB6:  MOVLW  04
05AB8:  MOVLB  C
05ABA:  MOVWF  xBD
05ABC:  MOVLB  0
05ABE:  CALL   0658
....................                restart_wdt();
05AC2:  CLRWDT
....................    
....................                putc(TxD_Buff[0]) ;               //Address
05AC4:  MOVF   x7D,W
05AC6:  CALL   2A58
....................                putc(TxD_Buff[1]) ;               //Function Code
05ACA:  MOVF   x7E,W
05ACC:  CALL   2A58
....................                putc(TxD_Buff[2]) ;               //Byte Count
05AD0:  MOVF   x7F,W
05AD2:  CALL   2A58
....................                putc(TxD_Buff[3]) ;
05AD6:  MOVF   x80,W
05AD8:  CALL   2A58
....................                putc(TxD_Buff[4]) ;
05ADC:  MOVF   x81,W
05ADE:  CALL   2A58
....................                putc(TxD_Buff[5]) ;
05AE2:  MOVF   x82,W
05AE4:  CALL   2A58
....................                putc(TxD_Buff[6]) ;
05AE8:  MOVF   x83,W
05AEA:  CALL   2A58
....................    
....................                restart_wdt();
05AEE:  CLRWDT
....................                delay_ms(3);
05AF0:  MOVLW  03
05AF2:  MOVLB  C
05AF4:  MOVWF  xBD
05AF6:  MOVLB  0
05AF8:  CALL   0658
....................                restart_wdt();
05AFC:  CLRWDT
....................                output_bit(P485ctrl,0);
05AFE:  BCF    F8A.3
05B00:  BCF    F93.3
05B02:  MOVLB  1
....................             }
....................       }  //if(RxD_Buff[1] == address)
.................... 
....................       Send_check_Time = 500; //5 Second
05B04:  MOVLW  01
05B06:  MOVLB  5
05B08:  MOVWF  x7F
05B0A:  MOVLW  F4
05B0C:  MOVWF  x7E
....................    }
.................... 
....................    recieve_completed = 0 ;
05B0E:  BCF    32.5
....................    sequence = end_sq ;
05B10:  MOVFF  71,7A
....................    T_timeout = 0x00;
05B14:  MOVLB  9
05B16:  CLRF   x87
....................    RxD_DataLen = 0x00 ;
05B18:  MOVLB  0
05B1A:  CLRF   x7C
....................    output_bit(P485ctrl,0);
05B1C:  BCF    F8A.3
05B1E:  BCF    F93.3
05B20:  GOTO   9496 (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void Read_Input(void)
.................... {
.................... 
....................    int8 MCP23s17_1_A;
....................    int8 MCP23s17_1_B;
....................    int8 MCP23s17_2_A;
....................    int8 MCP23s17_2_B;
....................    
....................    //if(NoOfPoint >= 10)
....................    //{
....................       // if(NoOfPoint >= 20)
....................    //{   
....................      
....................       ///////////////////////--Edit--///////////////////
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
*
01C72:  MOVLW  02
01C74:  MOVLB  C
01C76:  MOVWF  xC2
01C78:  MOVLB  0
01C7A:  RCALL  1B42
01C7C:  MOVFF  01,985
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01C80:  BTFSS  1C.4
01C82:  BRA    1C8A
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;   
01C84:  MOVLB  9
01C86:  COMF   x85,F
01C88:  MOVLB  0
....................       }
....................       
....................       
....................      // FaultNow[11] = MCP23s17_Ip_dat;
....................       FaultNow[1] = MCP23s17_Ip_dat >> 1;
01C8A:  BCF    FD8.0
01C8C:  MOVLB  9
01C8E:  RRCF   x85,W
01C90:  MOVLB  C
01C92:  BCF    x61.1
01C94:  BTFSC  FE8.0
01C96:  BSF    x61.1
....................       FaultNow[2] = MCP23s17_Ip_dat >> 2;
01C98:  MOVLB  9
01C9A:  RRCF   x85,W
01C9C:  MOVWF  00
01C9E:  RRCF   00,F
01CA0:  MOVLW  3F
01CA2:  ANDWF  00,F
01CA4:  MOVLB  C
01CA6:  BCF    x61.2
01CA8:  BTFSC  00.0
01CAA:  BSF    x61.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 3;
01CAC:  MOVLB  9
01CAE:  RRCF   x85,W
01CB0:  MOVWF  00
01CB2:  RRCF   00,F
01CB4:  RRCF   00,F
01CB6:  MOVLW  1F
01CB8:  ANDWF  00,F
01CBA:  MOVLB  C
01CBC:  BCF    x61.3
01CBE:  BTFSC  00.0
01CC0:  BSF    x61.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 4;
01CC2:  MOVLB  9
01CC4:  SWAPF  x85,W
01CC6:  MOVWF  00
01CC8:  MOVLW  0F
01CCA:  ANDWF  00,F
01CCC:  MOVLB  C
01CCE:  BCF    x61.4
01CD0:  BTFSC  00.0
01CD2:  BSF    x61.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 5;
01CD4:  MOVLB  9
01CD6:  SWAPF  x85,W
01CD8:  MOVWF  00
01CDA:  RRCF   00,F
01CDC:  MOVLW  07
01CDE:  ANDWF  00,F
01CE0:  MOVLB  C
01CE2:  BCF    x61.5
01CE4:  BTFSC  00.0
01CE6:  BSF    x61.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 6;
01CE8:  MOVLB  9
01CEA:  SWAPF  x85,W
01CEC:  MOVWF  00
01CEE:  RRCF   00,F
01CF0:  RRCF   00,F
01CF2:  MOVLW  03
01CF4:  ANDWF  00,F
01CF6:  MOVLB  C
01CF8:  BCF    x61.6
01CFA:  BTFSC  00.0
01CFC:  BSF    x61.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 7;
01CFE:  CLRF   00
01D00:  MOVLB  9
01D02:  BTFSC  x85.7
01D04:  BSF    00.0
01D06:  MOVLB  C
01D08:  BCF    x61.7
01D0A:  BTFSC  00.0
01D0C:  BSF    x61.7
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
01D0E:  MOVLW  02
01D10:  MOVWF  xC2
01D12:  MOVLB  0
01D14:  RCALL  1B5E
01D16:  MOVFF  01,985
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01D1A:  BTFSS  1C.4
01D1C:  BRA    1D24
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
01D1E:  MOVLB  9
01D20:  COMF   x85,F
01D22:  MOVLB  0
....................       }
....................       
....................       FaultNow[8] = MCP23s17_Ip_dat;
01D24:  MOVLB  C
01D26:  BCF    x62.0
01D28:  MOVLB  9
01D2A:  BTFSS  x85.0
01D2C:  BRA    1D34
01D2E:  MOVLB  C
01D30:  BSF    x62.0
01D32:  MOVLB  9
....................       
....................       
....................        MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_0);
01D34:  MOVLB  C
01D36:  CLRF   xC2
01D38:  MOVLB  0
01D3A:  RCALL  1B42
01D3C:  MOVFF  01,985
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01D40:  BTFSS  1C.4
01D42:  BRA    1D4A
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;         
01D44:  MOVLB  9
01D46:  COMF   x85,F
01D48:  MOVLB  0
....................       }
....................       
....................       // FaultNow[11] = MCP23s17_Ip_dat;
....................       FaultNow[9] = MCP23s17_Ip_dat >> 1;
01D4A:  BCF    FD8.0
01D4C:  MOVLB  9
01D4E:  RRCF   x85,W
01D50:  MOVLB  C
01D52:  BCF    x62.1
01D54:  BTFSC  FE8.0
01D56:  BSF    x62.1
....................       FaultNow[10] = MCP23s17_Ip_dat >> 2;
01D58:  MOVLB  9
01D5A:  RRCF   x85,W
01D5C:  MOVWF  00
01D5E:  RRCF   00,F
01D60:  MOVLW  3F
01D62:  ANDWF  00,F
01D64:  MOVLB  C
01D66:  BCF    x62.2
01D68:  BTFSC  00.0
01D6A:  BSF    x62.2
....................       FaultNow[11] = MCP23s17_Ip_dat >> 3;
01D6C:  MOVLB  9
01D6E:  RRCF   x85,W
01D70:  MOVWF  00
01D72:  RRCF   00,F
01D74:  RRCF   00,F
01D76:  MOVLW  1F
01D78:  ANDWF  00,F
01D7A:  MOVLB  C
01D7C:  BCF    x62.3
01D7E:  BTFSC  00.0
01D80:  BSF    x62.3
....................       FaultNow[12] = MCP23s17_Ip_dat >> 4;
01D82:  MOVLB  9
01D84:  SWAPF  x85,W
01D86:  MOVWF  00
01D88:  MOVLW  0F
01D8A:  ANDWF  00,F
01D8C:  MOVLB  C
01D8E:  BCF    x62.4
01D90:  BTFSC  00.0
01D92:  BSF    x62.4
....................       FaultNow[13] = MCP23s17_Ip_dat >> 5;
01D94:  MOVLB  9
01D96:  SWAPF  x85,W
01D98:  MOVWF  00
01D9A:  RRCF   00,F
01D9C:  MOVLW  07
01D9E:  ANDWF  00,F
01DA0:  MOVLB  C
01DA2:  BCF    x62.5
01DA4:  BTFSC  00.0
01DA6:  BSF    x62.5
....................       FaultNow[14] = MCP23s17_Ip_dat >> 6;
01DA8:  MOVLB  9
01DAA:  SWAPF  x85,W
01DAC:  MOVWF  00
01DAE:  RRCF   00,F
01DB0:  RRCF   00,F
01DB2:  MOVLW  03
01DB4:  ANDWF  00,F
01DB6:  MOVLB  C
01DB8:  BCF    x62.6
01DBA:  BTFSC  00.0
01DBC:  BSF    x62.6
....................       FaultNow[15] = MCP23s17_Ip_dat >> 7;
01DBE:  CLRF   00
01DC0:  MOVLB  9
01DC2:  BTFSC  x85.7
01DC4:  BSF    00.0
01DC6:  MOVLB  C
01DC8:  BCF    x62.7
01DCA:  BTFSC  00.0
01DCC:  BSF    x62.7
....................       
....................        MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
01DCE:  CLRF   xC2
01DD0:  MOVLB  0
01DD2:  RCALL  1B5E
01DD4:  MOVFF  01,985
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01DD8:  BTFSS  1C.4
01DDA:  BRA    1DE2
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
01DDC:  MOVLB  9
01DDE:  COMF   x85,F
01DE0:  MOVLB  0
....................       }
....................       
....................       
....................       FaultNow[16] = MCP23s17_Ip_dat;
01DE2:  MOVLB  C
01DE4:  BCF    x63.0
01DE6:  MOVLB  9
01DE8:  BTFSS  x85.0
01DEA:  BRA    1DF2
01DEC:  MOVLB  C
01DEE:  BSF    x63.0
01DF0:  MOVLB  9
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=16; i++)
01DF2:  MOVLW  01
01DF4:  MOVLB  C
01DF6:  MOVWF  xC1
01DF8:  MOVF   xC1,W
01DFA:  SUBLW  10
01DFC:  BTFSS  FD8.0
01DFE:  BRA    2368
....................       {
....................          if(FaultNCNO[i] ==NO)
01E00:  MOVFF  CC1,CC5
01E04:  MOVLW  0C
01E06:  MOVWF  xC7
01E08:  MOVLW  A8
01E0A:  MOVWF  xC6
01E0C:  MOVLB  0
01E0E:  RCALL  1B7A
01E10:  MOVF   01,W
01E12:  ANDLW  01
01E14:  SUBLW  01
01E16:  BTFSS  FD8.2
01E18:  BRA    20B0
....................          {
....................              if(FaultNow[i]==0)
01E1A:  MOVFF  CC1,CC5
01E1E:  MOVLW  0C
01E20:  MOVLB  C
01E22:  MOVWF  xC7
01E24:  MOVLW  61
01E26:  MOVWF  xC6
01E28:  MOVLB  0
01E2A:  RCALL  1B7A
01E2C:  MOVF   01,W
01E2E:  ANDLW  01
01E30:  BTFSS  FD8.2
01E32:  BRA    1F72
....................              {   
....................                if(FaultAgo[i]==0)
01E34:  MOVFF  CC1,CC5
01E38:  MOVLW  0C
01E3A:  MOVLB  C
01E3C:  MOVWF  xC7
01E3E:  MOVLW  5E
01E40:  MOVWF  xC6
01E42:  MOVLB  0
01E44:  RCALL  1B7A
01E46:  MOVF   01,W
01E48:  ANDLW  01
01E4A:  BTFSS  FD8.2
01E4C:  BRA    1F56
....................                {
....................                    ReleaseTime[i]++;
01E4E:  BCF    FD8.0
01E50:  MOVLB  C
01E52:  RLCF   xC1,W
01E54:  CLRF   03
01E56:  ADDLW  64
01E58:  MOVWF  FE9
01E5A:  MOVLW  0C
01E5C:  ADDWFC 03,W
01E5E:  MOVWF  FEA
01E60:  MOVLW  01
01E62:  ADDWF  FEE,F
01E64:  BNC   1E68
01E66:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01E68:  BCF    FD8.0
01E6A:  RLCF   xC1,W
01E6C:  CLRF   03
01E6E:  ADDLW  64
01E70:  MOVWF  FE9
01E72:  MOVLW  0C
01E74:  ADDWFC 03,W
01E76:  MOVWF  FEA
01E78:  MOVFF  FEC,CC3
01E7C:  MOVF   FED,F
01E7E:  MOVFF  FEF,CC2
01E82:  BCF    FD8.0
01E84:  RLCF   xC1,W
01E86:  CLRF   03
01E88:  ADDLW  86
01E8A:  MOVWF  FE9
01E8C:  MOVLW  0C
01E8E:  ADDWFC 03,W
01E90:  MOVWF  FEA
01E92:  MOVFF  FEC,CC7
01E96:  MOVF   FED,F
01E98:  MOVFF  FEF,CC6
01E9C:  CLRF   xC9
01E9E:  MOVLW  4B
01EA0:  MOVWF  xC8
01EA2:  MOVLB  0
01EA4:  RCALL  1BB0
01EA6:  MOVFF  02,CC5
01EAA:  MOVFF  01,CC4
01EAE:  MOVLW  0F
01EB0:  MOVLB  C
01EB2:  ADDWF  01,W
01EB4:  MOVWF  01
01EB6:  MOVLW  00
01EB8:  ADDWFC 02,W
01EBA:  MOVWF  03
01EBC:  MOVF   03,W
01EBE:  SUBWF  xC3,W
01EC0:  BNC   1F52
01EC2:  BNZ   1ECA
01EC4:  MOVF   01,W
01EC6:  SUBWF  xC2,W
01EC8:  BNC   1F52
....................                    {   
....................                      ReleaseTime[i] = 0;
01ECA:  BCF    FD8.0
01ECC:  RLCF   xC1,W
01ECE:  CLRF   03
01ED0:  ADDLW  64
01ED2:  MOVWF  FE9
01ED4:  MOVLW  0C
01ED6:  ADDWFC 03,W
01ED8:  MOVWF  FEA
01EDA:  CLRF   FEC
01EDC:  MOVF   FED,F
01EDE:  CLRF   FEF
....................                      switch(i)
01EE0:  MOVLW  01
01EE2:  SUBWF  xC1,W
01EE4:  ADDLW  F0
01EE6:  BC    1F52
01EE8:  ADDLW  10
01EEA:  MOVLB  0
01EEC:  GOTO   24E0
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
01EF0:  MOVLB  C
01EF2:  BCF    x40.0
....................                         break;
01EF4:  BRA    1F52
....................                         case 2:
....................                            Inputt.B2 = 0; 
01EF6:  MOVLB  C
01EF8:  BCF    x40.1
....................                         break;
01EFA:  BRA    1F52
....................                         case 3:
....................                            Inputt.B3 = 0; 
01EFC:  MOVLB  C
01EFE:  BCF    x40.2
....................                         break;
01F00:  BRA    1F52
....................                         case 4:
....................                            Inputt.B4 = 0; 
01F02:  MOVLB  C
01F04:  BCF    x40.3
....................                         break;
01F06:  BRA    1F52
....................                         case 5:
....................                            Inputt.B5 = 0; 
01F08:  MOVLB  C
01F0A:  BCF    x40.4
....................                         break;
01F0C:  BRA    1F52
....................                         case 6:
....................                            Inputt.B6 = 0; 
01F0E:  MOVLB  C
01F10:  BCF    x40.5
....................                         break;
01F12:  BRA    1F52
....................                         case 7:
....................                            Inputt.B7 = 0; 
01F14:  MOVLB  C
01F16:  BCF    x40.6
....................                          break;
01F18:  BRA    1F52
....................                          case 8:
....................                            Inputt.B8 = 0; 
01F1A:  MOVLB  C
01F1C:  BCF    x40.7
....................                         break;
01F1E:  BRA    1F52
....................                         case 9:
....................                            Inputt.B9 = 0; 
01F20:  MOVLB  C
01F22:  BCF    x41.0
....................                         break;
01F24:  BRA    1F52
....................                         case 10:
....................                            Inputt.B10 = 0; 
01F26:  MOVLB  C
01F28:  BCF    x41.1
....................                         break;
01F2A:  BRA    1F52
....................                         case 11:
....................                            Inputt.B11 = 0; 
01F2C:  MOVLB  C
01F2E:  BCF    x41.2
....................                         break;
01F30:  BRA    1F52
....................                         case 12:
....................                            Inputt.B12 = 0; 
01F32:  MOVLB  C
01F34:  BCF    x41.3
....................                         break;
01F36:  BRA    1F52
....................                         case 13:
....................                            Inputt.B13 = 0; 
01F38:  MOVLB  C
01F3A:  BCF    x41.4
....................                         break;
01F3C:  BRA    1F52
....................                         case 14:
....................                            Inputt.B14 = 0; 
01F3E:  MOVLB  C
01F40:  BCF    x41.5
....................                         break;
01F42:  BRA    1F52
....................                         case 15:
....................                            Inputt.B15 = 0; 
01F44:  MOVLB  C
01F46:  BCF    x41.6
....................                         break;
01F48:  BRA    1F52
....................                         case 16:
....................                             Inputt.B16 = 0; 
01F4A:  MOVLB  C
01F4C:  BCF    x41.7
....................                          break;
01F4E:  BRA    1F52
01F50:  MOVLB  C
....................                                    
....................                      }                 
....................                    }
....................                }
01F52:  BRA    1F6E
01F54:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01F56:  BCF    FD8.0
01F58:  MOVLB  C
01F5A:  RLCF   xC1,W
01F5C:  CLRF   03
01F5E:  ADDLW  64
01F60:  MOVWF  FE9
01F62:  MOVLW  0C
01F64:  ADDWFC 03,W
01F66:  MOVWF  FEA
01F68:  CLRF   FEC
01F6A:  MOVF   FED,F
01F6C:  CLRF   FEF
....................                }
....................              }
01F6E:  BRA    20AE
01F70:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
01F72:  MOVFF  CC1,CC5
01F76:  MOVLW  0C
01F78:  MOVLB  C
01F7A:  MOVWF  xC7
01F7C:  MOVLW  5E
01F7E:  MOVWF  xC6
01F80:  MOVLB  0
01F82:  RCALL  1B7A
01F84:  MOVF   01,W
01F86:  ANDLW  01
01F88:  SUBLW  01
01F8A:  BTFSS  FD8.2
01F8C:  BRA    2096
....................                {
....................                    ReleaseTime[i]++;
01F8E:  BCF    FD8.0
01F90:  MOVLB  C
01F92:  RLCF   xC1,W
01F94:  CLRF   03
01F96:  ADDLW  64
01F98:  MOVWF  FE9
01F9A:  MOVLW  0C
01F9C:  ADDWFC 03,W
01F9E:  MOVWF  FEA
01FA0:  MOVLW  01
01FA2:  ADDWF  FEE,F
01FA4:  BNC   1FA8
01FA6:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01FA8:  BCF    FD8.0
01FAA:  RLCF   xC1,W
01FAC:  CLRF   03
01FAE:  ADDLW  64
01FB0:  MOVWF  FE9
01FB2:  MOVLW  0C
01FB4:  ADDWFC 03,W
01FB6:  MOVWF  FEA
01FB8:  MOVFF  FEC,CC3
01FBC:  MOVF   FED,F
01FBE:  MOVFF  FEF,CC2
01FC2:  BCF    FD8.0
01FC4:  RLCF   xC1,W
01FC6:  CLRF   03
01FC8:  ADDLW  86
01FCA:  MOVWF  FE9
01FCC:  MOVLW  0C
01FCE:  ADDWFC 03,W
01FD0:  MOVWF  FEA
01FD2:  MOVFF  FEC,CC7
01FD6:  MOVF   FED,F
01FD8:  MOVFF  FEF,CC6
01FDC:  CLRF   xC9
01FDE:  MOVLW  4B
01FE0:  MOVWF  xC8
01FE2:  MOVLB  0
01FE4:  RCALL  1BB0
01FE6:  MOVFF  02,CC5
01FEA:  MOVFF  01,CC4
01FEE:  MOVLW  0F
01FF0:  MOVLB  C
01FF2:  ADDWF  01,W
01FF4:  MOVWF  01
01FF6:  MOVLW  00
01FF8:  ADDWFC 02,W
01FFA:  MOVWF  03
01FFC:  MOVF   03,W
01FFE:  SUBWF  xC3,W
02000:  BNC   2092
02002:  BNZ   200A
02004:  MOVF   01,W
02006:  SUBWF  xC2,W
02008:  BNC   2092
....................                    {   
....................                      ReleaseTime[i] = 1;
0200A:  BCF    FD8.0
0200C:  RLCF   xC1,W
0200E:  CLRF   03
02010:  ADDLW  64
02012:  MOVWF  FE9
02014:  MOVLW  0C
02016:  ADDWFC 03,W
02018:  MOVWF  FEA
0201A:  CLRF   FEC
0201C:  MOVF   FED,F
0201E:  MOVLW  01
02020:  MOVWF  FEF
....................                      switch(i)
02022:  SUBWF  xC1,W
02024:  ADDLW  F0
02026:  BC    2092
02028:  ADDLW  10
0202A:  MOVLB  0
0202C:  GOTO   251A
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
02030:  MOVLB  C
02032:  BSF    x40.0
....................                         break;
02034:  BRA    2092
....................                         case 2:
....................                            Inputt.B2 = 1; 
02036:  MOVLB  C
02038:  BSF    x40.1
....................                         break;
0203A:  BRA    2092
....................                         case 3:
....................                            Inputt.B3 = 1; 
0203C:  MOVLB  C
0203E:  BSF    x40.2
....................                         break;
02040:  BRA    2092
....................                         case 4:
....................                            Inputt.B4 = 1; 
02042:  MOVLB  C
02044:  BSF    x40.3
....................                         break;
02046:  BRA    2092
....................                         case 5:
....................                            Inputt.B5 = 1; 
02048:  MOVLB  C
0204A:  BSF    x40.4
....................                         break;
0204C:  BRA    2092
....................                         case 6:
....................                            Inputt.B6 = 1; 
0204E:  MOVLB  C
02050:  BSF    x40.5
....................                         break;
02052:  BRA    2092
....................                         case 7:
....................                            Inputt.B7 = 1; 
02054:  MOVLB  C
02056:  BSF    x40.6
....................                          break;
02058:  BRA    2092
....................                          case 8:
....................                          Inputt.B8 = 1; 
0205A:  MOVLB  C
0205C:  BSF    x40.7
....................                         break;
0205E:  BRA    2092
....................                         case 9:
....................                            Inputt.B9 = 1; 
02060:  MOVLB  C
02062:  BSF    x41.0
....................                         break;
02064:  BRA    2092
....................                         case 10:
....................                            Inputt.B10 = 1; 
02066:  MOVLB  C
02068:  BSF    x41.1
....................                         break;
0206A:  BRA    2092
....................                         case 11:
....................                            Inputt.B11 = 1; 
0206C:  MOVLB  C
0206E:  BSF    x41.2
....................                         break;
02070:  BRA    2092
....................                         case 12:
....................                            Inputt.B12 = 1; 
02072:  MOVLB  C
02074:  BSF    x41.3
....................                         break;
02076:  BRA    2092
....................                         case 13:
....................                            Inputt.B13 = 1; 
02078:  MOVLB  C
0207A:  BSF    x41.4
....................                         break;
0207C:  BRA    2092
....................                         case 14:
....................                            Inputt.B14 = 1; 
0207E:  MOVLB  C
02080:  BSF    x41.5
....................                         break;
02082:  BRA    2092
....................                         case 15:
....................                            Inputt.B15 = 1; 
02084:  MOVLB  C
02086:  BSF    x41.6
....................                         break;
02088:  BRA    2092
....................                         case 16:
....................                             Inputt.B16 = 1;
0208A:  MOVLB  C
0208C:  BSF    x41.7
....................                          break;
0208E:  BRA    2092
02090:  MOVLB  C
....................                                    
....................                      }                 
....................                    }
....................                }
02092:  BRA    20AE
02094:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
02096:  BCF    FD8.0
02098:  MOVLB  C
0209A:  RLCF   xC1,W
0209C:  CLRF   03
0209E:  ADDLW  64
020A0:  MOVWF  FE9
020A2:  MOVLW  0C
020A4:  ADDWFC 03,W
020A6:  MOVWF  FEA
020A8:  CLRF   FEC
020AA:  MOVF   FED,F
020AC:  CLRF   FEF
....................                }
....................              
....................              /*
....................                   ReleaseTime[i] = 0;
....................                   switch(i)
....................                   {
....................                       case 1:
....................                          Inputt.B1 = 1; 
....................                       break;
....................                       case 2:
....................                          Inputt.B2 = 1; 
....................                       break;
....................                       case 3:
....................                          Inputt.B3 = 1; 
....................                       break;
....................                       case 4:
....................                          Inputt.B4 = 1; 
....................                       break;
....................                       case 5:
....................                          Inputt.B5 = 1; 
....................                       break;
....................                       case 6:
....................                          Inputt.B6 = 1; 
....................                       break;
....................                       case 7:
....................                          Inputt.B7 = 1; 
....................                       break;
....................                       case 8:
....................                          Inputt.B8 = 1; 
....................                       break;
....................                       case 9:
....................                          Inputt.B9 = 1; 
....................                       break;
....................                       case 10:
....................                          Inputt.B10 = 1; 
....................                       break;
....................                       case 11:
....................                          Inputt.B11 = 1; 
....................                       break;
....................                       case 12:
....................                          Inputt.B12 = 1; 
....................                       break;
....................                       case 13:
....................                          Inputt.B13 = 1; 
....................                       break;
....................                       case 14:
....................                          Inputt.B14 = 1; 
....................                       break;
....................                       case 15:
....................                          Inputt.B15 = 1; 
....................                       break;
....................                       case 16:
....................                          Inputt.B16 = 1; 
....................                       break;
....................                          
....................                   }
....................                   */
....................              }
....................           }
020AE:  BRA    2360
....................           else if(FaultNCNO[i] ==NC)
020B0:  MOVFF  CC1,CC5
020B4:  MOVLW  0C
020B6:  MOVLB  C
020B8:  MOVWF  xC7
020BA:  MOVLW  A8
020BC:  MOVWF  xC6
020BE:  MOVLB  0
020C0:  RCALL  1B7A
020C2:  MOVF   01,W
020C4:  ANDLW  01
020C6:  BTFSS  FD8.2
020C8:  BRA    2362
....................           {
....................              if(FaultNow[i]==1)
020CA:  MOVFF  CC1,CC5
020CE:  MOVLW  0C
020D0:  MOVLB  C
020D2:  MOVWF  xC7
020D4:  MOVLW  61
020D6:  MOVWF  xC6
020D8:  MOVLB  0
020DA:  RCALL  1B7A
020DC:  MOVF   01,W
020DE:  ANDLW  01
020E0:  SUBLW  01
020E2:  BTFSS  FD8.2
020E4:  BRA    2226
....................              {
....................                if(FaultAgo[i]==1)
020E6:  MOVFF  CC1,CC5
020EA:  MOVLW  0C
020EC:  MOVLB  C
020EE:  MOVWF  xC7
020F0:  MOVLW  5E
020F2:  MOVWF  xC6
020F4:  MOVLB  0
020F6:  RCALL  1B7A
020F8:  MOVF   01,W
020FA:  ANDLW  01
020FC:  SUBLW  01
020FE:  BTFSS  FD8.2
02100:  BRA    220A
....................                {
....................                    ReleaseTime[i]++;
02102:  BCF    FD8.0
02104:  MOVLB  C
02106:  RLCF   xC1,W
02108:  CLRF   03
0210A:  ADDLW  64
0210C:  MOVWF  FE9
0210E:  MOVLW  0C
02110:  ADDWFC 03,W
02112:  MOVWF  FEA
02114:  MOVLW  01
02116:  ADDWF  FEE,F
02118:  BNC   211C
0211A:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
0211C:  BCF    FD8.0
0211E:  RLCF   xC1,W
02120:  CLRF   03
02122:  ADDLW  64
02124:  MOVWF  FE9
02126:  MOVLW  0C
02128:  ADDWFC 03,W
0212A:  MOVWF  FEA
0212C:  MOVFF  FEC,CC3
02130:  MOVF   FED,F
02132:  MOVFF  FEF,CC2
02136:  BCF    FD8.0
02138:  RLCF   xC1,W
0213A:  CLRF   03
0213C:  ADDLW  86
0213E:  MOVWF  FE9
02140:  MOVLW  0C
02142:  ADDWFC 03,W
02144:  MOVWF  FEA
02146:  MOVFF  FEC,CC7
0214A:  MOVF   FED,F
0214C:  MOVFF  FEF,CC6
02150:  CLRF   xC9
02152:  MOVLW  4B
02154:  MOVWF  xC8
02156:  MOVLB  0
02158:  RCALL  1BB0
0215A:  MOVFF  02,CC5
0215E:  MOVFF  01,CC4
02162:  MOVLW  0F
02164:  MOVLB  C
02166:  ADDWF  01,W
02168:  MOVWF  01
0216A:  MOVLW  00
0216C:  ADDWFC 02,W
0216E:  MOVWF  03
02170:  MOVF   03,W
02172:  SUBWF  xC3,W
02174:  BNC   2206
02176:  BNZ   217E
02178:  MOVF   01,W
0217A:  SUBWF  xC2,W
0217C:  BNC   2206
....................                    {   
....................                      ReleaseTime[i] = 0;
0217E:  BCF    FD8.0
02180:  RLCF   xC1,W
02182:  CLRF   03
02184:  ADDLW  64
02186:  MOVWF  FE9
02188:  MOVLW  0C
0218A:  ADDWFC 03,W
0218C:  MOVWF  FEA
0218E:  CLRF   FEC
02190:  MOVF   FED,F
02192:  CLRF   FEF
....................                      switch(i)
02194:  MOVLW  01
02196:  SUBWF  xC1,W
02198:  ADDLW  F0
0219A:  BC    2206
0219C:  ADDLW  10
0219E:  MOVLB  0
021A0:  GOTO   2554
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
021A4:  MOVLB  C
021A6:  BSF    x40.0
....................                         break;
021A8:  BRA    2206
....................                         case 2:
....................                            Inputt.B2 = 1; 
021AA:  MOVLB  C
021AC:  BSF    x40.1
....................                         break;
021AE:  BRA    2206
....................                         case 3:
....................                            Inputt.B3 = 1; 
021B0:  MOVLB  C
021B2:  BSF    x40.2
....................                         break;
021B4:  BRA    2206
....................                         case 4:
....................                            Inputt.B4 = 1; 
021B6:  MOVLB  C
021B8:  BSF    x40.3
....................                         break;
021BA:  BRA    2206
....................                         case 5:
....................                            Inputt.B5 = 1; 
021BC:  MOVLB  C
021BE:  BSF    x40.4
....................                         break;
021C0:  BRA    2206
....................                         case 6:
....................                            Inputt.B6 = 1; 
021C2:  MOVLB  C
021C4:  BSF    x40.5
....................                         break;
021C6:  BRA    2206
....................                         case 7:
....................                            Inputt.B7 = 1; 
021C8:  MOVLB  C
021CA:  BSF    x40.6
....................                          break;
021CC:  BRA    2206
....................                          case 8:
....................                            Inputt.B8 = 1; 
021CE:  MOVLB  C
021D0:  BSF    x40.7
....................                         break;
021D2:  BRA    2206
....................                         case 9:
....................                            Inputt.B9 = 1; 
021D4:  MOVLB  C
021D6:  BSF    x41.0
....................                         break;
021D8:  BRA    2206
....................                         case 10:
....................                            Inputt.B10 = 1; 
021DA:  MOVLB  C
021DC:  BSF    x41.1
....................                         break;
021DE:  BRA    2206
....................                         case 11:
....................                            Inputt.B11 = 1; 
021E0:  MOVLB  C
021E2:  BSF    x41.2
....................                         break;
021E4:  BRA    2206
....................                         case 12:
....................                            Inputt.B12 = 1; 
021E6:  MOVLB  C
021E8:  BSF    x41.3
....................                         break;
021EA:  BRA    2206
....................                         case 13:
....................                            Inputt.B13 = 1; 
021EC:  MOVLB  C
021EE:  BSF    x41.4
....................                         break;
021F0:  BRA    2206
....................                         case 14:
....................                            Inputt.B14 = 1; 
021F2:  MOVLB  C
021F4:  BSF    x41.5
....................                         break;
021F6:  BRA    2206
....................                         case 15:
....................                            Inputt.B15 = 1; 
021F8:  MOVLB  C
021FA:  BSF    x41.6
....................                         break;
021FC:  BRA    2206
....................                         case 16:
....................                             Inputt.B16 = 1; 
021FE:  MOVLB  C
02200:  BSF    x41.7
....................                          break;
02202:  BRA    2206
02204:  MOVLB  C
....................                                                                    
....................                      }                 
....................                   }
....................                }
02206:  BRA    2222
02208:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
0220A:  BCF    FD8.0
0220C:  MOVLB  C
0220E:  RLCF   xC1,W
02210:  CLRF   03
02212:  ADDLW  64
02214:  MOVWF  FE9
02216:  MOVLW  0C
02218:  ADDWFC 03,W
0221A:  MOVWF  FEA
0221C:  CLRF   FEC
0221E:  MOVF   FED,F
02220:  CLRF   FEF
....................                }
....................              }
02222:  BRA    2360
02224:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
02226:  MOVFF  CC1,CC5
0222A:  MOVLW  0C
0222C:  MOVLB  C
0222E:  MOVWF  xC7
02230:  MOVLW  5E
02232:  MOVWF  xC6
02234:  MOVLB  0
02236:  RCALL  1B7A
02238:  MOVF   01,W
0223A:  ANDLW  01
0223C:  BTFSS  FD8.2
0223E:  BRA    2348
....................                {
....................                    ReleaseTime[i]++;
02240:  BCF    FD8.0
02242:  MOVLB  C
02244:  RLCF   xC1,W
02246:  CLRF   03
02248:  ADDLW  64
0224A:  MOVWF  FE9
0224C:  MOVLW  0C
0224E:  ADDWFC 03,W
02250:  MOVWF  FEA
02252:  MOVLW  01
02254:  ADDWF  FEE,F
02256:  BNC   225A
02258:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
0225A:  BCF    FD8.0
0225C:  RLCF   xC1,W
0225E:  CLRF   03
02260:  ADDLW  64
02262:  MOVWF  FE9
02264:  MOVLW  0C
02266:  ADDWFC 03,W
02268:  MOVWF  FEA
0226A:  MOVFF  FEC,CC3
0226E:  MOVF   FED,F
02270:  MOVFF  FEF,CC2
02274:  BCF    FD8.0
02276:  RLCF   xC1,W
02278:  CLRF   03
0227A:  ADDLW  86
0227C:  MOVWF  FE9
0227E:  MOVLW  0C
02280:  ADDWFC 03,W
02282:  MOVWF  FEA
02284:  MOVFF  FEC,CC7
02288:  MOVF   FED,F
0228A:  MOVFF  FEF,CC6
0228E:  CLRF   xC9
02290:  MOVLW  4B
02292:  MOVWF  xC8
02294:  MOVLB  0
02296:  RCALL  1BB0
02298:  MOVFF  02,CC5
0229C:  MOVFF  01,CC4
022A0:  MOVLW  0F
022A2:  MOVLB  C
022A4:  ADDWF  01,W
022A6:  MOVWF  01
022A8:  MOVLW  00
022AA:  ADDWFC 02,W
022AC:  MOVWF  03
022AE:  MOVF   03,W
022B0:  SUBWF  xC3,W
022B2:  BNC   2344
022B4:  BNZ   22BC
022B6:  MOVF   01,W
022B8:  SUBWF  xC2,W
022BA:  BNC   2344
....................                    {   
....................                      ReleaseTime[i] = 0;
022BC:  BCF    FD8.0
022BE:  RLCF   xC1,W
022C0:  CLRF   03
022C2:  ADDLW  64
022C4:  MOVWF  FE9
022C6:  MOVLW  0C
022C8:  ADDWFC 03,W
022CA:  MOVWF  FEA
022CC:  CLRF   FEC
022CE:  MOVF   FED,F
022D0:  CLRF   FEF
....................                      switch(i)
022D2:  MOVLW  01
022D4:  SUBWF  xC1,W
022D6:  ADDLW  F0
022D8:  BC    2344
022DA:  ADDLW  10
022DC:  MOVLB  0
022DE:  GOTO   258E
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
022E2:  MOVLB  C
022E4:  BCF    x40.0
....................                         break;
022E6:  BRA    2344
....................                         case 2:
....................                            Inputt.B2 = 0; 
022E8:  MOVLB  C
022EA:  BCF    x40.1
....................                         break;
022EC:  BRA    2344
....................                         case 3:
....................                            Inputt.B3 = 0; 
022EE:  MOVLB  C
022F0:  BCF    x40.2
....................                         break;
022F2:  BRA    2344
....................                         case 4:
....................                            Inputt.B4 = 0; 
022F4:  MOVLB  C
022F6:  BCF    x40.3
....................                         break;
022F8:  BRA    2344
....................                         case 5:
....................                            Inputt.B5 = 0; 
022FA:  MOVLB  C
022FC:  BCF    x40.4
....................                         break;
022FE:  BRA    2344
....................                         case 6:
....................                            Inputt.B6 = 0; 
02300:  MOVLB  C
02302:  BCF    x40.5
....................                         break;
02304:  BRA    2344
....................                         case 7:
....................                            Inputt.B7 = 0; 
02306:  MOVLB  C
02308:  BCF    x40.6
....................                          break;
0230A:  BRA    2344
....................                          case 8:
....................                            Inputt.B8 = 0; 
0230C:  MOVLB  C
0230E:  BCF    x40.7
....................                         break;
02310:  BRA    2344
....................                         case 9:
....................                            Inputt.B9 = 0; 
02312:  MOVLB  C
02314:  BCF    x41.0
....................                         break;
02316:  BRA    2344
....................                         case 10:
....................                            Inputt.B10 = 0; 
02318:  MOVLB  C
0231A:  BCF    x41.1
....................                         break;
0231C:  BRA    2344
....................                         case 11:
....................                            Inputt.B11 = 0; 
0231E:  MOVLB  C
02320:  BCF    x41.2
....................                         break;
02322:  BRA    2344
....................                         case 12:
....................                            Inputt.B12 = 0; 
02324:  MOVLB  C
02326:  BCF    x41.3
....................                         break;
02328:  BRA    2344
....................                         case 13:
....................                            Inputt.B13 = 0; 
0232A:  MOVLB  C
0232C:  BCF    x41.4
....................                         break;
0232E:  BRA    2344
....................                         case 14:
....................                            Inputt.B14 = 0; 
02330:  MOVLB  C
02332:  BCF    x41.5
....................                         break;
02334:  BRA    2344
....................                         case 15:
....................                            Inputt.B15 = 0; 
02336:  MOVLB  C
02338:  BCF    x41.6
....................                         break;
0233A:  BRA    2344
....................                         case 16:
....................                             Inputt.B16 = 0;
0233C:  MOVLB  C
0233E:  BCF    x41.7
....................                          break;
02340:  BRA    2344
02342:  MOVLB  C
....................                                    
....................                      }                 
....................                    }
....................                }
02344:  BRA    2360
02346:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
02348:  BCF    FD8.0
0234A:  MOVLB  C
0234C:  RLCF   xC1,W
0234E:  CLRF   03
02350:  ADDLW  64
02352:  MOVWF  FE9
02354:  MOVLW  0C
02356:  ADDWFC 03,W
02358:  MOVWF  FEA
0235A:  CLRF   FEC
0235C:  MOVF   FED,F
0235E:  CLRF   FEF
02360:  MOVLB  0
....................                }
....................                   /*
....................                   ReleaseTime[i] = 0;
....................                   switch(i)
....................                   {
....................                       case 1:
....................                          Inputt.B1 = 0; 
....................                       break;
....................                       case 2:
....................                          Inputt.B2 = 0; 
....................                       break;
....................                       case 3:
....................                          Inputt.B3 = 0; 
....................                       break;
....................                       case 4:
....................                          Inputt.B4 = 0; 
....................                       break;
....................                       case 5:
....................                          Inputt.B5 = 0; 
....................                       break;
....................                       case 6:
....................                          Inputt.B6 = 0; 
....................                       break;
....................                       case 7:
....................                          Inputt.B7 = 0; 
....................                       break;
....................                       case 8:
....................                          Inputt.B8 = 0; 
....................                       break;
....................                       case 9:
....................                          Inputt.B9 = 0; 
....................                       break;
....................                       case 10:
....................                          Inputt.B10 = 0; 
....................                       break;
....................                       case 11:
....................                          Inputt.B11 = 0; 
....................                       break;
....................                       case 12:
....................                          Inputt.B12 = 0; 
....................                       break;
....................                       case 13:
....................                          Inputt.B13 = 0; 
....................                       break;
....................                       case 14:
....................                          Inputt.B14 = 0; 
....................                       break;
....................                       case 15:
....................                          Inputt.B15 = 0; 
....................                       break;
....................                       case 16:
....................                          Inputt.B16 = 0; 
....................                       break;
....................                              
....................                   }
....................                   */
....................              }
....................           }
02362:  MOVLB  C
02364:  INCF   xC1,F
02366:  BRA    1DF8
....................       }
....................       
....................       StoreReleaseFault();
02368:  MOVLB  0
0236A:  BRA    1C14
....................       
....................       Input11_18 = 0x00;
0236C:  CLRF   4E
....................       Input11_18 = Input11_18 | ~Inputt.B16;
0236E:  MOVLW  00
02370:  MOVLB  C
02372:  BTFSS  x41.7
02374:  MOVLW  01
02376:  IORWF  4E,F
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B16;
02378:  BCF    FD8.0
0237A:  RLCF   4E,W
0237C:  MOVWF  xC2
0237E:  MOVLW  00
02380:  BTFSS  x41.7
02382:  MOVLW  01
02384:  IORWF  xC2,W
02386:  MOVWF  4E
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B16;
02388:  BCF    FD8.0
0238A:  RLCF   4E,W
0238C:  MOVWF  xC2
0238E:  MOVLW  00
02390:  BTFSS  x41.7
02392:  MOVLW  01
02394:  IORWF  xC2,W
02396:  MOVWF  4E
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B15;
02398:  BCF    FD8.0
0239A:  RLCF   4E,W
0239C:  MOVWF  xC2
0239E:  MOVLW  00
023A0:  BTFSS  x41.6
023A2:  MOVLW  01
023A4:  IORWF  xC2,W
023A6:  MOVWF  4E
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B14;
023A8:  BCF    FD8.0
023AA:  RLCF   4E,W
023AC:  MOVWF  xC2
023AE:  MOVLW  00
023B0:  BTFSS  x41.5
023B2:  MOVLW  01
023B4:  IORWF  xC2,W
023B6:  MOVWF  4E
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B13;
023B8:  BCF    FD8.0
023BA:  RLCF   4E,W
023BC:  MOVWF  xC2
023BE:  MOVLW  00
023C0:  BTFSS  x41.4
023C2:  MOVLW  01
023C4:  IORWF  xC2,W
023C6:  MOVWF  4E
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B12;
023C8:  BCF    FD8.0
023CA:  RLCF   4E,W
023CC:  MOVWF  xC2
023CE:  MOVLW  00
023D0:  BTFSS  x41.3
023D2:  MOVLW  01
023D4:  IORWF  xC2,W
023D6:  MOVWF  4E
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B11;
023D8:  BCF    FD8.0
023DA:  RLCF   4E,W
023DC:  MOVWF  xC2
023DE:  MOVLW  00
023E0:  BTFSS  x41.2
023E2:  MOVLW  01
023E4:  IORWF  xC2,W
023E6:  MOVWF  4E
....................       
....................    
....................       Input1_8 = 0x00;
023E8:  CLRF   4B
....................       Input1_8 = Input1_8 | ~Inputt.B8;
023EA:  MOVLW  00
023EC:  BTFSS  x40.7
023EE:  MOVLW  01
023F0:  IORWF  4B,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
023F2:  BCF    FD8.0
023F4:  RLCF   4B,W
023F6:  MOVWF  xC2
023F8:  MOVLW  00
023FA:  BTFSS  x40.6
023FC:  MOVLW  01
023FE:  IORWF  xC2,W
02400:  MOVWF  4B
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
02402:  BCF    FD8.0
02404:  RLCF   4B,W
02406:  MOVWF  xC2
02408:  MOVLW  00
0240A:  BTFSS  x40.5
0240C:  MOVLW  01
0240E:  IORWF  xC2,W
02410:  MOVWF  4B
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
02412:  BCF    FD8.0
02414:  RLCF   4B,W
02416:  MOVWF  xC2
02418:  MOVLW  00
0241A:  BTFSS  x40.4
0241C:  MOVLW  01
0241E:  IORWF  xC2,W
02420:  MOVWF  4B
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
02422:  BCF    FD8.0
02424:  RLCF   4B,W
02426:  MOVWF  xC2
02428:  MOVLW  00
0242A:  BTFSS  x40.3
0242C:  MOVLW  01
0242E:  IORWF  xC2,W
02430:  MOVWF  4B
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
02432:  BCF    FD8.0
02434:  RLCF   4B,W
02436:  MOVWF  xC2
02438:  MOVLW  00
0243A:  BTFSS  x40.2
0243C:  MOVLW  01
0243E:  IORWF  xC2,W
02440:  MOVWF  4B
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
02442:  BCF    FD8.0
02444:  RLCF   4B,W
02446:  MOVWF  xC2
02448:  MOVLW  00
0244A:  BTFSS  x40.1
0244C:  MOVLW  01
0244E:  IORWF  xC2,W
02450:  MOVWF  4B
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
02452:  BCF    FD8.0
02454:  RLCF   4B,W
02456:  MOVWF  xC2
02458:  MOVLW  00
0245A:  BTFSS  x40.0
0245C:  MOVLW  01
0245E:  IORWF  xC2,W
02460:  MOVWF  4B
....................     
....................       //Input9_10 = 0x00;
....................       //Input9_10 = Input9_10 | ~Inputt.B10;
....................       //Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
....................       
....................       Input9_16 = 0x00;
02462:  CLRF   4C
....................       Input9_16 = Input9_16 | ~Inputt.B16;
02464:  MOVLW  00
02466:  BTFSS  x41.7
02468:  MOVLW  01
0246A:  IORWF  4C,F
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B15;
0246C:  BCF    FD8.0
0246E:  RLCF   4C,W
02470:  MOVWF  xC2
02472:  MOVLW  00
02474:  BTFSS  x41.6
02476:  MOVLW  01
02478:  IORWF  xC2,W
0247A:  MOVWF  4C
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B14;
0247C:  BCF    FD8.0
0247E:  RLCF   4C,W
02480:  MOVWF  xC2
02482:  MOVLW  00
02484:  BTFSS  x41.5
02486:  MOVLW  01
02488:  IORWF  xC2,W
0248A:  MOVWF  4C
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B13;
0248C:  BCF    FD8.0
0248E:  RLCF   4C,W
02490:  MOVWF  xC2
02492:  MOVLW  00
02494:  BTFSS  x41.4
02496:  MOVLW  01
02498:  IORWF  xC2,W
0249A:  MOVWF  4C
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B12;
0249C:  BCF    FD8.0
0249E:  RLCF   4C,W
024A0:  MOVWF  xC2
024A2:  MOVLW  00
024A4:  BTFSS  x41.3
024A6:  MOVLW  01
024A8:  IORWF  xC2,W
024AA:  MOVWF  4C
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B11;
024AC:  BCF    FD8.0
024AE:  RLCF   4C,W
024B0:  MOVWF  xC2
024B2:  MOVLW  00
024B4:  BTFSS  x41.2
024B6:  MOVLW  01
024B8:  IORWF  xC2,W
024BA:  MOVWF  4C
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B10;
024BC:  BCF    FD8.0
024BE:  RLCF   4C,W
024C0:  MOVWF  xC2
024C2:  MOVLW  00
024C4:  BTFSS  x41.1
024C6:  MOVLW  01
024C8:  IORWF  xC2,W
024CA:  MOVWF  4C
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B9;
024CC:  BCF    FD8.0
024CE:  RLCF   4C,W
024D0:  MOVWF  xC2
024D2:  MOVLW  00
024D4:  BTFSS  x41.0
024D6:  MOVLW  01
024D8:  IORWF  xC2,W
024DA:  MOVWF  4C
024DC:  MOVLB  0
024DE:  RETURN 0
....................       
....................       ///////////////---Anal Fault---//////////////////
....................       
....................       ///////////////////////--Edit--///////////////////
....................       
....................       /*
....................       Inputt.B11 = MCP23s17_Ip_dat;
....................       Inputt.B12 = MCP23s17_Ip_dat >> 1;
....................       Inputt.B13 = MCP23s17_Ip_dat >> 2;
....................       Inputt.B14 = MCP23s17_Ip_dat >> 3;
....................       Inputt.B15 = MCP23s17_Ip_dat >> 4;
....................       Inputt.B16 = MCP23s17_Ip_dat >> 5;
....................       Inputt.B17 = MCP23s17_Ip_dat >> 6;
....................       Inputt.B18 = MCP23s17_Ip_dat >> 7;
.................... 
....................       Input11_18 = 0x00;
....................       Input11_18 = Input1_8 | ~Inputt.B18;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B17;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B16;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B15;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B14;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B13;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B12;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B11;
....................       
....................       */
....................     /*
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................       }
....................       
....................       Inputt.B19 = MCP23s17_Ip_dat;
....................       Inputt.B20 = MCP23s17_Ip_dat >> 1;
....................       
.................... 
....................       Input19_20 = 0x00;
....................       Input19_20 = Input9_10 | ~Inputt.B20;
....................       Input19_20 = (Input9_10 << 1) | ~Inputt.B19;
....................    //}
....................    
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................          
....................       }
....................       
....................       Inputt.B1 = MCP23s17_Ip_dat;
....................       Inputt.B2 = MCP23s17_Ip_dat >> 1;
....................       Inputt.B3 = MCP23s17_Ip_dat >> 2;
....................       Inputt.B4 = MCP23s17_Ip_dat >> 3;
....................       Inputt.B5 = MCP23s17_Ip_dat >> 4;
....................       Inputt.B6 = MCP23s17_Ip_dat >> 5;
....................       Inputt.B7 = MCP23s17_Ip_dat >> 6;
....................       Inputt.B8 = MCP23s17_Ip_dat >> 7;
.................... 
....................       Input1_8 = 0x00;
....................       Input1_8 = Input1_8 | ~Inputt.B8;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
....................     
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................       }
....................       
....................       Inputt.B9 = MCP23s17_Ip_dat;
....................       Inputt.B10 = MCP23s17_Ip_dat >> 1;
....................       
.................... 
....................       Input9_10 = 0x00;
....................       Input9_10 = Input9_10 | ~Inputt.B10;
....................       Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
....................       */
....................       //+++++++++++++++++++++++++++++++++++++++++++
....................    //}
....................    
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Input type 1-8
*
00776:  MOVFF  FF2,CBE
0077A:  BCF    FF2.7
0077C:  CLRF   FAA
0077E:  MOVLW  01
00780:  MOVWF  FA9
00782:  BCF    FA6.6
00784:  BCF    FA6.7
00786:  BSF    FA6.0
00788:  MOVF   FA8,W
0078A:  MOVLB  C
0078C:  BTFSC  xBE.7
0078E:  BSF    FF2.7
00790:  MOVWF  3B
....................    InputType1_8 = EEpDat;
00792:  MOVFF  3B,3C
.................... 
....................    InputType.B1 = EEpDat;
00796:  BCF    x44.0
00798:  BTFSC  3B.0
0079A:  BSF    x44.0
....................    InputType.B2 = EEpDat >> 1;
0079C:  BCF    FD8.0
0079E:  RRCF   3B,W
007A0:  BCF    x44.1
007A2:  BTFSC  FE8.0
007A4:  BSF    x44.1
....................    InputType.B3 = EEpDat >> 2;
007A6:  RRCF   3B,W
007A8:  MOVWF  00
007AA:  RRCF   00,F
007AC:  MOVLW  3F
007AE:  ANDWF  00,F
007B0:  BCF    x44.2
007B2:  BTFSC  00.0
007B4:  BSF    x44.2
....................    InputType.B4 = EEpDat >> 3;
007B6:  RRCF   3B,W
007B8:  MOVWF  00
007BA:  RRCF   00,F
007BC:  RRCF   00,F
007BE:  MOVLW  1F
007C0:  ANDWF  00,F
007C2:  BCF    x44.3
007C4:  BTFSC  00.0
007C6:  BSF    x44.3
....................    InputType.B5 = EEpDat >> 4;
007C8:  SWAPF  3B,W
007CA:  MOVWF  00
007CC:  MOVLW  0F
007CE:  ANDWF  00,F
007D0:  BCF    x44.4
007D2:  BTFSC  00.0
007D4:  BSF    x44.4
....................    InputType.B6 = EEpDat >> 5;
007D6:  SWAPF  3B,W
007D8:  MOVWF  00
007DA:  RRCF   00,F
007DC:  MOVLW  07
007DE:  ANDWF  00,F
007E0:  BCF    x44.5
007E2:  BTFSC  00.0
007E4:  BSF    x44.5
....................    InputType.B7 = EEpDat >> 6;
007E6:  SWAPF  3B,W
007E8:  MOVWF  00
007EA:  RRCF   00,F
007EC:  RRCF   00,F
007EE:  MOVLW  03
007F0:  ANDWF  00,F
007F2:  BCF    x44.6
007F4:  BTFSC  00.0
007F6:  BSF    x44.6
....................    InputType.B8 = EEpDat >> 7;
007F8:  CLRF   00
007FA:  BTFSC  3B.7
007FC:  BSF    00.0
007FE:  BCF    x44.7
00800:  BTFSC  00.0
00802:  BSF    x44.7
.................... 
....................    EEpDat = read_eeprom(0x02);   // Input type 9-16
00804:  MOVFF  FF2,CBE
00808:  BCF    FF2.7
0080A:  CLRF   FAA
0080C:  MOVLW  02
0080E:  MOVWF  FA9
00810:  BCF    FA6.6
00812:  BCF    FA6.7
00814:  BSF    FA6.0
00816:  MOVF   FA8,W
00818:  BTFSC  xBE.7
0081A:  BSF    FF2.7
0081C:  MOVWF  3B
....................    InputType9_16 = EEpDat;
0081E:  MOVFF  3B,3D
.................... 
....................    InputType.B9 = EEpDat;
00822:  BCF    x45.0
00824:  BTFSC  3B.0
00826:  BSF    x45.0
....................    InputType.B10 = EEpDat >> 1;
00828:  BCF    FD8.0
0082A:  RRCF   3B,W
0082C:  BCF    x45.1
0082E:  BTFSC  FE8.0
00830:  BSF    x45.1
....................    InputType.B11 = EEpDat >> 2;
00832:  RRCF   3B,W
00834:  MOVWF  00
00836:  RRCF   00,F
00838:  MOVLW  3F
0083A:  ANDWF  00,F
0083C:  BCF    x45.2
0083E:  BTFSC  00.0
00840:  BSF    x45.2
....................    InputType.B12 = EEpDat >> 3;
00842:  RRCF   3B,W
00844:  MOVWF  00
00846:  RRCF   00,F
00848:  RRCF   00,F
0084A:  MOVLW  1F
0084C:  ANDWF  00,F
0084E:  BCF    x45.3
00850:  BTFSC  00.0
00852:  BSF    x45.3
....................    InputType.B13 = EEpDat >> 4;
00854:  SWAPF  3B,W
00856:  MOVWF  00
00858:  MOVLW  0F
0085A:  ANDWF  00,F
0085C:  BCF    x45.4
0085E:  BTFSC  00.0
00860:  BSF    x45.4
....................    InputType.B14 = EEpDat >> 5;
00862:  SWAPF  3B,W
00864:  MOVWF  00
00866:  RRCF   00,F
00868:  MOVLW  07
0086A:  ANDWF  00,F
0086C:  BCF    x45.5
0086E:  BTFSC  00.0
00870:  BSF    x45.5
....................    InputType.B15 = EEpDat >> 6;
00872:  SWAPF  3B,W
00874:  MOVWF  00
00876:  RRCF   00,F
00878:  RRCF   00,F
0087A:  MOVLW  03
0087C:  ANDWF  00,F
0087E:  BCF    x45.6
00880:  BTFSC  00.0
00882:  BSF    x45.6
....................    InputType.B16 = EEpDat >> 7;
00884:  CLRF   00
00886:  BTFSC  3B.7
00888:  BSF    00.0
0088A:  BCF    x45.7
0088C:  BTFSC  00.0
0088E:  BSF    x45.7
....................    
....................    FaultNCNO[1] = InputType.B1;
00890:  BCF    xA8.1
00892:  BTFSC  x44.0
00894:  BSF    xA8.1
....................    FaultNCNO[2] = InputType.B2;
00896:  BCF    xA8.2
00898:  BTFSC  x44.1
0089A:  BSF    xA8.2
....................    FaultNCNO[3] = InputType.B3;
0089C:  BCF    xA8.3
0089E:  BTFSC  x44.2
008A0:  BSF    xA8.3
....................    FaultNCNO[4] = InputType.B4;
008A2:  BCF    xA8.4
008A4:  BTFSC  x44.3
008A6:  BSF    xA8.4
....................    FaultNCNO[5] = InputType.B5;
008A8:  BCF    xA8.5
008AA:  BTFSC  x44.4
008AC:  BSF    xA8.5
....................    FaultNCNO[6] = InputType.B6;
008AE:  BCF    xA8.6
008B0:  BTFSC  x44.5
008B2:  BSF    xA8.6
....................    FaultNCNO[7] = InputType.B7;
008B4:  BCF    xA8.7
008B6:  BTFSC  x44.6
008B8:  BSF    xA8.7
....................    FaultNCNO[8] = InputType.B8;
008BA:  BCF    xA9.0
008BC:  BTFSC  x44.7
008BE:  BSF    xA9.0
....................    FaultNCNO[9] = InputType.B9;
008C0:  BCF    xA9.1
008C2:  BTFSC  x45.0
008C4:  BSF    xA9.1
....................    FaultNCNO[10] = InputType.B10;
008C6:  BCF    xA9.2
008C8:  BTFSC  x45.1
008CA:  BSF    xA9.2
....................    FaultNCNO[11] = InputType.B11;
008CC:  BCF    xA9.3
008CE:  BTFSC  x45.2
008D0:  BSF    xA9.3
....................    FaultNCNO[12] = InputType.B12;
008D2:  BCF    xA9.4
008D4:  BTFSC  x45.3
008D6:  BSF    xA9.4
....................    FaultNCNO[13] = InputType.B13;
008D8:  BCF    xA9.5
008DA:  BTFSC  x45.4
008DC:  BSF    xA9.5
....................    FaultNCNO[14] = InputType.B14;
008DE:  BCF    xA9.6
008E0:  BTFSC  x45.5
008E2:  BSF    xA9.6
....................    FaultNCNO[15] = InputType.B15;
008E4:  BCF    xA9.7
008E6:  BTFSC  x45.6
008E8:  BSF    xA9.7
....................    FaultNCNO[16] = InputType.B16;
008EA:  BCF    xAA.0
008EC:  BTFSC  x45.7
008EE:  BSF    xAA.0
....................    
.................... /*
....................    EEpDat = read_eeprom(0x03);   // Input type 9-16
....................    InputType17_24 = EEpDat;
.................... 
....................    InputType.B17 = EEpDat;
....................    InputType.B18 = EEpDat >> 1;
....................    InputType.B19 = EEpDat >> 2;
....................    InputType.B20 = EEpDat >> 3;
....................    InputType.B21 = EEpDat >> 4;
....................    InputType.B22 = EEpDat >> 5;
....................    InputType.B23 = EEpDat >> 6;
....................    InputType.B24 = EEpDat >> 7;
.................... */
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
008F0:  MOVFF  FF2,CBE
008F4:  BCF    FF2.7
008F6:  CLRF   FAA
008F8:  MOVLW  04
008FA:  MOVWF  FA9
008FC:  BCF    FA6.6
008FE:  BCF    FA6.7
00900:  BSF    FA6.0
00902:  MOVF   FA8,W
00904:  BTFSC  xBE.7
00906:  BSF    FF2.7
00908:  MOVWF  3B
....................    FaultType1_8 = EEpDat;
0090A:  MOVFF  3B,3F
.................... 
....................    FaultType.B1 = EEpDat;
0090E:  BCF    x46.0
00910:  BTFSC  3B.0
00912:  BSF    x46.0
....................    FaultType.B2 = EEpDat >> 1;
00914:  BCF    FD8.0
00916:  RRCF   3B,W
00918:  BCF    x46.1
0091A:  BTFSC  FE8.0
0091C:  BSF    x46.1
....................    FaultType.B3 = EEpDat >> 2;
0091E:  RRCF   3B,W
00920:  MOVWF  00
00922:  RRCF   00,F
00924:  MOVLW  3F
00926:  ANDWF  00,F
00928:  BCF    x46.2
0092A:  BTFSC  00.0
0092C:  BSF    x46.2
....................    FaultType.B4 = EEpDat >> 3;
0092E:  RRCF   3B,W
00930:  MOVWF  00
00932:  RRCF   00,F
00934:  RRCF   00,F
00936:  MOVLW  1F
00938:  ANDWF  00,F
0093A:  BCF    x46.3
0093C:  BTFSC  00.0
0093E:  BSF    x46.3
....................    FaultType.B5 = EEpDat >> 4;
00940:  SWAPF  3B,W
00942:  MOVWF  00
00944:  MOVLW  0F
00946:  ANDWF  00,F
00948:  BCF    x46.4
0094A:  BTFSC  00.0
0094C:  BSF    x46.4
....................    FaultType.B6 = EEpDat >> 5;
0094E:  SWAPF  3B,W
00950:  MOVWF  00
00952:  RRCF   00,F
00954:  MOVLW  07
00956:  ANDWF  00,F
00958:  BCF    x46.5
0095A:  BTFSC  00.0
0095C:  BSF    x46.5
....................    FaultType.B7 = EEpDat >> 6;
0095E:  SWAPF  3B,W
00960:  MOVWF  00
00962:  RRCF   00,F
00964:  RRCF   00,F
00966:  MOVLW  03
00968:  ANDWF  00,F
0096A:  BCF    x46.6
0096C:  BTFSC  00.0
0096E:  BSF    x46.6
....................    FaultType.B8 = EEpDat >> 7;
00970:  CLRF   00
00972:  BTFSC  3B.7
00974:  BSF    00.0
00976:  BCF    x46.7
00978:  BTFSC  00.0
0097A:  BSF    x46.7
.................... 
....................    EEpDat = read_eeprom(0x05);   // Fault type 9-16
0097C:  MOVFF  FF2,CBE
00980:  BCF    FF2.7
00982:  CLRF   FAA
00984:  MOVLW  05
00986:  MOVWF  FA9
00988:  BCF    FA6.6
0098A:  BCF    FA6.7
0098C:  BSF    FA6.0
0098E:  MOVF   FA8,W
00990:  BTFSC  xBE.7
00992:  BSF    FF2.7
00994:  MOVWF  3B
....................    FaultType9_16 = EEpDat;
00996:  MOVFF  3B,40
.................... 
....................    FaultType.B9 = EEpDat;
0099A:  BCF    x47.0
0099C:  BTFSC  3B.0
0099E:  BSF    x47.0
....................    FaultType.B10 = EEpDat >> 1;
009A0:  BCF    FD8.0
009A2:  RRCF   3B,W
009A4:  BCF    x47.1
009A6:  BTFSC  FE8.0
009A8:  BSF    x47.1
....................    FaultType.B11 = EEpDat >> 2;
009AA:  RRCF   3B,W
009AC:  MOVWF  00
009AE:  RRCF   00,F
009B0:  MOVLW  3F
009B2:  ANDWF  00,F
009B4:  BCF    x47.2
009B6:  BTFSC  00.0
009B8:  BSF    x47.2
....................    FaultType.B12 = EEpDat >> 3;
009BA:  RRCF   3B,W
009BC:  MOVWF  00
009BE:  RRCF   00,F
009C0:  RRCF   00,F
009C2:  MOVLW  1F
009C4:  ANDWF  00,F
009C6:  BCF    x47.3
009C8:  BTFSC  00.0
009CA:  BSF    x47.3
....................    FaultType.B13 = EEpDat >> 4;
009CC:  SWAPF  3B,W
009CE:  MOVWF  00
009D0:  MOVLW  0F
009D2:  ANDWF  00,F
009D4:  BCF    x47.4
009D6:  BTFSC  00.0
009D8:  BSF    x47.4
....................    FaultType.B14 = EEpDat >> 5;
009DA:  SWAPF  3B,W
009DC:  MOVWF  00
009DE:  RRCF   00,F
009E0:  MOVLW  07
009E2:  ANDWF  00,F
009E4:  BCF    x47.5
009E6:  BTFSC  00.0
009E8:  BSF    x47.5
....................    FaultType.B15 = EEpDat >> 6;
009EA:  SWAPF  3B,W
009EC:  MOVWF  00
009EE:  RRCF   00,F
009F0:  RRCF   00,F
009F2:  MOVLW  03
009F4:  ANDWF  00,F
009F6:  BCF    x47.6
009F8:  BTFSC  00.0
009FA:  BSF    x47.6
....................    FaultType.B16 = EEpDat >> 7;
009FC:  CLRF   00
009FE:  BTFSC  3B.7
00A00:  BSF    00.0
00A02:  BCF    x47.7
00A04:  BTFSC  00.0
00A06:  BSF    x47.7
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00A08:  MOVFF  FF2,CBE
00A0C:  BCF    FF2.7
00A0E:  CLRF   FAA
00A10:  MOVLW  07
00A12:  MOVWF  FA9
00A14:  BCF    FA6.6
00A16:  BCF    FA6.7
00A18:  BSF    FA6.0
00A1A:  MOVF   FA8,W
00A1C:  BTFSC  xBE.7
00A1E:  BSF    FF2.7
00A20:  MOVWF  3B
....................    OutputType1_8 = EEpDat;
00A22:  MOVFF  3B,42
.................... 
....................    OutputType.B1 = EEpDat;
00A26:  BCF    x48.0
00A28:  BTFSC  3B.0
00A2A:  BSF    x48.0
....................    OutputType.B2 = EEpDat >> 1;
00A2C:  BCF    FD8.0
00A2E:  RRCF   3B,W
00A30:  BCF    x48.1
00A32:  BTFSC  FE8.0
00A34:  BSF    x48.1
....................    OutputType.B3 = EEpDat >> 2;
00A36:  RRCF   3B,W
00A38:  MOVWF  00
00A3A:  RRCF   00,F
00A3C:  MOVLW  3F
00A3E:  ANDWF  00,F
00A40:  BCF    x48.2
00A42:  BTFSC  00.0
00A44:  BSF    x48.2
....................    OutputType.B4 = EEpDat >> 3;
00A46:  RRCF   3B,W
00A48:  MOVWF  00
00A4A:  RRCF   00,F
00A4C:  RRCF   00,F
00A4E:  MOVLW  1F
00A50:  ANDWF  00,F
00A52:  BCF    x48.3
00A54:  BTFSC  00.0
00A56:  BSF    x48.3
....................    OutputType.B5 = EEpDat >> 4;
00A58:  SWAPF  3B,W
00A5A:  MOVWF  00
00A5C:  MOVLW  0F
00A5E:  ANDWF  00,F
00A60:  BCF    x48.4
00A62:  BTFSC  00.0
00A64:  BSF    x48.4
....................    OutputType.B6 = EEpDat >> 5;
00A66:  SWAPF  3B,W
00A68:  MOVWF  00
00A6A:  RRCF   00,F
00A6C:  MOVLW  07
00A6E:  ANDWF  00,F
00A70:  BCF    x48.5
00A72:  BTFSC  00.0
00A74:  BSF    x48.5
....................    OutputType.B7 = EEpDat >> 6;
00A76:  SWAPF  3B,W
00A78:  MOVWF  00
00A7A:  RRCF   00,F
00A7C:  RRCF   00,F
00A7E:  MOVLW  03
00A80:  ANDWF  00,F
00A82:  BCF    x48.6
00A84:  BTFSC  00.0
00A86:  BSF    x48.6
....................    OutputType.B8 = EEpDat >> 7;
00A88:  CLRF   00
00A8A:  BTFSC  3B.7
00A8C:  BSF    00.0
00A8E:  BCF    x48.7
00A90:  BTFSC  00.0
00A92:  BSF    x48.7
.................... 
....................    EEpDat = read_eeprom(0x08);   // Output type 9-16
00A94:  MOVFF  FF2,CBE
00A98:  BCF    FF2.7
00A9A:  CLRF   FAA
00A9C:  MOVLW  08
00A9E:  MOVWF  FA9
00AA0:  BCF    FA6.6
00AA2:  BCF    FA6.7
00AA4:  BSF    FA6.0
00AA6:  MOVF   FA8,W
00AA8:  BTFSC  xBE.7
00AAA:  BSF    FF2.7
00AAC:  MOVWF  3B
....................    OutputType9_16 = EEpDat;
00AAE:  MOVFF  3B,43
.................... 
....................    OutputType.B9 = EEpDat;
00AB2:  BCF    x49.0
00AB4:  BTFSC  3B.0
00AB6:  BSF    x49.0
....................    OutputType.B10 = EEpDat >> 1;
00AB8:  BCF    FD8.0
00ABA:  RRCF   3B,W
00ABC:  BCF    x49.1
00ABE:  BTFSC  FE8.0
00AC0:  BSF    x49.1
....................    OutputType.B11 = EEpDat >> 2;
00AC2:  RRCF   3B,W
00AC4:  MOVWF  00
00AC6:  RRCF   00,F
00AC8:  MOVLW  3F
00ACA:  ANDWF  00,F
00ACC:  BCF    x49.2
00ACE:  BTFSC  00.0
00AD0:  BSF    x49.2
....................    OutputType.B12 = EEpDat >> 3;
00AD2:  RRCF   3B,W
00AD4:  MOVWF  00
00AD6:  RRCF   00,F
00AD8:  RRCF   00,F
00ADA:  MOVLW  1F
00ADC:  ANDWF  00,F
00ADE:  BCF    x49.3
00AE0:  BTFSC  00.0
00AE2:  BSF    x49.3
....................    OutputType.B13 = EEpDat >> 4;
00AE4:  SWAPF  3B,W
00AE6:  MOVWF  00
00AE8:  MOVLW  0F
00AEA:  ANDWF  00,F
00AEC:  BCF    x49.4
00AEE:  BTFSC  00.0
00AF0:  BSF    x49.4
....................    OutputType.B14 = EEpDat >> 5;
00AF2:  SWAPF  3B,W
00AF4:  MOVWF  00
00AF6:  RRCF   00,F
00AF8:  MOVLW  07
00AFA:  ANDWF  00,F
00AFC:  BCF    x49.5
00AFE:  BTFSC  00.0
00B00:  BSF    x49.5
....................    OutputType.B15 = EEpDat >> 6;
00B02:  SWAPF  3B,W
00B04:  MOVWF  00
00B06:  RRCF   00,F
00B08:  RRCF   00,F
00B0A:  MOVLW  03
00B0C:  ANDWF  00,F
00B0E:  BCF    x49.6
00B10:  BTFSC  00.0
00B12:  BSF    x49.6
....................    OutputType.B16 = EEpDat >> 7;
00B14:  CLRF   00
00B16:  BTFSC  3B.7
00B18:  BSF    00.0
00B1A:  BCF    x49.7
00B1C:  BTFSC  00.0
00B1E:  BSF    x49.7
.................... 
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
00B20:  MOVFF  FF2,CBE
00B24:  BCF    FF2.7
00B26:  CLRF   FAA
00B28:  MOVLW  0A
00B2A:  MOVWF  FA9
00B2C:  BCF    FA6.6
00B2E:  BCF    FA6.7
00B30:  BSF    FA6.0
00B32:  MOVF   FA8,W
00B34:  BTFSC  xBE.7
00B36:  BSF    FF2.7
00B38:  MOVWF  3B
....................    OutputBoth1_8 = EEpDat;
00B3A:  MOVFF  3B,45
.................... 
....................    OutputBoth.B1 = EEpDat;
00B3E:  BCF    x4A.0
00B40:  BTFSC  3B.0
00B42:  BSF    x4A.0
....................    OutputBoth.B2 = EEpDat >> 1;
00B44:  BCF    FD8.0
00B46:  RRCF   3B,W
00B48:  BCF    x4A.1
00B4A:  BTFSC  FE8.0
00B4C:  BSF    x4A.1
....................    OutputBoth.B3 = EEpDat >> 2;
00B4E:  RRCF   3B,W
00B50:  MOVWF  00
00B52:  RRCF   00,F
00B54:  MOVLW  3F
00B56:  ANDWF  00,F
00B58:  BCF    x4A.2
00B5A:  BTFSC  00.0
00B5C:  BSF    x4A.2
....................    OutputBoth.B4 = EEpDat >> 3;
00B5E:  RRCF   3B,W
00B60:  MOVWF  00
00B62:  RRCF   00,F
00B64:  RRCF   00,F
00B66:  MOVLW  1F
00B68:  ANDWF  00,F
00B6A:  BCF    x4A.3
00B6C:  BTFSC  00.0
00B6E:  BSF    x4A.3
....................    OutputBoth.B5 = EEpDat >> 4;
00B70:  SWAPF  3B,W
00B72:  MOVWF  00
00B74:  MOVLW  0F
00B76:  ANDWF  00,F
00B78:  BCF    x4A.4
00B7A:  BTFSC  00.0
00B7C:  BSF    x4A.4
....................    OutputBoth.B6 = EEpDat >> 5;
00B7E:  SWAPF  3B,W
00B80:  MOVWF  00
00B82:  RRCF   00,F
00B84:  MOVLW  07
00B86:  ANDWF  00,F
00B88:  BCF    x4A.5
00B8A:  BTFSC  00.0
00B8C:  BSF    x4A.5
....................    OutputBoth.B7 = EEpDat >> 6;
00B8E:  SWAPF  3B,W
00B90:  MOVWF  00
00B92:  RRCF   00,F
00B94:  RRCF   00,F
00B96:  MOVLW  03
00B98:  ANDWF  00,F
00B9A:  BCF    x4A.6
00B9C:  BTFSC  00.0
00B9E:  BSF    x4A.6
....................    OutputBoth.B8 = EEpDat >> 7;
00BA0:  CLRF   00
00BA2:  BTFSC  3B.7
00BA4:  BSF    00.0
00BA6:  BCF    x4A.7
00BA8:  BTFSC  00.0
00BAA:  BSF    x4A.7
.................... 
....................    EEpDat = read_eeprom(0x0B);   // Output Both 9-16
00BAC:  MOVFF  FF2,CBE
00BB0:  BCF    FF2.7
00BB2:  CLRF   FAA
00BB4:  MOVLW  0B
00BB6:  MOVWF  FA9
00BB8:  BCF    FA6.6
00BBA:  BCF    FA6.7
00BBC:  BSF    FA6.0
00BBE:  MOVF   FA8,W
00BC0:  BTFSC  xBE.7
00BC2:  BSF    FF2.7
00BC4:  MOVWF  3B
....................    OutputBoth9_16 = EEpDat;
00BC6:  MOVFF  3B,46
.................... 
....................    OutputBoth.B9 = EEpDat;
00BCA:  BCF    x4B.0
00BCC:  BTFSC  3B.0
00BCE:  BSF    x4B.0
....................    OutputBoth.B10 = EEpDat >> 1;
00BD0:  BCF    FD8.0
00BD2:  RRCF   3B,W
00BD4:  BCF    x4B.1
00BD6:  BTFSC  FE8.0
00BD8:  BSF    x4B.1
....................    OutputBoth.B11 = EEpDat >> 2;
00BDA:  RRCF   3B,W
00BDC:  MOVWF  00
00BDE:  RRCF   00,F
00BE0:  MOVLW  3F
00BE2:  ANDWF  00,F
00BE4:  BCF    x4B.2
00BE6:  BTFSC  00.0
00BE8:  BSF    x4B.2
....................    OutputBoth.B12 = EEpDat >> 3;
00BEA:  RRCF   3B,W
00BEC:  MOVWF  00
00BEE:  RRCF   00,F
00BF0:  RRCF   00,F
00BF2:  MOVLW  1F
00BF4:  ANDWF  00,F
00BF6:  BCF    x4B.3
00BF8:  BTFSC  00.0
00BFA:  BSF    x4B.3
....................    OutputBoth.B13 = EEpDat >> 4;
00BFC:  SWAPF  3B,W
00BFE:  MOVWF  00
00C00:  MOVLW  0F
00C02:  ANDWF  00,F
00C04:  BCF    x4B.4
00C06:  BTFSC  00.0
00C08:  BSF    x4B.4
....................    OutputBoth.B14 = EEpDat >> 5;
00C0A:  SWAPF  3B,W
00C0C:  MOVWF  00
00C0E:  RRCF   00,F
00C10:  MOVLW  07
00C12:  ANDWF  00,F
00C14:  BCF    x4B.5
00C16:  BTFSC  00.0
00C18:  BSF    x4B.5
....................    OutputBoth.B15 = EEpDat >> 6;
00C1A:  SWAPF  3B,W
00C1C:  MOVWF  00
00C1E:  RRCF   00,F
00C20:  RRCF   00,F
00C22:  MOVLW  03
00C24:  ANDWF  00,F
00C26:  BCF    x4B.6
00C28:  BTFSC  00.0
00C2A:  BSF    x4B.6
....................    OutputBoth.B16 = EEpDat >> 7;
00C2C:  CLRF   00
00C2E:  BTFSC  3B.7
00C30:  BSF    00.0
00C32:  BCF    x4B.7
00C34:  BTFSC  00.0
00C36:  BSF    x4B.7
.................... 
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
00C38:  MOVFF  FF2,CBE
00C3C:  BCF    FF2.7
00C3E:  CLRF   FAA
00C40:  MOVLW  0D
00C42:  MOVWF  FA9
00C44:  BCF    FA6.6
00C46:  BCF    FA6.7
00C48:  BSF    FA6.0
00C4A:  MOVF   FA8,W
00C4C:  BTFSC  xBE.7
00C4E:  BSF    FF2.7
00C50:  MOVWF  3B
....................    Alarm_Indicator1_8 = EEpDat;
00C52:  MOVFF  3B,48
.................... 
....................    AlarmIndicator.B1 = EEpDat;
00C56:  BCF    x4C.0
00C58:  BTFSC  3B.0
00C5A:  BSF    x4C.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
00C5C:  BCF    FD8.0
00C5E:  RRCF   3B,W
00C60:  BCF    x4C.1
00C62:  BTFSC  FE8.0
00C64:  BSF    x4C.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
00C66:  RRCF   3B,W
00C68:  MOVWF  00
00C6A:  RRCF   00,F
00C6C:  MOVLW  3F
00C6E:  ANDWF  00,F
00C70:  BCF    x4C.2
00C72:  BTFSC  00.0
00C74:  BSF    x4C.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
00C76:  RRCF   3B,W
00C78:  MOVWF  00
00C7A:  RRCF   00,F
00C7C:  RRCF   00,F
00C7E:  MOVLW  1F
00C80:  ANDWF  00,F
00C82:  BCF    x4C.3
00C84:  BTFSC  00.0
00C86:  BSF    x4C.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
00C88:  SWAPF  3B,W
00C8A:  MOVWF  00
00C8C:  MOVLW  0F
00C8E:  ANDWF  00,F
00C90:  BCF    x4C.4
00C92:  BTFSC  00.0
00C94:  BSF    x4C.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
00C96:  SWAPF  3B,W
00C98:  MOVWF  00
00C9A:  RRCF   00,F
00C9C:  MOVLW  07
00C9E:  ANDWF  00,F
00CA0:  BCF    x4C.5
00CA2:  BTFSC  00.0
00CA4:  BSF    x4C.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
00CA6:  SWAPF  3B,W
00CA8:  MOVWF  00
00CAA:  RRCF   00,F
00CAC:  RRCF   00,F
00CAE:  MOVLW  03
00CB0:  ANDWF  00,F
00CB2:  BCF    x4C.6
00CB4:  BTFSC  00.0
00CB6:  BSF    x4C.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
00CB8:  CLRF   00
00CBA:  BTFSC  3B.7
00CBC:  BSF    00.0
00CBE:  BCF    x4C.7
00CC0:  BTFSC  00.0
00CC2:  BSF    x4C.7
.................... 
....................    EEpDat = read_eeprom(0x0E);   // AlarmIndicator 9-16
00CC4:  MOVFF  FF2,CBE
00CC8:  BCF    FF2.7
00CCA:  CLRF   FAA
00CCC:  MOVLW  0E
00CCE:  MOVWF  FA9
00CD0:  BCF    FA6.6
00CD2:  BCF    FA6.7
00CD4:  BSF    FA6.0
00CD6:  MOVF   FA8,W
00CD8:  BTFSC  xBE.7
00CDA:  BSF    FF2.7
00CDC:  MOVWF  3B
....................    Alarm_Indicator9_16 = EEpDat;
00CDE:  MOVFF  3B,49
.................... 
....................    AlarmIndicator.B9 = EEpDat;
00CE2:  BCF    x4D.0
00CE4:  BTFSC  3B.0
00CE6:  BSF    x4D.0
....................    AlarmIndicator.B10 = EEpDat >> 1;
00CE8:  BCF    FD8.0
00CEA:  RRCF   3B,W
00CEC:  BCF    x4D.1
00CEE:  BTFSC  FE8.0
00CF0:  BSF    x4D.1
....................    AlarmIndicator.B11 = EEpDat >> 2;
00CF2:  RRCF   3B,W
00CF4:  MOVWF  00
00CF6:  RRCF   00,F
00CF8:  MOVLW  3F
00CFA:  ANDWF  00,F
00CFC:  BCF    x4D.2
00CFE:  BTFSC  00.0
00D00:  BSF    x4D.2
....................    AlarmIndicator.B12 = EEpDat >> 3;
00D02:  RRCF   3B,W
00D04:  MOVWF  00
00D06:  RRCF   00,F
00D08:  RRCF   00,F
00D0A:  MOVLW  1F
00D0C:  ANDWF  00,F
00D0E:  BCF    x4D.3
00D10:  BTFSC  00.0
00D12:  BSF    x4D.3
....................    AlarmIndicator.B13 = EEpDat >> 4;
00D14:  SWAPF  3B,W
00D16:  MOVWF  00
00D18:  MOVLW  0F
00D1A:  ANDWF  00,F
00D1C:  BCF    x4D.4
00D1E:  BTFSC  00.0
00D20:  BSF    x4D.4
....................    AlarmIndicator.B14 = EEpDat >> 5;
00D22:  SWAPF  3B,W
00D24:  MOVWF  00
00D26:  RRCF   00,F
00D28:  MOVLW  07
00D2A:  ANDWF  00,F
00D2C:  BCF    x4D.5
00D2E:  BTFSC  00.0
00D30:  BSF    x4D.5
....................    AlarmIndicator.B15 = EEpDat >> 6;
00D32:  SWAPF  3B,W
00D34:  MOVWF  00
00D36:  RRCF   00,F
00D38:  RRCF   00,F
00D3A:  MOVLW  03
00D3C:  ANDWF  00,F
00D3E:  BCF    x4D.6
00D40:  BTFSC  00.0
00D42:  BSF    x4D.6
....................    AlarmIndicator.B16 = EEpDat >> 7;
00D44:  CLRF   00
00D46:  BTFSC  3B.7
00D48:  BSF    00.0
00D4A:  BCF    x4D.7
00D4C:  BTFSC  00.0
00D4E:  BSF    x4D.7
.................... 
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
00D50:  MOVFF  FF2,CBE
00D54:  BCF    FF2.7
00D56:  CLRF   FAA
00D58:  MOVLW  10
00D5A:  MOVWF  FA9
00D5C:  BCF    FA6.6
00D5E:  BCF    FA6.7
00D60:  BSF    FA6.0
00D62:  MOVF   FA8,W
00D64:  BTFSC  xBE.7
00D66:  BSF    FF2.7
00D68:  MOVWF  3B
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
00D6A:  BCF    x58.0
00D6C:  BTFSC  3B.0
00D6E:  BSF    x58.0
....................    RED_Colour.B2 = EEpDat >> 1;
00D70:  BCF    FD8.0
00D72:  RRCF   3B,W
00D74:  BCF    x58.1
00D76:  BTFSC  FE8.0
00D78:  BSF    x58.1
....................    RED_Colour.B3 = EEpDat >> 2;
00D7A:  RRCF   3B,W
00D7C:  MOVWF  00
00D7E:  RRCF   00,F
00D80:  MOVLW  3F
00D82:  ANDWF  00,F
00D84:  BCF    x58.2
00D86:  BTFSC  00.0
00D88:  BSF    x58.2
....................    RED_Colour.B4 = EEpDat >> 3;
00D8A:  RRCF   3B,W
00D8C:  MOVWF  00
00D8E:  RRCF   00,F
00D90:  RRCF   00,F
00D92:  MOVLW  1F
00D94:  ANDWF  00,F
00D96:  BCF    x58.3
00D98:  BTFSC  00.0
00D9A:  BSF    x58.3
....................    RED_Colour.B5 = EEpDat >> 4;
00D9C:  SWAPF  3B,W
00D9E:  MOVWF  00
00DA0:  MOVLW  0F
00DA2:  ANDWF  00,F
00DA4:  BCF    x58.4
00DA6:  BTFSC  00.0
00DA8:  BSF    x58.4
....................    RED_Colour.B6 = EEpDat >> 5;
00DAA:  SWAPF  3B,W
00DAC:  MOVWF  00
00DAE:  RRCF   00,F
00DB0:  MOVLW  07
00DB2:  ANDWF  00,F
00DB4:  BCF    x58.5
00DB6:  BTFSC  00.0
00DB8:  BSF    x58.5
....................    RED_Colour.B7 = EEpDat >> 6;
00DBA:  SWAPF  3B,W
00DBC:  MOVWF  00
00DBE:  RRCF   00,F
00DC0:  RRCF   00,F
00DC2:  MOVLW  03
00DC4:  ANDWF  00,F
00DC6:  BCF    x58.6
00DC8:  BTFSC  00.0
00DCA:  BSF    x58.6
....................    RED_Colour.B8 = EEpDat >> 7;
00DCC:  CLRF   00
00DCE:  BTFSC  3B.7
00DD0:  BSF    00.0
00DD2:  BCF    x58.7
00DD4:  BTFSC  00.0
00DD6:  BSF    x58.7
....................    
....................    EEpDat = read_eeprom(0x11);
00DD8:  MOVFF  FF2,CBE
00DDC:  BCF    FF2.7
00DDE:  CLRF   FAA
00DE0:  MOVLW  11
00DE2:  MOVWF  FA9
00DE4:  BCF    FA6.6
00DE6:  BCF    FA6.7
00DE8:  BSF    FA6.0
00DEA:  MOVF   FA8,W
00DEC:  BTFSC  xBE.7
00DEE:  BSF    FF2.7
00DF0:  MOVWF  3B
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
00DF2:  BCF    x59.0
00DF4:  BTFSC  3B.0
00DF6:  BSF    x59.0
....................    RED_Colour.B10 = EEpDat >> 1;
00DF8:  BCF    FD8.0
00DFA:  RRCF   3B,W
00DFC:  BCF    x59.1
00DFE:  BTFSC  FE8.0
00E00:  BSF    x59.1
....................    
....................    EEpDat = read_eeprom(0x12);
00E02:  MOVFF  FF2,CBE
00E06:  BCF    FF2.7
00E08:  CLRF   FAA
00E0A:  MOVLW  12
00E0C:  MOVWF  FA9
00E0E:  BCF    FA6.6
00E10:  BCF    FA6.7
00E12:  BSF    FA6.0
00E14:  MOVF   FA8,W
00E16:  BTFSC  xBE.7
00E18:  BSF    FF2.7
00E1A:  MOVWF  3B
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
00E1C:  BCF    x59.2
00E1E:  BTFSC  3B.0
00E20:  BSF    x59.2
....................    RED_Colour.B12 = EEpDat >> 1;
00E22:  BCF    FD8.0
00E24:  RRCF   3B,W
00E26:  BCF    x59.3
00E28:  BTFSC  FE8.0
00E2A:  BSF    x59.3
....................    RED_Colour.B13 = EEpDat >> 2;
00E2C:  RRCF   3B,W
00E2E:  MOVWF  00
00E30:  RRCF   00,F
00E32:  MOVLW  3F
00E34:  ANDWF  00,F
00E36:  BCF    x59.4
00E38:  BTFSC  00.0
00E3A:  BSF    x59.4
....................    RED_Colour.B14 = EEpDat >> 3;
00E3C:  RRCF   3B,W
00E3E:  MOVWF  00
00E40:  RRCF   00,F
00E42:  RRCF   00,F
00E44:  MOVLW  1F
00E46:  ANDWF  00,F
00E48:  BCF    x59.5
00E4A:  BTFSC  00.0
00E4C:  BSF    x59.5
....................    RED_Colour.B15 = EEpDat >> 4;
00E4E:  SWAPF  3B,W
00E50:  MOVWF  00
00E52:  MOVLW  0F
00E54:  ANDWF  00,F
00E56:  BCF    x59.6
00E58:  BTFSC  00.0
00E5A:  BSF    x59.6
....................    RED_Colour.B16 = EEpDat >> 5;
00E5C:  SWAPF  3B,W
00E5E:  MOVWF  00
00E60:  RRCF   00,F
00E62:  MOVLW  07
00E64:  ANDWF  00,F
00E66:  BCF    x59.7
00E68:  BTFSC  00.0
00E6A:  BSF    x59.7
.................... 
....................    
....................    EEpDat = read_eeprom(0x14);
00E6C:  MOVFF  FF2,CBE
00E70:  BCF    FF2.7
00E72:  CLRF   FAA
00E74:  MOVLW  14
00E76:  MOVWF  FA9
00E78:  BCF    FA6.6
00E7A:  BCF    FA6.7
00E7C:  BSF    FA6.0
00E7E:  MOVF   FA8,W
00E80:  BTFSC  xBE.7
00E82:  BSF    FF2.7
00E84:  MOVWF  3B
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
00E86:  BCF    x5A.0
00E88:  BTFSC  3B.0
00E8A:  BSF    x5A.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
00E8C:  BCF    FD8.0
00E8E:  RRCF   3B,W
00E90:  BCF    x5A.1
00E92:  BTFSC  FE8.0
00E94:  BSF    x5A.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
00E96:  RRCF   3B,W
00E98:  MOVWF  00
00E9A:  RRCF   00,F
00E9C:  MOVLW  3F
00E9E:  ANDWF  00,F
00EA0:  BCF    x5A.2
00EA2:  BTFSC  00.0
00EA4:  BSF    x5A.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
00EA6:  RRCF   3B,W
00EA8:  MOVWF  00
00EAA:  RRCF   00,F
00EAC:  RRCF   00,F
00EAE:  MOVLW  1F
00EB0:  ANDWF  00,F
00EB2:  BCF    x5A.3
00EB4:  BTFSC  00.0
00EB6:  BSF    x5A.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
00EB8:  SWAPF  3B,W
00EBA:  MOVWF  00
00EBC:  MOVLW  0F
00EBE:  ANDWF  00,F
00EC0:  BCF    x5A.4
00EC2:  BTFSC  00.0
00EC4:  BSF    x5A.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
00EC6:  SWAPF  3B,W
00EC8:  MOVWF  00
00ECA:  RRCF   00,F
00ECC:  MOVLW  07
00ECE:  ANDWF  00,F
00ED0:  BCF    x5A.5
00ED2:  BTFSC  00.0
00ED4:  BSF    x5A.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
00ED6:  SWAPF  3B,W
00ED8:  MOVWF  00
00EDA:  RRCF   00,F
00EDC:  RRCF   00,F
00EDE:  MOVLW  03
00EE0:  ANDWF  00,F
00EE2:  BCF    x5A.6
00EE4:  BTFSC  00.0
00EE6:  BSF    x5A.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
00EE8:  CLRF   00
00EEA:  BTFSC  3B.7
00EEC:  BSF    00.0
00EEE:  BCF    x5A.7
00EF0:  BTFSC  00.0
00EF2:  BSF    x5A.7
....................    
....................    EEpDat = read_eeprom(0x15);
00EF4:  MOVFF  FF2,CBE
00EF8:  BCF    FF2.7
00EFA:  CLRF   FAA
00EFC:  MOVLW  15
00EFE:  MOVWF  FA9
00F00:  BCF    FA6.6
00F02:  BCF    FA6.7
00F04:  BSF    FA6.0
00F06:  MOVF   FA8,W
00F08:  BTFSC  xBE.7
00F0A:  BSF    FF2.7
00F0C:  MOVWF  3B
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
00F0E:  BCF    x5B.0
00F10:  BTFSC  3B.0
00F12:  BSF    x5B.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
00F14:  BCF    FD8.0
00F16:  RRCF   3B,W
00F18:  BCF    x5B.1
00F1A:  BTFSC  FE8.0
00F1C:  BSF    x5B.1
....................    
....................    
....................    EEpDat = read_eeprom(0x16);
00F1E:  MOVFF  FF2,CBE
00F22:  BCF    FF2.7
00F24:  CLRF   FAA
00F26:  MOVLW  16
00F28:  MOVWF  FA9
00F2A:  BCF    FA6.6
00F2C:  BCF    FA6.7
00F2E:  BSF    FA6.0
00F30:  MOVF   FA8,W
00F32:  BTFSC  xBE.7
00F34:  BSF    FF2.7
00F36:  MOVWF  3B
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
00F38:  BCF    x5B.2
00F3A:  BTFSC  3B.0
00F3C:  BSF    x5B.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
00F3E:  BCF    FD8.0
00F40:  RRCF   3B,W
00F42:  BCF    x5B.3
00F44:  BTFSC  FE8.0
00F46:  BSF    x5B.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
00F48:  RRCF   3B,W
00F4A:  MOVWF  00
00F4C:  RRCF   00,F
00F4E:  MOVLW  3F
00F50:  ANDWF  00,F
00F52:  BCF    x5B.4
00F54:  BTFSC  00.0
00F56:  BSF    x5B.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
00F58:  RRCF   3B,W
00F5A:  MOVWF  00
00F5C:  RRCF   00,F
00F5E:  RRCF   00,F
00F60:  MOVLW  1F
00F62:  ANDWF  00,F
00F64:  BCF    x5B.5
00F66:  BTFSC  00.0
00F68:  BSF    x5B.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
00F6A:  SWAPF  3B,W
00F6C:  MOVWF  00
00F6E:  MOVLW  0F
00F70:  ANDWF  00,F
00F72:  BCF    x5B.6
00F74:  BTFSC  00.0
00F76:  BSF    x5B.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
00F78:  SWAPF  3B,W
00F7A:  MOVWF  00
00F7C:  RRCF   00,F
00F7E:  MOVLW  07
00F80:  ANDWF  00,F
00F82:  BCF    x5B.7
00F84:  BTFSC  00.0
00F86:  BSF    x5B.7
.................... 
....................     //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
00F88:  MOVFF  FF2,CBE
00F8C:  BCF    FF2.7
00F8E:  CLRF   FAA
00F90:  MOVLW  18
00F92:  MOVWF  FA9
00F94:  BCF    FA6.6
00F96:  BCF    FA6.7
00F98:  BSF    FA6.0
00F9A:  MOVF   FA8,W
00F9C:  BTFSC  xBE.7
00F9E:  BSF    FF2.7
00FA0:  MOVLB  0
00FA2:  MOVWF  x6C
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
00FA4:  MOVFF  FF2,CBE
00FA8:  BCF    FF2.7
00FAA:  CLRF   FAA
00FAC:  MOVLW  19
00FAE:  MOVWF  FA9
00FB0:  BCF    FA6.6
00FB2:  BCF    FA6.7
00FB4:  BSF    FA6.0
00FB6:  MOVF   FA8,W
00FB8:  MOVLB  C
00FBA:  BTFSC  xBE.7
00FBC:  BSF    FF2.7
00FBE:  MOVLB  0
00FC0:  MOVWF  x6D
....................    FlashingRate = read_eeprom(0x1A); // Flashing rate
00FC2:  MOVFF  FF2,CBE
00FC6:  BCF    FF2.7
00FC8:  CLRF   FAA
00FCA:  MOVLW  1A
00FCC:  MOVWF  FA9
00FCE:  BCF    FA6.6
00FD0:  BCF    FA6.7
00FD2:  BSF    FA6.0
00FD4:  MOVF   FA8,W
00FD6:  MOVLB  C
00FD8:  BTFSC  xBE.7
00FDA:  BSF    FF2.7
00FDC:  MOVLB  0
00FDE:  MOVWF  x6E
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
00FE0:  MOVFF  FF2,CBE
00FE4:  BCF    FF2.7
00FE6:  CLRF   FAA
00FE8:  MOVLW  1B
00FEA:  MOVWF  FA9
00FEC:  BCF    FA6.6
00FEE:  BCF    FA6.7
00FF0:  BSF    FA6.0
00FF2:  MOVF   FA8,W
00FF4:  MOVLB  C
00FF6:  BTFSC  xBE.7
00FF8:  BSF    FF2.7
00FFA:  MOVLB  0
00FFC:  MOVWF  x6F
....................    
....................    FaultDelayTime[0] = read_eeprom(0x1C);  // Master or slave sync(flashing)
00FFE:  MOVFF  FF2,CBE
01002:  BCF    FF2.7
01004:  CLRF   FAA
01006:  MOVLW  1C
01008:  MOVWF  FA9
0100A:  BCF    FA6.6
0100C:  BCF    FA6.7
0100E:  BSF    FA6.0
01010:  MOVF   FA8,W
01012:  MOVLB  C
01014:  BTFSC  xBE.7
01016:  BSF    FF2.7
01018:  CLRF   x87
0101A:  MOVWF  x86
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
0101C:  MOVFF  FF2,CBE
01020:  BCF    FF2.7
01022:  CLRF   FAA
01024:  MOVLW  1D
01026:  MOVWF  FA9
01028:  BCF    FA6.6
0102A:  BCF    FA6.7
0102C:  BSF    FA6.0
0102E:  MOVF   FA8,W
01030:  BTFSC  xBE.7
01032:  BSF    FF2.7
01034:  MOVLB  0
01036:  MOVWF  x7B
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
01038:  MOVFF  FF2,CBE
0103C:  BCF    FF2.7
0103E:  CLRF   FAA
01040:  MOVLW  1E
01042:  MOVWF  FA9
01044:  BCF    FA6.6
01046:  BCF    FA6.7
01048:  BSF    FA6.0
0104A:  MOVF   FA8,W
0104C:  MOVLB  C
0104E:  BTFSC  xBE.7
01050:  BSF    FF2.7
01052:  CLRF   x89
01054:  MOVWF  x88
....................    FaultDelayTime[2] = read_eeprom(0x1F);
01056:  MOVFF  FF2,CBE
0105A:  BCF    FF2.7
0105C:  CLRF   FAA
0105E:  MOVLW  1F
01060:  MOVWF  FA9
01062:  BCF    FA6.6
01064:  BCF    FA6.7
01066:  BSF    FA6.0
01068:  MOVF   FA8,W
0106A:  BTFSC  xBE.7
0106C:  BSF    FF2.7
0106E:  CLRF   x8B
01070:  MOVWF  x8A
....................    FaultDelayTime[3] = read_eeprom(0x20);
01072:  MOVFF  FF2,CBE
01076:  BCF    FF2.7
01078:  CLRF   FAA
0107A:  MOVLW  20
0107C:  MOVWF  FA9
0107E:  BCF    FA6.6
01080:  BCF    FA6.7
01082:  BSF    FA6.0
01084:  MOVF   FA8,W
01086:  BTFSC  xBE.7
01088:  BSF    FF2.7
0108A:  CLRF   x8D
0108C:  MOVWF  x8C
....................    FaultDelayTime[4] = read_eeprom(0x21);
0108E:  MOVFF  FF2,CBE
01092:  BCF    FF2.7
01094:  CLRF   FAA
01096:  MOVLW  21
01098:  MOVWF  FA9
0109A:  BCF    FA6.6
0109C:  BCF    FA6.7
0109E:  BSF    FA6.0
010A0:  MOVF   FA8,W
010A2:  BTFSC  xBE.7
010A4:  BSF    FF2.7
010A6:  CLRF   x8F
010A8:  MOVWF  x8E
....................    FaultDelayTime[5] = read_eeprom(0x22);
010AA:  MOVFF  FF2,CBE
010AE:  BCF    FF2.7
010B0:  CLRF   FAA
010B2:  MOVLW  22
010B4:  MOVWF  FA9
010B6:  BCF    FA6.6
010B8:  BCF    FA6.7
010BA:  BSF    FA6.0
010BC:  MOVF   FA8,W
010BE:  BTFSC  xBE.7
010C0:  BSF    FF2.7
010C2:  CLRF   x91
010C4:  MOVWF  x90
....................    FaultDelayTime[6] = read_eeprom(0x23);
010C6:  MOVFF  FF2,CBE
010CA:  BCF    FF2.7
010CC:  CLRF   FAA
010CE:  MOVLW  23
010D0:  MOVWF  FA9
010D2:  BCF    FA6.6
010D4:  BCF    FA6.7
010D6:  BSF    FA6.0
010D8:  MOVF   FA8,W
010DA:  BTFSC  xBE.7
010DC:  BSF    FF2.7
010DE:  CLRF   x93
010E0:  MOVWF  x92
....................    FaultDelayTime[7] = read_eeprom(0x24);
010E2:  MOVFF  FF2,CBE
010E6:  BCF    FF2.7
010E8:  CLRF   FAA
010EA:  MOVLW  24
010EC:  MOVWF  FA9
010EE:  BCF    FA6.6
010F0:  BCF    FA6.7
010F2:  BSF    FA6.0
010F4:  MOVF   FA8,W
010F6:  BTFSC  xBE.7
010F8:  BSF    FF2.7
010FA:  CLRF   x95
010FC:  MOVWF  x94
....................    FaultDelayTime[8] = read_eeprom(0x25);
010FE:  MOVFF  FF2,CBE
01102:  BCF    FF2.7
01104:  CLRF   FAA
01106:  MOVLW  25
01108:  MOVWF  FA9
0110A:  BCF    FA6.6
0110C:  BCF    FA6.7
0110E:  BSF    FA6.0
01110:  MOVF   FA8,W
01112:  BTFSC  xBE.7
01114:  BSF    FF2.7
01116:  CLRF   x97
01118:  MOVWF  x96
....................    FaultDelayTime[9] = read_eeprom(0x26);
0111A:  MOVFF  FF2,CBE
0111E:  BCF    FF2.7
01120:  CLRF   FAA
01122:  MOVLW  26
01124:  MOVWF  FA9
01126:  BCF    FA6.6
01128:  BCF    FA6.7
0112A:  BSF    FA6.0
0112C:  MOVF   FA8,W
0112E:  BTFSC  xBE.7
01130:  BSF    FF2.7
01132:  CLRF   x99
01134:  MOVWF  x98
....................    FaultDelayTime[10] = read_eeprom(0x27);
01136:  MOVFF  FF2,CBE
0113A:  BCF    FF2.7
0113C:  CLRF   FAA
0113E:  MOVLW  27
01140:  MOVWF  FA9
01142:  BCF    FA6.6
01144:  BCF    FA6.7
01146:  BSF    FA6.0
01148:  MOVF   FA8,W
0114A:  BTFSC  xBE.7
0114C:  BSF    FF2.7
0114E:  CLRF   x9B
01150:  MOVWF  x9A
....................    FaultDelayTime[11] = read_eeprom(0x28);
01152:  MOVFF  FF2,CBE
01156:  BCF    FF2.7
01158:  CLRF   FAA
0115A:  MOVLW  28
0115C:  MOVWF  FA9
0115E:  BCF    FA6.6
01160:  BCF    FA6.7
01162:  BSF    FA6.0
01164:  MOVF   FA8,W
01166:  BTFSC  xBE.7
01168:  BSF    FF2.7
0116A:  CLRF   x9D
0116C:  MOVWF  x9C
....................    FaultDelayTime[12] = read_eeprom(0x29);
0116E:  MOVFF  FF2,CBE
01172:  BCF    FF2.7
01174:  CLRF   FAA
01176:  MOVLW  29
01178:  MOVWF  FA9
0117A:  BCF    FA6.6
0117C:  BCF    FA6.7
0117E:  BSF    FA6.0
01180:  MOVF   FA8,W
01182:  BTFSC  xBE.7
01184:  BSF    FF2.7
01186:  CLRF   x9F
01188:  MOVWF  x9E
....................    FaultDelayTime[13] = read_eeprom(0x2A);
0118A:  MOVFF  FF2,CBE
0118E:  BCF    FF2.7
01190:  CLRF   FAA
01192:  MOVLW  2A
01194:  MOVWF  FA9
01196:  BCF    FA6.6
01198:  BCF    FA6.7
0119A:  BSF    FA6.0
0119C:  MOVF   FA8,W
0119E:  BTFSC  xBE.7
011A0:  BSF    FF2.7
011A2:  CLRF   xA1
011A4:  MOVWF  xA0
....................    FaultDelayTime[14] = read_eeprom(0x2B);
011A6:  MOVFF  FF2,CBE
011AA:  BCF    FF2.7
011AC:  CLRF   FAA
011AE:  MOVLW  2B
011B0:  MOVWF  FA9
011B2:  BCF    FA6.6
011B4:  BCF    FA6.7
011B6:  BSF    FA6.0
011B8:  MOVF   FA8,W
011BA:  BTFSC  xBE.7
011BC:  BSF    FF2.7
011BE:  CLRF   xA3
011C0:  MOVWF  xA2
....................    FaultDelayTime[15] = read_eeprom(0x2C);
011C2:  MOVFF  FF2,CBE
011C6:  BCF    FF2.7
011C8:  CLRF   FAA
011CA:  MOVLW  2C
011CC:  MOVWF  FA9
011CE:  BCF    FA6.6
011D0:  BCF    FA6.7
011D2:  BSF    FA6.0
011D4:  MOVF   FA8,W
011D6:  BTFSC  xBE.7
011D8:  BSF    FF2.7
011DA:  CLRF   xA5
011DC:  MOVWF  xA4
....................    FaultDelayTime[16] = read_eeprom(0x2D);
011DE:  MOVFF  FF2,CBE
011E2:  BCF    FF2.7
011E4:  CLRF   FAA
011E6:  MOVLW  2D
011E8:  MOVWF  FA9
011EA:  BCF    FA6.6
011EC:  BCF    FA6.7
011EE:  BSF    FA6.0
011F0:  MOVF   FA8,W
011F2:  BTFSC  xBE.7
011F4:  BSF    FF2.7
011F6:  CLRF   xA7
011F8:  MOVWF  xA6
....................    FaultDelayTime[17] = read_eeprom(0x2E);
011FA:  MOVFF  FF2,CBE
011FE:  BCF    FF2.7
01200:  CLRF   FAA
01202:  MOVLW  2E
01204:  MOVWF  FA9
01206:  BCF    FA6.6
01208:  BCF    FA6.7
0120A:  BSF    FA6.0
0120C:  MOVF   FA8,W
0120E:  BTFSC  xBE.7
01210:  BSF    FF2.7
01212:  CLRF   xA9
01214:  MOVWF  xA8
....................    FaultDelayTime[18] = read_eeprom(0x2F);
01216:  MOVFF  FF2,CBE
0121A:  BCF    FF2.7
0121C:  CLRF   FAA
0121E:  MOVLW  2F
01220:  MOVWF  FA9
01222:  BCF    FA6.6
01224:  BCF    FA6.7
01226:  BSF    FA6.0
01228:  MOVF   FA8,W
0122A:  BTFSC  xBE.7
0122C:  BSF    FF2.7
0122E:  CLRF   xAB
01230:  MOVWF  xAA
....................    FaultDelayTime[19] = read_eeprom(0x30);
01232:  MOVFF  FF2,CBE
01236:  BCF    FF2.7
01238:  CLRF   FAA
0123A:  MOVLW  30
0123C:  MOVWF  FA9
0123E:  BCF    FA6.6
01240:  BCF    FA6.7
01242:  BSF    FA6.0
01244:  MOVF   FA8,W
01246:  BTFSC  xBE.7
01248:  BSF    FF2.7
0124A:  CLRF   xAD
0124C:  MOVWF  xAC
....................    FaultDelayTime[20] = read_eeprom(0x31);
0124E:  MOVFF  FF2,CBE
01252:  BCF    FF2.7
01254:  CLRF   FAA
01256:  MOVLW  31
01258:  MOVWF  FA9
0125A:  BCF    FA6.6
0125C:  BCF    FA6.7
0125E:  BSF    FA6.0
01260:  MOVF   FA8,W
01262:  BTFSC  xBE.7
01264:  BSF    FF2.7
01266:  CLRF   xAF
01268:  MOVWF  xAE
....................    
....................    unsigned int  a = 0; 
....................    unsigned char  phonenum;
0126A:  CLRF   xB4
....................    for(; ; a++)
....................    {
....................       restart_wdt();
0126C:  CLRWDT
....................       phonenum = read_eeprom(0x32 + a);
0126E:  MOVLW  32
01270:  ADDWF  xB4,W
01272:  MOVWF  xBE
01274:  MOVFF  FF2,CBF
01278:  BCF    FF2.7
0127A:  CLRF   FAA
0127C:  MOVFF  CBE,FA9
01280:  BCF    FA6.6
01282:  BCF    FA6.7
01284:  BSF    FA6.0
01286:  MOVF   FA8,W
01288:  BTFSC  xBF.7
0128A:  BSF    FF2.7
0128C:  MOVWF  xB5
....................       if((phonenum == 0x0D) || (a > 15))
0128E:  MOVF   xB5,W
01290:  SUBLW  0D
01292:  BZ    129A
01294:  MOVF   xB4,W
01296:  SUBLW  0F
01298:  BC    12E2
....................       {
....................          sms_phonenumber[a] =  '\0';
0129A:  CLRF   03
0129C:  MOVF   xB4,W
0129E:  ADDLW  8D
012A0:  MOVWF  FE9
012A2:  MOVLW  09
012A4:  ADDWFC 03,W
012A6:  MOVWF  FEA
012A8:  CLRF   FEF
....................          write_eeprom(0x32+a,phonenum);
012AA:  MOVLW  32
012AC:  ADDWF  xB4,W
012AE:  MOVWF  xBE
012B0:  MOVF   FF2,W
012B2:  MOVWF  00
012B4:  BCF    FF2.7
012B6:  CLRF   FAA
012B8:  MOVFF  CBE,FA9
012BC:  MOVFF  CB5,FA8
012C0:  BCF    FA6.6
012C2:  BCF    FA6.7
012C4:  BSF    FA6.2
012C6:  MOVLB  F
012C8:  MOVLW  55
012CA:  MOVWF  FA7
012CC:  MOVLW  AA
012CE:  MOVWF  FA7
012D0:  BSF    FA6.1
012D2:  BTFSC  FA6.1
012D4:  BRA    12D2
012D6:  BCF    FA6.2
012D8:  MOVF   00,W
012DA:  IORWF  FF2,F
....................          break;
012DC:  BRA    12FE
....................       }
012DE:  BRA    12F6
012E0:  MOVLB  C
....................       else
....................       {
....................          sms_phonenumber[a] = phonenum;
012E2:  CLRF   03
012E4:  MOVF   xB4,W
012E6:  ADDLW  8D
012E8:  MOVWF  FE9
012EA:  MOVLW  09
012EC:  ADDWFC 03,W
012EE:  MOVWF  FEA
012F0:  MOVFF  CB5,FEF
012F4:  MOVLB  F
....................       }
012F6:  MOVLB  C
012F8:  INCF   xB4,F
012FA:  BRA    126C
012FC:  MOVLB  F
....................    }
....................    
....................       
....................    int16  i =3,j=0,k=0 , buff;
012FE:  MOVLB  C
01300:  CLRF   xB7
01302:  MOVLW  03
01304:  MOVWF  xB6
01306:  CLRF   xB9
01308:  CLRF   xB8
0130A:  CLRF   xBB
0130C:  CLRF   xBA
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0130E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01310:  MOVLW  5D
01312:  ADDWF  xB6,W
01314:  MOVWF  xBE
01316:  MOVLW  00
01318:  ADDWFC xB7,W
0131A:  MOVWF  xBF
0131C:  MOVFF  FF2,CC0
01320:  BCF    FF2.7
01322:  MOVFF  CBF,FAA
01326:  MOVFF  CBE,FA9
0132A:  BCF    FA6.6
0132C:  BCF    FA6.7
0132E:  BSF    FA6.0
01330:  MOVF   FA8,W
01332:  BTFSC  xC0.7
01334:  BSF    FF2.7
01336:  CLRF   xBD
01338:  MOVWF  xBC
....................       
....................       if((buff == 0x0D)|| (j>30))
0133A:  MOVF   xBC,W
0133C:  SUBLW  0D
0133E:  BNZ   1344
01340:  MOVF   xBD,F
01342:  BZ    134E
01344:  MOVF   xB9,F
01346:  BNZ   134E
01348:  MOVF   xB8,W
0134A:  SUBLW  1E
0134C:  BC    1360
....................       {
....................          SMS_Massage1[j] = '\0' ; // end string
0134E:  MOVLW  9C
01350:  ADDWF  xB8,W
01352:  MOVWF  FE9
01354:  MOVLW  09
01356:  ADDWFC xB9,W
01358:  MOVWF  FEA
0135A:  CLRF   FEF
....................          break;
0135C:  BRA    1384
....................       }
0135E:  BRA    1370
....................       else
....................       {
....................          SMS_Massage1[j] = buff;  
01360:  MOVLW  9C
01362:  ADDWF  xB8,W
01364:  MOVWF  FE9
01366:  MOVLW  09
01368:  ADDWFC xB9,W
0136A:  MOVWF  FEA
0136C:  MOVFF  CBC,FEF
....................       }
01370:  MOVFF  CB7,03
01374:  MOVF   xB6,W
01376:  INCF   xB6,F
01378:  BTFSC  FD8.2
0137A:  INCF   xB7,F
0137C:  INCF   xB8,F
0137E:  BTFSC  FD8.2
01380:  INCF   xB9,F
01382:  BRA    130E
....................    }
....................    
....................    i++;
01384:  INCF   xB6,F
01386:  BTFSC  FD8.2
01388:  INCF   xB7,F
....................    j=0;
0138A:  CLRF   xB9
0138C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0138E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01390:  MOVLW  5D
01392:  ADDWF  xB6,W
01394:  MOVWF  xBE
01396:  MOVLW  00
01398:  ADDWFC xB7,W
0139A:  MOVWF  xBF
0139C:  MOVFF  FF2,CC0
013A0:  BCF    FF2.7
013A2:  MOVFF  CBF,FAA
013A6:  MOVFF  CBE,FA9
013AA:  BCF    FA6.6
013AC:  BCF    FA6.7
013AE:  BSF    FA6.0
013B0:  MOVF   FA8,W
013B2:  BTFSC  xC0.7
013B4:  BSF    FF2.7
013B6:  CLRF   xBD
013B8:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
013BA:  MOVF   xBC,W
013BC:  SUBLW  0D
013BE:  BNZ   13C4
013C0:  MOVF   xBD,F
013C2:  BZ    13CE
013C4:  MOVF   xB9,F
013C6:  BNZ   13CE
013C8:  MOVF   xB8,W
013CA:  SUBLW  1E
013CC:  BC    13E0
....................       {
....................          SMS_Massage2[j] = '\0' ; // end string
013CE:  MOVLW  BC
013D0:  ADDWF  xB8,W
013D2:  MOVWF  FE9
013D4:  MOVLW  09
013D6:  ADDWFC xB9,W
013D8:  MOVWF  FEA
013DA:  CLRF   FEF
....................          break;
013DC:  BRA    1404
....................       }
013DE:  BRA    13F0
....................       else
....................       {
....................          SMS_Massage2[j] = buff;
013E0:  MOVLW  BC
013E2:  ADDWF  xB8,W
013E4:  MOVWF  FE9
013E6:  MOVLW  09
013E8:  ADDWFC xB9,W
013EA:  MOVWF  FEA
013EC:  MOVFF  CBC,FEF
....................          
....................       }
013F0:  MOVFF  CB7,03
013F4:  MOVF   xB6,W
013F6:  INCF   xB6,F
013F8:  BTFSC  FD8.2
013FA:  INCF   xB7,F
013FC:  INCF   xB8,F
013FE:  BTFSC  FD8.2
01400:  INCF   xB9,F
01402:  BRA    138E
....................    }
....................    
....................    i++;
01404:  INCF   xB6,F
01406:  BTFSC  FD8.2
01408:  INCF   xB7,F
....................    j=0;
0140A:  CLRF   xB9
0140C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0140E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01410:  MOVLW  5D
01412:  ADDWF  xB6,W
01414:  MOVWF  xBE
01416:  MOVLW  00
01418:  ADDWFC xB7,W
0141A:  MOVWF  xBF
0141C:  MOVFF  FF2,CC0
01420:  BCF    FF2.7
01422:  MOVFF  CBF,FAA
01426:  MOVFF  CBE,FA9
0142A:  BCF    FA6.6
0142C:  BCF    FA6.7
0142E:  BSF    FA6.0
01430:  MOVF   FA8,W
01432:  BTFSC  xC0.7
01434:  BSF    FF2.7
01436:  CLRF   xBD
01438:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
0143A:  MOVF   xBC,W
0143C:  SUBLW  0D
0143E:  BNZ   1444
01440:  MOVF   xBD,F
01442:  BZ    144E
01444:  MOVF   xB9,F
01446:  BNZ   144E
01448:  MOVF   xB8,W
0144A:  SUBLW  1E
0144C:  BC    1460
....................       {
....................          SMS_Massage3[j] = '\0' ; // end string
0144E:  MOVLW  DC
01450:  ADDWF  xB8,W
01452:  MOVWF  FE9
01454:  MOVLW  09
01456:  ADDWFC xB9,W
01458:  MOVWF  FEA
0145A:  CLRF   FEF
....................          break;
0145C:  BRA    1484
....................       }
0145E:  BRA    1470
....................       else
....................       {
....................          SMS_Massage3[j] = buff;
01460:  MOVLW  DC
01462:  ADDWF  xB8,W
01464:  MOVWF  FE9
01466:  MOVLW  09
01468:  ADDWFC xB9,W
0146A:  MOVWF  FEA
0146C:  MOVFF  CBC,FEF
....................          
....................       }
01470:  MOVFF  CB7,03
01474:  MOVF   xB6,W
01476:  INCF   xB6,F
01478:  BTFSC  FD8.2
0147A:  INCF   xB7,F
0147C:  INCF   xB8,F
0147E:  BTFSC  FD8.2
01480:  INCF   xB9,F
01482:  BRA    140E
....................    }
....................    
....................    i++;
01484:  INCF   xB6,F
01486:  BTFSC  FD8.2
01488:  INCF   xB7,F
....................    j=0;
0148A:  CLRF   xB9
0148C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0148E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01490:  MOVLW  5D
01492:  ADDWF  xB6,W
01494:  MOVWF  xBE
01496:  MOVLW  00
01498:  ADDWFC xB7,W
0149A:  MOVWF  xBF
0149C:  MOVFF  FF2,CC0
014A0:  BCF    FF2.7
014A2:  MOVFF  CBF,FAA
014A6:  MOVFF  CBE,FA9
014AA:  BCF    FA6.6
014AC:  BCF    FA6.7
014AE:  BSF    FA6.0
014B0:  MOVF   FA8,W
014B2:  BTFSC  xC0.7
014B4:  BSF    FF2.7
014B6:  CLRF   xBD
014B8:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
014BA:  MOVF   xBC,W
014BC:  SUBLW  0D
014BE:  BNZ   14C4
014C0:  MOVF   xBD,F
014C2:  BZ    14CE
014C4:  MOVF   xB9,F
014C6:  BNZ   14CE
014C8:  MOVF   xB8,W
014CA:  SUBLW  1E
014CC:  BC    14E0
....................       {
....................          SMS_Massage4[j] = '\0' ; // end string
014CE:  MOVLW  FC
014D0:  ADDWF  xB8,W
014D2:  MOVWF  FE9
014D4:  MOVLW  09
014D6:  ADDWFC xB9,W
014D8:  MOVWF  FEA
014DA:  CLRF   FEF
....................          break;
014DC:  BRA    1504
....................       }
014DE:  BRA    14F0
....................       else
....................       {
....................          SMS_Massage4[j] = buff;
014E0:  MOVLW  FC
014E2:  ADDWF  xB8,W
014E4:  MOVWF  FE9
014E6:  MOVLW  09
014E8:  ADDWFC xB9,W
014EA:  MOVWF  FEA
014EC:  MOVFF  CBC,FEF
....................          
....................       }
014F0:  MOVFF  CB7,03
014F4:  MOVF   xB6,W
014F6:  INCF   xB6,F
014F8:  BTFSC  FD8.2
014FA:  INCF   xB7,F
014FC:  INCF   xB8,F
014FE:  BTFSC  FD8.2
01500:  INCF   xB9,F
01502:  BRA    148E
....................    }
....................    
....................    i++;
01504:  INCF   xB6,F
01506:  BTFSC  FD8.2
01508:  INCF   xB7,F
....................    j=0;
0150A:  CLRF   xB9
0150C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0150E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01510:  MOVLW  5D
01512:  ADDWF  xB6,W
01514:  MOVWF  xBE
01516:  MOVLW  00
01518:  ADDWFC xB7,W
0151A:  MOVWF  xBF
0151C:  MOVFF  FF2,CC0
01520:  BCF    FF2.7
01522:  MOVFF  CBF,FAA
01526:  MOVFF  CBE,FA9
0152A:  BCF    FA6.6
0152C:  BCF    FA6.7
0152E:  BSF    FA6.0
01530:  MOVF   FA8,W
01532:  BTFSC  xC0.7
01534:  BSF    FF2.7
01536:  CLRF   xBD
01538:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
0153A:  MOVF   xBC,W
0153C:  SUBLW  0D
0153E:  BNZ   1544
01540:  MOVF   xBD,F
01542:  BZ    154E
01544:  MOVF   xB9,F
01546:  BNZ   154E
01548:  MOVF   xB8,W
0154A:  SUBLW  1E
0154C:  BC    1560
....................       {
....................          SMS_Massage5[j] = '\0' ; // end string
0154E:  MOVLW  1C
01550:  ADDWF  xB8,W
01552:  MOVWF  FE9
01554:  MOVLW  0A
01556:  ADDWFC xB9,W
01558:  MOVWF  FEA
0155A:  CLRF   FEF
....................          break;
0155C:  BRA    1584
....................       }
0155E:  BRA    1570
....................       else
....................       {
....................          SMS_Massage5[j] = buff;
01560:  MOVLW  1C
01562:  ADDWF  xB8,W
01564:  MOVWF  FE9
01566:  MOVLW  0A
01568:  ADDWFC xB9,W
0156A:  MOVWF  FEA
0156C:  MOVFF  CBC,FEF
....................          
....................       }
01570:  MOVFF  CB7,03
01574:  MOVF   xB6,W
01576:  INCF   xB6,F
01578:  BTFSC  FD8.2
0157A:  INCF   xB7,F
0157C:  INCF   xB8,F
0157E:  BTFSC  FD8.2
01580:  INCF   xB9,F
01582:  BRA    150E
....................    }
....................    
....................    i++;
01584:  INCF   xB6,F
01586:  BTFSC  FD8.2
01588:  INCF   xB7,F
....................    j=0;
0158A:  CLRF   xB9
0158C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0158E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01590:  MOVLW  5D
01592:  ADDWF  xB6,W
01594:  MOVWF  xBE
01596:  MOVLW  00
01598:  ADDWFC xB7,W
0159A:  MOVWF  xBF
0159C:  MOVFF  FF2,CC0
015A0:  BCF    FF2.7
015A2:  MOVFF  CBF,FAA
015A6:  MOVFF  CBE,FA9
015AA:  BCF    FA6.6
015AC:  BCF    FA6.7
015AE:  BSF    FA6.0
015B0:  MOVF   FA8,W
015B2:  BTFSC  xC0.7
015B4:  BSF    FF2.7
015B6:  CLRF   xBD
015B8:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
015BA:  MOVF   xBC,W
015BC:  SUBLW  0D
015BE:  BNZ   15C4
015C0:  MOVF   xBD,F
015C2:  BZ    15CE
015C4:  MOVF   xB9,F
015C6:  BNZ   15CE
015C8:  MOVF   xB8,W
015CA:  SUBLW  1E
015CC:  BC    15E0
....................       {
....................          SMS_Massage6[j] = '\0' ; // end string
015CE:  MOVLW  3C
015D0:  ADDWF  xB8,W
015D2:  MOVWF  FE9
015D4:  MOVLW  0A
015D6:  ADDWFC xB9,W
015D8:  MOVWF  FEA
015DA:  CLRF   FEF
....................          break;
015DC:  BRA    1604
....................       }
015DE:  BRA    15F0
....................       else
....................       {
....................          SMS_Massage6[j] = buff;
015E0:  MOVLW  3C
015E2:  ADDWF  xB8,W
015E4:  MOVWF  FE9
015E6:  MOVLW  0A
015E8:  ADDWFC xB9,W
015EA:  MOVWF  FEA
015EC:  MOVFF  CBC,FEF
....................          
....................       }
015F0:  MOVFF  CB7,03
015F4:  MOVF   xB6,W
015F6:  INCF   xB6,F
015F8:  BTFSC  FD8.2
015FA:  INCF   xB7,F
015FC:  INCF   xB8,F
015FE:  BTFSC  FD8.2
01600:  INCF   xB9,F
01602:  BRA    158E
....................    }
....................    
....................    i++;
01604:  INCF   xB6,F
01606:  BTFSC  FD8.2
01608:  INCF   xB7,F
....................    j=0;
0160A:  CLRF   xB9
0160C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0160E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01610:  MOVLW  5D
01612:  ADDWF  xB6,W
01614:  MOVWF  xBE
01616:  MOVLW  00
01618:  ADDWFC xB7,W
0161A:  MOVWF  xBF
0161C:  MOVFF  FF2,CC0
01620:  BCF    FF2.7
01622:  MOVFF  CBF,FAA
01626:  MOVFF  CBE,FA9
0162A:  BCF    FA6.6
0162C:  BCF    FA6.7
0162E:  BSF    FA6.0
01630:  MOVF   FA8,W
01632:  BTFSC  xC0.7
01634:  BSF    FF2.7
01636:  CLRF   xBD
01638:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
0163A:  MOVF   xBC,W
0163C:  SUBLW  0D
0163E:  BNZ   1644
01640:  MOVF   xBD,F
01642:  BZ    164E
01644:  MOVF   xB9,F
01646:  BNZ   164E
01648:  MOVF   xB8,W
0164A:  SUBLW  1E
0164C:  BC    1660
....................       {
....................          SMS_Massage7[j] = '\0' ; // end string
0164E:  MOVLW  5C
01650:  ADDWF  xB8,W
01652:  MOVWF  FE9
01654:  MOVLW  0A
01656:  ADDWFC xB9,W
01658:  MOVWF  FEA
0165A:  CLRF   FEF
....................          break;
0165C:  BRA    1684
....................       }
0165E:  BRA    1670
....................       else
....................       {
....................          SMS_Massage7[j] = buff;
01660:  MOVLW  5C
01662:  ADDWF  xB8,W
01664:  MOVWF  FE9
01666:  MOVLW  0A
01668:  ADDWFC xB9,W
0166A:  MOVWF  FEA
0166C:  MOVFF  CBC,FEF
....................          
....................       }
01670:  MOVFF  CB7,03
01674:  MOVF   xB6,W
01676:  INCF   xB6,F
01678:  BTFSC  FD8.2
0167A:  INCF   xB7,F
0167C:  INCF   xB8,F
0167E:  BTFSC  FD8.2
01680:  INCF   xB9,F
01682:  BRA    160E
....................    }
....................    
....................    i++;
01684:  INCF   xB6,F
01686:  BTFSC  FD8.2
01688:  INCF   xB7,F
....................    j=0;
0168A:  CLRF   xB9
0168C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0168E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01690:  MOVLW  5D
01692:  ADDWF  xB6,W
01694:  MOVWF  xBE
01696:  MOVLW  00
01698:  ADDWFC xB7,W
0169A:  MOVWF  xBF
0169C:  MOVFF  FF2,CC0
016A0:  BCF    FF2.7
016A2:  MOVFF  CBF,FAA
016A6:  MOVFF  CBE,FA9
016AA:  BCF    FA6.6
016AC:  BCF    FA6.7
016AE:  BSF    FA6.0
016B0:  MOVF   FA8,W
016B2:  BTFSC  xC0.7
016B4:  BSF    FF2.7
016B6:  CLRF   xBD
016B8:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
016BA:  MOVF   xBC,W
016BC:  SUBLW  0D
016BE:  BNZ   16C4
016C0:  MOVF   xBD,F
016C2:  BZ    16CE
016C4:  MOVF   xB9,F
016C6:  BNZ   16CE
016C8:  MOVF   xB8,W
016CA:  SUBLW  1E
016CC:  BC    16E0
....................       {
....................          SMS_Massage8[j] = '\0' ; // end string
016CE:  MOVLW  7C
016D0:  ADDWF  xB8,W
016D2:  MOVWF  FE9
016D4:  MOVLW  0A
016D6:  ADDWFC xB9,W
016D8:  MOVWF  FEA
016DA:  CLRF   FEF
....................          break;
016DC:  BRA    1704
....................       }
016DE:  BRA    16F0
....................       else
....................       {
....................          SMS_Massage8[j] = buff;
016E0:  MOVLW  7C
016E2:  ADDWF  xB8,W
016E4:  MOVWF  FE9
016E6:  MOVLW  0A
016E8:  ADDWFC xB9,W
016EA:  MOVWF  FEA
016EC:  MOVFF  CBC,FEF
....................          
....................       }
016F0:  MOVFF  CB7,03
016F4:  MOVF   xB6,W
016F6:  INCF   xB6,F
016F8:  BTFSC  FD8.2
016FA:  INCF   xB7,F
016FC:  INCF   xB8,F
016FE:  BTFSC  FD8.2
01700:  INCF   xB9,F
01702:  BRA    168E
....................    }
....................    
....................    i++;
01704:  INCF   xB6,F
01706:  BTFSC  FD8.2
01708:  INCF   xB7,F
....................    j=0;
0170A:  CLRF   xB9
0170C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0170E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01710:  MOVLW  5D
01712:  ADDWF  xB6,W
01714:  MOVWF  xBE
01716:  MOVLW  00
01718:  ADDWFC xB7,W
0171A:  MOVWF  xBF
0171C:  MOVFF  FF2,CC0
01720:  BCF    FF2.7
01722:  MOVFF  CBF,FAA
01726:  MOVFF  CBE,FA9
0172A:  BCF    FA6.6
0172C:  BCF    FA6.7
0172E:  BSF    FA6.0
01730:  MOVF   FA8,W
01732:  BTFSC  xC0.7
01734:  BSF    FF2.7
01736:  CLRF   xBD
01738:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
0173A:  MOVF   xBC,W
0173C:  SUBLW  0D
0173E:  BNZ   1744
01740:  MOVF   xBD,F
01742:  BZ    174E
01744:  MOVF   xB9,F
01746:  BNZ   174E
01748:  MOVF   xB8,W
0174A:  SUBLW  1E
0174C:  BC    1760
....................       {
....................          SMS_Massage9[j] = '\0' ; // end string
0174E:  MOVLW  9C
01750:  ADDWF  xB8,W
01752:  MOVWF  FE9
01754:  MOVLW  0A
01756:  ADDWFC xB9,W
01758:  MOVWF  FEA
0175A:  CLRF   FEF
....................          break;
0175C:  BRA    1784
....................       }
0175E:  BRA    1770
....................       else
....................       {
....................          SMS_Massage9[j] = buff;
01760:  MOVLW  9C
01762:  ADDWF  xB8,W
01764:  MOVWF  FE9
01766:  MOVLW  0A
01768:  ADDWFC xB9,W
0176A:  MOVWF  FEA
0176C:  MOVFF  CBC,FEF
....................          
....................       }
01770:  MOVFF  CB7,03
01774:  MOVF   xB6,W
01776:  INCF   xB6,F
01778:  BTFSC  FD8.2
0177A:  INCF   xB7,F
0177C:  INCF   xB8,F
0177E:  BTFSC  FD8.2
01780:  INCF   xB9,F
01782:  BRA    170E
....................    }
....................    
....................    i++;
01784:  INCF   xB6,F
01786:  BTFSC  FD8.2
01788:  INCF   xB7,F
....................    j=0;
0178A:  CLRF   xB9
0178C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0178E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01790:  MOVLW  5D
01792:  ADDWF  xB6,W
01794:  MOVWF  xBE
01796:  MOVLW  00
01798:  ADDWFC xB7,W
0179A:  MOVWF  xBF
0179C:  MOVFF  FF2,CC0
017A0:  BCF    FF2.7
017A2:  MOVFF  CBF,FAA
017A6:  MOVFF  CBE,FA9
017AA:  BCF    FA6.6
017AC:  BCF    FA6.7
017AE:  BSF    FA6.0
017B0:  MOVF   FA8,W
017B2:  BTFSC  xC0.7
017B4:  BSF    FF2.7
017B6:  CLRF   xBD
017B8:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
017BA:  MOVF   xBC,W
017BC:  SUBLW  0D
017BE:  BNZ   17C4
017C0:  MOVF   xBD,F
017C2:  BZ    17CE
017C4:  MOVF   xB9,F
017C6:  BNZ   17CE
017C8:  MOVF   xB8,W
017CA:  SUBLW  1E
017CC:  BC    17E0
....................       {
....................          SMS_Massage10[j] = '\0' ; // end string
017CE:  MOVLW  BC
017D0:  ADDWF  xB8,W
017D2:  MOVWF  FE9
017D4:  MOVLW  0A
017D6:  ADDWFC xB9,W
017D8:  MOVWF  FEA
017DA:  CLRF   FEF
....................          break;
017DC:  BRA    1804
....................       }
017DE:  BRA    17F0
....................       else
....................       {
....................          SMS_Massage10[j] = buff;
017E0:  MOVLW  BC
017E2:  ADDWF  xB8,W
017E4:  MOVWF  FE9
017E6:  MOVLW  0A
017E8:  ADDWFC xB9,W
017EA:  MOVWF  FEA
017EC:  MOVFF  CBC,FEF
....................          
....................       }
017F0:  MOVFF  CB7,03
017F4:  MOVF   xB6,W
017F6:  INCF   xB6,F
017F8:  BTFSC  FD8.2
017FA:  INCF   xB7,F
017FC:  INCF   xB8,F
017FE:  BTFSC  FD8.2
01800:  INCF   xB9,F
01802:  BRA    178E
....................    }
....................       
....................    i++;
01804:  INCF   xB6,F
01806:  BTFSC  FD8.2
01808:  INCF   xB7,F
....................    j=0;
0180A:  CLRF   xB9
0180C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0180E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01810:  MOVLW  5D
01812:  ADDWF  xB6,W
01814:  MOVWF  xBE
01816:  MOVLW  00
01818:  ADDWFC xB7,W
0181A:  MOVWF  xBF
0181C:  MOVFF  FF2,CC0
01820:  BCF    FF2.7
01822:  MOVFF  CBF,FAA
01826:  MOVFF  CBE,FA9
0182A:  BCF    FA6.6
0182C:  BCF    FA6.7
0182E:  BSF    FA6.0
01830:  MOVF   FA8,W
01832:  BTFSC  xC0.7
01834:  BSF    FF2.7
01836:  CLRF   xBD
01838:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
0183A:  MOVF   xBC,W
0183C:  SUBLW  0D
0183E:  BNZ   1844
01840:  MOVF   xBD,F
01842:  BZ    184E
01844:  MOVF   xB9,F
01846:  BNZ   184E
01848:  MOVF   xB8,W
0184A:  SUBLW  1E
0184C:  BC    1860
....................       {
....................          SMS_Massage11[j] = '\0' ; // end string
0184E:  MOVLW  DC
01850:  ADDWF  xB8,W
01852:  MOVWF  FE9
01854:  MOVLW  0A
01856:  ADDWFC xB9,W
01858:  MOVWF  FEA
0185A:  CLRF   FEF
....................          break;
0185C:  BRA    1884
....................       }
0185E:  BRA    1870
....................       else
....................       {
....................          SMS_Massage11[j] = buff;
01860:  MOVLW  DC
01862:  ADDWF  xB8,W
01864:  MOVWF  FE9
01866:  MOVLW  0A
01868:  ADDWFC xB9,W
0186A:  MOVWF  FEA
0186C:  MOVFF  CBC,FEF
....................          
....................       }
01870:  MOVFF  CB7,03
01874:  MOVF   xB6,W
01876:  INCF   xB6,F
01878:  BTFSC  FD8.2
0187A:  INCF   xB7,F
0187C:  INCF   xB8,F
0187E:  BTFSC  FD8.2
01880:  INCF   xB9,F
01882:  BRA    180E
....................    }
....................       
....................    i++;
01884:  INCF   xB6,F
01886:  BTFSC  FD8.2
01888:  INCF   xB7,F
....................    j=0;
0188A:  CLRF   xB9
0188C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0188E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01890:  MOVLW  5D
01892:  ADDWF  xB6,W
01894:  MOVWF  xBE
01896:  MOVLW  00
01898:  ADDWFC xB7,W
0189A:  MOVWF  xBF
0189C:  MOVFF  FF2,CC0
018A0:  BCF    FF2.7
018A2:  MOVFF  CBF,FAA
018A6:  MOVFF  CBE,FA9
018AA:  BCF    FA6.6
018AC:  BCF    FA6.7
018AE:  BSF    FA6.0
018B0:  MOVF   FA8,W
018B2:  BTFSC  xC0.7
018B4:  BSF    FF2.7
018B6:  CLRF   xBD
018B8:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
018BA:  MOVF   xBC,W
018BC:  SUBLW  0D
018BE:  BNZ   18C4
018C0:  MOVF   xBD,F
018C2:  BZ    18CE
018C4:  MOVF   xB9,F
018C6:  BNZ   18CE
018C8:  MOVF   xB8,W
018CA:  SUBLW  1E
018CC:  BC    18E0
....................       {
....................          SMS_Massage12[j] = '\0' ; // end string
018CE:  MOVLW  FC
018D0:  ADDWF  xB8,W
018D2:  MOVWF  FE9
018D4:  MOVLW  0A
018D6:  ADDWFC xB9,W
018D8:  MOVWF  FEA
018DA:  CLRF   FEF
....................          break;
018DC:  BRA    1904
....................       }
018DE:  BRA    18F0
....................       else
....................       {
....................          SMS_Massage12[j] = buff;
018E0:  MOVLW  FC
018E2:  ADDWF  xB8,W
018E4:  MOVWF  FE9
018E6:  MOVLW  0A
018E8:  ADDWFC xB9,W
018EA:  MOVWF  FEA
018EC:  MOVFF  CBC,FEF
....................          
....................       }
018F0:  MOVFF  CB7,03
018F4:  MOVF   xB6,W
018F6:  INCF   xB6,F
018F8:  BTFSC  FD8.2
018FA:  INCF   xB7,F
018FC:  INCF   xB8,F
018FE:  BTFSC  FD8.2
01900:  INCF   xB9,F
01902:  BRA    188E
....................    }
....................       
....................    i++;
01904:  INCF   xB6,F
01906:  BTFSC  FD8.2
01908:  INCF   xB7,F
....................    j=0;
0190A:  CLRF   xB9
0190C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0190E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01910:  MOVLW  5D
01912:  ADDWF  xB6,W
01914:  MOVWF  xBE
01916:  MOVLW  00
01918:  ADDWFC xB7,W
0191A:  MOVWF  xBF
0191C:  MOVFF  FF2,CC0
01920:  BCF    FF2.7
01922:  MOVFF  CBF,FAA
01926:  MOVFF  CBE,FA9
0192A:  BCF    FA6.6
0192C:  BCF    FA6.7
0192E:  BSF    FA6.0
01930:  MOVF   FA8,W
01932:  BTFSC  xC0.7
01934:  BSF    FF2.7
01936:  CLRF   xBD
01938:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
0193A:  MOVF   xBC,W
0193C:  SUBLW  0D
0193E:  BNZ   1944
01940:  MOVF   xBD,F
01942:  BZ    194E
01944:  MOVF   xB9,F
01946:  BNZ   194E
01948:  MOVF   xB8,W
0194A:  SUBLW  1E
0194C:  BC    1960
....................       {
....................          SMS_Massage13[j] = '\0' ; // end string
0194E:  MOVLW  1C
01950:  ADDWF  xB8,W
01952:  MOVWF  FE9
01954:  MOVLW  0B
01956:  ADDWFC xB9,W
01958:  MOVWF  FEA
0195A:  CLRF   FEF
....................          break;
0195C:  BRA    1984
....................       }
0195E:  BRA    1970
....................       else
....................       {
....................          SMS_Massage13[j] = buff;
01960:  MOVLW  1C
01962:  ADDWF  xB8,W
01964:  MOVWF  FE9
01966:  MOVLW  0B
01968:  ADDWFC xB9,W
0196A:  MOVWF  FEA
0196C:  MOVFF  CBC,FEF
....................          
....................       }
01970:  MOVFF  CB7,03
01974:  MOVF   xB6,W
01976:  INCF   xB6,F
01978:  BTFSC  FD8.2
0197A:  INCF   xB7,F
0197C:  INCF   xB8,F
0197E:  BTFSC  FD8.2
01980:  INCF   xB9,F
01982:  BRA    190E
....................    }
....................       
....................    i++;
01984:  INCF   xB6,F
01986:  BTFSC  FD8.2
01988:  INCF   xB7,F
....................    j=0;
0198A:  CLRF   xB9
0198C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0198E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01990:  MOVLW  5D
01992:  ADDWF  xB6,W
01994:  MOVWF  xBE
01996:  MOVLW  00
01998:  ADDWFC xB7,W
0199A:  MOVWF  xBF
0199C:  MOVFF  FF2,CC0
019A0:  BCF    FF2.7
019A2:  MOVFF  CBF,FAA
019A6:  MOVFF  CBE,FA9
019AA:  BCF    FA6.6
019AC:  BCF    FA6.7
019AE:  BSF    FA6.0
019B0:  MOVF   FA8,W
019B2:  BTFSC  xC0.7
019B4:  BSF    FF2.7
019B6:  CLRF   xBD
019B8:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
019BA:  MOVF   xBC,W
019BC:  SUBLW  0D
019BE:  BNZ   19C4
019C0:  MOVF   xBD,F
019C2:  BZ    19CE
019C4:  MOVF   xB9,F
019C6:  BNZ   19CE
019C8:  MOVF   xB8,W
019CA:  SUBLW  1E
019CC:  BC    19E0
....................       {
....................          SMS_Massage14[j] = '\0' ; // end string
019CE:  MOVLW  3C
019D0:  ADDWF  xB8,W
019D2:  MOVWF  FE9
019D4:  MOVLW  0B
019D6:  ADDWFC xB9,W
019D8:  MOVWF  FEA
019DA:  CLRF   FEF
....................          break;
019DC:  BRA    1A04
....................       }
019DE:  BRA    19F0
....................       else
....................       {
....................          SMS_Massage14[j] = buff;
019E0:  MOVLW  3C
019E2:  ADDWF  xB8,W
019E4:  MOVWF  FE9
019E6:  MOVLW  0B
019E8:  ADDWFC xB9,W
019EA:  MOVWF  FEA
019EC:  MOVFF  CBC,FEF
....................          
....................       }
019F0:  MOVFF  CB7,03
019F4:  MOVF   xB6,W
019F6:  INCF   xB6,F
019F8:  BTFSC  FD8.2
019FA:  INCF   xB7,F
019FC:  INCF   xB8,F
019FE:  BTFSC  FD8.2
01A00:  INCF   xB9,F
01A02:  BRA    198E
....................    }
....................       
....................    i++;
01A04:  INCF   xB6,F
01A06:  BTFSC  FD8.2
01A08:  INCF   xB7,F
....................    j=0;
01A0A:  CLRF   xB9
01A0C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01A0E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01A10:  MOVLW  5D
01A12:  ADDWF  xB6,W
01A14:  MOVWF  xBE
01A16:  MOVLW  00
01A18:  ADDWFC xB7,W
01A1A:  MOVWF  xBF
01A1C:  MOVFF  FF2,CC0
01A20:  BCF    FF2.7
01A22:  MOVFF  CBF,FAA
01A26:  MOVFF  CBE,FA9
01A2A:  BCF    FA6.6
01A2C:  BCF    FA6.7
01A2E:  BSF    FA6.0
01A30:  MOVF   FA8,W
01A32:  BTFSC  xC0.7
01A34:  BSF    FF2.7
01A36:  CLRF   xBD
01A38:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
01A3A:  MOVF   xBC,W
01A3C:  SUBLW  0D
01A3E:  BNZ   1A44
01A40:  MOVF   xBD,F
01A42:  BZ    1A4E
01A44:  MOVF   xB9,F
01A46:  BNZ   1A4E
01A48:  MOVF   xB8,W
01A4A:  SUBLW  1E
01A4C:  BC    1A60
....................       {
....................          SMS_Massage15[j] = '\0' ; // end string
01A4E:  MOVLW  5C
01A50:  ADDWF  xB8,W
01A52:  MOVWF  FE9
01A54:  MOVLW  0B
01A56:  ADDWFC xB9,W
01A58:  MOVWF  FEA
01A5A:  CLRF   FEF
....................          break;
01A5C:  BRA    1A84
....................       }
01A5E:  BRA    1A70
....................       else
....................       {
....................          SMS_Massage15[j] = buff;
01A60:  MOVLW  5C
01A62:  ADDWF  xB8,W
01A64:  MOVWF  FE9
01A66:  MOVLW  0B
01A68:  ADDWFC xB9,W
01A6A:  MOVWF  FEA
01A6C:  MOVFF  CBC,FEF
....................          
....................       }
01A70:  MOVFF  CB7,03
01A74:  MOVF   xB6,W
01A76:  INCF   xB6,F
01A78:  BTFSC  FD8.2
01A7A:  INCF   xB7,F
01A7C:  INCF   xB8,F
01A7E:  BTFSC  FD8.2
01A80:  INCF   xB9,F
01A82:  BRA    1A0E
....................    }
....................       
....................    i++;
01A84:  INCF   xB6,F
01A86:  BTFSC  FD8.2
01A88:  INCF   xB7,F
....................    j=0;
01A8A:  CLRF   xB9
01A8C:  CLRF   xB8
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01A8E:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01A90:  MOVLW  5D
01A92:  ADDWF  xB6,W
01A94:  MOVWF  xBE
01A96:  MOVLW  00
01A98:  ADDWFC xB7,W
01A9A:  MOVWF  xBF
01A9C:  MOVFF  FF2,CC0
01AA0:  BCF    FF2.7
01AA2:  MOVFF  CBF,FAA
01AA6:  MOVFF  CBE,FA9
01AAA:  BCF    FA6.6
01AAC:  BCF    FA6.7
01AAE:  BSF    FA6.0
01AB0:  MOVF   FA8,W
01AB2:  BTFSC  xC0.7
01AB4:  BSF    FF2.7
01AB6:  CLRF   xBD
01AB8:  MOVWF  xBC
....................       
....................       if((buff == 0x0D) || (j>30))
01ABA:  MOVF   xBC,W
01ABC:  SUBLW  0D
01ABE:  BNZ   1AC4
01AC0:  MOVF   xBD,F
01AC2:  BZ    1ACE
01AC4:  MOVF   xB9,F
01AC6:  BNZ   1ACE
01AC8:  MOVF   xB8,W
01ACA:  SUBLW  1E
01ACC:  BC    1AE0
....................       {
....................          SMS_Massage16[j] = '\0' ; // end string
01ACE:  MOVLW  7C
01AD0:  ADDWF  xB8,W
01AD2:  MOVWF  FE9
01AD4:  MOVLW  0B
01AD6:  ADDWFC xB9,W
01AD8:  MOVWF  FEA
01ADA:  CLRF   FEF
....................          break;
01ADC:  BRA    1B04
....................       }
01ADE:  BRA    1AF0
....................       else
....................       {
....................          SMS_Massage16[j] = buff;
01AE0:  MOVLW  7C
01AE2:  ADDWF  xB8,W
01AE4:  MOVWF  FE9
01AE6:  MOVLW  0B
01AE8:  ADDWFC xB9,W
01AEA:  MOVWF  FEA
01AEC:  MOVFF  CBC,FEF
....................          
....................       }
01AF0:  MOVFF  CB7,03
01AF4:  MOVF   xB6,W
01AF6:  INCF   xB6,F
01AF8:  BTFSC  FD8.2
01AFA:  INCF   xB7,F
01AFC:  INCF   xB8,F
01AFE:  BTFSC  FD8.2
01B00:  INCF   xB9,F
01B02:  BRA    1A8E
....................    }
01B04:  MOVLB  0
01B06:  GOTO   8E9A (RETURN)
....................    
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
.................... 
....................    //Data = getc();
....................    //putc(Data);
....................    SBUF = getc();
*
0059A:  BTFSS  F9E.5
0059C:  BRA    059A
0059E:  MOVFF  FAE,30
....................    checkCommand();
005A2:  BRA    02EE
.................... }
.................... 
005A4:  BCF    F9E.5
005A6:  GOTO   006C
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
005AA:  INCF   1B,F
.................... 
....................    if(T_timeout != 0)
005AC:  MOVLB  9
005AE:  MOVF   x87,F
005B0:  BZ    05C0
....................    {
....................       T_timeout--;
005B2:  DECF   x87,F
....................       if(T_timeout == 0)
005B4:  MOVF   x87,F
005B6:  BNZ   05C0
....................       {
....................          //sequence = stop_sq;         //timeout
....................          sequence = end_sq;         //timeout   
005B8:  MOVFF  71,7A
....................          output_bit(P485ctrl,0);
005BC:  BCF    F8A.3
005BE:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
005C0:  MOVF   1E,F
005C2:  BZ    05EE
....................    {
....................       TimeBase1s--;
005C4:  DECF   1E,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
005C6:  MOVF   1E,F
005C8:  BNZ   05EE
....................       {
....................          if(AutoAckDelayTime != 0x00)
005CA:  MOVF   1F,F
005CC:  BZ    05D6
....................          {
....................             AutoAckDelayTime--;
005CE:  DECF   1F,F
....................             if(AutoAckDelayTime == 0x00)
005D0:  MOVF   1F,F
005D2:  BNZ   05D6
....................             {
....................                AutoAckFlag = 1 ;
005D4:  BSF    1C.2
....................             }
....................          }
....................          if(++send_SMS_count >=5){
005D6:  MOVLB  C
005D8:  INCF   x3F,F
005DA:  MOVF   x3F,W
005DC:  SUBLW  04
005DE:  BC    05E6
....................             send_SMS_count =0;
005E0:  CLRF   x3F
....................             send_SMS_period = 1;
005E2:  MOVLW  01
005E4:  MOVWF  x3E
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
005E6:  BSF    32.4
....................          TimeBase1s = 100;
005E8:  MOVLW  64
005EA:  MOVWF  1E
005EC:  MOVLB  9
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 50)    //500mS
005EE:  MOVF   1B,W
005F0:  SUBLW  32
005F2:  BNZ   061C
....................    {
....................       StatusTime = 0;
005F4:  CLRF   1B
....................       if(HearthbeatInd == 0)
005F6:  BTFSC  1C.0
005F8:  BRA    0602
....................       {
....................          HearthbeatInd = 1;
005FA:  BSF    1C.0
....................          output_bit(Pled,1);
005FC:  BSF    F8A.5
005FE:  BCF    F93.5
....................       }
00600:  BRA    0608
....................       else
....................       {
....................          HearthbeatInd = 0;
00602:  BCF    1C.0
....................          output_bit(Pled,0); 
00604:  BCF    F8A.5
00606:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................     if(Test == 1)            //Test function
00608:  BTFSS  1C.6
0060A:  BRA    061A
....................    {
....................        if(T_test > 0x00) T_test --;
0060C:  MOVF   31,F
0060E:  BZ    0612
00610:  DECF   31,F
....................        if(T_test == 0x00) Test_fault = 1;
00612:  MOVF   31,F
00614:  BNZ   0618
00616:  BSF    1C.5
....................     }
00618:  BRA    061C
....................     else
....................     {
....................        //Test = 0;
....................        T_test = 0x00;
0061A:  CLRF   31
....................     }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
0061C:  MOVF   1D,F
0061E:  BZ    0646
....................    {
....................       FlashingRateTime--;
00620:  DECF   1D,F
....................       if(FlashingRateTime == 0)
00622:  MOVF   1D,F
00624:  BNZ   063A
....................       {
....................          outmcp23 = 0xff;
00626:  SETF   x8A
....................          
....................          if(SyncStatus == 0)
00628:  BTFSC  32.1
0062A:  BRA    0636
....................          {
....................             if(FlashingFlag == 1)
0062C:  BTFSS  1C.1
0062E:  BRA    0634
....................             {
....................                FlashingFlag = 0;
00630:  BCF    1C.1
....................                //output_bit(PSyncS,0);
....................             }
00632:  BRA    0636
....................             else
....................             {
.................... 
....................                FlashingFlag = 1;
00634:  BSF    1C.1
....................                //output_bit(PSyncS,1);
....................             }
....................          }
....................          //FlashingFlag = ~FlashingFlag;
....................          FlashingRateTime = FlashingRate;      //reload value
00636:  MOVFF  6E,1D
....................       }
.................... 
....................       if(Synctimer != 0x00)
0063A:  MOVF   33,F
0063C:  BZ    0646
....................       {
....................          Synctimer--;
0063E:  DECF   33,F
....................          if(Synctimer == 0x00)
00640:  MOVF   33,F
00642:  BNZ   0646
....................          {
....................             SyncStatus = 0;
00644:  BCF    32.1
....................          }
....................       }
.................... 
....................    }
....................    
00646:  BCF    F9E.1
00648:  MOVLB  0
0064A:  GOTO   006C
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
064E8:  MOVLB  C
064EA:  BTFSS  x4C.0
064EC:  BRA    659E
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
064EE:  MOVLW  00
064F0:  BTFSC  x40.0
064F2:  MOVLW  01
064F4:  MOVWF  xB5
064F6:  MOVLW  00
064F8:  BTFSC  x44.0
064FA:  MOVLW  01
064FC:  XORWF  xB5,W
064FE:  SUBLW  01
06500:  BNZ   6506
06502:  BTFSC  x46.0
06504:  BRA    650A
06506:  BTFSS  x50.0
06508:  BRA    6596
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
0650A:  BTFSC  x4E.0
0650C:  BRA    6594
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0650E:  BTFSC  x50.0
06510:  BRA    652A
06512:  MOVLB  0
06514:  MOVF   x6C,W
06516:  SUBLW  0F
06518:  BTFSC  FD8.2
0651A:  BRA    6520
0651C:  MOVLB  C
0651E:  BRA    652A
....................             {
....................                TimeBase1s = 100 ;            //reload again
06520:  MOVLW  64
06522:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
06524:  MOVFF  6D,1F
06528:  MOVLB  C
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
0652A:  BSF    x50.0
....................             if(FlashingFlag == 0)
0652C:  BTFSC  1C.1
0652E:  BRA    6534
....................             {
....................                Output.B1 = 0;           //Flash output1
06530:  BCF    x42.0
....................             }
06532:  BRA    6536
....................             else
....................             {
....................                Output.B1 = 1;
06534:  BSF    x42.0
....................             }
.................... 
....................             if (~AutoTestFlag)
06536:  BTFSC  1C.4
06538:  BRA    6556
....................             {
....................                if(OutputBoth.B1 == 0)                  //Both output
0653A:  BTFSC  x4A.0
0653C:  BRA    6548
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0653E:  BSF    F89.4
06540:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06542:  BSF    F89.3
06544:  BCF    F92.3
....................                }
06546:  BRA    6556
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
06548:  BTFSS  x48.0
0654A:  BRA    6552
0654C:  BSF    F89.4
0654E:  BCF    F92.4
06550:  BRA    6556
....................                   else output_bit(Pbell,1);                          //Bell
06552:  BSF    F89.3
06554:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending 
....................             if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
06556:  BTFSC  x5C.0
06558:  BRA    6594
0655A:  BTFSC  32.3
0655C:  BRA    6594
0655E:  BTFSC  x4E.0
06560:  BRA    6594
....................             {            
....................                SendSMS.B1 =1;
06562:  BSF    x5C.0
....................                strcat(SMS_MassageSUM, SMS_Massage1);
06564:  MOVLW  0B
06566:  MOVWF  xB5
06568:  MOVLW  9C
0656A:  MOVWF  xB4
0656C:  MOVLW  09
0656E:  MOVWF  xB7
06570:  MOVLW  9C
06572:  MOVWF  xB6
06574:  MOVLB  0
06576:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
0657A:  MOVLW  0B
0657C:  MOVLB  C
0657E:  MOVWF  xB5
06580:  MOVLW  9C
06582:  MOVWF  xB4
06584:  MOVLW  0C
06586:  MOVWF  xB7
06588:  MOVLW  3C
0658A:  MOVWF  xB6
0658C:  MOVLB  0
0658E:  CALL   5CF6
06592:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage1);
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................         }
....................       }
06594:  BRA    659C
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
06596:  BTFSS  x46.0
06598:  BRA    659C
0659A:  BCF    x4E.0
....................    }
0659C:  BRA    65FA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
0659E:  MOVLW  00
065A0:  BTFSC  x40.0
065A2:  MOVLW  01
065A4:  MOVWF  xB5
065A6:  MOVLW  00
065A8:  BTFSC  x44.0
065AA:  MOVLW  01
065AC:  XORWF  xB5,W
065AE:  SUBLW  01
065B0:  BNZ   65F4
....................       {
....................          Output.B1 = 0;
065B2:  BCF    x42.0
....................          // SMS Sending 
....................          if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
065B4:  BTFSC  x5C.0
065B6:  BRA    65F2
065B8:  BTFSC  32.3
065BA:  BRA    65F2
065BC:  BTFSC  x4E.0
065BE:  BRA    65F2
....................          {
....................          
....................             SendSMS.B1 =1;
065C0:  BSF    x5C.0
....................                strcat(SMS_MassageSUM, SMS_Massage1);
065C2:  MOVLW  0B
065C4:  MOVWF  xB5
065C6:  MOVLW  9C
065C8:  MOVWF  xB4
065CA:  MOVLW  09
065CC:  MOVWF  xB7
065CE:  MOVLW  9C
065D0:  MOVWF  xB6
065D2:  MOVLB  0
065D4:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);  
065D8:  MOVLW  0B
065DA:  MOVLB  C
065DC:  MOVWF  xB5
065DE:  MOVLW  9C
065E0:  MOVWF  xB4
065E2:  MOVLW  0C
065E4:  MOVWF  xB7
065E6:  MOVLW  3C
065E8:  MOVWF  xB6
065EA:  MOVLB  0
065EC:  CALL   5CF6
065F0:  MOVLB  C
....................                /*          
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
.................... 
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            fprintf(CH2,SMS_Massage1);
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
065F2:  BRA    65FA
....................       else
....................       {
....................          Output.B1 = 1;
065F4:  BSF    x42.0
.................... 
....................          SendSMS.B1 =0;
065F6:  BCF    x5C.0
....................          functointest_f =0;
065F8:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
065FA:  BTFSS  x4C.1
065FC:  BRA    66AE
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
065FE:  MOVLW  00
06600:  BTFSC  x40.1
06602:  MOVLW  01
06604:  MOVWF  xB5
06606:  MOVLW  00
06608:  BTFSC  x44.1
0660A:  MOVLW  01
0660C:  XORWF  xB5,W
0660E:  SUBLW  01
06610:  BNZ   6616
06612:  BTFSC  x46.1
06614:  BRA    661A
06616:  BTFSS  x50.1
06618:  BRA    66A6
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
0661A:  BTFSC  x4E.1
0661C:  BRA    66A4
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0661E:  BTFSC  x50.1
06620:  BRA    663A
06622:  MOVLB  0
06624:  MOVF   x6C,W
06626:  SUBLW  0F
06628:  BTFSC  FD8.2
0662A:  BRA    6630
0662C:  MOVLB  C
0662E:  BRA    663A
....................             {
....................                TimeBase1s = 100 ;            //reload again
06630:  MOVLW  64
06632:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
06634:  MOVFF  6D,1F
06638:  MOVLB  C
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
0663A:  BSF    x50.1
....................             if(FlashingFlag == 0)
0663C:  BTFSC  1C.1
0663E:  BRA    6644
....................             {
....................                Output.B2 = 0;           //Flash output1
06640:  BCF    x42.1
....................             }
06642:  BRA    6646
....................             else
....................             {
....................                Output.B2 = 1;
06644:  BSF    x42.1
....................             }
.................... 
....................             if (~AutoTestFlag)
06646:  BTFSC  1C.4
06648:  BRA    6666
....................             {
....................                if(OutputBoth.B2 == 0)                  //Both output
0664A:  BTFSC  x4A.1
0664C:  BRA    6658
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0664E:  BSF    F89.4
06650:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06652:  BSF    F89.3
06654:  BCF    F92.3
....................                }
06656:  BRA    6666
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
06658:  BTFSS  x48.1
0665A:  BRA    6662
0665C:  BSF    F89.4
0665E:  BCF    F92.4
06660:  BRA    6666
....................                   else output_bit(Pbell,1);                          //Bell
06662:  BSF    F89.3
06664:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
06666:  BTFSC  x5C.1
06668:  BRA    66A4
0666A:  BTFSC  32.3
0666C:  BRA    66A4
0666E:  BTFSC  x4E.1
06670:  BRA    66A4
....................             {                
....................                SendSMS.B2 =1;
06672:  BSF    x5C.1
....................                strcat(SMS_MassageSUM, SMS_Massage2);
06674:  MOVLW  0B
06676:  MOVWF  xB5
06678:  MOVLW  9C
0667A:  MOVWF  xB4
0667C:  MOVLW  09
0667E:  MOVWF  xB7
06680:  MOVLW  BC
06682:  MOVWF  xB6
06684:  MOVLB  0
06686:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
0668A:  MOVLW  0B
0668C:  MOVLB  C
0668E:  MOVWF  xB5
06690:  MOVLW  9C
06692:  MOVWF  xB4
06694:  MOVLW  0C
06696:  MOVWF  xB7
06698:  MOVLW  3C
0669A:  MOVWF  xB6
0669C:  MOVLB  0
0669E:  CALL   5CF6
066A2:  MOVLB  C
....................                
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................                
....................               fprintf(CH2,SMS_Massage2);
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
066A4:  BRA    66AC
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
066A6:  BTFSS  x46.1
066A8:  BRA    66AC
066AA:  BCF    x4E.1
....................    }
066AC:  BRA    670A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
066AE:  MOVLW  00
066B0:  BTFSC  x40.1
066B2:  MOVLW  01
066B4:  MOVWF  xB5
066B6:  MOVLW  00
066B8:  BTFSC  x44.1
066BA:  MOVLW  01
066BC:  XORWF  xB5,W
066BE:  SUBLW  01
066C0:  BNZ   6704
....................       {
....................          Output.B2 = 0;
066C2:  BCF    x42.1
....................          // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
066C4:  BTFSC  x5C.1
066C6:  BRA    6702
066C8:  BTFSC  32.3
066CA:  BRA    6702
066CC:  BTFSC  x4E.1
066CE:  BRA    6702
....................             {                
....................                SendSMS.B2 =1;
066D0:  BSF    x5C.1
....................                strcat(SMS_MassageSUM, SMS_Massage2);
066D2:  MOVLW  0B
066D4:  MOVWF  xB5
066D6:  MOVLW  9C
066D8:  MOVWF  xB4
066DA:  MOVLW  09
066DC:  MOVWF  xB7
066DE:  MOVLW  BC
066E0:  MOVWF  xB6
066E2:  MOVLB  0
066E4:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
066E8:  MOVLW  0B
066EA:  MOVLB  C
066EC:  MOVWF  xB5
066EE:  MOVLW  9C
066F0:  MOVWF  xB4
066F2:  MOVLW  0C
066F4:  MOVWF  xB7
066F6:  MOVLW  3C
066F8:  MOVWF  xB6
066FA:  MOVLB  0
066FC:  CALL   5CF6
06700:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................                
....................               fprintf(CH2,SMS_Massage2);
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             } 
....................       }
06702:  BRA    670A
....................       else
....................       {
....................          Output.B2 = 1;
06704:  BSF    x42.1
....................          SendSMS.B2 =0;
06706:  BCF    x5C.1
....................          functointest_f =0;
06708:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
0670A:  BTFSS  x4C.2
0670C:  BRA    67BE
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
0670E:  MOVLW  00
06710:  BTFSC  x40.2
06712:  MOVLW  01
06714:  MOVWF  xB5
06716:  MOVLW  00
06718:  BTFSC  x44.2
0671A:  MOVLW  01
0671C:  XORWF  xB5,W
0671E:  SUBLW  01
06720:  BNZ   6726
06722:  BTFSC  x46.2
06724:  BRA    672A
06726:  BTFSS  x50.2
06728:  BRA    67B6
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
0672A:  BTFSC  x4E.2
0672C:  BRA    67B4
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0672E:  BTFSC  x50.2
06730:  BRA    674A
06732:  MOVLB  0
06734:  MOVF   x6C,W
06736:  SUBLW  0F
06738:  BTFSC  FD8.2
0673A:  BRA    6740
0673C:  MOVLB  C
0673E:  BRA    674A
....................             {
....................                TimeBase1s = 100 ;            //reload again
06740:  MOVLW  64
06742:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
06744:  MOVFF  6D,1F
06748:  MOVLB  C
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
0674A:  BSF    x50.2
....................             if(FlashingFlag == 0)
0674C:  BTFSC  1C.1
0674E:  BRA    6754
....................             {
....................                Output.B3 = 0;           //Flash output1
06750:  BCF    x42.2
....................             }
06752:  BRA    6756
....................             else
....................             {
....................                Output.B3 = 1;
06754:  BSF    x42.2
....................             }
.................... 
....................             if (~AutoTestFlag)
06756:  BTFSC  1C.4
06758:  BRA    6776
....................             {
....................                if(OutputBoth.B3 == 0)                  //Both output
0675A:  BTFSC  x4A.2
0675C:  BRA    6768
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0675E:  BSF    F89.4
06760:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06762:  BSF    F89.3
06764:  BCF    F92.3
....................                }
06766:  BRA    6776
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
06768:  BTFSS  x48.2
0676A:  BRA    6772
0676C:  BSF    F89.4
0676E:  BCF    F92.4
06770:  BRA    6776
....................                   else output_bit(Pbell,1);                          //Bell
06772:  BSF    F89.3
06774:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
06776:  BTFSC  x5C.2
06778:  BRA    67B4
0677A:  BTFSC  32.3
0677C:  BRA    67B4
0677E:  BTFSC  x4E.2
06780:  BRA    67B4
....................             {               
....................                SendSMS.B3 =1;
06782:  BSF    x5C.2
....................                strcat(SMS_MassageSUM, SMS_Massage3);
06784:  MOVLW  0B
06786:  MOVWF  xB5
06788:  MOVLW  9C
0678A:  MOVWF  xB4
0678C:  MOVLW  09
0678E:  MOVWF  xB7
06790:  MOVLW  DC
06792:  MOVWF  xB6
06794:  MOVLB  0
06796:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
0679A:  MOVLW  0B
0679C:  MOVLB  C
0679E:  MOVWF  xB5
067A0:  MOVLW  9C
067A2:  MOVWF  xB4
067A4:  MOVLW  0C
067A6:  MOVWF  xB7
067A8:  MOVLW  3C
067AA:  MOVWF  xB6
067AC:  MOVLB  0
067AE:  CALL   5CF6
067B2:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage3);
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
067B4:  BRA    67BC
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
067B6:  BTFSS  x46.2
067B8:  BRA    67BC
067BA:  BCF    x4E.2
....................    }
067BC:  BRA    681A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
067BE:  MOVLW  00
067C0:  BTFSC  x40.2
067C2:  MOVLW  01
067C4:  MOVWF  xB5
067C6:  MOVLW  00
067C8:  BTFSC  x44.2
067CA:  MOVLW  01
067CC:  XORWF  xB5,W
067CE:  SUBLW  01
067D0:  BNZ   6814
....................       {
....................          Output.B3 = 0;
067D2:  BCF    x42.2
....................          // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
067D4:  BTFSC  x5C.2
067D6:  BRA    6812
067D8:  BTFSC  32.3
067DA:  BRA    6812
067DC:  BTFSC  x4E.2
067DE:  BRA    6812
....................             {               
....................                SendSMS.B3 =1;
067E0:  BSF    x5C.2
....................                strcat(SMS_MassageSUM, SMS_Massage3);
067E2:  MOVLW  0B
067E4:  MOVWF  xB5
067E6:  MOVLW  9C
067E8:  MOVWF  xB4
067EA:  MOVLW  09
067EC:  MOVWF  xB7
067EE:  MOVLW  DC
067F0:  MOVWF  xB6
067F2:  MOVLB  0
067F4:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
067F8:  MOVLW  0B
067FA:  MOVLB  C
067FC:  MOVWF  xB5
067FE:  MOVLW  9C
06800:  MOVWF  xB4
06802:  MOVLW  0C
06804:  MOVWF  xB7
06806:  MOVLW  3C
06808:  MOVWF  xB6
0680A:  MOVLB  0
0680C:  CALL   5CF6
06810:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage3);
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................       }
06812:  BRA    681A
....................       else
....................       {
....................          Output.B3 = 1;
06814:  BSF    x42.2
....................          SendSMS.B3 =0;
06816:  BCF    x5C.2
....................          functointest_f =0;
06818:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
0681A:  BTFSS  x4C.3
0681C:  BRA    68CE
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
0681E:  MOVLW  00
06820:  BTFSC  x40.3
06822:  MOVLW  01
06824:  MOVWF  xB5
06826:  MOVLW  00
06828:  BTFSC  x44.3
0682A:  MOVLW  01
0682C:  XORWF  xB5,W
0682E:  SUBLW  01
06830:  BNZ   6836
06832:  BTFSC  x46.3
06834:  BRA    683A
06836:  BTFSS  x50.3
06838:  BRA    68C6
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
0683A:  BTFSC  x4E.3
0683C:  BRA    68C4
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0683E:  BTFSC  x50.3
06840:  BRA    685A
06842:  MOVLB  0
06844:  MOVF   x6C,W
06846:  SUBLW  0F
06848:  BTFSC  FD8.2
0684A:  BRA    6850
0684C:  MOVLB  C
0684E:  BRA    685A
....................             {
....................                TimeBase1s = 100 ;            //reload again
06850:  MOVLW  64
06852:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
06854:  MOVFF  6D,1F
06858:  MOVLB  C
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
0685A:  BSF    x50.3
....................             if(FlashingFlag == 0)
0685C:  BTFSC  1C.1
0685E:  BRA    6864
....................             {
....................                Output.B4 = 0;           //Flash output1
06860:  BCF    x42.3
....................             }
06862:  BRA    6866
....................             else
....................             {
....................                Output.B4 = 1;
06864:  BSF    x42.3
....................             }
.................... 
....................             if (~AutoTestFlag)
06866:  BTFSC  1C.4
06868:  BRA    6886
....................             {
....................                if(OutputBoth.B4 == 0)                  //Both output
0686A:  BTFSC  x4A.3
0686C:  BRA    6878
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0686E:  BSF    F89.4
06870:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06872:  BSF    F89.3
06874:  BCF    F92.3
....................                }
06876:  BRA    6886
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
06878:  BTFSS  x48.3
0687A:  BRA    6882
0687C:  BSF    F89.4
0687E:  BCF    F92.4
06880:  BRA    6886
....................                   else output_bit(Pbell,1);                          //Bell
06882:  BSF    F89.3
06884:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
06886:  BTFSC  x5C.3
06888:  BRA    68C4
0688A:  BTFSC  32.3
0688C:  BRA    68C4
0688E:  BTFSC  x4E.3
06890:  BRA    68C4
....................             {               
....................                SendSMS.B4 =1;
06892:  BSF    x5C.3
....................                strcat(SMS_MassageSUM, SMS_Massage4);
06894:  MOVLW  0B
06896:  MOVWF  xB5
06898:  MOVLW  9C
0689A:  MOVWF  xB4
0689C:  MOVLW  09
0689E:  MOVWF  xB7
068A0:  MOVLW  FC
068A2:  MOVWF  xB6
068A4:  MOVLB  0
068A6:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
068AA:  MOVLW  0B
068AC:  MOVLB  C
068AE:  MOVWF  xB5
068B0:  MOVLW  9C
068B2:  MOVWF  xB4
068B4:  MOVLW  0C
068B6:  MOVWF  xB7
068B8:  MOVLW  3C
068BA:  MOVWF  xB6
068BC:  MOVLB  0
068BE:  CALL   5CF6
068C2:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................             
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage4);
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
068C4:  BRA    68CC
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
068C6:  BTFSS  x46.3
068C8:  BRA    68CC
068CA:  BCF    x4E.3
....................    }
068CC:  BRA    692A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
068CE:  MOVLW  00
068D0:  BTFSC  x40.3
068D2:  MOVLW  01
068D4:  MOVWF  xB5
068D6:  MOVLW  00
068D8:  BTFSC  x44.3
068DA:  MOVLW  01
068DC:  XORWF  xB5,W
068DE:  SUBLW  01
068E0:  BNZ   6924
....................       {
....................          Output.B4 = 0;
068E2:  BCF    x42.3
....................          // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
068E4:  BTFSC  x5C.3
068E6:  BRA    6922
068E8:  BTFSC  32.3
068EA:  BRA    6922
068EC:  BTFSC  x4E.3
068EE:  BRA    6922
....................             {               
....................                SendSMS.B4 =1;
068F0:  BSF    x5C.3
....................                strcat(SMS_MassageSUM, SMS_Massage4);
068F2:  MOVLW  0B
068F4:  MOVWF  xB5
068F6:  MOVLW  9C
068F8:  MOVWF  xB4
068FA:  MOVLW  09
068FC:  MOVWF  xB7
068FE:  MOVLW  FC
06900:  MOVWF  xB6
06902:  MOVLB  0
06904:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
06908:  MOVLW  0B
0690A:  MOVLB  C
0690C:  MOVWF  xB5
0690E:  MOVLW  9C
06910:  MOVWF  xB4
06912:  MOVLW  0C
06914:  MOVWF  xB7
06916:  MOVLW  3C
06918:  MOVWF  xB6
0691A:  MOVLB  0
0691C:  CALL   5CF6
06920:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................             
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage4);
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             }
....................       }
06922:  BRA    692A
....................       else
....................       {
....................          Output.B4 = 1;
06924:  BSF    x42.3
....................          SendSMS.B4 =0;
06926:  BCF    x5C.3
....................          functointest_f =0;
06928:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
0692A:  BTFSS  x4C.4
0692C:  BRA    69DE
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
0692E:  MOVLW  00
06930:  BTFSC  x40.4
06932:  MOVLW  01
06934:  MOVWF  xB5
06936:  MOVLW  00
06938:  BTFSC  x44.4
0693A:  MOVLW  01
0693C:  XORWF  xB5,W
0693E:  SUBLW  01
06940:  BNZ   6946
06942:  BTFSC  x46.4
06944:  BRA    694A
06946:  BTFSS  x50.4
06948:  BRA    69D6
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
0694A:  BTFSC  x4E.4
0694C:  BRA    69D4
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0694E:  BTFSC  x50.4
06950:  BRA    696A
06952:  MOVLB  0
06954:  MOVF   x6C,W
06956:  SUBLW  0F
06958:  BTFSC  FD8.2
0695A:  BRA    6960
0695C:  MOVLB  C
0695E:  BRA    696A
....................             {
....................                TimeBase1s = 100 ;            //reload again
06960:  MOVLW  64
06962:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
06964:  MOVFF  6D,1F
06968:  MOVLB  C
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
0696A:  BSF    x50.4
....................             if(FlashingFlag == 0)
0696C:  BTFSC  1C.1
0696E:  BRA    6974
....................             {
....................                Output.B5 = 0;           //Flash output1
06970:  BCF    x42.4
....................             }
06972:  BRA    6976
....................             else
....................             {
....................                Output.B5 = 1;
06974:  BSF    x42.4
....................             }
.................... 
....................             if (~AutoTestFlag)
06976:  BTFSC  1C.4
06978:  BRA    6996
....................             {
....................                if(OutputBoth.B5 == 0)                  //Both output
0697A:  BTFSC  x4A.4
0697C:  BRA    6988
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0697E:  BSF    F89.4
06980:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06982:  BSF    F89.3
06984:  BCF    F92.3
....................                }
06986:  BRA    6996
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
06988:  BTFSS  x48.4
0698A:  BRA    6992
0698C:  BSF    F89.4
0698E:  BCF    F92.4
06990:  BRA    6996
....................                   else output_bit(Pbell,1);                          //Bell
06992:  BSF    F89.3
06994:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
06996:  BTFSC  x5C.4
06998:  BRA    69D4
0699A:  BTFSC  32.3
0699C:  BRA    69D4
0699E:  BTFSC  x4E.4
069A0:  BRA    69D4
....................             {               
....................                SendSMS.B5 =1;
069A2:  BSF    x5C.4
....................                strcat(SMS_MassageSUM, SMS_Massage5);
069A4:  MOVLW  0B
069A6:  MOVWF  xB5
069A8:  MOVLW  9C
069AA:  MOVWF  xB4
069AC:  MOVLW  0A
069AE:  MOVWF  xB7
069B0:  MOVLW  1C
069B2:  MOVWF  xB6
069B4:  MOVLB  0
069B6:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
069BA:  MOVLW  0B
069BC:  MOVLB  C
069BE:  MOVWF  xB5
069C0:  MOVLW  9C
069C2:  MOVWF  xB4
069C4:  MOVLW  0C
069C6:  MOVWF  xB7
069C8:  MOVLW  3C
069CA:  MOVWF  xB6
069CC:  MOVLB  0
069CE:  CALL   5CF6
069D2:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage5);
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
069D4:  BRA    69DC
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
069D6:  BTFSS  x46.4
069D8:  BRA    69DC
069DA:  BCF    x4E.4
....................    }
069DC:  BRA    6A3A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
069DE:  MOVLW  00
069E0:  BTFSC  x40.4
069E2:  MOVLW  01
069E4:  MOVWF  xB5
069E6:  MOVLW  00
069E8:  BTFSC  x44.4
069EA:  MOVLW  01
069EC:  XORWF  xB5,W
069EE:  SUBLW  01
069F0:  BNZ   6A34
....................       {
....................          Output.B5 = 0;
069F2:  BCF    x42.4
....................          // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
069F4:  BTFSC  x5C.4
069F6:  BRA    6A32
069F8:  BTFSC  32.3
069FA:  BRA    6A32
069FC:  BTFSC  x4E.4
069FE:  BRA    6A32
....................             {               
....................                SendSMS.B5 =1;
06A00:  BSF    x5C.4
....................                strcat(SMS_MassageSUM, SMS_Massage5);
06A02:  MOVLW  0B
06A04:  MOVWF  xB5
06A06:  MOVLW  9C
06A08:  MOVWF  xB4
06A0A:  MOVLW  0A
06A0C:  MOVWF  xB7
06A0E:  MOVLW  1C
06A10:  MOVWF  xB6
06A12:  MOVLB  0
06A14:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
06A18:  MOVLW  0B
06A1A:  MOVLB  C
06A1C:  MOVWF  xB5
06A1E:  MOVLW  9C
06A20:  MOVWF  xB4
06A22:  MOVLW  0C
06A24:  MOVWF  xB7
06A26:  MOVLW  3C
06A28:  MOVWF  xB6
06A2A:  MOVLB  0
06A2C:  CALL   5CF6
06A30:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage5);
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             }
....................       }
06A32:  BRA    6A3A
....................       else
....................       {
....................          Output.B5 = 1;
06A34:  BSF    x42.4
....................          SendSMS.B5 =0;
06A36:  BCF    x5C.4
....................          functointest_f =0;
06A38:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
06A3A:  BTFSS  x4C.5
06A3C:  BRA    6AEE
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
06A3E:  MOVLW  00
06A40:  BTFSC  x40.5
06A42:  MOVLW  01
06A44:  MOVWF  xB5
06A46:  MOVLW  00
06A48:  BTFSC  x44.5
06A4A:  MOVLW  01
06A4C:  XORWF  xB5,W
06A4E:  SUBLW  01
06A50:  BNZ   6A56
06A52:  BTFSC  x46.5
06A54:  BRA    6A5A
06A56:  BTFSS  x50.5
06A58:  BRA    6AE6
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
06A5A:  BTFSC  x4E.5
06A5C:  BRA    6AE4
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
06A5E:  BTFSC  x50.5
06A60:  BRA    6A7A
06A62:  MOVLB  0
06A64:  MOVF   x6C,W
06A66:  SUBLW  0F
06A68:  BTFSC  FD8.2
06A6A:  BRA    6A70
06A6C:  MOVLB  C
06A6E:  BRA    6A7A
....................             {
....................                TimeBase1s = 100 ;            //reload again
06A70:  MOVLW  64
06A72:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
06A74:  MOVFF  6D,1F
06A78:  MOVLB  C
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
06A7A:  BSF    x50.5
....................             if(FlashingFlag == 0)
06A7C:  BTFSC  1C.1
06A7E:  BRA    6A84
....................             {
....................                Output.B6 = 0;           //Flash output1
06A80:  BCF    x42.5
....................             }
06A82:  BRA    6A86
....................             else
....................             {
....................                Output.B6 = 1;
06A84:  BSF    x42.5
....................             }
.................... 
....................             if (~AutoTestFlag)
06A86:  BTFSC  1C.4
06A88:  BRA    6AA6
....................             {
....................                if(OutputBoth.B6 == 0)                  //Both output
06A8A:  BTFSC  x4A.5
06A8C:  BRA    6A98
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06A8E:  BSF    F89.4
06A90:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06A92:  BSF    F89.3
06A94:  BCF    F92.3
....................                }
06A96:  BRA    6AA6
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
06A98:  BTFSS  x48.5
06A9A:  BRA    6AA2
06A9C:  BSF    F89.4
06A9E:  BCF    F92.4
06AA0:  BRA    6AA6
....................                   else output_bit(Pbell,1);                          //Bell
06AA2:  BSF    F89.3
06AA4:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
06AA6:  BTFSC  x5C.5
06AA8:  BRA    6AE4
06AAA:  BTFSC  32.3
06AAC:  BRA    6AE4
06AAE:  BTFSC  x4E.5
06AB0:  BRA    6AE4
....................             {               
....................                SendSMS.B6 =1;
06AB2:  BSF    x5C.5
....................                strcat(SMS_MassageSUM, SMS_Massage6);
06AB4:  MOVLW  0B
06AB6:  MOVWF  xB5
06AB8:  MOVLW  9C
06ABA:  MOVWF  xB4
06ABC:  MOVLW  0A
06ABE:  MOVWF  xB7
06AC0:  MOVLW  3C
06AC2:  MOVWF  xB6
06AC4:  MOVLB  0
06AC6:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
06ACA:  MOVLW  0B
06ACC:  MOVLB  C
06ACE:  MOVWF  xB5
06AD0:  MOVLW  9C
06AD2:  MOVWF  xB4
06AD4:  MOVLW  0C
06AD6:  MOVWF  xB7
06AD8:  MOVLW  3C
06ADA:  MOVWF  xB6
06ADC:  MOVLB  0
06ADE:  CALL   5CF6
06AE2:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage6);
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
06AE4:  BRA    6AEC
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
06AE6:  BTFSS  x46.5
06AE8:  BRA    6AEC
06AEA:  BCF    x4E.5
....................    }
06AEC:  BRA    6B4A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
06AEE:  MOVLW  00
06AF0:  BTFSC  x40.5
06AF2:  MOVLW  01
06AF4:  MOVWF  xB5
06AF6:  MOVLW  00
06AF8:  BTFSC  x44.5
06AFA:  MOVLW  01
06AFC:  XORWF  xB5,W
06AFE:  SUBLW  01
06B00:  BNZ   6B44
....................       {
....................          Output.B6 = 0;
06B02:  BCF    x42.5
....................          // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
06B04:  BTFSC  x5C.5
06B06:  BRA    6B42
06B08:  BTFSC  32.3
06B0A:  BRA    6B42
06B0C:  BTFSC  x4E.5
06B0E:  BRA    6B42
....................             {               
....................                SendSMS.B6 =1;
06B10:  BSF    x5C.5
....................                strcat(SMS_MassageSUM, SMS_Massage6);
06B12:  MOVLW  0B
06B14:  MOVWF  xB5
06B16:  MOVLW  9C
06B18:  MOVWF  xB4
06B1A:  MOVLW  0A
06B1C:  MOVWF  xB7
06B1E:  MOVLW  3C
06B20:  MOVWF  xB6
06B22:  MOVLB  0
06B24:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
06B28:  MOVLW  0B
06B2A:  MOVLB  C
06B2C:  MOVWF  xB5
06B2E:  MOVLW  9C
06B30:  MOVWF  xB4
06B32:  MOVLW  0C
06B34:  MOVWF  xB7
06B36:  MOVLW  3C
06B38:  MOVWF  xB6
06B3A:  MOVLB  0
06B3C:  CALL   5CF6
06B40:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage6);
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             }
....................       }
06B42:  BRA    6B4A
....................       else
....................       {
....................          Output.B6 = 1;
06B44:  BSF    x42.5
....................          SendSMS.B6 =0;
06B46:  BCF    x5C.5
....................          functointest_f =0;
06B48:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
06B4A:  BTFSS  x4C.6
06B4C:  BRA    6BFE
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
06B4E:  MOVLW  00
06B50:  BTFSC  x40.6
06B52:  MOVLW  01
06B54:  MOVWF  xB5
06B56:  MOVLW  00
06B58:  BTFSC  x44.6
06B5A:  MOVLW  01
06B5C:  XORWF  xB5,W
06B5E:  SUBLW  01
06B60:  BNZ   6B66
06B62:  BTFSC  x46.6
06B64:  BRA    6B6A
06B66:  BTFSS  x50.6
06B68:  BRA    6BF6
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
06B6A:  BTFSC  x4E.6
06B6C:  BRA    6BF4
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
06B6E:  BTFSC  x50.6
06B70:  BRA    6B8A
06B72:  MOVLB  0
06B74:  MOVF   x6C,W
06B76:  SUBLW  0F
06B78:  BTFSC  FD8.2
06B7A:  BRA    6B80
06B7C:  MOVLB  C
06B7E:  BRA    6B8A
....................             {
....................                TimeBase1s = 100 ;            //reload again
06B80:  MOVLW  64
06B82:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
06B84:  MOVFF  6D,1F
06B88:  MOVLB  C
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
06B8A:  BSF    x50.6
....................             if(FlashingFlag == 0)
06B8C:  BTFSC  1C.1
06B8E:  BRA    6B94
....................             {
....................                Output.B7 = 0;           //Flash output1
06B90:  BCF    x42.6
....................             }
06B92:  BRA    6B96
....................             else
....................             {
....................                Output.B7 = 1;
06B94:  BSF    x42.6
....................             }
.................... 
....................             if (~AutoTestFlag)
06B96:  BTFSC  1C.4
06B98:  BRA    6BB6
....................             {
....................                if(OutputBoth.B7 == 0)                  //Both output
06B9A:  BTFSC  x4A.6
06B9C:  BRA    6BA8
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06B9E:  BSF    F89.4
06BA0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06BA2:  BSF    F89.3
06BA4:  BCF    F92.3
....................                }
06BA6:  BRA    6BB6
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
06BA8:  BTFSS  x48.6
06BAA:  BRA    6BB2
06BAC:  BSF    F89.4
06BAE:  BCF    F92.4
06BB0:  BRA    6BB6
....................                   else output_bit(Pbell,1);                          //Bell
06BB2:  BSF    F89.3
06BB4:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
06BB6:  BTFSC  x5C.6
06BB8:  BRA    6BF4
06BBA:  BTFSC  32.3
06BBC:  BRA    6BF4
06BBE:  BTFSC  x4E.6
06BC0:  BRA    6BF4
....................             {               
....................                SendSMS.B7 =1;
06BC2:  BSF    x5C.6
....................                strcat(SMS_MassageSUM, SMS_Massage7);
06BC4:  MOVLW  0B
06BC6:  MOVWF  xB5
06BC8:  MOVLW  9C
06BCA:  MOVWF  xB4
06BCC:  MOVLW  0A
06BCE:  MOVWF  xB7
06BD0:  MOVLW  5C
06BD2:  MOVWF  xB6
06BD4:  MOVLB  0
06BD6:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
06BDA:  MOVLW  0B
06BDC:  MOVLB  C
06BDE:  MOVWF  xB5
06BE0:  MOVLW  9C
06BE2:  MOVWF  xB4
06BE4:  MOVLW  0C
06BE6:  MOVWF  xB7
06BE8:  MOVLW  3C
06BEA:  MOVWF  xB6
06BEC:  MOVLB  0
06BEE:  CALL   5CF6
06BF2:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage7);  
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
06BF4:  BRA    6BFC
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
06BF6:  BTFSS  x46.6
06BF8:  BRA    6BFC
06BFA:  BCF    x4E.6
....................    }
06BFC:  BRA    6C5A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
06BFE:  MOVLW  00
06C00:  BTFSC  x40.6
06C02:  MOVLW  01
06C04:  MOVWF  xB5
06C06:  MOVLW  00
06C08:  BTFSC  x44.6
06C0A:  MOVLW  01
06C0C:  XORWF  xB5,W
06C0E:  SUBLW  01
06C10:  BNZ   6C54
....................       {
....................          Output.B7 = 0;
06C12:  BCF    x42.6
....................          // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
06C14:  BTFSC  x5C.6
06C16:  BRA    6C52
06C18:  BTFSC  32.3
06C1A:  BRA    6C52
06C1C:  BTFSC  x4E.6
06C1E:  BRA    6C52
....................             {               
....................                SendSMS.B7 =1;
06C20:  BSF    x5C.6
....................                strcat(SMS_MassageSUM, SMS_Massage7);
06C22:  MOVLW  0B
06C24:  MOVWF  xB5
06C26:  MOVLW  9C
06C28:  MOVWF  xB4
06C2A:  MOVLW  0A
06C2C:  MOVWF  xB7
06C2E:  MOVLW  5C
06C30:  MOVWF  xB6
06C32:  MOVLB  0
06C34:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
06C38:  MOVLW  0B
06C3A:  MOVLB  C
06C3C:  MOVWF  xB5
06C3E:  MOVLW  9C
06C40:  MOVWF  xB4
06C42:  MOVLW  0C
06C44:  MOVWF  xB7
06C46:  MOVLW  3C
06C48:  MOVWF  xB6
06C4A:  MOVLB  0
06C4C:  CALL   5CF6
06C50:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage7);  
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             }
....................       }
06C52:  BRA    6C5A
....................       else
....................       {
....................          Output.B7 = 1;
06C54:  BSF    x42.6
....................          SendSMS.B7 =0;
06C56:  BCF    x5C.6
....................          functointest_f =0;
06C58:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
06C5A:  BTFSS  x4C.7
06C5C:  BRA    6D0E
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
06C5E:  MOVLW  00
06C60:  BTFSC  x40.7
06C62:  MOVLW  01
06C64:  MOVWF  xB5
06C66:  MOVLW  00
06C68:  BTFSC  x44.7
06C6A:  MOVLW  01
06C6C:  XORWF  xB5,W
06C6E:  SUBLW  01
06C70:  BNZ   6C76
06C72:  BTFSC  x46.7
06C74:  BRA    6C7A
06C76:  BTFSS  x50.7
06C78:  BRA    6D06
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
06C7A:  BTFSC  x4E.7
06C7C:  BRA    6D04
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
06C7E:  BTFSC  x50.7
06C80:  BRA    6C9A
06C82:  MOVLB  0
06C84:  MOVF   x6C,W
06C86:  SUBLW  0F
06C88:  BTFSC  FD8.2
06C8A:  BRA    6C90
06C8C:  MOVLB  C
06C8E:  BRA    6C9A
....................             {
....................                TimeBase1s = 100 ;            //reload again
06C90:  MOVLW  64
06C92:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
06C94:  MOVFF  6D,1F
06C98:  MOVLB  C
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
06C9A:  BSF    x50.7
....................             if(FlashingFlag == 0)
06C9C:  BTFSC  1C.1
06C9E:  BRA    6CA4
....................             {
....................                Output.B8 = 0;           //Flash output1
06CA0:  BCF    x42.7
....................             }
06CA2:  BRA    6CA6
....................             else
....................             {
....................                Output.B8 = 1;
06CA4:  BSF    x42.7
....................             }
.................... 
....................             if (~AutoTestFlag)
06CA6:  BTFSC  1C.4
06CA8:  BRA    6CC6
....................             {
....................                if(OutputBoth.B8 == 0)                  //Both output
06CAA:  BTFSC  x4A.7
06CAC:  BRA    6CB8
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06CAE:  BSF    F89.4
06CB0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06CB2:  BSF    F89.3
06CB4:  BCF    F92.3
....................                }
06CB6:  BRA    6CC6
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
06CB8:  BTFSS  x48.7
06CBA:  BRA    6CC2
06CBC:  BSF    F89.4
06CBE:  BCF    F92.4
06CC0:  BRA    6CC6
....................                   else output_bit(Pbell,1);                          //Bell
06CC2:  BSF    F89.3
06CC4:  BCF    F92.3
....................                }
....................             }
....................                // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
06CC6:  BTFSC  x5C.7
06CC8:  BRA    6D04
06CCA:  BTFSC  32.3
06CCC:  BRA    6D04
06CCE:  BTFSC  x4E.7
06CD0:  BRA    6D04
....................          {            
....................             SendSMS.B8 =1;
06CD2:  BSF    x5C.7
....................                strcat(SMS_MassageSUM, SMS_Massage8);
06CD4:  MOVLW  0B
06CD6:  MOVWF  xB5
06CD8:  MOVLW  9C
06CDA:  MOVWF  xB4
06CDC:  MOVLW  0A
06CDE:  MOVWF  xB7
06CE0:  MOVLW  7C
06CE2:  MOVWF  xB6
06CE4:  MOVLB  0
06CE6:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
06CEA:  MOVLW  0B
06CEC:  MOVLB  C
06CEE:  MOVWF  xB5
06CF0:  MOVLW  9C
06CF2:  MOVWF  xB4
06CF4:  MOVLW  0C
06CF6:  MOVWF  xB7
06CF8:  MOVLW  3C
06CFA:  MOVWF  xB6
06CFC:  MOVLB  0
06CFE:  CALL   5CF6
06D02:  MOVLB  C
....................                /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
.................... 
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage8);  
....................            putc('\n',CH2);
....................           putc(26,CH2);
....................               */
....................          }
....................        }
.................... 
....................       }
06D04:  BRA    6D0C
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
06D06:  BTFSS  x46.7
06D08:  BRA    6D0C
06D0A:  BCF    x4E.7
....................    }
06D0C:  BRA    6D6A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
06D0E:  MOVLW  00
06D10:  BTFSC  x40.7
06D12:  MOVLW  01
06D14:  MOVWF  xB5
06D16:  MOVLW  00
06D18:  BTFSC  x44.7
06D1A:  MOVLW  01
06D1C:  XORWF  xB5,W
06D1E:  SUBLW  01
06D20:  BNZ   6D64
....................       {
....................          Output.B8 = 0;
06D22:  BCF    x42.7
....................          // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
06D24:  BTFSC  x5C.7
06D26:  BRA    6D62
06D28:  BTFSC  32.3
06D2A:  BRA    6D62
06D2C:  BTFSC  x4E.7
06D2E:  BRA    6D62
....................          {            
....................             SendSMS.B8 =1;
06D30:  BSF    x5C.7
....................                strcat(SMS_MassageSUM, SMS_Massage8);
06D32:  MOVLW  0B
06D34:  MOVWF  xB5
06D36:  MOVLW  9C
06D38:  MOVWF  xB4
06D3A:  MOVLW  0A
06D3C:  MOVWF  xB7
06D3E:  MOVLW  7C
06D40:  MOVWF  xB6
06D42:  MOVLB  0
06D44:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
06D48:  MOVLW  0B
06D4A:  MOVLB  C
06D4C:  MOVWF  xB5
06D4E:  MOVLW  9C
06D50:  MOVWF  xB4
06D52:  MOVLW  0C
06D54:  MOVWF  xB7
06D56:  MOVLW  3C
06D58:  MOVWF  xB6
06D5A:  MOVLB  0
06D5C:  CALL   5CF6
06D60:  MOVLB  C
....................                /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
.................... 
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage8);  
....................            putc('\n',CH2);
....................           putc(26,CH2);
....................               */
....................          }
....................       }
06D62:  BRA    6D6A
....................       else
....................       {
....................          Output.B8 = 1;
06D64:  BSF    x42.7
....................          SendSMS.B8 =0;
06D66:  BCF    x5C.7
....................          functointest_f =0;
06D68:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if(AlarmIndicator.B9 == 1)    // Alarm Function
06D6A:  BTFSS  x4D.0
06D6C:  BRA    6E1E
....................    {
....................       if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 1))|| In.B9 == 1)    // alarm1 occure and "Lock type"
06D6E:  MOVLW  00
06D70:  BTFSC  x41.0
06D72:  MOVLW  01
06D74:  MOVWF  xB5
06D76:  MOVLW  00
06D78:  BTFSC  x45.0
06D7A:  MOVLW  01
06D7C:  XORWF  xB5,W
06D7E:  SUBLW  01
06D80:  BNZ   6D86
06D82:  BTFSC  x47.0
06D84:  BRA    6D8A
06D86:  BTFSS  x51.0
06D88:  BRA    6E16
....................       //if(Inputt.B9 == 0)
....................       {
....................          if(Ack.B9 == 0)
06D8A:  BTFSC  x4F.0
06D8C:  BRA    6E14
....................          {
....................             if(In.B9 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
06D8E:  BTFSC  x51.0
06D90:  BRA    6DAA
06D92:  MOVLB  0
06D94:  MOVF   x6C,W
06D96:  SUBLW  0F
06D98:  BTFSC  FD8.2
06D9A:  BRA    6DA0
06D9C:  MOVLB  C
06D9E:  BRA    6DAA
....................             {
....................                TimeBase1s = 100 ;            //reload again
06DA0:  MOVLW  64
06DA2:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
06DA4:  MOVFF  6D,1F
06DA8:  MOVLB  C
....................             }
.................... 
....................             In.B9 = 1;                                 // setbit in1
06DAA:  BSF    x51.0
....................             if(FlashingFlag == 0)
06DAC:  BTFSC  1C.1
06DAE:  BRA    6DB4
....................             {
....................                Output.B9 = 0;           //Flash output1
06DB0:  BCF    x43.0
....................             }
06DB2:  BRA    6DB6
....................             else
....................             {
....................                Output.B9 = 1;
06DB4:  BSF    x43.0
....................             }
.................... 
....................             if (~AutoTestFlag)
06DB6:  BTFSC  1C.4
06DB8:  BRA    6DD6
....................             {
....................                if(OutputBoth.B9 == 0)                  //Both output
06DBA:  BTFSC  x4B.0
06DBC:  BRA    6DC8
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06DBE:  BSF    F89.4
06DC0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06DC2:  BSF    F89.3
06DC4:  BCF    F92.3
....................                }
06DC6:  BRA    6DD6
....................                else
....................                {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
06DC8:  BTFSS  x49.0
06DCA:  BRA    6DD2
06DCC:  BSF    F89.4
06DCE:  BCF    F92.4
06DD0:  BRA    6DD6
....................                   else output_bit(Pbell,1);                          //Bell
06DD2:  BSF    F89.3
06DD4:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
06DD6:  BTFSC  x5D.0
06DD8:  BRA    6E14
06DDA:  BTFSC  32.3
06DDC:  BRA    6E14
06DDE:  BTFSC  x4F.0
06DE0:  BRA    6E14
....................             {               
....................                SendSMS.B9 =1;
06DE2:  BSF    x5D.0
....................                strcat(SMS_MassageSUM, SMS_Massage9);
06DE4:  MOVLW  0B
06DE6:  MOVWF  xB5
06DE8:  MOVLW  9C
06DEA:  MOVWF  xB4
06DEC:  MOVLW  0A
06DEE:  MOVWF  xB7
06DF0:  MOVLW  9C
06DF2:  MOVWF  xB6
06DF4:  MOVLB  0
06DF6:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
06DFA:  MOVLW  0B
06DFC:  MOVLB  C
06DFE:  MOVWF  xB5
06E00:  MOVLW  9C
06E02:  MOVWF  xB4
06E04:  MOVLW  0C
06E06:  MOVWF  xB7
06E08:  MOVLW  3C
06E0A:  MOVWF  xB6
06E0C:  MOVLB  0
06E0E:  CALL   5CF6
06E12:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage9);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
06E14:  BRA    6E1C
....................       else if(FaultType.B9 == 1) Ack.B9 = 0;
06E16:  BTFSS  x47.0
06E18:  BRA    6E1C
06E1A:  BCF    x4F.0
....................    }
06E1C:  BRA    6E7A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B9 ^ InputType.B9) == 1)
06E1E:  MOVLW  00
06E20:  BTFSC  x41.0
06E22:  MOVLW  01
06E24:  MOVWF  xB5
06E26:  MOVLW  00
06E28:  BTFSC  x45.0
06E2A:  MOVLW  01
06E2C:  XORWF  xB5,W
06E2E:  SUBLW  01
06E30:  BNZ   6E74
....................       {
....................          Output.B9 = 0;
06E32:  BCF    x43.0
....................          // SMS Sending   
....................          if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
06E34:  BTFSC  x5D.0
06E36:  BRA    6E72
06E38:  BTFSC  32.3
06E3A:  BRA    6E72
06E3C:  BTFSC  x4F.0
06E3E:  BRA    6E72
....................          {            
....................             SendSMS.B9 =1;
06E40:  BSF    x5D.0
....................                strcat(SMS_MassageSUM, SMS_Massage9);
06E42:  MOVLW  0B
06E44:  MOVWF  xB5
06E46:  MOVLW  9C
06E48:  MOVWF  xB4
06E4A:  MOVLW  0A
06E4C:  MOVWF  xB7
06E4E:  MOVLW  9C
06E50:  MOVWF  xB6
06E52:  MOVLB  0
06E54:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
06E58:  MOVLW  0B
06E5A:  MOVLB  C
06E5C:  MOVWF  xB5
06E5E:  MOVLW  9C
06E60:  MOVWF  xB4
06E62:  MOVLW  0C
06E64:  MOVWF  xB7
06E66:  MOVLW  3C
06E68:  MOVWF  xB6
06E6A:  MOVLB  0
06E6C:  CALL   5CF6
06E70:  MOVLB  C
....................                /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
.................... 
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage9);  
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
06E72:  BRA    6E7A
....................       else
....................       {
....................          Output.B9 = 1;
06E74:  BSF    x43.0
....................          SendSMS.B9 =0;
06E76:  BCF    x5D.0
....................          functointest_f =0;
06E78:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if(AlarmIndicator.B10 == 1)    // Alarm Function
06E7A:  BTFSS  x4D.1
06E7C:  BRA    6F2E
....................    {
....................       if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 1))|| In.B10 == 1)    // alarm1 occure and "Lock type"
06E7E:  MOVLW  00
06E80:  BTFSC  x41.1
06E82:  MOVLW  01
06E84:  MOVWF  xB5
06E86:  MOVLW  00
06E88:  BTFSC  x45.1
06E8A:  MOVLW  01
06E8C:  XORWF  xB5,W
06E8E:  SUBLW  01
06E90:  BNZ   6E96
06E92:  BTFSC  x47.1
06E94:  BRA    6E9A
06E96:  BTFSS  x51.1
06E98:  BRA    6F26
....................       //if(Inputt.B10 == 0)
....................       {
....................          if(Ack.B10 == 0)
06E9A:  BTFSC  x4F.1
06E9C:  BRA    6F24
....................          {
....................             if(In.B10 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
06E9E:  BTFSC  x51.1
06EA0:  BRA    6EBA
06EA2:  MOVLB  0
06EA4:  MOVF   x6C,W
06EA6:  SUBLW  0F
06EA8:  BTFSC  FD8.2
06EAA:  BRA    6EB0
06EAC:  MOVLB  C
06EAE:  BRA    6EBA
....................             {
....................                TimeBase1s = 100 ;            //reload again
06EB0:  MOVLW  64
06EB2:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
06EB4:  MOVFF  6D,1F
06EB8:  MOVLB  C
....................             }
.................... 
....................             In.B10 = 1;                                 // setbit in1
06EBA:  BSF    x51.1
....................             if(FlashingFlag == 0)
06EBC:  BTFSC  1C.1
06EBE:  BRA    6EC4
....................             {
....................                Output.B10 = 0;           //Flash output1
06EC0:  BCF    x43.1
....................             }
06EC2:  BRA    6EC6
....................             else
....................             {
....................                Output.B10 = 1;
06EC4:  BSF    x43.1
....................             }
.................... 
....................             if (~AutoTestFlag)
06EC6:  BTFSC  1C.4
06EC8:  BRA    6EE6
....................             {
....................                if(OutputBoth.B10 == 0)                  //Both output
06ECA:  BTFSC  x4B.1
06ECC:  BRA    6ED8
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06ECE:  BSF    F89.4
06ED0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06ED2:  BSF    F89.3
06ED4:  BCF    F92.3
....................                }
06ED6:  BRA    6EE6
....................                else
....................                {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
06ED8:  BTFSS  x49.1
06EDA:  BRA    6EE2
06EDC:  BSF    F89.4
06EDE:  BCF    F92.4
06EE0:  BRA    6EE6
....................                   else output_bit(Pbell,1);                          //Bell
06EE2:  BSF    F89.3
06EE4:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
06EE6:  BTFSC  x5D.1
06EE8:  BRA    6F24
06EEA:  BTFSC  32.3
06EEC:  BRA    6F24
06EEE:  BTFSC  x4F.1
06EF0:  BRA    6F24
....................             {               
....................                SendSMS.B10 =1;
06EF2:  BSF    x5D.1
....................                strcat(SMS_MassageSUM, SMS_Massage10);
06EF4:  MOVLW  0B
06EF6:  MOVWF  xB5
06EF8:  MOVLW  9C
06EFA:  MOVWF  xB4
06EFC:  MOVLW  0A
06EFE:  MOVWF  xB7
06F00:  MOVLW  BC
06F02:  MOVWF  xB6
06F04:  MOVLB  0
06F06:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
06F0A:  MOVLW  0B
06F0C:  MOVLB  C
06F0E:  MOVWF  xB5
06F10:  MOVLW  9C
06F12:  MOVWF  xB4
06F14:  MOVLW  0C
06F16:  MOVWF  xB7
06F18:  MOVLW  3C
06F1A:  MOVWF  xB6
06F1C:  MOVLB  0
06F1E:  CALL   5CF6
06F22:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage10);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
06F24:  BRA    6F2C
....................       else if(FaultType.B10 == 1) Ack.B10 = 0;
06F26:  BTFSS  x47.1
06F28:  BRA    6F2C
06F2A:  BCF    x4F.1
....................    }
06F2C:  BRA    6F8A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B10 ^ InputType.B10) == 1)
06F2E:  MOVLW  00
06F30:  BTFSC  x41.1
06F32:  MOVLW  01
06F34:  MOVWF  xB5
06F36:  MOVLW  00
06F38:  BTFSC  x45.1
06F3A:  MOVLW  01
06F3C:  XORWF  xB5,W
06F3E:  SUBLW  01
06F40:  BNZ   6F84
....................       {
....................          Output.B10 = 0;
06F42:  BCF    x43.1
....................          // SMS Sending   
....................          if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
06F44:  BTFSC  x5D.1
06F46:  BRA    6F82
06F48:  BTFSC  32.3
06F4A:  BRA    6F82
06F4C:  BTFSC  x4F.1
06F4E:  BRA    6F82
....................          {            
....................             SendSMS.B10 =1;
06F50:  BSF    x5D.1
....................                strcat(SMS_MassageSUM, SMS_Massage10);
06F52:  MOVLW  0B
06F54:  MOVWF  xB5
06F56:  MOVLW  9C
06F58:  MOVWF  xB4
06F5A:  MOVLW  0A
06F5C:  MOVWF  xB7
06F5E:  MOVLW  BC
06F60:  MOVWF  xB6
06F62:  MOVLB  0
06F64:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
06F68:  MOVLW  0B
06F6A:  MOVLB  C
06F6C:  MOVWF  xB5
06F6E:  MOVLW  9C
06F70:  MOVWF  xB4
06F72:  MOVLW  0C
06F74:  MOVWF  xB7
06F76:  MOVLW  3C
06F78:  MOVWF  xB6
06F7A:  MOVLB  0
06F7C:  CALL   5CF6
06F80:  MOVLB  C
....................                /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
.................... 
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage10);  
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
06F82:  BRA    6F8A
....................       else
....................       {
....................          Output.B10 = 1;
06F84:  BSF    x43.1
....................          SendSMS.B10 =0;
06F86:  BCF    x5D.1
....................          functointest_f =0;
06F88:  BCF    32.3
....................       }
....................    }
.................... //}
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if(AlarmIndicator.B11 == 1)    // Alarm Function
06F8A:  BTFSS  x4D.2
06F8C:  BRA    703E
....................    {
....................       if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 1))|| In.B11 == 1)    // alarm1 occure and "Lock type"
06F8E:  MOVLW  00
06F90:  BTFSC  x41.2
06F92:  MOVLW  01
06F94:  MOVWF  xB5
06F96:  MOVLW  00
06F98:  BTFSC  x45.2
06F9A:  MOVLW  01
06F9C:  XORWF  xB5,W
06F9E:  SUBLW  01
06FA0:  BNZ   6FA6
06FA2:  BTFSC  x47.2
06FA4:  BRA    6FAA
06FA6:  BTFSS  x51.2
06FA8:  BRA    7036
....................       //if(Inputt.B11 == 0)
....................       {
....................          if(Ack.B11 == 0)
06FAA:  BTFSC  x4F.2
06FAC:  BRA    7034
....................          {
....................             if(In.B11 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
06FAE:  BTFSC  x51.2
06FB0:  BRA    6FCA
06FB2:  MOVLB  0
06FB4:  MOVF   x6C,W
06FB6:  SUBLW  0F
06FB8:  BTFSC  FD8.2
06FBA:  BRA    6FC0
06FBC:  MOVLB  C
06FBE:  BRA    6FCA
....................             {
....................                TimeBase1s = 100 ;            //reload again
06FC0:  MOVLW  64
06FC2:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
06FC4:  MOVFF  6D,1F
06FC8:  MOVLB  C
....................             }
.................... 
....................             In.B11 = 1;                                 // setbit in1
06FCA:  BSF    x51.2
....................             if(FlashingFlag == 0)
06FCC:  BTFSC  1C.1
06FCE:  BRA    6FD4
....................             {
....................                Output.B11 = 0;           //Flash output1
06FD0:  BCF    x43.2
....................             }
06FD2:  BRA    6FD6
....................             else
....................             {
....................                Output.B11 = 1;
06FD4:  BSF    x43.2
....................             }
.................... 
....................             if (~AutoTestFlag)
06FD6:  BTFSC  1C.4
06FD8:  BRA    6FF6
....................             {
....................                if(OutputBoth.B11 == 0)                  //Both output
06FDA:  BTFSC  x4B.2
06FDC:  BRA    6FE8
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06FDE:  BSF    F89.4
06FE0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06FE2:  BSF    F89.3
06FE4:  BCF    F92.3
....................                }
06FE6:  BRA    6FF6
....................                else
....................                {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,1);     //Buzzer
06FE8:  BTFSS  x49.2
06FEA:  BRA    6FF2
06FEC:  BSF    F89.4
06FEE:  BCF    F92.4
06FF0:  BRA    6FF6
....................                   else output_bit(Pbell,1);                          //Bell
06FF2:  BSF    F89.3
06FF4:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B11 ==0)&& (functointest_f ==0) && (Ack.B11 ==0))
06FF6:  BTFSC  x5D.2
06FF8:  BRA    7034
06FFA:  BTFSC  32.3
06FFC:  BRA    7034
06FFE:  BTFSC  x4F.2
07000:  BRA    7034
....................             {               
....................                SendSMS.B11 =1;
07002:  BSF    x5D.2
....................                strcat(SMS_MassageSUM, SMS_Massage11);
07004:  MOVLW  0B
07006:  MOVWF  xB5
07008:  MOVLW  9C
0700A:  MOVWF  xB4
0700C:  MOVLW  0A
0700E:  MOVWF  xB7
07010:  MOVLW  DC
07012:  MOVWF  xB6
07014:  MOVLB  0
07016:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
0701A:  MOVLW  0B
0701C:  MOVLB  C
0701E:  MOVWF  xB5
07020:  MOVLW  9C
07022:  MOVWF  xB4
07024:  MOVLW  0C
07026:  MOVWF  xB7
07028:  MOVLW  3C
0702A:  MOVWF  xB6
0702C:  MOVLB  0
0702E:  CALL   5CF6
07032:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage11);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
07034:  BRA    703C
....................       else if(FaultType.B11 == 1) Ack.B11 = 0;
07036:  BTFSS  x47.2
07038:  BRA    703C
0703A:  BCF    x4F.2
....................    }
0703C:  BRA    709A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B11 ^ InputType.B11) == 1)
0703E:  MOVLW  00
07040:  BTFSC  x41.2
07042:  MOVLW  01
07044:  MOVWF  xB5
07046:  MOVLW  00
07048:  BTFSC  x45.2
0704A:  MOVLW  01
0704C:  XORWF  xB5,W
0704E:  SUBLW  01
07050:  BNZ   7094
....................       {
....................          Output.B11 = 0;
07052:  BCF    x43.2
....................          // SMS Sending   
....................             if((SendSMS.B11 ==0)&& (functointest_f ==0) && (Ack.B11 ==0))
07054:  BTFSC  x5D.2
07056:  BRA    7092
07058:  BTFSC  32.3
0705A:  BRA    7092
0705C:  BTFSC  x4F.2
0705E:  BRA    7092
....................             {               
....................                SendSMS.B11 =1;
07060:  BSF    x5D.2
....................                strcat(SMS_MassageSUM, SMS_Massage11);
07062:  MOVLW  0B
07064:  MOVWF  xB5
07066:  MOVLW  9C
07068:  MOVWF  xB4
0706A:  MOVLW  0A
0706C:  MOVWF  xB7
0706E:  MOVLW  DC
07070:  MOVWF  xB6
07072:  MOVLB  0
07074:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
07078:  MOVLW  0B
0707A:  MOVLB  C
0707C:  MOVWF  xB5
0707E:  MOVLW  9C
07080:  MOVWF  xB4
07082:  MOVLW  0C
07084:  MOVWF  xB7
07086:  MOVLW  3C
07088:  MOVWF  xB6
0708A:  MOVLB  0
0708C:  CALL   5CF6
07090:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage11);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................             ///////////////////////////////////
....................       }
07092:  BRA    709A
....................       else
....................       {
....................          Output.B11 = 1;
07094:  BSF    x43.2
....................          SendSMS.B11 =0;
07096:  BCF    x5D.2
....................          functointest_f =0;
07098:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if(AlarmIndicator.B12 == 1)    // Alarm Function
0709A:  BTFSS  x4D.3
0709C:  BRA    714E
....................    {
....................       if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 1))|| In.B12 == 1)    // alarm1 occure and "Lock type"
0709E:  MOVLW  00
070A0:  BTFSC  x41.3
070A2:  MOVLW  01
070A4:  MOVWF  xB5
070A6:  MOVLW  00
070A8:  BTFSC  x45.3
070AA:  MOVLW  01
070AC:  XORWF  xB5,W
070AE:  SUBLW  01
070B0:  BNZ   70B6
070B2:  BTFSC  x47.3
070B4:  BRA    70BA
070B6:  BTFSS  x51.3
070B8:  BRA    7146
....................       //if(Inputt.B12 == 0)
....................       {
....................          if(Ack.B12 == 0)
070BA:  BTFSC  x4F.3
070BC:  BRA    7144
....................          {
....................             if(In.B12 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
070BE:  BTFSC  x51.3
070C0:  BRA    70DA
070C2:  MOVLB  0
070C4:  MOVF   x6C,W
070C6:  SUBLW  0F
070C8:  BTFSC  FD8.2
070CA:  BRA    70D0
070CC:  MOVLB  C
070CE:  BRA    70DA
....................             {
....................                TimeBase1s = 100 ;            //reload again
070D0:  MOVLW  64
070D2:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
070D4:  MOVFF  6D,1F
070D8:  MOVLB  C
....................             }
.................... 
....................             In.B12 = 1;                                 // setbit in1
070DA:  BSF    x51.3
....................             if(FlashingFlag == 0)
070DC:  BTFSC  1C.1
070DE:  BRA    70E4
....................             {
....................                Output.B12 = 0;           //Flash output1
070E0:  BCF    x43.3
....................             }
070E2:  BRA    70E6
....................             else
....................             {
....................                Output.B12 = 1;
070E4:  BSF    x43.3
....................             }
.................... 
....................             if (~AutoTestFlag)
070E6:  BTFSC  1C.4
070E8:  BRA    7106
....................             {
....................                if(OutputBoth.B12 == 0)                  //Both output
070EA:  BTFSC  x4B.3
070EC:  BRA    70F8
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
070EE:  BSF    F89.4
070F0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
070F2:  BSF    F89.3
070F4:  BCF    F92.3
....................                }
070F6:  BRA    7106
....................                else
....................                {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,1);     //Buzzer
070F8:  BTFSS  x49.3
070FA:  BRA    7102
070FC:  BSF    F89.4
070FE:  BCF    F92.4
07100:  BRA    7106
....................                   else output_bit(Pbell,1);                          //Bell
07102:  BSF    F89.3
07104:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B12 ==0)&& (functointest_f ==0) && (Ack.B12 ==0))
07106:  BTFSC  x5D.3
07108:  BRA    7144
0710A:  BTFSC  32.3
0710C:  BRA    7144
0710E:  BTFSC  x4F.3
07110:  BRA    7144
....................             {               
....................                SendSMS.B12 =1;
07112:  BSF    x5D.3
....................                strcat(SMS_MassageSUM, SMS_Massage12);
07114:  MOVLW  0B
07116:  MOVWF  xB5
07118:  MOVLW  9C
0711A:  MOVWF  xB4
0711C:  MOVLW  0A
0711E:  MOVWF  xB7
07120:  MOVLW  FC
07122:  MOVWF  xB6
07124:  MOVLB  0
07126:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
0712A:  MOVLW  0B
0712C:  MOVLB  C
0712E:  MOVWF  xB5
07130:  MOVLW  9C
07132:  MOVWF  xB4
07134:  MOVLW  0C
07136:  MOVWF  xB7
07138:  MOVLW  3C
0713A:  MOVWF  xB6
0713C:  MOVLB  0
0713E:  CALL   5CF6
07142:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage12);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................             ///////////////////////////////////
....................         }
.................... 
....................       }
07144:  BRA    714C
....................       else if(FaultType.B12 == 1) Ack.B12 = 0;
07146:  BTFSS  x47.3
07148:  BRA    714C
0714A:  BCF    x4F.3
....................    }
0714C:  BRA    71AA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B12 ^ InputType.B12) == 1)
0714E:  MOVLW  00
07150:  BTFSC  x41.3
07152:  MOVLW  01
07154:  MOVWF  xB5
07156:  MOVLW  00
07158:  BTFSC  x45.3
0715A:  MOVLW  01
0715C:  XORWF  xB5,W
0715E:  SUBLW  01
07160:  BNZ   71A4
....................       {
....................          Output.B12 = 0;
07162:  BCF    x43.3
....................          // SMS Sending   
....................             if((SendSMS.B12 ==0)&& (functointest_f ==0) && (Ack.B12 ==0))
07164:  BTFSC  x5D.3
07166:  BRA    71A2
07168:  BTFSC  32.3
0716A:  BRA    71A2
0716C:  BTFSC  x4F.3
0716E:  BRA    71A2
....................             {               
....................                SendSMS.B12 =1;
07170:  BSF    x5D.3
....................                strcat(SMS_MassageSUM, SMS_Massage12);
07172:  MOVLW  0B
07174:  MOVWF  xB5
07176:  MOVLW  9C
07178:  MOVWF  xB4
0717A:  MOVLW  0A
0717C:  MOVWF  xB7
0717E:  MOVLW  FC
07180:  MOVWF  xB6
07182:  MOVLB  0
07184:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
07188:  MOVLW  0B
0718A:  MOVLB  C
0718C:  MOVWF  xB5
0718E:  MOVLW  9C
07190:  MOVWF  xB4
07192:  MOVLW  0C
07194:  MOVWF  xB7
07196:  MOVLW  3C
07198:  MOVWF  xB6
0719A:  MOVLB  0
0719C:  CALL   5CF6
071A0:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage12);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................             ///////////////////////////////////
....................       }
071A2:  BRA    71AA
....................       else
....................       {
....................          Output.B12 = 1;
071A4:  BSF    x43.3
....................          SendSMS.B12 =0;
071A6:  BCF    x5D.3
....................          functointest_f =0;
071A8:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if(AlarmIndicator.B13 == 1)    // Alarm Function
071AA:  BTFSS  x4D.4
071AC:  BRA    725E
....................    {
....................       if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 1))|| In.B13 == 1)    // alarm1 occure and "Lock type"
071AE:  MOVLW  00
071B0:  BTFSC  x41.4
071B2:  MOVLW  01
071B4:  MOVWF  xB5
071B6:  MOVLW  00
071B8:  BTFSC  x45.4
071BA:  MOVLW  01
071BC:  XORWF  xB5,W
071BE:  SUBLW  01
071C0:  BNZ   71C6
071C2:  BTFSC  x47.4
071C4:  BRA    71CA
071C6:  BTFSS  x51.4
071C8:  BRA    7256
....................       //if(Inputt.B13 == 0)
....................       {
....................          if(Ack.B13 == 0)
071CA:  BTFSC  x4F.4
071CC:  BRA    7254
....................          {
....................             if(In.B13 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
071CE:  BTFSC  x51.4
071D0:  BRA    71EA
071D2:  MOVLB  0
071D4:  MOVF   x6C,W
071D6:  SUBLW  0F
071D8:  BTFSC  FD8.2
071DA:  BRA    71E0
071DC:  MOVLB  C
071DE:  BRA    71EA
....................             {
....................                TimeBase1s = 100 ;            //reload again
071E0:  MOVLW  64
071E2:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
071E4:  MOVFF  6D,1F
071E8:  MOVLB  C
....................             }
.................... 
....................             In.B13 = 1;                                 // setbit in1
071EA:  BSF    x51.4
....................             if(FlashingFlag == 0)
071EC:  BTFSC  1C.1
071EE:  BRA    71F4
....................             {
....................                Output.B13 = 0;           //Flash output1
071F0:  BCF    x43.4
....................             }
071F2:  BRA    71F6
....................             else
....................             {
....................                Output.B13 = 1;
071F4:  BSF    x43.4
....................             }
.................... 
....................             if (~AutoTestFlag)
071F6:  BTFSC  1C.4
071F8:  BRA    7216
....................             {
....................                if(OutputBoth.B13 == 0)                  //Both output
071FA:  BTFSC  x4B.4
071FC:  BRA    7208
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
071FE:  BSF    F89.4
07200:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07202:  BSF    F89.3
07204:  BCF    F92.3
....................                }
07206:  BRA    7216
....................                else
....................                {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,1);     //Buzzer
07208:  BTFSS  x49.4
0720A:  BRA    7212
0720C:  BSF    F89.4
0720E:  BCF    F92.4
07210:  BRA    7216
....................                   else output_bit(Pbell,1);                          //Bell
07212:  BSF    F89.3
07214:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B13 ==0)&& (functointest_f ==0) && (Ack.B13 ==0))
07216:  BTFSC  x5D.4
07218:  BRA    7254
0721A:  BTFSC  32.3
0721C:  BRA    7254
0721E:  BTFSC  x4F.4
07220:  BRA    7254
....................             {               
....................                SendSMS.B13 =1;
07222:  BSF    x5D.4
....................                strcat(SMS_MassageSUM, SMS_Massage13);
07224:  MOVLW  0B
07226:  MOVWF  xB5
07228:  MOVLW  9C
0722A:  MOVWF  xB4
0722C:  MOVLW  0B
0722E:  MOVWF  xB7
07230:  MOVLW  1C
07232:  MOVWF  xB6
07234:  MOVLB  0
07236:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
0723A:  MOVLW  0B
0723C:  MOVLB  C
0723E:  MOVWF  xB5
07240:  MOVLW  9C
07242:  MOVWF  xB4
07244:  MOVLW  0C
07246:  MOVWF  xB7
07248:  MOVLW  3C
0724A:  MOVWF  xB6
0724C:  MOVLB  0
0724E:  CALL   5CF6
07252:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage13);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
07254:  BRA    725C
....................       else if(FaultType.B13 == 1) Ack.B13 = 0;
07256:  BTFSS  x47.4
07258:  BRA    725C
0725A:  BCF    x4F.4
....................    }
0725C:  BRA    72BA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B13 ^ InputType.B13) == 1)
0725E:  MOVLW  00
07260:  BTFSC  x41.4
07262:  MOVLW  01
07264:  MOVWF  xB5
07266:  MOVLW  00
07268:  BTFSC  x45.4
0726A:  MOVLW  01
0726C:  XORWF  xB5,W
0726E:  SUBLW  01
07270:  BNZ   72B4
....................       {
....................          Output.B13 = 0;
07272:  BCF    x43.4
....................          // SMS Sending   
....................             if((SendSMS.B13 ==0)&& (functointest_f ==0) && (Ack.B13 ==0))
07274:  BTFSC  x5D.4
07276:  BRA    72B2
07278:  BTFSC  32.3
0727A:  BRA    72B2
0727C:  BTFSC  x4F.4
0727E:  BRA    72B2
....................             {               
....................                SendSMS.B13 =1;
07280:  BSF    x5D.4
....................                strcat(SMS_MassageSUM, SMS_Massage13);
07282:  MOVLW  0B
07284:  MOVWF  xB5
07286:  MOVLW  9C
07288:  MOVWF  xB4
0728A:  MOVLW  0B
0728C:  MOVWF  xB7
0728E:  MOVLW  1C
07290:  MOVWF  xB6
07292:  MOVLB  0
07294:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
07298:  MOVLW  0B
0729A:  MOVLB  C
0729C:  MOVWF  xB5
0729E:  MOVLW  9C
072A0:  MOVWF  xB4
072A2:  MOVLW  0C
072A4:  MOVWF  xB7
072A6:  MOVLW  3C
072A8:  MOVWF  xB6
072AA:  MOVLB  0
072AC:  CALL   5CF6
072B0:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage13);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................             ///////////////////////////////////
....................       }
072B2:  BRA    72BA
....................       else
....................       {
....................          Output.B13 = 1;
072B4:  BSF    x43.4
....................          SendSMS.B13 =0;
072B6:  BCF    x5D.4
....................          functointest_f =0;
072B8:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if(AlarmIndicator.B14 == 1)    // Alarm Function
072BA:  BTFSS  x4D.5
072BC:  BRA    736E
....................    {
....................       if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 1))|| In.B14 == 1)    // alarm1 occure and "Lock type"
072BE:  MOVLW  00
072C0:  BTFSC  x41.5
072C2:  MOVLW  01
072C4:  MOVWF  xB5
072C6:  MOVLW  00
072C8:  BTFSC  x45.5
072CA:  MOVLW  01
072CC:  XORWF  xB5,W
072CE:  SUBLW  01
072D0:  BNZ   72D6
072D2:  BTFSC  x47.5
072D4:  BRA    72DA
072D6:  BTFSS  x51.5
072D8:  BRA    7366
....................       //if(Inputt.B14 == 0)
....................       {
....................          if(Ack.B14 == 0)
072DA:  BTFSC  x4F.5
072DC:  BRA    7364
....................          {
....................             if(In.B14 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
072DE:  BTFSC  x51.5
072E0:  BRA    72FA
072E2:  MOVLB  0
072E4:  MOVF   x6C,W
072E6:  SUBLW  0F
072E8:  BTFSC  FD8.2
072EA:  BRA    72F0
072EC:  MOVLB  C
072EE:  BRA    72FA
....................             {
....................                TimeBase1s = 100 ;            //reload again
072F0:  MOVLW  64
072F2:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
072F4:  MOVFF  6D,1F
072F8:  MOVLB  C
....................             }
.................... 
....................             In.B14 = 1;                                 // setbit in1
072FA:  BSF    x51.5
....................             if(FlashingFlag == 0)
072FC:  BTFSC  1C.1
072FE:  BRA    7304
....................             {
....................                Output.B14 = 0;           //Flash output1
07300:  BCF    x43.5
....................             }
07302:  BRA    7306
....................             else
....................             {
....................                Output.B14 = 1;
07304:  BSF    x43.5
....................             }
.................... 
....................             if (~AutoTestFlag)
07306:  BTFSC  1C.4
07308:  BRA    7326
....................             {
....................                if(OutputBoth.B14 == 0)                  //Both output
0730A:  BTFSC  x4B.5
0730C:  BRA    7318
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0730E:  BSF    F89.4
07310:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07312:  BSF    F89.3
07314:  BCF    F92.3
....................                }
07316:  BRA    7326
....................                else
....................                {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,1);     //Buzzer
07318:  BTFSS  x49.5
0731A:  BRA    7322
0731C:  BSF    F89.4
0731E:  BCF    F92.4
07320:  BRA    7326
....................                   else output_bit(Pbell,1);                          //Bell
07322:  BSF    F89.3
07324:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B14 ==0)&& (functointest_f ==0) && (Ack.B14 ==0))
07326:  BTFSC  x5D.5
07328:  BRA    7364
0732A:  BTFSC  32.3
0732C:  BRA    7364
0732E:  BTFSC  x4F.5
07330:  BRA    7364
....................             {               
....................                SendSMS.B14 =1;
07332:  BSF    x5D.5
....................                strcat(SMS_MassageSUM, SMS_Massage14);
07334:  MOVLW  0B
07336:  MOVWF  xB5
07338:  MOVLW  9C
0733A:  MOVWF  xB4
0733C:  MOVLW  0B
0733E:  MOVWF  xB7
07340:  MOVLW  3C
07342:  MOVWF  xB6
07344:  MOVLB  0
07346:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
0734A:  MOVLW  0B
0734C:  MOVLB  C
0734E:  MOVWF  xB5
07350:  MOVLW  9C
07352:  MOVWF  xB4
07354:  MOVLW  0C
07356:  MOVWF  xB7
07358:  MOVLW  3C
0735A:  MOVWF  xB6
0735C:  MOVLB  0
0735E:  CALL   5CF6
07362:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage14);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
07364:  BRA    736C
....................       else if(FaultType.B14 == 1) Ack.B14 = 0;
07366:  BTFSS  x47.5
07368:  BRA    736C
0736A:  BCF    x4F.5
....................    }
0736C:  BRA    73CA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B14 ^ InputType.B14) == 1)
0736E:  MOVLW  00
07370:  BTFSC  x41.5
07372:  MOVLW  01
07374:  MOVWF  xB5
07376:  MOVLW  00
07378:  BTFSC  x45.5
0737A:  MOVLW  01
0737C:  XORWF  xB5,W
0737E:  SUBLW  01
07380:  BNZ   73C4
....................       {
....................          Output.B14 = 0;
07382:  BCF    x43.5
....................          // SMS Sending   
....................             if((SendSMS.B14 ==0)&& (functointest_f ==0) && (Ack.B14 ==0))
07384:  BTFSC  x5D.5
07386:  BRA    73C2
07388:  BTFSC  32.3
0738A:  BRA    73C2
0738C:  BTFSC  x4F.5
0738E:  BRA    73C2
....................             {               
....................                SendSMS.B14 =1;
07390:  BSF    x5D.5
....................                strcat(SMS_MassageSUM, SMS_Massage14);
07392:  MOVLW  0B
07394:  MOVWF  xB5
07396:  MOVLW  9C
07398:  MOVWF  xB4
0739A:  MOVLW  0B
0739C:  MOVWF  xB7
0739E:  MOVLW  3C
073A0:  MOVWF  xB6
073A2:  MOVLB  0
073A4:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
073A8:  MOVLW  0B
073AA:  MOVLB  C
073AC:  MOVWF  xB5
073AE:  MOVLW  9C
073B0:  MOVWF  xB4
073B2:  MOVLW  0C
073B4:  MOVWF  xB7
073B6:  MOVLW  3C
073B8:  MOVWF  xB6
073BA:  MOVLB  0
073BC:  CALL   5CF6
073C0:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage14);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................             ///////////////////////////////////
....................       }
073C2:  BRA    73CA
....................       else
....................       {
....................          Output.B14 = 1;
073C4:  BSF    x43.5
....................          SendSMS.B14 =0;
073C6:  BCF    x5D.5
....................          functointest_f =0;
073C8:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if(AlarmIndicator.B15 == 1)    // Alarm Function
073CA:  BTFSS  x4D.6
073CC:  BRA    747E
....................    {
....................       if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 1))|| In.B15 == 1)    // alarm1 occure and "Lock type"
073CE:  MOVLW  00
073D0:  BTFSC  x41.6
073D2:  MOVLW  01
073D4:  MOVWF  xB5
073D6:  MOVLW  00
073D8:  BTFSC  x45.6
073DA:  MOVLW  01
073DC:  XORWF  xB5,W
073DE:  SUBLW  01
073E0:  BNZ   73E6
073E2:  BTFSC  x47.6
073E4:  BRA    73EA
073E6:  BTFSS  x51.6
073E8:  BRA    7476
....................       //if(Inputt.B15 == 0)
....................       {
....................          if(Ack.B15 == 0)
073EA:  BTFSC  x4F.6
073EC:  BRA    7474
....................          {
....................             if(In.B15 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
073EE:  BTFSC  x51.6
073F0:  BRA    740A
073F2:  MOVLB  0
073F4:  MOVF   x6C,W
073F6:  SUBLW  0F
073F8:  BTFSC  FD8.2
073FA:  BRA    7400
073FC:  MOVLB  C
073FE:  BRA    740A
....................             {
....................                TimeBase1s = 100 ;            //reload again
07400:  MOVLW  64
07402:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
07404:  MOVFF  6D,1F
07408:  MOVLB  C
....................             }
.................... 
....................             In.B15 = 1;                                 // setbit in1
0740A:  BSF    x51.6
....................             if(FlashingFlag == 0)
0740C:  BTFSC  1C.1
0740E:  BRA    7414
....................             {
....................                Output.B15 = 0;           //Flash output1
07410:  BCF    x43.6
....................             }
07412:  BRA    7416
....................             else
....................             {
....................                Output.B15 = 1;
07414:  BSF    x43.6
....................             }
.................... 
....................             if (~AutoTestFlag)
07416:  BTFSC  1C.4
07418:  BRA    7436
....................             {
....................                if(OutputBoth.B15 == 0)                  //Both output
0741A:  BTFSC  x4B.6
0741C:  BRA    7428
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0741E:  BSF    F89.4
07420:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07422:  BSF    F89.3
07424:  BCF    F92.3
....................                }
07426:  BRA    7436
....................                else
....................                {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,1);     //Buzzer
07428:  BTFSS  x49.6
0742A:  BRA    7432
0742C:  BSF    F89.4
0742E:  BCF    F92.4
07430:  BRA    7436
....................                   else output_bit(Pbell,1);                          //Bell
07432:  BSF    F89.3
07434:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B15 ==0)&& (functointest_f ==0) && (Ack.B15 ==0))
07436:  BTFSC  x5D.6
07438:  BRA    7474
0743A:  BTFSC  32.3
0743C:  BRA    7474
0743E:  BTFSC  x4F.6
07440:  BRA    7474
....................             {               
....................                SendSMS.B15 =1;
07442:  BSF    x5D.6
....................                strcat(SMS_MassageSUM, SMS_Massage15);
07444:  MOVLW  0B
07446:  MOVWF  xB5
07448:  MOVLW  9C
0744A:  MOVWF  xB4
0744C:  MOVLW  0B
0744E:  MOVWF  xB7
07450:  MOVLW  5C
07452:  MOVWF  xB6
07454:  MOVLB  0
07456:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
0745A:  MOVLW  0B
0745C:  MOVLB  C
0745E:  MOVWF  xB5
07460:  MOVLW  9C
07462:  MOVWF  xB4
07464:  MOVLW  0C
07466:  MOVWF  xB7
07468:  MOVLW  3C
0746A:  MOVWF  xB6
0746C:  MOVLB  0
0746E:  CALL   5CF6
07472:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage15);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
07474:  BRA    747C
....................       else if(FaultType.B15 == 1) Ack.B15 = 0;
07476:  BTFSS  x47.6
07478:  BRA    747C
0747A:  BCF    x4F.6
....................    }
0747C:  BRA    74DA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B15 ^ InputType.B15) == 1)
0747E:  MOVLW  00
07480:  BTFSC  x41.6
07482:  MOVLW  01
07484:  MOVWF  xB5
07486:  MOVLW  00
07488:  BTFSC  x45.6
0748A:  MOVLW  01
0748C:  XORWF  xB5,W
0748E:  SUBLW  01
07490:  BNZ   74D4
....................       {
....................          Output.B15 = 0;
07492:  BCF    x43.6
....................          // SMS Sending   
....................             if((SendSMS.B15 ==0)&& (functointest_f ==0) && (Ack.B15 ==0))
07494:  BTFSC  x5D.6
07496:  BRA    74D2
07498:  BTFSC  32.3
0749A:  BRA    74D2
0749C:  BTFSC  x4F.6
0749E:  BRA    74D2
....................             {               
....................                SendSMS.B15 =1;
074A0:  BSF    x5D.6
....................                strcat(SMS_MassageSUM, SMS_Massage15);
074A2:  MOVLW  0B
074A4:  MOVWF  xB5
074A6:  MOVLW  9C
074A8:  MOVWF  xB4
074AA:  MOVLW  0B
074AC:  MOVWF  xB7
074AE:  MOVLW  5C
074B0:  MOVWF  xB6
074B2:  MOVLB  0
074B4:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
074B8:  MOVLW  0B
074BA:  MOVLB  C
074BC:  MOVWF  xB5
074BE:  MOVLW  9C
074C0:  MOVWF  xB4
074C2:  MOVLW  0C
074C4:  MOVWF  xB7
074C6:  MOVLW  3C
074C8:  MOVWF  xB6
074CA:  MOVLB  0
074CC:  CALL   5CF6
074D0:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage15);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................             ///////////////////////////////////
....................       }
074D2:  BRA    74DA
....................       else
....................       {
....................          Output.B15 = 1;
074D4:  BSF    x43.6
....................          SendSMS.B15 =0;
074D6:  BCF    x5D.6
....................          functointest_f =0;
074D8:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if(AlarmIndicator.B16 == 1)    // Alarm Function
074DA:  BTFSS  x4D.7
074DC:  BRA    758E
....................    {
....................       if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 1))|| In.B16 == 1)    // alarm1 occure and "Lock type"
074DE:  MOVLW  00
074E0:  BTFSC  x41.7
074E2:  MOVLW  01
074E4:  MOVWF  xB5
074E6:  MOVLW  00
074E8:  BTFSC  x45.7
074EA:  MOVLW  01
074EC:  XORWF  xB5,W
074EE:  SUBLW  01
074F0:  BNZ   74F6
074F2:  BTFSC  x47.7
074F4:  BRA    74FA
074F6:  BTFSS  x51.7
074F8:  BRA    7586
....................       //if(Inputt.B16 == 0)
....................       {
....................          if(Ack.B16 == 0)
074FA:  BTFSC  x4F.7
074FC:  BRA    7584
....................          {
....................             if(In.B16 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
074FE:  BTFSC  x51.7
07500:  BRA    751A
07502:  MOVLB  0
07504:  MOVF   x6C,W
07506:  SUBLW  0F
07508:  BTFSC  FD8.2
0750A:  BRA    7510
0750C:  MOVLB  C
0750E:  BRA    751A
....................             {
....................                TimeBase1s = 100 ;            //reload again
07510:  MOVLW  64
07512:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
07514:  MOVFF  6D,1F
07518:  MOVLB  C
....................             }
.................... 
....................             In.B16 = 1;                                 // setbit in1
0751A:  BSF    x51.7
....................             if(FlashingFlag == 0)
0751C:  BTFSC  1C.1
0751E:  BRA    7524
....................             {
....................                Output.B16 = 0;           //Flash output1
07520:  BCF    x43.7
....................             }
07522:  BRA    7526
....................             else
....................             {
....................                Output.B16 = 1;
07524:  BSF    x43.7
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
07526:  BTFSC  1C.4
07528:  BRA    7546
....................             {
....................                if(OutputBoth.B16 == 0)                  //Both output
0752A:  BTFSC  x4B.7
0752C:  BRA    7538
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0752E:  BSF    F89.4
07530:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07532:  BSF    F89.3
07534:  BCF    F92.3
....................                }
07536:  BRA    7546
....................                else
....................                {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,1);     //Buzzer
07538:  BTFSS  x49.7
0753A:  BRA    7542
0753C:  BSF    F89.4
0753E:  BCF    F92.4
07540:  BRA    7546
....................                   else output_bit(Pbell,1);                          //Bell
07542:  BSF    F89.3
07544:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B16 ==0)&& (functointest_f ==0) && (Ack.B16 ==0))
07546:  BTFSC  x5D.7
07548:  BRA    7584
0754A:  BTFSC  32.3
0754C:  BRA    7584
0754E:  BTFSC  x4F.7
07550:  BRA    7584
....................             {               
....................                SendSMS.B16 =1;
07552:  BSF    x5D.7
....................                strcat(SMS_MassageSUM, SMS_Massage16);
07554:  MOVLW  0B
07556:  MOVWF  xB5
07558:  MOVLW  9C
0755A:  MOVWF  xB4
0755C:  MOVLW  0B
0755E:  MOVWF  xB7
07560:  MOVLW  7C
07562:  MOVWF  xB6
07564:  MOVLB  0
07566:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
0756A:  MOVLW  0B
0756C:  MOVLB  C
0756E:  MOVWF  xB5
07570:  MOVLW  9C
07572:  MOVWF  xB4
07574:  MOVLW  0C
07576:  MOVWF  xB7
07578:  MOVLW  3C
0757A:  MOVWF  xB6
0757C:  MOVLB  0
0757E:  CALL   5CF6
07582:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage16);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
07584:  BRA    758C
....................       else if(FaultType.B16 == 1) Ack.B16 = 0;
07586:  BTFSS  x47.7
07588:  BRA    758C
0758A:  BCF    x4F.7
....................    }
0758C:  BRA    75EA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B16 ^ InputType.B16) == 1)
0758E:  MOVLW  00
07590:  BTFSC  x41.7
07592:  MOVLW  01
07594:  MOVWF  xB5
07596:  MOVLW  00
07598:  BTFSC  x45.7
0759A:  MOVLW  01
0759C:  XORWF  xB5,W
0759E:  SUBLW  01
075A0:  BNZ   75E4
....................       {
....................          Output.B16 = 0;
075A2:  BCF    x43.7
....................          // SMS Sending   
....................             if((SendSMS.B16 ==0)&& (functointest_f ==0) && (Ack.B16 ==0))
075A4:  BTFSC  x5D.7
075A6:  BRA    75E2
075A8:  BTFSC  32.3
075AA:  BRA    75E2
075AC:  BTFSC  x4F.7
075AE:  BRA    75E2
....................             {               
....................                SendSMS.B16 =1;
075B0:  BSF    x5D.7
....................                strcat(SMS_MassageSUM, SMS_Massage16);
075B2:  MOVLW  0B
075B4:  MOVWF  xB5
075B6:  MOVLW  9C
075B8:  MOVWF  xB4
075BA:  MOVLW  0B
075BC:  MOVWF  xB7
075BE:  MOVLW  7C
075C0:  MOVWF  xB6
075C2:  MOVLB  0
075C4:  CALL   5CF6
....................                strcat(SMS_MassageSUM, spacestring);
075C8:  MOVLW  0B
075CA:  MOVLB  C
075CC:  MOVWF  xB5
075CE:  MOVLW  9C
075D0:  MOVWF  xB4
075D2:  MOVLW  0C
075D4:  MOVWF  xB7
075D6:  MOVLW  3C
075D8:  MOVWF  xB6
075DA:  MOVLB  0
075DC:  CALL   5CF6
075E0:  MOVLB  C
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
.................... 
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage16);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................             ///////////////////////////////////
....................       }
075E2:  BRA    75EA
....................       else
....................       {
....................          Output.B16 = 1;
075E4:  BSF    x43.7
....................          SendSMS.B16 =0;
075E6:  BCF    x5D.7
....................          functointest_f =0;
075E8:  BCF    32.3
....................       }
....................    }
.................... //}
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// AUTO RESET ///////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
075EA:  MOVLW  00
075EC:  BTFSC  x40.0
075EE:  MOVLW  01
075F0:  MOVWF  xB5
075F2:  MOVLW  00
075F4:  BTFSC  x44.0
075F6:  MOVLW  01
075F8:  XORWF  xB5,W
075FA:  SUBLW  01
075FC:  BNZ   7602
075FE:  BTFSS  x46.0
07600:  BRA    7606
07602:  BTFSS  1C.5
07604:  BRA    769E
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
07606:  BTFSC  x52.0
07608:  BRA    7626
0760A:  MOVLB  0
0760C:  MOVF   x6C,W
0760E:  SUBLW  0F
07610:  BTFSC  FD8.2
07612:  BRA    7618
07614:  MOVLB  C
07616:  BRA    7626
07618:  MOVLB  C
0761A:  BTFSC  x4E.0
0761C:  BRA    7626
....................       {
....................             TimeBase1s = 100 ;            //reload again
0761E:  MOVLW  64
07620:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
07622:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B1 = 1;
07626:  BSF    x52.0
....................       if(Ack.B1 == 0)
07628:  BTFSC  x4E.0
0762A:  BRA    765A
....................       {
....................          if(FlashingFlag == 0)
0762C:  BTFSC  1C.1
0762E:  BRA    7634
....................             {
....................                Output.B1 = 0;           //Flash output1
07630:  BCF    x42.0
....................             }
07632:  BRA    7636
....................             else
....................             {
....................                Output.B1 = 1;
07634:  BSF    x42.0
....................             }
....................          if (~AutoTestFlag)
07636:  BTFSC  1C.4
07638:  BRA    765A
....................          {
....................             if(AlarmIndicator.B1 == 1){
0763A:  BTFSS  x4C.0
0763C:  BRA    765A
....................                 if(OutputBoth.B1 == 0)        //Both output
0763E:  BTFSC  x4A.0
07640:  BRA    764C
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07642:  BSF    F89.4
07644:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07646:  BSF    F89.3
07648:  BCF    F92.3
....................                 }
0764A:  BRA    765A
....................                 else
....................                 {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
0764C:  BTFSS  x48.0
0764E:  BRA    7656
07650:  BSF    F89.4
07652:  BCF    F92.4
07654:  BRA    765A
....................                   else output_bit(Pbell,1);                          //Bell
07656:  BSF    F89.3
07658:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0765A:  MOVLW  01
0765C:  MOVWF  xB0
....................       // SMS Sending   
....................       if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
0765E:  BTFSC  x5C.0
07660:  BRA    769C
07662:  BTFSC  32.3
07664:  BRA    769C
07666:  BTFSC  x4E.0
07668:  BRA    769C
....................       {
....................          SendSMS.B1 =1;
0766A:  BSF    x5C.0
....................          strcat(SMS_MassageSUM, SMS_Massage1);
0766C:  MOVLW  0B
0766E:  MOVWF  xB5
07670:  MOVLW  9C
07672:  MOVWF  xB4
07674:  MOVLW  09
07676:  MOVWF  xB7
07678:  MOVLW  9C
0767A:  MOVWF  xB6
0767C:  MOVLB  0
0767E:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
07682:  MOVLW  0B
07684:  MOVLB  C
07686:  MOVWF  xB5
07688:  MOVLW  9C
0768A:  MOVWF  xB4
0768C:  MOVLW  0C
0768E:  MOVWF  xB7
07690:  MOVLW  3C
07692:  MOVWF  xB6
07694:  MOVLB  0
07696:  CALL   5CF6
0769A:  MOVLB  C
....................        /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage1);   
....................         putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
0769C:  BRA    7736
....................    else if(FaultType.B1 == 0)
0769E:  BTFSC  x46.0
076A0:  BRA    7736
....................    {
....................       In2.B1 = 0x00;
076A2:  BCF    x52.0
....................       Ack.B1 = 0;
076A4:  BCF    x4E.0
....................       Output.B1 = 1;      //Off LED
076A6:  BSF    x42.0
....................       
....................       SendSMS.B1 =0;// Clear SMS
076A8:  BCF    x5C.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0)&& inputflag ==0)      //If Buzzer or Both
076AA:  BTFSC  x48.0
076AC:  BRA    76B2
076AE:  BTFSC  x4A.0
076B0:  BRA    76CC
076B2:  MOVF   xB0,F
076B4:  BNZ   76CC
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
076B6:  MOVLW  01
076B8:  MOVWF  xB4
076BA:  MOVLB  0
076BC:  CALL   5D60
076C0:  DECFSZ 01,W
076C2:  BRA    76C6
076C4:  BRA    76CA
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
076C6:  BCF    F89.4
076C8:  BCF    F92.4
076CA:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0)&& inputflag ==0)  //If Bell or Both
076CC:  BTFSS  x48.0
076CE:  BRA    76D4
076D0:  BTFSC  x4A.0
076D2:  BRA    76EE
076D4:  MOVF   xB0,F
076D6:  BNZ   76EE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
076D8:  MOVLW  02
076DA:  MOVWF  xB4
076DC:  MOVLB  0
076DE:  CALL   5D60
076E2:  DECFSZ 01,W
076E4:  BRA    76E8
076E6:  BRA    76EC
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
076E8:  BCF    F89.3
076EA:  BCF    F92.3
076EC:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
076EE:  BTFSC  x52.0
076F0:  BRA    7736
076F2:  BTFSC  x52.1
076F4:  BRA    7736
076F6:  BTFSC  x52.2
076F8:  BRA    7736
076FA:  BTFSC  x52.3
076FC:  BRA    7736
076FE:  BTFSC  x52.4
07700:  BRA    7736
07702:  BTFSC  x52.5
07704:  BRA    7736
07706:  BTFSC  x52.6
07708:  BRA    7736
0770A:  BTFSC  x52.7
0770C:  BRA    7736
0770E:  BTFSC  x53.0
07710:  BRA    7736
07712:  BTFSC  x53.1
07714:  BRA    7736
07716:  BTFSC  x53.2
07718:  BRA    7736
0771A:  BTFSC  x53.3
0771C:  BRA    7736
0771E:  BTFSC  x53.4
07720:  BRA    7736
07722:  BTFSC  x53.5
07724:  BRA    7736
07726:  BTFSC  x53.6
07728:  BRA    7736
0772A:  BTFSC  x53.7
0772C:  BRA    7736
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0772E:  BCF    F89.3
07730:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
07732:  BCF    F89.4
07734:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
07736:  MOVLW  00
07738:  BTFSC  x40.1
0773A:  MOVLW  01
0773C:  MOVWF  xB5
0773E:  MOVLW  00
07740:  BTFSC  x44.1
07742:  MOVLW  01
07744:  XORWF  xB5,W
07746:  SUBLW  01
07748:  BNZ   774E
0774A:  BTFSS  x46.1
0774C:  BRA    7752
0774E:  BTFSS  1C.5
07750:  BRA    77EA
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
07752:  BTFSC  x52.1
07754:  BRA    7772
07756:  MOVLB  0
07758:  MOVF   x6C,W
0775A:  SUBLW  0F
0775C:  BTFSC  FD8.2
0775E:  BRA    7764
07760:  MOVLB  C
07762:  BRA    7772
07764:  MOVLB  C
07766:  BTFSC  x4E.1
07768:  BRA    7772
....................       {
....................             TimeBase1s = 100 ;            //reload again
0776A:  MOVLW  64
0776C:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0776E:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B2 = 1;
07772:  BSF    x52.1
....................       if(Ack.B2 == 0)
07774:  BTFSC  x4E.1
07776:  BRA    77A6
....................       {
....................          if(FlashingFlag == 0)
07778:  BTFSC  1C.1
0777A:  BRA    7780
....................             {
....................                Output.B2 = 0;           //Flash output1
0777C:  BCF    x42.1
....................             }
0777E:  BRA    7782
....................             else
....................             {
....................                Output.B2 = 1;
07780:  BSF    x42.1
....................             }
....................          if (~AutoTestFlag)
07782:  BTFSC  1C.4
07784:  BRA    77A6
....................          {
....................             if(AlarmIndicator.B2 == 1){
07786:  BTFSS  x4C.1
07788:  BRA    77A6
....................                 if(OutputBoth.B2 == 0)        //Both output
0778A:  BTFSC  x4A.1
0778C:  BRA    7798
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0778E:  BSF    F89.4
07790:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07792:  BSF    F89.3
07794:  BCF    F92.3
....................                 }
07796:  BRA    77A6
....................                 else
....................                 {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
07798:  BTFSS  x48.1
0779A:  BRA    77A2
0779C:  BSF    F89.4
0779E:  BCF    F92.4
077A0:  BRA    77A6
....................                   else output_bit(Pbell,1);                          //Bell
077A2:  BSF    F89.3
077A4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
077A6:  MOVLW  01
077A8:  MOVWF  xB0
....................       // SMS Sending   
....................       if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
077AA:  BTFSC  x5C.1
077AC:  BRA    77E8
077AE:  BTFSC  32.3
077B0:  BRA    77E8
077B2:  BTFSC  x4E.1
077B4:  BRA    77E8
....................       {
....................          SendSMS.B2 =1;
077B6:  BSF    x5C.1
....................          strcat(SMS_MassageSUM, SMS_Massage2);
077B8:  MOVLW  0B
077BA:  MOVWF  xB5
077BC:  MOVLW  9C
077BE:  MOVWF  xB4
077C0:  MOVLW  09
077C2:  MOVWF  xB7
077C4:  MOVLW  BC
077C6:  MOVWF  xB6
077C8:  MOVLB  0
077CA:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
077CE:  MOVLW  0B
077D0:  MOVLB  C
077D2:  MOVWF  xB5
077D4:  MOVLW  9C
077D6:  MOVWF  xB4
077D8:  MOVLW  0C
077DA:  MOVWF  xB7
077DC:  MOVLW  3C
077DE:  MOVWF  xB6
077E0:  MOVLB  0
077E2:  CALL   5CF6
077E6:  MOVLB  C
....................        /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage2); 
....................         putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
077E8:  BRA    7882
....................    else if(FaultType.B2 == 0)
077EA:  BTFSC  x46.1
077EC:  BRA    7882
....................    {
....................       In2.B2 = 0x00;
077EE:  BCF    x52.1
....................       Ack.B2 = 0;
077F0:  BCF    x4E.1
....................       Output.B2 = 1;      //Off LED
077F2:  BSF    x42.1
....................       
....................       SendSMS.B2 =0;// Clear SMS
077F4:  BCF    x5C.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0)&& inputflag ==0)      //If Buzzer or Both
077F6:  BTFSC  x48.1
077F8:  BRA    77FE
077FA:  BTFSC  x4A.1
077FC:  BRA    7818
077FE:  MOVF   xB0,F
07800:  BNZ   7818
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
07802:  MOVLW  01
07804:  MOVWF  xB4
07806:  MOVLB  0
07808:  CALL   5D60
0780C:  DECFSZ 01,W
0780E:  BRA    7812
07810:  BRA    7816
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
07812:  BCF    F89.4
07814:  BCF    F92.4
07816:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0)&& inputflag ==0)  //If Bell or Both
07818:  BTFSS  x48.1
0781A:  BRA    7820
0781C:  BTFSC  x4A.1
0781E:  BRA    783A
07820:  MOVF   xB0,F
07822:  BNZ   783A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
07824:  MOVLW  02
07826:  MOVWF  xB4
07828:  MOVLB  0
0782A:  CALL   5D60
0782E:  DECFSZ 01,W
07830:  BRA    7834
07832:  BRA    7838
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
07834:  BCF    F89.3
07836:  BCF    F92.3
07838:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
0783A:  BTFSC  x52.0
0783C:  BRA    7882
0783E:  BTFSC  x52.1
07840:  BRA    7882
07842:  BTFSC  x52.2
07844:  BRA    7882
07846:  BTFSC  x52.3
07848:  BRA    7882
0784A:  BTFSC  x52.4
0784C:  BRA    7882
0784E:  BTFSC  x52.5
07850:  BRA    7882
07852:  BTFSC  x52.6
07854:  BRA    7882
07856:  BTFSC  x52.7
07858:  BRA    7882
0785A:  BTFSC  x53.0
0785C:  BRA    7882
0785E:  BTFSC  x53.1
07860:  BRA    7882
07862:  BTFSC  x53.2
07864:  BRA    7882
07866:  BTFSC  x53.3
07868:  BRA    7882
0786A:  BTFSC  x53.4
0786C:  BRA    7882
0786E:  BTFSC  x53.5
07870:  BRA    7882
07872:  BTFSC  x53.6
07874:  BRA    7882
07876:  BTFSC  x53.7
07878:  BRA    7882
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0787A:  BCF    F89.3
0787C:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0787E:  BCF    F89.4
07880:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
07882:  MOVLW  00
07884:  BTFSC  x40.2
07886:  MOVLW  01
07888:  MOVWF  xB5
0788A:  MOVLW  00
0788C:  BTFSC  x44.2
0788E:  MOVLW  01
07890:  XORWF  xB5,W
07892:  SUBLW  01
07894:  BNZ   789A
07896:  BTFSS  x46.2
07898:  BRA    789E
0789A:  BTFSS  1C.5
0789C:  BRA    7936
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
0789E:  BTFSC  x52.2
078A0:  BRA    78BE
078A2:  MOVLB  0
078A4:  MOVF   x6C,W
078A6:  SUBLW  0F
078A8:  BTFSC  FD8.2
078AA:  BRA    78B0
078AC:  MOVLB  C
078AE:  BRA    78BE
078B0:  MOVLB  C
078B2:  BTFSC  x4E.2
078B4:  BRA    78BE
....................       {
....................             TimeBase1s = 100 ;            //reload again
078B6:  MOVLW  64
078B8:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
078BA:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B3 = 1;
078BE:  BSF    x52.2
....................       if(Ack.B3 == 0)
078C0:  BTFSC  x4E.2
078C2:  BRA    78F2
....................       {
....................          if(FlashingFlag == 0)
078C4:  BTFSC  1C.1
078C6:  BRA    78CC
....................             {
....................                Output.B3 = 0;           //Flash output1
078C8:  BCF    x42.2
....................             }
078CA:  BRA    78CE
....................             else
....................             {
....................                Output.B3 = 1;
078CC:  BSF    x42.2
....................             }
....................          if (~AutoTestFlag)
078CE:  BTFSC  1C.4
078D0:  BRA    78F2
....................          {
....................             if(AlarmIndicator.B3 == 1){
078D2:  BTFSS  x4C.2
078D4:  BRA    78F2
....................                 if(OutputBoth.B3 == 0)        //Both output
078D6:  BTFSC  x4A.2
078D8:  BRA    78E4
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
078DA:  BSF    F89.4
078DC:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
078DE:  BSF    F89.3
078E0:  BCF    F92.3
....................                 }
078E2:  BRA    78F2
....................                 else
....................                 {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
078E4:  BTFSS  x48.2
078E6:  BRA    78EE
078E8:  BSF    F89.4
078EA:  BCF    F92.4
078EC:  BRA    78F2
....................                   else output_bit(Pbell,1);                          //Bell
078EE:  BSF    F89.3
078F0:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
078F2:  MOVLW  01
078F4:  MOVWF  xB0
....................       // SMS Sending   
....................       if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
078F6:  BTFSC  x5C.2
078F8:  BRA    7934
078FA:  BTFSC  32.3
078FC:  BRA    7934
078FE:  BTFSC  x4E.2
07900:  BRA    7934
....................       {
....................          SendSMS.B3 =1;
07902:  BSF    x5C.2
....................          strcat(SMS_MassageSUM, SMS_Massage3);
07904:  MOVLW  0B
07906:  MOVWF  xB5
07908:  MOVLW  9C
0790A:  MOVWF  xB4
0790C:  MOVLW  09
0790E:  MOVWF  xB7
07910:  MOVLW  DC
07912:  MOVWF  xB6
07914:  MOVLB  0
07916:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
0791A:  MOVLW  0B
0791C:  MOVLB  C
0791E:  MOVWF  xB5
07920:  MOVLW  9C
07922:  MOVWF  xB4
07924:  MOVLW  0C
07926:  MOVWF  xB7
07928:  MOVLW  3C
0792A:  MOVWF  xB6
0792C:  MOVLB  0
0792E:  CALL   5CF6
07932:  MOVLB  C
....................        /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage3); 
....................         putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
07934:  BRA    79CE
....................    else if(FaultType.B3 == 0)
07936:  BTFSC  x46.2
07938:  BRA    79CE
....................    {
....................       In2.B3 = 0x00;
0793A:  BCF    x52.2
....................       Ack.B3 = 0;
0793C:  BCF    x4E.2
....................       Output.B3 = 1;      //Off LED
0793E:  BSF    x42.2
....................       
....................       SendSMS.B3 =0;// Clear SMS
07940:  BCF    x5C.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0)&& inputflag ==0)      //If Buzzer or Both
07942:  BTFSC  x48.2
07944:  BRA    794A
07946:  BTFSC  x4A.2
07948:  BRA    7964
0794A:  MOVF   xB0,F
0794C:  BNZ   7964
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0794E:  MOVLW  01
07950:  MOVWF  xB4
07952:  MOVLB  0
07954:  CALL   5D60
07958:  DECFSZ 01,W
0795A:  BRA    795E
0795C:  BRA    7962
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0795E:  BCF    F89.4
07960:  BCF    F92.4
07962:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0)&& inputflag ==0)  //If Bell or Both
07964:  BTFSS  x48.2
07966:  BRA    796C
07968:  BTFSC  x4A.2
0796A:  BRA    7986
0796C:  MOVF   xB0,F
0796E:  BNZ   7986
....................       {
....................          if(CheckAutoReset(0x02) == 1);
07970:  MOVLW  02
07972:  MOVWF  xB4
07974:  MOVLB  0
07976:  CALL   5D60
0797A:  DECFSZ 01,W
0797C:  BRA    7980
0797E:  BRA    7984
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
07980:  BCF    F89.3
07982:  BCF    F92.3
07984:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
07986:  BTFSC  x52.0
07988:  BRA    79CE
0798A:  BTFSC  x52.1
0798C:  BRA    79CE
0798E:  BTFSC  x52.2
07990:  BRA    79CE
07992:  BTFSC  x52.3
07994:  BRA    79CE
07996:  BTFSC  x52.4
07998:  BRA    79CE
0799A:  BTFSC  x52.5
0799C:  BRA    79CE
0799E:  BTFSC  x52.6
079A0:  BRA    79CE
079A2:  BTFSC  x52.7
079A4:  BRA    79CE
079A6:  BTFSC  x53.0
079A8:  BRA    79CE
079AA:  BTFSC  x53.1
079AC:  BRA    79CE
079AE:  BTFSC  x53.2
079B0:  BRA    79CE
079B2:  BTFSC  x53.3
079B4:  BRA    79CE
079B6:  BTFSC  x53.4
079B8:  BRA    79CE
079BA:  BTFSC  x53.5
079BC:  BRA    79CE
079BE:  BTFSC  x53.6
079C0:  BRA    79CE
079C2:  BTFSC  x53.7
079C4:  BRA    79CE
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
079C6:  BCF    F89.3
079C8:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
079CA:  BCF    F89.4
079CC:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
079CE:  MOVLW  00
079D0:  BTFSC  x40.3
079D2:  MOVLW  01
079D4:  MOVWF  xB5
079D6:  MOVLW  00
079D8:  BTFSC  x44.3
079DA:  MOVLW  01
079DC:  XORWF  xB5,W
079DE:  SUBLW  01
079E0:  BNZ   79E6
079E2:  BTFSS  x46.3
079E4:  BRA    79EA
079E6:  BTFSS  1C.5
079E8:  BRA    7A82
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
079EA:  BTFSC  x52.3
079EC:  BRA    7A0A
079EE:  MOVLB  0
079F0:  MOVF   x6C,W
079F2:  SUBLW  0F
079F4:  BTFSC  FD8.2
079F6:  BRA    79FC
079F8:  MOVLB  C
079FA:  BRA    7A0A
079FC:  MOVLB  C
079FE:  BTFSC  x4E.3
07A00:  BRA    7A0A
....................       {
....................             TimeBase1s = 100 ;            //reload again
07A02:  MOVLW  64
07A04:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
07A06:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B4 = 1;
07A0A:  BSF    x52.3
....................       if(Ack.B4 == 0)
07A0C:  BTFSC  x4E.3
07A0E:  BRA    7A3E
....................       {
....................          if(FlashingFlag == 0)
07A10:  BTFSC  1C.1
07A12:  BRA    7A18
....................             {
....................                Output.B4 = 0;           //Flash output1
07A14:  BCF    x42.3
....................             }
07A16:  BRA    7A1A
....................             else
....................             {
....................                Output.B4 = 1;
07A18:  BSF    x42.3
....................             }
....................          if (~AutoTestFlag)
07A1A:  BTFSC  1C.4
07A1C:  BRA    7A3E
....................          {
....................             if(AlarmIndicator.B4 == 1){
07A1E:  BTFSS  x4C.3
07A20:  BRA    7A3E
....................                 if(OutputBoth.B4 == 0)        //Both output
07A22:  BTFSC  x4A.3
07A24:  BRA    7A30
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07A26:  BSF    F89.4
07A28:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07A2A:  BSF    F89.3
07A2C:  BCF    F92.3
....................                 }
07A2E:  BRA    7A3E
....................                 else
....................                 {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
07A30:  BTFSS  x48.3
07A32:  BRA    7A3A
07A34:  BSF    F89.4
07A36:  BCF    F92.4
07A38:  BRA    7A3E
....................                   else output_bit(Pbell,1);                          //Bell
07A3A:  BSF    F89.3
07A3C:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
07A3E:  MOVLW  01
07A40:  MOVWF  xB0
....................       // SMS Sending   
....................       if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
07A42:  BTFSC  x5C.3
07A44:  BRA    7A80
07A46:  BTFSC  32.3
07A48:  BRA    7A80
07A4A:  BTFSC  x4E.3
07A4C:  BRA    7A80
....................       {
....................          SendSMS.B4 =1;
07A4E:  BSF    x5C.3
....................          strcat(SMS_MassageSUM, SMS_Massage4);
07A50:  MOVLW  0B
07A52:  MOVWF  xB5
07A54:  MOVLW  9C
07A56:  MOVWF  xB4
07A58:  MOVLW  09
07A5A:  MOVWF  xB7
07A5C:  MOVLW  FC
07A5E:  MOVWF  xB6
07A60:  MOVLB  0
07A62:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
07A66:  MOVLW  0B
07A68:  MOVLB  C
07A6A:  MOVWF  xB5
07A6C:  MOVLW  9C
07A6E:  MOVWF  xB4
07A70:  MOVLW  0C
07A72:  MOVWF  xB7
07A74:  MOVLW  3C
07A76:  MOVWF  xB6
07A78:  MOVLB  0
07A7A:  CALL   5CF6
07A7E:  MOVLB  C
....................        /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage4); 
....................         putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
07A80:  BRA    7B1A
....................    else if(FaultType.B4 == 0)
07A82:  BTFSC  x46.3
07A84:  BRA    7B1A
....................    {
....................       In2.B4 = 0x00;
07A86:  BCF    x52.3
....................       Ack.B4 = 0;
07A88:  BCF    x4E.3
....................       Output.B4 = 1;      //Off LED
07A8A:  BSF    x42.3
....................       SendSMS.B4 =0;// Clear SMS
07A8C:  BCF    x5C.3
....................       
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0)&& inputflag ==0)      //If Buzzer or Both
07A8E:  BTFSC  x48.3
07A90:  BRA    7A96
07A92:  BTFSC  x4A.3
07A94:  BRA    7AB0
07A96:  MOVF   xB0,F
07A98:  BNZ   7AB0
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
07A9A:  MOVLW  01
07A9C:  MOVWF  xB4
07A9E:  MOVLB  0
07AA0:  CALL   5D60
07AA4:  DECFSZ 01,W
07AA6:  BRA    7AAA
07AA8:  BRA    7AAE
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
07AAA:  BCF    F89.4
07AAC:  BCF    F92.4
07AAE:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0)&& inputflag ==0)  //If Bell or Both
07AB0:  BTFSS  x48.3
07AB2:  BRA    7AB8
07AB4:  BTFSC  x4A.3
07AB6:  BRA    7AD2
07AB8:  MOVF   xB0,F
07ABA:  BNZ   7AD2
....................       {
....................          if(CheckAutoReset(0x02) == 1);
07ABC:  MOVLW  02
07ABE:  MOVWF  xB4
07AC0:  MOVLB  0
07AC2:  CALL   5D60
07AC6:  DECFSZ 01,W
07AC8:  BRA    7ACC
07ACA:  BRA    7AD0
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
07ACC:  BCF    F89.3
07ACE:  BCF    F92.3
07AD0:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
07AD2:  BTFSC  x52.0
07AD4:  BRA    7B1A
07AD6:  BTFSC  x52.1
07AD8:  BRA    7B1A
07ADA:  BTFSC  x52.2
07ADC:  BRA    7B1A
07ADE:  BTFSC  x52.3
07AE0:  BRA    7B1A
07AE2:  BTFSC  x52.4
07AE4:  BRA    7B1A
07AE6:  BTFSC  x52.5
07AE8:  BRA    7B1A
07AEA:  BTFSC  x52.6
07AEC:  BRA    7B1A
07AEE:  BTFSC  x52.7
07AF0:  BRA    7B1A
07AF2:  BTFSC  x53.0
07AF4:  BRA    7B1A
07AF6:  BTFSC  x53.1
07AF8:  BRA    7B1A
07AFA:  BTFSC  x53.2
07AFC:  BRA    7B1A
07AFE:  BTFSC  x53.3
07B00:  BRA    7B1A
07B02:  BTFSC  x53.4
07B04:  BRA    7B1A
07B06:  BTFSC  x53.5
07B08:  BRA    7B1A
07B0A:  BTFSC  x53.6
07B0C:  BRA    7B1A
07B0E:  BTFSC  x53.7
07B10:  BRA    7B1A
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
07B12:  BCF    F89.3
07B14:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
07B16:  BCF    F89.4
07B18:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
07B1A:  MOVLW  00
07B1C:  BTFSC  x40.4
07B1E:  MOVLW  01
07B20:  MOVWF  xB5
07B22:  MOVLW  00
07B24:  BTFSC  x44.4
07B26:  MOVLW  01
07B28:  XORWF  xB5,W
07B2A:  SUBLW  01
07B2C:  BNZ   7B32
07B2E:  BTFSS  x46.4
07B30:  BRA    7B36
07B32:  BTFSS  1C.5
07B34:  BRA    7BCE
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
07B36:  BTFSC  x52.4
07B38:  BRA    7B56
07B3A:  MOVLB  0
07B3C:  MOVF   x6C,W
07B3E:  SUBLW  0F
07B40:  BTFSC  FD8.2
07B42:  BRA    7B48
07B44:  MOVLB  C
07B46:  BRA    7B56
07B48:  MOVLB  C
07B4A:  BTFSC  x4E.4
07B4C:  BRA    7B56
....................       {
....................             TimeBase1s = 100 ;            //reload again
07B4E:  MOVLW  64
07B50:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
07B52:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B5 = 1;
07B56:  BSF    x52.4
....................       if(Ack.B5 == 0)
07B58:  BTFSC  x4E.4
07B5A:  BRA    7B8A
....................       {
....................          if(FlashingFlag == 0)
07B5C:  BTFSC  1C.1
07B5E:  BRA    7B64
....................             {
....................                Output.B5 = 0;           //Flash output1
07B60:  BCF    x42.4
....................             }
07B62:  BRA    7B66
....................             else
....................             {
....................                Output.B5 = 1;
07B64:  BSF    x42.4
....................             }
....................          if (~AutoTestFlag)
07B66:  BTFSC  1C.4
07B68:  BRA    7B8A
....................          {
....................             if(AlarmIndicator.B5 == 1){
07B6A:  BTFSS  x4C.4
07B6C:  BRA    7B8A
....................                 if(OutputBoth.B5 == 0)        //Both output
07B6E:  BTFSC  x4A.4
07B70:  BRA    7B7C
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07B72:  BSF    F89.4
07B74:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07B76:  BSF    F89.3
07B78:  BCF    F92.3
....................                 }
07B7A:  BRA    7B8A
....................                 else
....................                 {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
07B7C:  BTFSS  x48.4
07B7E:  BRA    7B86
07B80:  BSF    F89.4
07B82:  BCF    F92.4
07B84:  BRA    7B8A
....................                   else output_bit(Pbell,1);                          //Bell
07B86:  BSF    F89.3
07B88:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
07B8A:  MOVLW  01
07B8C:  MOVWF  xB0
....................       // SMS Sending   
....................       if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
07B8E:  BTFSC  x5C.4
07B90:  BRA    7BCC
07B92:  BTFSC  32.3
07B94:  BRA    7BCC
07B96:  BTFSC  x4E.4
07B98:  BRA    7BCC
....................       {
....................          SendSMS.B5 =1;
07B9A:  BSF    x5C.4
....................          strcat(SMS_MassageSUM, SMS_Massage5);
07B9C:  MOVLW  0B
07B9E:  MOVWF  xB5
07BA0:  MOVLW  9C
07BA2:  MOVWF  xB4
07BA4:  MOVLW  0A
07BA6:  MOVWF  xB7
07BA8:  MOVLW  1C
07BAA:  MOVWF  xB6
07BAC:  MOVLB  0
07BAE:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
07BB2:  MOVLW  0B
07BB4:  MOVLB  C
07BB6:  MOVWF  xB5
07BB8:  MOVLW  9C
07BBA:  MOVWF  xB4
07BBC:  MOVLW  0C
07BBE:  MOVWF  xB7
07BC0:  MOVLW  3C
07BC2:  MOVWF  xB6
07BC4:  MOVLB  0
07BC6:  CALL   5CF6
07BCA:  MOVLB  C
....................        /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage5); 
....................         putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
07BCC:  BRA    7C66
....................    else if(FaultType.B5 == 0)
07BCE:  BTFSC  x46.4
07BD0:  BRA    7C66
....................    {
....................       In2.B5 = 0x00;
07BD2:  BCF    x52.4
....................       Ack.B5 = 0;
07BD4:  BCF    x4E.4
....................       Output.B5 = 1;      //Off LED
07BD6:  BSF    x42.4
....................       SendSMS.B5 =0;// Clear SMS
07BD8:  BCF    x5C.4
....................        
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0)&& inputflag ==0)      //If Buzzer or Both
07BDA:  BTFSC  x48.4
07BDC:  BRA    7BE2
07BDE:  BTFSC  x4A.4
07BE0:  BRA    7BFC
07BE2:  MOVF   xB0,F
07BE4:  BNZ   7BFC
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
07BE6:  MOVLW  01
07BE8:  MOVWF  xB4
07BEA:  MOVLB  0
07BEC:  CALL   5D60
07BF0:  DECFSZ 01,W
07BF2:  BRA    7BF6
07BF4:  BRA    7BFA
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
07BF6:  BCF    F89.4
07BF8:  BCF    F92.4
07BFA:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0)&& inputflag ==0)  //If Bell or Both
07BFC:  BTFSS  x48.4
07BFE:  BRA    7C04
07C00:  BTFSC  x4A.4
07C02:  BRA    7C1E
07C04:  MOVF   xB0,F
07C06:  BNZ   7C1E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
07C08:  MOVLW  02
07C0A:  MOVWF  xB4
07C0C:  MOVLB  0
07C0E:  CALL   5D60
07C12:  DECFSZ 01,W
07C14:  BRA    7C18
07C16:  BRA    7C1C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
07C18:  BCF    F89.3
07C1A:  BCF    F92.3
07C1C:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
07C1E:  BTFSC  x52.0
07C20:  BRA    7C66
07C22:  BTFSC  x52.1
07C24:  BRA    7C66
07C26:  BTFSC  x52.2
07C28:  BRA    7C66
07C2A:  BTFSC  x52.3
07C2C:  BRA    7C66
07C2E:  BTFSC  x52.4
07C30:  BRA    7C66
07C32:  BTFSC  x52.5
07C34:  BRA    7C66
07C36:  BTFSC  x52.6
07C38:  BRA    7C66
07C3A:  BTFSC  x52.7
07C3C:  BRA    7C66
07C3E:  BTFSC  x53.0
07C40:  BRA    7C66
07C42:  BTFSC  x53.1
07C44:  BRA    7C66
07C46:  BTFSC  x53.2
07C48:  BRA    7C66
07C4A:  BTFSC  x53.3
07C4C:  BRA    7C66
07C4E:  BTFSC  x53.4
07C50:  BRA    7C66
07C52:  BTFSC  x53.5
07C54:  BRA    7C66
07C56:  BTFSC  x53.6
07C58:  BRA    7C66
07C5A:  BTFSC  x53.7
07C5C:  BRA    7C66
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
07C5E:  BCF    F89.3
07C60:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
07C62:  BCF    F89.4
07C64:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
07C66:  MOVLW  00
07C68:  BTFSC  x40.5
07C6A:  MOVLW  01
07C6C:  MOVWF  xB5
07C6E:  MOVLW  00
07C70:  BTFSC  x44.5
07C72:  MOVLW  01
07C74:  XORWF  xB5,W
07C76:  SUBLW  01
07C78:  BNZ   7C7E
07C7A:  BTFSS  x46.5
07C7C:  BRA    7C82
07C7E:  BTFSS  1C.5
07C80:  BRA    7D1A
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
07C82:  BTFSC  x52.5
07C84:  BRA    7CA2
07C86:  MOVLB  0
07C88:  MOVF   x6C,W
07C8A:  SUBLW  0F
07C8C:  BTFSC  FD8.2
07C8E:  BRA    7C94
07C90:  MOVLB  C
07C92:  BRA    7CA2
07C94:  MOVLB  C
07C96:  BTFSC  x4E.5
07C98:  BRA    7CA2
....................       {
....................             TimeBase1s = 100 ;            //reload again
07C9A:  MOVLW  64
07C9C:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
07C9E:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B6 = 1;
07CA2:  BSF    x52.5
....................       if(Ack.B6 == 0)
07CA4:  BTFSC  x4E.5
07CA6:  BRA    7CD6
....................       {
....................          if(FlashingFlag == 0)
07CA8:  BTFSC  1C.1
07CAA:  BRA    7CB0
....................             {
....................                Output.B6 = 0;           //Flash output1
07CAC:  BCF    x42.5
....................             }
07CAE:  BRA    7CB2
....................             else
....................             {
....................                Output.B6 = 1;
07CB0:  BSF    x42.5
....................             }
....................          if (~AutoTestFlag)
07CB2:  BTFSC  1C.4
07CB4:  BRA    7CD6
....................          {
....................             if(AlarmIndicator.B6 == 1){
07CB6:  BTFSS  x4C.5
07CB8:  BRA    7CD6
....................                 if(OutputBoth.B6 == 0)        //Both output
07CBA:  BTFSC  x4A.5
07CBC:  BRA    7CC8
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07CBE:  BSF    F89.4
07CC0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07CC2:  BSF    F89.3
07CC4:  BCF    F92.3
....................                 }
07CC6:  BRA    7CD6
....................                 else
....................                 {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
07CC8:  BTFSS  x48.5
07CCA:  BRA    7CD2
07CCC:  BSF    F89.4
07CCE:  BCF    F92.4
07CD0:  BRA    7CD6
....................                   else output_bit(Pbell,1);                          //Bell
07CD2:  BSF    F89.3
07CD4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
07CD6:  MOVLW  01
07CD8:  MOVWF  xB0
....................       // SMS Sending   
....................       if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
07CDA:  BTFSC  x5C.5
07CDC:  BRA    7D18
07CDE:  BTFSC  32.3
07CE0:  BRA    7D18
07CE2:  BTFSC  x4E.5
07CE4:  BRA    7D18
....................       {
....................          SendSMS.B6 =1;
07CE6:  BSF    x5C.5
....................          strcat(SMS_MassageSUM, SMS_Massage6);
07CE8:  MOVLW  0B
07CEA:  MOVWF  xB5
07CEC:  MOVLW  9C
07CEE:  MOVWF  xB4
07CF0:  MOVLW  0A
07CF2:  MOVWF  xB7
07CF4:  MOVLW  3C
07CF6:  MOVWF  xB6
07CF8:  MOVLB  0
07CFA:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
07CFE:  MOVLW  0B
07D00:  MOVLB  C
07D02:  MOVWF  xB5
07D04:  MOVLW  9C
07D06:  MOVWF  xB4
07D08:  MOVLW  0C
07D0A:  MOVWF  xB7
07D0C:  MOVLW  3C
07D0E:  MOVWF  xB6
07D10:  MOVLB  0
07D12:  CALL   5CF6
07D16:  MOVLB  C
....................        /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage6);  
....................         putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
07D18:  BRA    7DB2
....................    else if(FaultType.B6 == 0)
07D1A:  BTFSC  x46.5
07D1C:  BRA    7DB2
....................    {
....................       In2.B6 = 0x00;
07D1E:  BCF    x52.5
....................       Ack.B6 = 0;
07D20:  BCF    x4E.5
....................       Output.B6 = 1;      //Off LED
07D22:  BSF    x42.5
....................       SendSMS.B6 =0;// Clear SMS
07D24:  BCF    x5C.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)      //If Buzzer or Both
07D26:  BTFSC  x48.5
07D28:  BRA    7D2E
07D2A:  BTFSC  x4A.5
07D2C:  BRA    7D48
07D2E:  MOVF   xB0,F
07D30:  BNZ   7D48
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
07D32:  MOVLW  01
07D34:  MOVWF  xB4
07D36:  MOVLB  0
07D38:  CALL   5D60
07D3C:  DECFSZ 01,W
07D3E:  BRA    7D42
07D40:  BRA    7D46
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
07D42:  BCF    F89.4
07D44:  BCF    F92.4
07D46:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)  //If Bell or Both
07D48:  BTFSS  x48.5
07D4A:  BRA    7D50
07D4C:  BTFSC  x4A.5
07D4E:  BRA    7D6A
07D50:  MOVF   xB0,F
07D52:  BNZ   7D6A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
07D54:  MOVLW  02
07D56:  MOVWF  xB4
07D58:  MOVLB  0
07D5A:  CALL   5D60
07D5E:  DECFSZ 01,W
07D60:  BRA    7D64
07D62:  BRA    7D68
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
07D64:  BCF    F89.3
07D66:  BCF    F92.3
07D68:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
07D6A:  BTFSC  x52.0
07D6C:  BRA    7DB2
07D6E:  BTFSC  x52.1
07D70:  BRA    7DB2
07D72:  BTFSC  x52.2
07D74:  BRA    7DB2
07D76:  BTFSC  x52.3
07D78:  BRA    7DB2
07D7A:  BTFSC  x52.4
07D7C:  BRA    7DB2
07D7E:  BTFSC  x52.5
07D80:  BRA    7DB2
07D82:  BTFSC  x52.6
07D84:  BRA    7DB2
07D86:  BTFSC  x52.7
07D88:  BRA    7DB2
07D8A:  BTFSC  x53.0
07D8C:  BRA    7DB2
07D8E:  BTFSC  x53.1
07D90:  BRA    7DB2
07D92:  BTFSC  x53.2
07D94:  BRA    7DB2
07D96:  BTFSC  x53.3
07D98:  BRA    7DB2
07D9A:  BTFSC  x53.4
07D9C:  BRA    7DB2
07D9E:  BTFSC  x53.5
07DA0:  BRA    7DB2
07DA2:  BTFSC  x53.6
07DA4:  BRA    7DB2
07DA6:  BTFSC  x53.7
07DA8:  BRA    7DB2
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
07DAA:  BCF    F89.3
07DAC:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
07DAE:  BCF    F89.4
07DB0:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
07DB2:  MOVLW  00
07DB4:  BTFSC  x40.6
07DB6:  MOVLW  01
07DB8:  MOVWF  xB5
07DBA:  MOVLW  00
07DBC:  BTFSC  x44.6
07DBE:  MOVLW  01
07DC0:  XORWF  xB5,W
07DC2:  SUBLW  01
07DC4:  BNZ   7DCA
07DC6:  BTFSS  x46.6
07DC8:  BRA    7DCE
07DCA:  BTFSS  1C.5
07DCC:  BRA    7E66
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
07DCE:  BTFSC  x52.6
07DD0:  BRA    7DEE
07DD2:  MOVLB  0
07DD4:  MOVF   x6C,W
07DD6:  SUBLW  0F
07DD8:  BTFSC  FD8.2
07DDA:  BRA    7DE0
07DDC:  MOVLB  C
07DDE:  BRA    7DEE
07DE0:  MOVLB  C
07DE2:  BTFSC  x4E.6
07DE4:  BRA    7DEE
....................       {
....................             TimeBase1s = 100 ;            //reload again
07DE6:  MOVLW  64
07DE8:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
07DEA:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B7 = 1;
07DEE:  BSF    x52.6
....................       if(Ack.B7 == 0)
07DF0:  BTFSC  x4E.6
07DF2:  BRA    7E22
....................       {
....................          if(FlashingFlag == 0)
07DF4:  BTFSC  1C.1
07DF6:  BRA    7DFC
....................             {
....................                Output.B7 = 0;           //Flash output1
07DF8:  BCF    x42.6
....................             }
07DFA:  BRA    7DFE
....................             else
....................             {
....................                Output.B7 = 1;
07DFC:  BSF    x42.6
....................             }
....................          if (~AutoTestFlag)
07DFE:  BTFSC  1C.4
07E00:  BRA    7E22
....................          {
....................             if(AlarmIndicator.B7 == 1){
07E02:  BTFSS  x4C.6
07E04:  BRA    7E22
....................                 if(OutputBoth.B7 == 0)        //Both output
07E06:  BTFSC  x4A.6
07E08:  BRA    7E14
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07E0A:  BSF    F89.4
07E0C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07E0E:  BSF    F89.3
07E10:  BCF    F92.3
....................                 }
07E12:  BRA    7E22
....................                 else
....................                 {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
07E14:  BTFSS  x48.6
07E16:  BRA    7E1E
07E18:  BSF    F89.4
07E1A:  BCF    F92.4
07E1C:  BRA    7E22
....................                   else output_bit(Pbell,1);                          //Bell
07E1E:  BSF    F89.3
07E20:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
07E22:  MOVLW  01
07E24:  MOVWF  xB0
....................       // SMS Sending   
....................       if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
07E26:  BTFSC  x5C.6
07E28:  BRA    7E64
07E2A:  BTFSC  32.3
07E2C:  BRA    7E64
07E2E:  BTFSC  x4E.6
07E30:  BRA    7E64
....................       {
....................          SendSMS.B7 =1;
07E32:  BSF    x5C.6
....................          strcat(SMS_MassageSUM, SMS_Massage7);
07E34:  MOVLW  0B
07E36:  MOVWF  xB5
07E38:  MOVLW  9C
07E3A:  MOVWF  xB4
07E3C:  MOVLW  0A
07E3E:  MOVWF  xB7
07E40:  MOVLW  5C
07E42:  MOVWF  xB6
07E44:  MOVLB  0
07E46:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
07E4A:  MOVLW  0B
07E4C:  MOVLB  C
07E4E:  MOVWF  xB5
07E50:  MOVLW  9C
07E52:  MOVWF  xB4
07E54:  MOVLW  0C
07E56:  MOVWF  xB7
07E58:  MOVLW  3C
07E5A:  MOVWF  xB6
07E5C:  MOVLB  0
07E5E:  CALL   5CF6
07E62:  MOVLB  C
....................        /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage7);  
....................         putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
07E64:  BRA    7EFE
....................    else if(FaultType.B7 == 0)
07E66:  BTFSC  x46.6
07E68:  BRA    7EFE
....................    {
....................       In2.B7 = 0x00;
07E6A:  BCF    x52.6
....................       Ack.B7 = 0;
07E6C:  BCF    x4E.6
....................       Output.B7 = 1;      //Off LED
07E6E:  BSF    x42.6
....................       SendSMS.B7 =0;// Clear SMS
07E70:  BCF    x5C.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)      //If Buzzer or Both
07E72:  BTFSC  x48.6
07E74:  BRA    7E7A
07E76:  BTFSC  x4A.6
07E78:  BRA    7E94
07E7A:  MOVF   xB0,F
07E7C:  BNZ   7E94
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
07E7E:  MOVLW  01
07E80:  MOVWF  xB4
07E82:  MOVLB  0
07E84:  CALL   5D60
07E88:  DECFSZ 01,W
07E8A:  BRA    7E8E
07E8C:  BRA    7E92
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
07E8E:  BCF    F89.4
07E90:  BCF    F92.4
07E92:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)  //If Bell or Both
07E94:  BTFSS  x48.6
07E96:  BRA    7E9C
07E98:  BTFSC  x4A.6
07E9A:  BRA    7EB6
07E9C:  MOVF   xB0,F
07E9E:  BNZ   7EB6
....................       {
....................          if(CheckAutoReset(0x02) == 1);
07EA0:  MOVLW  02
07EA2:  MOVWF  xB4
07EA4:  MOVLB  0
07EA6:  CALL   5D60
07EAA:  DECFSZ 01,W
07EAC:  BRA    7EB0
07EAE:  BRA    7EB4
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
07EB0:  BCF    F89.3
07EB2:  BCF    F92.3
07EB4:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
07EB6:  BTFSC  x52.0
07EB8:  BRA    7EFE
07EBA:  BTFSC  x52.1
07EBC:  BRA    7EFE
07EBE:  BTFSC  x52.2
07EC0:  BRA    7EFE
07EC2:  BTFSC  x52.3
07EC4:  BRA    7EFE
07EC6:  BTFSC  x52.4
07EC8:  BRA    7EFE
07ECA:  BTFSC  x52.5
07ECC:  BRA    7EFE
07ECE:  BTFSC  x52.6
07ED0:  BRA    7EFE
07ED2:  BTFSC  x52.7
07ED4:  BRA    7EFE
07ED6:  BTFSC  x53.0
07ED8:  BRA    7EFE
07EDA:  BTFSC  x53.1
07EDC:  BRA    7EFE
07EDE:  BTFSC  x53.2
07EE0:  BRA    7EFE
07EE2:  BTFSC  x53.3
07EE4:  BRA    7EFE
07EE6:  BTFSC  x53.4
07EE8:  BRA    7EFE
07EEA:  BTFSC  x53.5
07EEC:  BRA    7EFE
07EEE:  BTFSC  x53.6
07EF0:  BRA    7EFE
07EF2:  BTFSC  x53.7
07EF4:  BRA    7EFE
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
07EF6:  BCF    F89.3
07EF8:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
07EFA:  BCF    F89.4
07EFC:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
07EFE:  MOVLW  00
07F00:  BTFSC  x40.7
07F02:  MOVLW  01
07F04:  MOVWF  xB5
07F06:  MOVLW  00
07F08:  BTFSC  x44.7
07F0A:  MOVLW  01
07F0C:  XORWF  xB5,W
07F0E:  SUBLW  01
07F10:  BNZ   7F16
07F12:  BTFSS  x46.7
07F14:  BRA    7F1A
07F16:  BTFSS  1C.5
07F18:  BRA    7FB2
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
07F1A:  BTFSC  x52.7
07F1C:  BRA    7F3A
07F1E:  MOVLB  0
07F20:  MOVF   x6C,W
07F22:  SUBLW  0F
07F24:  BTFSC  FD8.2
07F26:  BRA    7F2C
07F28:  MOVLB  C
07F2A:  BRA    7F3A
07F2C:  MOVLB  C
07F2E:  BTFSC  x4E.7
07F30:  BRA    7F3A
....................       {
....................             TimeBase1s = 100 ;            //reload again
07F32:  MOVLW  64
07F34:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
07F36:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B8 = 1;
07F3A:  BSF    x52.7
....................       if(Ack.B8 == 0)
07F3C:  BTFSC  x4E.7
07F3E:  BRA    7F6E
....................       {
....................          if(FlashingFlag == 0)
07F40:  BTFSC  1C.1
07F42:  BRA    7F48
....................             {
....................                Output.B8 = 0;           //Flash output1
07F44:  BCF    x42.7
....................             }
07F46:  BRA    7F4A
....................             else
....................             {
....................                Output.B8 = 1;
07F48:  BSF    x42.7
....................             }
....................          if (~AutoTestFlag)
07F4A:  BTFSC  1C.4
07F4C:  BRA    7F6E
....................          {
....................             if(AlarmIndicator.B8 == 1){
07F4E:  BTFSS  x4C.7
07F50:  BRA    7F6E
....................                 if(OutputBoth.B8 == 0)        //Both output
07F52:  BTFSC  x4A.7
07F54:  BRA    7F60
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07F56:  BSF    F89.4
07F58:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07F5A:  BSF    F89.3
07F5C:  BCF    F92.3
....................                 }
07F5E:  BRA    7F6E
....................                 else
....................                 {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
07F60:  BTFSS  x48.7
07F62:  BRA    7F6A
07F64:  BSF    F89.4
07F66:  BCF    F92.4
07F68:  BRA    7F6E
....................                   else output_bit(Pbell,1);                          //Bell
07F6A:  BSF    F89.3
07F6C:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
07F6E:  MOVLW  01
07F70:  MOVWF  xB0
....................       // SMS Sending   
....................       if((SendSMS.B8 ==0) && (functointest_f ==0) && (Ack.B8 ==0))
07F72:  BTFSC  x5C.7
07F74:  BRA    7FB0
07F76:  BTFSC  32.3
07F78:  BRA    7FB0
07F7A:  BTFSC  x4E.7
07F7C:  BRA    7FB0
....................       {
....................          SendSMS.B8 =1;
07F7E:  BSF    x5C.7
....................          strcat(SMS_MassageSUM, SMS_Massage8);
07F80:  MOVLW  0B
07F82:  MOVWF  xB5
07F84:  MOVLW  9C
07F86:  MOVWF  xB4
07F88:  MOVLW  0A
07F8A:  MOVWF  xB7
07F8C:  MOVLW  7C
07F8E:  MOVWF  xB6
07F90:  MOVLB  0
07F92:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
07F96:  MOVLW  0B
07F98:  MOVLB  C
07F9A:  MOVWF  xB5
07F9C:  MOVLW  9C
07F9E:  MOVWF  xB4
07FA0:  MOVLW  0C
07FA2:  MOVWF  xB7
07FA4:  MOVLW  3C
07FA6:  MOVWF  xB6
07FA8:  MOVLB  0
07FAA:  CALL   5CF6
07FAE:  MOVLB  C
....................        /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage8);   
....................         putc('\n',CH2);
....................         putc(26,CH2);
....................        */
....................       }
....................    }
07FB0:  BRA    804A
....................    else if(FaultType.B8 == 0)
07FB2:  BTFSC  x46.7
07FB4:  BRA    804A
....................    {
....................       In2.B8 = 0x00;
07FB6:  BCF    x52.7
....................       Ack.B8 = 0;
07FB8:  BCF    x4E.7
....................       Output.B8 = 1;      //Off LED
07FBA:  BSF    x42.7
....................       SendSMS.B8 =0;// Clear SMS
07FBC:  BCF    x5C.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)      //If Buzzer or Both
07FBE:  BTFSC  x48.7
07FC0:  BRA    7FC6
07FC2:  BTFSC  x4A.7
07FC4:  BRA    7FE0
07FC6:  MOVF   xB0,F
07FC8:  BNZ   7FE0
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
07FCA:  MOVLW  01
07FCC:  MOVWF  xB4
07FCE:  MOVLB  0
07FD0:  CALL   5D60
07FD4:  DECFSZ 01,W
07FD6:  BRA    7FDA
07FD8:  BRA    7FDE
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
07FDA:  BCF    F89.4
07FDC:  BCF    F92.4
07FDE:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)  //If Bell or Both
07FE0:  BTFSS  x48.7
07FE2:  BRA    7FE8
07FE4:  BTFSC  x4A.7
07FE6:  BRA    8002
07FE8:  MOVF   xB0,F
07FEA:  BNZ   8002
....................       {
....................          if(CheckAutoReset(0x02) == 1);
07FEC:  MOVLW  02
07FEE:  MOVWF  xB4
07FF0:  MOVLB  0
07FF2:  CALL   5D60
07FF6:  DECFSZ 01,W
07FF8:  BRA    7FFC
07FFA:  BRA    8000
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
07FFC:  BCF    F89.3
07FFE:  BCF    F92.3
08000:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
08002:  BTFSC  x52.0
08004:  BRA    804A
08006:  BTFSC  x52.1
08008:  BRA    804A
0800A:  BTFSC  x52.2
0800C:  BRA    804A
0800E:  BTFSC  x52.3
08010:  BRA    804A
08012:  BTFSC  x52.4
08014:  BRA    804A
08016:  BTFSC  x52.5
08018:  BRA    804A
0801A:  BTFSC  x52.6
0801C:  BRA    804A
0801E:  BTFSC  x52.7
08020:  BRA    804A
08022:  BTFSC  x53.0
08024:  BRA    804A
08026:  BTFSC  x53.1
08028:  BRA    804A
0802A:  BTFSC  x53.2
0802C:  BRA    804A
0802E:  BTFSC  x53.3
08030:  BRA    804A
08032:  BTFSC  x53.4
08034:  BRA    804A
08036:  BTFSC  x53.5
08038:  BRA    804A
0803A:  BTFSC  x53.6
0803C:  BRA    804A
0803E:  BTFSC  x53.7
08040:  BRA    804A
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
08042:  BCF    F89.3
08044:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08046:  BCF    F89.4
08048:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0804A:  MOVLW  00
0804C:  BTFSC  x41.0
0804E:  MOVLW  01
08050:  MOVWF  xB5
08052:  MOVLW  00
08054:  BTFSC  x45.0
08056:  MOVLW  01
08058:  XORWF  xB5,W
0805A:  SUBLW  01
0805C:  BNZ   8062
0805E:  BTFSS  x47.0
08060:  BRA    8066
08062:  BTFSS  1C.5
08064:  BRA    80FE
....................    {
....................       if(In2.B9 == 0 && AutoAck == 0x0F && Ack.B9 == 0)   //use auto acknowlegde
08066:  BTFSC  x53.0
08068:  BRA    8086
0806A:  MOVLB  0
0806C:  MOVF   x6C,W
0806E:  SUBLW  0F
08070:  BTFSC  FD8.2
08072:  BRA    8078
08074:  MOVLB  C
08076:  BRA    8086
08078:  MOVLB  C
0807A:  BTFSC  x4F.0
0807C:  BRA    8086
....................       {
....................             TimeBase1s = 100 ;            //reload again
0807E:  MOVLW  64
08080:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
08082:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B9 = 1;
08086:  BSF    x53.0
....................       if(Ack.B9 == 0)
08088:  BTFSC  x4F.0
0808A:  BRA    80BA
....................       {
....................          if(FlashingFlag == 0)
0808C:  BTFSC  1C.1
0808E:  BRA    8094
....................             {
....................                Output.B9 = 0;           //Flash output1
08090:  BCF    x43.0
....................             }
08092:  BRA    8096
....................             else
....................             {
....................                Output.B9 = 1;
08094:  BSF    x43.0
....................             }
....................          if (~AutoTestFlag)
08096:  BTFSC  1C.4
08098:  BRA    80BA
....................          {
....................             if(AlarmIndicator.B9 == 1){
0809A:  BTFSS  x4D.0
0809C:  BRA    80BA
....................                 if(OutputBoth.B9 == 0)        //Both output
0809E:  BTFSC  x4B.0
080A0:  BRA    80AC
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
080A2:  BSF    F89.4
080A4:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
080A6:  BSF    F89.3
080A8:  BCF    F92.3
....................                 }
080AA:  BRA    80BA
....................                 else
....................                 {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
080AC:  BTFSS  x49.0
080AE:  BRA    80B6
080B0:  BSF    F89.4
080B2:  BCF    F92.4
080B4:  BRA    80BA
....................                   else output_bit(Pbell,1);                          //Bell
080B6:  BSF    F89.3
080B8:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
080BA:  MOVLW  01
080BC:  MOVWF  xB0
....................       // SMS Sending   
....................       if((SendSMS.B9 ==0) && (functointest_f ==0) && (Ack.B9 ==0))
080BE:  BTFSC  x5D.0
080C0:  BRA    80FC
080C2:  BTFSC  32.3
080C4:  BRA    80FC
080C6:  BTFSC  x4F.0
080C8:  BRA    80FC
....................       {
....................          SendSMS.B9 =1;
080CA:  BSF    x5D.0
....................          strcat(SMS_MassageSUM, SMS_Massage9);
080CC:  MOVLW  0B
080CE:  MOVWF  xB5
080D0:  MOVLW  9C
080D2:  MOVWF  xB4
080D4:  MOVLW  0A
080D6:  MOVWF  xB7
080D8:  MOVLW  9C
080DA:  MOVWF  xB6
080DC:  MOVLB  0
080DE:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
080E2:  MOVLW  0B
080E4:  MOVLB  C
080E6:  MOVWF  xB5
080E8:  MOVLW  9C
080EA:  MOVWF  xB4
080EC:  MOVLW  0C
080EE:  MOVWF  xB7
080F0:  MOVLW  3C
080F2:  MOVWF  xB6
080F4:  MOVLB  0
080F6:  CALL   5CF6
080FA:  MOVLB  C
....................        /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage9);   
....................         putc('\n',CH2);
....................         putc(26,CH2);
....................        */
....................       }
....................    }
080FC:  BRA    8196
....................    else if(FaultType.B9 == 0)
080FE:  BTFSC  x47.0
08100:  BRA    8196
....................    {
....................       In2.B9 = 0x00;
08102:  BCF    x53.0
....................       Ack.B9 = 0;
08104:  BCF    x4F.0
....................       Output.B9 = 1;      //Off LED
08106:  BSF    x43.0
....................       SendSMS.B9 =0;// Clear SMS
08108:  BCF    x5D.0
.................... 
....................       if((OutputType.B9 == 1 || OutputBoth.B9 == 0)&& inputflag ==0)      //If Buzzer or Both
0810A:  BTFSC  x49.0
0810C:  BRA    8112
0810E:  BTFSC  x4B.0
08110:  BRA    812C
08112:  MOVF   xB0,F
08114:  BNZ   812C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
08116:  MOVLW  01
08118:  MOVWF  xB4
0811A:  MOVLB  0
0811C:  CALL   5D60
08120:  DECFSZ 01,W
08122:  BRA    8126
08124:  BRA    812A
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
08126:  BCF    F89.4
08128:  BCF    F92.4
0812A:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B9 == 0 || OutputBoth.B9 == 0)&& inputflag ==0)  //If Bell or Both
0812C:  BTFSS  x49.0
0812E:  BRA    8134
08130:  BTFSC  x4B.0
08132:  BRA    814E
08134:  MOVF   xB0,F
08136:  BNZ   814E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08138:  MOVLW  02
0813A:  MOVWF  xB4
0813C:  MOVLB  0
0813E:  CALL   5D60
08142:  DECFSZ 01,W
08144:  BRA    8148
08146:  BRA    814C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08148:  BCF    F89.3
0814A:  BCF    F92.3
0814C:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0814E:  BTFSC  x52.0
08150:  BRA    8196
08152:  BTFSC  x52.1
08154:  BRA    8196
08156:  BTFSC  x52.2
08158:  BRA    8196
0815A:  BTFSC  x52.3
0815C:  BRA    8196
0815E:  BTFSC  x52.4
08160:  BRA    8196
08162:  BTFSC  x52.5
08164:  BRA    8196
08166:  BTFSC  x52.6
08168:  BRA    8196
0816A:  BTFSC  x52.7
0816C:  BRA    8196
0816E:  BTFSC  x53.0
08170:  BRA    8196
08172:  BTFSC  x53.1
08174:  BRA    8196
08176:  BTFSC  x53.2
08178:  BRA    8196
0817A:  BTFSC  x53.3
0817C:  BRA    8196
0817E:  BTFSC  x53.4
08180:  BRA    8196
08182:  BTFSC  x53.5
08184:  BRA    8196
08186:  BTFSC  x53.6
08188:  BRA    8196
0818A:  BTFSC  x53.7
0818C:  BRA    8196
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0818E:  BCF    F89.3
08190:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08192:  BCF    F89.4
08194:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08196:  MOVLW  00
08198:  BTFSC  x41.1
0819A:  MOVLW  01
0819C:  MOVWF  xB5
0819E:  MOVLW  00
081A0:  BTFSC  x45.1
081A2:  MOVLW  01
081A4:  XORWF  xB5,W
081A6:  SUBLW  01
081A8:  BNZ   81AE
081AA:  BTFSS  x47.1
081AC:  BRA    81B2
081AE:  BTFSS  1C.5
081B0:  BRA    824A
....................    {
....................       if(In2.B10 == 0 && AutoAck == 0x0F && Ack.B10 == 0)   //use auto acknowlegde
081B2:  BTFSC  x53.1
081B4:  BRA    81D2
081B6:  MOVLB  0
081B8:  MOVF   x6C,W
081BA:  SUBLW  0F
081BC:  BTFSC  FD8.2
081BE:  BRA    81C4
081C0:  MOVLB  C
081C2:  BRA    81D2
081C4:  MOVLB  C
081C6:  BTFSC  x4F.1
081C8:  BRA    81D2
....................       {
....................             TimeBase1s = 100 ;            //reload again
081CA:  MOVLW  64
081CC:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
081CE:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B10 = 1;
081D2:  BSF    x53.1
....................       if(Ack.B10 == 0)
081D4:  BTFSC  x4F.1
081D6:  BRA    8206
....................       {
....................          if(FlashingFlag == 0)
081D8:  BTFSC  1C.1
081DA:  BRA    81E0
....................             {
....................                Output.B10 = 0;           //Flash output1
081DC:  BCF    x43.1
....................             }
081DE:  BRA    81E2
....................             else
....................             {
....................                Output.B10 = 1;
081E0:  BSF    x43.1
....................             }
....................          if (~AutoTestFlag)
081E2:  BTFSC  1C.4
081E4:  BRA    8206
....................          {
....................             if(AlarmIndicator.B10 == 1){
081E6:  BTFSS  x4D.1
081E8:  BRA    8206
....................                 if(OutputBoth.B10 == 0)        //Both output
081EA:  BTFSC  x4B.1
081EC:  BRA    81F8
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
081EE:  BSF    F89.4
081F0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
081F2:  BSF    F89.3
081F4:  BCF    F92.3
....................                 }
081F6:  BRA    8206
....................                 else
....................                 {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
081F8:  BTFSS  x49.1
081FA:  BRA    8202
081FC:  BSF    F89.4
081FE:  BCF    F92.4
08200:  BRA    8206
....................                   else output_bit(Pbell,1);                          //Bell
08202:  BSF    F89.3
08204:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08206:  MOVLW  01
08208:  MOVWF  xB0
....................       // SMS Sending   
....................       if((SendSMS.B10 ==0) && (functointest_f ==0) && (Ack.B10 ==0))
0820A:  BTFSC  x5D.1
0820C:  BRA    8248
0820E:  BTFSC  32.3
08210:  BRA    8248
08212:  BTFSC  x4F.1
08214:  BRA    8248
....................       {
....................          SendSMS.B10 =1;
08216:  BSF    x5D.1
....................          strcat(SMS_MassageSUM, SMS_Massage10);
08218:  MOVLW  0B
0821A:  MOVWF  xB5
0821C:  MOVLW  9C
0821E:  MOVWF  xB4
08220:  MOVLW  0A
08222:  MOVWF  xB7
08224:  MOVLW  BC
08226:  MOVWF  xB6
08228:  MOVLB  0
0822A:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
0822E:  MOVLW  0B
08230:  MOVLB  C
08232:  MOVWF  xB5
08234:  MOVLW  9C
08236:  MOVWF  xB4
08238:  MOVLW  0C
0823A:  MOVWF  xB7
0823C:  MOVLW  3C
0823E:  MOVWF  xB6
08240:  MOVLB  0
08242:  CALL   5CF6
08246:  MOVLB  C
....................        /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage10);   
....................         putc('\n',CH2);
....................         putc(26,CH2);
....................        */
....................       }
....................    }
08248:  BRA    82E2
....................    else if(FaultType.B10 == 0)
0824A:  BTFSC  x47.1
0824C:  BRA    82E2
....................    {
....................       In2.B10 = 0x00;
0824E:  BCF    x53.1
....................       Ack.B10 = 0;
08250:  BCF    x4F.1
....................       Output.B10 = 1;      //Off LED
08252:  BSF    x43.1
....................       SendSMS.B10 =0;// Clear SMS
08254:  BCF    x5D.1
.................... 
....................       if((OutputType.B10 == 1 || OutputBoth.B10 == 0)&& inputflag ==0)      //If Buzzer or Both
08256:  BTFSC  x49.1
08258:  BRA    825E
0825A:  BTFSC  x4B.1
0825C:  BRA    8278
0825E:  MOVF   xB0,F
08260:  BNZ   8278
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
08262:  MOVLW  01
08264:  MOVWF  xB4
08266:  MOVLB  0
08268:  CALL   5D60
0826C:  DECFSZ 01,W
0826E:  BRA    8272
08270:  BRA    8276
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
08272:  BCF    F89.4
08274:  BCF    F92.4
08276:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B10 == 0 || OutputBoth.B10 == 0)&& inputflag ==0)  //If Bell or Both
08278:  BTFSS  x49.1
0827A:  BRA    8280
0827C:  BTFSC  x4B.1
0827E:  BRA    829A
08280:  MOVF   xB0,F
08282:  BNZ   829A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08284:  MOVLW  02
08286:  MOVWF  xB4
08288:  MOVLB  0
0828A:  CALL   5D60
0828E:  DECFSZ 01,W
08290:  BRA    8294
08292:  BRA    8298
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08294:  BCF    F89.3
08296:  BCF    F92.3
08298:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0829A:  BTFSC  x52.0
0829C:  BRA    82E2
0829E:  BTFSC  x52.1
082A0:  BRA    82E2
082A2:  BTFSC  x52.2
082A4:  BRA    82E2
082A6:  BTFSC  x52.3
082A8:  BRA    82E2
082AA:  BTFSC  x52.4
082AC:  BRA    82E2
082AE:  BTFSC  x52.5
082B0:  BRA    82E2
082B2:  BTFSC  x52.6
082B4:  BRA    82E2
082B6:  BTFSC  x52.7
082B8:  BRA    82E2
082BA:  BTFSC  x53.0
082BC:  BRA    82E2
082BE:  BTFSC  x53.1
082C0:  BRA    82E2
082C2:  BTFSC  x53.2
082C4:  BRA    82E2
082C6:  BTFSC  x53.3
082C8:  BRA    82E2
082CA:  BTFSC  x53.4
082CC:  BRA    82E2
082CE:  BTFSC  x53.5
082D0:  BRA    82E2
082D2:  BTFSC  x53.6
082D4:  BRA    82E2
082D6:  BTFSC  x53.7
082D8:  BRA    82E2
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
082DA:  BCF    F89.3
082DC:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
082DE:  BCF    F89.4
082E0:  BCF    F92.4
....................       }
....................    }
....................    
.................... //}
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
082E2:  MOVLW  00
082E4:  BTFSC  x41.2
082E6:  MOVLW  01
082E8:  MOVWF  xB5
082EA:  MOVLW  00
082EC:  BTFSC  x45.2
082EE:  MOVLW  01
082F0:  XORWF  xB5,W
082F2:  SUBLW  01
082F4:  BNZ   82FA
082F6:  BTFSS  x47.2
082F8:  BRA    82FE
082FA:  BTFSS  1C.5
082FC:  BRA    8396
....................    {
....................       if(In2.B11 == 0 && AutoAck == 0x0F && Ack.B11 == 0)   //use auto acknowlegde
082FE:  BTFSC  x53.2
08300:  BRA    831E
08302:  MOVLB  0
08304:  MOVF   x6C,W
08306:  SUBLW  0F
08308:  BTFSC  FD8.2
0830A:  BRA    8310
0830C:  MOVLB  C
0830E:  BRA    831E
08310:  MOVLB  C
08312:  BTFSC  x4F.2
08314:  BRA    831E
....................       {
....................             TimeBase1s = 100 ;            //reload again
08316:  MOVLW  64
08318:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0831A:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B11 = 1;
0831E:  BSF    x53.2
....................       if(Ack.B11 == 0)
08320:  BTFSC  x4F.2
08322:  BRA    8352
....................       {
....................          if(FlashingFlag == 0)
08324:  BTFSC  1C.1
08326:  BRA    832C
....................             {
....................                Output.B11 = 0;           //Flash output1
08328:  BCF    x43.2
....................             }
0832A:  BRA    832E
....................             else
....................             {
....................                Output.B11 = 1;
0832C:  BSF    x43.2
....................             }
....................          if (~AutoTestFlag)
0832E:  BTFSC  1C.4
08330:  BRA    8352
....................          {
....................             if(AlarmIndicator.B11 == 1){
08332:  BTFSS  x4D.2
08334:  BRA    8352
....................                 if(OutputBoth.B11 == 0)        //Both output
08336:  BTFSC  x4B.2
08338:  BRA    8344
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0833A:  BSF    F89.4
0833C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0833E:  BSF    F89.3
08340:  BCF    F92.3
....................                 }
08342:  BRA    8352
....................                 else
....................                 {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,1);     //Buzzer
08344:  BTFSS  x49.2
08346:  BRA    834E
08348:  BSF    F89.4
0834A:  BCF    F92.4
0834C:  BRA    8352
....................                   else output_bit(Pbell,1);                          //Bell
0834E:  BSF    F89.3
08350:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08352:  MOVLW  01
08354:  MOVWF  xB0
....................       // SMS Sending   
....................         if((SendSMS.B11 ==0) && (functointest_f ==0) && (Ack.B11 ==0))
08356:  BTFSC  x5D.2
08358:  BRA    8394
0835A:  BTFSC  32.3
0835C:  BRA    8394
0835E:  BTFSC  x4F.2
08360:  BRA    8394
....................         {
....................           SendSMS.B11 =1;
08362:  BSF    x5D.2
....................          strcat(SMS_MassageSUM, SMS_Massage11);
08364:  MOVLW  0B
08366:  MOVWF  xB5
08368:  MOVLW  9C
0836A:  MOVWF  xB4
0836C:  MOVLW  0A
0836E:  MOVWF  xB7
08370:  MOVLW  DC
08372:  MOVWF  xB6
08374:  MOVLB  0
08376:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
0837A:  MOVLW  0B
0837C:  MOVLB  C
0837E:  MOVWF  xB5
08380:  MOVLW  9C
08382:  MOVWF  xB4
08384:  MOVLW  0C
08386:  MOVWF  xB7
08388:  MOVLW  3C
0838A:  MOVWF  xB6
0838C:  MOVLB  0
0838E:  CALL   5CF6
08392:  MOVLB  C
....................        /*
....................           fprintf(CH2,"AT+CMGS=\"");
....................           fprintf(CH2,sms_phonenumber);
....................           
....................           fprintf(CH2,"\"");
....................           putc('\n',CH2);
....................           delay_ms(50);
....................          
....................          fprintf(CH2,SMS_Massage11);   
....................          putc('\n',CH2);
....................          putc(26,CH2);
....................        */
....................         }
....................    }
08394:  BRA    842E
....................    else if(FaultType.B11 == 0)
08396:  BTFSC  x47.2
08398:  BRA    842E
....................    {
....................       In2.B11 = 0x00;
0839A:  BCF    x53.2
....................       Ack.B11 = 0;
0839C:  BCF    x4F.2
....................       Output.B11 = 1;      //Off LED
0839E:  BSF    x43.2
....................       SendSMS.B11 =0;// Clear SMS
083A0:  BCF    x5D.2
.................... 
....................       if((OutputType.B11 == 1 || OutputBoth.B11 == 0)&& inputflag ==0)      //If Buzzer or Both
083A2:  BTFSC  x49.2
083A4:  BRA    83AA
083A6:  BTFSC  x4B.2
083A8:  BRA    83C4
083AA:  MOVF   xB0,F
083AC:  BNZ   83C4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
083AE:  MOVLW  01
083B0:  MOVWF  xB4
083B2:  MOVLB  0
083B4:  CALL   5D60
083B8:  DECFSZ 01,W
083BA:  BRA    83BE
083BC:  BRA    83C2
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
083BE:  BCF    F89.4
083C0:  BCF    F92.4
083C2:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B11 == 0 || OutputBoth.B11 == 0)&& inputflag ==0)  //If Bell or Both
083C4:  BTFSS  x49.2
083C6:  BRA    83CC
083C8:  BTFSC  x4B.2
083CA:  BRA    83E6
083CC:  MOVF   xB0,F
083CE:  BNZ   83E6
....................       {
....................          if(CheckAutoReset(0x02) == 1);
083D0:  MOVLW  02
083D2:  MOVWF  xB4
083D4:  MOVLB  0
083D6:  CALL   5D60
083DA:  DECFSZ 01,W
083DC:  BRA    83E0
083DE:  BRA    83E4
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
083E0:  BCF    F89.3
083E2:  BCF    F92.3
083E4:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
083E6:  BTFSC  x52.0
083E8:  BRA    842E
083EA:  BTFSC  x52.1
083EC:  BRA    842E
083EE:  BTFSC  x52.2
083F0:  BRA    842E
083F2:  BTFSC  x52.3
083F4:  BRA    842E
083F6:  BTFSC  x52.4
083F8:  BRA    842E
083FA:  BTFSC  x52.5
083FC:  BRA    842E
083FE:  BTFSC  x52.6
08400:  BRA    842E
08402:  BTFSC  x52.7
08404:  BRA    842E
08406:  BTFSC  x53.0
08408:  BRA    842E
0840A:  BTFSC  x53.1
0840C:  BRA    842E
0840E:  BTFSC  x53.2
08410:  BRA    842E
08412:  BTFSC  x53.3
08414:  BRA    842E
08416:  BTFSC  x53.4
08418:  BRA    842E
0841A:  BTFSC  x53.5
0841C:  BRA    842E
0841E:  BTFSC  x53.6
08420:  BRA    842E
08422:  BTFSC  x53.7
08424:  BRA    842E
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
08426:  BCF    F89.3
08428:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0842A:  BCF    F89.4
0842C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0842E:  MOVLW  00
08430:  BTFSC  x41.3
08432:  MOVLW  01
08434:  MOVWF  xB5
08436:  MOVLW  00
08438:  BTFSC  x45.3
0843A:  MOVLW  01
0843C:  XORWF  xB5,W
0843E:  SUBLW  01
08440:  BNZ   8446
08442:  BTFSS  x47.3
08444:  BRA    844A
08446:  BTFSS  1C.5
08448:  BRA    84E2
....................    {
....................       if(In2.B12 == 0 && AutoAck == 0x0F && Ack.B12 == 0)   //use auto acknowlegde
0844A:  BTFSC  x53.3
0844C:  BRA    846A
0844E:  MOVLB  0
08450:  MOVF   x6C,W
08452:  SUBLW  0F
08454:  BTFSC  FD8.2
08456:  BRA    845C
08458:  MOVLB  C
0845A:  BRA    846A
0845C:  MOVLB  C
0845E:  BTFSC  x4F.3
08460:  BRA    846A
....................       {
....................             TimeBase1s = 100 ;            //reload again
08462:  MOVLW  64
08464:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
08466:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B12 = 1;
0846A:  BSF    x53.3
....................       if(Ack.B12 == 0)
0846C:  BTFSC  x4F.3
0846E:  BRA    849E
....................       {
....................          if(FlashingFlag == 0)
08470:  BTFSC  1C.1
08472:  BRA    8478
....................             {
....................                Output.B12 = 0;           //Flash output1
08474:  BCF    x43.3
....................             }
08476:  BRA    847A
....................             else
....................             {
....................                Output.B12 = 1;
08478:  BSF    x43.3
....................             }
....................          if (~AutoTestFlag)
0847A:  BTFSC  1C.4
0847C:  BRA    849E
....................          {
....................             if(AlarmIndicator.B12 == 1){
0847E:  BTFSS  x4D.3
08480:  BRA    849E
....................                 if(OutputBoth.B12 == 0)        //Both output
08482:  BTFSC  x4B.3
08484:  BRA    8490
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
08486:  BSF    F89.4
08488:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0848A:  BSF    F89.3
0848C:  BCF    F92.3
....................                 }
0848E:  BRA    849E
....................                 else
....................                 {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,1);     //Buzzer
08490:  BTFSS  x49.3
08492:  BRA    849A
08494:  BSF    F89.4
08496:  BCF    F92.4
08498:  BRA    849E
....................                   else output_bit(Pbell,1);                          //Bell
0849A:  BSF    F89.3
0849C:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0849E:  MOVLW  01
084A0:  MOVWF  xB0
....................       // SMS Sending   
....................       if((SendSMS.B12 ==0) && (functointest_f ==0) && (Ack.B12 ==0))
084A2:  BTFSC  x5D.3
084A4:  BRA    84E0
084A6:  BTFSC  32.3
084A8:  BRA    84E0
084AA:  BTFSC  x4F.3
084AC:  BRA    84E0
....................       {
....................         SendSMS.B12 =1;
084AE:  BSF    x5D.3
....................          strcat(SMS_MassageSUM, SMS_Massage12);
084B0:  MOVLW  0B
084B2:  MOVWF  xB5
084B4:  MOVLW  9C
084B6:  MOVWF  xB4
084B8:  MOVLW  0A
084BA:  MOVWF  xB7
084BC:  MOVLW  FC
084BE:  MOVWF  xB6
084C0:  MOVLB  0
084C2:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
084C6:  MOVLW  0B
084C8:  MOVLB  C
084CA:  MOVWF  xB5
084CC:  MOVLW  9C
084CE:  MOVWF  xB4
084D0:  MOVLW  0C
084D2:  MOVWF  xB7
084D4:  MOVLW  3C
084D6:  MOVWF  xB6
084D8:  MOVLB  0
084DA:  CALL   5CF6
084DE:  MOVLB  C
....................        /*
....................         fprintf(CH2,"AT+CMGS=\"");
....................         fprintf(CH2,sms_phonenumber);
....................         
....................         fprintf(CH2,"\"");
....................         putc('\n',CH2);
....................         delay_ms(50);
....................        
....................        fprintf(CH2,SMS_Massage12);   
....................        putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
084E0:  BRA    857A
....................    else if(FaultType.B12 == 0)
084E2:  BTFSC  x47.3
084E4:  BRA    857A
....................    {
....................       In2.B12 = 0x00;
084E6:  BCF    x53.3
....................       Ack.B12 = 0;
084E8:  BCF    x4F.3
....................       Output.B12 = 1;      //Off LED
084EA:  BSF    x43.3
....................       SendSMS.B12 =0;// Clear SMS
084EC:  BCF    x5D.3
.................... 
....................       if((OutputType.B12 == 1 || OutputBoth.B12 == 0)&& inputflag ==0)      //If Buzzer or Both
084EE:  BTFSC  x49.3
084F0:  BRA    84F6
084F2:  BTFSC  x4B.3
084F4:  BRA    8510
084F6:  MOVF   xB0,F
084F8:  BNZ   8510
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
084FA:  MOVLW  01
084FC:  MOVWF  xB4
084FE:  MOVLB  0
08500:  CALL   5D60
08504:  DECFSZ 01,W
08506:  BRA    850A
08508:  BRA    850E
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0850A:  BCF    F89.4
0850C:  BCF    F92.4
0850E:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B12 == 0 || OutputBoth.B12 == 0)&& inputflag ==0)  //If Bell or Both
08510:  BTFSS  x49.3
08512:  BRA    8518
08514:  BTFSC  x4B.3
08516:  BRA    8532
08518:  MOVF   xB0,F
0851A:  BNZ   8532
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0851C:  MOVLW  02
0851E:  MOVWF  xB4
08520:  MOVLB  0
08522:  CALL   5D60
08526:  DECFSZ 01,W
08528:  BRA    852C
0852A:  BRA    8530
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0852C:  BCF    F89.3
0852E:  BCF    F92.3
08530:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
08532:  BTFSC  x52.0
08534:  BRA    857A
08536:  BTFSC  x52.1
08538:  BRA    857A
0853A:  BTFSC  x52.2
0853C:  BRA    857A
0853E:  BTFSC  x52.3
08540:  BRA    857A
08542:  BTFSC  x52.4
08544:  BRA    857A
08546:  BTFSC  x52.5
08548:  BRA    857A
0854A:  BTFSC  x52.6
0854C:  BRA    857A
0854E:  BTFSC  x52.7
08550:  BRA    857A
08552:  BTFSC  x53.0
08554:  BRA    857A
08556:  BTFSC  x53.1
08558:  BRA    857A
0855A:  BTFSC  x53.2
0855C:  BRA    857A
0855E:  BTFSC  x53.3
08560:  BRA    857A
08562:  BTFSC  x53.4
08564:  BRA    857A
08566:  BTFSC  x53.5
08568:  BRA    857A
0856A:  BTFSC  x53.6
0856C:  BRA    857A
0856E:  BTFSC  x53.7
08570:  BRA    857A
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
08572:  BCF    F89.3
08574:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08576:  BCF    F89.4
08578:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0857A:  MOVLW  00
0857C:  BTFSC  x41.4
0857E:  MOVLW  01
08580:  MOVWF  xB5
08582:  MOVLW  00
08584:  BTFSC  x45.4
08586:  MOVLW  01
08588:  XORWF  xB5,W
0858A:  SUBLW  01
0858C:  BNZ   8592
0858E:  BTFSS  x47.4
08590:  BRA    8596
08592:  BTFSS  1C.5
08594:  BRA    862E
....................    {
....................       if(In2.B13 == 0 && AutoAck == 0x0F && Ack.B13 == 0)   //use auto acknowlegde
08596:  BTFSC  x53.4
08598:  BRA    85B6
0859A:  MOVLB  0
0859C:  MOVF   x6C,W
0859E:  SUBLW  0F
085A0:  BTFSC  FD8.2
085A2:  BRA    85A8
085A4:  MOVLB  C
085A6:  BRA    85B6
085A8:  MOVLB  C
085AA:  BTFSC  x4F.4
085AC:  BRA    85B6
....................       {
....................             TimeBase1s = 100 ;            //reload again
085AE:  MOVLW  64
085B0:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
085B2:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B13 = 1;
085B6:  BSF    x53.4
....................       if(Ack.B13 == 0)
085B8:  BTFSC  x4F.4
085BA:  BRA    85EA
....................       {
....................          if(FlashingFlag == 0)
085BC:  BTFSC  1C.1
085BE:  BRA    85C4
....................             {
....................                Output.B13 = 0;           //Flash output1
085C0:  BCF    x43.4
....................             }
085C2:  BRA    85C6
....................             else
....................             {
....................                Output.B13 = 1;
085C4:  BSF    x43.4
....................             }
....................          if (~AutoTestFlag)
085C6:  BTFSC  1C.4
085C8:  BRA    85EA
....................          {
....................             if(AlarmIndicator.B13 == 1){
085CA:  BTFSS  x4D.4
085CC:  BRA    85EA
....................                 if(OutputBoth.B13 == 0)        //Both output
085CE:  BTFSC  x4B.4
085D0:  BRA    85DC
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
085D2:  BSF    F89.4
085D4:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
085D6:  BSF    F89.3
085D8:  BCF    F92.3
....................                 }
085DA:  BRA    85EA
....................                 else
....................                 {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,1);     //Buzzer
085DC:  BTFSS  x49.4
085DE:  BRA    85E6
085E0:  BSF    F89.4
085E2:  BCF    F92.4
085E4:  BRA    85EA
....................                   else output_bit(Pbell,1);                          //Bell
085E6:  BSF    F89.3
085E8:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
085EA:  MOVLW  01
085EC:  MOVWF  xB0
....................       // SMS Sending   
....................         if((SendSMS.B13 ==0) && (functointest_f ==0) && (Ack.B13 ==0))
085EE:  BTFSC  x5D.4
085F0:  BRA    862C
085F2:  BTFSC  32.3
085F4:  BRA    862C
085F6:  BTFSC  x4F.4
085F8:  BRA    862C
....................         {
....................           SendSMS.B13 =1;
085FA:  BSF    x5D.4
....................          strcat(SMS_MassageSUM, SMS_Massage13);
085FC:  MOVLW  0B
085FE:  MOVWF  xB5
08600:  MOVLW  9C
08602:  MOVWF  xB4
08604:  MOVLW  0B
08606:  MOVWF  xB7
08608:  MOVLW  1C
0860A:  MOVWF  xB6
0860C:  MOVLB  0
0860E:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
08612:  MOVLW  0B
08614:  MOVLB  C
08616:  MOVWF  xB5
08618:  MOVLW  9C
0861A:  MOVWF  xB4
0861C:  MOVLW  0C
0861E:  MOVWF  xB7
08620:  MOVLW  3C
08622:  MOVWF  xB6
08624:  MOVLB  0
08626:  CALL   5CF6
0862A:  MOVLB  C
....................        /*
....................           fprintf(CH2,"AT+CMGS=\"");
....................           fprintf(CH2,sms_phonenumber);
....................           
....................           fprintf(CH2,"\"");
....................           putc('\n',CH2);
....................           delay_ms(50);
....................          
....................          fprintf(CH2,SMS_Massage13);   
....................          putc('\n',CH2);
....................          putc(26,CH2);
....................        */
....................         }
....................    }
0862C:  BRA    86C6
....................    else if(FaultType.B13 == 0)
0862E:  BTFSC  x47.4
08630:  BRA    86C6
....................    {
....................       In2.B13 = 0x00;
08632:  BCF    x53.4
....................       Ack.B13 = 0;
08634:  BCF    x4F.4
....................       Output.B13 = 1;      //Off LED
08636:  BSF    x43.4
....................       SendSMS.B13 =0;// Clear SMS
08638:  BCF    x5D.4
.................... 
....................       if((OutputType.B13 == 1 || OutputBoth.B13 == 0)&& inputflag ==0)      //If Buzzer or Both
0863A:  BTFSC  x49.4
0863C:  BRA    8642
0863E:  BTFSC  x4B.4
08640:  BRA    865C
08642:  MOVF   xB0,F
08644:  BNZ   865C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
08646:  MOVLW  01
08648:  MOVWF  xB4
0864A:  MOVLB  0
0864C:  CALL   5D60
08650:  DECFSZ 01,W
08652:  BRA    8656
08654:  BRA    865A
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
08656:  BCF    F89.4
08658:  BCF    F92.4
0865A:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B13 == 0 || OutputBoth.B13 == 0)&& inputflag ==0)  //If Bell or Both
0865C:  BTFSS  x49.4
0865E:  BRA    8664
08660:  BTFSC  x4B.4
08662:  BRA    867E
08664:  MOVF   xB0,F
08666:  BNZ   867E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08668:  MOVLW  02
0866A:  MOVWF  xB4
0866C:  MOVLB  0
0866E:  CALL   5D60
08672:  DECFSZ 01,W
08674:  BRA    8678
08676:  BRA    867C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08678:  BCF    F89.3
0867A:  BCF    F92.3
0867C:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0867E:  BTFSC  x52.0
08680:  BRA    86C6
08682:  BTFSC  x52.1
08684:  BRA    86C6
08686:  BTFSC  x52.2
08688:  BRA    86C6
0868A:  BTFSC  x52.3
0868C:  BRA    86C6
0868E:  BTFSC  x52.4
08690:  BRA    86C6
08692:  BTFSC  x52.5
08694:  BRA    86C6
08696:  BTFSC  x52.6
08698:  BRA    86C6
0869A:  BTFSC  x52.7
0869C:  BRA    86C6
0869E:  BTFSC  x53.0
086A0:  BRA    86C6
086A2:  BTFSC  x53.1
086A4:  BRA    86C6
086A6:  BTFSC  x53.2
086A8:  BRA    86C6
086AA:  BTFSC  x53.3
086AC:  BRA    86C6
086AE:  BTFSC  x53.4
086B0:  BRA    86C6
086B2:  BTFSC  x53.5
086B4:  BRA    86C6
086B6:  BTFSC  x53.6
086B8:  BRA    86C6
086BA:  BTFSC  x53.7
086BC:  BRA    86C6
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
086BE:  BCF    F89.3
086C0:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
086C2:  BCF    F89.4
086C4:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
086C6:  MOVLW  00
086C8:  BTFSC  x41.5
086CA:  MOVLW  01
086CC:  MOVWF  xB5
086CE:  MOVLW  00
086D0:  BTFSC  x45.5
086D2:  MOVLW  01
086D4:  XORWF  xB5,W
086D6:  SUBLW  01
086D8:  BNZ   86DE
086DA:  BTFSS  x47.5
086DC:  BRA    86E2
086DE:  BTFSS  1C.5
086E0:  BRA    877A
....................    {
....................       if(In2.B14 == 0 && AutoAck == 0x0F && Ack.B14 == 0)   //use auto acknowlegde
086E2:  BTFSC  x53.5
086E4:  BRA    8702
086E6:  MOVLB  0
086E8:  MOVF   x6C,W
086EA:  SUBLW  0F
086EC:  BTFSC  FD8.2
086EE:  BRA    86F4
086F0:  MOVLB  C
086F2:  BRA    8702
086F4:  MOVLB  C
086F6:  BTFSC  x4F.5
086F8:  BRA    8702
....................       {
....................             TimeBase1s = 100 ;            //reload again
086FA:  MOVLW  64
086FC:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
086FE:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B14 = 1;
08702:  BSF    x53.5
....................       if(Ack.B14 == 0)
08704:  BTFSC  x4F.5
08706:  BRA    8736
....................       {
....................          if(FlashingFlag == 0)
08708:  BTFSC  1C.1
0870A:  BRA    8710
....................             {
....................                Output.B14 = 0;           //Flash output1
0870C:  BCF    x43.5
....................             }
0870E:  BRA    8712
....................             else
....................             {
....................                Output.B14 = 1;
08710:  BSF    x43.5
....................             }
....................          if (~AutoTestFlag)
08712:  BTFSC  1C.4
08714:  BRA    8736
....................          {
....................             if(AlarmIndicator.B14 == 1){
08716:  BTFSS  x4D.5
08718:  BRA    8736
....................                 if(OutputBoth.B14 == 0)        //Both output
0871A:  BTFSC  x4B.5
0871C:  BRA    8728
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0871E:  BSF    F89.4
08720:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08722:  BSF    F89.3
08724:  BCF    F92.3
....................                 }
08726:  BRA    8736
....................                 else
....................                 {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,1);     //Buzzer
08728:  BTFSS  x49.5
0872A:  BRA    8732
0872C:  BSF    F89.4
0872E:  BCF    F92.4
08730:  BRA    8736
....................                   else output_bit(Pbell,1);                          //Bell
08732:  BSF    F89.3
08734:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08736:  MOVLW  01
08738:  MOVWF  xB0
....................       // SMS Sending   
....................         if((SendSMS.B14 ==0) && (functointest_f ==0) && (Ack.B14 ==0))
0873A:  BTFSC  x5D.5
0873C:  BRA    8778
0873E:  BTFSC  32.3
08740:  BRA    8778
08742:  BTFSC  x4F.5
08744:  BRA    8778
....................         {
....................           SendSMS.B14 =1;
08746:  BSF    x5D.5
....................          strcat(SMS_MassageSUM, SMS_Massage14);
08748:  MOVLW  0B
0874A:  MOVWF  xB5
0874C:  MOVLW  9C
0874E:  MOVWF  xB4
08750:  MOVLW  0B
08752:  MOVWF  xB7
08754:  MOVLW  3C
08756:  MOVWF  xB6
08758:  MOVLB  0
0875A:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
0875E:  MOVLW  0B
08760:  MOVLB  C
08762:  MOVWF  xB5
08764:  MOVLW  9C
08766:  MOVWF  xB4
08768:  MOVLW  0C
0876A:  MOVWF  xB7
0876C:  MOVLW  3C
0876E:  MOVWF  xB6
08770:  MOVLB  0
08772:  CALL   5CF6
08776:  MOVLB  C
....................        /*
....................           fprintf(CH2,"AT+CMGS=\"");
....................           fprintf(CH2,sms_phonenumber);
....................           
....................           fprintf(CH2,"\"");
....................           putc('\n',CH2);
....................           delay_ms(50);
....................          
....................          fprintf(CH2,SMS_Massage14);   
....................          putc('\n',CH2);
....................          putc(26,CH2);
....................        */
....................         }
....................    }
08778:  BRA    8812
....................    else if(FaultType.B14 == 0)
0877A:  BTFSC  x47.5
0877C:  BRA    8812
....................    {
....................       In2.B14 = 0x00;
0877E:  BCF    x53.5
....................       Ack.B14 = 0;
08780:  BCF    x4F.5
....................       Output.B14 = 1;      //Off LED
08782:  BSF    x43.5
....................       SendSMS.B14 =0;// Clear SMS
08784:  BCF    x5D.5
.................... 
....................       if((OutputType.B14 == 1 || OutputBoth.B14 == 0)&& inputflag ==0)      //If Buzzer or Both
08786:  BTFSC  x49.5
08788:  BRA    878E
0878A:  BTFSC  x4B.5
0878C:  BRA    87A8
0878E:  MOVF   xB0,F
08790:  BNZ   87A8
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
08792:  MOVLW  01
08794:  MOVWF  xB4
08796:  MOVLB  0
08798:  CALL   5D60
0879C:  DECFSZ 01,W
0879E:  BRA    87A2
087A0:  BRA    87A6
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
087A2:  BCF    F89.4
087A4:  BCF    F92.4
087A6:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B14 == 0 || OutputBoth.B14 == 0)&& inputflag ==0)  //If Bell or Both
087A8:  BTFSS  x49.5
087AA:  BRA    87B0
087AC:  BTFSC  x4B.5
087AE:  BRA    87CA
087B0:  MOVF   xB0,F
087B2:  BNZ   87CA
....................       {
....................          if(CheckAutoReset(0x02) == 1);
087B4:  MOVLW  02
087B6:  MOVWF  xB4
087B8:  MOVLB  0
087BA:  CALL   5D60
087BE:  DECFSZ 01,W
087C0:  BRA    87C4
087C2:  BRA    87C8
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
087C4:  BCF    F89.3
087C6:  BCF    F92.3
087C8:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
087CA:  BTFSC  x52.0
087CC:  BRA    8812
087CE:  BTFSC  x52.1
087D0:  BRA    8812
087D2:  BTFSC  x52.2
087D4:  BRA    8812
087D6:  BTFSC  x52.3
087D8:  BRA    8812
087DA:  BTFSC  x52.4
087DC:  BRA    8812
087DE:  BTFSC  x52.5
087E0:  BRA    8812
087E2:  BTFSC  x52.6
087E4:  BRA    8812
087E6:  BTFSC  x52.7
087E8:  BRA    8812
087EA:  BTFSC  x53.0
087EC:  BRA    8812
087EE:  BTFSC  x53.1
087F0:  BRA    8812
087F2:  BTFSC  x53.2
087F4:  BRA    8812
087F6:  BTFSC  x53.3
087F8:  BRA    8812
087FA:  BTFSC  x53.4
087FC:  BRA    8812
087FE:  BTFSC  x53.5
08800:  BRA    8812
08802:  BTFSC  x53.6
08804:  BRA    8812
08806:  BTFSC  x53.7
08808:  BRA    8812
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0880A:  BCF    F89.3
0880C:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0880E:  BCF    F89.4
08810:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08812:  MOVLW  00
08814:  BTFSC  x41.6
08816:  MOVLW  01
08818:  MOVWF  xB5
0881A:  MOVLW  00
0881C:  BTFSC  x45.6
0881E:  MOVLW  01
08820:  XORWF  xB5,W
08822:  SUBLW  01
08824:  BNZ   882A
08826:  BTFSS  x47.6
08828:  BRA    882E
0882A:  BTFSS  1C.5
0882C:  BRA    88C6
....................    {
....................       if(In2.B15 == 0 && AutoAck == 0x0F && Ack.B15 == 0)   //use auto acknowlegde
0882E:  BTFSC  x53.6
08830:  BRA    884E
08832:  MOVLB  0
08834:  MOVF   x6C,W
08836:  SUBLW  0F
08838:  BTFSC  FD8.2
0883A:  BRA    8840
0883C:  MOVLB  C
0883E:  BRA    884E
08840:  MOVLB  C
08842:  BTFSC  x4F.6
08844:  BRA    884E
....................       {
....................             TimeBase1s = 100 ;            //reload again
08846:  MOVLW  64
08848:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0884A:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B15 = 1;
0884E:  BSF    x53.6
....................       if(Ack.B15 == 0)
08850:  BTFSC  x4F.6
08852:  BRA    8882
....................       {
....................          if(FlashingFlag == 0)
08854:  BTFSC  1C.1
08856:  BRA    885C
....................             {
....................                Output.B15 = 0;           //Flash output1
08858:  BCF    x43.6
....................             }
0885A:  BRA    885E
....................             else
....................             {
....................                Output.B15 = 1;
0885C:  BSF    x43.6
....................             }
....................          if (~AutoTestFlag)
0885E:  BTFSC  1C.4
08860:  BRA    8882
....................          {
....................             if(AlarmIndicator.B15 == 1){
08862:  BTFSS  x4D.6
08864:  BRA    8882
....................                 if(OutputBoth.B15 == 0)        //Both output
08866:  BTFSC  x4B.6
08868:  BRA    8874
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0886A:  BSF    F89.4
0886C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0886E:  BSF    F89.3
08870:  BCF    F92.3
....................                 }
08872:  BRA    8882
....................                 else
....................                 {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,1);     //Buzzer
08874:  BTFSS  x49.6
08876:  BRA    887E
08878:  BSF    F89.4
0887A:  BCF    F92.4
0887C:  BRA    8882
....................                   else output_bit(Pbell,1);                          //Bell
0887E:  BSF    F89.3
08880:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08882:  MOVLW  01
08884:  MOVWF  xB0
....................       // SMS Sending   
....................         if((SendSMS.B15 ==0) && (functointest_f ==0) && (Ack.B15 ==0))
08886:  BTFSC  x5D.6
08888:  BRA    88C4
0888A:  BTFSC  32.3
0888C:  BRA    88C4
0888E:  BTFSC  x4F.6
08890:  BRA    88C4
....................         {
....................           SendSMS.B15 =1;
08892:  BSF    x5D.6
....................          strcat(SMS_MassageSUM, SMS_Massage15);
08894:  MOVLW  0B
08896:  MOVWF  xB5
08898:  MOVLW  9C
0889A:  MOVWF  xB4
0889C:  MOVLW  0B
0889E:  MOVWF  xB7
088A0:  MOVLW  5C
088A2:  MOVWF  xB6
088A4:  MOVLB  0
088A6:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
088AA:  MOVLW  0B
088AC:  MOVLB  C
088AE:  MOVWF  xB5
088B0:  MOVLW  9C
088B2:  MOVWF  xB4
088B4:  MOVLW  0C
088B6:  MOVWF  xB7
088B8:  MOVLW  3C
088BA:  MOVWF  xB6
088BC:  MOVLB  0
088BE:  CALL   5CF6
088C2:  MOVLB  C
....................        /*
....................           fprintf(CH2,"AT+CMGS=\"");
....................           fprintf(CH2,sms_phonenumber);
....................           
....................           fprintf(CH2,"\"");
....................           putc('\n',CH2);
....................           delay_ms(50);
....................          
....................          fprintf(CH2,SMS_Massage15);   
....................          putc('\n',CH2);
....................          putc(26,CH2);
....................        */
....................         }
....................    }
088C4:  BRA    895E
....................    else if(FaultType.B15 == 0)
088C6:  BTFSC  x47.6
088C8:  BRA    895E
....................    {
....................       In2.B15 = 0x00;
088CA:  BCF    x53.6
....................       Ack.B15 = 0;
088CC:  BCF    x4F.6
....................       Output.B15 = 1;      //Off LED
088CE:  BSF    x43.6
....................       SendSMS.B15 =0;// Clear SMS
088D0:  BCF    x5D.6
.................... 
....................       if((OutputType.B15 == 1 || OutputBoth.B15 == 0)&& inputflag ==0)      //If Buzzer or Both
088D2:  BTFSC  x49.6
088D4:  BRA    88DA
088D6:  BTFSC  x4B.6
088D8:  BRA    88F4
088DA:  MOVF   xB0,F
088DC:  BNZ   88F4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
088DE:  MOVLW  01
088E0:  MOVWF  xB4
088E2:  MOVLB  0
088E4:  CALL   5D60
088E8:  DECFSZ 01,W
088EA:  BRA    88EE
088EC:  BRA    88F2
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
088EE:  BCF    F89.4
088F0:  BCF    F92.4
088F2:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B15 == 0 || OutputBoth.B15 == 0)&& inputflag ==0)  //If Bell or Both
088F4:  BTFSS  x49.6
088F6:  BRA    88FC
088F8:  BTFSC  x4B.6
088FA:  BRA    8916
088FC:  MOVF   xB0,F
088FE:  BNZ   8916
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08900:  MOVLW  02
08902:  MOVWF  xB4
08904:  MOVLB  0
08906:  CALL   5D60
0890A:  DECFSZ 01,W
0890C:  BRA    8910
0890E:  BRA    8914
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08910:  BCF    F89.3
08912:  BCF    F92.3
08914:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
08916:  BTFSC  x52.0
08918:  BRA    895E
0891A:  BTFSC  x52.1
0891C:  BRA    895E
0891E:  BTFSC  x52.2
08920:  BRA    895E
08922:  BTFSC  x52.3
08924:  BRA    895E
08926:  BTFSC  x52.4
08928:  BRA    895E
0892A:  BTFSC  x52.5
0892C:  BRA    895E
0892E:  BTFSC  x52.6
08930:  BRA    895E
08932:  BTFSC  x52.7
08934:  BRA    895E
08936:  BTFSC  x53.0
08938:  BRA    895E
0893A:  BTFSC  x53.1
0893C:  BRA    895E
0893E:  BTFSC  x53.2
08940:  BRA    895E
08942:  BTFSC  x53.3
08944:  BRA    895E
08946:  BTFSC  x53.4
08948:  BRA    895E
0894A:  BTFSC  x53.5
0894C:  BRA    895E
0894E:  BTFSC  x53.6
08950:  BRA    895E
08952:  BTFSC  x53.7
08954:  BRA    895E
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
08956:  BCF    F89.3
08958:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0895A:  BCF    F89.4
0895C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0895E:  MOVLW  00
08960:  BTFSC  x41.7
08962:  MOVLW  01
08964:  MOVWF  xB5
08966:  MOVLW  00
08968:  BTFSC  x45.7
0896A:  MOVLW  01
0896C:  XORWF  xB5,W
0896E:  SUBLW  01
08970:  BNZ   8976
08972:  BTFSS  x47.7
08974:  BRA    897A
08976:  BTFSS  1C.5
08978:  BRA    8A12
....................    {
....................       if(In2.B16 == 0 && AutoAck == 0x0F && Ack.B16 == 0)   //use auto acknowlegde
0897A:  BTFSC  x53.7
0897C:  BRA    899A
0897E:  MOVLB  0
08980:  MOVF   x6C,W
08982:  SUBLW  0F
08984:  BTFSC  FD8.2
08986:  BRA    898C
08988:  MOVLB  C
0898A:  BRA    899A
0898C:  MOVLB  C
0898E:  BTFSC  x4F.7
08990:  BRA    899A
....................       {
....................             TimeBase1s = 100 ;            //reload again
08992:  MOVLW  64
08994:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
08996:  MOVFF  6D,1F
....................       }
.................... 
....................       In2.B16 = 1;
0899A:  BSF    x53.7
....................       if(Ack.B16 == 0)
0899C:  BTFSC  x4F.7
0899E:  BRA    89CE
....................       {
....................          if(FlashingFlag == 0)
089A0:  BTFSC  1C.1
089A2:  BRA    89A8
....................             {
....................                Output.B16 = 0;         //Flash output1
089A4:  BCF    x43.7
....................             }
089A6:  BRA    89AA
....................             else
....................             {
....................                Output.B16 = 1;
089A8:  BSF    x43.7
....................             }
....................          if (~AutoTestFlag)
089AA:  BTFSC  1C.4
089AC:  BRA    89CE
....................          {
....................             if(AlarmIndicator.B16 == 1){
089AE:  BTFSS  x4D.7
089B0:  BRA    89CE
....................                 if(OutputBoth.B16 == 0)        //Both output
089B2:  BTFSC  x4B.7
089B4:  BRA    89C0
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
089B6:  BSF    F89.4
089B8:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
089BA:  BSF    F89.3
089BC:  BCF    F92.3
....................                 }
089BE:  BRA    89CE
....................                 else
....................                 {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,1);     //Buzzer
089C0:  BTFSS  x49.7
089C2:  BRA    89CA
089C4:  BSF    F89.4
089C6:  BCF    F92.4
089C8:  BRA    89CE
....................                   else output_bit(Pbell,1);                          //Bell
089CA:  BSF    F89.3
089CC:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
089CE:  MOVLW  01
089D0:  MOVWF  xB0
....................       // SMS Sending   
....................      if((SendSMS.B16 ==0) && (functointest_f ==0) && (Ack.B16 ==0))
089D2:  BTFSC  x5D.7
089D4:  BRA    8A10
089D6:  BTFSC  32.3
089D8:  BRA    8A10
089DA:  BTFSC  x4F.7
089DC:  BRA    8A10
....................      {
....................        SendSMS.B16 =1;
089DE:  BSF    x5D.7
....................          strcat(SMS_MassageSUM, SMS_Massage16);
089E0:  MOVLW  0B
089E2:  MOVWF  xB5
089E4:  MOVLW  9C
089E6:  MOVWF  xB4
089E8:  MOVLW  0B
089EA:  MOVWF  xB7
089EC:  MOVLW  7C
089EE:  MOVWF  xB6
089F0:  MOVLB  0
089F2:  CALL   5CF6
....................          strcat(SMS_MassageSUM, spacestring);
089F6:  MOVLW  0B
089F8:  MOVLB  C
089FA:  MOVWF  xB5
089FC:  MOVLW  9C
089FE:  MOVWF  xB4
08A00:  MOVLW  0C
08A02:  MOVWF  xB7
08A04:  MOVLW  3C
08A06:  MOVWF  xB6
08A08:  MOVLB  0
08A0A:  CALL   5CF6
08A0E:  MOVLB  C
....................        /*
....................        fprintf(CH2,"AT+CMGS=\"");
....................        fprintf(CH2,sms_phonenumber);
....................        
....................        fprintf(CH2,"\"");
....................        putc('\n',CH2);
....................        delay_ms(50);
....................       
....................       fprintf(CH2,SMS_Massage16);   
....................       putc('\n',CH2);
....................       putc(26,CH2);
....................        */
....................      }
....................    }
08A10:  BRA    8AAA
....................    else if(FaultType.B16 == 0)
08A12:  BTFSC  x47.7
08A14:  BRA    8AAA
....................    {
....................       In2.B16 = 0x00;
08A16:  BCF    x53.7
....................       Ack.B16 = 0;
08A18:  BCF    x4F.7
....................       Output.B16 = 1;      //Off LED
08A1A:  BSF    x43.7
....................       SendSMS.B16 =0;// Clear SMS
08A1C:  BCF    x5D.7
.................... 
....................       if((OutputType.B16 == 1 || OutputBoth.B16 == 0)&& inputflag ==0)      //If Buzzer or Both
08A1E:  BTFSC  x49.7
08A20:  BRA    8A26
08A22:  BTFSC  x4B.7
08A24:  BRA    8A40
08A26:  MOVF   xB0,F
08A28:  BNZ   8A40
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
08A2A:  MOVLW  01
08A2C:  MOVWF  xB4
08A2E:  MOVLB  0
08A30:  CALL   5D60
08A34:  DECFSZ 01,W
08A36:  BRA    8A3A
08A38:  BRA    8A3E
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
08A3A:  BCF    F89.4
08A3C:  BCF    F92.4
08A3E:  MOVLB  C
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B16 == 0 || OutputBoth.B16 == 0)&& inputflag ==0)  //If Bell or Both
08A40:  BTFSS  x49.7
08A42:  BRA    8A48
08A44:  BTFSC  x4B.7
08A46:  BRA    8A62
08A48:  MOVF   xB0,F
08A4A:  BNZ   8A62
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08A4C:  MOVLW  02
08A4E:  MOVWF  xB4
08A50:  MOVLB  0
08A52:  CALL   5D60
08A56:  DECFSZ 01,W
08A58:  BRA    8A5C
08A5A:  BRA    8A60
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08A5C:  BCF    F89.3
08A5E:  BCF    F92.3
08A60:  MOVLB  C
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
08A62:  BTFSC  x52.0
08A64:  BRA    8AAA
08A66:  BTFSC  x52.1
08A68:  BRA    8AAA
08A6A:  BTFSC  x52.2
08A6C:  BRA    8AAA
08A6E:  BTFSC  x52.3
08A70:  BRA    8AAA
08A72:  BTFSC  x52.4
08A74:  BRA    8AAA
08A76:  BTFSC  x52.5
08A78:  BRA    8AAA
08A7A:  BTFSC  x52.6
08A7C:  BRA    8AAA
08A7E:  BTFSC  x52.7
08A80:  BRA    8AAA
08A82:  BTFSC  x53.0
08A84:  BRA    8AAA
08A86:  BTFSC  x53.1
08A88:  BRA    8AAA
08A8A:  BTFSC  x53.2
08A8C:  BRA    8AAA
08A8E:  BTFSC  x53.3
08A90:  BRA    8AAA
08A92:  BTFSC  x53.4
08A94:  BRA    8AAA
08A96:  BTFSC  x53.5
08A98:  BRA    8AAA
08A9A:  BTFSC  x53.6
08A9C:  BRA    8AAA
08A9E:  BTFSC  x53.7
08AA0:  BRA    8AAA
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
08AA2:  BCF    F89.3
08AA4:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08AA6:  BCF    F89.4
08AA8:  BCF    F92.4
....................       }
....................    }
08AAA:  MOVLB  0
08AAC:  GOTO   94AC (RETURN)
....................    
....................    
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Send_Ouput(void)
.................... {
....................     Red1_7 = 0;
*
025F4:  CLRF   50
....................     Red8_8 = 0;
025F6:  CLRF   51
....................     Red9_15 = 0;
025F8:  CLRF   52
....................     Red16_16 = 0;
025FA:  CLRF   53
.................... 
....................     Green1_7 = 0;
025FC:  CLRF   54
....................     Green8_8 = 0;
025FE:  CLRF   55
....................     Green9_15 = 0;
02600:  CLRF   56
....................     Green16_16 = 0;
02602:  CLRF   57
.................... 
....................    if(T_test == 0x00)
02604:  MOVF   31,F
02606:  BTFSS  FD8.2
02608:  BRA    299A
....................    {
....................       //if(NoOfPoint >= 10)
....................       //{
....................       
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
0260A:  MOVLB  C
0260C:  BTFSS  x42.0
0260E:  BRA    2616
....................            {
....................              bit_clear(Red1_7,1); bit_clear(Green1_7,1);
02610:  BCF    50.1
02612:  BCF    54.1
....................            }
02614:  BRA    263E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
02616:  BTFSS  x58.0
02618:  BRA    2624
0261A:  BTFSC  x5A.0
0261C:  BRA    2624
....................              {
....................                bit_set(Red1_7,1); bit_clear(Green1_7,1);
0261E:  BSF    50.1
02620:  BCF    54.1
....................              }
02622:  BRA    263E
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
02624:  BTFSC  x58.0
02626:  BRA    2632
02628:  BTFSS  x5A.0
0262A:  BRA    2632
....................              {
....................                bit_clear(Red1_7,1); bit_set(Green1_7,1); 
0262C:  BCF    50.1
0262E:  BSF    54.1
....................              }
02630:  BRA    263E
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
02632:  BTFSS  x58.0
02634:  BRA    263E
02636:  BTFSS  x5A.0
02638:  BRA    263E
....................              {
....................                bit_set(Red1_7,1); bit_set(Green1_7,1) ; 
0263A:  BSF    50.1
0263C:  BSF    54.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
0263E:  BTFSS  x42.1
02640:  BRA    2648
....................            {
....................              bit_clear(Red1_7,2); bit_clear(Green1_7,2);
02642:  BCF    50.2
02644:  BCF    54.2
....................            }
02646:  BRA    2670
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
02648:  BTFSS  x58.1
0264A:  BRA    2656
0264C:  BTFSC  x5A.1
0264E:  BRA    2656
....................              {
....................                bit_set(Red1_7,2); bit_clear(Green1_7,2);
02650:  BSF    50.2
02652:  BCF    54.2
....................              }
02654:  BRA    2670
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
02656:  BTFSC  x58.1
02658:  BRA    2664
0265A:  BTFSS  x5A.1
0265C:  BRA    2664
....................              {
....................                bit_clear(Red1_7,2); bit_set(Green1_7,2); 
0265E:  BCF    50.2
02660:  BSF    54.2
....................              }
02662:  BRA    2670
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
02664:  BTFSS  x58.1
02666:  BRA    2670
02668:  BTFSS  x5A.1
0266A:  BRA    2670
....................              {
....................                bit_set(Red1_7,2); bit_set(Green1_7,2) ; 
0266C:  BSF    50.2
0266E:  BSF    54.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
02670:  BTFSS  x42.2
02672:  BRA    267A
....................            {
....................              bit_clear(Red1_7,3); bit_clear(Green1_7,3);
02674:  BCF    50.3
02676:  BCF    54.3
....................            }
02678:  BRA    26A2
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
0267A:  BTFSS  x58.2
0267C:  BRA    2688
0267E:  BTFSC  x5A.2
02680:  BRA    2688
....................              {
....................                bit_set(Red1_7,3); bit_clear(Green1_7,3);
02682:  BSF    50.3
02684:  BCF    54.3
....................              }
02686:  BRA    26A2
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
02688:  BTFSC  x58.2
0268A:  BRA    2696
0268C:  BTFSS  x5A.2
0268E:  BRA    2696
....................              {
....................                bit_clear(Red1_7,3); bit_set(Green1_7,3); 
02690:  BCF    50.3
02692:  BSF    54.3
....................              }
02694:  BRA    26A2
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
02696:  BTFSS  x58.2
02698:  BRA    26A2
0269A:  BTFSS  x5A.2
0269C:  BRA    26A2
....................              {
....................                bit_set(Red1_7,3); bit_set(Green1_7,3) ; 
0269E:  BSF    50.3
026A0:  BSF    54.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
026A2:  BTFSS  x42.3
026A4:  BRA    26AC
....................            {
....................              bit_clear(Red1_7,4); bit_clear(Green1_7,4);
026A6:  BCF    50.4
026A8:  BCF    54.4
....................            }
026AA:  BRA    26D4
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
026AC:  BTFSS  x58.3
026AE:  BRA    26BA
026B0:  BTFSC  x5A.3
026B2:  BRA    26BA
....................              {
....................                bit_set(Red1_7,4); bit_clear(Green1_7,4);
026B4:  BSF    50.4
026B6:  BCF    54.4
....................              }
026B8:  BRA    26D4
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
026BA:  BTFSC  x58.3
026BC:  BRA    26C8
026BE:  BTFSS  x5A.3
026C0:  BRA    26C8
....................              {
....................                bit_clear(Red1_7,4); bit_set(Green1_7,4); 
026C2:  BCF    50.4
026C4:  BSF    54.4
....................              }
026C6:  BRA    26D4
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
026C8:  BTFSS  x58.3
026CA:  BRA    26D4
026CC:  BTFSS  x5A.3
026CE:  BRA    26D4
....................              {
....................                bit_set(Red1_7,4); bit_set(Green1_7,4) ; 
026D0:  BSF    50.4
026D2:  BSF    54.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
026D4:  BTFSS  x42.4
026D6:  BRA    26DE
....................            {
....................              bit_clear(Red1_7,5); bit_clear(Green1_7,5);
026D8:  BCF    50.5
026DA:  BCF    54.5
....................            }
026DC:  BRA    2706
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
026DE:  BTFSS  x58.4
026E0:  BRA    26EC
026E2:  BTFSC  x5A.4
026E4:  BRA    26EC
....................              {
....................                bit_set(Red1_7,5); bit_clear(Green1_7,5);
026E6:  BSF    50.5
026E8:  BCF    54.5
....................              }
026EA:  BRA    2706
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
026EC:  BTFSC  x58.4
026EE:  BRA    26FA
026F0:  BTFSS  x5A.4
026F2:  BRA    26FA
....................              {
....................                bit_clear(Red1_7,5); bit_set(Green1_7,5); 
026F4:  BCF    50.5
026F6:  BSF    54.5
....................              }
026F8:  BRA    2706
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
026FA:  BTFSS  x58.4
026FC:  BRA    2706
026FE:  BTFSS  x5A.4
02700:  BRA    2706
....................              {
....................                bit_set(Red1_7,5); bit_set(Green1_7,5) ; 
02702:  BSF    50.5
02704:  BSF    54.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
02706:  BTFSS  x42.5
02708:  BRA    2710
....................            {
....................              bit_clear(Red1_7,6); bit_clear(Green1_7,6);
0270A:  BCF    50.6
0270C:  BCF    54.6
....................            }
0270E:  BRA    2738
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
02710:  BTFSS  x58.5
02712:  BRA    271E
02714:  BTFSC  x5A.5
02716:  BRA    271E
....................              {
....................                bit_set(Red1_7,6); bit_clear(Green1_7,6);
02718:  BSF    50.6
0271A:  BCF    54.6
....................              }
0271C:  BRA    2738
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
0271E:  BTFSC  x58.5
02720:  BRA    272C
02722:  BTFSS  x5A.5
02724:  BRA    272C
....................              {
....................                bit_clear(Red1_7,6); bit_set(Green1_7,6); 
02726:  BCF    50.6
02728:  BSF    54.6
....................              }
0272A:  BRA    2738
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
0272C:  BTFSS  x58.5
0272E:  BRA    2738
02730:  BTFSS  x5A.5
02732:  BRA    2738
....................              {
....................                bit_set(Red1_7,6); bit_set(Green1_7,6) ; 
02734:  BSF    50.6
02736:  BSF    54.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
02738:  BTFSS  x42.6
0273A:  BRA    2742
....................            {
....................              bit_clear(Red1_7,7); bit_clear(Green1_7,7);
0273C:  BCF    50.7
0273E:  BCF    54.7
....................            }
02740:  BRA    276A
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
02742:  BTFSS  x58.6
02744:  BRA    2750
02746:  BTFSC  x5A.6
02748:  BRA    2750
....................              {
....................                bit_set(Red1_7,7); bit_clear(Green1_7,7);
0274A:  BSF    50.7
0274C:  BCF    54.7
....................              }
0274E:  BRA    276A
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
02750:  BTFSC  x58.6
02752:  BRA    275E
02754:  BTFSS  x5A.6
02756:  BRA    275E
....................              {
....................                bit_clear(Red1_7,7); bit_set(Green1_7,7); 
02758:  BCF    50.7
0275A:  BSF    54.7
....................              }
0275C:  BRA    276A
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
0275E:  BTFSS  x58.6
02760:  BRA    276A
02762:  BTFSS  x5A.6
02764:  BRA    276A
....................              {
....................                bit_set(Red1_7,7); bit_set(Green
02766:  BSF    50.7
02768:  BSF    54.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
0276A:  BTFSS  x42.7
0276C:  BRA    2774
....................            {
....................              bit_clear(Red8_8,0); bit_clear(Green8_8,0);
0276E:  BCF    51.0
02770:  BCF    55.0
....................            }
02772:  BRA    279C
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
02774:  BTFSS  x58.7
02776:  BRA    2782
02778:  BTFSC  x5A.7
0277A:  BRA    2782
....................              {
....................                bit_set(Red8_8,0); bit_clear(Green8_8,0);
0277C:  BSF    51.0
0277E:  BCF    55.0
....................              }
02780:  BRA    279C
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
02782:  BTFSC  x58.7
02784:  BRA    2790
02786:  BTFSS  x5A.7
02788:  BRA    2790
....................              {
....................                bit_clear(Red8_8,0); bit_set(Green8_8,0); 
0278A:  BCF    51.0
0278C:  BSF    55.0
....................              }
0278E:  BRA    279C
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
02790:  BTFSS  x58.7
02792:  BRA    279C
02794:  BTFSS  x5A.7
02796:  BRA    279C
....................              {
....................                bit_set(Red8_8,0); bit_set(Green8_8,0) ; 
02798:  BSF    51.0
0279A:  BSF    55.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            ////////////////////////////////////////////////////////
....................            if(Output.B9)//++++++++++++B9+++++++++++++++++++++
0279C:  BTFSS  x43.0
0279E:  BRA    27A6
....................            {
....................              bit_clear(Red9_15,1); bit_clear(Green9_15,1);
027A0:  BCF    52.1
027A2:  BCF    56.1
....................            }
027A4:  BRA    27CE
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B9 )&&(GREEN_Colour.B9 ==0 ))//Red
027A6:  BTFSS  x59.0
027A8:  BRA    27B4
027AA:  BTFSC  x5B.0
027AC:  BRA    27B4
....................              {
....................                bit_set(Red9_15,1); bit_clear(Green9_15,1);
027AE:  BSF    52.1
027B0:  BCF    56.1
....................              }
027B2:  BRA    27CE
....................              else if((RED_Colour.B9==0 )&&(GREEN_Colour.B9))//Green
027B4:  BTFSC  x59.0
027B6:  BRA    27C2
027B8:  BTFSS  x5B.0
027BA:  BRA    27C2
....................              {
....................                bit_clear(Red9_15,1); bit_set(Green9_15,1); 
027BC:  BCF    52.1
027BE:  BSF    56.1
....................              }
027C0:  BRA    27CE
....................              else if((RED_Colour.B9)&&(GREEN_Colour.B9))//Ambian
027C2:  BTFSS  x59.0
027C4:  BRA    27CE
027C6:  BTFSS  x5B.0
027C8:  BRA    27CE
....................              {
....................                bit_set(Red9_15,1); bit_set(Green9_15,1) ; 
027CA:  BSF    52.1
027CC:  BSF    56.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B10)//++++++++++++B10+++++++++++++++++++++
027CE:  BTFSS  x43.1
027D0:  BRA    27D8
....................            {
....................              bit_clear(Red9_15,2); bit_clear(Green9_15,2);
027D2:  BCF    52.2
027D4:  BCF    56.2
....................            }
027D6:  BRA    2800
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B10 )&&(GREEN_Colour.B10 ==0 ))//Red
027D8:  BTFSS  x59.1
027DA:  BRA    27E6
027DC:  BTFSC  x5B.1
027DE:  BRA    27E6
....................              {
....................                bit_set(Red9_15,2); bit_clear(Green9_15,2);
027E0:  BSF    52.2
027E2:  BCF    56.2
....................              }
027E4:  BRA    2800
....................              else if((RED_Colour.B10==0 )&&(GREEN_Colour.B10))//Green
027E6:  BTFSC  x59.1
027E8:  BRA    27F4
027EA:  BTFSS  x5B.1
027EC:  BRA    27F4
....................              {
....................                bit_clear(Red9_15,2); bit_set(Green9_15,2); 
027EE:  BCF    52.2
027F0:  BSF    56.2
....................              }
027F2:  BRA    2800
....................              else if((RED_Colour.B10)&&(GREEN_Colour.B10))//Ambian
027F4:  BTFSS  x59.1
027F6:  BRA    2800
027F8:  BTFSS  x5B.1
027FA:  BRA    2800
....................              {
....................                bit_set(Red9_15,2); bit_set(Green9_15,2) ; 
027FC:  BSF    52.2
027FE:  BSF    56.2
....................              }  
....................            }
....................            
....................        // }
....................         
....................        // if(NoOfPoint >= 20)
....................       //{   
....................            ////////////////////////////////////////////////////////
....................             if(Output.B11)//++++++++++++B11+++++++++++++++++++++
02800:  BTFSS  x43.2
02802:  BRA    280A
....................            {
....................              bit_clear(Red9_15,3); bit_clear(Green9_15,3);
02804:  BCF    52.3
02806:  BCF    56.3
....................            }
02808:  BRA    2832
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B11 )&&(GREEN_Colour.B11 ==0 ))//Red
0280A:  BTFSS  x59.2
0280C:  BRA    2818
0280E:  BTFSC  x5B.2
02810:  BRA    2818
....................              {
....................                bit_set(Red9_15,3); bit_clear(Green9_15,3);
02812:  BSF    52.3
02814:  BCF    56.3
....................              }
02816:  BRA    2832
....................              else if((RED_Colour.B11==0 )&&(GREEN_Colour.B11))//Green
02818:  BTFSC  x59.2
0281A:  BRA    2826
0281C:  BTFSS  x5B.2
0281E:  BRA    2826
....................              {
....................                bit_clear(Red9_15,3); bit_set(Green9_15,3); 
02820:  BCF    52.3
02822:  BSF    56.3
....................              }
02824:  BRA    2832
....................              else if((RED_Colour.B11)&&(GREEN_Colour.B11))//Ambian
02826:  BTFSS  x59.2
02828:  BRA    2832
0282A:  BTFSS  x5B.2
0282C:  BRA    2832
....................              {
....................                bit_set(Red9_15,3); bit_set(Green9_15,3) ; 
0282E:  BSF    52.3
02830:  BSF    56.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B12)//++++++++++++B12+++++++++++++++++++++
02832:  BTFSS  x43.3
02834:  BRA    283C
....................            {
....................              bit_clear(Red9_15,4); bit_clear(Green9_15,4);
02836:  BCF    52.4
02838:  BCF    56.4
....................            }
0283A:  BRA    2864
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B12 )&&(GREEN_Colour.B12 ==0 ))//Red
0283C:  BTFSS  x59.3
0283E:  BRA    284A
02840:  BTFSC  x5B.3
02842:  BRA    284A
....................              {
....................                bit_set(Red9_15,4); bit_clear(Green9_15,4);
02844:  BSF    52.4
02846:  BCF    56.4
....................              }
02848:  BRA    2864
....................              else if((RED_Colour.B12==0 )&&(GREEN_Colour.B12))//Green
0284A:  BTFSC  x59.3
0284C:  BRA    2858
0284E:  BTFSS  x5B.3
02850:  BRA    2858
....................              {
....................                bit_clear(Red9_15,4); bit_set(Green9_15,4); 
02852:  BCF    52.4
02854:  BSF    56.4
....................              }
02856:  BRA    2864
....................              else if((RED_Colour.B12)&&(GREEN_Colour.B12))//Ambian
02858:  BTFSS  x59.3
0285A:  BRA    2864
0285C:  BTFSS  x5B.3
0285E:  BRA    2864
....................              {
....................                bit_set(Red9_15,4); bit_set(Green9_15,4) ; 
02860:  BSF    52.4
02862:  BSF    56.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B13)//++++++++++++B13+++++++++++++++++++++
02864:  BTFSS  x43.4
02866:  BRA    286E
....................            {
....................              bit_clear(Red9_15,5); bit_clear(Green9_15,5);
02868:  BCF    52.5
0286A:  BCF    56.5
....................            }
0286C:  BRA    2896
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B13 )&&(GREEN_Colour.B13 ==0 ))//Red
0286E:  BTFSS  x59.4
02870:  BRA    287C
02872:  BTFSC  x5B.4
02874:  BRA    287C
....................              {
....................                bit_set(Red9_15,5); bit_clear(Green9_15,5);
02876:  BSF    52.5
02878:  BCF    56.5
....................              }
0287A:  BRA    2896
....................              else if((RED_Colour.B13==0 )&&(GREEN_Colour.B13))//Green
0287C:  BTFSC  x59.4
0287E:  BRA    288A
02880:  BTFSS  x5B.4
02882:  BRA    288A
....................              {
....................                bit_clear(Red9_15,5); bit_set(Green9_15,5); 
02884:  BCF    52.5
02886:  BSF    56.5
....................              }
02888:  BRA    2896
....................              else if((RED_Colour.B13)&&(GREEN_Colour.B13))//Ambian
0288A:  BTFSS  x59.4
0288C:  BRA    2896
0288E:  BTFSS  x5B.4
02890:  BRA    2896
....................              {
....................                bit_set(Red9_15,5); bit_set(Green9_15,5) ; 
02892:  BSF    52.5
02894:  BSF    56.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B14)//++++++++++++B14+++++++++++++++++++++
02896:  BTFSS  x43.5
02898:  BRA    28A0
....................            {
....................              bit_clear(Red9_15,6); bit_clear(Green9_15,6);
0289A:  BCF    52.6
0289C:  BCF    56.6
....................            }
0289E:  BRA    28C8
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B14 )&&(GREEN_Colour.B14 ==0 ))//Red
028A0:  BTFSS  x59.5
028A2:  BRA    28AE
028A4:  BTFSC  x5B.5
028A6:  BRA    28AE
....................              {
....................                bit_set(Red9_15,6); bit_clear(Green9_15,6);
028A8:  BSF    52.6
028AA:  BCF    56.6
....................              }
028AC:  BRA    28C8
....................              else if((RED_Colour.B14==0 )&&(GREEN_Colour.B14))//Green
028AE:  BTFSC  x59.5
028B0:  BRA    28BC
028B2:  BTFSS  x5B.5
028B4:  BRA    28BC
....................              {
....................                bit_clear(Red9_15,6); bit_set(Green9_15,6); 
028B6:  BCF    52.6
028B8:  BSF    56.6
....................              }
028BA:  BRA    28C8
....................              else if((RED_Colour.B14)&&(GREEN_Colour.B14))//Ambian
028BC:  BTFSS  x59.5
028BE:  BRA    28C8
028C0:  BTFSS  x5B.5
028C2:  BRA    28C8
....................              {
....................                bit_set(Red9_15,6); bit_set(Green9_15,6) ; 
028C4:  BSF    52.6
028C6:  BSF    56.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B15)//++++++++++++B15+++++++++++++++++++++
028C8:  BTFSS  x43.6
028CA:  BRA    28D2
....................            {
....................              bit_clear(Red9_15,7); bit_clear(Green9_15,7);
028CC:  BCF    52.7
028CE:  BCF    56.7
....................            }
028D0:  BRA    28FA
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B15 )&&(GREEN_Colour.B15 ==0 ))//Red
028D2:  BTFSS  x59.6
028D4:  BRA    28E0
028D6:  BTFSC  x5B.6
028D8:  BRA    28E0
....................              {
....................                bit_set(Red9_15,7); bit_clear(Green9_15,7);
028DA:  BSF    52.7
028DC:  BCF    56.7
....................              }
028DE:  BRA    28FA
....................              else if((RED_Colour.B15==0 )&&(GREEN_Colour.B15))//Green
028E0:  BTFSC  x59.6
028E2:  BRA    28EE
028E4:  BTFSS  x5B.6
028E6:  BRA    28EE
....................              {
....................                bit_clear(Red9_15,7); bit_set(Green9_15,7); 
028E8:  BCF    52.7
028EA:  BSF    56.7
....................              }
028EC:  BRA    28FA
....................              else if((RED_Colour.B15)&&(GREEN_Colour.B15))//Ambian
028EE:  BTFSS  x59.6
028F0:  BRA    28FA
028F2:  BTFSS  x5B.6
028F4:  BRA    28FA
....................              {
....................                bit_set(Red9_15,7); bit_set(Green9_15,7) ; 
028F6:  BSF    52.7
028F8:  BSF    56.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B16)//++++++++++++B16+++++++++++++++++++++
028FA:  BTFSS  x43.7
028FC:  BRA    2904
....................            {
....................              bit_clear(Red16_16,0); bit_clear(Green16_16,0);
028FE:  BCF    53.0
02900:  BCF    57.0
....................            }
02902:  BRA    292C
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B16 )&&(GREEN_Colour.B16 ==0 ))//Red
02904:  BTFSS  x59.7
02906:  BRA    2912
02908:  BTFSC  x5B.7
0290A:  BRA    2912
....................              {
....................                bit_set(Red16_16,0); bit_clear(Green16_16,0);
0290C:  BSF    53.0
0290E:  BCF    57.0
....................              }
02910:  BRA    292C
....................              else if((RED_Colour.B16==0 )&&(GREEN_Colour.B16))//Green
02912:  BTFSC  x59.7
02914:  BRA    2920
02916:  BTFSS  x5B.7
02918:  BRA    2920
....................              {
....................                bit_clear(Red16_16,0); bit_set(Green16_16,0); 
0291A:  BCF    53.0
0291C:  BSF    57.0
....................              }
0291E:  BRA    292C
....................              else if((RED_Colour.B16)&&(GREEN_Colour.B16))//Ambian
02920:  BTFSS  x59.7
02922:  BRA    292C
02924:  BTFSS  x5B.7
02926:  BRA    292C
....................              {
....................                bit_set(Red16_16,0); bit_set(Green16_16,0) ; 
02928:  BSF    53.0
0292A:  BSF    57.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            
....................             /*
....................           
....................           
....................            ////////////////////////////////////////////////////////
....................            if(Output.B17)//++++++++++++B17+++++++++++++++++++++
....................            {
....................              bit_clear(Green11_18,6); bit_clear(Red11_18,6);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B17 )&&(GREEN_Colour.B17 ==0 ))//Red
....................              {
....................                bit_set(Red11_18,6); bit_clear(Green11_18,6);
....................              }
....................              else if((RED_Colour.B17==0 )&&(GREEN_Colour.B17))//Green
....................              {
....................                bit_clear(Red11_18,6); bit_set(Green11_18,6); 
....................              }
....................              else if((RED_Colour.B17)&&(GREEN_Colour.B17))//Ambian
....................              {
....................                bit_set(Red11_18,6); bit_set(Green11_18,6) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B18)//++++++++++++B18+++++++++++++++++++++
....................            {
....................              bit_clear(Green11_18,7); bit_clear(Red11_18,7);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B18 )&&(GREEN_Colour.B18 ==0 ))//Red
....................              {
....................                bit_set(Red11_18,7); bit_clear(Green11_18,7);
....................              }
....................              else if((RED_Colour.B18==0 )&&(GREEN_Colour.B18))//Green
....................              {
....................                bit_clear(Red11_18,7); bit_set(Green11_18,7); 
....................              }
....................              else if((RED_Colour.B18)&&(GREEN_Colour.B18))//Ambian
....................              {
....................                bit_set(Red11_18,7); bit_set(Green11_18,7) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B19)//++++++++++++B19+++++++++++++++++++++
....................            {
....................              bit_clear(Green19_20,0); bit_clear(Red19_20,0);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B19 )&&(GREEN_Colour.B19 ==0 ))//Red
....................              {
....................                bit_set(Red19_20,0); bit_clear(Green19_20,0);
....................              }
....................              else if((RED_Colour.B19==0 )&&(GREEN_Colour.B19))//Green
....................              {
....................                bit_clear(Red19_20,0); bit_set(Green19_20,0); 
....................              }
....................              else if((RED_Colour.B19)&&(GREEN_Colour.B19))//Ambian
....................              {
....................                bit_set(Red19_20,0); bit_set(Green19_20,0) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B20)//++++++++++++B20+++++++++++++++++++++
....................            {
....................              bit_clear(Green19_20,1); bit_clear(Red19_20,1);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B20 )&&(GREEN_Colour.B20 ==0 ))//Red
....................              {
....................                bit_set(Red19_20,1); bit_clear(Green19_20,1);
....................              }
....................              else if((RED_Colour.B20==0 )&&(GREEN_Colour.B20))//Green
....................              {
....................                bit_clear(Red19_20,1); bit_set(Green19_20,1); 
....................              }
....................              else if((RED_Colour.B20)&&(GREEN_Colour.B20))//Ambian
....................              {
....................                bit_set(Red19_20,1); bit_set(Green19_20,1) ; 
....................              }  
....................            }
....................            
....................            
....................            ////////////////////////////////////////////////////////
....................          
....................       //} 
.................... 
....................         */
....................         
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_7);
0292C:  MOVLW  04
0292E:  MOVWF  xBC
02930:  MOVFF  50,CBD
02934:  MOVLB  0
02936:  RCALL  25C8
....................            IO_OUTPUT_B(IO_DEVICE_2, Red8_8);
02938:  MOVLW  04
0293A:  MOVLB  C
0293C:  MOVWF  xBC
0293E:  MOVFF  51,CBD
02942:  MOVLB  0
02944:  RCALL  25DE
....................                       
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_7);
02946:  MOVLW  06
02948:  MOVLB  C
0294A:  MOVWF  xBC
0294C:  MOVFF  54,CBD
02950:  MOVLB  0
02952:  RCALL  25C8
....................            IO_OUTPUT_B(IO_DEVICE_3, Green8_8);
02954:  MOVLW  06
02956:  MOVLB  C
02958:  MOVWF  xBC
0295A:  MOVFF  55,CBD
0295E:  MOVLB  0
02960:  RCALL  25DE
....................            
....................            IO_OUTPUT_A(IO_DEVICE_5, Red9_15);                                                                                                                                      
02962:  MOVLW  0A
02964:  MOVLB  C
02966:  MOVWF  xBC
02968:  MOVFF  52,CBD
0296C:  MOVLB  0
0296E:  RCALL  25C8
....................            IO_OUTPUT_B(IO_DEVICE_5, Red16_16);
02970:  MOVLW  0A
02972:  MOVLB  C
02974:  MOVWF  xBC
02976:  MOVFF  53,CBD
0297A:  MOVLB  0
0297C:  RCALL  25DE
....................                      
....................            IO_OUTPUT_A(IO_DEVICE_4, Green9_15);
0297E:  MOVLW  08
02980:  MOVLB  C
02982:  MOVWF  xBC
02984:  MOVFF  56,CBD
02988:  MOVLB  0
0298A:  RCALL  25C8
....................            IO_OUTPUT_B(IO_DEVICE_4, Green16_16);
0298C:  MOVLW  08
0298E:  MOVLB  C
02990:  MOVWF  xBC
02992:  MOVFF  57,CBD
02996:  MOVLB  0
02998:  RCALL  25DE
....................            
....................                                 
....................            //IO_OUTPUT_A(IO_DEVICE_4, Red1_8); //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_4, Red9_10); //jj test
....................            
....................            //IO_OUTPUT_A(IO_DEVICE_5, Green1_8);  //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_5, Green9_10); //jj test
....................                                            
....................            
....................    }
0299A:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
....................    if(NoOfPoint == 8)
*
05B24:  MOVF   x6F,W
05B26:  SUBLW  08
05B28:  BNZ   5B70
....................    {
....................       Inputt.B1 = ~InputType.B1;
05B2A:  MOVLB  C
05B2C:  BCF    x40.0
05B2E:  BTFSS  x44.0
05B30:  BSF    x40.0
....................       Inputt.B2 = ~InputType.B2;
05B32:  BCF    x40.1
05B34:  BTFSS  x44.1
05B36:  BSF    x40.1
....................       Inputt.B3 = ~InputType.B3;
05B38:  BCF    x40.2
05B3A:  BTFSS  x44.2
05B3C:  BSF    x40.2
....................       Inputt.B4 = ~InputType.B4;
05B3E:  BCF    x40.3
05B40:  BTFSS  x44.3
05B42:  BSF    x40.3
....................       Inputt.B5 = ~InputType.B5;
05B44:  BCF    x40.4
05B46:  BTFSS  x44.4
05B48:  BSF    x40.4
....................       Inputt.B6 = ~InputType.B6;
05B4A:  BCF    x40.5
05B4C:  BTFSS  x44.5
05B4E:  BSF    x40.5
....................       Inputt.B7 = ~InputType.B7;
05B50:  BCF    x40.6
05B52:  BTFSS  x44.6
05B54:  BSF    x40.6
....................       Inputt.B8 = ~InputType.B8;
05B56:  BCF    x40.7
05B58:  BTFSS  x44.7
05B5A:  BSF    x40.7
....................       Ack.B1 = 0;
05B5C:  BCF    x4E.0
....................       Ack.B2 = 0;
05B5E:  BCF    x4E.1
....................       Ack.B3 = 0;
05B60:  BCF    x4E.2
....................       Ack.B4 = 0;
05B62:  BCF    x4E.3
....................       Ack.B5 = 0;
05B64:  BCF    x4E.4
....................       Ack.B6 = 0;
05B66:  BCF    x4E.5
....................       Ack.B7 = 0;
05B68:  BCF    x4E.6
....................       Ack.B8 = 0;
05B6A:  BCF    x4E.7
....................    }
05B6C:  BRA    5BF8
05B6E:  MOVLB  0
....................    else if(NoOfPoint == 16)
05B70:  MOVF   x6F,W
05B72:  SUBLW  10
05B74:  BNZ   5BF8
....................    {
....................       Inputt.B1 = ~InputType.B1;
05B76:  MOVLB  C
05B78:  BCF    x40.0
05B7A:  BTFSS  x44.0
05B7C:  BSF    x40.0
....................       Inputt.B2 = ~InputType.B2;
05B7E:  BCF    x40.1
05B80:  BTFSS  x44.1
05B82:  BSF    x40.1
....................       Inputt.B3 = ~InputType.B3;
05B84:  BCF    x40.2
05B86:  BTFSS  x44.2
05B88:  BSF    x40.2
....................       Inputt.B4 = ~InputType.B4;
05B8A:  BCF    x40.3
05B8C:  BTFSS  x44.3
05B8E:  BSF    x40.3
....................       Inputt.B5 = ~InputType.B5;
05B90:  BCF    x40.4
05B92:  BTFSS  x44.4
05B94:  BSF    x40.4
....................       Inputt.B6 = ~InputType.B6;
05B96:  BCF    x40.5
05B98:  BTFSS  x44.5
05B9A:  BSF    x40.5
....................       Inputt.B7 = ~InputType.B7;
05B9C:  BCF    x40.6
05B9E:  BTFSS  x44.6
05BA0:  BSF    x40.6
....................       Inputt.B8 = ~InputType.B8;
05BA2:  BCF    x40.7
05BA4:  BTFSS  x44.7
05BA6:  BSF    x40.7
....................       Inputt.B9 = ~InputType.B9;
05BA8:  BCF    x41.0
05BAA:  BTFSS  x45.0
05BAC:  BSF    x41.0
....................       Inputt.B10 = ~InputType.B10;
05BAE:  BCF    x41.1
05BB0:  BTFSS  x45.1
05BB2:  BSF    x41.1
....................       Inputt.B11 = ~InputType.B11;
05BB4:  BCF    x41.2
05BB6:  BTFSS  x45.2
05BB8:  BSF    x41.2
....................       Inputt.B12 = ~InputType.B12;
05BBA:  BCF    x41.3
05BBC:  BTFSS  x45.3
05BBE:  BSF    x41.3
....................       Inputt.B13 = ~InputType.B13;
05BC0:  BCF    x41.4
05BC2:  BTFSS  x45.4
05BC4:  BSF    x41.4
....................       Inputt.B14 = ~InputType.B14;
05BC6:  BCF    x41.5
05BC8:  BTFSS  x45.5
05BCA:  BSF    x41.5
....................       Inputt.B15 = ~InputType.B15;
05BCC:  BCF    x41.6
05BCE:  BTFSS  x45.6
05BD0:  BSF    x41.6
....................       Inputt.B16 = ~InputType.B16;
05BD2:  BCF    x41.7
05BD4:  BTFSS  x45.7
05BD6:  BSF    x41.7
....................       Ack.B1 = 0;
05BD8:  BCF    x4E.0
....................       Ack.B2 = 0;
05BDA:  BCF    x4E.1
....................       Ack.B3 = 0;
05BDC:  BCF    x4E.2
....................       Ack.B4 = 0;
05BDE:  BCF    x4E.3
....................       Ack.B5 = 0;
05BE0:  BCF    x4E.4
....................       Ack.B6 = 0;
05BE2:  BCF    x4E.5
....................       Ack.B7 = 0;
05BE4:  BCF    x4E.6
....................       Ack.B8 = 0;
05BE6:  BCF    x4E.7
....................       Ack.B9 = 0;
05BE8:  BCF    x4F.0
....................       Ack.B10 = 0;
05BEA:  BCF    x4F.1
....................       Ack.B11 = 0;
05BEC:  BCF    x4F.2
....................       Ack.B12 = 0;
05BEE:  BCF    x4F.3
....................       Ack.B13 = 0;
05BF0:  BCF    x4F.4
....................       Ack.B14 = 0;
05BF2:  BCF    x4F.5
....................       Ack.B15 = 0;
05BF4:  BCF    x4F.6
....................       Ack.B16 = 0;
05BF6:  BCF    x4F.7
05BF8:  MOVLB  0
....................    }
05BFA:  GOTO   5CD2 (RETURN)
....................   
.................... }
.................... 
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
05BFE:  MOVFF  34,CB4
....................    output_temp[1] = output9_16;
05C02:  MOVFF  35,CB5
.................... 
.................... 
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
05C06:  BSF    F94.2
05C08:  BTFSC  F82.2
05C0A:  BRA    5C10
05C0C:  BTFSS  1C.6
05C0E:  BRA    5C14
05C10:  BTFSS  1C.4
05C12:  BRA    5C20
05C14:  MOVLW  32
05C16:  MOVLB  C
05C18:  MOVWF  xBD
05C1A:  MOVLB  0
05C1C:  CALL   0658
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
05C20:  BSF    F94.2
05C22:  BTFSC  F82.2
05C24:  BRA    5C2A
05C26:  BTFSS  1C.6
05C28:  BRA    5C2E
05C2A:  BTFSS  1C.4
05C2C:  BRA    5CBA
....................        {
....................            if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
05C2E:  BSF    F94.2
05C30:  BTFSC  F82.2
05C32:  BRA    5C38
05C34:  BTFSS  1C.6
05C36:  BRA    5C3C
05C38:  BTFSS  1C.4
05C3A:  BRA    5CB8
....................            {
....................              restart_wdt();
05C3C:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
05C3E:  MOVF   31,F
05C40:  BNZ   5C46
05C42:  MOVLW  06
05C44:  MOVWF  31
....................              Test = 1;
05C46:  BSF    1C.6
....................               //if(NoOfPoint >= 16)
....................              // {
....................              
....................                  IO_OUTPUT_A(IO_DEVICE_2, 0xFF);
05C48:  MOVLW  04
05C4A:  MOVLB  C
05C4C:  MOVWF  xBC
05C4E:  SETF   xBD
05C50:  MOVLB  0
05C52:  CALL   25C8
....................                  IO_OUTPUT_B(IO_DEVICE_2, 0xFF);
05C56:  MOVLW  04
05C58:  MOVLB  C
05C5A:  MOVWF  xBC
05C5C:  SETF   xBD
05C5E:  MOVLB  0
05C60:  CALL   25DE
....................                             
....................                  IO_OUTPUT_A(IO_DEVICE_3, 0xFF);
05C64:  MOVLW  06
05C66:  MOVLB  C
05C68:  MOVWF  xBC
05C6A:  SETF   xBD
05C6C:  MOVLB  0
05C6E:  CALL   25C8
....................                  IO_OUTPUT_B(IO_DEVICE_3, 0xFF);
05C72:  MOVLW  06
05C74:  MOVLB  C
05C76:  MOVWF  xBC
05C78:  SETF   xBD
05C7A:  MOVLB  0
05C7C:  CALL   25DE
....................                  
....................                  IO_OUTPUT_A(IO_DEVICE_4, 0xFF);
05C80:  MOVLW  08
05C82:  MOVLB  C
05C84:  MOVWF  xBC
05C86:  SETF   xBD
05C88:  MOVLB  0
05C8A:  CALL   25C8
....................                  IO_OUTPUT_B(IO_DEVICE_4, 0xFF);
05C8E:  MOVLW  08
05C90:  MOVLB  C
05C92:  MOVWF  xBC
05C94:  SETF   xBD
05C96:  MOVLB  0
05C98:  CALL   25DE
....................                            
....................                  IO_OUTPUT_A(IO_DEVICE_5, 0xFF);
05C9C:  MOVLW  0A
05C9E:  MOVLB  C
05CA0:  MOVWF  xBC
05CA2:  SETF   xBD
05CA4:  MOVLB  0
05CA6:  CALL   25C8
....................                  IO_OUTPUT_B(IO_DEVICE_5, 0xFF);
05CAA:  MOVLW  0A
05CAC:  MOVLB  C
05CAE:  MOVWF  xBC
05CB0:  SETF   xBD
05CB2:  MOVLB  0
05CB4:  CALL   25DE
....................                  //PCF8575_write(0xFF,0x00,Input1_8_Wr_addr);
....................                  //PCF8575_write(0xFF,0x00,Input9_16_Wr_addr);
....................                  //IO_OUTPUT_B(IO_DEVICE_0, 0x00);
....................                  //IO_OUTPUT_B(IO_DEVICE_1, 0x00);
....................              // }
....................              
....................            }
....................        }
05CB8:  BRA    5CCA
....................        else if(input(Ptest) == 1 && Test == 1)
05CBA:  BSF    F94.2
05CBC:  BTFSS  F82.2
05CBE:  BRA    5CCA
05CC0:  BTFSS  1C.6
05CC2:  BRA    5CCA
....................        {
....................            T_test = 0x00;
05CC4:  CLRF   31
....................            Test = 0;
05CC6:  BCF    1C.6
....................            Test_fault = 0;
05CC8:  BCF    1C.5
....................        }
.................... 
.................... 
....................        if(Test_fault == 1)
05CCA:  BTFSS  1C.5
05CCC:  BRA    5CDC
....................        {
....................           functointest_f = 1;
05CCE:  BSF    32.3
....................           ForceAllAlarm();
05CD0:  BRA    5B24
....................           //Anal_Function();
....................           if(input(Ptest) == 1)
05CD2:  BSF    F94.2
05CD4:  BTFSS  F82.2
05CD6:  BRA    5CDA
....................           {
....................             Test_fault = 0;
05CD8:  BCF    1C.5
....................           }
....................        }
05CDA:  BRA    5CF2
....................       
....................        else if(input(Ptest) == 1 && Test == 1)
05CDC:  BSF    F94.2
05CDE:  BTFSS  F82.2
05CE0:  BRA    5CF2
05CE2:  BTFSS  1C.6
05CE4:  BRA    5CF2
....................        {
....................           if(NoOfPoint >= 16)
05CE6:  MOVF   x6F,W
05CE8:  SUBLW  0F
05CEA:  BC    5CEC
....................           {
....................              //PCF8575_write(0xFF,output_temp[0],Input1_8_Wr_addr);
....................              //PCF8575_write(0xFF,output_temp[1],Input9_16_Wr_addr);
....................              //IO_OUTPUT_B(IO_DEVICE_0, output_temp[0]);
....................              //IO_OUTPUT_B(IO_DEVICE_1, output_temp[1]); 
....................           }
....................           
.................... 
....................           T_test = 0x00;
05CEC:  CLRF   31
....................           Test = 0;
05CEE:  BCF    1C.6
....................           Test_fault = 0;
05CF0:  BCF    1C.5
....................        }
05CF2:  GOTO   94A8 (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
02D30:  BSF    F94.0
02D32:  BTFSC  F82.0
02D34:  BRA    2D3A
02D36:  BTFSS  1C.7
02D38:  BRA    2D3E
02D3A:  BTFSS  1C.2
02D3C:  BRA    2D4A
02D3E:  MOVLW  32
02D40:  MOVLB  C
02D42:  MOVWF  xBD
02D44:  MOVLB  0
02D46:  CALL   0658
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
02D4A:  BSF    F94.0
02D4C:  BTFSC  F82.0
02D4E:  BRA    2D54
02D50:  BTFSS  1C.7
02D52:  BRA    2D58
02D54:  BTFSS  1C.2
02D56:  BRA    2E92
....................    {
....................             AutoAckFlag = 0;
02D58:  BCF    1C.2
....................             AutoAckDelayTime = 0x00;
02D5A:  CLRF   1F
....................       
....................                   //if(In.B1 == 1 || ((Inputt.B1 ^ InputType.B1) == 1))
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
02D5C:  MOVLB  C
02D5E:  BTFSC  x50.0
02D60:  BRA    2D66
02D62:  BTFSS  x52.0
02D64:  BRA    2D70
....................            {
....................              Ack.B1 = 1;
02D66:  BSF    x4E.0
....................              In.B1 = 0;
02D68:  BCF    x50.0
....................              In2.B1 = 0;      //for auto reset
02D6A:  BCF    x52.0
....................              Output.B1 = 0;
02D6C:  BCF    x42.0
....................              SendSMS.B1 =0;
02D6E:  BCF    x5C.0
....................            }
....................            //if(In.B2 == 1 || ((Inputt.B2 ^ InputType.B2) == 1))
....................            if((In.B2 == 1)||(In2.B2 == 1))
02D70:  BTFSC  x50.1
02D72:  BRA    2D78
02D74:  BTFSS  x52.1
02D76:  BRA    2D82
....................            {
....................              Ack.B2 = 1;
02D78:  BSF    x4E.1
....................              In.B2 = 0;
02D7A:  BCF    x50.1
....................              In2.B2 = 0;      //for auto reset
02D7C:  BCF    x52.1
....................              Output.B2 = 0;
02D7E:  BCF    x42.1
....................              SendSMS.B2 =0;
02D80:  BCF    x5C.1
....................            }
....................            //if(In.B3 == 1 || ((Inputt.B3 ^ InputType.B3) == 1))
....................            if((In.B3 == 1)||(In2.B3 == 1))
02D82:  BTFSC  x50.2
02D84:  BRA    2D8A
02D86:  BTFSS  x52.2
02D88:  BRA    2D94
....................            {
....................              Ack.B3 = 1;
02D8A:  BSF    x4E.2
....................              In.B3 = 0;
02D8C:  BCF    x50.2
....................              In2.B3 = 0;      //for auto reset
02D8E:  BCF    x52.2
....................              Output.B3 = 0;
02D90:  BCF    x42.2
....................              SendSMS.B3 =0;
02D92:  BCF    x5C.2
....................            }
....................            //if(In.B4 == 1 || ((Inputt.B4 ^ InputType.B4) == 1))
....................            if((In.B4 == 1)||(In2.B4 == 1))
02D94:  BTFSC  x50.3
02D96:  BRA    2D9C
02D98:  BTFSS  x52.3
02D9A:  BRA    2DA6
....................            {
....................              Ack.B4 = 1;
02D9C:  BSF    x4E.3
....................              In.B4 = 0;
02D9E:  BCF    x50.3
....................              In2.B4 = 0;      //for auto reset
02DA0:  BCF    x52.3
....................              Output.B4 = 0;
02DA2:  BCF    x42.3
....................              SendSMS.B4 =0;
02DA4:  BCF    x5C.3
....................            }
....................            //if(In.B5 == 1 || ((Inputt.B5 ^ InputType.B5) == 1))
....................            if((In.B5 == 1)||(In2.B5 == 1))
02DA6:  BTFSC  x50.4
02DA8:  BRA    2DAE
02DAA:  BTFSS  x52.4
02DAC:  BRA    2DB8
....................            {
....................              Ack.B5 = 1;
02DAE:  BSF    x4E.4
....................              In.B5 = 0;
02DB0:  BCF    x50.4
....................              In2.B5 = 0;      //for auto reset
02DB2:  BCF    x52.4
....................              Output.B5 = 0;
02DB4:  BCF    x42.4
....................              SendSMS.B5 =0;
02DB6:  BCF    x5C.4
....................            }
....................            //if(In.B6 == 1 || ((Inputt.B6 ^ InputType.B6) == 1))
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
02DB8:  BTFSC  x50.5
02DBA:  BRA    2DC0
02DBC:  BTFSS  x52.5
02DBE:  BRA    2DCA
....................            {
....................              Ack.B6 = 1;
02DC0:  BSF    x4E.5
....................              In.B6 = 0;
02DC2:  BCF    x50.5
....................              In2.B6 = 0;      //for auto reset
02DC4:  BCF    x52.5
....................              Output.B6 = 0;
02DC6:  BCF    x42.5
....................              SendSMS.B6 =0;
02DC8:  BCF    x5C.5
....................            }
....................            //if(In.B7 == 1 || ((Inputt.B7 ^ InputType.B7) == 1))
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
02DCA:  BTFSC  x50.6
02DCC:  BRA    2DD2
02DCE:  BTFSS  x52.6
02DD0:  BRA    2DDC
....................            {
....................              Ack.B7 = 1;
02DD2:  BSF    x4E.6
....................              In.B7 = 0;
02DD4:  BCF    x50.6
....................              In2.B7 = 0;      //for auto reset
02DD6:  BCF    x52.6
....................              Output.B7 = 0;
02DD8:  BCF    x42.6
....................              SendSMS.B7 =0;
02DDA:  BCF    x5C.6
....................            }
....................            //if(In.B8 == 1 || ((Inputt.B8 ^ InputType.B8) == 1))
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
02DDC:  BTFSC  x50.7
02DDE:  BRA    2DE4
02DE0:  BTFSS  x52.7
02DE2:  BRA    2DEE
....................            {
....................              Ack.B8 = 1;
02DE4:  BSF    x4E.7
....................              In.B8 = 0;
02DE6:  BCF    x50.7
....................              In2.B8 = 0;      //for auto reset
02DE8:  BCF    x52.7
....................              Output.B8 = 0;
02DEA:  BCF    x42.7
....................              SendSMS.B8 =0;
02DEC:  BCF    x5C.7
....................            }
....................           // if(In.B9 == 1 || ((Inputt.B9 ^ InputType.B9) == 1))
....................            if((In.B9 == 1 )||(In2.B9 == 1 ))
02DEE:  BTFSC  x51.0
02DF0:  BRA    2DF6
02DF2:  BTFSS  x53.0
02DF4:  BRA    2E00
....................            {
....................              Ack.B9 = 1;
02DF6:  BSF    x4F.0
....................              In.B9 = 0;
02DF8:  BCF    x51.0
....................              In2.B9 = 0;      //for auto reset
02DFA:  BCF    x53.0
....................              Output.B9 = 0;
02DFC:  BCF    x43.0
....................              SendSMS.B9 =0;
02DFE:  BCF    x5D.0
....................            }
....................            //if(In.B10 == 1 || ((Inputt.B10 ^ InputType.B10) == 1))
....................            if((In.B10 == 1)||(In2.B10 == 1))
02E00:  BTFSC  x51.1
02E02:  BRA    2E08
02E04:  BTFSS  x53.1
02E06:  BRA    2E12
....................            {
....................              Ack.B10 = 1;
02E08:  BSF    x4F.1
....................              In.B10 = 0;
02E0A:  BCF    x51.1
....................              In2.B10 = 0;      //for auto reset
02E0C:  BCF    x53.1
....................              Output.B10 = 0;
02E0E:  BCF    x43.1
....................              SendSMS.B10 =0;
02E10:  BCF    x5D.1
....................            }
....................            //if(In.B11 == 1 || ((Inputt.B11 ^ InputType.B11) == 1))
....................            if((In.B11 == 1)||(In2.B11 == 1))
02E12:  BTFSC  x51.2
02E14:  BRA    2E1A
02E16:  BTFSS  x53.2
02E18:  BRA    2E24
....................            {
....................              Ack.B11 = 1;
02E1A:  BSF    x4F.2
....................              In.B11 = 0;
02E1C:  BCF    x51.2
....................              In2.B11 = 0;      //for auto reset
02E1E:  BCF    x53.2
....................              Output.B11 = 0;
02E20:  BCF    x43.2
....................              SendSMS.B11 =0;
02E22:  BCF    x5D.2
....................            }
....................            //if(In.B12 == 1 || ((Inputt.B12 ^ InputType.B12) == 1))
....................            if((In.B12 == 1)||(In2.B12 == 1))
02E24:  BTFSC  x51.3
02E26:  BRA    2E2C
02E28:  BTFSS  x53.3
02E2A:  BRA    2E36
....................            {
....................              Ack.B12 = 1;
02E2C:  BSF    x4F.3
....................              In.B12 = 0;
02E2E:  BCF    x51.3
....................              In2.B12 = 0;      //for auto reset
02E30:  BCF    x53.3
....................              Output.B12 = 0;
02E32:  BCF    x43.3
....................              SendSMS.B12 =0;
02E34:  BCF    x5D.3
....................            }
....................            //if(In.B13 == 1 || ((Inputt.B13 ^ InputType.B13) == 1))
....................            if((In.B13 == 1 )||(In2.B13 == 1 ))
02E36:  BTFSC  x51.4
02E38:  BRA    2E3E
02E3A:  BTFSS  x53.4
02E3C:  BRA    2E48
....................            {
....................              Ack.B13 = 1;
02E3E:  BSF    x4F.4
....................              In.B13 = 0;
02E40:  BCF    x51.4
....................              In2.B13 = 0;      //for auto reset
02E42:  BCF    x53.4
....................              Output.B13 = 0;
02E44:  BCF    x43.4
....................              SendSMS.B13 =0;
02E46:  BCF    x5D.4
....................            }
....................            //if(In.B14 == 1 || ((Inputt.B14 ^ InputType.B14) == 1))
....................            if((In.B14 == 1)||(In2.B14 == 1))
02E48:  BTFSC  x51.5
02E4A:  BRA    2E50
02E4C:  BTFSS  x53.5
02E4E:  BRA    2E5A
....................            {
....................              Ack.B14 = 1;
02E50:  BSF    x4F.5
....................              In.B14 = 0;
02E52:  BCF    x51.5
....................              In2.B14 = 0;      //for auto reset
02E54:  BCF    x53.5
....................              Output.B14 = 0;
02E56:  BCF    x43.5
....................              SendSMS.B14 =0;
02E58:  BCF    x5D.5
....................            }
....................            //if(In.B15 == 1 || ((Inputt.B15 ^ InputType.B15) == 1))
....................            if((In.B15 == 1)||(In2.B15 == 1))
02E5A:  BTFSC  x51.6
02E5C:  BRA    2E62
02E5E:  BTFSS  x53.6
02E60:  BRA    2E6C
....................            {
....................              Ack.B15 = 1;
02E62:  BSF    x4F.6
....................              In.B15 = 0;
02E64:  BCF    x51.6
....................              In2.B15 = 0;      //for auto reset
02E66:  BCF    x53.6
....................              Output.B15 = 0;
02E68:  BCF    x43.6
....................              SendSMS.B15 =0;
02E6A:  BCF    x5D.6
....................            }
....................            //if(In.B16 == 1 || ((Inputt.B16 ^ InputType.B16) == 1))
....................            if((In.B16 == 1)||(In2.B16 == 1))
02E6C:  BTFSC  x51.7
02E6E:  BRA    2E74
02E70:  BTFSS  x53.7
02E72:  BRA    2E7E
....................            {
....................              Ack.B16 = 1;
02E74:  BSF    x4F.7
....................              In.B16 = 0;
02E76:  BCF    x51.7
....................              In2.B16 = 0;      //for auto reset
02E78:  BCF    x53.7
....................              Output.B16 = 0;
02E7A:  BCF    x43.7
....................              SendSMS.B16 =0;
02E7C:  BCF    x5D.7
....................            }     
....................          if(functointest_f){
02E7E:  BTFSS  32.3
02E80:  BRA    2E84
....................                functointest_f = 0;
02E82:  BCF    32.3
....................             }
....................             Ack_F = 1;
02E84:  BSF    1C.7
....................             output_bit(Pbuzzer,0);   //Buzzer
02E86:  BCF    F89.4
02E88:  BCF    F92.4
....................             output_bit(Pbell,0);     //Bell
02E8A:  BCF    F89.3
02E8C:  BCF    F92.3
....................    }
02E8E:  BRA    2EA0
02E90:  MOVLB  0
....................    else if(input(Pack) == 1 && Ack_F == 1)
02E92:  BSF    F94.0
02E94:  BTFSS  F82.0
02E96:  BRA    2E9E
02E98:  BTFSS  1C.7
02E9A:  BRA    2E9E
....................    {
....................       Ack_F = 0;
02E9C:  BCF    1C.7
02E9E:  MOVLB  C
....................    }
02EA0:  MOVLB  0
02EA2:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
02EA4:  BSF    F94.1
02EA6:  BTFSC  F82.1
02EA8:  BRA    2EAE
02EAA:  BTFSS  32.0
02EAC:  BRA    2EB2
02EAE:  BTFSS  1C.3
02EB0:  BRA    2EBE
02EB2:  MOVLW  32
02EB4:  MOVLB  C
02EB6:  MOVWF  xBD
02EB8:  MOVLB  0
02EBA:  CALL   0658
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
02EBE:  BSF    F94.1
02EC0:  BTFSC  F82.1
02EC2:  BRA    2EC8
02EC4:  BTFSS  32.0
02EC6:  BRA    2ECC
02EC8:  BTFSS  1C.3
02ECA:  BRA    3056
....................     {
....................        AutoResetFlag = 0;
02ECC:  BCF    1C.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
02ECE:  MOVLW  00
02ED0:  MOVLB  C
02ED2:  BTFSC  x40.0
02ED4:  MOVLW  01
02ED6:  MOVWF  xBE
02ED8:  MOVLW  00
02EDA:  BTFSC  x44.0
02EDC:  MOVLW  01
02EDE:  XORWF  xBE,W
02EE0:  BNZ   2EE8
02EE2:  BTFSC  x50.0
02EE4:  BRA    2EE8
02EE6:  BSF    x42.0
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
02EE8:  MOVLW  00
02EEA:  BTFSC  x40.1
02EEC:  MOVLW  01
02EEE:  MOVWF  xBE
02EF0:  MOVLW  00
02EF2:  BTFSC  x44.1
02EF4:  MOVLW  01
02EF6:  XORWF  xBE,W
02EF8:  BNZ   2F00
02EFA:  BTFSC  x50.1
02EFC:  BRA    2F00
02EFE:  BSF    x42.1
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
02F00:  MOVLW  00
02F02:  BTFSC  x40.2
02F04:  MOVLW  01
02F06:  MOVWF  xBE
02F08:  MOVLW  00
02F0A:  BTFSC  x44.2
02F0C:  MOVLW  01
02F0E:  XORWF  xBE,W
02F10:  BNZ   2F18
02F12:  BTFSC  x50.2
02F14:  BRA    2F18
02F16:  BSF    x42.2
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
02F18:  MOVLW  00
02F1A:  BTFSC  x40.3
02F1C:  MOVLW  01
02F1E:  MOVWF  xBE
02F20:  MOVLW  00
02F22:  BTFSC  x44.3
02F24:  MOVLW  01
02F26:  XORWF  xBE,W
02F28:  BNZ   2F30
02F2A:  BTFSC  x50.3
02F2C:  BRA    2F30
02F2E:  BSF    x42.3
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
02F30:  MOVLW  00
02F32:  BTFSC  x40.4
02F34:  MOVLW  01
02F36:  MOVWF  xBE
02F38:  MOVLW  00
02F3A:  BTFSC  x44.4
02F3C:  MOVLW  01
02F3E:  XORWF  xBE,W
02F40:  BNZ   2F48
02F42:  BTFSC  x50.4
02F44:  BRA    2F48
02F46:  BSF    x42.4
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
02F48:  MOVLW  00
02F4A:  BTFSC  x40.5
02F4C:  MOVLW  01
02F4E:  MOVWF  xBE
02F50:  MOVLW  00
02F52:  BTFSC  x44.5
02F54:  MOVLW  01
02F56:  XORWF  xBE,W
02F58:  BNZ   2F60
02F5A:  BTFSC  x50.5
02F5C:  BRA    2F60
02F5E:  BSF    x42.5
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
02F60:  MOVLW  00
02F62:  BTFSC  x40.6
02F64:  MOVLW  01
02F66:  MOVWF  xBE
02F68:  MOVLW  00
02F6A:  BTFSC  x44.6
02F6C:  MOVLW  01
02F6E:  XORWF  xBE,W
02F70:  BNZ   2F78
02F72:  BTFSC  x50.6
02F74:  BRA    2F78
02F76:  BSF    x42.6
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
02F78:  MOVLW  00
02F7A:  BTFSC  x40.7
02F7C:  MOVLW  01
02F7E:  MOVWF  xBE
02F80:  MOVLW  00
02F82:  BTFSC  x44.7
02F84:  MOVLW  01
02F86:  XORWF  xBE,W
02F88:  BNZ   2F90
02F8A:  BTFSC  x50.7
02F8C:  BRA    2F90
02F8E:  BSF    x42.7
....................        if((Inputt.B9 ^ InputType.B9) == 0 && In.B9 == 0) Output.B9 = 1;
02F90:  MOVLW  00
02F92:  BTFSC  x41.0
02F94:  MOVLW  01
02F96:  MOVWF  xBE
02F98:  MOVLW  00
02F9A:  BTFSC  x45.0
02F9C:  MOVLW  01
02F9E:  XORWF  xBE,W
02FA0:  BNZ   2FA8
02FA2:  BTFSC  x51.0
02FA4:  BRA    2FA8
02FA6:  BSF    x43.0
....................        if((Inputt.B10 ^ InputType.B10) == 0 && In.B10 == 0) Output.B10 = 1;
02FA8:  MOVLW  00
02FAA:  BTFSC  x41.1
02FAC:  MOVLW  01
02FAE:  MOVWF  xBE
02FB0:  MOVLW  00
02FB2:  BTFSC  x45.1
02FB4:  MOVLW  01
02FB6:  XORWF  xBE,W
02FB8:  BNZ   2FC0
02FBA:  BTFSC  x51.1
02FBC:  BRA    2FC0
02FBE:  BSF    x43.1
....................        if((Inputt.B11 ^ InputType.B11) == 0 && In.B11 == 0) Output.B11 = 1;
02FC0:  MOVLW  00
02FC2:  BTFSC  x41.2
02FC4:  MOVLW  01
02FC6:  MOVWF  xBE
02FC8:  MOVLW  00
02FCA:  BTFSC  x45.2
02FCC:  MOVLW  01
02FCE:  XORWF  xBE,W
02FD0:  BNZ   2FD8
02FD2:  BTFSC  x51.2
02FD4:  BRA    2FD8
02FD6:  BSF    x43.2
....................        if((Inputt.B12 ^ InputType.B12) == 0 && In.B12 == 0) Output.B12 = 1;
02FD8:  MOVLW  00
02FDA:  BTFSC  x41.3
02FDC:  MOVLW  01
02FDE:  MOVWF  xBE
02FE0:  MOVLW  00
02FE2:  BTFSC  x45.3
02FE4:  MOVLW  01
02FE6:  XORWF  xBE,W
02FE8:  BNZ   2FF0
02FEA:  BTFSC  x51.3
02FEC:  BRA    2FF0
02FEE:  BSF    x43.3
....................        if((Inputt.B13 ^ InputType.B13) == 0 && In.B13 == 0) Output.B13 = 1;
02FF0:  MOVLW  00
02FF2:  BTFSC  x41.4
02FF4:  MOVLW  01
02FF6:  MOVWF  xBE
02FF8:  MOVLW  00
02FFA:  BTFSC  x45.4
02FFC:  MOVLW  01
02FFE:  XORWF  xBE,W
03000:  BNZ   3008
03002:  BTFSC  x51.4
03004:  BRA    3008
03006:  BSF    x43.4
....................        if((Inputt.B14 ^ InputType.B14) == 0 && In.B14 == 0) Output.B14 = 1;
03008:  MOVLW  00
0300A:  BTFSC  x41.5
0300C:  MOVLW  01
0300E:  MOVWF  xBE
03010:  MOVLW  00
03012:  BTFSC  x45.5
03014:  MOVLW  01
03016:  XORWF  xBE,W
03018:  BNZ   3020
0301A:  BTFSC  x51.5
0301C:  BRA    3020
0301E:  BSF    x43.5
....................        if((Inputt.B15 ^ InputType.B15) == 0 && In.B15 == 0) Output.B15 = 1;
03020:  MOVLW  00
03022:  BTFSC  x41.6
03024:  MOVLW  01
03026:  MOVWF  xBE
03028:  MOVLW  00
0302A:  BTFSC  x45.6
0302C:  MOVLW  01
0302E:  XORWF  xBE,W
03030:  BNZ   3038
03032:  BTFSC  x51.6
03034:  BRA    3038
03036:  BSF    x43.6
....................        if((Inputt.B16 ^ InputType.B16) == 0 && In.B16 == 0) Output.B16 = 1;
03038:  MOVLW  00
0303A:  BTFSC  x41.7
0303C:  MOVLW  01
0303E:  MOVWF  xBE
03040:  MOVLW  00
03042:  BTFSC  x45.7
03044:  MOVLW  01
03046:  XORWF  xBE,W
03048:  BNZ   3050
0304A:  BTFSC  x51.7
0304C:  BRA    3050
0304E:  BSF    x43.7
....................        /*
....................        if((Inputt.B17 ^ InputType.B17) == 0 && In.B17 == 0) Output.B17 = 1;
....................        if((Inputt.B18 ^ InputType.B18) == 0 && In.B18 == 0) Output.B18 = 1;
....................        if((Inputt.B19 ^ InputType.B19) == 0 && In.B19 == 0) Output.B19 = 1;
....................        if((Inputt.B20 ^ InputType.B20) == 0 && In.B20 == 0) Output.B20 = 1;
....................        */
.................... 
....................        Reset_F = 1;
03050:  BSF    32.0
....................     }
03052:  BRA    3064
03054:  MOVLB  0
....................     else if(input(Preset) == 1 && Reset_F == 1)
03056:  BSF    F94.1
03058:  BTFSS  F82.1
0305A:  BRA    3062
0305C:  BTFSS  32.0
0305E:  BRA    3062
....................     {
....................        Reset_F = 0;
03060:  BCF    32.0
03062:  MOVLB  C
....................     }
03064:  MOVLB  0
03066:  RETURN 0
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////// Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
05D60:  MOVLB  C
05D62:  DECFSZ xB4,W
05D64:  BRA    611E
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
05D66:  MOVLW  00
05D68:  BTFSC  x50.0
05D6A:  MOVLW  01
05D6C:  MOVWF  xB7
05D6E:  MOVLW  00
05D70:  BTFSC  x52.0
05D72:  MOVLW  01
05D74:  IORWF  xB7,W
05D76:  MOVWF  xB6
05D78:  MOVLW  00
05D7A:  BTFSS  x4E.0
05D7C:  MOVLW  01
05D7E:  ANDWF  xB6,F
05D80:  MOVLW  00
05D82:  BTFSC  x48.0
05D84:  MOVLW  01
05D86:  MOVWF  xB9
05D88:  MOVLW  00
05D8A:  BTFSC  x4A.0
05D8C:  MOVLW  01
05D8E:  IORWF  xB9,W
05D90:  ANDWF  xB6,W
05D92:  BCF    xB5.0
05D94:  BTFSC  FE8.0
05D96:  BSF    xB5.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
05D98:  MOVLW  00
05D9A:  BTFSC  xB5.0
05D9C:  MOVLW  01
05D9E:  MOVWF  xB6
05DA0:  MOVLW  00
05DA2:  BTFSC  x50.1
05DA4:  MOVLW  01
05DA6:  MOVWF  xB8
05DA8:  MOVLW  00
05DAA:  BTFSC  x52.1
05DAC:  MOVLW  01
05DAE:  IORWF  xB8,W
05DB0:  MOVWF  xB7
05DB2:  MOVLW  00
05DB4:  BTFSS  x4E.1
05DB6:  MOVLW  01
05DB8:  ANDWF  xB7,F
05DBA:  MOVLW  00
05DBC:  BTFSC  x48.1
05DBE:  MOVLW  01
05DC0:  MOVWF  xBA
05DC2:  MOVLW  00
05DC4:  BTFSC  x4A.1
05DC6:  MOVLW  01
05DC8:  IORWF  xBA,W
05DCA:  ANDWF  xB7,W
05DCC:  IORWF  xB6,W
05DCE:  BCF    xB5.0
05DD0:  BTFSC  FE8.0
05DD2:  BSF    xB5.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
05DD4:  MOVLW  00
05DD6:  BTFSC  xB5.0
05DD8:  MOVLW  01
05DDA:  MOVWF  xB6
05DDC:  MOVLW  00
05DDE:  BTFSC  x50.2
05DE0:  MOVLW  01
05DE2:  MOVWF  xB8
05DE4:  MOVLW  00
05DE6:  BTFSC  x52.2
05DE8:  MOVLW  01
05DEA:  IORWF  xB8,W
05DEC:  MOVWF  xB7
05DEE:  MOVLW  00
05DF0:  BTFSS  x4E.2
05DF2:  MOVLW  01
05DF4:  ANDWF  xB7,F
05DF6:  MOVLW  00
05DF8:  BTFSC  x48.2
05DFA:  MOVLW  01
05DFC:  MOVWF  xBA
05DFE:  MOVLW  00
05E00:  BTFSC  x4A.2
05E02:  MOVLW  01
05E04:  IORWF  xBA,W
05E06:  ANDWF  xB7,W
05E08:  IORWF  xB6,W
05E0A:  BCF    xB5.0
05E0C:  BTFSC  FE8.0
05E0E:  BSF    xB5.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
05E10:  MOVLW  00
05E12:  BTFSC  xB5.0
05E14:  MOVLW  01
05E16:  MOVWF  xB6
05E18:  MOVLW  00
05E1A:  BTFSC  x50.3
05E1C:  MOVLW  01
05E1E:  MOVWF  xB8
05E20:  MOVLW  00
05E22:  BTFSC  x52.3
05E24:  MOVLW  01
05E26:  IORWF  xB8,W
05E28:  MOVWF  xB7
05E2A:  MOVLW  00
05E2C:  BTFSS  x4E.3
05E2E:  MOVLW  01
05E30:  ANDWF  xB7,F
05E32:  MOVLW  00
05E34:  BTFSC  x48.3
05E36:  MOVLW  01
05E38:  MOVWF  xBA
05E3A:  MOVLW  00
05E3C:  BTFSC  x4A.3
05E3E:  MOVLW  01
05E40:  IORWF  xBA,W
05E42:  ANDWF  xB7,W
05E44:  IORWF  xB6,W
05E46:  BCF    xB5.0
05E48:  BTFSC  FE8.0
05E4A:  BSF    xB5.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
05E4C:  MOVLW  00
05E4E:  BTFSC  xB5.0
05E50:  MOVLW  01
05E52:  MOVWF  xB6
05E54:  MOVLW  00
05E56:  BTFSC  x50.4
05E58:  MOVLW  01
05E5A:  MOVWF  xB8
05E5C:  MOVLW  00
05E5E:  BTFSC  x52.4
05E60:  MOVLW  01
05E62:  IORWF  xB8,W
05E64:  MOVWF  xB7
05E66:  MOVLW  00
05E68:  BTFSS  x4E.4
05E6A:  MOVLW  01
05E6C:  ANDWF  xB7,F
05E6E:  MOVLW  00
05E70:  BTFSC  x48.4
05E72:  MOVLW  01
05E74:  MOVWF  xBA
05E76:  MOVLW  00
05E78:  BTFSC  x4A.4
05E7A:  MOVLW  01
05E7C:  IORWF  xBA,W
05E7E:  ANDWF  xB7,W
05E80:  IORWF  xB6,W
05E82:  BCF    xB5.0
05E84:  BTFSC  FE8.0
05E86:  BSF    xB5.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
05E88:  MOVLW  00
05E8A:  BTFSC  xB5.0
05E8C:  MOVLW  01
05E8E:  MOVWF  xB6
05E90:  MOVLW  00
05E92:  BTFSC  x50.5
05E94:  MOVLW  01
05E96:  MOVWF  xB8
05E98:  MOVLW  00
05E9A:  BTFSC  x52.5
05E9C:  MOVLW  01
05E9E:  IORWF  xB8,W
05EA0:  MOVWF  xB7
05EA2:  MOVLW  00
05EA4:  BTFSS  x4E.5
05EA6:  MOVLW  01
05EA8:  ANDWF  xB7,F
05EAA:  MOVLW  00
05EAC:  BTFSC  x48.5
05EAE:  MOVLW  01
05EB0:  MOVWF  xBA
05EB2:  MOVLW  00
05EB4:  BTFSC  x4A.5
05EB6:  MOVLW  01
05EB8:  IORWF  xBA,W
05EBA:  ANDWF  xB7,W
05EBC:  IORWF  xB6,W
05EBE:  BCF    xB5.0
05EC0:  BTFSC  FE8.0
05EC2:  BSF    xB5.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
05EC4:  MOVLW  00
05EC6:  BTFSC  xB5.0
05EC8:  MOVLW  01
05ECA:  MOVWF  xB6
05ECC:  MOVLW  00
05ECE:  BTFSC  x50.6
05ED0:  MOVLW  01
05ED2:  MOVWF  xB8
05ED4:  MOVLW  00
05ED6:  BTFSC  x52.6
05ED8:  MOVLW  01
05EDA:  IORWF  xB8,W
05EDC:  MOVWF  xB7
05EDE:  MOVLW  00
05EE0:  BTFSS  x4E.6
05EE2:  MOVLW  01
05EE4:  ANDWF  xB7,F
05EE6:  MOVLW  00
05EE8:  BTFSC  x48.6
05EEA:  MOVLW  01
05EEC:  MOVWF  xBA
05EEE:  MOVLW  00
05EF0:  BTFSC  x4A.6
05EF2:  MOVLW  01
05EF4:  IORWF  xBA,W
05EF6:  ANDWF  xB7,W
05EF8:  IORWF  xB6,W
05EFA:  BCF    xB5.0
05EFC:  BTFSC  FE8.0
05EFE:  BSF    xB5.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
05F00:  MOVLW  00
05F02:  BTFSC  xB5.0
05F04:  MOVLW  01
05F06:  MOVWF  xB6
05F08:  MOVLW  00
05F0A:  BTFSC  x50.7
05F0C:  MOVLW  01
05F0E:  MOVWF  xB8
05F10:  MOVLW  00
05F12:  BTFSC  x52.7
05F14:  MOVLW  01
05F16:  IORWF  xB8,W
05F18:  MOVWF  xB7
05F1A:  MOVLW  00
05F1C:  BTFSS  x4E.7
05F1E:  MOVLW  01
05F20:  ANDWF  xB7,F
05F22:  MOVLW  00
05F24:  BTFSC  x48.7
05F26:  MOVLW  01
05F28:  MOVWF  xBA
05F2A:  MOVLW  00
05F2C:  BTFSC  x4A.7
05F2E:  MOVLW  01
05F30:  IORWF  xBA,W
05F32:  ANDWF  xB7,W
05F34:  IORWF  xB6,W
05F36:  BCF    xB5.0
05F38:  BTFSC  FE8.0
05F3A:  BSF    xB5.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (OutputType.B9 | OutputBoth.B9));
05F3C:  MOVLW  00
05F3E:  BTFSC  xB5.0
05F40:  MOVLW  01
05F42:  MOVWF  xB6
05F44:  MOVLW  00
05F46:  BTFSC  x51.0
05F48:  MOVLW  01
05F4A:  MOVWF  xB8
05F4C:  MOVLW  00
05F4E:  BTFSC  x53.0
05F50:  MOVLW  01
05F52:  IORWF  xB8,W
05F54:  MOVWF  xB7
05F56:  MOVLW  00
05F58:  BTFSS  x4F.0
05F5A:  MOVLW  01
05F5C:  ANDWF  xB7,F
05F5E:  MOVLW  00
05F60:  BTFSC  x49.0
05F62:  MOVLW  01
05F64:  MOVWF  xBA
05F66:  MOVLW  00
05F68:  BTFSC  x4B.0
05F6A:  MOVLW  01
05F6C:  IORWF  xBA,W
05F6E:  ANDWF  xB7,W
05F70:  IORWF  xB6,W
05F72:  BCF    xB5.0
05F74:  BTFSC  FE8.0
05F76:  BSF    xB5.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (OutputType.B10 | OutputBoth.B10));
05F78:  MOVLW  00
05F7A:  BTFSC  xB5.0
05F7C:  MOVLW  01
05F7E:  MOVWF  xB6
05F80:  MOVLW  00
05F82:  BTFSC  x51.1
05F84:  MOVLW  01
05F86:  MOVWF  xB8
05F88:  MOVLW  00
05F8A:  BTFSC  x53.1
05F8C:  MOVLW  01
05F8E:  IORWF  xB8,W
05F90:  MOVWF  xB7
05F92:  MOVLW  00
05F94:  BTFSS  x4F.1
05F96:  MOVLW  01
05F98:  ANDWF  xB7,F
05F9A:  MOVLW  00
05F9C:  BTFSC  x49.1
05F9E:  MOVLW  01
05FA0:  MOVWF  xBA
05FA2:  MOVLW  00
05FA4:  BTFSC  x4B.1
05FA6:  MOVLW  01
05FA8:  IORWF  xBA,W
05FAA:  ANDWF  xB7,W
05FAC:  IORWF  xB6,W
05FAE:  BCF    xB5.0
05FB0:  BTFSC  FE8.0
05FB2:  BSF    xB5.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (OutputType.B11 | OutputBoth.B11));
05FB4:  MOVLW  00
05FB6:  BTFSC  xB5.0
05FB8:  MOVLW  01
05FBA:  MOVWF  xB6
05FBC:  MOVLW  00
05FBE:  BTFSC  x51.2
05FC0:  MOVLW  01
05FC2:  MOVWF  xB8
05FC4:  MOVLW  00
05FC6:  BTFSC  x53.2
05FC8:  MOVLW  01
05FCA:  IORWF  xB8,W
05FCC:  MOVWF  xB7
05FCE:  MOVLW  00
05FD0:  BTFSS  x4F.2
05FD2:  MOVLW  01
05FD4:  ANDWF  xB7,F
05FD6:  MOVLW  00
05FD8:  BTFSC  x49.2
05FDA:  MOVLW  01
05FDC:  MOVWF  xBA
05FDE:  MOVLW  00
05FE0:  BTFSC  x4B.2
05FE2:  MOVLW  01
05FE4:  IORWF  xBA,W
05FE6:  ANDWF  xB7,W
05FE8:  IORWF  xB6,W
05FEA:  BCF    xB5.0
05FEC:  BTFSC  FE8.0
05FEE:  BSF    xB5.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (OutputType.B12 | OutputBoth.B12));
05FF0:  MOVLW  00
05FF2:  BTFSC  xB5.0
05FF4:  MOVLW  01
05FF6:  MOVWF  xB6
05FF8:  MOVLW  00
05FFA:  BTFSC  x51.3
05FFC:  MOVLW  01
05FFE:  MOVWF  xB8
06000:  MOVLW  00
06002:  BTFSC  x53.3
06004:  MOVLW  01
06006:  IORWF  xB8,W
06008:  MOVWF  xB7
0600A:  MOVLW  00
0600C:  BTFSS  x4F.3
0600E:  MOVLW  01
06010:  ANDWF  xB7,F
06012:  MOVLW  00
06014:  BTFSC  x49.3
06016:  MOVLW  01
06018:  MOVWF  xBA
0601A:  MOVLW  00
0601C:  BTFSC  x4B.3
0601E:  MOVLW  01
06020:  IORWF  xBA,W
06022:  ANDWF  xB7,W
06024:  IORWF  xB6,W
06026:  BCF    xB5.0
06028:  BTFSC  FE8.0
0602A:  BSF    xB5.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (OutputType.B13 | OutputBoth.B13));
0602C:  MOVLW  00
0602E:  BTFSC  xB5.0
06030:  MOVLW  01
06032:  MOVWF  xB6
06034:  MOVLW  00
06036:  BTFSC  x51.4
06038:  MOVLW  01
0603A:  MOVWF  xB8
0603C:  MOVLW  00
0603E:  BTFSC  x53.4
06040:  MOVLW  01
06042:  IORWF  xB8,W
06044:  MOVWF  xB7
06046:  MOVLW  00
06048:  BTFSS  x4F.4
0604A:  MOVLW  01
0604C:  ANDWF  xB7,F
0604E:  MOVLW  00
06050:  BTFSC  x49.4
06052:  MOVLW  01
06054:  MOVWF  xBA
06056:  MOVLW  00
06058:  BTFSC  x4B.4
0605A:  MOVLW  01
0605C:  IORWF  xBA,W
0605E:  ANDWF  xB7,W
06060:  IORWF  xB6,W
06062:  BCF    xB5.0
06064:  BTFSC  FE8.0
06066:  BSF    xB5.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (OutputType.B14 | OutputBoth.B14));
06068:  MOVLW  00
0606A:  BTFSC  xB5.0
0606C:  MOVLW  01
0606E:  MOVWF  xB6
06070:  MOVLW  00
06072:  BTFSC  x51.5
06074:  MOVLW  01
06076:  MOVWF  xB8
06078:  MOVLW  00
0607A:  BTFSC  x53.5
0607C:  MOVLW  01
0607E:  IORWF  xB8,W
06080:  MOVWF  xB7
06082:  MOVLW  00
06084:  BTFSS  x4F.5
06086:  MOVLW  01
06088:  ANDWF  xB7,F
0608A:  MOVLW  00
0608C:  BTFSC  x49.5
0608E:  MOVLW  01
06090:  MOVWF  xBA
06092:  MOVLW  00
06094:  BTFSC  x4B.5
06096:  MOVLW  01
06098:  IORWF  xBA,W
0609A:  ANDWF  xB7,W
0609C:  IORWF  xB6,W
0609E:  BCF    xB5.0
060A0:  BTFSC  FE8.0
060A2:  BSF    xB5.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (OutputType.B15 | OutputBoth.B15));
060A4:  MOVLW  00
060A6:  BTFSC  xB5.0
060A8:  MOVLW  01
060AA:  MOVWF  xB6
060AC:  MOVLW  00
060AE:  BTFSC  x51.6
060B0:  MOVLW  01
060B2:  MOVWF  xB8
060B4:  MOVLW  00
060B6:  BTFSC  x53.6
060B8:  MOVLW  01
060BA:  IORWF  xB8,W
060BC:  MOVWF  xB7
060BE:  MOVLW  00
060C0:  BTFSS  x4F.6
060C2:  MOVLW  01
060C4:  ANDWF  xB7,F
060C6:  MOVLW  00
060C8:  BTFSC  x49.6
060CA:  MOVLW  01
060CC:  MOVWF  xBA
060CE:  MOVLW  00
060D0:  BTFSC  x4B.6
060D2:  MOVLW  01
060D4:  IORWF  xBA,W
060D6:  ANDWF  xB7,W
060D8:  IORWF  xB6,W
060DA:  BCF    xB5.0
060DC:  BTFSC  FE8.0
060DE:  BSF    xB5.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (OutputType.B16 | OutputBoth.B16));
060E0:  MOVLW  00
060E2:  BTFSC  xB5.0
060E4:  MOVLW  01
060E6:  MOVWF  xB6
060E8:  MOVLW  00
060EA:  BTFSC  x51.7
060EC:  MOVLW  01
060EE:  MOVWF  xB8
060F0:  MOVLW  00
060F2:  BTFSC  x53.7
060F4:  MOVLW  01
060F6:  IORWF  xB8,W
060F8:  MOVWF  xB7
060FA:  MOVLW  00
060FC:  BTFSS  x4F.7
060FE:  MOVLW  01
06100:  ANDWF  xB7,F
06102:  MOVLW  00
06104:  BTFSC  x49.7
06106:  MOVLW  01
06108:  MOVWF  xBA
0610A:  MOVLW  00
0610C:  BTFSC  x4B.7
0610E:  MOVLW  01
06110:  IORWF  xBA,W
06112:  ANDWF  xB7,W
06114:  IORWF  xB6,W
06116:  BCF    xB5.0
06118:  BTFSC  FE8.0
0611A:  BSF    xB5.0
....................       /*
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (OutputType.B17 | OutputBoth.B17));
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (OutputType.B18 | OutputBoth.B18));
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (OutputType.B19 | OutputBoth.B19));
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (OutputType.B20 | OutputBoth.B20));
....................       */
....................      
....................    }
0611C:  BRA    64DC
....................    else if(DatType == 0x02)             //Bell
0611E:  MOVF   xB4,W
06120:  SUBLW  02
06122:  BTFSS  FD8.2
06124:  BRA    64DC
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
06126:  MOVLW  00
06128:  BTFSC  x50.0
0612A:  MOVLW  01
0612C:  MOVWF  xB7
0612E:  MOVLW  00
06130:  BTFSC  x52.0
06132:  MOVLW  01
06134:  IORWF  xB7,W
06136:  MOVWF  xB6
06138:  MOVLW  00
0613A:  BTFSS  x4E.0
0613C:  MOVLW  01
0613E:  ANDWF  xB6,F
06140:  MOVLW  00
06142:  BTFSS  x48.0
06144:  MOVLW  01
06146:  MOVWF  xB9
06148:  MOVLW  00
0614A:  BTFSC  x4A.0
0614C:  MOVLW  01
0614E:  IORWF  xB9,W
06150:  ANDWF  xB6,W
06152:  BCF    xB5.0
06154:  BTFSC  FE8.0
06156:  BSF    xB5.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
06158:  MOVLW  00
0615A:  BTFSC  xB5.0
0615C:  MOVLW  01
0615E:  MOVWF  xB6
06160:  MOVLW  00
06162:  BTFSC  x50.1
06164:  MOVLW  01
06166:  MOVWF  xB8
06168:  MOVLW  00
0616A:  BTFSC  x52.1
0616C:  MOVLW  01
0616E:  IORWF  xB8,W
06170:  MOVWF  xB7
06172:  MOVLW  00
06174:  BTFSS  x4E.1
06176:  MOVLW  01
06178:  ANDWF  xB7,F
0617A:  MOVLW  00
0617C:  BTFSS  x48.1
0617E:  MOVLW  01
06180:  MOVWF  xBA
06182:  MOVLW  00
06184:  BTFSC  x4A.1
06186:  MOVLW  01
06188:  IORWF  xBA,W
0618A:  ANDWF  xB7,W
0618C:  IORWF  xB6,W
0618E:  BCF    xB5.0
06190:  BTFSC  FE8.0
06192:  BSF    xB5.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
06194:  MOVLW  00
06196:  BTFSC  xB5.0
06198:  MOVLW  01
0619A:  MOVWF  xB6
0619C:  MOVLW  00
0619E:  BTFSC  x50.2
061A0:  MOVLW  01
061A2:  MOVWF  xB8
061A4:  MOVLW  00
061A6:  BTFSC  x52.2
061A8:  MOVLW  01
061AA:  IORWF  xB8,W
061AC:  MOVWF  xB7
061AE:  MOVLW  00
061B0:  BTFSS  x4E.2
061B2:  MOVLW  01
061B4:  ANDWF  xB7,F
061B6:  MOVLW  00
061B8:  BTFSS  x48.2
061BA:  MOVLW  01
061BC:  MOVWF  xBA
061BE:  MOVLW  00
061C0:  BTFSC  x4A.2
061C2:  MOVLW  01
061C4:  IORWF  xBA,W
061C6:  ANDWF  xB7,W
061C8:  IORWF  xB6,W
061CA:  BCF    xB5.0
061CC:  BTFSC  FE8.0
061CE:  BSF    xB5.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
061D0:  MOVLW  00
061D2:  BTFSC  xB5.0
061D4:  MOVLW  01
061D6:  MOVWF  xB6
061D8:  MOVLW  00
061DA:  BTFSC  x50.3
061DC:  MOVLW  01
061DE:  MOVWF  xB8
061E0:  MOVLW  00
061E2:  BTFSC  x52.3
061E4:  MOVLW  01
061E6:  IORWF  xB8,W
061E8:  MOVWF  xB7
061EA:  MOVLW  00
061EC:  BTFSS  x4E.3
061EE:  MOVLW  01
061F0:  ANDWF  xB7,F
061F2:  MOVLW  00
061F4:  BTFSS  x48.3
061F6:  MOVLW  01
061F8:  MOVWF  xBA
061FA:  MOVLW  00
061FC:  BTFSC  x4A.3
061FE:  MOVLW  01
06200:  IORWF  xBA,W
06202:  ANDWF  xB7,W
06204:  IORWF  xB6,W
06206:  BCF    xB5.0
06208:  BTFSC  FE8.0
0620A:  BSF    xB5.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
0620C:  MOVLW  00
0620E:  BTFSC  xB5.0
06210:  MOVLW  01
06212:  MOVWF  xB6
06214:  MOVLW  00
06216:  BTFSC  x50.4
06218:  MOVLW  01
0621A:  MOVWF  xB8
0621C:  MOVLW  00
0621E:  BTFSC  x52.4
06220:  MOVLW  01
06222:  IORWF  xB8,W
06224:  MOVWF  xB7
06226:  MOVLW  00
06228:  BTFSS  x4E.4
0622A:  MOVLW  01
0622C:  ANDWF  xB7,F
0622E:  MOVLW  00
06230:  BTFSS  x48.4
06232:  MOVLW  01
06234:  MOVWF  xBA
06236:  MOVLW  00
06238:  BTFSC  x4A.4
0623A:  MOVLW  01
0623C:  IORWF  xBA,W
0623E:  ANDWF  xB7,W
06240:  IORWF  xB6,W
06242:  BCF    xB5.0
06244:  BTFSC  FE8.0
06246:  BSF    xB5.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
06248:  MOVLW  00
0624A:  BTFSC  xB5.0
0624C:  MOVLW  01
0624E:  MOVWF  xB6
06250:  MOVLW  00
06252:  BTFSC  x50.5
06254:  MOVLW  01
06256:  MOVWF  xB8
06258:  MOVLW  00
0625A:  BTFSC  x52.5
0625C:  MOVLW  01
0625E:  IORWF  xB8,W
06260:  MOVWF  xB7
06262:  MOVLW  00
06264:  BTFSS  x4E.5
06266:  MOVLW  01
06268:  ANDWF  xB7,F
0626A:  MOVLW  00
0626C:  BTFSS  x48.5
0626E:  MOVLW  01
06270:  MOVWF  xBA
06272:  MOVLW  00
06274:  BTFSC  x4A.5
06276:  MOVLW  01
06278:  IORWF  xBA,W
0627A:  ANDWF  xB7,W
0627C:  IORWF  xB6,W
0627E:  BCF    xB5.0
06280:  BTFSC  FE8.0
06282:  BSF    xB5.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
06284:  MOVLW  00
06286:  BTFSC  xB5.0
06288:  MOVLW  01
0628A:  MOVWF  xB6
0628C:  MOVLW  00
0628E:  BTFSC  x50.6
06290:  MOVLW  01
06292:  MOVWF  xB8
06294:  MOVLW  00
06296:  BTFSC  x52.6
06298:  MOVLW  01
0629A:  IORWF  xB8,W
0629C:  MOVWF  xB7
0629E:  MOVLW  00
062A0:  BTFSS  x4E.6
062A2:  MOVLW  01
062A4:  ANDWF  xB7,F
062A6:  MOVLW  00
062A8:  BTFSS  x48.6
062AA:  MOVLW  01
062AC:  MOVWF  xBA
062AE:  MOVLW  00
062B0:  BTFSC  x4A.6
062B2:  MOVLW  01
062B4:  IORWF  xBA,W
062B6:  ANDWF  xB7,W
062B8:  IORWF  xB6,W
062BA:  BCF    xB5.0
062BC:  BTFSC  FE8.0
062BE:  BSF    xB5.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
062C0:  MOVLW  00
062C2:  BTFSC  xB5.0
062C4:  MOVLW  01
062C6:  MOVWF  xB6
062C8:  MOVLW  00
062CA:  BTFSC  x50.7
062CC:  MOVLW  01
062CE:  MOVWF  xB8
062D0:  MOVLW  00
062D2:  BTFSC  x52.7
062D4:  MOVLW  01
062D6:  IORWF  xB8,W
062D8:  MOVWF  xB7
062DA:  MOVLW  00
062DC:  BTFSS  x4E.7
062DE:  MOVLW  01
062E0:  ANDWF  xB7,F
062E2:  MOVLW  00
062E4:  BTFSS  x48.7
062E6:  MOVLW  01
062E8:  MOVWF  xBA
062EA:  MOVLW  00
062EC:  BTFSC  x4A.7
062EE:  MOVLW  01
062F0:  IORWF  xBA,W
062F2:  ANDWF  xB7,W
062F4:  IORWF  xB6,W
062F6:  BCF    xB5.0
062F8:  BTFSC  FE8.0
062FA:  BSF    xB5.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (~OutputType.B9 | OutputBoth.B9));
062FC:  MOVLW  00
062FE:  BTFSC  xB5.0
06300:  MOVLW  01
06302:  MOVWF  xB6
06304:  MOVLW  00
06306:  BTFSC  x51.0
06308:  MOVLW  01
0630A:  MOVWF  xB8
0630C:  MOVLW  00
0630E:  BTFSC  x53.0
06310:  MOVLW  01
06312:  IORWF  xB8,W
06314:  MOVWF  xB7
06316:  MOVLW  00
06318:  BTFSS  x4F.0
0631A:  MOVLW  01
0631C:  ANDWF  xB7,F
0631E:  MOVLW  00
06320:  BTFSS  x49.0
06322:  MOVLW  01
06324:  MOVWF  xBA
06326:  MOVLW  00
06328:  BTFSC  x4B.0
0632A:  MOVLW  01
0632C:  IORWF  xBA,W
0632E:  ANDWF  xB7,W
06330:  IORWF  xB6,W
06332:  BCF    xB5.0
06334:  BTFSC  FE8.0
06336:  BSF    xB5.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (~OutputType.B10 | OutputBoth.B10));
06338:  MOVLW  00
0633A:  BTFSC  xB5.0
0633C:  MOVLW  01
0633E:  MOVWF  xB6
06340:  MOVLW  00
06342:  BTFSC  x51.1
06344:  MOVLW  01
06346:  MOVWF  xB8
06348:  MOVLW  00
0634A:  BTFSC  x53.1
0634C:  MOVLW  01
0634E:  IORWF  xB8,W
06350:  MOVWF  xB7
06352:  MOVLW  00
06354:  BTFSS  x4F.1
06356:  MOVLW  01
06358:  ANDWF  xB7,F
0635A:  MOVLW  00
0635C:  BTFSS  x49.1
0635E:  MOVLW  01
06360:  MOVWF  xBA
06362:  MOVLW  00
06364:  BTFSC  x4B.1
06366:  MOVLW  01
06368:  IORWF  xBA,W
0636A:  ANDWF  xB7,W
0636C:  IORWF  xB6,W
0636E:  BCF    xB5.0
06370:  BTFSC  FE8.0
06372:  BSF    xB5.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (~OutputType.B11 | OutputBoth.B11));
06374:  MOVLW  00
06376:  BTFSC  xB5.0
06378:  MOVLW  01
0637A:  MOVWF  xB6
0637C:  MOVLW  00
0637E:  BTFSC  x51.2
06380:  MOVLW  01
06382:  MOVWF  xB8
06384:  MOVLW  00
06386:  BTFSC  x53.2
06388:  MOVLW  01
0638A:  IORWF  xB8,W
0638C:  MOVWF  xB7
0638E:  MOVLW  00
06390:  BTFSS  x4F.2
06392:  MOVLW  01
06394:  ANDWF  xB7,F
06396:  MOVLW  00
06398:  BTFSS  x49.2
0639A:  MOVLW  01
0639C:  MOVWF  xBA
0639E:  MOVLW  00
063A0:  BTFSC  x4B.2
063A2:  MOVLW  01
063A4:  IORWF  xBA,W
063A6:  ANDWF  xB7,W
063A8:  IORWF  xB6,W
063AA:  BCF    xB5.0
063AC:  BTFSC  FE8.0
063AE:  BSF    xB5.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (~OutputType.B12 | OutputBoth.B12));
063B0:  MOVLW  00
063B2:  BTFSC  xB5.0
063B4:  MOVLW  01
063B6:  MOVWF  xB6
063B8:  MOVLW  00
063BA:  BTFSC  x51.3
063BC:  MOVLW  01
063BE:  MOVWF  xB8
063C0:  MOVLW  00
063C2:  BTFSC  x53.3
063C4:  MOVLW  01
063C6:  IORWF  xB8,W
063C8:  MOVWF  xB7
063CA:  MOVLW  00
063CC:  BTFSS  x4F.3
063CE:  MOVLW  01
063D0:  ANDWF  xB7,F
063D2:  MOVLW  00
063D4:  BTFSS  x49.3
063D6:  MOVLW  01
063D8:  MOVWF  xBA
063DA:  MOVLW  00
063DC:  BTFSC  x4B.3
063DE:  MOVLW  01
063E0:  IORWF  xBA,W
063E2:  ANDWF  xB7,W
063E4:  IORWF  xB6,W
063E6:  BCF    xB5.0
063E8:  BTFSC  FE8.0
063EA:  BSF    xB5.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (~OutputType.B13 | OutputBoth.B13));
063EC:  MOVLW  00
063EE:  BTFSC  xB5.0
063F0:  MOVLW  01
063F2:  MOVWF  xB6
063F4:  MOVLW  00
063F6:  BTFSC  x51.4
063F8:  MOVLW  01
063FA:  MOVWF  xB8
063FC:  MOVLW  00
063FE:  BTFSC  x53.4
06400:  MOVLW  01
06402:  IORWF  xB8,W
06404:  MOVWF  xB7
06406:  MOVLW  00
06408:  BTFSS  x4F.4
0640A:  MOVLW  01
0640C:  ANDWF  xB7,F
0640E:  MOVLW  00
06410:  BTFSS  x49.4
06412:  MOVLW  01
06414:  MOVWF  xBA
06416:  MOVLW  00
06418:  BTFSC  x4B.4
0641A:  MOVLW  01
0641C:  IORWF  xBA,W
0641E:  ANDWF  xB7,W
06420:  IORWF  xB6,W
06422:  BCF    xB5.0
06424:  BTFSC  FE8.0
06426:  BSF    xB5.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (~OutputType.B14 | OutputBoth.B14));
06428:  MOVLW  00
0642A:  BTFSC  xB5.0
0642C:  MOVLW  01
0642E:  MOVWF  xB6
06430:  MOVLW  00
06432:  BTFSC  x51.5
06434:  MOVLW  01
06436:  MOVWF  xB8
06438:  MOVLW  00
0643A:  BTFSC  x53.5
0643C:  MOVLW  01
0643E:  IORWF  xB8,W
06440:  MOVWF  xB7
06442:  MOVLW  00
06444:  BTFSS  x4F.5
06446:  MOVLW  01
06448:  ANDWF  xB7,F
0644A:  MOVLW  00
0644C:  BTFSS  x49.5
0644E:  MOVLW  01
06450:  MOVWF  xBA
06452:  MOVLW  00
06454:  BTFSC  x4B.5
06456:  MOVLW  01
06458:  IORWF  xBA,W
0645A:  ANDWF  xB7,W
0645C:  IORWF  xB6,W
0645E:  BCF    xB5.0
06460:  BTFSC  FE8.0
06462:  BSF    xB5.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (~OutputType.B15 | OutputBoth.B15));
06464:  MOVLW  00
06466:  BTFSC  xB5.0
06468:  MOVLW  01
0646A:  MOVWF  xB6
0646C:  MOVLW  00
0646E:  BTFSC  x51.6
06470:  MOVLW  01
06472:  MOVWF  xB8
06474:  MOVLW  00
06476:  BTFSC  x53.6
06478:  MOVLW  01
0647A:  IORWF  xB8,W
0647C:  MOVWF  xB7
0647E:  MOVLW  00
06480:  BTFSS  x4F.6
06482:  MOVLW  01
06484:  ANDWF  xB7,F
06486:  MOVLW  00
06488:  BTFSS  x49.6
0648A:  MOVLW  01
0648C:  MOVWF  xBA
0648E:  MOVLW  00
06490:  BTFSC  x4B.6
06492:  MOVLW  01
06494:  IORWF  xBA,W
06496:  ANDWF  xB7,W
06498:  IORWF  xB6,W
0649A:  BCF    xB5.0
0649C:  BTFSC  FE8.0
0649E:  BSF    xB5.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (~OutputType.B16 | OutputBoth.B16));
064A0:  MOVLW  00
064A2:  BTFSC  xB5.0
064A4:  MOVLW  01
064A6:  MOVWF  xB6
064A8:  MOVLW  00
064AA:  BTFSC  x51.7
064AC:  MOVLW  01
064AE:  MOVWF  xB8
064B0:  MOVLW  00
064B2:  BTFSC  x53.7
064B4:  MOVLW  01
064B6:  IORWF  xB8,W
064B8:  MOVWF  xB7
064BA:  MOVLW  00
064BC:  BTFSS  x4F.7
064BE:  MOVLW  01
064C0:  ANDWF  xB7,F
064C2:  MOVLW  00
064C4:  BTFSS  x49.7
064C6:  MOVLW  01
064C8:  MOVWF  xBA
064CA:  MOVLW  00
064CC:  BTFSC  x4B.7
064CE:  MOVLW  01
064D0:  IORWF  xBA,W
064D2:  ANDWF  xB7,W
064D4:  IORWF  xB6,W
064D6:  BCF    xB5.0
064D8:  BTFSC  FE8.0
064DA:  BSF    xB5.0
....................       /*
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (~OutputType.B17 | OutputBoth.B17));
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (~OutputType.B18 | OutputBoth.B18));
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (~OutputType.B19 | OutputBoth.B19));
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (~OutputType.B20 | OutputBoth.B20));
....................       */
.................... 
....................    }
....................    return(check);
064DC:  MOVLW  00
064DE:  BTFSC  xB5.0
064E0:  MOVLW  01
064E2:  MOVWF  01
064E4:  MOVLB  0
064E6:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... void main()
*
08C06:  CLRF   FF8
08C08:  BCF    FD0.7
08C0A:  BSF    07.7
08C0C:  MOVLW  70
08C0E:  MOVWF  FD3
08C10:  BCF    F9B.6
08C12:  BCF    F9B.7
08C14:  BSF    FB8.3
08C16:  MOVLW  A0
08C18:  MOVWF  FAF
08C1A:  MOVLW  01
08C1C:  MOVWF  FB0
08C1E:  MOVLW  A6
08C20:  MOVWF  FAC
08C22:  MOVLW  90
08C24:  MOVWF  FAB
08C26:  BCF    F93.0
08C28:  BSF    F8A.0
08C2A:  CLRF   1B
08C2C:  BCF    1C.0
08C2E:  MOVLW  19
08C30:  MOVWF  1D
08C32:  BCF    1C.1
08C34:  MOVLW  64
08C36:  MOVWF  1E
08C38:  CLRF   1F
08C3A:  BCF    1C.2
08C3C:  BCF    1C.3
08C3E:  BCF    1C.4
08C40:  CLRF   30
08C42:  BCF    1C.5
08C44:  CLRF   31
08C46:  BCF    1C.6
08C48:  BCF    1C.7
08C4A:  BCF    32.0
08C4C:  BCF    32.1
08C4E:  BCF    32.2
08C50:  CLRF   33
08C52:  BCF    32.3
08C54:  BCF    32.4
08C56:  MOVLW  11
08C58:  MOVWF  x71
08C5A:  MOVLW  12
08C5C:  MOVWF  x72
08C5E:  MOVLW  13
08C60:  MOVWF  x73
08C62:  MOVLW  14
08C64:  MOVWF  x74
08C66:  MOVLW  16
08C68:  MOVWF  x75
08C6A:  MOVLW  17
08C6C:  MOVWF  x76
08C6E:  MOVLW  18
08C70:  MOVWF  x77
08C72:  MOVLW  19
08C74:  MOVWF  x78
08C76:  MOVLW  20
08C78:  MOVWF  x79
08C7A:  BCF    32.5
08C7C:  CLRF   x7C
08C7E:  MOVLW  01
08C80:  MOVLB  5
08C82:  MOVWF  x7F
08C84:  MOVLW  F4
08C86:  MOVWF  x7E
08C88:  CLRF   x81
08C8A:  CLRF   x80
08C8C:  CLRF   x83
08C8E:  CLRF   x82
08C90:  CLRF   x84
08C92:  MOVLB  9
08C94:  CLRF   x89
08C96:  CLRF   x88
08C98:  CLRF   x8A
08C9A:  CLRF   x8C
08C9C:  CLRF   x8B
08C9E:  MOVLB  C
08CA0:  CLRF   xAF
08CA2:  CLRF   xAE
08CA4:  MOVLB  F
08CA6:  CLRF   x38
08CA8:  CLRF   x39
08CAA:  CLRF   x3A
08CAC:  CLRF   F77
08CAE:  CLRF   F78
08CB0:  CLRF   F79
08CB2:  CLRF   19
08CB4:  CLRF   1A
08CB6:  MOVLW  3E
08CB8:  MOVLB  B
08CBA:  MOVWF  x9C
08CBC:  MOVWF  x9D
08CBE:  CLRF   x9E
08CC0:  MOVLW  20
08CC2:  MOVLB  C
08CC4:  MOVWF  x3C
08CC6:  CLRF   x3D
08CC8:  MOVLW  3E
08CCA:  MOVWF  xAB
08CCC:  MOVWF  xAC
08CCE:  CLRF   xAD
08CD0:  CLRF   xB0
.................... {
....................    
....................    
....................    delay_ms(50);
08CD2:  MOVLW  32
08CD4:  MOVWF  xBD
08CD6:  MOVLB  0
08CD8:  CALL   0658
....................    output_bit(Pled,0);   //power on watchdog signal
08CDC:  BCF    F8A.5
08CDE:  BCF    F93.5
....................    
....................    setup_timer_0(RTCC_INTERNAL);
08CE0:  MOVLW  80
08CE2:  MOVWF  FD5
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
08CE4:  MOVLW  78
08CE6:  IORLW  06
08CE8:  MOVWF  FBA
08CEA:  MOVLW  C4
08CEC:  MOVWF  FBB
....................    enable_interrupts(INT_TIMER2);
08CEE:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
08CF0:  BSF    F9D.5
....................    
....................    
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_64); //master1 jj
08CF2:  BCF    FC6.5
08CF4:  BCF    F94.5
08CF6:  BSF    F94.4
08CF8:  BCF    F94.3
08CFA:  MOVLW  22
08CFC:  MOVWF  FC6
08CFE:  MOVLW  40
08D00:  MOVWF  FC7
.................... 
....................   
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
08D02:  GOTO   06BA
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
08D06:  MOVLB  C
08D08:  CLRF   xB4
08D0A:  SETF   xB5
08D0C:  MOVLB  0
08D0E:  CALL   0750
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
08D12:  MOVLB  C
08D14:  CLRF   xB4
08D16:  SETF   xB5
08D18:  MOVLB  0
08D1A:  CALL   0762
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
08D1E:  MOVLW  02
08D20:  MOVLB  C
08D22:  MOVWF  xB4
08D24:  SETF   xB5
08D26:  MOVLB  0
08D28:  CALL   0750
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input 
08D2C:  MOVLW  02
08D2E:  MOVLB  C
08D30:  MOVWF  xB4
08D32:  SETF   xB5
08D34:  MOVLB  0
08D36:  CALL   0762
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
08D3A:  MOVLB  C
08D3C:  CLRF   xBE
08D3E:  MOVLW  06
08D40:  MOVWF  xBF
08D42:  SETF   xC0
08D44:  MOVLB  0
08D46:  CALL   0688
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
08D4A:  MOVLB  C
08D4C:  CLRF   xBE
08D4E:  MOVLW  16
08D50:  MOVWF  xBF
08D52:  SETF   xC0
08D54:  MOVLB  0
08D56:  CALL   0688
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
08D5A:  MOVLW  02
08D5C:  MOVLB  C
08D5E:  MOVWF  xBE
08D60:  MOVLW  06
08D62:  MOVWF  xBF
08D64:  SETF   xC0
08D66:  MOVLB  0
08D68:  CALL   0688
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
08D6C:  MOVLW  02
08D6E:  MOVLB  C
08D70:  MOVWF  xBE
08D72:  MOVLW  16
08D74:  MOVWF  xBF
08D76:  SETF   xC0
08D78:  MOVLB  0
08D7A:  CALL   0688
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
08D7E:  MOVLW  04
08D80:  MOVLB  C
08D82:  MOVWF  xB4
08D84:  CLRF   xB5
08D86:  MOVLB  0
08D88:  CALL   0750
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
08D8C:  MOVLW  04
08D8E:  MOVLB  C
08D90:  MOVWF  xB4
08D92:  CLRF   xB5
08D94:  MOVLB  0
08D96:  CALL   0762
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
08D9A:  MOVLW  06
08D9C:  MOVLB  C
08D9E:  MOVWF  xB4
08DA0:  CLRF   xB5
08DA2:  MOVLB  0
08DA4:  CALL   0750
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
08DA8:  MOVLW  06
08DAA:  MOVLB  C
08DAC:  MOVWF  xB4
08DAE:  CLRF   xB5
08DB0:  MOVLB  0
08DB2:  CALL   0762
....................    IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
08DB6:  MOVLW  08
08DB8:  MOVLB  C
08DBA:  MOVWF  xB4
08DBC:  CLRF   xB5
08DBE:  MOVLB  0
08DC0:  CALL   0750
....................    IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
08DC4:  MOVLW  08
08DC6:  MOVLB  C
08DC8:  MOVWF  xB4
08DCA:  CLRF   xB5
08DCC:  MOVLB  0
08DCE:  CALL   0762
....................    IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
08DD2:  MOVLW  0A
08DD4:  MOVLB  C
08DD6:  MOVWF  xB4
08DD8:  CLRF   xB5
08DDA:  MOVLB  0
08DDC:  CALL   0750
....................    IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
08DE0:  MOVLW  0A
08DE2:  MOVLB  C
08DE4:  MOVWF  xB4
08DE6:  CLRF   xB5
08DE8:  MOVLB  0
08DEA:  CALL   0762
....................    
....................    FlashingFlag = 1;
08DEE:  BSF    1C.1
....................    //output_bit(P485ctrl,0);
....................    sequence = end_sq;
08DF0:  MOVFF  71,7A
....................    Address = 1;
08DF4:  MOVLW  01
08DF6:  MOVWF  x7B
.................... 
....................    Output.B1 = 1;
08DF8:  MOVLB  C
08DFA:  BSF    x42.0
....................    Output.B2 = 1;
08DFC:  BSF    x42.1
....................    Output.B3 = 1;
08DFE:  BSF    x42.2
....................    Output.B4 = 1;
08E00:  BSF    x42.3
....................    Output.B5 = 1;
08E02:  BSF    x42.4
....................    Output.B6 = 1;
08E04:  BSF    x42.5
....................    Output.B7 = 1;
08E06:  BSF    x42.6
....................    Output.B8 = 1;
08E08:  BSF    x42.7
....................    Output.B9 = 1;
08E0A:  BSF    x43.0
....................    Output.B10 = 1;
08E0C:  BSF    x43.1
....................    Output.B11 = 1;
08E0E:  BSF    x43.2
....................    Output.B12 = 1;
08E10:  BSF    x43.3
....................    Output.B13 = 1;
08E12:  BSF    x43.4
....................    Output.B14 = 1;
08E14:  BSF    x43.5
....................    Output.B15 = 1;
08E16:  BSF    x43.6
....................    Output.B16 = 1;
08E18:  BSF    x43.7
....................    
....................    ////////////////////
....................    In.B1 = 0;
08E1A:  BCF    x50.0
....................    In.B2 = 0;
08E1C:  BCF    x50.1
....................    In.B3 = 0;
08E1E:  BCF    x50.2
....................    In.B4 = 0;
08E20:  BCF    x50.3
....................    In.B5 = 0;
08E22:  BCF    x50.4
....................    In.B6 = 0;
08E24:  BCF    x50.5
....................    In.B7 = 0;
08E26:  BCF    x50.6
....................    In.B8 = 0;
08E28:  BCF    x50.7
....................    In.B9 = 0;
08E2A:  BCF    x51.0
....................    In.B10 = 0;
08E2C:  BCF    x51.1
....................    In.B11 = 0;
08E2E:  BCF    x51.2
....................    In.B12 = 0;
08E30:  BCF    x51.3
....................    In.B13 = 0;
08E32:  BCF    x51.4
....................    In.B14 = 0;
08E34:  BCF    x51.5
....................    In.B15 = 0;
08E36:  BCF    x51.6
....................    In.B16 = 0;
08E38:  BCF    x51.7
....................     ////////////////////
....................    In2.B1 = 0;
08E3A:  BCF    x52.0
....................    In2.B2 = 0;
08E3C:  BCF    x52.1
....................    In2.B3 = 0;
08E3E:  BCF    x52.2
....................    In2.B4 = 0;
08E40:  BCF    x52.3
....................    In2.B5 = 0;
08E42:  BCF    x52.4
....................    In2.B6 = 0;
08E44:  BCF    x52.5
....................    In2.B7 = 0;
08E46:  BCF    x52.6
....................    In2.B8 = 0;
08E48:  BCF    x52.7
....................    In2.B9 = 0;
08E4A:  BCF    x53.0
....................    In2.B10 = 0;
08E4C:  BCF    x53.1
....................    In2.B11 = 0;
08E4E:  BCF    x53.2
....................    In2.B12 = 0;
08E50:  BCF    x53.3
....................    In2.B13 = 0;
08E52:  BCF    x53.4
....................    In2.B14 = 0;
08E54:  BCF    x53.5
....................    In2.B15 = 0;
08E56:  BCF    x53.6
....................    In2.B16 = 0;
08E58:  BCF    x53.7
....................   
....................    ////////////////////////
....................    Ack.B1 = 0;
08E5A:  BCF    x4E.0
....................    Ack.B2 = 0;
08E5C:  BCF    x4E.1
....................    Ack.B3 = 0;
08E5E:  BCF    x4E.2
....................    Ack.B4 = 0;
08E60:  BCF    x4E.3
....................    Ack.B5 = 0;
08E62:  BCF    x4E.4
....................    Ack.B6 = 0;
08E64:  BCF    x4E.5
....................    Ack.B7 = 0;
08E66:  BCF    x4E.6
....................    Ack.B8 = 0;
08E68:  BCF    x4E.7
....................    Ack.B9 = 0;
08E6A:  BCF    x4F.0
....................    Ack.B10 = 0;
08E6C:  BCF    x4F.1
....................    Ack.B11 = 0;
08E6E:  BCF    x4F.2
....................    Ack.B12 = 0;
08E70:  BCF    x4F.3
....................    Ack.B13 = 0;
08E72:  BCF    x4F.4
....................    Ack.B14 = 0;
08E74:  BCF    x4F.5
....................    Ack.B15 = 0;
08E76:  BCF    x4F.6
....................    Ack.B16 = 0;
08E78:  BCF    x4F.7
.................... 
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0x0F)
08E7A:  MOVFF  FF2,CB4
08E7E:  BCF    FF2.7
08E80:  CLRF   FAA
08E82:  CLRF   FA9
08E84:  BCF    FA6.6
08E86:  BCF    FA6.7
08E88:  BSF    FA6.0
08E8A:  MOVF   FA8,W
08E8C:  BTFSC  xB4.7
08E8E:  BSF    FF2.7
08E90:  SUBLW  0F
08E92:  BNZ   8E9E
....................    {
....................       Read_Config();
08E94:  MOVLB  0
08E96:  GOTO   0776
....................    }
08E9A:  BRA    91DE
08E9C:  MOVLB  C
....................    else
....................    {
....................       FlashingRateTime = 25;
08E9E:  MOVLW  19
08EA0:  MOVWF  1D
....................       AutoAck = 0xF0; //not use auto ack
08EA2:  MOVLW  F0
08EA4:  MOVLB  0
08EA6:  MOVWF  x6C
....................       Address = 0x01;
08EA8:  MOVLW  01
08EAA:  MOVWF  x7B
.................... 
....................       AutoAckTime = 5;
08EAC:  MOVLW  05
08EAE:  MOVWF  x6D
....................       FlashingRate = 25;
08EB0:  MOVLW  19
08EB2:  MOVWF  x6E
....................       NoOfPoint = 16;
08EB4:  MOVLW  10
08EB6:  MOVWF  x6F
....................       char i;
....................       for(i =0; i<=NoOfPoint; i++)
08EB8:  MOVLB  C
08EBA:  CLRF   xB1
08EBC:  MOVF   xB1,W
08EBE:  MOVLB  0
08EC0:  SUBWF  x6F,W
08EC2:  BNC   8EE2
....................       {
....................          FaultDelayTime[i] = 0;
08EC4:  BCF    FD8.0
08EC6:  MOVLB  C
08EC8:  RLCF   xB1,W
08ECA:  CLRF   03
08ECC:  ADDLW  86
08ECE:  MOVWF  FE9
08ED0:  MOVLW  0C
08ED2:  ADDWFC 03,W
08ED4:  MOVWF  FEA
08ED6:  CLRF   FEC
08ED8:  MOVF   FED,F
08EDA:  CLRF   FEF
08EDC:  INCF   xB1,F
08EDE:  BRA    8EBC
08EE0:  MOVLB  0
....................       }
.................... 
....................       InputType.B1 = 1;
08EE2:  MOVLB  C
08EE4:  BSF    x44.0
....................       InputType.B2 = 1;
08EE6:  BSF    x44.1
....................       InputType.B3 = 1;
08EE8:  BSF    x44.2
....................       InputType.B4 = 1;
08EEA:  BSF    x44.3
....................       InputType.B5 = 1;
08EEC:  BSF    x44.4
....................       InputType.B6 = 1;
08EEE:  BSF    x44.5
....................       InputType.B7 = 1;
08EF0:  BSF    x44.6
....................       InputType.B8 = 1;
08EF2:  BSF    x44.7
....................       InputType.B9 = 1;
08EF4:  BSF    x45.0
....................       InputType.B10 = 1;
08EF6:  BSF    x45.1
....................       InputType.B11 = 1;
08EF8:  BSF    x45.2
....................       InputType.B12 = 1;
08EFA:  BSF    x45.3
....................       InputType.B13 = 1;
08EFC:  BSF    x45.4
....................       InputType.B14 = 1;
08EFE:  BSF    x45.5
....................       InputType.B15 = 1;
08F00:  BSF    x45.6
....................       InputType.B16 = 1;
08F02:  BSF    x45.7
....................       
....................       FaultNCNO[1] = 1;
08F04:  BSF    xA8.1
....................       FaultNCNO[2] = 1;
08F06:  BSF    xA8.2
....................       FaultNCNO[3] = 1;
08F08:  BSF    xA8.3
....................       FaultNCNO[4] = 1;
08F0A:  BSF    xA8.4
....................       FaultNCNO[5] = 1;
08F0C:  BSF    xA8.5
....................       FaultNCNO[6] = 1;
08F0E:  BSF    xA8.6
....................       FaultNCNO[7] = 1;
08F10:  BSF    xA8.7
....................       FaultNCNO[8] = 1;
08F12:  BSF    xA9.0
....................       FaultNCNO[9] = 1;
08F14:  BSF    xA9.1
....................       FaultNCNO[10] = 1;
08F16:  BSF    xA9.2
....................       FaultNCNO[11] = 1;
08F18:  BSF    xA9.3
....................       FaultNCNO[12] = 1;
08F1A:  BSF    xA9.4
....................       FaultNCNO[13] = 1;
08F1C:  BSF    xA9.5
....................       FaultNCNO[14] = 1;
08F1E:  BSF    xA9.6
....................       FaultNCNO[15] = 1;
08F20:  BSF    xA9.7
....................       FaultNCNO[16] = 1;
08F22:  BSF    xAA.0
....................       
....................       /////////////////////////////
....................       FaultType.B1 = 1;
08F24:  BSF    x46.0
....................       FaultType.B2= 1;
08F26:  BSF    x46.1
....................       FaultType.B3 = 1;
08F28:  BSF    x46.2
....................       FaultType.B4 = 1;
08F2A:  BSF    x46.3
....................       FaultType.B5 = 1;
08F2C:  BSF    x46.4
....................       FaultType.B6 = 1;
08F2E:  BSF    x46.5
....................       FaultType.B7 = 1;
08F30:  BSF    x46.6
....................       FaultType.B8 = 1;
08F32:  BSF    x46.7
....................       FaultType.B9 = 1;
08F34:  BSF    x47.0
....................       FaultType.B10 = 1;
08F36:  BSF    x47.1
....................       FaultType.B11 = 1;
08F38:  BSF    x47.2
....................       FaultType.B12 = 1;
08F3A:  BSF    x47.3
....................       FaultType.B13 = 1;
08F3C:  BSF    x47.4
....................       FaultType.B14 = 1;
08F3E:  BSF    x47.5
....................       FaultType.B15 = 1;
08F40:  BSF    x47.6
....................       FaultType.B16 = 1;
08F42:  BSF    x47.7
....................       
....................       ////////////////////////////
....................       OutputType.B1 = 1;
08F44:  BSF    x48.0
....................       OutputType.B2 = 1;
08F46:  BSF    x48.1
....................       OutputType.B3 = 1;
08F48:  BSF    x48.2
....................       OutputType.B4 = 1;
08F4A:  BSF    x48.3
....................       OutputType.B5 = 1;
08F4C:  BSF    x48.4
....................       OutputType.B6 = 1;
08F4E:  BSF    x48.5
....................       OutputType.B7 = 1;
08F50:  BSF    x48.6
....................       OutputType.B8 = 1;
08F52:  BSF    x48.7
....................       OutputType.B9 = 1;
08F54:  BSF    x49.0
....................       OutputType.B10 = 1;
08F56:  BSF    x49.1
....................       OutputType.B11 = 1;
08F58:  BSF    x49.2
....................       OutputType.B12 = 1;
08F5A:  BSF    x49.3
....................       OutputType.B13 = 1;
08F5C:  BSF    x49.4
....................       OutputType.B14 = 1;
08F5E:  BSF    x49.5
....................       OutputType.B15 = 1;
08F60:  BSF    x49.6
....................       OutputType.B16 = 1;
08F62:  BSF    x49.7
....................  
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
08F64:  BSF    x4A.0
....................       OutputBoth.B2 = 1;
08F66:  BSF    x4A.1
....................       OutputBoth.B3 = 1;
08F68:  BSF    x4A.2
....................       OutputBoth.B4 = 1;
08F6A:  BSF    x4A.3
....................       OutputBoth.B5 = 1;
08F6C:  BSF    x4A.4
....................       OutputBoth.B6 = 1;
08F6E:  BSF    x4A.5
....................       OutputBoth.B7 = 1;
08F70:  BSF    x4A.6
....................       OutputBoth.B8 = 1;
08F72:  BSF    x4A.7
....................       OutputBoth.B9 = 1;
08F74:  BSF    x4B.0
....................       OutputBoth.B10 = 1;
08F76:  BSF    x4B.1
....................       OutputBoth.B11 = 1;
08F78:  BSF    x4B.2
....................       OutputBoth.B12 = 1;
08F7A:  BSF    x4B.3
....................       OutputBoth.B13 = 1;
08F7C:  BSF    x4B.4
....................       OutputBoth.B14 = 1;
08F7E:  BSF    x4B.5
....................       OutputBoth.B15 = 1;
08F80:  BSF    x4B.6
....................       OutputBoth.B16 = 1;
08F82:  BSF    x4B.7
....................       
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
08F84:  BSF    x4C.0
....................       AlarmIndicator.B2 = 1;
08F86:  BSF    x4C.1
....................       AlarmIndicator.B3 = 1;
08F88:  BSF    x4C.2
....................       AlarmIndicator.B4 = 1;
08F8A:  BSF    x4C.3
....................       AlarmIndicator.B5 = 1;
08F8C:  BSF    x4C.4
....................       AlarmIndicator.B6 = 1;
08F8E:  BSF    x4C.5
....................       AlarmIndicator.B7 = 1;
08F90:  BSF    x4C.6
....................       AlarmIndicator.B8 = 1;
08F92:  BSF    x4C.7
....................       AlarmIndicator.B9 = 1;
08F94:  BSF    x4D.0
....................       AlarmIndicator.B10 = 1;
08F96:  BSF    x4D.1
....................       AlarmIndicator.B11 = 1;
08F98:  BSF    x4D.2
....................       AlarmIndicator.B12 = 1;
08F9A:  BSF    x4D.3
....................       AlarmIndicator.B13 = 1;
08F9C:  BSF    x4D.4
....................       AlarmIndicator.B14 = 1;
08F9E:  BSF    x4D.5
....................       AlarmIndicator.B15 = 1;
08FA0:  BSF    x4D.6
....................       AlarmIndicator.B16 = 1;
08FA2:  BSF    x4D.7
....................       
....................       ///////////// JACK///////////////////
....................    EEpDat = read_eeprom(0x10);
08FA4:  MOVFF  FF2,CB4
08FA8:  BCF    FF2.7
08FAA:  CLRF   FAA
08FAC:  MOVLW  10
08FAE:  MOVWF  FA9
08FB0:  BCF    FA6.6
08FB2:  BCF    FA6.7
08FB4:  BSF    FA6.0
08FB6:  MOVF   FA8,W
08FB8:  BTFSC  xB4.7
08FBA:  BSF    FF2.7
08FBC:  MOVWF  3B
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
08FBE:  BCF    x58.0
08FC0:  BTFSC  3B.0
08FC2:  BSF    x58.0
....................    RED_Colour.B2 = EEpDat >> 1;
08FC4:  BCF    FD8.0
08FC6:  RRCF   3B,W
08FC8:  BCF    x58.1
08FCA:  BTFSC  FE8.0
08FCC:  BSF    x58.1
....................    RED_Colour.B3 = EEpDat >> 2;
08FCE:  RRCF   3B,W
08FD0:  MOVWF  00
08FD2:  RRCF   00,F
08FD4:  MOVLW  3F
08FD6:  ANDWF  00,F
08FD8:  BCF    x58.2
08FDA:  BTFSC  00.0
08FDC:  BSF    x58.2
....................    RED_Colour.B4 = EEpDat >> 3;
08FDE:  RRCF   3B,W
08FE0:  MOVWF  00
08FE2:  RRCF   00,F
08FE4:  RRCF   00,F
08FE6:  MOVLW  1F
08FE8:  ANDWF  00,F
08FEA:  BCF    x58.3
08FEC:  BTFSC  00.0
08FEE:  BSF    x58.3
....................    RED_Colour.B5 = EEpDat >> 4;
08FF0:  SWAPF  3B,W
08FF2:  MOVWF  00
08FF4:  MOVLW  0F
08FF6:  ANDWF  00,F
08FF8:  BCF    x58.4
08FFA:  BTFSC  00.0
08FFC:  BSF    x58.4
....................    RED_Colour.B6 = EEpDat >> 5;
08FFE:  SWAPF  3B,W
09000:  MOVWF  00
09002:  RRCF   00,F
09004:  MOVLW  07
09006:  ANDWF  00,F
09008:  BCF    x58.5
0900A:  BTFSC  00.0
0900C:  BSF    x58.5
....................    RED_Colour.B7 = EEpDat >> 6;
0900E:  SWAPF  3B,W
09010:  MOVWF  00
09012:  RRCF   00,F
09014:  RRCF   00,F
09016:  MOVLW  03
09018:  ANDWF  00,F
0901A:  BCF    x58.6
0901C:  BTFSC  00.0
0901E:  BSF    x58.6
....................    RED_Colour.B8 = EEpDat >> 7;
09020:  CLRF   00
09022:  BTFSC  3B.7
09024:  BSF    00.0
09026:  BCF    x58.7
09028:  BTFSC  00.0
0902A:  BSF    x58.7
....................    
....................    EEpDat = read_eeprom(0x11);
0902C:  MOVFF  FF2,CB4
09030:  BCF    FF2.7
09032:  CLRF   FAA
09034:  MOVLW  11
09036:  MOVWF  FA9
09038:  BCF    FA6.6
0903A:  BCF    FA6.7
0903C:  BSF    FA6.0
0903E:  MOVF   FA8,W
09040:  BTFSC  xB4.7
09042:  BSF    FF2.7
09044:  MOVWF  3B
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
09046:  BCF    x59.0
09048:  BTFSC  3B.0
0904A:  BSF    x59.0
....................    RED_Colour.B10 = EEpDat >> 1;
0904C:  BCF    FD8.0
0904E:  RRCF   3B,W
09050:  BCF    x59.1
09052:  BTFSC  FE8.0
09054:  BSF    x59.1
....................    
....................    
....................    EEpDat = read_eeprom(0x12);
09056:  MOVFF  FF2,CB4
0905A:  BCF    FF2.7
0905C:  CLRF   FAA
0905E:  MOVLW  12
09060:  MOVWF  FA9
09062:  BCF    FA6.6
09064:  BCF    FA6.7
09066:  BSF    FA6.0
09068:  MOVF   FA8,W
0906A:  BTFSC  xB4.7
0906C:  BSF    FF2.7
0906E:  MOVWF  3B
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
09070:  BCF    x59.2
09072:  BTFSC  3B.0
09074:  BSF    x59.2
....................    RED_Colour.B12 = EEpDat >> 1;
09076:  BCF    FD8.0
09078:  RRCF   3B,W
0907A:  BCF    x59.3
0907C:  BTFSC  FE8.0
0907E:  BSF    x59.3
....................    RED_Colour.B13 = EEpDat >> 2;
09080:  RRCF   3B,W
09082:  MOVWF  00
09084:  RRCF   00,F
09086:  MOVLW  3F
09088:  ANDWF  00,F
0908A:  BCF    x59.4
0908C:  BTFSC  00.0
0908E:  BSF    x59.4
....................    RED_Colour.B14 = EEpDat >> 3;
09090:  RRCF   3B,W
09092:  MOVWF  00
09094:  RRCF   00,F
09096:  RRCF   00,F
09098:  MOVLW  1F
0909A:  ANDWF  00,F
0909C:  BCF    x59.5
0909E:  BTFSC  00.0
090A0:  BSF    x59.5
....................    RED_Colour.B15 = EEpDat >> 4;
090A2:  SWAPF  3B,W
090A4:  MOVWF  00
090A6:  MOVLW  0F
090A8:  ANDWF  00,F
090AA:  BCF    x59.6
090AC:  BTFSC  00.0
090AE:  BSF    x59.6
....................    RED_Colour.B16 = EEpDat >> 5;
090B0:  SWAPF  3B,W
090B2:  MOVWF  00
090B4:  RRCF   00,F
090B6:  MOVLW  07
090B8:  ANDWF  00,F
090BA:  BCF    x59.7
090BC:  BTFSC  00.0
090BE:  BSF    x59.7
....................   
....................    EEpDat = read_eeprom(0x14);
090C0:  MOVFF  FF2,CB4
090C4:  BCF    FF2.7
090C6:  CLRF   FAA
090C8:  MOVLW  14
090CA:  MOVWF  FA9
090CC:  BCF    FA6.6
090CE:  BCF    FA6.7
090D0:  BSF    FA6.0
090D2:  MOVF   FA8,W
090D4:  BTFSC  xB4.7
090D6:  BSF    FF2.7
090D8:  MOVWF  3B
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
090DA:  BCF    x5A.0
090DC:  BTFSC  3B.0
090DE:  BSF    x5A.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
090E0:  BCF    FD8.0
090E2:  RRCF   3B,W
090E4:  BCF    x5A.1
090E6:  BTFSC  FE8.0
090E8:  BSF    x5A.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
090EA:  RRCF   3B,W
090EC:  MOVWF  00
090EE:  RRCF   00,F
090F0:  MOVLW  3F
090F2:  ANDWF  00,F
090F4:  BCF    x5A.2
090F6:  BTFSC  00.0
090F8:  BSF    x5A.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
090FA:  RRCF   3B,W
090FC:  MOVWF  00
090FE:  RRCF   00,F
09100:  RRCF   00,F
09102:  MOVLW  1F
09104:  ANDWF  00,F
09106:  BCF    x5A.3
09108:  BTFSC  00.0
0910A:  BSF    x5A.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
0910C:  SWAPF  3B,W
0910E:  MOVWF  00
09110:  MOVLW  0F
09112:  ANDWF  00,F
09114:  BCF    x5A.4
09116:  BTFSC  00.0
09118:  BSF    x5A.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
0911A:  SWAPF  3B,W
0911C:  MOVWF  00
0911E:  RRCF   00,F
09120:  MOVLW  07
09122:  ANDWF  00,F
09124:  BCF    x5A.5
09126:  BTFSC  00.0
09128:  BSF    x5A.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
0912A:  SWAPF  3B,W
0912C:  MOVWF  00
0912E:  RRCF   00,F
09130:  RRCF   00,F
09132:  MOVLW  03
09134:  ANDWF  00,F
09136:  BCF    x5A.6
09138:  BTFSC  00.0
0913A:  BSF    x5A.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
0913C:  CLRF   00
0913E:  BTFSC  3B.7
09140:  BSF    00.0
09142:  BCF    x5A.7
09144:  BTFSC  00.0
09146:  BSF    x5A.7
....................    
....................    EEpDat = read_eeprom(0x15);
09148:  MOVFF  FF2,CB4
0914C:  BCF    FF2.7
0914E:  CLRF   FAA
09150:  MOVLW  15
09152:  MOVWF  FA9
09154:  BCF    FA6.6
09156:  BCF    FA6.7
09158:  BSF    FA6.0
0915A:  MOVF   FA8,W
0915C:  BTFSC  xB4.7
0915E:  BSF    FF2.7
09160:  MOVWF  3B
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
09162:  BCF    x5B.0
09164:  BTFSC  3B.0
09166:  BSF    x5B.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
09168:  BCF    FD8.0
0916A:  RRCF   3B,W
0916C:  BCF    x5B.1
0916E:  BTFSC  FE8.0
09170:  BSF    x5B.1
....................    
....................    
....................    EEpDat = read_eeprom(0x16);
09172:  MOVFF  FF2,CB4
09176:  BCF    FF2.7
09178:  CLRF   FAA
0917A:  MOVLW  16
0917C:  MOVWF  FA9
0917E:  BCF    FA6.6
09180:  BCF    FA6.7
09182:  BSF    FA6.0
09184:  MOVF   FA8,W
09186:  BTFSC  xB4.7
09188:  BSF    FF2.7
0918A:  MOVWF  3B
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
0918C:  BCF    x5B.2
0918E:  BTFSC  3B.0
09190:  BSF    x5B.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
09192:  BCF    FD8.0
09194:  RRCF   3B,W
09196:  BCF    x5B.3
09198:  BTFSC  FE8.0
0919A:  BSF    x5B.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
0919C:  RRCF   3B,W
0919E:  MOVWF  00
091A0:  RRCF   00,F
091A2:  MOVLW  3F
091A4:  ANDWF  00,F
091A6:  BCF    x5B.4
091A8:  BTFSC  00.0
091AA:  BSF    x5B.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
091AC:  RRCF   3B,W
091AE:  MOVWF  00
091B0:  RRCF   00,F
091B2:  RRCF   00,F
091B4:  MOVLW  1F
091B6:  ANDWF  00,F
091B8:  BCF    x5B.5
091BA:  BTFSC  00.0
091BC:  BSF    x5B.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
091BE:  SWAPF  3B,W
091C0:  MOVWF  00
091C2:  MOVLW  0F
091C4:  ANDWF  00,F
091C6:  BCF    x5B.6
091C8:  BTFSC  00.0
091CA:  BSF    x5B.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
091CC:  SWAPF  3B,W
091CE:  MOVWF  00
091D0:  RRCF   00,F
091D2:  MOVLW  07
091D4:  ANDWF  00,F
091D6:  BCF    x5B.7
091D8:  BTFSC  00.0
091DA:  BSF    x5B.7
091DC:  MOVLB  0
.................... 
....................    
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
....................    
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
091DE:  MOVLW  00
091E0:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
091E2:  MOVWF  F93
....................    enable_interrupts(GLOBAL);
091E4:  MOVLW  C0
091E6:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
091E8:  BSF    FD1.0
....................    Read_input(); restart_wdt();
091EA:  CALL   1C72
091EE:  CLRWDT
....................    
....................    output_bit(Pbuzzer,0);   //Clear Buzzer
091F0:  BCF    F89.4
091F2:  BCF    F92.4
....................    output_bit(Pbell,0);      //Clear Bell
091F4:  BCF    F89.3
091F6:  BCF    F92.3
....................    output_bit(P485ctrl,0);
091F8:  BCF    F8A.3
091FA:  BCF    F93.3
....................    //output_bit(P485ctrl,0);
....................    output_bit(PIN_B4,1); //jj
091FC:  BSF    F8A.4
091FE:  BCF    F93.4
....................    Send_Ouput();
09200:  CALL   25F4
....................    
....................    IO_OUTPUT_A(IO_DEVICE_2, 0xff);
09204:  MOVLW  04
09206:  MOVLB  C
09208:  MOVWF  xBC
0920A:  SETF   xBD
0920C:  MOVLB  0
0920E:  CALL   25C8
....................    IO_OUTPUT_B(IO_DEVICE_2, 0xff);
09212:  MOVLW  04
09214:  MOVLB  C
09216:  MOVWF  xBC
09218:  SETF   xBD
0921A:  MOVLB  0
0921C:  CALL   25DE
....................             
....................    IO_OUTPUT_A(IO_DEVICE_3, 0xff);
09220:  MOVLW  06
09222:  MOVLB  C
09224:  MOVWF  xBC
09226:  SETF   xBD
09228:  MOVLB  0
0922A:  CALL   25C8
....................    IO_OUTPUT_B(IO_DEVICE_3, 0xff);
0922E:  MOVLW  06
09230:  MOVLB  C
09232:  MOVWF  xBC
09234:  SETF   xBD
09236:  MOVLB  0
09238:  CALL   25DE
....................   
....................    IO_OUTPUT_A(IO_DEVICE_5, 0xff);  
0923C:  MOVLW  0A
0923E:  MOVLB  C
09240:  MOVWF  xBC
09242:  SETF   xBD
09244:  MOVLB  0
09246:  CALL   25C8
....................    IO_OUTPUT_B(IO_DEVICE_5, 0xff);
0924A:  MOVLW  0A
0924C:  MOVLB  C
0924E:  MOVWF  xBC
09250:  SETF   xBD
09252:  MOVLB  0
09254:  CALL   25DE
....................             
....................    IO_OUTPUT_A(IO_DEVICE_4, 0xff);
09258:  MOVLW  08
0925A:  MOVLB  C
0925C:  MOVWF  xBC
0925E:  SETF   xBD
09260:  MOVLB  0
09262:  CALL   25C8
....................    IO_OUTPUT_B(IO_DEVICE_4, 0xff);
09266:  MOVLW  08
09268:  MOVLB  C
0926A:  MOVWF  xBC
0926C:  SETF   xBD
0926E:  MOVLB  0
09270:  CALL   25DE
....................      
....................    // jj
....................    char i;
....................    for(i=1;i<=16;i++)
09274:  MOVLW  01
09276:  MOVLB  C
09278:  MOVWF  xB2
0927A:  MOVF   xB2,W
0927C:  SUBLW  10
0927E:  BTFSS  FD8.0
09280:  BRA    93CE
....................    {
....................       FaultAgo[i] = 0;
09282:  MOVFF  CB2,CC5
09286:  CLRF   xC6
09288:  MOVLW  0C
0928A:  MOVWF  xC8
0928C:  MOVLW  5E
0928E:  MOVWF  xC7
09290:  MOVLB  0
09292:  CALL   1BD2
....................       FaultNow[i] = 0;
09296:  MOVFF  CB2,CC5
0929A:  MOVLB  C
0929C:  CLRF   xC6
0929E:  MOVLW  0C
092A0:  MOVWF  xC8
092A2:  MOVLW  61
092A4:  MOVWF  xC7
092A6:  MOVLB  0
092A8:  CALL   1BD2
....................       ReleaseTime[i] = 0;
092AC:  BCF    FD8.0
092AE:  MOVLB  C
092B0:  RLCF   xB2,W
092B2:  CLRF   03
092B4:  ADDLW  64
092B6:  MOVWF  FE9
092B8:  MOVLW  0C
092BA:  ADDWFC 03,W
092BC:  MOVWF  FEA
092BE:  CLRF   FEC
092C0:  MOVF   FED,F
092C2:  CLRF   FEF
....................       
....................       if(FaultNCNO[i] ==NO)
092C4:  MOVFF  CB2,CC5
092C8:  MOVLW  0C
092CA:  MOVWF  xC7
092CC:  MOVLW  A8
092CE:  MOVWF  xC6
092D0:  MOVLB  0
092D2:  CALL   1B7A
092D6:  MOVF   01,W
092D8:  ANDLW  01
092DA:  SUBLW  01
092DC:  BNZ   9356
....................       {
....................          switch(i)
092DE:  MOVLW  01
092E0:  MOVLB  C
092E2:  SUBWF  xB2,W
092E4:  ADDLW  F0
092E6:  BC    9352
092E8:  ADDLW  10
092EA:  MOVLB  0
092EC:  GOTO   95F0
....................          {
....................             case 1:
....................                Inputt.B1 = 0; 
092F0:  MOVLB  C
092F2:  BCF    x40.0
....................             break;
092F4:  BRA    9352
....................             case 2:
....................                Inputt.B2 = 0; 
092F6:  MOVLB  C
092F8:  BCF    x40.1
....................             break;
092FA:  BRA    9352
....................             case 3:
....................                Inputt.B3 = 0; 
092FC:  MOVLB  C
092FE:  BCF    x40.2
....................             break;
09300:  BRA    9352
....................             case 4:
....................                Inputt.B4 = 0; 
09302:  MOVLB  C
09304:  BCF    x40.3
....................             break;
09306:  BRA    9352
....................             case 5:
....................                Inputt.B5 = 0; 
09308:  MOVLB  C
0930A:  BCF    x40.4
....................             break;
0930C:  BRA    9352
....................             case 6:
....................                Inputt.B6 = 0; 
0930E:  MOVLB  C
09310:  BCF    x40.5
....................             break;
09312:  BRA    9352
....................             case 7:
....................                Inputt.B7 = 0; 
09314:  MOVLB  C
09316:  BCF    x40.6
....................              break;
09318:  BRA    9352
....................              case 8:
....................                Inputt.B8 = 0; 
0931A:  MOVLB  C
0931C:  BCF    x40.7
....................             break;
0931E:  BRA    9352
....................             case 9:
....................                Inputt.B9 = 0; 
09320:  MOVLB  C
09322:  BCF    x41.0
....................             break;
09324:  BRA    9352
....................             case 10:
....................                Inputt.B10 = 0; 
09326:  MOVLB  C
09328:  BCF    x41.1
....................             break;
0932A:  BRA    9352
....................             case 11:
....................                Inputt.B11 = 0; 
0932C:  MOVLB  C
0932E:  BCF    x41.2
....................             break;
09330:  BRA    9352
....................             case 12:
....................                Inputt.B12 = 0; 
09332:  MOVLB  C
09334:  BCF    x41.3
....................             break;
09336:  BRA    9352
....................             case 13:
....................                Inputt.B13 = 0; 
09338:  MOVLB  C
0933A:  BCF    x41.4
....................             break;
0933C:  BRA    9352
....................             case 14:
....................                Inputt.B14 = 0; 
0933E:  MOVLB  C
09340:  BCF    x41.5
....................             break;
09342:  BRA    9352
....................             case 15:
....................                Inputt.B15 = 0; 
09344:  MOVLB  C
09346:  BCF    x41.6
....................             break;
09348:  BRA    9352
....................             case 16:
....................                 Inputt.B16 = 0;
0934A:  MOVLB  C
0934C:  BCF    x41.7
....................              break;
0934E:  BRA    9352
09350:  MOVLB  C
....................                        
....................          }                 
....................       }
09352:  BRA    93CA
09354:  MOVLB  0
....................       else
....................       {
....................          switch(i)
09356:  MOVLW  01
09358:  MOVLB  C
0935A:  SUBWF  xB2,W
0935C:  ADDLW  F0
0935E:  BC    93CA
09360:  ADDLW  10
09362:  MOVLB  0
09364:  GOTO   962A
....................          {
....................             case 1:
....................                Inputt.B1 = 1; 
09368:  MOVLB  C
0936A:  BSF    x40.0
....................             break;
0936C:  BRA    93CA
....................             case 2:
....................                Inputt.B2 = 1; 
0936E:  MOVLB  C
09370:  BSF    x40.1
....................             break;
09372:  BRA    93CA
....................             case 3:
....................                Inputt.B3 = 1; 
09374:  MOVLB  C
09376:  BSF    x40.2
....................             break;
09378:  BRA    93CA
....................             case 4:
....................                Inputt.B4 = 1; 
0937A:  MOVLB  C
0937C:  BSF    x40.3
....................             break;
0937E:  BRA    93CA
....................             case 5:
....................                Inputt.B5 = 1; 
09380:  MOVLB  C
09382:  BSF    x40.4
....................             break;
09384:  BRA    93CA
....................             case 6:
....................                Inputt.B6 = 1; 
09386:  MOVLB  C
09388:  BSF    x40.5
....................             break;
0938A:  BRA    93CA
....................             case 7:
....................                Inputt.B7 = 1; 
0938C:  MOVLB  C
0938E:  BSF    x40.6
....................              break;
09390:  BRA    93CA
....................              case 8:
....................                Inputt.B8 = 1; 
09392:  MOVLB  C
09394:  BSF    x40.7
....................             break;
09396:  BRA    93CA
....................             case 9:
....................                Inputt.B9 = 1; 
09398:  MOVLB  C
0939A:  BSF    x41.0
....................             break;
0939C:  BRA    93CA
....................             case 10:
....................                Inputt.B10 = 1; 
0939E:  MOVLB  C
093A0:  BSF    x41.1
....................             break;
093A2:  BRA    93CA
....................             case 11:
....................                Inputt.B11 = 1; 
093A4:  MOVLB  C
093A6:  BSF    x41.2
....................             break;
093A8:  BRA    93CA
....................             case 12:
....................                Inputt.B12 = 1; 
093AA:  MOVLB  C
093AC:  BSF    x41.3
....................             break;
093AE:  BRA    93CA
....................             case 13:
....................                Inputt.B13 = 1; 
093B0:  MOVLB  C
093B2:  BSF    x41.4
....................             break;
093B4:  BRA    93CA
....................             case 14:
....................                Inputt.B14 = 1; 
093B6:  MOVLB  C
093B8:  BSF    x41.5
....................             break;
093BA:  BRA    93CA
....................             case 15:
....................                Inputt.B15 = 1; 
093BC:  MOVLB  C
093BE:  BSF    x41.6
....................             break;
093C0:  BRA    93CA
....................             case 16:
....................                 Inputt.B16 = 1;
093C2:  MOVLB  C
093C4:  BSF    x41.7
....................              break;
093C6:  BRA    93CA
093C8:  MOVLB  C
....................                        
....................          }                 
....................       }
093CA:  INCF   xB2,F
093CC:  BRA    927A
....................       
....................    }
.................... 
....................   //GSM SIM900 Init
....................    delay_ms(1000);
093CE:  MOVLW  04
093D0:  MOVWF  xB4
093D2:  MOVLW  FA
093D4:  MOVWF  xBD
093D6:  MOVLB  0
093D8:  CALL   0658
093DC:  MOVLB  C
093DE:  DECFSZ xB4,F
093E0:  BRA    93D2
....................    fprintf(CH2,"AT+CMGF=1"); 
093E2:  MOVLW  4E
093E4:  MOVWF  FF6
093E6:  MOVLW  06
093E8:  MOVWF  FF7
093EA:  MOVLB  0
093EC:  CALL   29E2
....................    putc('\n',CH2);
093F0:  MOVLW  0A
093F2:  MOVLB  C
093F4:  MOVWF  xB6
093F6:  MOVLB  0
093F8:  CALL   299C
....................    delay_ms(50);
093FC:  MOVLW  32
093FE:  MOVLB  C
09400:  MOVWF  xBD
09402:  MOVLB  0
09404:  CALL   0658
....................    
....................    SendSMS.B1 =0;
09408:  MOVLB  C
0940A:  BCF    x5C.0
....................    SendSMS.B2 =0;
0940C:  BCF    x5C.1
....................    SendSMS.B3 =0;
0940E:  BCF    x5C.2
....................    SendSMS.B4 =0;
09410:  BCF    x5C.3
....................    SendSMS.B5 =0;
09412:  BCF    x5C.4
....................    SendSMS.B6 =0;
09414:  BCF    x5C.5
....................    SendSMS.B7 =0;
09416:  BCF    x5C.6
....................    SendSMS.B8 =0;
09418:  BCF    x5C.7
....................    SendSMS.B9 =0;
0941A:  BCF    x5D.0
....................    SendSMS.B10 =0;
0941C:  BCF    x5D.1
....................    SendSMS.B11 =0;
0941E:  BCF    x5D.2
....................    SendSMS.B12 =0;
09420:  BCF    x5D.3
....................    SendSMS.B13 =0;
09422:  BCF    x5D.4
....................    SendSMS.B14 =0;
09424:  BCF    x5D.5
....................    SendSMS.B15 =0;
09426:  BCF    x5D.6
....................    SendSMS.B16 =0;
09428:  BCF    x5D.7
....................    
....................    char m;
....................    for(m=0; m<10; m++)
0942A:  CLRF   xB3
0942C:  MOVF   xB3,W
0942E:  SUBLW  09
09430:  BNC   9464
....................    {
....................       sms_phonenumber[m] = read_eeprom(0x32 + m);
09432:  CLRF   03
09434:  MOVF   xB3,W
09436:  ADDLW  8D
09438:  MOVWF  FE9
0943A:  MOVLW  09
0943C:  ADDWFC 03,W
0943E:  MOVWF  FEA
09440:  MOVLW  32
09442:  ADDWF  xB3,W
09444:  MOVWF  xB6
09446:  MOVFF  FF2,CB7
0944A:  BCF    FF2.7
0944C:  CLRF   FAA
0944E:  MOVFF  CB6,FA9
09452:  BCF    FA6.6
09454:  BCF    FA6.7
09456:  BSF    FA6.0
09458:  MOVF   FA8,W
0945A:  BTFSC  xB7.7
0945C:  BSF    FF2.7
0945E:  MOVWF  FEF
09460:  INCF   xB3,F
09462:  BRA    942C
....................    }
....................    sms_phonenumber[m] = '\0' ; // end string
09464:  CLRF   03
09466:  MOVF   xB3,W
09468:  ADDLW  8D
0946A:  MOVWF  FE9
0946C:  MOVLW  09
0946E:  ADDWFC 03,W
09470:  MOVWF  FEA
09472:  CLRF   FEF
....................    delay_ms(500);
09474:  MOVLW  02
09476:  MOVWF  xB4
09478:  MOVLW  FA
0947A:  MOVWF  xBD
0947C:  MOVLB  0
0947E:  CALL   0658
09482:  MOVLB  C
09484:  DECFSZ xB4,F
09486:  BRA    9478
....................    
....................    functointest_f = 0;
09488:  BCF    32.3
....................  
....................    while(TRUE)
....................    {
.................... 
....................       
....................       restart_wdt();
0948A:  CLRWDT
.................... 
....................       if(recieve_completed == 1)
0948C:  BTFSS  32.5
0948E:  BRA    949A
....................       {
....................          Modbus_Function();
09490:  MOVLB  0
09492:  GOTO   3068
....................          recieve_completed = 0;
09496:  BCF    32.5
09498:  MOVLB  C
....................       }
....................       
....................       check_ack();
0949A:  MOVLB  0
0949C:  CALL   2D30
....................       check_reset();
094A0:  CALL   2EA4
....................       check_test();   
094A4:  GOTO   5BFE
....................       
....................       Anal_Function(); 
094A8:  GOTO   64E8
....................       Send_Ouput(); 
094AC:  CALL   25F4
....................       Read_input(); restart_wdt();// Must be first
094B0:  CALL   1C72
094B4:  CLRWDT
....................       //Driver595(); restart_wdt();
....................       output_toggle(PIN_A0);
094B6:  BCF    F92.0
094B8:  BTG    F89.0
....................       
....................       if(send_SMS_period){
094BA:  MOVLB  C
094BC:  MOVF   x3E,F
094BE:  BZ    94CA
....................          send_SMS_period =0;
094C0:  CLRF   x3E
....................          sendsum_sms();
094C2:  MOVLB  0
094C4:  GOTO   8B50
094C8:  MOVLB  C
....................       }
....................       
....................       
....................       if(RefreshConfigData)
094CA:  BTFSS  32.4
094CC:  BRA    95B8
....................       {
....................          RefreshConfigData =0;
094CE:  BCF    32.4
....................          //Read_Config();
....................          //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................   
....................          IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
094D0:  CLRF   xB4
094D2:  SETF   xB5
094D4:  MOVLB  0
094D6:  CALL   0750
....................          IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
094DA:  MOVLB  C
094DC:  CLRF   xB4
094DE:  SETF   xB5
094E0:  MOVLB  0
094E2:  CALL   0762
....................          IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
094E6:  MOVLW  02
094E8:  MOVLB  C
094EA:  MOVWF  xB4
094EC:  SETF   xB5
094EE:  MOVLB  0
094F0:  CALL   0750
....................          IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input 
094F4:  MOVLW  02
094F6:  MOVLB  C
094F8:  MOVWF  xB4
094FA:  SETF   xB5
094FC:  MOVLB  0
094FE:  CALL   0762
....................          //  jj
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
09502:  MOVLB  C
09504:  CLRF   xBE
09506:  MOVLW  06
09508:  MOVWF  xBF
0950A:  SETF   xC0
0950C:  MOVLB  0
0950E:  CALL   0688
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
09512:  MOVLB  C
09514:  CLRF   xBE
09516:  MOVLW  16
09518:  MOVWF  xBF
0951A:  SETF   xC0
0951C:  MOVLB  0
0951E:  CALL   0688
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
09522:  MOVLW  02
09524:  MOVLB  C
09526:  MOVWF  xBE
09528:  MOVLW  06
0952A:  MOVWF  xBF
0952C:  SETF   xC0
0952E:  MOVLB  0
09530:  CALL   0688
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
09534:  MOVLW  02
09536:  MOVLB  C
09538:  MOVWF  xBE
0953A:  MOVLW  16
0953C:  MOVWF  xBF
0953E:  SETF   xC0
09540:  MOVLB  0
09542:  CALL   0688
....................          //  jj
....................          IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
09546:  MOVLW  04
09548:  MOVLB  C
0954A:  MOVWF  xB4
0954C:  CLRF   xB5
0954E:  MOVLB  0
09550:  CALL   0750
....................          IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
09554:  MOVLW  04
09556:  MOVLB  C
09558:  MOVWF  xB4
0955A:  CLRF   xB5
0955C:  MOVLB  0
0955E:  CALL   0762
....................          IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
09562:  MOVLW  06
09564:  MOVLB  C
09566:  MOVWF  xB4
09568:  CLRF   xB5
0956A:  MOVLB  0
0956C:  CALL   0750
....................          IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
09570:  MOVLW  06
09572:  MOVLB  C
09574:  MOVWF  xB4
09576:  CLRF   xB5
09578:  MOVLB  0
0957A:  CALL   0762
....................          IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
0957E:  MOVLW  08
09580:  MOVLB  C
09582:  MOVWF  xB4
09584:  CLRF   xB5
09586:  MOVLB  0
09588:  CALL   0750
....................          IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
0958C:  MOVLW  08
0958E:  MOVLB  C
09590:  MOVWF  xB4
09592:  CLRF   xB5
09594:  MOVLB  0
09596:  CALL   0762
....................          IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0959A:  MOVLW  0A
0959C:  MOVLB  C
0959E:  MOVWF  xB4
095A0:  CLRF   xB5
095A2:  MOVLB  0
095A4:  CALL   0750
....................          IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
095A8:  MOVLW  0A
095AA:  MOVLB  C
095AC:  MOVWF  xB4
095AE:  CLRF   xB5
095B0:  MOVLB  0
095B2:  CALL   0762
095B6:  MOVLB  C
....................          
....................         
....................       }
....................       
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
095B8:  CLRF   xBC
095BA:  SETF   xBD
095BC:  MOVLB  0
095BE:  CALL   25C8
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
095C2:  MOVLB  C
095C4:  CLRF   xBC
095C6:  SETF   xBD
095C8:  MOVLB  0
095CA:  CALL   25DE
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
095CE:  MOVLW  02
095D0:  MOVLB  C
095D2:  MOVWF  xBC
095D4:  SETF   xBD
095D6:  MOVLB  0
095D8:  CALL   25C8
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
095DC:  MOVLW  02
095DE:  MOVLB  C
095E0:  MOVWF  xBC
095E2:  SETF   xBD
095E4:  MOVLB  0
095E6:  CALL   25DE
095EA:  MOVLB  C
095EC:  BRA    948A
....................       
....................    }
....................    
.................... }
095EE:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
