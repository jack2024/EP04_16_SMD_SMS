CCS PCH C Compiler, Version 5.091, 5967               11-¡.Â.-21 22:30

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_16 - Delay - SP - SMD - SMS\ESPAN-04.lst

               ROM used:   38644 bytes (59%)
                           Largest free fragment is 26888
               RAM used:   3100 (80%) at main() level
                           3124 (80%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   8D08
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.1
00056:  GOTO   0060
0005A:  BTFSC  F9E.1
0005C:  GOTO   057A
00060:  BTFSS  F9D.5
00062:  GOTO   006C
00066:  BTFSC  F9E.5
00068:  GOTO   056A
0006C:  MOVFF  0E,00
00070:  MOVFF  0F,01
00074:  MOVFF  10,02
00078:  MOVFF  11,03
0007C:  MOVFF  0C,FE9
00080:  MOVFF  07,FEA
00084:  BSF    07.7
00086:  MOVFF  08,FE1
0008A:  MOVFF  09,FE2
0008E:  MOVFF  0A,FD9
00092:  MOVFF  0B,FDA
00096:  MOVFF  12,FF3
0009A:  MOVFF  13,FF4
0009E:  MOVFF  14,FFA
000A2:  MOVFF  15,FF5
000A6:  MOVFF  16,FF6
000AA:  MOVFF  17,FF7
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
000BA:  CLRF   FF7
000BC:  ADDLW  CA
000BE:  MOVWF  FF6
000C0:  MOVLW  00
000C2:  ADDWFC FF7,F
000C4:  TBLRD*+
000C6:  MOVF   FF5,W
000C8:  RETURN 0
000CA:  DATA 00,C1
000CC:  DATA 81,40
000CE:  DATA 01,C0
000D0:  DATA 80,41
000D2:  DATA 01,C0
000D4:  DATA 80,41
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 00,C1
000E0:  DATA 81,40
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 01,C0
000EC:  DATA 80,41
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 00,C1
000F4:  DATA 81,40
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 01,C0
00100:  DATA 80,41
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 00,C1
00110:  DATA 81,40
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 01,C0
00120:  DATA 80,41
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 00,C1
0012C:  DATA 81,40
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 01,C0
00134:  DATA 80,41
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 00,C1
00140:  DATA 81,40
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 01,C0
0014C:  DATA 80,41
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 00,C1
00154:  DATA 81,40
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 01,C0
00160:  DATA 80,41
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 00,C1
0016C:  DATA 81,40
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 01,C0
00174:  DATA 80,41
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 00,C1
00180:  DATA 81,40
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 01,C0
00190:  DATA 80,41
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 00,C1
001A0:  DATA 81,40
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 01,C0
001AC:  DATA 80,41
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 00,C1
001B4:  DATA 81,40
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 01,C0
001C0:  DATA 80,41
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  CLRF   FF7
001CC:  ADDLW  DA
001CE:  MOVWF  FF6
001D0:  MOVLW  01
001D2:  ADDWFC FF7,F
001D4:  TBLRD*+
001D6:  MOVF   FF5,W
001D8:  RETURN 0
001DA:  DATA 00,C0
001DC:  DATA C1,01
001DE:  DATA C3,03
001E0:  DATA 02,C2
001E2:  DATA C6,06
001E4:  DATA 07,C7
001E6:  DATA 05,C5
001E8:  DATA C4,04
001EA:  DATA CC,0C
001EC:  DATA 0D,CD
001EE:  DATA 0F,CF
001F0:  DATA CE,0E
001F2:  DATA 0A,CA
001F4:  DATA CB,0B
001F6:  DATA C9,09
001F8:  DATA 08,C8
001FA:  DATA D8,18
001FC:  DATA 19,D9
001FE:  DATA 1B,DB
00200:  DATA DA,1A
00202:  DATA 1E,DE
00204:  DATA DF,1F
00206:  DATA DD,1D
00208:  DATA 1C,DC
0020A:  DATA 14,D4
0020C:  DATA D5,15
0020E:  DATA D7,17
00210:  DATA 16,D6
00212:  DATA D2,12
00214:  DATA 13,D3
00216:  DATA 11,D1
00218:  DATA D0,10
0021A:  DATA F0,30
0021C:  DATA 31,F1
0021E:  DATA 33,F3
00220:  DATA F2,32
00222:  DATA 36,F6
00224:  DATA F7,37
00226:  DATA F5,35
00228:  DATA 34,F4
0022A:  DATA 3C,FC
0022C:  DATA FD,3D
0022E:  DATA FF,3F
00230:  DATA 3E,FE
00232:  DATA FA,3A
00234:  DATA 3B,FB
00236:  DATA 39,F9
00238:  DATA F8,38
0023A:  DATA 28,E8
0023C:  DATA E9,29
0023E:  DATA EB,2B
00240:  DATA 2A,EA
00242:  DATA EE,2E
00244:  DATA 2F,EF
00246:  DATA 2D,ED
00248:  DATA EC,2C
0024A:  DATA E4,24
0024C:  DATA 25,E5
0024E:  DATA 27,E7
00250:  DATA E6,26
00252:  DATA 22,E2
00254:  DATA E3,23
00256:  DATA E1,21
00258:  DATA 20,E0
0025A:  DATA A0,60
0025C:  DATA 61,A1
0025E:  DATA 63,A3
00260:  DATA A2,62
00262:  DATA 66,A6
00264:  DATA A7,67
00266:  DATA A5,65
00268:  DATA 64,A4
0026A:  DATA 6C,AC
0026C:  DATA AD,6D
0026E:  DATA AF,6F
00270:  DATA 6E,AE
00272:  DATA AA,6A
00274:  DATA 6B,AB
00276:  DATA 69,A9
00278:  DATA A8,68
0027A:  DATA 78,B8
0027C:  DATA B9,79
0027E:  DATA BB,7B
00280:  DATA 7A,BA
00282:  DATA BE,7E
00284:  DATA 7F,BF
00286:  DATA 7D,BD
00288:  DATA BC,7C
0028A:  DATA B4,74
0028C:  DATA 75,B5
0028E:  DATA 77,B7
00290:  DATA B6,76
00292:  DATA 72,B2
00294:  DATA B3,73
00296:  DATA B1,71
00298:  DATA 70,B0
0029A:  DATA 50,90
0029C:  DATA 91,51
0029E:  DATA 93,53
002A0:  DATA 52,92
002A2:  DATA 96,56
002A4:  DATA 57,97
002A6:  DATA 55,95
002A8:  DATA 94,54
002AA:  DATA 9C,5C
002AC:  DATA 5D,9D
002AE:  DATA 5F,9F
002B0:  DATA 9E,5E
002B2:  DATA 5A,9A
002B4:  DATA 9B,5B
002B6:  DATA 99,59
002B8:  DATA 58,98
002BA:  DATA 88,48
002BC:  DATA 49,89
002BE:  DATA 4B,8B
002C0:  DATA 8A,4A
002C2:  DATA 4E,8E
002C4:  DATA 8F,4F
002C6:  DATA 8D,4D
002C8:  DATA 4C,8C
002CA:  DATA 44,84
002CC:  DATA 85,45
002CE:  DATA 87,47
002D0:  DATA 46,86
002D2:  DATA 82,42
002D4:  DATA 43,83
002D6:  DATA 41,81
002D8:  DATA 80,40
*
0060C:  DATA 41,54
0060E:  DATA 2B,43
00610:  DATA 4D,47
00612:  DATA 46,3D
00614:  DATA 31,00
00616:  DATA 41,54
00618:  DATA 2B,43
0061A:  DATA 4D,47
0061C:  DATA 53,3D
0061E:  DATA 22,00
00620:  DATA 41,54
00622:  DATA 2B,43
00624:  DATA 4D,47
00626:  DATA 46,3D
00628:  DATA 31,00
0062A:  DATA 41,54
0062C:  DATA 2B,43
0062E:  DATA 4D,47
00630:  DATA 53,3D
00632:  DATA 22,00
00634:  DATA 41,54
00636:  DATA 2B,43
00638:  DATA 4D,47
0063A:  DATA 46,3D
0063C:  DATA 31,00
0063E:  DATA 41,54
00640:  DATA 2B,43
00642:  DATA 4D,47
00644:  DATA 53,3D
00646:  DATA 22,00
00648:  DATA 41,54
0064A:  DATA 2B,43
0064C:  DATA 4D,47
0064E:  DATA 46,3D
00650:  DATA 31,00
00652:  DATA 41,54
00654:  DATA 2B,43
00656:  DATA 4D,47
00658:  DATA 53,3D
0065A:  DATA 22,00
0065C:  DATA 41,54
0065E:  DATA 2B,43
00660:  DATA 4D,47
00662:  DATA 46,3D
00664:  DATA 31,00
00666:  DATA 41,54
00668:  DATA 2B,43
0066A:  DATA 4D,47
0066C:  DATA 53,3D
0066E:  DATA 22,00
00670:  DATA 41,54
00672:  DATA 2B,43
00674:  DATA 4D,47
00676:  DATA 46,3D
00678:  DATA 31,00
0067A:  DATA 41,54
0067C:  DATA 2B,43
0067E:  DATA 4D,47
00680:  DATA 53,3D
00682:  DATA 22,00
00684:  DATA 41,54
00686:  DATA 2B,43
00688:  DATA 4D,47
0068A:  DATA 46,3D
0068C:  DATA 31,00
0068E:  DATA 41,54
00690:  DATA 2B,43
00692:  DATA 4D,47
00694:  DATA 53,3D
00696:  DATA 22,00
00698:  DATA 41,54
0069A:  DATA 2B,43
0069C:  DATA 4D,47
0069E:  DATA 46,3D
006A0:  DATA 31,00
006A2:  DATA 41,54
006A4:  DATA 2B,43
006A6:  DATA 4D,47
006A8:  DATA 53,3D
006AA:  DATA 22,00
*
01CDE:  MOVLB  C
01CE0:  MOVF   x2B,W
01CE2:  ANDLW  07
01CE4:  MOVWF  00
01CE6:  RRCF   x2B,W
01CE8:  MOVWF  01
01CEA:  RRCF   01,F
01CEC:  RRCF   01,F
01CEE:  MOVLW  1F
01CF0:  ANDWF  01,F
01CF2:  MOVF   01,W
01CF4:  ADDWF  x2C,W
01CF6:  MOVWF  FE9
01CF8:  MOVLW  00
01CFA:  ADDWFC x2D,W
01CFC:  MOVWF  FEA
01CFE:  MOVFF  FEF,01
01D02:  INCF   00,F
01D04:  BRA    1D08
01D06:  RRCF   01,F
01D08:  DECFSZ 00,F
01D0A:  BRA    1D06
01D0C:  MOVLW  01
01D0E:  ANDWF  01,F
01D10:  MOVLB  0
01D12:  RETURN 0
01D14:  MOVLB  C
01D16:  MOVF   x2C,W
01D18:  MULWF  x2E
01D1A:  MOVFF  FF3,01
01D1E:  MOVFF  FF4,00
01D22:  MULWF  x2F
01D24:  MOVF   FF3,W
01D26:  ADDWF  00,F
01D28:  MOVF   x2D,W
01D2A:  MULWF  x2E
01D2C:  MOVF   FF3,W
01D2E:  ADDWFC 00,W
01D30:  MOVWF  02
01D32:  MOVLB  0
01D34:  RETURN 0
01D36:  MOVLB  C
01D38:  MOVF   x2B,W
01D3A:  ANDLW  07
01D3C:  MOVWF  00
01D3E:  RRCF   x2B,W
01D40:  MOVWF  01
01D42:  RRCF   01,F
01D44:  RRCF   01,F
01D46:  MOVLW  1F
01D48:  ANDWF  01,F
01D4A:  MOVF   01,W
01D4C:  ADDWF  x2D,W
01D4E:  MOVWF  FE9
01D50:  MOVLW  00
01D52:  ADDWFC x2E,W
01D54:  MOVWF  FEA
01D56:  CLRF   01
01D58:  INCF   01,F
01D5A:  INCF   00,F
01D5C:  BRA    1D60
01D5E:  RLCF   01,F
01D60:  DECFSZ 00,F
01D62:  BRA    1D5E
01D64:  MOVF   x2C,F
01D66:  BZ    1D6E
01D68:  MOVF   01,W
01D6A:  IORWF  FEF,F
01D6C:  BRA    1D74
01D6E:  COMF   01,F
01D70:  MOVF   01,W
01D72:  ANDWF  FEF,F
01D74:  MOVLB  0
01D76:  RETURN 0
*
02726:  ADDWF  FE8,W
02728:  CLRF   FF7
0272A:  RLCF   FF7,F
0272C:  ADDLW  41
0272E:  MOVWF  FF6
02730:  MOVLW  27
02732:  ADDWFC FF7,F
02734:  TBLRD*-
02736:  MOVF   FF5,W
02738:  MOVWF  FFA
0273A:  TBLRD*
0273C:  MOVF   FF5,W
0273E:  MOVWF  FF9
02740:  DATA 58,20
02742:  DATA 60,20
02744:  DATA 68,20
02746:  DATA 70,20
02748:  DATA 78,20
0274A:  DATA 80,20
0274C:  DATA 88,20
0274E:  DATA 90,20
02750:  DATA 98,20
02752:  DATA A0,20
02754:  DATA A8,20
02756:  DATA B0,20
02758:  DATA B8,20
0275A:  DATA C0,20
0275C:  DATA C8,20
0275E:  DATA D0,20
02760:  ADDWF  FE8,W
02762:  CLRF   FF7
02764:  RLCF   FF7,F
02766:  ADDLW  7B
02768:  MOVWF  FF6
0276A:  MOVLW  27
0276C:  ADDWFC FF7,F
0276E:  TBLRD*-
02770:  MOVF   FF5,W
02772:  MOVWF  FFA
02774:  TBLRD*
02776:  MOVF   FF5,W
02778:  MOVWF  FF9
0277A:  DATA B8,21
0277C:  DATA C0,21
0277E:  DATA C8,21
02780:  DATA D0,21
02782:  DATA D8,21
02784:  DATA E0,21
02786:  DATA E8,21
02788:  DATA F0,21
0278A:  DATA F8,21
0278C:  DATA 00,22
0278E:  DATA 08,22
02790:  DATA 10,22
02792:  DATA 18,22
02794:  DATA 20,22
02796:  DATA 28,22
02798:  DATA 30,22
0279A:  ADDWF  FE8,W
0279C:  CLRF   FF7
0279E:  RLCF   FF7,F
027A0:  ADDLW  B5
027A2:  MOVWF  FF6
027A4:  MOVLW  27
027A6:  ADDWFC FF7,F
027A8:  TBLRD*-
027AA:  MOVF   FF5,W
027AC:  MOVWF  FFA
027AE:  TBLRD*
027B0:  MOVF   FF5,W
027B2:  MOVWF  FF9
027B4:  DATA 4C,23
027B6:  DATA 54,23
027B8:  DATA 5C,23
027BA:  DATA 64,23
027BC:  DATA 6C,23
027BE:  DATA 74,23
027C0:  DATA 7C,23
027C2:  DATA 84,23
027C4:  DATA 8C,23
027C6:  DATA 94,23
027C8:  DATA 9C,23
027CA:  DATA A4,23
027CC:  DATA AC,23
027CE:  DATA B4,23
027D0:  DATA BC,23
027D2:  DATA C4,23
027D4:  ADDWF  FE8,W
027D6:  CLRF   FF7
027D8:  RLCF   FF7,F
027DA:  ADDLW  EF
027DC:  MOVWF  FF6
027DE:  MOVLW  27
027E0:  ADDWFC FF7,F
027E2:  TBLRD*-
027E4:  MOVF   FF5,W
027E6:  MOVWF  FFA
027E8:  TBLRD*
027EA:  MOVF   FF5,W
027EC:  MOVWF  FF9
027EE:  DATA AA,24
027F0:  DATA B2,24
027F2:  DATA BA,24
027F4:  DATA C2,24
027F6:  DATA CA,24
027F8:  DATA D2,24
027FA:  DATA DA,24
027FC:  DATA E2,24
027FE:  DATA EA,24
02800:  DATA F2,24
02802:  DATA FA,24
02804:  DATA 02,25
02806:  DATA 0A,25
02808:  DATA 12,25
0280A:  DATA 1A,25
0280C:  DATA 22,25
*
05F7C:  TBLRD*+
05F7E:  MOVF   FF5,F
05F80:  BZ    5F9A
05F82:  MOVFF  FF6,C22
05F86:  MOVFF  FF7,C23
05F8A:  MOVFF  FF5,C24
05F8E:  RCALL  5F36
05F90:  MOVFF  C22,FF6
05F94:  MOVFF  C23,FF7
05F98:  BRA    5F7C
05F9A:  RETURN 0
05F9C:  MOVF   FEF,F
05F9E:  BZ    5FBE
05FA0:  MOVFF  FEA,C23
05FA4:  MOVFF  FE9,C22
05FA8:  MOVFF  FEF,C24
05FAC:  RCALL  5F36
05FAE:  MOVFF  C23,FEA
05FB2:  MOVFF  C22,FE9
05FB6:  INCF   FE9,F
05FB8:  BTFSC  FD8.2
05FBA:  INCF   FEA,F
05FBC:  BRA    5F9C
05FBE:  RETURN 0
*
09684:  ADDWF  FE8,W
09686:  CLRF   FF7
09688:  RLCF   FF7,F
0968A:  ADDLW  9F
0968C:  MOVWF  FF6
0968E:  MOVLW  96
09690:  ADDWFC FF7,F
09692:  TBLRD*-
09694:  MOVF   FF5,W
09696:  MOVWF  FFA
09698:  TBLRD*
0969A:  MOVF   FF5,W
0969C:  MOVWF  FF9
0969E:  DATA 08,94
096A0:  DATA 10,94
096A2:  DATA 18,94
096A4:  DATA 20,94
096A6:  DATA 28,94
096A8:  DATA 30,94
096AA:  DATA 38,94
096AC:  DATA 40,94
096AE:  DATA 48,94
096B0:  DATA 50,94
096B2:  DATA 58,94
096B4:  DATA 60,94
096B6:  DATA 68,94
096B8:  DATA 70,94
096BA:  DATA 78,94
096BC:  DATA 80,94
096BE:  ADDWF  FE8,W
096C0:  CLRF   FF7
096C2:  RLCF   FF7,F
096C4:  ADDLW  D9
096C6:  MOVWF  FF6
096C8:  MOVLW  96
096CA:  ADDWFC FF7,F
096CC:  TBLRD*-
096CE:  MOVF   FF5,W
096D0:  MOVWF  FFA
096D2:  TBLRD*
096D4:  MOVF   FF5,W
096D6:  MOVWF  FF9
096D8:  DATA A0,94
096DA:  DATA A8,94
096DC:  DATA B0,94
096DE:  DATA B8,94
096E0:  DATA C0,94
096E2:  DATA C8,94
096E4:  DATA D0,94
096E6:  DATA D8,94
096E8:  DATA E0,94
096EA:  DATA E8,94
096EC:  DATA F0,94
096EE:  DATA F8,94
096F0:  DATA 00,95
096F2:  DATA 08,95
096F4:  DATA 10,95
096F6:  DATA 18,95
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#device icd = true
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
006AC:  MOVLW  0C
006AE:  MOVWF  FEA
006B0:  MOVLW  23
006B2:  MOVWF  FE9
006B4:  MOVF   FEF,W
006B6:  BZ    06DA
006B8:  MOVLW  05
006BA:  MOVWF  01
006BC:  MOVLW  BF
006BE:  MOVWF  00
006C0:  CLRWDT
006C2:  DECFSZ 00,F
006C4:  BRA    06C0
006C6:  DECFSZ 01,F
006C8:  BRA    06BC
006CA:  MOVLW  2E
006CC:  MOVWF  00
006CE:  DECFSZ 00,F
006D0:  BRA    06CE
006D2:  NOP   
006D4:  CLRWDT
006D6:  DECFSZ FEF,F
006D8:  BRA    06B8
006DA:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR    0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP     0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW    0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL    0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
0070E:  BCF    F92.5
00710:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
00712:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
00714:  MOVLB  C
00716:  CLRF   x24
00718:  MOVLW  0A
0071A:  MOVWF  x25
0071C:  MOVLW  AA
0071E:  MOVWF  x26
00720:  MOVLB  0
00722:  RCALL  06DC
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
00724:  MOVLW  02
00726:  MOVLB  C
00728:  MOVWF  x24
0072A:  MOVLW  0A
0072C:  MOVWF  x25
0072E:  MOVLW  AA
00730:  MOVWF  x26
00732:  MOVLB  0
00734:  RCALL  06DC
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
00736:  MOVLW  04
00738:  MOVLB  C
0073A:  MOVWF  x24
0073C:  MOVLW  0A
0073E:  MOVWF  x25
00740:  MOVLW  AA
00742:  MOVWF  x26
00744:  MOVLB  0
00746:  RCALL  06DC
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
00748:  MOVLW  06
0074A:  MOVLB  C
0074C:  MOVWF  x24
0074E:  MOVLW  0A
00750:  MOVWF  x25
00752:  MOVLW  AA
00754:  MOVWF  x26
00756:  MOVLB  0
00758:  RCALL  06DC
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
0075A:  MOVLW  08
0075C:  MOVLB  C
0075E:  MOVWF  x24
00760:  MOVLW  0A
00762:  MOVWF  x25
00764:  MOVLW  AA
00766:  MOVWF  x26
00768:  MOVLB  0
0076A:  RCALL  06DC
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
0076C:  MOVLW  0A
0076E:  MOVLB  C
00770:  MOVWF  x24
00772:  MOVWF  x25
00774:  MOVLW  AA
00776:  MOVWF  x26
00778:  MOVLB  0
0077A:  RCALL  06DC
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
0077C:  MOVLW  0C
0077E:  MOVLB  C
00780:  MOVWF  x24
00782:  MOVLW  0A
00784:  MOVWF  x25
00786:  MOVLW  AA
00788:  MOVWF  x26
0078A:  MOVLB  0
0078C:  RCALL  06DC
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
0078E:  MOVLW  0E
00790:  MOVLB  C
00792:  MOVWF  x24
00794:  MOVLW  0A
00796:  MOVWF  x25
00798:  MOVLW  AA
0079A:  MOVWF  x26
0079C:  MOVLB  0
0079E:  RCALL  06DC
....................    #endif
007A0:  GOTO   8DEC (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
006DC:  BCF    F92.5
006DE:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
006E0:  MOVLB  C
006E2:  MOVF   x24,W
006E4:  IORLW  40
006E6:  MOVWF  x27
006E8:  MOVF   FC9,W
006EA:  MOVFF  C27,FC9
006EE:  RRCF   FC7,W
006F0:  BNC   06EE
....................    #endif
....................    
....................    spi_write(reg);
006F2:  MOVF   FC9,W
006F4:  MOVFF  C25,FC9
006F8:  RRCF   FC7,W
006FA:  BNC   06F8
....................    spi_write(data);
006FC:  MOVF   FC9,W
006FE:  MOVFF  C26,FC9
00702:  RRCF   FC7,W
00704:  BNC   0702
....................    
....................    output_high(IO_CS_PIN);
00706:  BCF    F92.5
00708:  BSF    F89.5
0070A:  MOVLB  0
0070C:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
01C6E:  BCF    F92.5
01C70:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
01C72:  MOVLB  C
01C74:  MOVF   x2A,W
01C76:  IORLW  41
01C78:  MOVWF  x2D
01C7A:  MOVF   FC9,W
01C7C:  MOVFF  C2D,FC9
01C80:  RRCF   FC7,W
01C82:  BNC   1C80
....................    #endif
....................    
....................    spi_write(reg);
01C84:  MOVF   FC9,W
01C86:  MOVFF  C2B,FC9
01C8A:  RRCF   FC7,W
01C8C:  BNC   1C8A
....................    retVal = spi_read(0);
01C8E:  MOVF   FC9,W
01C90:  CLRF   FC9
01C92:  RRCF   FC7,W
01C94:  BNC   1C92
01C96:  MOVFF  FC9,C2C
....................    
....................    output_high(IO_CS_PIN);
01C9A:  BCF    F92.5
01C9C:  BSF    F89.5
....................    
....................    return retVal;
01C9E:  MOVFF  C2C,01
01CA2:  MOVLB  0
01CA4:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
0280E:  MOVFF  C22,C24
02812:  MOVLW  0A
02814:  MOVLB  C
02816:  MOVWF  x25
02818:  MOVFF  C23,C26
0281C:  MOVLB  0
0281E:  CALL   06DC
....................    #endif
02822:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
02824:  MOVFF  C22,C24
02828:  MOVLW  1A
0282A:  MOVLB  C
0282C:  MOVWF  x25
0282E:  MOVFF  C23,C26
02832:  MOVLB  0
02834:  CALL   06DC
....................    #endif
02838:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
01CA6:  MOVFF  C28,C2A
01CAA:  MOVLW  09
01CAC:  MOVLB  C
01CAE:  MOVWF  x2B
01CB0:  MOVLB  0
01CB2:  RCALL  1C6E
01CB4:  MOVFF  01,C29
....................    #endif
....................    
....................    return retVal;
01CB8:  MOVLB  C
01CBA:  MOVFF  C29,01
01CBE:  MOVLB  0
01CC0:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
01CC2:  MOVFF  C28,C2A
01CC6:  MOVLW  19
01CC8:  MOVLB  C
01CCA:  MOVWF  x2B
01CCC:  MOVLB  0
01CCE:  RCALL  1C6E
01CD0:  MOVFF  01,C29
....................    #endif
....................    
....................    return retVal;
01CD4:  MOVLB  C
01CD6:  MOVFF  C29,01
01CDA:  MOVLB  0
01CDC:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
007A4:  MOVFF  C1A,C24
007A8:  MOVLB  C
007AA:  CLRF   x25
007AC:  MOVFF  C1B,C26
007B0:  MOVLB  0
007B2:  RCALL  06DC
....................    #endif
007B4:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
007B6:  MOVFF  C1A,C24
007BA:  MOVLW  10
007BC:  MOVLB  C
007BE:  MOVWF  x25
007C0:  MOVFF  C1B,C26
007C4:  MOVLB  0
007C6:  RCALL  06DC
....................    #endif
007C8:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... 
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... 
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... 
.................... ///#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
02C3A:  BTFSS  F9E.4
02C3C:  BRA    2C3A
02C3E:  MOVWF  FAD
02C40:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... 
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_B1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
*
05F36:  BCF    F93.0
05F38:  BCF    F8A.0
05F3A:  MOVLW  08
05F3C:  MOVWF  01
05F3E:  BRA    5F40
05F40:  NOP   
05F42:  BSF    01.7
05F44:  BRA    5F66
05F46:  BCF    01.7
05F48:  MOVLB  C
05F4A:  RRCF   x24,F
05F4C:  MOVLB  0
05F4E:  BTFSC  FD8.0
05F50:  BSF    F8A.0
05F52:  BTFSS  FD8.0
05F54:  BCF    F8A.0
05F56:  BSF    01.6
05F58:  BRA    5F66
05F5A:  BCF    01.6
05F5C:  DECFSZ 01,F
05F5E:  BRA    5F48
05F60:  BRA    5F62
05F62:  NOP   
05F64:  BSF    F8A.0
05F66:  MOVLW  84
05F68:  MOVWF  FE9
05F6A:  DECFSZ FE9,F
05F6C:  BRA    5F6A
05F6E:  BRA    5F70
05F70:  NOP   
05F72:  BTFSC  01.7
05F74:  BRA    5F46
05F76:  BTFSC  01.6
05F78:  BRA    5F5A
05F7A:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... /*
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_C1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
.................... */
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... //int8 Input1_8;
.................... //int8 Input9_16;
.................... 
.................... volatile int1 functointest_f = 0;
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... int8 Output595[4];
.................... 
.................... int8 tempdata;
.................... //int8 EEP_Config = 0x00;   //
.................... //int8 NUMBER_OF_595 ;
.................... 
.................... int8 EEpDat;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_16;
.................... 
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Red1_7;
.................... int8 Red8_8;
.................... int8 Red9_15;
.................... int8 Red16_16;
.................... 
.................... int8 Green1_7;
.................... int8 Green8_8;
.................... int8 Green9_15;
.................... int8 Green16_16;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_16;
.................... 
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... 
.................... int8 Green1_8 ;
.................... int8 Green9_16 ;
.................... 
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_16 ;
.................... 
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... 
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_16 ;
.................... 
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... 
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... int8 MasterSlaveSync;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... 
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////
.................... unsigned char const addr_sq = 0x10,end_sq = 0x11,code_sq = 0x12,start_addr_hi_sq = 0x13,start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15, ubyte_lo_sq = 0x16, crc_hi_sq = 0x17,second_numofdata = 0x18, byte_count_sq = 0x19, data_sq = 0x20;      //serial sequnce
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned char RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[255];
.................... unsigned char RxD_Buff[1024];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[1024];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;   //use for calculate RxD timeout
.................... int16 index = 0x00;         //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... volatile int16 MCP23_ReadError =0;
.................... 
.................... unsigned char sms_phonenumber[15];
.................... 
.................... //unsigned char SMS_Massage[20][20];
.................... 
.................... unsigned char SMS_Massage1[32];
.................... unsigned char SMS_Massage2[32];
.................... unsigned char SMS_Massage3[32];
.................... unsigned char SMS_Massage4[32];
.................... unsigned char SMS_Massage5[32];
.................... unsigned char SMS_Massage6[32];
.................... unsigned char SMS_Massage7[32];
.................... unsigned char SMS_Massage8[32];
.................... unsigned char SMS_Massage9[32];
.................... unsigned char SMS_Massage10[32];
.................... unsigned char SMS_Massage11[32];
.................... unsigned char SMS_Massage12[32];
.................... unsigned char SMS_Massage13[32];
.................... unsigned char SMS_Massage14[32];
.................... unsigned char SMS_Massage15[32];
.................... unsigned char SMS_Massage16[32];
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... } ; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Input
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8,B9,B10;
....................    int1 B11,B12,B13,B14,B15,B16;
....................    //int1 B21,B22,B23,B24,B25,B26,B27,B28,B29,B30;
....................    //int1 B31,B32,B33,B34,B35,B36,B37,B38,B39,B40;
....................    //int1 B41,B42,B43,B44,B45,B46,B47,B48,B49,B50;
....................    //int1 B51,B52,B53,B54,B55,B56,B57,B58,B59,B60;
....................    //int1 B61,B62,B63,B64;
.................... };
.................... 
.................... 
....................    //Output   (LED Lit = "0")
....................    //Input Type NO/NC (NO = "1" , NC = "0")
....................    //Fault Type Manual/Auto (Manual = "1" , Auto = "0")
....................    //Output Type Buz/Bell (Buzzer = "1" , Bell = "0")
....................    //Output Both (Normal = "1" , Both = "0")
....................    //Acknowledge flag (Acked = "1" , non Ack = "0")
.................... 
.................... //struct Bit64 Input,Output,InputType,FaultType,OutputType,OutputBoth;
.................... struct Bit64 Inputt;
.................... struct Bit64 Output;
.................... struct Bit64 InputType;
.................... struct Bit64 FaultType;
.................... struct Bit64 OutputType;
.................... struct Bit64 OutputBoth;
.................... 
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 LED_Colour,AckSend,RED_Colour,GREEN_Colour;
.................... 
.................... struct Bit64 SendSMS;
.................... 
.................... int1 FaultAgo[21];
.................... int1 FaultNow[21];
.................... int16 ReleaseTime[21];
.................... int16 FaultDelayTime[21];
.................... 
.................... int1 FaultNCNO[21];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //volatile int8 ReadIn_Count =0;
.................... //int1 ReadIn_flag = 0;
.................... 
.................... 
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void StoreReleaseFault()
*
01D78:  MOVLB  C
01D7A:  CLRF   x28
.................... {
....................    Signed int8 i=0;
....................    for(i=1;i<=16;i++)
01D7C:  MOVLW  01
01D7E:  MOVWF  x28
01D80:  BTFSC  x28.7
01D82:  BRA    1D8A
01D84:  MOVF   x28,W
01D86:  SUBLW  10
01D88:  BNC   1DD0
....................    {
....................       FaultAgo[i] = FaultNow[i];
01D8A:  CLRF   03
01D8C:  MOVF   x28,W
01D8E:  MOVWF  00
01D90:  BTFSC  FE8.7
01D92:  DECF   03,F
01D94:  MOVWF  x29
01D96:  MOVFF  03,C2A
01D9A:  CLRF   03
01D9C:  MOVF   x28,W
01D9E:  MOVWF  00
01DA0:  BTFSC  FE8.7
01DA2:  DECF   03,F
01DA4:  MOVWF  x2B
01DA6:  MOVLW  0B
01DA8:  MOVWF  x2D
01DAA:  MOVLW  BB
01DAC:  MOVWF  x2C
01DAE:  MOVLB  0
01DB0:  RCALL  1CDE
01DB2:  MOVFF  C29,C2B
01DB6:  MOVLB  C
01DB8:  CLRF   x2C
01DBA:  BTFSC  01.0
01DBC:  INCF   x2C,F
01DBE:  MOVLW  0B
01DC0:  MOVWF  x2E
01DC2:  MOVLW  B8
01DC4:  MOVWF  x2D
01DC6:  MOVLB  0
01DC8:  RCALL  1D36
01DCA:  MOVLB  C
01DCC:  INCF   x28,F
01DCE:  BRA    1D80
....................    }
01DD0:  MOVLB  0
01DD2:  GOTO   2554 (RETURN)
.................... }
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
02BE4:  MOVLB  5
02BE6:  SETF   x7B
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
02BE8:  SETF   x7A
.................... 
....................    for(i = 0;i < usDataLen;i++)
02BEA:  MOVLB  C
02BEC:  CLRF   x28
02BEE:  MOVF   x26,W
02BF0:  SUBWF  x28,W
02BF2:  BC    2C36
....................    {
....................       restart_wdt();
02BF4:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
02BF6:  MOVF   x28,W
02BF8:  ADDWF  x24,W
02BFA:  MOVWF  FE9
02BFC:  MOVLW  00
02BFE:  ADDWFC x25,W
02C00:  MOVWF  FEA
02C02:  MOVF   FEF,W
02C04:  MOVLB  5
02C06:  XORWF  x7B,W
02C08:  MOVLB  C
02C0A:  MOVWF  x27
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
02C0C:  CLRF   03
02C0E:  MOVF   x27,W
02C10:  MOVLB  0
02C12:  CALL   00BA
02C16:  MOVWF  01
02C18:  MOVLB  5
02C1A:  MOVF   x7A,W
02C1C:  XORWF  01,W
02C1E:  MOVWF  x7B
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
02C20:  CLRF   03
02C22:  MOVLB  C
02C24:  MOVF   x27,W
02C26:  MOVLB  0
02C28:  CALL   01CA
02C2C:  MOVFF  FE8,57A
02C30:  MOVLB  C
02C32:  INCF   x28,F
02C34:  BRA    2BEE
....................    }
02C36:  MOVLB  0
02C38:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... /*
.................... void Driver595()
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
....................     
....................     data_out = (~Input19_20);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input11_18);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input9_10);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input1_8);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................  
....................    output_high(EXP_OUT_ENABLE);
....................    delay_us(1);
....................    output_low(EXP_OUT_ENABLE);
.................... }
.................... */
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
02C42:  CLRF   1E
....................    Input9_16_Send = 0x00;
02C44:  CLRF   1F
....................    
....................    
....................    Ack1_8_Send = 0x00;
02C46:  CLRF   26
....................    Ack9_16_Send = 0x00;
02C48:  CLRF   27
.................... 
....................    
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
02C4A:  MOVLB  B
02C4C:  BTFSC  xAA.0
02C4E:  BRA    2C58
02C50:  BTFSC  x9C.0
02C52:  BRA    2C58
....................       AckSend.B1 = 1;
02C54:  BSF    xB0.0
02C56:  BRA    2C5A
....................    else
....................       AckSend.B1 = 0;
02C58:  BCF    xB0.0
....................    if((In.B2 == 0) && (Output.B2 ==0))
02C5A:  BTFSC  xAA.1
02C5C:  BRA    2C66
02C5E:  BTFSC  x9C.1
02C60:  BRA    2C66
....................       AckSend.B2 = 1;
02C62:  BSF    xB0.1
02C64:  BRA    2C68
....................    else
....................       AckSend.B2 = 0;
02C66:  BCF    xB0.1
....................    if((In.B3 == 0) && (Output.B3 ==0))
02C68:  BTFSC  xAA.2
02C6A:  BRA    2C74
02C6C:  BTFSC  x9C.2
02C6E:  BRA    2C74
....................       AckSend.B3 = 1;
02C70:  BSF    xB0.2
02C72:  BRA    2C76
....................    else
....................       AckSend.B3 = 0;
02C74:  BCF    xB0.2
....................    if((In.B4 == 0) && (Output.B4 ==0))
02C76:  BTFSC  xAA.3
02C78:  BRA    2C82
02C7A:  BTFSC  x9C.3
02C7C:  BRA    2C82
....................       AckSend.B4 = 1;
02C7E:  BSF    xB0.3
02C80:  BRA    2C84
....................    else
....................       AckSend.B4 = 0;
02C82:  BCF    xB0.3
....................    if((In.B5 == 0) && (Output.B5 ==0))
02C84:  BTFSC  xAA.4
02C86:  BRA    2C90
02C88:  BTFSC  x9C.4
02C8A:  BRA    2C90
....................       AckSend.B5 = 1;
02C8C:  BSF    xB0.4
02C8E:  BRA    2C92
....................    else
....................       AckSend.B5 = 0;
02C90:  BCF    xB0.4
....................    if((In.B6 == 0) && (Output.B6 ==0))
02C92:  BTFSC  xAA.5
02C94:  BRA    2C9E
02C96:  BTFSC  x9C.5
02C98:  BRA    2C9E
....................       AckSend.B6 = 1;
02C9A:  BSF    xB0.5
02C9C:  BRA    2CA0
....................    else
....................       AckSend.B6 = 0;
02C9E:  BCF    xB0.5
....................    if((In.B7 == 0) && (Output.B7 ==0))
02CA0:  BTFSC  xAA.6
02CA2:  BRA    2CAC
02CA4:  BTFSC  x9C.6
02CA6:  BRA    2CAC
....................       AckSend.B7 = 1;
02CA8:  BSF    xB0.6
02CAA:  BRA    2CAE
....................    else
....................       AckSend.B7 = 0;
02CAC:  BCF    xB0.6
....................    if((In.B8 == 0) && (Output.B8 ==0))
02CAE:  BTFSC  xAA.7
02CB0:  BRA    2CBA
02CB2:  BTFSC  x9C.7
02CB4:  BRA    2CBA
....................       AckSend.B8 = 1;
02CB6:  BSF    xB0.7
02CB8:  BRA    2CBC
....................    else
....................       AckSend.B8 = 0;
02CBA:  BCF    xB0.7
....................    if((In.B9 == 0) && (Output.B9 ==0))
02CBC:  BTFSC  xAB.0
02CBE:  BRA    2CC8
02CC0:  BTFSC  x9D.0
02CC2:  BRA    2CC8
....................       AckSend.B9 = 1;
02CC4:  BSF    xB1.0
02CC6:  BRA    2CCA
....................    else
....................       AckSend.B9 = 0;
02CC8:  BCF    xB1.0
....................    if((In.B10 == 0) && (Output.B10 ==0))
02CCA:  BTFSC  xAB.1
02CCC:  BRA    2CD6
02CCE:  BTFSC  x9D.1
02CD0:  BRA    2CD6
....................       AckSend.B10 = 1;
02CD2:  BSF    xB1.1
02CD4:  BRA    2CD8
....................    else
....................       AckSend.B10 = 0;
02CD6:  BCF    xB1.1
....................    if((In.B11 == 0) && (Output.B11 ==0))
02CD8:  BTFSC  xAB.2
02CDA:  BRA    2CE4
02CDC:  BTFSC  x9D.2
02CDE:  BRA    2CE4
....................       AckSend.B11 = 1;
02CE0:  BSF    xB1.2
02CE2:  BRA    2CE6
....................    else
....................       AckSend.B11 = 0;
02CE4:  BCF    xB1.2
....................    if((In.B12 == 0) && (Output.B12 ==0))
02CE6:  BTFSC  xAB.3
02CE8:  BRA    2CF2
02CEA:  BTFSC  x9D.3
02CEC:  BRA    2CF2
....................       AckSend.B12 = 1;
02CEE:  BSF    xB1.3
02CF0:  BRA    2CF4
....................    else
....................       AckSend.B12 = 0;
02CF2:  BCF    xB1.3
....................    if((In.B13 == 0) && (Output.B13 ==0))
02CF4:  BTFSC  xAB.4
02CF6:  BRA    2D00
02CF8:  BTFSC  x9D.4
02CFA:  BRA    2D00
....................       AckSend.B13 = 1;
02CFC:  BSF    xB1.4
02CFE:  BRA    2D02
....................    else
....................       AckSend.B13 = 0;
02D00:  BCF    xB1.4
....................    if((In.B14 == 0) && (Output.B14 ==0))
02D02:  BTFSC  xAB.5
02D04:  BRA    2D0E
02D06:  BTFSC  x9D.5
02D08:  BRA    2D0E
....................       AckSend.B14 = 1;
02D0A:  BSF    xB1.5
02D0C:  BRA    2D10
....................    else
....................       AckSend.B14 = 0;
02D0E:  BCF    xB1.5
....................    if((In.B15 == 0) && (Output.B15 ==0))
02D10:  BTFSC  xAB.6
02D12:  BRA    2D1C
02D14:  BTFSC  x9D.6
02D16:  BRA    2D1C
....................       AckSend.B15 = 1;
02D18:  BSF    xB1.6
02D1A:  BRA    2D1E
....................    else
....................       AckSend.B15 = 0;
02D1C:  BCF    xB1.6
....................    if((In.B16 == 0) && (Output.B16 ==0))
02D1E:  BTFSC  xAB.7
02D20:  BRA    2D2A
02D22:  BTFSC  x9D.7
02D24:  BRA    2D2A
....................       AckSend.B16 = 1;
02D26:  BSF    xB1.7
02D28:  BRA    2D2C
....................    else
....................       AckSend.B16 = 0;
02D2A:  BCF    xB1.7
.................... 
....................       
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
02D2C:  MOVLW  00
02D2E:  BTFSC  xB0.7
02D30:  MOVLW  01
02D32:  IORWF  26,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
02D34:  BCF    FD8.0
02D36:  RLCF   26,W
02D38:  MOVLB  C
02D3A:  MOVWF  x24
02D3C:  MOVLW  00
02D3E:  MOVLB  B
02D40:  BTFSC  xB0.6
02D42:  MOVLW  01
02D44:  MOVLB  C
02D46:  IORWF  x24,W
02D48:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
02D4A:  BCF    FD8.0
02D4C:  RLCF   26,W
02D4E:  MOVWF  x24
02D50:  MOVLW  00
02D52:  MOVLB  B
02D54:  BTFSC  xB0.5
02D56:  MOVLW  01
02D58:  MOVLB  C
02D5A:  IORWF  x24,W
02D5C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
02D5E:  BCF    FD8.0
02D60:  RLCF   26,W
02D62:  MOVWF  x24
02D64:  MOVLW  00
02D66:  MOVLB  B
02D68:  BTFSC  xB0.4
02D6A:  MOVLW  01
02D6C:  MOVLB  C
02D6E:  IORWF  x24,W
02D70:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
02D72:  BCF    FD8.0
02D74:  RLCF   26,W
02D76:  MOVWF  x24
02D78:  MOVLW  00
02D7A:  MOVLB  B
02D7C:  BTFSC  xB0.3
02D7E:  MOVLW  01
02D80:  MOVLB  C
02D82:  IORWF  x24,W
02D84:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
02D86:  BCF    FD8.0
02D88:  RLCF   26,W
02D8A:  MOVWF  x24
02D8C:  MOVLW  00
02D8E:  MOVLB  B
02D90:  BTFSC  xB0.2
02D92:  MOVLW  01
02D94:  MOVLB  C
02D96:  IORWF  x24,W
02D98:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
02D9A:  BCF    FD8.0
02D9C:  RLCF   26,W
02D9E:  MOVWF  x24
02DA0:  MOVLW  00
02DA2:  MOVLB  B
02DA4:  BTFSC  xB0.1
02DA6:  MOVLW  01
02DA8:  MOVLB  C
02DAA:  IORWF  x24,W
02DAC:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
02DAE:  BCF    FD8.0
02DB0:  RLCF   26,W
02DB2:  MOVWF  x24
02DB4:  MOVLW  00
02DB6:  MOVLB  B
02DB8:  BTFSC  xB0.0
02DBA:  MOVLW  01
02DBC:  MOVLB  C
02DBE:  IORWF  x24,W
02DC0:  MOVWF  26
....................    
....................    Ack9_16_Send = Ack9_16_Send | AckSend.B16;
02DC2:  MOVLW  00
02DC4:  MOVLB  B
02DC6:  BTFSC  xB1.7
02DC8:  MOVLW  01
02DCA:  IORWF  27,F
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B15;
02DCC:  BCF    FD8.0
02DCE:  RLCF   27,W
02DD0:  MOVLB  C
02DD2:  MOVWF  x24
02DD4:  MOVLW  00
02DD6:  MOVLB  B
02DD8:  BTFSC  xB1.6
02DDA:  MOVLW  01
02DDC:  MOVLB  C
02DDE:  IORWF  x24,W
02DE0:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B14;
02DE2:  BCF    FD8.0
02DE4:  RLCF   27,W
02DE6:  MOVWF  x24
02DE8:  MOVLW  00
02DEA:  MOVLB  B
02DEC:  BTFSC  xB1.5
02DEE:  MOVLW  01
02DF0:  MOVLB  C
02DF2:  IORWF  x24,W
02DF4:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B13;
02DF6:  BCF    FD8.0
02DF8:  RLCF   27,W
02DFA:  MOVWF  x24
02DFC:  MOVLW  00
02DFE:  MOVLB  B
02E00:  BTFSC  xB1.4
02E02:  MOVLW  01
02E04:  MOVLB  C
02E06:  IORWF  x24,W
02E08:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B12;
02E0A:  BCF    FD8.0
02E0C:  RLCF   27,W
02E0E:  MOVWF  x24
02E10:  MOVLW  00
02E12:  MOVLB  B
02E14:  BTFSC  xB1.3
02E16:  MOVLW  01
02E18:  MOVLB  C
02E1A:  IORWF  x24,W
02E1C:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B11;
02E1E:  BCF    FD8.0
02E20:  RLCF   27,W
02E22:  MOVWF  x24
02E24:  MOVLW  00
02E26:  MOVLB  B
02E28:  BTFSC  xB1.2
02E2A:  MOVLW  01
02E2C:  MOVLB  C
02E2E:  IORWF  x24,W
02E30:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B10;
02E32:  BCF    FD8.0
02E34:  RLCF   27,W
02E36:  MOVWF  x24
02E38:  MOVLW  00
02E3A:  MOVLB  B
02E3C:  BTFSC  xB1.1
02E3E:  MOVLW  01
02E40:  MOVLB  C
02E42:  IORWF  x24,W
02E44:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B9;
02E46:  BCF    FD8.0
02E48:  RLCF   27,W
02E4A:  MOVWF  x24
02E4C:  MOVLW  00
02E4E:  MOVLB  B
02E50:  BTFSC  xB1.0
02E52:  MOVLW  01
02E54:  MOVLB  C
02E56:  IORWF  x24,W
02E58:  MOVWF  27
....................       
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
02E5A:  MOVLW  00
02E5C:  MOVLB  B
02E5E:  BTFSC  xAA.7
02E60:  MOVLW  01
02E62:  IORWF  1E,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
02E64:  BCF    FD8.0
02E66:  RLCF   1E,W
02E68:  MOVLB  C
02E6A:  MOVWF  x24
02E6C:  MOVLW  00
02E6E:  MOVLB  B
02E70:  BTFSC  xAA.6
02E72:  MOVLW  01
02E74:  MOVLB  C
02E76:  IORWF  x24,W
02E78:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
02E7A:  BCF    FD8.0
02E7C:  RLCF   1E,W
02E7E:  MOVWF  x24
02E80:  MOVLW  00
02E82:  MOVLB  B
02E84:  BTFSC  xAA.5
02E86:  MOVLW  01
02E88:  MOVLB  C
02E8A:  IORWF  x24,W
02E8C:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
02E8E:  BCF    FD8.0
02E90:  RLCF   1E,W
02E92:  MOVWF  x24
02E94:  MOVLW  00
02E96:  MOVLB  B
02E98:  BTFSC  xAA.4
02E9A:  MOVLW  01
02E9C:  MOVLB  C
02E9E:  IORWF  x24,W
02EA0:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
02EA2:  BCF    FD8.0
02EA4:  RLCF   1E,W
02EA6:  MOVWF  x24
02EA8:  MOVLW  00
02EAA:  MOVLB  B
02EAC:  BTFSC  xAA.3
02EAE:  MOVLW  01
02EB0:  MOVLB  C
02EB2:  IORWF  x24,W
02EB4:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
02EB6:  BCF    FD8.0
02EB8:  RLCF   1E,W
02EBA:  MOVWF  x24
02EBC:  MOVLW  00
02EBE:  MOVLB  B
02EC0:  BTFSC  xAA.2
02EC2:  MOVLW  01
02EC4:  MOVLB  C
02EC6:  IORWF  x24,W
02EC8:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
02ECA:  BCF    FD8.0
02ECC:  RLCF   1E,W
02ECE:  MOVWF  x24
02ED0:  MOVLW  00
02ED2:  MOVLB  B
02ED4:  BTFSC  xAA.1
02ED6:  MOVLW  01
02ED8:  MOVLB  C
02EDA:  IORWF  x24,W
02EDC:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
02EDE:  BCF    FD8.0
02EE0:  RLCF   1E,W
02EE2:  MOVWF  x24
02EE4:  MOVLW  00
02EE6:  MOVLB  B
02EE8:  BTFSC  xAA.0
02EEA:  MOVLW  01
02EEC:  MOVLB  C
02EEE:  IORWF  x24,W
02EF0:  MOVWF  1E
....................    
....................    Input9_16_Send = Input9_16_Send | In.B16;
02EF2:  MOVLW  00
02EF4:  MOVLB  B
02EF6:  BTFSC  xAB.7
02EF8:  MOVLW  01
02EFA:  IORWF  1F,F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B15;
02EFC:  BCF    FD8.0
02EFE:  RLCF   1F,W
02F00:  MOVLB  C
02F02:  MOVWF  x24
02F04:  MOVLW  00
02F06:  MOVLB  B
02F08:  BTFSC  xAB.6
02F0A:  MOVLW  01
02F0C:  MOVLB  C
02F0E:  IORWF  x24,W
02F10:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B14;
02F12:  BCF    FD8.0
02F14:  RLCF   1F,W
02F16:  MOVWF  x24
02F18:  MOVLW  00
02F1A:  MOVLB  B
02F1C:  BTFSC  xAB.5
02F1E:  MOVLW  01
02F20:  MOVLB  C
02F22:  IORWF  x24,W
02F24:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B13;
02F26:  BCF    FD8.0
02F28:  RLCF   1F,W
02F2A:  MOVWF  x24
02F2C:  MOVLW  00
02F2E:  MOVLB  B
02F30:  BTFSC  xAB.4
02F32:  MOVLW  01
02F34:  MOVLB  C
02F36:  IORWF  x24,W
02F38:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B12;
02F3A:  BCF    FD8.0
02F3C:  RLCF   1F,W
02F3E:  MOVWF  x24
02F40:  MOVLW  00
02F42:  MOVLB  B
02F44:  BTFSC  xAB.3
02F46:  MOVLW  01
02F48:  MOVLB  C
02F4A:  IORWF  x24,W
02F4C:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B11;
02F4E:  BCF    FD8.0
02F50:  RLCF   1F,W
02F52:  MOVWF  x24
02F54:  MOVLW  00
02F56:  MOVLB  B
02F58:  BTFSC  xAB.2
02F5A:  MOVLW  01
02F5C:  MOVLB  C
02F5E:  IORWF  x24,W
02F60:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B10;
02F62:  BCF    FD8.0
02F64:  RLCF   1F,W
02F66:  MOVWF  x24
02F68:  MOVLW  00
02F6A:  MOVLB  B
02F6C:  BTFSC  xAB.1
02F6E:  MOVLW  01
02F70:  MOVLB  C
02F72:  IORWF  x24,W
02F74:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B9;
02F76:  BCF    FD8.0
02F78:  RLCF   1F,W
02F7A:  MOVWF  x24
02F7C:  MOVLW  00
02F7E:  MOVLB  B
02F80:  BTFSC  xAB.0
02F82:  MOVLW  01
02F84:  MOVLB  C
02F86:  IORWF  x24,W
02F88:  MOVWF  1F
02F8A:  MOVLB  0
02F8C:  GOTO   3CD8 (RETURN)
....................    
....................    
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void checkCommand(void)
.................... {
....................    restart_wdt();
*
002DA:  CLRWDT
.................... 
....................    //if(sequence == end_sq && Address == SBUF)     //check Address
....................    if(sequence == end_sq )     //check Address
002DC:  MOVF   x6F,W
002DE:  SUBWF  x78,W
002E0:  BNZ   0308
....................    {
....................      RxD_DataLen = 0x00 ;
002E2:  CLRF   x7A
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002E4:  MOVLW  7A
002E6:  ADDWF  x7A,W
002E8:  MOVWF  FE9
002EA:  MOVLW  01
002EC:  MOVWF  FEA
002EE:  BTFSC  FD8.0
002F0:  INCF   FEA,F
002F2:  MOVFF  2E,FEF
....................      restart_wdt();
002F6:  CLRWDT
....................      RxD_DataLen ++ ;
002F8:  INCF   x7A,F
....................      sequence = addr_sq;
002FA:  MOVLW  10
002FC:  MOVWF  x78
....................      T_timeout = 0x14; //200ms
002FE:  MOVLW  14
00300:  MOVLB  9
00302:  MOVWF  x85
....................    }
00304:  BRA    0564
00306:  MOVLB  0
....................    else if(sequence == addr_sq)
00308:  MOVF   x78,W
0030A:  SUBLW  10
0030C:  BNZ   03C6
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
0030E:  MOVLW  7A
00310:  ADDWF  x7A,W
00312:  MOVWF  FE9
00314:  MOVLW  01
00316:  MOVWF  FEA
00318:  BTFSC  FD8.0
0031A:  INCF   FEA,F
0031C:  MOVFF  2E,FEF
....................       restart_wdt();
00320:  CLRWDT
....................       RxD_DataLen ++ ;
00322:  INCF   x7A,F
.................... 
....................        if(RxD_Buff[RxD_DataLen - 1] < 0x17)   //Function Code Must be less than 0x20
00324:  MOVLW  01
00326:  SUBWF  x7A,W
00328:  ADDLW  7A
0032A:  MOVWF  FE9
0032C:  MOVLW  01
0032E:  MOVWF  FEA
00330:  BTFSC  FD8.0
00332:  INCF   FEA,F
00334:  MOVF   FEF,W
00336:  SUBLW  16
00338:  BNC   0348
....................        {
....................            sequence = code_sq;
0033A:  MOVFF  70,78
....................            T_timeout = 0x14; //200ms
0033E:  MOVLW  14
00340:  MOVLB  9
00342:  MOVWF  x85
....................        }
00344:  BRA    03C2
00346:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x20)   /////Read Setting//////
00348:  MOVLW  01
0034A:  SUBWF  x7A,W
0034C:  ADDLW  7A
0034E:  MOVWF  FE9
00350:  MOVLW  01
00352:  MOVWF  FEA
00354:  BTFSC  FD8.0
00356:  INCF   FEA,F
00358:  MOVF   FEF,W
0035A:  SUBLW  20
0035C:  BNZ   036C
....................        {
....................           sequence = ubyte_lo_sq;
0035E:  MOVFF  73,78
....................           T_timeout = 0x14; //200ms
00362:  MOVLW  14
00364:  MOVLB  9
00366:  MOVWF  x85
....................        }
00368:  BRA    03C2
0036A:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x21)   /////Write setting/////
0036C:  MOVLW  01
0036E:  SUBWF  x7A,W
00370:  ADDLW  7A
00372:  MOVWF  FE9
00374:  MOVLW  01
00376:  MOVWF  FEA
00378:  BTFSC  FD8.0
0037A:  INCF   FEA,F
0037C:  MOVF   FEF,W
0037E:  SUBLW  21
00380:  BNZ   0390
....................        {
....................           sequence = byte_count_sq ;
00382:  MOVFF  76,78
....................           T_timeout = 0x14; //200ms
00386:  MOVLW  14
00388:  MOVLB  9
0038A:  MOVWF  x85
....................        }
0038C:  BRA    03C2
0038E:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x22)   /////SMS setting/////
00390:  MOVLW  01
00392:  SUBWF  x7A,W
00394:  ADDLW  7A
00396:  MOVWF  FE9
00398:  MOVLW  01
0039A:  MOVWF  FEA
0039C:  BTFSC  FD8.0
0039E:  INCF   FEA,F
003A0:  MOVF   FEF,W
003A2:  SUBLW  22
003A4:  BNZ   03B4
....................        {
....................           sequence = second_numofdata ;
003A6:  MOVFF  75,78
....................           T_timeout = 0x14; //200ms
003AA:  MOVLW  14
003AC:  MOVLB  9
003AE:  MOVWF  x85
....................        }
003B0:  BRA    03C2
003B2:  MOVLB  0
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
003B4:  CLRF   x7A
....................           sequence = end_sq;
003B6:  MOVFF  6F,78
....................           T_timeout = 0x00;
003BA:  MOVLB  9
003BC:  CLRF   x85
....................           output_bit(P485ctrl,0);
003BE:  BCF    F8A.3
003C0:  BCF    F93.3
....................        }
....................    }
003C2:  BRA    0564
003C4:  MOVLB  0
....................    else if(sequence == second_numofdata)
003C6:  MOVF   x75,W
003C8:  SUBWF  x78,W
003CA:  BNZ   03F0
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
003CC:  MOVLW  7A
003CE:  ADDWF  x7A,W
003D0:  MOVWF  FE9
003D2:  MOVLW  01
003D4:  MOVWF  FEA
003D6:  BTFSC  FD8.0
003D8:  INCF   FEA,F
003DA:  MOVFF  2E,FEF
....................       restart_wdt();
003DE:  CLRWDT
....................       RxD_DataLen ++ ;
003E0:  INCF   x7A,F
....................       sequence = byte_count_sq;
003E2:  MOVFF  76,78
....................       T_timeout = 0x14; //200ms
003E6:  MOVLW  14
003E8:  MOVLB  9
003EA:  MOVWF  x85
.................... 
....................    }
003EC:  BRA    0564
003EE:  MOVLB  0
....................    else if(sequence == byte_count_sq)
003F0:  MOVF   x76,W
003F2:  SUBWF  x78,W
003F4:  BNZ   0430
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
003F6:  MOVLW  7A
003F8:  ADDWF  x7A,W
003FA:  MOVWF  FE9
003FC:  MOVLW  01
003FE:  MOVWF  FEA
00400:  BTFSC  FD8.0
00402:  INCF   FEA,F
00404:  MOVFF  2E,FEF
....................       restart_wdt();
00408:  CLRWDT
....................       RxD_DataLen ++ ;
0040A:  INCF   x7A,F
....................       index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
0040C:  MOVLW  01
0040E:  SUBWF  x7A,W
00410:  ADDLW  7A
00412:  MOVWF  FE9
00414:  MOVLW  01
00416:  MOVWF  FEA
00418:  BTFSC  FD8.0
0041A:  INCF   FEA,F
0041C:  MOVLB  9
0041E:  CLRF   x87
00420:  MOVFF  FEF,986
....................       T_timeout = 0x14; //200ms
00424:  MOVLW  14
00426:  MOVWF  x85
....................       sequence = data_sq ;
00428:  MOVFF  77,78
....................    }
0042C:  BRA    0564
0042E:  MOVLB  0
....................    else if(sequence == data_sq)
00430:  MOVF   x77,W
00432:  SUBWF  x78,W
00434:  BNZ   046A
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
00436:  MOVLW  7A
00438:  ADDWF  x7A,W
0043A:  MOVWF  FE9
0043C:  MOVLW  01
0043E:  MOVWF  FEA
00440:  BTFSC  FD8.0
00442:  INCF   FEA,F
00444:  MOVFF  2E,FEF
....................       restart_wdt();
00448:  CLRWDT
....................       RxD_DataLen ++ ;
0044A:  INCF   x7A,F
....................       index -- ;                     //Data Byte Count
0044C:  MOVLB  9
0044E:  MOVF   x86,W
00450:  BTFSC  FD8.2
00452:  DECF   x87,F
00454:  DECF   x86,F
....................       if(index == 0x00)
00456:  MOVF   x86,F
00458:  BNZ   0462
0045A:  MOVF   x87,F
0045C:  BNZ   0462
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
0045E:  MOVFF  73,78
....................       }
....................       T_timeout = 0x14; //200ms
00462:  MOVLW  14
00464:  MOVWF  x85
....................    }
00466:  BRA    0564
00468:  MOVLB  0
....................    else if(sequence == code_sq)
0046A:  MOVF   x70,W
0046C:  SUBWF  x78,W
0046E:  BNZ   0494
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
00470:  MOVLW  7A
00472:  ADDWF  x7A,W
00474:  MOVWF  FE9
00476:  MOVLW  01
00478:  MOVWF  FEA
0047A:  BTFSC  FD8.0
0047C:  INCF   FEA,F
0047E:  MOVFF  2E,FEF
....................       restart_wdt();
00482:  CLRWDT
....................       RxD_DataLen ++ ;
00484:  INCF   x7A,F
....................       sequence = start_addr_hi_sq;
00486:  MOVFF  71,78
....................       T_timeout = 0x14; //200ms
0048A:  MOVLW  14
0048C:  MOVLB  9
0048E:  MOVWF  x85
....................    }
00490:  BRA    0564
00492:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
00494:  MOVF   x71,W
00496:  SUBWF  x78,W
00498:  BNZ   04BE
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
0049A:  MOVLW  7A
0049C:  ADDWF  x7A,W
0049E:  MOVWF  FE9
004A0:  MOVLW  01
004A2:  MOVWF  FEA
004A4:  BTFSC  FD8.0
004A6:  INCF   FEA,F
004A8:  MOVFF  2E,FEF
....................       restart_wdt();
004AC:  CLRWDT
....................       RxD_DataLen ++ ;
004AE:  INCF   x7A,F
....................       sequence = start_addr_lo_sq;
004B0:  MOVFF  72,78
....................       T_timeout = 0x14; //200ms
004B4:  MOVLW  14
004B6:  MOVLB  9
004B8:  MOVWF  x85
....................    }
004BA:  BRA    0564
004BC:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
004BE:  MOVF   x72,W
004C0:  SUBWF  x78,W
004C2:  BNZ   04E8
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
004C4:  MOVLW  7A
004C6:  ADDWF  x7A,W
004C8:  MOVWF  FE9
004CA:  MOVLW  01
004CC:  MOVWF  FEA
004CE:  BTFSC  FD8.0
004D0:  INCF   FEA,F
004D2:  MOVFF  2E,FEF
....................       restart_wdt();
004D6:  CLRWDT
....................       RxD_DataLen ++ ;
004D8:  INCF   x7A,F
....................       sequence = ubyte_hi_sq;
004DA:  MOVLW  15
004DC:  MOVWF  x78
....................       T_timeout = 0x14; //200ms
004DE:  MOVLW  14
004E0:  MOVLB  9
004E2:  MOVWF  x85
....................    }
004E4:  BRA    0564
004E6:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
004E8:  MOVF   x78,W
004EA:  SUBLW  15
004EC:  BNZ   0512
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
004EE:  MOVLW  7A
004F0:  ADDWF  x7A,W
004F2:  MOVWF  FE9
004F4:  MOVLW  01
004F6:  MOVWF  FEA
004F8:  BTFSC  FD8.0
004FA:  INCF   FEA,F
004FC:  MOVFF  2E,FEF
....................       restart_wdt();
00500:  CLRWDT
....................       RxD_DataLen ++ ;
00502:  INCF   x7A,F
....................       sequence = ubyte_lo_sq;
00504:  MOVFF  73,78
....................       T_timeout = 0x14; //200ms
00508:  MOVLW  14
0050A:  MOVLB  9
0050C:  MOVWF  x85
....................    }
0050E:  BRA    0564
00510:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
00512:  MOVF   x73,W
00514:  SUBWF  x78,W
00516:  BNZ   053C
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
00518:  MOVLW  7A
0051A:  ADDWF  x7A,W
0051C:  MOVWF  FE9
0051E:  MOVLW  01
00520:  MOVWF  FEA
00522:  BTFSC  FD8.0
00524:  INCF   FEA,F
00526:  MOVFF  2E,FEF
....................       restart_wdt();
0052A:  CLRWDT
....................       RxD_DataLen ++ ;
0052C:  INCF   x7A,F
....................       sequence = crc_hi_sq;
0052E:  MOVFF  74,78
....................       T_timeout = 0x14; //200ms
00532:  MOVLW  14
00534:  MOVLB  9
00536:  MOVWF  x85
....................    }
00538:  BRA    0564
0053A:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
0053C:  MOVF   x74,W
0053E:  SUBWF  x78,W
00540:  BNZ   0564
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
00542:  MOVLW  7A
00544:  ADDWF  x7A,W
00546:  MOVWF  FE9
00548:  MOVLW  01
0054A:  MOVWF  FEA
0054C:  BTFSC  FD8.0
0054E:  INCF   FEA,F
00550:  MOVFF  2E,FEF
....................       restart_wdt();
00554:  CLRWDT
....................       sequence = end_sq;
00556:  MOVFF  6F,78
....................       T_timeout = 0x00;
0055A:  MOVLB  9
0055C:  CLRF   x85
....................       //T_timeout = 0x14; //200ms
....................       recieve_completed = 1 ;            //Recieve completed then translate
0055E:  BSF    30.5
....................       output_bit(P485ctrl,0);
00560:  BCF    F8A.3
00562:  BCF    F93.3
00564:  MOVLB  0
....................    }
00566:  GOTO   0574 (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
033A0:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
033A2:  MOVLW  01
033A4:  SUBWF  x7A,W
033A6:  MOVLB  C
033A8:  MOVWF  x23
033AA:  MOVLW  01
033AC:  MOVWF  x25
033AE:  MOVLW  7A
033B0:  MOVWF  x24
033B2:  MOVFF  C23,C26
033B6:  MOVLB  0
033B8:  RCALL  2BE4
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
033BA:  MOVLW  01
033BC:  SUBWF  x7A,W
033BE:  ADDLW  7A
033C0:  MOVWF  FE9
033C2:  MOVLW  01
033C4:  MOVWF  FEA
033C6:  BTFSC  FD8.0
033C8:  INCF   FEA,F
033CA:  MOVF   FEF,W
033CC:  MOVLB  5
033CE:  SUBWF  x7B,W
033D0:  BTFSS  FD8.2
033D2:  GOTO   5E46
033D6:  MOVLW  7A
033D8:  MOVLB  0
033DA:  ADDWF  x7A,W
033DC:  MOVWF  FE9
033DE:  MOVLW  01
033E0:  MOVWF  FEA
033E2:  BTFSC  FD8.0
033E4:  INCF   FEA,F
033E6:  MOVF   FEF,W
033E8:  MOVLB  5
033EA:  SUBWF  x7A,W
033EC:  BTFSS  FD8.2
033EE:  GOTO   5E46
....................    {
....................    
....................          
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
033F2:  MOVLB  1
033F4:  MOVF   x7A,W
033F6:  SUBLW  AA
033F8:  BTFSS  FD8.2
033FA:  BRA    3894
033FC:  MOVF   x7B,W
033FE:  SUBLW  20
03400:  BTFSS  FD8.2
03402:  BRA    3894
....................       {
....................          TxD_Buff[0] = Address ;         //Address
03404:  MOVFF  79,7B
....................          TxD_Buff[1] = 0x20 ;            //function code
03408:  MOVLW  20
0340A:  MOVLB  0
0340C:  MOVWF  x7C
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
0340E:  MOVLW  1C
03410:  MOVWF  x7D
....................          
....................          /////////////////////////////////////////////
....................          InputType1_8 = 0x00;
03412:  CLRF   3A
....................          InputType1_8 = InputType1_8 | FaultNCNO[8];
03414:  MOVLW  00
03416:  MOVLB  C
03418:  BTFSC  x13.0
0341A:  MOVLW  01
0341C:  IORWF  3A,F
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[7];
0341E:  BCF    FD8.0
03420:  RLCF   3A,W
03422:  MOVWF  x24
03424:  MOVLW  00
03426:  BTFSC  x12.7
03428:  MOVLW  01
0342A:  IORWF  x24,W
0342C:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[6];
0342E:  BCF    FD8.0
03430:  RLCF   3A,W
03432:  MOVWF  x24
03434:  MOVLW  00
03436:  BTFSC  x12.6
03438:  MOVLW  01
0343A:  IORWF  x24,W
0343C:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[5];
0343E:  BCF    FD8.0
03440:  RLCF   3A,W
03442:  MOVWF  x24
03444:  MOVLW  00
03446:  BTFSC  x12.5
03448:  MOVLW  01
0344A:  IORWF  x24,W
0344C:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[4];
0344E:  BCF    FD8.0
03450:  RLCF   3A,W
03452:  MOVWF  x24
03454:  MOVLW  00
03456:  BTFSC  x12.4
03458:  MOVLW  01
0345A:  IORWF  x24,W
0345C:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[3];
0345E:  BCF    FD8.0
03460:  RLCF   3A,W
03462:  MOVWF  x24
03464:  MOVLW  00
03466:  BTFSC  x12.3
03468:  MOVLW  01
0346A:  IORWF  x24,W
0346C:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[2];
0346E:  BCF    FD8.0
03470:  RLCF   3A,W
03472:  MOVWF  x24
03474:  MOVLW  00
03476:  BTFSC  x12.2
03478:  MOVLW  01
0347A:  IORWF  x24,W
0347C:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[1];
0347E:  BCF    FD8.0
03480:  RLCF   3A,W
03482:  MOVWF  x24
03484:  MOVLW  00
03486:  BTFSC  x12.1
03488:  MOVLW  01
0348A:  IORWF  x24,W
0348C:  MOVWF  3A
.................... 
....................          InputType9_16 = 0x00;
0348E:  CLRF   3B
....................          InputType9_16 = InputType9_16 | FaultNCNO[16];
03490:  MOVLW  00
03492:  BTFSC  x14.0
03494:  MOVLW  01
03496:  IORWF  3B,F
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[15];
03498:  BCF    FD8.0
0349A:  RLCF   3B,W
0349C:  MOVWF  x24
0349E:  MOVLW  00
034A0:  BTFSC  x13.7
034A2:  MOVLW  01
034A4:  IORWF  x24,W
034A6:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[14];
034A8:  BCF    FD8.0
034AA:  RLCF   3B,W
034AC:  MOVWF  x24
034AE:  MOVLW  00
034B0:  BTFSC  x13.6
034B2:  MOVLW  01
034B4:  IORWF  x24,W
034B6:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[13];
034B8:  BCF    FD8.0
034BA:  RLCF   3B,W
034BC:  MOVWF  x24
034BE:  MOVLW  00
034C0:  BTFSC  x13.5
034C2:  MOVLW  01
034C4:  IORWF  x24,W
034C6:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[12];
034C8:  BCF    FD8.0
034CA:  RLCF   3B,W
034CC:  MOVWF  x24
034CE:  MOVLW  00
034D0:  BTFSC  x13.4
034D2:  MOVLW  01
034D4:  IORWF  x24,W
034D6:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[11];
034D8:  BCF    FD8.0
034DA:  RLCF   3B,W
034DC:  MOVWF  x24
034DE:  MOVLW  00
034E0:  BTFSC  x13.3
034E2:  MOVLW  01
034E4:  IORWF  x24,W
034E6:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[10];
034E8:  BCF    FD8.0
034EA:  RLCF   3B,W
034EC:  MOVWF  x24
034EE:  MOVLW  00
034F0:  BTFSC  x13.2
034F2:  MOVLW  01
034F4:  IORWF  x24,W
034F6:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[9];
034F8:  BCF    FD8.0
034FA:  RLCF   3B,W
034FC:  MOVWF  x24
034FE:  MOVLW  00
03500:  BTFSC  x13.1
03502:  MOVLW  01
03504:  IORWF  x24,W
03506:  MOVWF  3B
....................          
....................          FaultType17_24 = 0x00;
03508:  CLRF   3F
....................          FaultType17_24 = FaultType17_24 | FaultNCNO[24];
0350A:  MOVLW  00
0350C:  BTFSC  x15.0
0350E:  MOVLW  01
03510:  IORWF  3F,F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[23];
03512:  BCF    FD8.0
03514:  RLCF   3F,W
03516:  MOVWF  x24
03518:  MOVLW  00
0351A:  BTFSC  x14.7
0351C:  MOVLW  01
0351E:  IORWF  x24,W
03520:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[22];
03522:  BCF    FD8.0
03524:  RLCF   3F,W
03526:  MOVWF  x24
03528:  MOVLW  00
0352A:  BTFSC  x14.6
0352C:  MOVLW  01
0352E:  IORWF  x24,W
03530:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[21];
03532:  BCF    FD8.0
03534:  RLCF   3F,W
03536:  MOVWF  x24
03538:  MOVLW  00
0353A:  BTFSC  x14.5
0353C:  MOVLW  01
0353E:  IORWF  x24,W
03540:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[20];
03542:  BCF    FD8.0
03544:  RLCF   3F,W
03546:  MOVWF  x24
03548:  MOVLW  00
0354A:  BTFSC  x14.4
0354C:  MOVLW  01
0354E:  IORWF  x24,W
03550:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[19];
03552:  BCF    FD8.0
03554:  RLCF   3F,W
03556:  MOVWF  x24
03558:  MOVLW  00
0355A:  BTFSC  x14.3
0355C:  MOVLW  01
0355E:  IORWF  x24,W
03560:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[18];
03562:  BCF    FD8.0
03564:  RLCF   3F,W
03566:  MOVWF  x24
03568:  MOVLW  00
0356A:  BTFSC  x14.2
0356C:  MOVLW  01
0356E:  IORWF  x24,W
03570:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[17];
03572:  BCF    FD8.0
03574:  RLCF   3F,W
03576:  MOVWF  x24
03578:  MOVLW  00
0357A:  BTFSC  x14.1
0357C:  MOVLW  01
0357E:  IORWF  x24,W
03580:  MOVWF  3F
....................          
....................          ///////////////////////////////////////////
....................          
....................          TxD_Buff[3] = InputType1_8 ;    //1
03582:  MOVFF  3A,7E
....................          TxD_Buff[4] = InputType9_16 ;  //2
03586:  MOVFF  3B,7F
....................          TxD_Buff[5] = InputType17_24 ;//3
0358A:  MOVFF  3C,80
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
0358E:  MOVFF  3D,81
....................          TxD_Buff[7] = FaultType9_16 ; //5
03592:  MOVFF  3E,82
....................          TxD_Buff[8] = FaultType17_24 ;   //6
03596:  MOVFF  3F,83
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
0359A:  MOVFF  40,84
....................          TxD_Buff[10] = OutputType9_16 ;  //8
0359E:  MOVFF  41,85
....................          TxD_Buff[11] = OutputType17_24 ; //9
035A2:  MOVFF  42,86
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
035A6:  MOVFF  43,87
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
035AA:  MOVFF  44,88
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
035AE:  MOVFF  45,89
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
035B2:  MOVFF  46,8A
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
035B6:  MOVFF  47,8B
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
035BA:  MOVFF  48,8C
....................         
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
035BE:  MOVFF  FF2,C23
035C2:  BCF    FF2.7
035C4:  CLRF   FAA
035C6:  MOVLW  10
035C8:  MOVWF  FA9
035CA:  BCF    FA6.6
035CC:  BCF    FA6.7
035CE:  BSF    FA6.0
035D0:  MOVF   FA8,W
035D2:  BTFSC  x23.7
035D4:  BSF    FF2.7
035D6:  MOVLB  0
035D8:  MOVWF  x8D
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
035DA:  MOVFF  FF2,C23
035DE:  BCF    FF2.7
035E0:  CLRF   FAA
035E2:  MOVLW  11
035E4:  MOVWF  FA9
035E6:  BCF    FA6.6
035E8:  BCF    FA6.7
035EA:  BSF    FA6.0
035EC:  MOVF   FA8,W
035EE:  MOVLB  C
035F0:  BTFSC  x23.7
035F2:  BSF    FF2.7
035F4:  MOVLB  0
035F6:  MOVWF  x8E
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
035F8:  MOVFF  FF2,C23
035FC:  BCF    FF2.7
035FE:  CLRF   FAA
03600:  MOVLW  12
03602:  MOVWF  FA9
03604:  BCF    FA6.6
03606:  BCF    FA6.7
03608:  BSF    FA6.0
0360A:  MOVF   FA8,W
0360C:  MOVLB  C
0360E:  BTFSC  x23.7
03610:  BSF    FF2.7
03612:  MOVLB  0
03614:  MOVWF  x8F
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
03616:  MOVFF  FF2,C23
0361A:  BCF    FF2.7
0361C:  CLRF   FAA
0361E:  MOVLW  13
03620:  MOVWF  FA9
03622:  BCF    FA6.6
03624:  BCF    FA6.7
03626:  BSF    FA6.0
03628:  MOVF   FA8,W
0362A:  MOVLB  C
0362C:  BTFSC  x23.7
0362E:  BSF    FF2.7
03630:  MOVLB  0
03632:  MOVWF  x90
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
03634:  MOVFF  FF2,C23
03638:  BCF    FF2.7
0363A:  CLRF   FAA
0363C:  MOVLW  14
0363E:  MOVWF  FA9
03640:  BCF    FA6.6
03642:  BCF    FA6.7
03644:  BSF    FA6.0
03646:  MOVF   FA8,W
03648:  MOVLB  C
0364A:  BTFSC  x23.7
0364C:  BSF    FF2.7
0364E:  MOVLB  0
03650:  MOVWF  x91
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
03652:  MOVFF  FF2,C23
03656:  BCF    FF2.7
03658:  CLRF   FAA
0365A:  MOVLW  15
0365C:  MOVWF  FA9
0365E:  BCF    FA6.6
03660:  BCF    FA6.7
03662:  BSF    FA6.0
03664:  MOVF   FA8,W
03666:  MOVLB  C
03668:  BTFSC  x23.7
0366A:  BSF    FF2.7
0366C:  MOVLB  0
0366E:  MOVWF  x92
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
03670:  MOVFF  FF2,C23
03674:  BCF    FF2.7
03676:  CLRF   FAA
03678:  MOVLW  16
0367A:  MOVWF  FA9
0367C:  BCF    FA6.6
0367E:  BCF    FA6.7
03680:  BSF    FA6.0
03682:  MOVF   FA8,W
03684:  MOVLB  C
03686:  BTFSC  x23.7
03688:  BSF    FF2.7
0368A:  MOVLB  0
0368C:  MOVWF  x93
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
0368E:  MOVFF  FF2,C23
03692:  BCF    FF2.7
03694:  CLRF   FAA
03696:  MOVLW  17
03698:  MOVWF  FA9
0369A:  BCF    FA6.6
0369C:  BCF    FA6.7
0369E:  BSF    FA6.0
036A0:  MOVF   FA8,W
036A2:  MOVLB  C
036A4:  BTFSC  x23.7
036A6:  BSF    FF2.7
036A8:  MOVLB  0
036AA:  MOVWF  x94
....................        
....................          ///////////////////////////////////////jj------------------
....................          
....................          /*
....................          Red1_8 = Red1_8 | RED_Colour.B8;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B7;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B6;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B5;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B4;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B3;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B2;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B1;
....................          
....................          Red9_10 = Red9_10 | RED_Colour.B10;
....................          Red9_10 = (Red9_10 << 1) | RED_Colour.B9;
....................          
....................          Red11_18 = Red11_18 | RED_Colour.B16;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B15;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B14;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B13;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B12;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B11;
....................          //Red11_18 = (Red11_18 << 1) | RED_Colour.B2;
....................          //Red11_18 = (Red11_18 << 1) | RED_Colour.B1;
....................         
....................          Green1_8 = Green1_8 | GREEN_Colour.B8;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B7;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B6;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B5;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B4;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B3;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B2;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B1;
....................          
....................          Green9_10 = Green9_10 | GREEN_Colour.B10;
....................          Green9_10 = (Green9_10 << 1) | GREEN_Colour.B9;
....................          
....................          Green11_18 = Green11_18 | GREEN_Colour.B16;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B15;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B14;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B13;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B12;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B11;
....................          
....................           //TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
....................           TxD_Buff[18] = Red1_8;//Red1_8;    //16
....................           
....................           TxD_Buff[19] = Red9_10;//Red9_10;      //17
....................           TxD_Buff[20] = Red11_18;//Red11_18;     //18
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
....................           
....................           //TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
....................           TxD_Buff[22] = Green1_8;//Green1_8;     //20
....................           
....................           TxD_Buff[23] = Green9_10;//Green9_10;    //21
....................           TxD_Buff[24] = Green11_18;//Green11_18;      //22
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
....................           */
....................           ///////////////////////////////////////jj------------------
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
036AC:  MOVFF  6A,95
....................          TxD_Buff[27] = AutoAckTime ;        //25
036B0:  MOVFF  6B,96
....................          TxD_Buff[28] = FlashingRate ;       //26
036B4:  MOVFF  6C,97
....................          TxD_Buff[29] = NoOfPoint ;          //27
036B8:  MOVFF  6D,98
....................          TxD_Buff[30] = FaultDelayTime ;    //28
036BC:  MOVLW  E8
036BE:  MOVWF  x99
....................          TxD_Buff[31] = Address ;            //29
036C0:  MOVFF  79,9A
.................... 
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
036C4:  MOVFF  BEA,9B
....................          TxD_Buff[33] = FaultDelayTime[2] ;
036C8:  MOVFF  BEC,9C
....................          TxD_Buff[34] = FaultDelayTime[3] ;
036CC:  MOVFF  BEE,9D
....................          TxD_Buff[35] = FaultDelayTime[4] ;
036D0:  MOVFF  BF0,9E
....................          TxD_Buff[36] = FaultDelayTime[5] ;
036D4:  MOVFF  BF2,9F
....................          TxD_Buff[37] = FaultDelayTime[6] ;
036D8:  MOVFF  BF4,A0
....................          TxD_Buff[38] = FaultDelayTime[7] ;
036DC:  MOVFF  BF6,A1
....................          TxD_Buff[39] = FaultDelayTime[8] ;
036E0:  MOVFF  BF8,A2
....................          TxD_Buff[40] = FaultDelayTime[9] ;
036E4:  MOVFF  BFA,A3
....................          TxD_Buff[41] = FaultDelayTime[10] ;
036E8:  MOVFF  BFC,A4
....................          TxD_Buff[42] = FaultDelayTime[11] ;
036EC:  MOVFF  BFE,A5
....................          TxD_Buff[43] = FaultDelayTime[12] ;
036F0:  MOVFF  C00,A6
....................          TxD_Buff[44] = FaultDelayTime[13] ;
036F4:  MOVFF  C02,A7
....................          TxD_Buff[45] = FaultDelayTime[14] ;
036F8:  MOVFF  C04,A8
....................          TxD_Buff[46] = FaultDelayTime[15] ;
036FC:  MOVFF  C06,A9
....................          TxD_Buff[47] = FaultDelayTime[16] ;
03700:  MOVFF  C08,AA
....................          TxD_Buff[48] = FaultDelayTime[17] ;
03704:  MOVFF  C0A,AB
....................          TxD_Buff[49] = FaultDelayTime[18] ;
03708:  MOVFF  C0C,AC
....................          TxD_Buff[50] = FaultDelayTime[19] ;
0370C:  MOVFF  C0E,AD
....................          TxD_Buff[51] = FaultDelayTime[20] ;
03710:  MOVFF  C10,AE
....................          
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
03714:  MOVLB  C
03716:  CLRF   x25
03718:  MOVLW  7B
0371A:  MOVWF  x24
0371C:  MOVLW  34
0371E:  MOVWF  x26
03720:  MOVLB  0
03722:  CALL   2BE4
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
03726:  MOVFF  57B,AF
....................          TxD_Buff[53] = CRC_Lo ;
0372A:  MOVFF  57A,B0
.................... 
....................          output_bit(P485ctrl,1);
0372E:  BSF    F8A.3
03730:  BCF    F93.3
....................          delay_ms(10);
03732:  MOVLW  0A
03734:  MOVLB  C
03736:  MOVWF  x23
03738:  MOVLB  0
0373A:  CALL   06AC
.................... 
....................          putc(Txd_Buff[0]);
0373E:  MOVF   x7B,W
03740:  CALL   2C3A
....................          putc(Txd_Buff[1]);
03744:  MOVF   x7C,W
03746:  CALL   2C3A
....................          putc(Txd_Buff[2]);
0374A:  MOVF   x7D,W
0374C:  CALL   2C3A
....................          putc(Txd_Buff[3]);
03750:  MOVF   x7E,W
03752:  CALL   2C3A
....................          putc(Txd_Buff[4]);
03756:  MOVF   x7F,W
03758:  CALL   2C3A
....................          putc(Txd_Buff[5]);
0375C:  MOVF   x80,W
0375E:  CALL   2C3A
....................          putc(Txd_Buff[6]);
03762:  MOVF   x81,W
03764:  CALL   2C3A
....................          putc(Txd_Buff[7]);
03768:  MOVF   x82,W
0376A:  CALL   2C3A
....................          putc(Txd_Buff[8]);
0376E:  MOVF   x83,W
03770:  CALL   2C3A
....................          putc(Txd_Buff[9]);
03774:  MOVF   x84,W
03776:  CALL   2C3A
....................          putc(Txd_Buff[10]);
0377A:  MOVF   x85,W
0377C:  CALL   2C3A
....................          putc(Txd_Buff[11]);
03780:  MOVF   x86,W
03782:  CALL   2C3A
....................          putc(Txd_Buff[12]);
03786:  MOVF   x87,W
03788:  CALL   2C3A
....................          putc(Txd_Buff[13]);
0378C:  MOVF   x88,W
0378E:  CALL   2C3A
....................          putc(Txd_Buff[14]);
03792:  MOVF   x89,W
03794:  CALL   2C3A
....................          putc(Txd_Buff[15]);
03798:  MOVF   x8A,W
0379A:  CALL   2C3A
....................          putc(Txd_Buff[16]);
0379E:  MOVF   x8B,W
037A0:  CALL   2C3A
....................          putc(Txd_Buff[17]);
037A4:  MOVF   x8C,W
037A6:  CALL   2C3A
....................          putc(Txd_Buff[18]);
037AA:  MOVF   x8D,W
037AC:  CALL   2C3A
....................          putc(Txd_Buff[19]);
037B0:  MOVF   x8E,W
037B2:  CALL   2C3A
....................          putc(Txd_Buff[20]);
037B6:  MOVF   x8F,W
037B8:  CALL   2C3A
....................          putc(Txd_Buff[21]);
037BC:  MOVF   x90,W
037BE:  CALL   2C3A
....................          putc(Txd_Buff[22]);
037C2:  MOVF   x91,W
037C4:  CALL   2C3A
....................          putc(Txd_Buff[23]);
037C8:  MOVF   x92,W
037CA:  CALL   2C3A
....................          putc(Txd_Buff[24]);
037CE:  MOVF   x93,W
037D0:  CALL   2C3A
....................          putc(Txd_Buff[25]);
037D4:  MOVF   x94,W
037D6:  CALL   2C3A
....................          putc(Txd_Buff[26]);
037DA:  MOVF   x95,W
037DC:  CALL   2C3A
....................          putc(Txd_Buff[27]);
037E0:  MOVF   x96,W
037E2:  CALL   2C3A
....................          putc(Txd_Buff[28]);
037E6:  MOVF   x97,W
037E8:  CALL   2C3A
....................          putc(Txd_Buff[29]);
037EC:  MOVF   x98,W
037EE:  CALL   2C3A
....................          putc(Txd_Buff[30]);
037F2:  MOVF   x99,W
037F4:  CALL   2C3A
....................          putc(Txd_Buff[31]);
037F8:  MOVF   x9A,W
037FA:  CALL   2C3A
....................          
....................          putc(Txd_Buff[32]);
037FE:  MOVF   x9B,W
03800:  CALL   2C3A
....................          putc(Txd_Buff[33]);
03804:  MOVF   x9C,W
03806:  CALL   2C3A
....................          putc(Txd_Buff[34]);
0380A:  MOVF   x9D,W
0380C:  CALL   2C3A
....................          putc(Txd_Buff[35]);
03810:  MOVF   x9E,W
03812:  CALL   2C3A
....................          putc(Txd_Buff[36]);
03816:  MOVF   x9F,W
03818:  CALL   2C3A
....................          putc(Txd_Buff[37]);
0381C:  MOVF   xA0,W
0381E:  CALL   2C3A
....................          putc(Txd_Buff[38]);
03822:  MOVF   xA1,W
03824:  CALL   2C3A
....................          putc(Txd_Buff[39]);
03828:  MOVF   xA2,W
0382A:  CALL   2C3A
....................          putc(Txd_Buff[40]);
0382E:  MOVF   xA3,W
03830:  CALL   2C3A
....................          putc(Txd_Buff[41]);
03834:  MOVF   xA4,W
03836:  CALL   2C3A
....................          
....................          putc(Txd_Buff[42]);
0383A:  MOVF   xA5,W
0383C:  CALL   2C3A
....................          putc(Txd_Buff[43]);
03840:  MOVF   xA6,W
03842:  CALL   2C3A
....................          putc(Txd_Buff[44]);
03846:  MOVF   xA7,W
03848:  CALL   2C3A
....................          putc(Txd_Buff[45]);
0384C:  MOVF   xA8,W
0384E:  CALL   2C3A
....................          putc(Txd_Buff[46]);
03852:  MOVF   xA9,W
03854:  CALL   2C3A
....................          putc(Txd_Buff[47]);
03858:  MOVF   xAA,W
0385A:  CALL   2C3A
....................          putc(Txd_Buff[48]);
0385E:  MOVF   xAB,W
03860:  CALL   2C3A
....................          putc(Txd_Buff[49]);
03864:  MOVF   xAC,W
03866:  CALL   2C3A
....................          putc(Txd_Buff[50]);
0386A:  MOVF   xAD,W
0386C:  CALL   2C3A
....................          putc(Txd_Buff[51]);
03870:  MOVF   xAE,W
03872:  CALL   2C3A
....................          
....................          putc(Txd_Buff[52]);
03876:  MOVF   xAF,W
03878:  CALL   2C3A
....................          putc(Txd_Buff[53]);
0387C:  MOVF   xB0,W
0387E:  CALL   2C3A
....................        
....................          delay_ms(3);
03882:  MOVLW  03
03884:  MOVLB  C
03886:  MOVWF  x23
03888:  MOVLB  0
0388A:  CALL   06AC
....................          output_bit(P485ctrl,0);        
0388E:  BCF    F8A.3
03890:  BCF    F93.3
03892:  MOVLB  1
....................       }
....................    
....................    ///////////////////////////////////////////////////////////////
....................       if(RxD_Buff[0] == Address)
03894:  MOVLB  0
03896:  MOVF   x79,W
03898:  MOVLB  1
0389A:  SUBWF  x7A,W
0389C:  BTFSS  FD8.2
0389E:  GOTO   5E3C
....................       {
....................       
....................          if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
038A2:  DECFSZ x7B,W
038A4:  BRA    3CCA
....................          {
....................                //Do Read Coil
....................                Start_Address = RxD_Buff[2] ;
038A6:  MOVLB  5
038A8:  CLRF   x7F
038AA:  MOVFF  17C,57E
....................                Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
038AE:  MOVFF  57E,57F
038B2:  MOVLB  C
038B4:  CLRF   x23
038B6:  MOVF   x23,W
038B8:  MOVLB  1
038BA:  IORWF  x7D,W
038BC:  MOVLB  5
038BE:  MOVWF  x7E
038C0:  MOVLB  5
....................                No_PointCount = RxD_Buff[4] ;
038C2:  CLRF   x81
038C4:  MOVFF  17E,580
....................                No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //No. of Point 16 bit
038C8:  MOVFF  580,581
038CC:  MOVLB  C
038CE:  CLRF   x23
038D0:  MOVF   x23,W
038D2:  MOVLB  1
038D4:  IORWF  x7F,W
038D6:  MOVLB  5
038D8:  MOVWF  x80
038DA:  MOVLB  5
....................    
....................                if(Start_Address < 0x10 && (Start_Address + No_PointCount) < 0x11)  //Valid point 0-15
038DC:  MOVF   x7F,F
038DE:  BTFSS  FD8.2
038E0:  BRA    3C58
038E2:  MOVF   x7E,W
038E4:  SUBLW  0F
038E6:  BTFSS  FD8.0
038E8:  BRA    3C58
038EA:  MOVF   x80,W
038EC:  ADDWF  x7E,W
038EE:  MOVLB  C
038F0:  MOVWF  x23
038F2:  MOVLB  5
038F4:  MOVF   x81,W
038F6:  ADDWFC x7F,W
038F8:  MOVLB  C
038FA:  MOVWF  x24
038FC:  MOVF   x24,F
038FE:  BTFSC  FD8.2
03900:  BRA    3906
03902:  MOVLB  5
03904:  BRA    3C58
03906:  MOVF   x23,W
03908:  SUBLW  10
0390A:  BTFSC  FD8.0
0390C:  BRA    3912
0390E:  MOVLB  5
03910:  BRA    3C58
....................                {
....................                   if(No_PointCount < 9) Data_ByteCount = 0x01 ;
03912:  MOVLB  5
03914:  MOVF   x81,F
03916:  BNZ   3924
03918:  MOVF   x80,W
0391A:  SUBLW  08
0391C:  BNC   3924
0391E:  MOVLW  01
03920:  MOVWF  x82
03922:  BRA    3948
....................                   else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
03924:  MOVF   x81,F
03926:  BNZ   3934
03928:  MOVF   x80,W
0392A:  SUBLW  10
0392C:  BNC   3934
0392E:  MOVLW  02
03930:  MOVWF  x82
03932:  BRA    3948
....................                   else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
03934:  MOVF   x81,F
03936:  BNZ   3944
03938:  MOVF   x80,W
0393A:  SUBLW  18
0393C:  BNC   3944
0393E:  MOVLW  03
03940:  MOVWF  x82
03942:  BRA    3948
....................                   else   Data_ByteCount = 0x01 ; //----Jack
03944:  MOVLW  01
03946:  MOVWF  x82
....................    
....................                   if(Data_ByteCount == 0x01)
03948:  DECFSZ x82,W
0394A:  BRA    3A90
....................                   {
....................    
....................                      if(Start_Address < 0x09)
0394C:  MOVF   x7F,F
0394E:  BNZ   396A
03950:  MOVF   x7E,W
03952:  SUBLW  08
03954:  BNC   396A
....................                      {
....................                         //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                         //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                         //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                          Data_Buff[0] = Input1_8 >> Start_Address ;
03956:  MOVFF  49,583
0395A:  MOVF   x7E,W
0395C:  MOVWF  01
0395E:  BZ    3968
03960:  BCF    FD8.0
03962:  RRCF   x83,F
03964:  DECFSZ 01,F
03966:  BRA    3960
....................                          //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                          //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                      }
03968:  BRA    399E
....................                      else if(Start_Address > 0x08 && Start_Address < 0x10)
0396A:  MOVF   x7F,F
0396C:  BNZ   3974
0396E:  MOVF   x7E,W
03970:  SUBLW  08
03972:  BC    399E
03974:  MOVF   x7F,F
03976:  BNZ   399E
03978:  MOVF   x7E,W
0397A:  SUBLW  0F
0397C:  BNC   399E
....................                      {
....................                         //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                         Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
0397E:  MOVLW  08
03980:  SUBWF  x7E,W
03982:  MOVWF  00
03984:  MOVLW  00
03986:  SUBWFB x7F,W
03988:  MOVWF  03
0398A:  MOVFF  00,01
0398E:  MOVFF  4A,583
03992:  MOVF   01,F
03994:  BZ    399E
03996:  BCF    FD8.0
03998:  RRCF   x83,F
0399A:  DECFSZ 01,F
0399C:  BRA    3996
....................                      }
....................    
....................    
....................                      if(No_PointCount == 0x08)
0399E:  MOVF   x80,W
039A0:  SUBLW  08
039A2:  BNZ   39AA
039A4:  MOVF   x81,F
039A6:  BNZ   39AA
....................                      {
....................                         Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                      }
039A8:  BRA    3A14
....................                      else if(No_PointCount == 0x07)
039AA:  MOVF   x80,W
039AC:  SUBLW  07
039AE:  BNZ   39B8
039B0:  MOVF   x81,F
039B2:  BNZ   39B8
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
039B4:  BCF    x83.7
....................                      }
039B6:  BRA    3A14
....................                      else if(No_PointCount == 0x06)
039B8:  MOVF   x80,W
039BA:  SUBLW  06
039BC:  BNZ   39C8
039BE:  MOVF   x81,F
039C0:  BNZ   39C8
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
039C2:  MOVLW  3F
039C4:  ANDWF  x83,F
....................                      }
039C6:  BRA    3A14
....................                      else if(No_PointCount == 0x05)
039C8:  MOVF   x80,W
039CA:  SUBLW  05
039CC:  BNZ   39D8
039CE:  MOVF   x81,F
039D0:  BNZ   39D8
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
039D2:  MOVLW  1F
039D4:  ANDWF  x83,F
....................                      }
039D6:  BRA    3A14
....................                      else if(No_PointCount == 0x04)
039D8:  MOVF   x80,W
039DA:  SUBLW  04
039DC:  BNZ   39E8
039DE:  MOVF   x81,F
039E0:  BNZ   39E8
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
039E2:  MOVLW  0F
039E4:  ANDWF  x83,F
....................                      }
039E6:  BRA    3A14
....................                      else if(No_PointCount == 0x03)
039E8:  MOVF   x80,W
039EA:  SUBLW  03
039EC:  BNZ   39F8
039EE:  MOVF   x81,F
039F0:  BNZ   39F8
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
039F2:  MOVLW  07
039F4:  ANDWF  x83,F
....................                      }
039F6:  BRA    3A14
....................                      else if(No_PointCount == 0x02)
039F8:  MOVF   x80,W
039FA:  SUBLW  02
039FC:  BNZ   3A08
039FE:  MOVF   x81,F
03A00:  BNZ   3A08
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
03A02:  MOVLW  03
03A04:  ANDWF  x83,F
....................                      }
03A06:  BRA    3A14
....................                      else if(No_PointCount == 0x01)
03A08:  DECFSZ x80,W
03A0A:  BRA    3A14
03A0C:  MOVF   x81,F
03A0E:  BNZ   3A14
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
03A10:  MOVLW  01
03A12:  ANDWF  x83,F
....................                      }
....................    
....................                      TxD_Buff[0] = Address ;         //Address
03A14:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x01 ;         //Function Code
03A18:  MOVLW  01
03A1A:  MOVLB  0
03A1C:  MOVWF  x7C
....................                      TxD_Buff[2] = Data_ByteCount ;   //Byte Count
03A1E:  MOVFF  582,7D
....................                      TxD_Buff[3] = Data_Buff[0] ;   //Data
03A22:  MOVFF  583,7E
....................    
....................                      CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
03A26:  MOVLB  C
03A28:  CLRF   x25
03A2A:  MOVLW  7B
03A2C:  MOVWF  x24
03A2E:  MOVLW  04
03A30:  MOVWF  x26
03A32:  MOVLB  0
03A34:  CALL   2BE4
....................    
....................                      TxD_Buff[4] = CRC_Hi ;
03A38:  MOVFF  57B,7F
....................                      TxD_Buff[5] = CRC_Lo ;
03A3C:  MOVFF  57A,80
....................    
....................                      //TxD_DataLen = 0x06 ;
....................                      //rs485_ctrl = 1;
....................                      //dmsec(4);
....................                      //send = 1;
....................                      //TI=1;
....................                      output_bit(P485ctrl,1);
03A40:  BSF    F8A.3
03A42:  BCF    F93.3
....................                      restart_wdt();
03A44:  CLRWDT
....................                      delay_ms(4);
03A46:  MOVLW  04
03A48:  MOVLB  C
03A4A:  MOVWF  x23
03A4C:  MOVLB  0
03A4E:  CALL   06AC
....................                      restart_wdt();
03A52:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
03A54:  MOVF   x7B,W
03A56:  CALL   2C3A
....................                      putc(TxD_Buff[1]) ;               //Function Code
03A5A:  MOVF   x7C,W
03A5C:  CALL   2C3A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03A60:  MOVF   x7D,W
03A62:  CALL   2C3A
....................                      putc(TxD_Buff[3]) ;
03A66:  MOVF   x7E,W
03A68:  CALL   2C3A
....................                      putc(TxD_Buff[4]) ;
03A6C:  MOVF   x7F,W
03A6E:  CALL   2C3A
....................                      putc(TxD_Buff[5]) ;
03A72:  MOVF   x80,W
03A74:  CALL   2C3A
....................                      //putc(TxD_Buff[6]) ;
....................                      //putc(TxD_Buff[7]) ;
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................                   
....................                      restart_wdt();
03A78:  CLRWDT
....................                      delay_ms(3);
03A7A:  MOVLW  03
03A7C:  MOVLB  C
03A7E:  MOVWF  x23
03A80:  MOVLB  0
03A82:  CALL   06AC
....................                      restart_wdt();
03A86:  CLRWDT
....................                      output_bit(P485ctrl,0);
03A88:  BCF    F8A.3
03A8A:  BCF    F93.3
....................                  
....................                   }
03A8C:  BRA    3C54
03A8E:  MOVLB  5
....................                   else if(Data_ByteCount == 0x02)
03A90:  MOVF   x82,W
03A92:  SUBLW  02
03A94:  BTFSS  FD8.2
03A96:  BRA    3C56
....................                   {
....................                      //Data_Buff[1] = ~output[1] >> Start_Address ;
....................                      //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                      //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                      
....................                      //Data_Buff[1] = Output9_16 >> Start_Address ;//jj
....................                      //DataTemp = Output9_16 << (0x08 - Start_Address) ;//jj
....................                      //Data_Buff[0] = (Output1_8 >> Start_Address) | DataTemp;   //Low Byte//jj
....................                      Data_Buff[0] = Input1_8 >> Start_Address ;
03A98:  MOVFF  49,583
03A9C:  MOVF   x7E,W
03A9E:  MOVWF  01
03AA0:  BZ    3AAA
03AA2:  BCF    FD8.0
03AA4:  RRCF   x83,F
03AA6:  DECFSZ 01,F
03AA8:  BRA    3AA2
....................                      Data_Buff[1] = Input9_16 ;// >> Start_Address ;
03AAA:  MOVFF  4A,584
....................    
....................    
....................                      if((No_PointCount - 0x07) == 0x08)
03AAE:  MOVLW  07
03AB0:  SUBWF  x80,W
03AB2:  MOVLB  C
03AB4:  MOVWF  x23
03AB6:  MOVLW  00
03AB8:  MOVLB  5
03ABA:  SUBWFB x81,W
03ABC:  MOVLB  C
03ABE:  MOVWF  x24
03AC0:  MOVF   x23,W
03AC2:  SUBLW  08
03AC4:  BNZ   3ACC
03AC6:  MOVF   x24,F
03AC8:  BNZ   3ACC
....................                      {
....................                         Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                      }
03ACA:  BRA    3BD2
....................                      else if((No_PointCount - 0x07) == 0x07)
03ACC:  MOVLW  07
03ACE:  MOVLB  5
03AD0:  SUBWF  x80,W
03AD2:  MOVLB  C
03AD4:  MOVWF  x23
03AD6:  MOVLW  00
03AD8:  MOVLB  5
03ADA:  SUBWFB x81,W
03ADC:  MOVLB  C
03ADE:  MOVWF  x24
03AE0:  MOVF   x23,W
03AE2:  SUBLW  07
03AE4:  BNZ   3AF0
03AE6:  MOVF   x24,F
03AE8:  BNZ   3AF0
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
03AEA:  MOVLB  5
03AEC:  BCF    x84.7
....................                      }
03AEE:  BRA    3BD0
....................                      else if((No_PointCount - 0x07) == 0x06)
03AF0:  MOVLW  07
03AF2:  MOVLB  5
03AF4:  SUBWF  x80,W
03AF6:  MOVLB  C
03AF8:  MOVWF  x23
03AFA:  MOVLW  00
03AFC:  MOVLB  5
03AFE:  SUBWFB x81,W
03B00:  MOVLB  C
03B02:  MOVWF  x24
03B04:  MOVF   x23,W
03B06:  SUBLW  06
03B08:  BNZ   3B16
03B0A:  MOVF   x24,F
03B0C:  BNZ   3B16
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
03B0E:  MOVLW  3F
03B10:  MOVLB  5
03B12:  ANDWF  x84,F
....................                      }
03B14:  BRA    3BD0
....................                      else if((No_PointCount - 0x07) == 0x05)
03B16:  MOVLW  07
03B18:  MOVLB  5
03B1A:  SUBWF  x80,W
03B1C:  MOVLB  C
03B1E:  MOVWF  x23
03B20:  MOVLW  00
03B22:  MOVLB  5
03B24:  SUBWFB x81,W
03B26:  MOVLB  C
03B28:  MOVWF  x24
03B2A:  MOVF   x23,W
03B2C:  SUBLW  05
03B2E:  BNZ   3B3C
03B30:  MOVF   x24,F
03B32:  BNZ   3B3C
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
03B34:  MOVLW  1F
03B36:  MOVLB  5
03B38:  ANDWF  x84,F
....................                      }
03B3A:  BRA    3BD0
....................                      else if((No_PointCount - 0x07) == 0x04)
03B3C:  MOVLW  07
03B3E:  MOVLB  5
03B40:  SUBWF  x80,W
03B42:  MOVLB  C
03B44:  MOVWF  x23
03B46:  MOVLW  00
03B48:  MOVLB  5
03B4A:  SUBWFB x81,W
03B4C:  MOVLB  C
03B4E:  MOVWF  x24
03B50:  MOVF   x23,W
03B52:  SUBLW  04
03B54:  BNZ   3B62
03B56:  MOVF   x24,F
03B58:  BNZ   3B62
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
03B5A:  MOVLW  0F
03B5C:  MOVLB  5
03B5E:  ANDWF  x84,F
....................                      }
03B60:  BRA    3BD0
....................                      else if((No_PointCount - 0x07) == 0x03)
03B62:  MOVLW  07
03B64:  MOVLB  5
03B66:  SUBWF  x80,W
03B68:  MOVLB  C
03B6A:  MOVWF  x23
03B6C:  MOVLW  00
03B6E:  MOVLB  5
03B70:  SUBWFB x81,W
03B72:  MOVLB  C
03B74:  MOVWF  x24
03B76:  MOVF   x23,W
03B78:  SUBLW  03
03B7A:  BNZ   3B88
03B7C:  MOVF   x24,F
03B7E:  BNZ   3B88
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
03B80:  MOVLW  07
03B82:  MOVLB  5
03B84:  ANDWF  x84,F
....................                      }
03B86:  BRA    3BD0
....................                      else if((No_PointCount - 0x07) == 0x02)
03B88:  MOVLW  07
03B8A:  MOVLB  5
03B8C:  SUBWF  x80,W
03B8E:  MOVLB  C
03B90:  MOVWF  x23
03B92:  MOVLW  00
03B94:  MOVLB  5
03B96:  SUBWFB x81,W
03B98:  MOVLB  C
03B9A:  MOVWF  x24
03B9C:  MOVF   x23,W
03B9E:  SUBLW  02
03BA0:  BNZ   3BAE
03BA2:  MOVF   x24,F
03BA4:  BNZ   3BAE
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
03BA6:  MOVLW  03
03BA8:  MOVLB  5
03BAA:  ANDWF  x84,F
....................                      }
03BAC:  BRA    3BD0
....................                      else if((No_PointCount - 0x07) == 0x01)
03BAE:  MOVLW  07
03BB0:  MOVLB  5
03BB2:  SUBWF  x80,W
03BB4:  MOVLB  C
03BB6:  MOVWF  x23
03BB8:  MOVLW  00
03BBA:  MOVLB  5
03BBC:  SUBWFB x81,W
03BBE:  MOVLB  C
03BC0:  MOVWF  x24
03BC2:  DECFSZ x23,W
03BC4:  BRA    3BD2
03BC6:  MOVF   x24,F
03BC8:  BNZ   3BD2
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
03BCA:  MOVLW  01
03BCC:  MOVLB  5
03BCE:  ANDWF  x84,F
03BD0:  MOVLB  C
....................                      }
....................    
....................                      TxD_Buff[0] = Address ;         //Address
03BD2:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x01 ;         //Function Code
03BD6:  MOVLW  01
03BD8:  MOVLB  0
03BDA:  MOVWF  x7C
....................                      TxD_Buff[2] = Data_ByteCount ;   //Byte Count
03BDC:  MOVFF  582,7D
....................                      TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
03BE0:  MOVFF  583,7E
....................                      TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
03BE4:  MOVFF  584,7F
....................    
....................                      CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
03BE8:  MOVLB  C
03BEA:  CLRF   x25
03BEC:  MOVLW  7B
03BEE:  MOVWF  x24
03BF0:  MOVLW  05
03BF2:  MOVWF  x26
03BF4:  MOVLB  0
03BF6:  CALL   2BE4
....................    
....................                      TxD_Buff[5] = CRC_Hi ;
03BFA:  MOVFF  57B,80
....................                      TxD_Buff[6] = CRC_Lo ;
03BFE:  MOVFF  57A,81
....................    
....................                      //TxD_DataLen = 0x07 ;
....................                      //rs485_ctrl = 1;
....................                      //dmsec(4);
....................                      //send = 1;
....................                      //TI=1;
....................                      output_bit(P485ctrl,1);
03C02:  BSF    F8A.3
03C04:  BCF    F93.3
....................                      restart_wdt();
03C06:  CLRWDT
....................                      delay_ms(4);
03C08:  MOVLW  04
03C0A:  MOVLB  C
03C0C:  MOVWF  x23
03C0E:  MOVLB  0
03C10:  CALL   06AC
....................                      restart_wdt();
03C14:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
03C16:  MOVF   x7B,W
03C18:  CALL   2C3A
....................                      putc(TxD_Buff[1]) ;               //Function Code
03C1C:  MOVF   x7C,W
03C1E:  CALL   2C3A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03C22:  MOVF   x7D,W
03C24:  CALL   2C3A
....................                      putc(TxD_Buff[3]) ;
03C28:  MOVF   x7E,W
03C2A:  CALL   2C3A
....................                      putc(TxD_Buff[4]) ;
03C2E:  MOVF   x7F,W
03C30:  CALL   2C3A
....................                      putc(TxD_Buff[5]) ;
03C34:  MOVF   x80,W
03C36:  CALL   2C3A
....................                      putc(TxD_Buff[6]) ;
03C3A:  MOVF   x81,W
03C3C:  CALL   2C3A
....................                      //putc(TxD_Buff[7]) ;
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
03C40:  CLRWDT
....................                      delay_ms(3);
03C42:  MOVLW  03
03C44:  MOVLB  C
03C46:  MOVWF  x23
03C48:  MOVLB  0
03C4A:  CALL   06AC
....................                      restart_wdt();
03C4E:  CLRWDT
....................                      output_bit(P485ctrl,0);
03C50:  BCF    F8A.3
03C52:  BCF    F93.3
03C54:  MOVLB  5
....................                  
....................                   }
....................                }
03C56:  BRA    3CC8
....................                else
....................                {
....................                   //invalid parameter
....................                   TxD_Buff[0] = Address ;         //Address
03C58:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x81 ;         //Function Code
03C5C:  MOVLW  81
03C5E:  MOVLB  0
03C60:  MOVWF  x7C
....................                   TxD_Buff[2] = 0x02 ;         //illegal data address
03C62:  MOVLW  02
03C64:  MOVWF  x7D
....................    
....................                   CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
03C66:  MOVLB  C
03C68:  CLRF   x25
03C6A:  MOVLW  7B
03C6C:  MOVWF  x24
03C6E:  MOVLW  03
03C70:  MOVWF  x26
03C72:  MOVLB  0
03C74:  CALL   2BE4
....................    
....................                   TxD_Buff[3] = CRC_Hi ;
03C78:  MOVFF  57B,7E
....................                   TxD_Buff[4] = CRC_Lo ;
03C7C:  MOVFF  57A,7F
....................    
....................                   //TxD_DataLen = 0x05 ;
....................                   //rs485_ctrl = 1;
....................                   //restart_wdt();
....................                   //dmsec(4);
....................                   //restart_wdt();
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
03C80:  BSF    F8A.3
03C82:  BCF    F93.3
....................                   restart_wdt();
03C84:  CLRWDT
....................                   delay_ms(4);
03C86:  MOVLW  04
03C88:  MOVLB  C
03C8A:  MOVWF  x23
03C8C:  MOVLB  0
03C8E:  CALL   06AC
....................                   restart_wdt();
03C92:  CLRWDT
....................    
....................                   putc(TxD_Buff[0]) ;               //Address
03C94:  MOVF   x7B,W
03C96:  CALL   2C3A
....................                   putc(TxD_Buff[1]) ;               //Function Code
03C9A:  MOVF   x7C,W
03C9C:  CALL   2C3A
....................                   putc(TxD_Buff[2]) ;               //Byte Count
03CA0:  MOVF   x7D,W
03CA2:  CALL   2C3A
....................                   putc(TxD_Buff[3]) ;
03CA6:  MOVF   x7E,W
03CA8:  CALL   2C3A
....................                   putc(TxD_Buff[4]) ;
03CAC:  MOVF   x7F,W
03CAE:  CALL   2C3A
....................                  //putc(TxD_Buff[5]) ;
....................                   //putc(TxD_Buff[6]) ;
....................                   //putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
....................    
....................                   restart_wdt();
03CB2:  CLRWDT
....................                   delay_ms(3);
03CB4:  MOVLW  03
03CB6:  MOVLB  C
03CB8:  MOVWF  x23
03CBA:  MOVLB  0
03CBC:  CALL   06AC
....................                   restart_wdt();
03CC0:  CLRWDT
....................                   output_bit(P485ctrl,0);
03CC2:  BCF    F8A.3
03CC4:  BCF    F93.3
03CC6:  MOVLB  5
03CC8:  MOVLB  1
....................                   
....................                }
....................             }
....................    
....................     
....................          if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
03CCA:  MOVF   x7B,W
03CCC:  SUBLW  07
03CCE:  BTFSS  FD8.2
03CD0:  BRA    3E34
....................          {
....................             alarmtosend();
03CD2:  MOVLB  0
03CD4:  GOTO   2C42
....................             
....................             disable_interrupts(INT_TIMER2);
03CD8:  BCF    F9D.1
....................             //----------------------------------jj----------------------------//
....................             
....................                Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
03CDA:  MOVFF  1E,583
....................                Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
03CDE:  MOVFF  1F,584
....................                Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
03CE2:  MOVFF  20,585
....................                Data_Buff[3] = Input25_32_Send ;
03CE6:  MOVFF  21,586
....................                Data_Buff[4] = Input33_40_Send ;
03CEA:  MOVFF  22,587
....................                Data_Buff[5] = Input41_48_Send ;
03CEE:  MOVFF  23,588
....................                Data_Buff[6] = Input49_56_Send ;
03CF2:  MOVFF  24,589
....................                Data_Buff[7] = Input57_64_Send ;
03CF6:  MOVFF  25,58A
....................               
....................                Data_Buff[8] = Ack1_8_Send ;
03CFA:  MOVFF  26,58B
....................                Data_Buff[9] = Ack9_16_Send ;
03CFE:  MOVFF  27,58C
....................                Data_Buff[10] = Ack17_24_Send ;
03D02:  MOVFF  28,58D
....................                Data_Buff[11] = Ack25_32_Send ;
03D06:  MOVFF  29,58E
....................                Data_Buff[12] = Ack33_40_Send ;
03D0A:  MOVFF  2A,58F
....................                Data_Buff[13] = Ack41_48_Send ;
03D0E:  MOVFF  2B,590
....................                Data_Buff[14] = Ack49_56_Send ;
03D12:  MOVFF  2C,591
....................                Data_Buff[15] = Ack57_64_Send ;
03D16:  MOVFF  2D,592
....................       
....................                
....................                
....................                TxD_Buff[0] = Address ;         //Address
03D1A:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x07 ;         //Function Code
03D1E:  MOVLW  07
03D20:  MOVWF  x7C
....................                TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
03D22:  MOVLW  10
03D24:  MOVLB  5
03D26:  MOVWF  x82
03D28:  MOVFF  582,7D
....................                TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
03D2C:  MOVFF  583,7E
....................                TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
03D30:  MOVFF  584,7F
....................                TxD_Buff[5] = Data_Buff[2] ;  
03D34:  MOVFF  585,80
....................                TxD_Buff[6] = Data_Buff[3] ;
03D38:  MOVFF  586,81
....................                TxD_Buff[7] = Data_Buff[4] ;
03D3C:  MOVFF  587,82
....................                TxD_Buff[8] = Data_Buff[5] ;
03D40:  MOVFF  588,83
....................                TxD_Buff[9] = Data_Buff[6] ;
03D44:  MOVFF  589,84
....................                TxD_Buff[10] = Data_Buff[7] ;
03D48:  MOVFF  58A,85
....................                  
....................               TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
03D4C:  MOVFF  58B,86
....................               TxD_Buff[12] = Data_Buff[9] ;
03D50:  MOVFF  58C,87
....................               TxD_Buff[13] = Data_Buff[10] ;
03D54:  MOVFF  58D,88
....................               TxD_Buff[14] = Data_Buff[11] ;
03D58:  MOVFF  58E,89
....................               TxD_Buff[15] = Data_Buff[12] ;
03D5C:  MOVFF  58F,8A
....................               TxD_Buff[16] = Data_Buff[13] ;
03D60:  MOVFF  590,8B
....................               TxD_Buff[17] = Data_Buff[14] ;
03D64:  MOVFF  591,8C
....................               TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
03D68:  MOVFF  592,8D
....................    
....................               CRC(TxD_Buff,19);            //Cal CRC 5 Byte
03D6C:  MOVLB  C
03D6E:  CLRF   x25
03D70:  MOVLW  7B
03D72:  MOVWF  x24
03D74:  MOVLW  13
03D76:  MOVWF  x26
03D78:  MOVLB  0
03D7A:  CALL   2BE4
....................    
....................              TxD_Buff[19] = CRC_Hi ;
03D7E:  MOVFF  57B,8E
....................              TxD_Buff[20] = CRC_Lo ;
03D82:  MOVFF  57A,8F
....................    
....................            
....................             output_bit(P485ctrl,1);
03D86:  BSF    F8A.3
03D88:  BCF    F93.3
....................             restart_wdt();
03D8A:  CLRWDT
....................             delay_ms(4);
03D8C:  MOVLW  04
03D8E:  MOVLB  C
03D90:  MOVWF  x23
03D92:  MOVLB  0
03D94:  CALL   06AC
....................             restart_wdt();
03D98:  CLRWDT
....................             
....................             
....................             
....................             putc(TxD_Buff[0]) ;               //Address
03D9A:  MOVF   x7B,W
03D9C:  CALL   2C3A
....................             putc(TxD_Buff[1]) ;               //Function Code
03DA0:  MOVF   x7C,W
03DA2:  CALL   2C3A
....................             putc(TxD_Buff[2]) ;               //Byte Count
03DA6:  MOVF   x7D,W
03DA8:  CALL   2C3A
....................             putc(TxD_Buff[3]) ;
03DAC:  MOVF   x7E,W
03DAE:  CALL   2C3A
....................             putc(TxD_Buff[4]) ;
03DB2:  MOVF   x7F,W
03DB4:  CALL   2C3A
....................             putc(TxD_Buff[5]) ;
03DB8:  MOVF   x80,W
03DBA:  CALL   2C3A
....................             putc(TxD_Buff[6]) ;
03DBE:  MOVF   x81,W
03DC0:  CALL   2C3A
....................             putc(TxD_Buff[7]) ;
03DC4:  MOVF   x82,W
03DC6:  CALL   2C3A
....................             putc(TxD_Buff[8]) ;
03DCA:  MOVF   x83,W
03DCC:  CALL   2C3A
....................             putc(TxD_Buff[9]) ;
03DD0:  MOVF   x84,W
03DD2:  CALL   2C3A
....................             putc(TxD_Buff[10]) ;
03DD6:  MOVF   x85,W
03DD8:  CALL   2C3A
....................             putc(TxD_Buff[11]) ;
03DDC:  MOVF   x86,W
03DDE:  CALL   2C3A
....................             putc(TxD_Buff[12]) ;
03DE2:  MOVF   x87,W
03DE4:  CALL   2C3A
....................             putc(TxD_Buff[13]) ;
03DE8:  MOVF   x88,W
03DEA:  CALL   2C3A
....................             putc(TxD_Buff[14]) ;
03DEE:  MOVF   x89,W
03DF0:  CALL   2C3A
....................             putc(TxD_Buff[15]) ;
03DF4:  MOVF   x8A,W
03DF6:  CALL   2C3A
....................             putc(TxD_Buff[16]) ;
03DFA:  MOVF   x8B,W
03DFC:  CALL   2C3A
....................             putc(TxD_Buff[17]) ;
03E00:  MOVF   x8C,W
03E02:  CALL   2C3A
....................             putc(TxD_Buff[18]) ;
03E06:  MOVF   x8D,W
03E08:  CALL   2C3A
....................             putc(TxD_Buff[19]) ;
03E0C:  MOVF   x8E,W
03E0E:  CALL   2C3A
....................             putc(TxD_Buff[20]) ;
03E12:  MOVF   x8F,W
03E14:  CALL   2C3A
....................    
....................             restart_wdt();
03E18:  CLRWDT
....................             delay_ms(3);
03E1A:  MOVLW  03
03E1C:  MOVLB  C
03E1E:  MOVWF  x23
03E20:  MOVLB  0
03E22:  CALL   06AC
....................             restart_wdt();
03E26:  CLRWDT
....................             output_bit(P485ctrl,0);
03E28:  BCF    F8A.3
03E2A:  BCF    F93.3
....................               
....................            
....................             /////////////////////////////////////////
....................             
....................            enable_interrupts(INT_TIMER2); 
03E2C:  BSF    F9D.1
....................         
....................           }
03E2E:  GOTO   5DA6
03E32:  MOVLB  1
....................    
....................           else if(RxD_Buff[1] == 0x05)///////////// FORCE COIL /////////////////////
03E34:  MOVF   x7B,W
03E36:  SUBLW  05
03E38:  BTFSS  FD8.2
03E3A:  BRA    4328
....................           {
....................                //Do Force Coil
....................                Start_Address = RxD_Buff[2] ;
03E3C:  MOVLB  5
03E3E:  CLRF   x7F
03E40:  MOVFF  17C,57E
....................                Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Coil Address 16 bit
03E44:  MOVFF  57E,57F
03E48:  MOVLB  C
03E4A:  CLRF   x23
03E4C:  MOVF   x23,W
03E4E:  MOVLB  1
03E50:  IORWF  x7D,W
03E52:  MOVLB  5
03E54:  MOVWF  x7E
03E56:  MOVLB  5
....................                No_PointCount = RxD_Buff[4] ;
03E58:  CLRF   x81
03E5A:  MOVFF  17E,580
....................                No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //Force Data 16 bit FF00 = ON, 00FF = OFF
03E5E:  MOVFF  580,581
03E62:  MOVLB  C
03E64:  CLRF   x23
03E66:  MOVF   x23,W
03E68:  MOVLB  1
03E6A:  IORWF  x7F,W
03E6C:  MOVLB  5
03E6E:  MOVWF  x80
03E70:  MOVLB  5
....................    
....................                if(Start_Address == 0x00)   ////// Acknowlegde //////
03E72:  MOVF   x7E,F
03E74:  BNZ   3F14
03E76:  MOVF   x7F,F
03E78:  BNZ   3F14
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
03E7A:  MOVF   x80,F
03E7C:  BNZ   3F12
03E7E:  INCFSZ x81,W
03E80:  BRA    3F12
....................                   {
....................                      //Modbus_ACK = 1 ;
....................                      AutoAckFlag = 1;
03E82:  BSF    1A.2
....................    
....................                      TxD_Buff[0] = Address ;         //Address
03E84:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
03E88:  MOVLW  05
03E8A:  MOVLB  0
03E8C:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
03E8E:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
03E92:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03E96:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03E9A:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6);            //Cal CRC 6 Byte
03E9E:  MOVLB  C
03EA0:  CLRF   x25
03EA2:  MOVLW  7B
03EA4:  MOVWF  x24
03EA6:  MOVLW  06
03EA8:  MOVWF  x26
03EAA:  MOVLB  0
03EAC:  CALL   2BE4
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
03EB0:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
03EB4:  MOVFF  57A,82
....................    
....................                  output_bit(P485ctrl,1);
03EB8:  BSF    F8A.3
03EBA:  BCF    F93.3
....................                      restart_wdt();
03EBC:  CLRWDT
....................                      delay_ms(4);
03EBE:  MOVLW  04
03EC0:  MOVLB  C
03EC2:  MOVWF  x23
03EC4:  MOVLB  0
03EC6:  CALL   06AC
....................                      restart_wdt();
03ECA:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
03ECC:  MOVF   x7B,W
03ECE:  CALL   2C3A
....................                      putc(TxD_Buff[1]) ;               //Function Code
03ED2:  MOVF   x7C,W
03ED4:  CALL   2C3A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03ED8:  MOVF   x7D,W
03EDA:  CALL   2C3A
....................                      putc(TxD_Buff[3]) ;
03EDE:  MOVF   x7E,W
03EE0:  CALL   2C3A
....................                      putc(TxD_Buff[4]) ;
03EE4:  MOVF   x7F,W
03EE6:  CALL   2C3A
....................                      putc(TxD_Buff[5]) ;
03EEA:  MOVF   x80,W
03EEC:  CALL   2C3A
....................                      putc(TxD_Buff[6]) ;
03EF0:  MOVF   x81,W
03EF2:  CALL   2C3A
....................                      putc(TxD_Buff[7]) ;
03EF6:  MOVF   x82,W
03EF8:  CALL   2C3A
....................    
....................                      restart_wdt();
03EFC:  CLRWDT
....................                      delay_ms(3);
03EFE:  MOVLW  03
03F00:  MOVLB  C
03F02:  MOVWF  x23
03F04:  MOVLB  0
03F06:  CALL   06AC
....................                      restart_wdt();
03F0A:  CLRWDT
....................                      output_bit(P485ctrl,0);
03F0C:  BCF    F8A.3
03F0E:  BCF    F93.3
03F10:  MOVLB  5
....................                  
....................                   }
....................                }
03F12:  BRA    4322
....................                else if(Start_Address == 0x01)   ///// Reset //////
03F14:  DECFSZ x7E,W
03F16:  BRA    3FB6
03F18:  MOVF   x7F,F
03F1A:  BNZ   3FB6
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
03F1C:  MOVF   x80,F
03F1E:  BNZ   3FB4
03F20:  INCFSZ x81,W
03F22:  BRA    3FB4
....................                   {
....................                      //Modbus_RET = 1 ;
....................                      AutoResetFlag = 1;
03F24:  BSF    1A.3
....................                      
....................                      TxD_Buff[0] = Address ;         //Address
03F26:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
03F2A:  MOVLW  05
03F2C:  MOVLB  0
03F2E:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
03F30:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
03F34:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03F38:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03F3C:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
03F40:  MOVLB  C
03F42:  CLRF   x25
03F44:  MOVLW  7B
03F46:  MOVWF  x24
03F48:  MOVLW  06
03F4A:  MOVWF  x26
03F4C:  MOVLB  0
03F4E:  CALL   2BE4
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
03F52:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
03F56:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
03F5A:  BSF    F8A.3
03F5C:  BCF    F93.3
....................                      restart_wdt();
03F5E:  CLRWDT
....................                      delay_ms(4);
03F60:  MOVLW  04
03F62:  MOVLB  C
03F64:  MOVWF  x23
03F66:  MOVLB  0
03F68:  CALL   06AC
....................                      restart_wdt();
03F6C:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
03F6E:  MOVF   x7B,W
03F70:  CALL   2C3A
....................                      putc(TxD_Buff[1]) ;               //Function Code
03F74:  MOVF   x7C,W
03F76:  CALL   2C3A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
03F7A:  MOVF   x7D,W
03F7C:  CALL   2C3A
....................                      putc(TxD_Buff[3]) ;
03F80:  MOVF   x7E,W
03F82:  CALL   2C3A
....................                      putc(TxD_Buff[4]) ;
03F86:  MOVF   x7F,W
03F88:  CALL   2C3A
....................                      putc(TxD_Buff[5]) ;
03F8C:  MOVF   x80,W
03F8E:  CALL   2C3A
....................                      putc(TxD_Buff[6]) ;
03F92:  MOVF   x81,W
03F94:  CALL   2C3A
....................                      putc(TxD_Buff[7]) ;
03F98:  MOVF   x82,W
03F9A:  CALL   2C3A
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
03F9E:  CLRWDT
....................                      delay_ms(3);
03FA0:  MOVLW  03
03FA2:  MOVLB  C
03FA4:  MOVWF  x23
03FA6:  MOVLB  0
03FA8:  CALL   06AC
....................                      restart_wdt();
03FAC:  CLRWDT
....................                      output_bit(P485ctrl,0);
03FAE:  BCF    F8A.3
03FB0:  BCF    F93.3
03FB2:  MOVLB  5
....................                  
....................                   }
....................                }
03FB4:  BRA    4322
....................                else if(Start_Address == 0x02)   ///// Test //////
03FB6:  MOVF   x7E,W
03FB8:  SUBLW  02
03FBA:  BTFSS  FD8.2
03FBC:  BRA    4108
03FBE:  MOVF   x7F,F
03FC0:  BTFSS  FD8.2
03FC2:  BRA    4108
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
03FC4:  MOVF   x80,F
03FC6:  BNZ   405E
03FC8:  INCFSZ x81,W
03FCA:  BRA    405E
....................                   {
....................                      //Modbus_Lamp_Test = 1 ;
....................                      AutoTestFlag = 1;
03FCC:  BSF    1A.4
....................    
....................                      TxD_Buff[0] = Address ;         //Address
03FCE:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
03FD2:  MOVLW  05
03FD4:  MOVLB  0
03FD6:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
03FD8:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
03FDC:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03FE0:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03FE4:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
03FE8:  MOVLB  C
03FEA:  CLRF   x25
03FEC:  MOVLW  7B
03FEE:  MOVWF  x24
03FF0:  MOVLW  06
03FF2:  MOVWF  x26
03FF4:  MOVLB  0
03FF6:  CALL   2BE4
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
03FFA:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
03FFE:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
04002:  BSF    F8A.3
04004:  BCF    F93.3
....................                      restart_wdt();
04006:  CLRWDT
....................                      delay_ms(4);
04008:  MOVLW  04
0400A:  MOVLB  C
0400C:  MOVWF  x23
0400E:  MOVLB  0
04010:  CALL   06AC
....................                      restart_wdt();
04014:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
04016:  MOVF   x7B,W
04018:  CALL   2C3A
....................                      putc(TxD_Buff[1]) ;               //Function Code
0401C:  MOVF   x7C,W
0401E:  CALL   2C3A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
04022:  MOVF   x7D,W
04024:  CALL   2C3A
....................                      putc(TxD_Buff[3]) ;
04028:  MOVF   x7E,W
0402A:  CALL   2C3A
....................                      putc(TxD_Buff[4]) ;
0402E:  MOVF   x7F,W
04030:  CALL   2C3A
....................                      putc(TxD_Buff[5]) ;
04034:  MOVF   x80,W
04036:  CALL   2C3A
....................                      putc(TxD_Buff[6]) ;
0403A:  MOVF   x81,W
0403C:  CALL   2C3A
....................                      putc(TxD_Buff[7]) ;
04040:  MOVF   x82,W
04042:  CALL   2C3A
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
04046:  CLRWDT
....................                      delay_ms(3);
04048:  MOVLW  03
0404A:  MOVLB  C
0404C:  MOVWF  x23
0404E:  MOVLB  0
04050:  CALL   06AC
....................                      restart_wdt();
04054:  CLRWDT
....................                      output_bit(P485ctrl,0);
04056:  BCF    F8A.3
04058:  BCF    F93.3
....................                 
....................                   }
0405A:  BRA    4104
0405C:  MOVLB  5
....................                   else if(No_PointCount == 0x00)   //OFF
0405E:  MOVF   x80,F
04060:  BNZ   4106
04062:  MOVF   x81,F
04064:  BNZ   4106
....................                   {
....................                      //Modbus_Lamp_Test = 0 ;
....................                      AutoTestFlag = 0;
04066:  BCF    1A.4
....................                      Read_input();
04068:  MOVLB  0
0406A:  CALL   1DD6
....................                      AutoAckFlag = 1;
0406E:  BSF    1A.2
....................                      check_ack();
04070:  CALL   2F90
....................                      AutoResetFlag = 1;
04074:  BSF    1A.3
....................                      check_reset();
04076:  CALL   30DE
....................    
....................                      TxD_Buff[0] = Address ;         //Address
0407A:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
0407E:  MOVLW  05
04080:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04082:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04086:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
0408A:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
0408E:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04092:  MOVLB  C
04094:  CLRF   x25
04096:  MOVLW  7B
04098:  MOVWF  x24
0409A:  MOVLW  06
0409C:  MOVWF  x26
0409E:  MOVLB  0
040A0:  CALL   2BE4
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
040A4:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
040A8:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
040AC:  BSF    F8A.3
040AE:  BCF    F93.3
....................                      restart_wdt();
040B0:  CLRWDT
....................                      delay_ms(4);
040B2:  MOVLW  04
040B4:  MOVLB  C
040B6:  MOVWF  x23
040B8:  MOVLB  0
040BA:  CALL   06AC
....................                      restart_wdt();
040BE:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
040C0:  MOVF   x7B,W
040C2:  CALL   2C3A
....................                      putc(TxD_Buff[1]) ;               //Function Code
040C6:  MOVF   x7C,W
040C8:  CALL   2C3A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
040CC:  MOVF   x7D,W
040CE:  CALL   2C3A
....................                      putc(TxD_Buff[3]) ;
040D2:  MOVF   x7E,W
040D4:  CALL   2C3A
....................                      putc(TxD_Buff[4]) ;
040D8:  MOVF   x7F,W
040DA:  CALL   2C3A
....................                      putc(TxD_Buff[5]) ;
040DE:  MOVF   x80,W
040E0:  CALL   2C3A
....................                      putc(TxD_Buff[6]) ;
040E4:  MOVF   x81,W
040E6:  CALL   2C3A
....................                      putc(TxD_Buff[7]) ;
040EA:  MOVF   x82,W
040EC:  CALL   2C3A
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
040F0:  CLRWDT
....................                      delay_ms(3);
040F2:  MOVLW  03
040F4:  MOVLB  C
040F6:  MOVWF  x23
040F8:  MOVLB  0
040FA:  CALL   06AC
....................                      restart_wdt();
040FE:  CLRWDT
....................                      output_bit(P485ctrl,0);
04100:  BCF    F8A.3
04102:  BCF    F93.3
04104:  MOVLB  5
....................                      
....................                   }
....................                }
04106:  BRA    4322
....................                else if(Start_Address == 0x03)   ///// Function Test //////
04108:  MOVF   x7E,W
0410A:  SUBLW  03
0410C:  BTFSS  FD8.2
0410E:  BRA    425A
04110:  MOVF   x7F,F
04112:  BTFSS  FD8.2
04114:  BRA    425A
....................                {
....................                   if(No_PointCount == 0xFF00)   //ON
04116:  MOVF   x80,F
04118:  BNZ   41B0
0411A:  INCFSZ x81,W
0411C:  BRA    41B0
....................                   {
....................                      //Modbus_Lamp_Test = 1 ;
....................                      Test_fault = 1 ;
0411E:  BSF    1A.5
....................    
....................                      TxD_Buff[0] = Address ;         //Address
04120:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
04124:  MOVLW  05
04126:  MOVLB  0
04128:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0412A:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
0412E:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04132:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04136:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
0413A:  MOVLB  C
0413C:  CLRF   x25
0413E:  MOVLW  7B
04140:  MOVWF  x24
04142:  MOVLW  06
04144:  MOVWF  x26
04146:  MOVLB  0
04148:  CALL   2BE4
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
0414C:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
04150:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
04154:  BSF    F8A.3
04156:  BCF    F93.3
....................                      restart_wdt();
04158:  CLRWDT
....................                      delay_ms(4);
0415A:  MOVLW  04
0415C:  MOVLB  C
0415E:  MOVWF  x23
04160:  MOVLB  0
04162:  CALL   06AC
....................                      restart_wdt();
04166:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
04168:  MOVF   x7B,W
0416A:  CALL   2C3A
....................                      putc(TxD_Buff[1]) ;               //Function Code
0416E:  MOVF   x7C,W
04170:  CALL   2C3A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
04174:  MOVF   x7D,W
04176:  CALL   2C3A
....................                      putc(TxD_Buff[3]) ;
0417A:  MOVF   x7E,W
0417C:  CALL   2C3A
....................                      putc(TxD_Buff[4]) ;
04180:  MOVF   x7F,W
04182:  CALL   2C3A
....................                      putc(TxD_Buff[5]) ;
04186:  MOVF   x80,W
04188:  CALL   2C3A
....................                      putc(TxD_Buff[6]) ;
0418C:  MOVF   x81,W
0418E:  CALL   2C3A
....................                      putc(TxD_Buff[7]) ;
04192:  MOVF   x82,W
04194:  CALL   2C3A
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
04198:  CLRWDT
....................                      delay_ms(10);
0419A:  MOVLW  0A
0419C:  MOVLB  C
0419E:  MOVWF  x23
041A0:  MOVLB  0
041A2:  CALL   06AC
....................                      restart_wdt();
041A6:  CLRWDT
....................                      output_bit(P485ctrl,0);
041A8:  BCF    F8A.3
041AA:  BCF    F93.3
....................                   }
041AC:  BRA    4256
041AE:  MOVLB  5
....................                   else if(No_PointCount == 0x00)   //OFF
041B0:  MOVF   x80,F
041B2:  BNZ   4258
041B4:  MOVF   x81,F
041B6:  BNZ   4258
....................                   {
....................                      //Modbus_Lamp_Test = 0 ;
....................                      Test_fault = 0;
041B8:  BCF    1A.5
....................                      Read_input();
041BA:  MOVLB  0
041BC:  CALL   1DD6
....................                      AutoAckFlag = 1;
041C0:  BSF    1A.2
....................                      check_ack();
041C2:  CALL   2F90
....................                      AutoResetFlag = 1;
041C6:  BSF    1A.3
....................                      check_reset();
041C8:  CALL   30DE
....................    
....................                      TxD_Buff[0] = Address ;         //Address
041CC:  MOVFF  79,7B
....................                      TxD_Buff[1] = 0x05 ;         //Function Code
041D0:  MOVLW  05
041D2:  MOVWF  x7C
....................                      TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
041D4:  MOVFF  17C,7D
....................                      TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
041D8:  MOVFF  17D,7E
....................                      TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
041DC:  MOVFF  17E,7F
....................                      TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
041E0:  MOVFF  17F,80
....................    
....................                      CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
041E4:  MOVLB  C
041E6:  CLRF   x25
041E8:  MOVLW  7B
041EA:  MOVWF  x24
041EC:  MOVLW  06
041EE:  MOVWF  x26
041F0:  MOVLB  0
041F2:  CALL   2BE4
....................    
....................                      TxD_Buff[6] = CRC_Hi ;
041F6:  MOVFF  57B,81
....................                      TxD_Buff[7] = CRC_Lo ;
041FA:  MOVFF  57A,82
....................    
....................                      output_bit(P485ctrl,1);
041FE:  BSF    F8A.3
04200:  BCF    F93.3
....................                      restart_wdt();
04202:  CLRWDT
....................                      delay_ms(4);
04204:  MOVLW  04
04206:  MOVLB  C
04208:  MOVWF  x23
0420A:  MOVLB  0
0420C:  CALL   06AC
....................                      restart_wdt();
04210:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
04212:  MOVF   x7B,W
04214:  CALL   2C3A
....................                      putc(TxD_Buff[1]) ;               //Function Code
04218:  MOVF   x7C,W
0421A:  CALL   2C3A
....................                      putc(TxD_Buff[2]) ;               //Byte Count
0421E:  MOVF   x7D,W
04220:  CALL   2C3A
....................                      putc(TxD_Buff[3]) ;
04224:  MOVF   x7E,W
04226:  CALL   2C3A
....................                      putc(TxD_Buff[4]) ;
0422A:  MOVF   x7F,W
0422C:  CALL   2C3A
....................                      putc(TxD_Buff[5]) ;
04230:  MOVF   x80,W
04232:  CALL   2C3A
....................                      putc(TxD_Buff[6]) ;
04236:  MOVF   x81,W
04238:  CALL   2C3A
....................                      putc(TxD_Buff[7]) ;
0423C:  MOVF   x82,W
0423E:  CALL   2C3A
....................                      //putc(TxD_Buff[8]) ;
....................                      //putc(TxD_Buff[9]) ;
....................    
....................                      restart_wdt();
04242:  CLRWDT
....................                      delay_ms(3);
04244:  MOVLW  03
04246:  MOVLB  C
04248:  MOVWF  x23
0424A:  MOVLB  0
0424C:  CALL   06AC
....................                      restart_wdt();
04250:  CLRWDT
....................                      output_bit(P485ctrl,0);
04252:  BCF    F8A.3
04254:  BCF    F93.3
04256:  MOVLB  5
....................                      
....................                   }
....................                }
04258:  BRA    4322
....................                else if(Start_Address == 0x64)   ///// Change Modbus Addr //////
0425A:  MOVF   x7E,W
0425C:  SUBLW  64
0425E:  BNZ   4322
04260:  MOVF   x7F,F
04262:  BNZ   4322
....................                {
....................                   Address = No_PointCount;
04264:  MOVFF  580,79
....................                   write_eeprom(0x1D,Address);   //Communication Address
04268:  MOVF   FF2,W
0426A:  MOVWF  00
0426C:  BCF    FF2.7
0426E:  CLRF   FAA
04270:  MOVLW  1D
04272:  MOVWF  FA9
04274:  MOVFF  79,FA8
04278:  BCF    FA6.6
0427A:  BCF    FA6.7
0427C:  BSF    FA6.2
0427E:  MOVLB  F
04280:  MOVLW  55
04282:  MOVWF  FA7
04284:  MOVLW  AA
04286:  MOVWF  FA7
04288:  BSF    FA6.1
0428A:  BTFSC  FA6.1
0428C:  BRA    428A
0428E:  BCF    FA6.2
04290:  MOVF   00,W
04292:  IORWF  FF2,F
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
04294:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
04298:  MOVLW  05
0429A:  MOVLB  0
0429C:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0429E:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
042A2:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
042A6:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
042AA:  MOVFF  17F,80
....................    
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
042AE:  MOVLB  C
042B0:  CLRF   x25
042B2:  MOVLW  7B
042B4:  MOVWF  x24
042B6:  MOVLW  06
042B8:  MOVWF  x26
042BA:  MOVLB  0
042BC:  CALL   2BE4
....................    
....................                   TxD_Buff[6] = CRC_Hi ;
042C0:  MOVFF  57B,81
....................                   TxD_Buff[7] = CRC_Lo ;
042C4:  MOVFF  57A,82
....................    
....................                   output_bit(P485ctrl,1);
042C8:  BSF    F8A.3
042CA:  BCF    F93.3
....................                   restart_wdt();
042CC:  CLRWDT
....................                   delay_ms(4);
042CE:  MOVLW  04
042D0:  MOVLB  C
042D2:  MOVWF  x23
042D4:  MOVLB  0
042D6:  CALL   06AC
....................                   restart_wdt();
042DA:  CLRWDT
....................    
....................                   putc(TxD_Buff[0]) ;               //Address
042DC:  MOVF   x7B,W
042DE:  CALL   2C3A
....................                   putc(TxD_Buff[1]) ;               //Function Code
042E2:  MOVF   x7C,W
042E4:  CALL   2C3A
....................                   putc(TxD_Buff[2]) ;               //Byte Count
042E8:  MOVF   x7D,W
042EA:  CALL   2C3A
....................                   putc(TxD_Buff[3]) ;
042EE:  MOVF   x7E,W
042F0:  CALL   2C3A
....................                   putc(TxD_Buff[4]) ;
042F4:  MOVF   x7F,W
042F6:  CALL   2C3A
....................                   putc(TxD_Buff[5]) ;
042FA:  MOVF   x80,W
042FC:  CALL   2C3A
....................                   putc(TxD_Buff[6]) ;
04300:  MOVF   x81,W
04302:  CALL   2C3A
....................                   putc(TxD_Buff[7]) ;
04306:  MOVF   x82,W
04308:  CALL   2C3A
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
....................    
....................                   restart_wdt();
0430C:  CLRWDT
....................                   delay_ms(3);
0430E:  MOVLW  03
04310:  MOVLB  C
04312:  MOVWF  x23
04314:  MOVLB  0
04316:  CALL   06AC
....................                   restart_wdt();
0431A:  CLRWDT
....................                   output_bit(P485ctrl,0);
0431C:  BCF    F8A.3
0431E:  BCF    F93.3
04320:  MOVLB  5
....................    
....................    
....................                   //save_addr();
....................                }
....................             }
04322:  GOTO   5DA8
04326:  MOVLB  1
....................             //--------------------------------------------------//
....................    
....................             else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
04328:  MOVF   x7B,W
0432A:  SUBLW  21
0432C:  BTFSS  FD8.2
0432E:  GOTO   4C96
....................             {
....................    
....................                write_eeprom(0x00,0x0F);
04332:  MOVF   FF2,W
04334:  MOVWF  00
04336:  BCF    FF2.7
04338:  CLRF   FAA
0433A:  CLRF   FA9
0433C:  MOVLW  0F
0433E:  MOVWF  FA8
04340:  BCF    FA6.6
04342:  BCF    FA6.7
04344:  BSF    FA6.2
04346:  MOVLB  F
04348:  MOVLW  55
0434A:  MOVWF  FA7
0434C:  MOVLW  AA
0434E:  MOVWF  FA7
04350:  BSF    FA6.1
04352:  BTFSC  FA6.1
04354:  BRA    4352
04356:  BCF    FA6.2
04358:  MOVF   00,W
0435A:  IORWF  FF2,F
....................    
....................                write_eeprom(0x01,RxD_Buff[3]);   //Input Type
0435C:  MOVFF  FF2,00
04360:  BCF    FF2.7
04362:  CLRF   FAA
04364:  MOVLW  01
04366:  MOVWF  FA9
04368:  MOVFF  17D,FA8
0436C:  BCF    FA6.6
0436E:  BCF    FA6.7
04370:  BSF    FA6.2
04372:  MOVLW  55
04374:  MOVWF  FA7
04376:  MOVLW  AA
04378:  MOVWF  FA7
0437A:  BSF    FA6.1
0437C:  BTFSC  FA6.1
0437E:  BRA    437C
04380:  BCF    FA6.2
04382:  MOVF   00,W
04384:  IORWF  FF2,F
....................                write_eeprom(0x02,RxD_Buff[4]);
04386:  MOVFF  FF2,00
0438A:  BCF    FF2.7
0438C:  CLRF   FAA
0438E:  MOVLW  02
04390:  MOVWF  FA9
04392:  MOVFF  17E,FA8
04396:  BCF    FA6.6
04398:  BCF    FA6.7
0439A:  BSF    FA6.2
0439C:  MOVLW  55
0439E:  MOVWF  FA7
043A0:  MOVLW  AA
043A2:  MOVWF  FA7
043A4:  BSF    FA6.1
043A6:  BTFSC  FA6.1
043A8:  BRA    43A6
043AA:  BCF    FA6.2
043AC:  MOVF   00,W
043AE:  IORWF  FF2,F
....................                write_eeprom(0x03,RxD_Buff[5]);
043B0:  MOVFF  FF2,00
043B4:  BCF    FF2.7
043B6:  CLRF   FAA
043B8:  MOVLW  03
043BA:  MOVWF  FA9
043BC:  MOVFF  17F,FA8
043C0:  BCF    FA6.6
043C2:  BCF    FA6.7
043C4:  BSF    FA6.2
043C6:  MOVLW  55
043C8:  MOVWF  FA7
043CA:  MOVLW  AA
043CC:  MOVWF  FA7
043CE:  BSF    FA6.1
043D0:  BTFSC  FA6.1
043D2:  BRA    43D0
043D4:  BCF    FA6.2
043D6:  MOVF   00,W
043D8:  IORWF  FF2,F
....................    
....................    
....................                write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
043DA:  MOVFF  FF2,00
043DE:  BCF    FF2.7
043E0:  CLRF   FAA
043E2:  MOVLW  04
043E4:  MOVWF  FA9
043E6:  MOVFF  180,FA8
043EA:  BCF    FA6.6
043EC:  BCF    FA6.7
043EE:  BSF    FA6.2
043F0:  MOVLW  55
043F2:  MOVWF  FA7
043F4:  MOVLW  AA
043F6:  MOVWF  FA7
043F8:  BSF    FA6.1
043FA:  BTFSC  FA6.1
043FC:  BRA    43FA
043FE:  BCF    FA6.2
04400:  MOVF   00,W
04402:  IORWF  FF2,F
....................                write_eeprom(0x05,RxD_Buff[7]);
04404:  MOVFF  FF2,00
04408:  BCF    FF2.7
0440A:  CLRF   FAA
0440C:  MOVLW  05
0440E:  MOVWF  FA9
04410:  MOVFF  181,FA8
04414:  BCF    FA6.6
04416:  BCF    FA6.7
04418:  BSF    FA6.2
0441A:  MOVLW  55
0441C:  MOVWF  FA7
0441E:  MOVLW  AA
04420:  MOVWF  FA7
04422:  BSF    FA6.1
04424:  BTFSC  FA6.1
04426:  BRA    4424
04428:  BCF    FA6.2
0442A:  MOVF   00,W
0442C:  IORWF  FF2,F
....................                write_eeprom(0x06,RxD_Buff[8]);
0442E:  MOVFF  FF2,00
04432:  BCF    FF2.7
04434:  CLRF   FAA
04436:  MOVLW  06
04438:  MOVWF  FA9
0443A:  MOVFF  182,FA8
0443E:  BCF    FA6.6
04440:  BCF    FA6.7
04442:  BSF    FA6.2
04444:  MOVLW  55
04446:  MOVWF  FA7
04448:  MOVLW  AA
0444A:  MOVWF  FA7
0444C:  BSF    FA6.1
0444E:  BTFSC  FA6.1
04450:  BRA    444E
04452:  BCF    FA6.2
04454:  MOVF   00,W
04456:  IORWF  FF2,F
....................    
....................                write_eeprom(0x07,RxD_Buff[9]);   //Output Type
04458:  MOVFF  FF2,00
0445C:  BCF    FF2.7
0445E:  CLRF   FAA
04460:  MOVLW  07
04462:  MOVWF  FA9
04464:  MOVFF  183,FA8
04468:  BCF    FA6.6
0446A:  BCF    FA6.7
0446C:  BSF    FA6.2
0446E:  MOVLW  55
04470:  MOVWF  FA7
04472:  MOVLW  AA
04474:  MOVWF  FA7
04476:  BSF    FA6.1
04478:  BTFSC  FA6.1
0447A:  BRA    4478
0447C:  BCF    FA6.2
0447E:  MOVF   00,W
04480:  IORWF  FF2,F
....................                write_eeprom(0x08,RxD_Buff[10]);
04482:  MOVFF  FF2,00
04486:  BCF    FF2.7
04488:  CLRF   FAA
0448A:  MOVLW  08
0448C:  MOVWF  FA9
0448E:  MOVFF  184,FA8
04492:  BCF    FA6.6
04494:  BCF    FA6.7
04496:  BSF    FA6.2
04498:  MOVLW  55
0449A:  MOVWF  FA7
0449C:  MOVLW  AA
0449E:  MOVWF  FA7
044A0:  BSF    FA6.1
044A2:  BTFSC  FA6.1
044A4:  BRA    44A2
044A6:  BCF    FA6.2
044A8:  MOVF   00,W
044AA:  IORWF  FF2,F
....................                write_eeprom(0x09,RxD_Buff[11]);
044AC:  MOVFF  FF2,00
044B0:  BCF    FF2.7
044B2:  CLRF   FAA
044B4:  MOVLW  09
044B6:  MOVWF  FA9
044B8:  MOVFF  185,FA8
044BC:  BCF    FA6.6
044BE:  BCF    FA6.7
044C0:  BSF    FA6.2
044C2:  MOVLW  55
044C4:  MOVWF  FA7
044C6:  MOVLW  AA
044C8:  MOVWF  FA7
044CA:  BSF    FA6.1
044CC:  BTFSC  FA6.1
044CE:  BRA    44CC
044D0:  BCF    FA6.2
044D2:  MOVF   00,W
044D4:  IORWF  FF2,F
....................    
....................                write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
044D6:  MOVFF  FF2,00
044DA:  BCF    FF2.7
044DC:  CLRF   FAA
044DE:  MOVLW  0A
044E0:  MOVWF  FA9
044E2:  MOVFF  186,FA8
044E6:  BCF    FA6.6
044E8:  BCF    FA6.7
044EA:  BSF    FA6.2
044EC:  MOVLW  55
044EE:  MOVWF  FA7
044F0:  MOVLW  AA
044F2:  MOVWF  FA7
044F4:  BSF    FA6.1
044F6:  BTFSC  FA6.1
044F8:  BRA    44F6
044FA:  BCF    FA6.2
044FC:  MOVF   00,W
044FE:  IORWF  FF2,F
....................                write_eeprom(0x0B,RxD_Buff[13]);
04500:  MOVFF  FF2,00
04504:  BCF    FF2.7
04506:  CLRF   FAA
04508:  MOVLW  0B
0450A:  MOVWF  FA9
0450C:  MOVFF  187,FA8
04510:  BCF    FA6.6
04512:  BCF    FA6.7
04514:  BSF    FA6.2
04516:  MOVLW  55
04518:  MOVWF  FA7
0451A:  MOVLW  AA
0451C:  MOVWF  FA7
0451E:  BSF    FA6.1
04520:  BTFSC  FA6.1
04522:  BRA    4520
04524:  BCF    FA6.2
04526:  MOVF   00,W
04528:  IORWF  FF2,F
....................                write_eeprom(0x0C,RxD_Buff[14]);
0452A:  MOVFF  FF2,00
0452E:  BCF    FF2.7
04530:  CLRF   FAA
04532:  MOVLW  0C
04534:  MOVWF  FA9
04536:  MOVFF  188,FA8
0453A:  BCF    FA6.6
0453C:  BCF    FA6.7
0453E:  BSF    FA6.2
04540:  MOVLW  55
04542:  MOVWF  FA7
04544:  MOVLW  AA
04546:  MOVWF  FA7
04548:  BSF    FA6.1
0454A:  BTFSC  FA6.1
0454C:  BRA    454A
0454E:  BCF    FA6.2
04550:  MOVF   00,W
04552:  IORWF  FF2,F
....................     
....................                write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
04554:  MOVFF  FF2,00
04558:  BCF    FF2.7
0455A:  CLRF   FAA
0455C:  MOVLW  0D
0455E:  MOVWF  FA9
04560:  MOVFF  189,FA8
04564:  BCF    FA6.6
04566:  BCF    FA6.7
04568:  BSF    FA6.2
0456A:  MOVLW  55
0456C:  MOVWF  FA7
0456E:  MOVLW  AA
04570:  MOVWF  FA7
04572:  BSF    FA6.1
04574:  BTFSC  FA6.1
04576:  BRA    4574
04578:  BCF    FA6.2
0457A:  MOVF   00,W
0457C:  IORWF  FF2,F
....................                write_eeprom(0x0E,RxD_Buff[16]);
0457E:  MOVFF  FF2,00
04582:  BCF    FF2.7
04584:  CLRF   FAA
04586:  MOVLW  0E
04588:  MOVWF  FA9
0458A:  MOVFF  18A,FA8
0458E:  BCF    FA6.6
04590:  BCF    FA6.7
04592:  BSF    FA6.2
04594:  MOVLW  55
04596:  MOVWF  FA7
04598:  MOVLW  AA
0459A:  MOVWF  FA7
0459C:  BSF    FA6.1
0459E:  BTFSC  FA6.1
045A0:  BRA    459E
045A2:  BCF    FA6.2
045A4:  MOVF   00,W
045A6:  IORWF  FF2,F
....................                write_eeprom(0x0F,RxD_Buff[17]);
045A8:  MOVFF  FF2,00
045AC:  BCF    FF2.7
045AE:  CLRF   FAA
045B0:  MOVLW  0F
045B2:  MOVWF  FA9
045B4:  MOVFF  18B,FA8
045B8:  BCF    FA6.6
045BA:  BCF    FA6.7
045BC:  BSF    FA6.2
045BE:  MOVLW  55
045C0:  MOVWF  FA7
045C2:  MOVLW  AA
045C4:  MOVWF  FA7
045C6:  BSF    FA6.1
045C8:  BTFSC  FA6.1
045CA:  BRA    45C8
045CC:  BCF    FA6.2
045CE:  MOVF   00,W
045D0:  IORWF  FF2,F
....................    
....................                // LED Colour Config
....................                write_eeprom(0x10,RxD_Buff[18]); //Red1_8
045D2:  MOVFF  FF2,00
045D6:  BCF    FF2.7
045D8:  CLRF   FAA
045DA:  MOVLW  10
045DC:  MOVWF  FA9
045DE:  MOVFF  18C,FA8
045E2:  BCF    FA6.6
045E4:  BCF    FA6.7
045E6:  BSF    FA6.2
045E8:  MOVLW  55
045EA:  MOVWF  FA7
045EC:  MOVLW  AA
045EE:  MOVWF  FA7
045F0:  BSF    FA6.1
045F2:  BTFSC  FA6.1
045F4:  BRA    45F2
045F6:  BCF    FA6.2
045F8:  MOVF   00,W
045FA:  IORWF  FF2,F
....................                write_eeprom(0x11,RxD_Buff[19]); //Red9_10
045FC:  MOVFF  FF2,00
04600:  BCF    FF2.7
04602:  CLRF   FAA
04604:  MOVLW  11
04606:  MOVWF  FA9
04608:  MOVFF  18D,FA8
0460C:  BCF    FA6.6
0460E:  BCF    FA6.7
04610:  BSF    FA6.2
04612:  MOVLW  55
04614:  MOVWF  FA7
04616:  MOVLW  AA
04618:  MOVWF  FA7
0461A:  BSF    FA6.1
0461C:  BTFSC  FA6.1
0461E:  BRA    461C
04620:  BCF    FA6.2
04622:  MOVF   00,W
04624:  IORWF  FF2,F
....................                write_eeprom(0x12,RxD_Buff[20]); //Red11_18
04626:  MOVFF  FF2,00
0462A:  BCF    FF2.7
0462C:  CLRF   FAA
0462E:  MOVLW  12
04630:  MOVWF  FA9
04632:  MOVFF  18E,FA8
04636:  BCF    FA6.6
04638:  BCF    FA6.7
0463A:  BSF    FA6.2
0463C:  MOVLW  55
0463E:  MOVWF  FA7
04640:  MOVLW  AA
04642:  MOVWF  FA7
04644:  BSF    FA6.1
04646:  BTFSC  FA6.1
04648:  BRA    4646
0464A:  BCF    FA6.2
0464C:  MOVF   00,W
0464E:  IORWF  FF2,F
....................                write_eeprom(0x13,RxD_Buff[21]); //Red19_20
04650:  MOVFF  FF2,00
04654:  BCF    FF2.7
04656:  CLRF   FAA
04658:  MOVLW  13
0465A:  MOVWF  FA9
0465C:  MOVFF  18F,FA8
04660:  BCF    FA6.6
04662:  BCF    FA6.7
04664:  BSF    FA6.2
04666:  MOVLW  55
04668:  MOVWF  FA7
0466A:  MOVLW  AA
0466C:  MOVWF  FA7
0466E:  BSF    FA6.1
04670:  BTFSC  FA6.1
04672:  BRA    4670
04674:  BCF    FA6.2
04676:  MOVF   00,W
04678:  IORWF  FF2,F
....................                write_eeprom(0x14,RxD_Buff[22]); //Green1_8
0467A:  MOVFF  FF2,00
0467E:  BCF    FF2.7
04680:  CLRF   FAA
04682:  MOVLW  14
04684:  MOVWF  FA9
04686:  MOVFF  190,FA8
0468A:  BCF    FA6.6
0468C:  BCF    FA6.7
0468E:  BSF    FA6.2
04690:  MOVLW  55
04692:  MOVWF  FA7
04694:  MOVLW  AA
04696:  MOVWF  FA7
04698:  BSF    FA6.1
0469A:  BTFSC  FA6.1
0469C:  BRA    469A
0469E:  BCF    FA6.2
046A0:  MOVF   00,W
046A2:  IORWF  FF2,F
....................                write_eeprom(0x15,RxD_Buff[23]); //Green9_10
046A4:  MOVFF  FF2,00
046A8:  BCF    FF2.7
046AA:  CLRF   FAA
046AC:  MOVLW  15
046AE:  MOVWF  FA9
046B0:  MOVFF  191,FA8
046B4:  BCF    FA6.6
046B6:  BCF    FA6.7
046B8:  BSF    FA6.2
046BA:  MOVLW  55
046BC:  MOVWF  FA7
046BE:  MOVLW  AA
046C0:  MOVWF  FA7
046C2:  BSF    FA6.1
046C4:  BTFSC  FA6.1
046C6:  BRA    46C4
046C8:  BCF    FA6.2
046CA:  MOVF   00,W
046CC:  IORWF  FF2,F
....................                write_eeprom(0x16,RxD_Buff[24]); //Green11_18
046CE:  MOVFF  FF2,00
046D2:  BCF    FF2.7
046D4:  CLRF   FAA
046D6:  MOVLW  16
046D8:  MOVWF  FA9
046DA:  MOVFF  192,FA8
046DE:  BCF    FA6.6
046E0:  BCF    FA6.7
046E2:  BSF    FA6.2
046E4:  MOVLW  55
046E6:  MOVWF  FA7
046E8:  MOVLW  AA
046EA:  MOVWF  FA7
046EC:  BSF    FA6.1
046EE:  BTFSC  FA6.1
046F0:  BRA    46EE
046F2:  BCF    FA6.2
046F4:  MOVF   00,W
046F6:  IORWF  FF2,F
....................                write_eeprom(0x17,RxD_Buff[25]); //Green19_20
046F8:  MOVFF  FF2,00
046FC:  BCF    FF2.7
046FE:  CLRF   FAA
04700:  MOVLW  17
04702:  MOVWF  FA9
04704:  MOVFF  193,FA8
04708:  BCF    FA6.6
0470A:  BCF    FA6.7
0470C:  BSF    FA6.2
0470E:  MOVLW  55
04710:  MOVWF  FA7
04712:  MOVLW  AA
04714:  MOVWF  FA7
04716:  BSF    FA6.1
04718:  BTFSC  FA6.1
0471A:  BRA    4718
0471C:  BCF    FA6.2
0471E:  MOVF   00,W
04720:  IORWF  FF2,F
....................                   
....................                write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
04722:  MOVFF  FF2,00
04726:  BCF    FF2.7
04728:  CLRF   FAA
0472A:  MOVLW  18
0472C:  MOVWF  FA9
0472E:  MOVFF  194,FA8
04732:  BCF    FA6.6
04734:  BCF    FA6.7
04736:  BSF    FA6.2
04738:  MOVLW  55
0473A:  MOVWF  FA7
0473C:  MOVLW  AA
0473E:  MOVWF  FA7
04740:  BSF    FA6.1
04742:  BTFSC  FA6.1
04744:  BRA    4742
04746:  BCF    FA6.2
04748:  MOVF   00,W
0474A:  IORWF  FF2,F
....................                write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
0474C:  MOVFF  FF2,00
04750:  BCF    FF2.7
04752:  CLRF   FAA
04754:  MOVLW  19
04756:  MOVWF  FA9
04758:  MOVFF  195,FA8
0475C:  BCF    FA6.6
0475E:  BCF    FA6.7
04760:  BSF    FA6.2
04762:  MOVLW  55
04764:  MOVWF  FA7
04766:  MOVLW  AA
04768:  MOVWF  FA7
0476A:  BSF    FA6.1
0476C:  BTFSC  FA6.1
0476E:  BRA    476C
04770:  BCF    FA6.2
04772:  MOVF   00,W
04774:  IORWF  FF2,F
....................                write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
04776:  MOVFF  FF2,00
0477A:  BCF    FF2.7
0477C:  CLRF   FAA
0477E:  MOVLW  1A
04780:  MOVWF  FA9
04782:  MOVFF  196,FA8
04786:  BCF    FA6.6
04788:  BCF    FA6.7
0478A:  BSF    FA6.2
0478C:  MOVLW  55
0478E:  MOVWF  FA7
04790:  MOVLW  AA
04792:  MOVWF  FA7
04794:  BSF    FA6.1
04796:  BTFSC  FA6.1
04798:  BRA    4796
0479A:  BCF    FA6.2
0479C:  MOVF   00,W
0479E:  IORWF  FF2,F
....................                write_eeprom(0x1B,RxD_Buff[29]);   //No of point
047A0:  MOVFF  FF2,00
047A4:  BCF    FF2.7
047A6:  CLRF   FAA
047A8:  MOVLW  1B
047AA:  MOVWF  FA9
047AC:  MOVFF  197,FA8
047B0:  BCF    FA6.6
047B2:  BCF    FA6.7
047B4:  BSF    FA6.2
047B6:  MOVLW  55
047B8:  MOVWF  FA7
047BA:  MOVLW  AA
047BC:  MOVWF  FA7
047BE:  BSF    FA6.1
047C0:  BTFSC  FA6.1
047C2:  BRA    47C0
047C4:  BCF    FA6.2
047C6:  MOVF   00,W
047C8:  IORWF  FF2,F
....................                write_eeprom(0x1C,RxD_Buff[30]);   //Master / Slave
047CA:  MOVFF  FF2,00
047CE:  BCF    FF2.7
047D0:  CLRF   FAA
047D2:  MOVLW  1C
047D4:  MOVWF  FA9
047D6:  MOVFF  198,FA8
047DA:  BCF    FA6.6
047DC:  BCF    FA6.7
047DE:  BSF    FA6.2
047E0:  MOVLW  55
047E2:  MOVWF  FA7
047E4:  MOVLW  AA
047E6:  MOVWF  FA7
047E8:  BSF    FA6.1
047EA:  BTFSC  FA6.1
047EC:  BRA    47EA
047EE:  BCF    FA6.2
047F0:  MOVF   00,W
047F2:  IORWF  FF2,F
....................                write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
047F4:  MOVFF  FF2,00
047F8:  BCF    FF2.7
047FA:  CLRF   FAA
047FC:  MOVLW  1D
047FE:  MOVWF  FA9
04800:  MOVFF  199,FA8
04804:  BCF    FA6.6
04806:  BCF    FA6.7
04808:  BSF    FA6.2
0480A:  MOVLW  55
0480C:  MOVWF  FA7
0480E:  MOVLW  AA
04810:  MOVWF  FA7
04812:  BSF    FA6.1
04814:  BTFSC  FA6.1
04816:  BRA    4814
04818:  BCF    FA6.2
0481A:  MOVF   00,W
0481C:  IORWF  FF2,F
....................    
....................                write_eeprom(0x1E,RxD_Buff[32]);   //Communication Address
0481E:  MOVFF  FF2,00
04822:  BCF    FF2.7
04824:  CLRF   FAA
04826:  MOVLW  1E
04828:  MOVWF  FA9
0482A:  MOVFF  19A,FA8
0482E:  BCF    FA6.6
04830:  BCF    FA6.7
04832:  BSF    FA6.2
04834:  MOVLW  55
04836:  MOVWF  FA7
04838:  MOVLW  AA
0483A:  MOVWF  FA7
0483C:  BSF    FA6.1
0483E:  BTFSC  FA6.1
04840:  BRA    483E
04842:  BCF    FA6.2
04844:  MOVF   00,W
04846:  IORWF  FF2,F
....................                write_eeprom(0x1F,RxD_Buff[33]);   //Communication Address
04848:  MOVFF  FF2,00
0484C:  BCF    FF2.7
0484E:  CLRF   FAA
04850:  MOVLW  1F
04852:  MOVWF  FA9
04854:  MOVFF  19B,FA8
04858:  BCF    FA6.6
0485A:  BCF    FA6.7
0485C:  BSF    FA6.2
0485E:  MOVLW  55
04860:  MOVWF  FA7
04862:  MOVLW  AA
04864:  MOVWF  FA7
04866:  BSF    FA6.1
04868:  BTFSC  FA6.1
0486A:  BRA    4868
0486C:  BCF    FA6.2
0486E:  MOVF   00,W
04870:  IORWF  FF2,F
....................                write_eeprom(0x20,RxD_Buff[34]);   //Communication Address
04872:  MOVFF  FF2,00
04876:  BCF    FF2.7
04878:  CLRF   FAA
0487A:  MOVLW  20
0487C:  MOVWF  FA9
0487E:  MOVFF  19C,FA8
04882:  BCF    FA6.6
04884:  BCF    FA6.7
04886:  BSF    FA6.2
04888:  MOVLW  55
0488A:  MOVWF  FA7
0488C:  MOVLW  AA
0488E:  MOVWF  FA7
04890:  BSF    FA6.1
04892:  BTFSC  FA6.1
04894:  BRA    4892
04896:  BCF    FA6.2
04898:  MOVF   00,W
0489A:  IORWF  FF2,F
....................                write_eeprom(0x21,RxD_Buff[35]);   //Communication Address
0489C:  MOVFF  FF2,00
048A0:  BCF    FF2.7
048A2:  CLRF   FAA
048A4:  MOVLW  21
048A6:  MOVWF  FA9
048A8:  MOVFF  19D,FA8
048AC:  BCF    FA6.6
048AE:  BCF    FA6.7
048B0:  BSF    FA6.2
048B2:  MOVLW  55
048B4:  MOVWF  FA7
048B6:  MOVLW  AA
048B8:  MOVWF  FA7
048BA:  BSF    FA6.1
048BC:  BTFSC  FA6.1
048BE:  BRA    48BC
048C0:  BCF    FA6.2
048C2:  MOVF   00,W
048C4:  IORWF  FF2,F
....................                write_eeprom(0x22,RxD_Buff[36]);   //Communication Address
048C6:  MOVFF  FF2,00
048CA:  BCF    FF2.7
048CC:  CLRF   FAA
048CE:  MOVLW  22
048D0:  MOVWF  FA9
048D2:  MOVFF  19E,FA8
048D6:  BCF    FA6.6
048D8:  BCF    FA6.7
048DA:  BSF    FA6.2
048DC:  MOVLW  55
048DE:  MOVWF  FA7
048E0:  MOVLW  AA
048E2:  MOVWF  FA7
048E4:  BSF    FA6.1
048E6:  BTFSC  FA6.1
048E8:  BRA    48E6
048EA:  BCF    FA6.2
048EC:  MOVF   00,W
048EE:  IORWF  FF2,F
....................                write_eeprom(0x23,RxD_Buff[37]);   //Communication Address
048F0:  MOVFF  FF2,00
048F4:  BCF    FF2.7
048F6:  CLRF   FAA
048F8:  MOVLW  23
048FA:  MOVWF  FA9
048FC:  MOVFF  19F,FA8
04900:  BCF    FA6.6
04902:  BCF    FA6.7
04904:  BSF    FA6.2
04906:  MOVLW  55
04908:  MOVWF  FA7
0490A:  MOVLW  AA
0490C:  MOVWF  FA7
0490E:  BSF    FA6.1
04910:  BTFSC  FA6.1
04912:  BRA    4910
04914:  BCF    FA6.2
04916:  MOVF   00,W
04918:  IORWF  FF2,F
....................                write_eeprom(0x24,RxD_Buff[38]);   //Communication Address
0491A:  MOVFF  FF2,00
0491E:  BCF    FF2.7
04920:  CLRF   FAA
04922:  MOVLW  24
04924:  MOVWF  FA9
04926:  MOVFF  1A0,FA8
0492A:  BCF    FA6.6
0492C:  BCF    FA6.7
0492E:  BSF    FA6.2
04930:  MOVLW  55
04932:  MOVWF  FA7
04934:  MOVLW  AA
04936:  MOVWF  FA7
04938:  BSF    FA6.1
0493A:  BTFSC  FA6.1
0493C:  BRA    493A
0493E:  BCF    FA6.2
04940:  MOVF   00,W
04942:  IORWF  FF2,F
....................                write_eeprom(0x25,RxD_Buff[39]);   //Communication Address
04944:  MOVFF  FF2,00
04948:  BCF    FF2.7
0494A:  CLRF   FAA
0494C:  MOVLW  25
0494E:  MOVWF  FA9
04950:  MOVFF  1A1,FA8
04954:  BCF    FA6.6
04956:  BCF    FA6.7
04958:  BSF    FA6.2
0495A:  MOVLW  55
0495C:  MOVWF  FA7
0495E:  MOVLW  AA
04960:  MOVWF  FA7
04962:  BSF    FA6.1
04964:  BTFSC  FA6.1
04966:  BRA    4964
04968:  BCF    FA6.2
0496A:  MOVF   00,W
0496C:  IORWF  FF2,F
....................                write_eeprom(0x26,RxD_Buff[40]);   //Communication Address
0496E:  MOVFF  FF2,00
04972:  BCF    FF2.7
04974:  CLRF   FAA
04976:  MOVLW  26
04978:  MOVWF  FA9
0497A:  MOVFF  1A2,FA8
0497E:  BCF    FA6.6
04980:  BCF    FA6.7
04982:  BSF    FA6.2
04984:  MOVLW  55
04986:  MOVWF  FA7
04988:  MOVLW  AA
0498A:  MOVWF  FA7
0498C:  BSF    FA6.1
0498E:  BTFSC  FA6.1
04990:  BRA    498E
04992:  BCF    FA6.2
04994:  MOVF   00,W
04996:  IORWF  FF2,F
....................                write_eeprom(0x27,RxD_Buff[41]);   //Communication Address
04998:  MOVFF  FF2,00
0499C:  BCF    FF2.7
0499E:  CLRF   FAA
049A0:  MOVLW  27
049A2:  MOVWF  FA9
049A4:  MOVFF  1A3,FA8
049A8:  BCF    FA6.6
049AA:  BCF    FA6.7
049AC:  BSF    FA6.2
049AE:  MOVLW  55
049B0:  MOVWF  FA7
049B2:  MOVLW  AA
049B4:  MOVWF  FA7
049B6:  BSF    FA6.1
049B8:  BTFSC  FA6.1
049BA:  BRA    49B8
049BC:  BCF    FA6.2
049BE:  MOVF   00,W
049C0:  IORWF  FF2,F
....................                write_eeprom(0x28,RxD_Buff[42]);   //Communication Address
049C2:  MOVFF  FF2,00
049C6:  BCF    FF2.7
049C8:  CLRF   FAA
049CA:  MOVLW  28
049CC:  MOVWF  FA9
049CE:  MOVFF  1A4,FA8
049D2:  BCF    FA6.6
049D4:  BCF    FA6.7
049D6:  BSF    FA6.2
049D8:  MOVLW  55
049DA:  MOVWF  FA7
049DC:  MOVLW  AA
049DE:  MOVWF  FA7
049E0:  BSF    FA6.1
049E2:  BTFSC  FA6.1
049E4:  BRA    49E2
049E6:  BCF    FA6.2
049E8:  MOVF   00,W
049EA:  IORWF  FF2,F
....................                write_eeprom(0x29,RxD_Buff[43]);   //Communication Address
049EC:  MOVFF  FF2,00
049F0:  BCF    FF2.7
049F2:  CLRF   FAA
049F4:  MOVLW  29
049F6:  MOVWF  FA9
049F8:  MOVFF  1A5,FA8
049FC:  BCF    FA6.6
049FE:  BCF    FA6.7
04A00:  BSF    FA6.2
04A02:  MOVLW  55
04A04:  MOVWF  FA7
04A06:  MOVLW  AA
04A08:  MOVWF  FA7
04A0A:  BSF    FA6.1
04A0C:  BTFSC  FA6.1
04A0E:  BRA    4A0C
04A10:  BCF    FA6.2
04A12:  MOVF   00,W
04A14:  IORWF  FF2,F
....................                write_eeprom(0x2A,RxD_Buff[44]);   //Communication Address
04A16:  MOVFF  FF2,00
04A1A:  BCF    FF2.7
04A1C:  CLRF   FAA
04A1E:  MOVLW  2A
04A20:  MOVWF  FA9
04A22:  MOVFF  1A6,FA8
04A26:  BCF    FA6.6
04A28:  BCF    FA6.7
04A2A:  BSF    FA6.2
04A2C:  MOVLW  55
04A2E:  MOVWF  FA7
04A30:  MOVLW  AA
04A32:  MOVWF  FA7
04A34:  BSF    FA6.1
04A36:  BTFSC  FA6.1
04A38:  BRA    4A36
04A3A:  BCF    FA6.2
04A3C:  MOVF   00,W
04A3E:  IORWF  FF2,F
....................                write_eeprom(0x2B,RxD_Buff[45]);   //Communication Address
04A40:  MOVFF  FF2,00
04A44:  BCF    FF2.7
04A46:  CLRF   FAA
04A48:  MOVLW  2B
04A4A:  MOVWF  FA9
04A4C:  MOVFF  1A7,FA8
04A50:  BCF    FA6.6
04A52:  BCF    FA6.7
04A54:  BSF    FA6.2
04A56:  MOVLW  55
04A58:  MOVWF  FA7
04A5A:  MOVLW  AA
04A5C:  MOVWF  FA7
04A5E:  BSF    FA6.1
04A60:  BTFSC  FA6.1
04A62:  BRA    4A60
04A64:  BCF    FA6.2
04A66:  MOVF   00,W
04A68:  IORWF  FF2,F
....................                write_eeprom(0x2C,RxD_Buff[46]);   //Communication Address
04A6A:  MOVFF  FF2,00
04A6E:  BCF    FF2.7
04A70:  CLRF   FAA
04A72:  MOVLW  2C
04A74:  MOVWF  FA9
04A76:  MOVFF  1A8,FA8
04A7A:  BCF    FA6.6
04A7C:  BCF    FA6.7
04A7E:  BSF    FA6.2
04A80:  MOVLW  55
04A82:  MOVWF  FA7
04A84:  MOVLW  AA
04A86:  MOVWF  FA7
04A88:  BSF    FA6.1
04A8A:  BTFSC  FA6.1
04A8C:  BRA    4A8A
04A8E:  BCF    FA6.2
04A90:  MOVF   00,W
04A92:  IORWF  FF2,F
....................                write_eeprom(0x2D,RxD_Buff[47]);   //Communication Address
04A94:  MOVFF  FF2,00
04A98:  BCF    FF2.7
04A9A:  CLRF   FAA
04A9C:  MOVLW  2D
04A9E:  MOVWF  FA9
04AA0:  MOVFF  1A9,FA8
04AA4:  BCF    FA6.6
04AA6:  BCF    FA6.7
04AA8:  BSF    FA6.2
04AAA:  MOVLW  55
04AAC:  MOVWF  FA7
04AAE:  MOVLW  AA
04AB0:  MOVWF  FA7
04AB2:  BSF    FA6.1
04AB4:  BTFSC  FA6.1
04AB6:  BRA    4AB4
04AB8:  BCF    FA6.2
04ABA:  MOVF   00,W
04ABC:  IORWF  FF2,F
....................                write_eeprom(0x2E,RxD_Buff[48]);   //Communication Address
04ABE:  MOVFF  FF2,00
04AC2:  BCF    FF2.7
04AC4:  CLRF   FAA
04AC6:  MOVLW  2E
04AC8:  MOVWF  FA9
04ACA:  MOVFF  1AA,FA8
04ACE:  BCF    FA6.6
04AD0:  BCF    FA6.7
04AD2:  BSF    FA6.2
04AD4:  MOVLW  55
04AD6:  MOVWF  FA7
04AD8:  MOVLW  AA
04ADA:  MOVWF  FA7
04ADC:  BSF    FA6.1
04ADE:  BTFSC  FA6.1
04AE0:  BRA    4ADE
04AE2:  BCF    FA6.2
04AE4:  MOVF   00,W
04AE6:  IORWF  FF2,F
....................                write_eeprom(0x2F,RxD_Buff[49]);   //Communication Address
04AE8:  MOVFF  FF2,00
04AEC:  BCF    FF2.7
04AEE:  CLRF   FAA
04AF0:  MOVLW  2F
04AF2:  MOVWF  FA9
04AF4:  MOVFF  1AB,FA8
04AF8:  BCF    FA6.6
04AFA:  BCF    FA6.7
04AFC:  BSF    FA6.2
04AFE:  MOVLW  55
04B00:  MOVWF  FA7
04B02:  MOVLW  AA
04B04:  MOVWF  FA7
04B06:  BSF    FA6.1
04B08:  BTFSC  FA6.1
04B0A:  BRA    4B08
04B0C:  BCF    FA6.2
04B0E:  MOVF   00,W
04B10:  IORWF  FF2,F
....................                write_eeprom(0x30,RxD_Buff[50]);   //Communication Address
04B12:  MOVFF  FF2,00
04B16:  BCF    FF2.7
04B18:  CLRF   FAA
04B1A:  MOVLW  30
04B1C:  MOVWF  FA9
04B1E:  MOVFF  1AC,FA8
04B22:  BCF    FA6.6
04B24:  BCF    FA6.7
04B26:  BSF    FA6.2
04B28:  MOVLW  55
04B2A:  MOVWF  FA7
04B2C:  MOVLW  AA
04B2E:  MOVWF  FA7
04B30:  BSF    FA6.1
04B32:  BTFSC  FA6.1
04B34:  BRA    4B32
04B36:  BCF    FA6.2
04B38:  MOVF   00,W
04B3A:  IORWF  FF2,F
....................                write_eeprom(0x31,RxD_Buff[51]);   //Communication Address
04B3C:  MOVFF  FF2,00
04B40:  BCF    FF2.7
04B42:  CLRF   FAA
04B44:  MOVLW  31
04B46:  MOVWF  FA9
04B48:  MOVFF  1AD,FA8
04B4C:  BCF    FA6.6
04B4E:  BCF    FA6.7
04B50:  BSF    FA6.2
04B52:  MOVLW  55
04B54:  MOVWF  FA7
04B56:  MOVLW  AA
04B58:  MOVWF  FA7
04B5A:  BSF    FA6.1
04B5C:  BTFSC  FA6.1
04B5E:  BRA    4B5C
04B60:  BCF    FA6.2
04B62:  MOVF   00,W
04B64:  IORWF  FF2,F
....................                
....................                int16  a = 0; 
....................                unsigned char  phonenum;
04B66:  MOVLB  C
04B68:  CLRF   x1B
04B6A:  CLRF   x1A
....................                for(; ; a++)
....................                {
....................                   restart_wdt();
04B6C:  CLRWDT
....................                   phonenum = RxD_Buff[52 + a];
04B6E:  MOVLW  AE
04B70:  ADDWF  x1A,W
04B72:  MOVWF  FE9
04B74:  MOVLW  01
04B76:  ADDWFC x1B,W
04B78:  MOVWF  FEA
04B7A:  MOVFF  FEF,C1C
....................                   if((phonenum == 0x0D) || (a > 15))
04B7E:  MOVF   x1C,W
04B80:  SUBLW  0D
04B82:  BZ    4B8E
04B84:  MOVF   x1B,F
04B86:  BNZ   4B8E
04B88:  MOVF   x1A,W
04B8A:  SUBLW  0F
04B8C:  BC    4BDC
....................                   {
....................                      sms_phonenumber[a] =  '\0' ;
04B8E:  MOVLW  8B
04B90:  ADDWF  x1A,W
04B92:  MOVWF  FE9
04B94:  MOVLW  09
04B96:  ADDWFC x1B,W
04B98:  MOVWF  FEA
04B9A:  CLRF   FEF
....................                      write_eeprom(0x32+a,phonenum);
04B9C:  MOVLW  32
04B9E:  ADDWF  x1A,W
04BA0:  MOVWF  x23
04BA2:  MOVLW  00
04BA4:  ADDWFC x1B,W
04BA6:  MOVWF  x24
04BA8:  MOVF   FF2,W
04BAA:  MOVWF  00
04BAC:  BCF    FF2.7
04BAE:  MOVFF  C24,FAA
04BB2:  MOVFF  C23,FA9
04BB6:  MOVFF  C1C,FA8
04BBA:  BCF    FA6.6
04BBC:  BCF    FA6.7
04BBE:  BSF    FA6.2
04BC0:  MOVLB  F
04BC2:  MOVLW  55
04BC4:  MOVWF  FA7
04BC6:  MOVLW  AA
04BC8:  MOVWF  FA7
04BCA:  BSF    FA6.1
04BCC:  BTFSC  FA6.1
04BCE:  BRA    4BCC
04BD0:  BCF    FA6.2
04BD2:  MOVF   00,W
04BD4:  IORWF  FF2,F
....................                      break;
04BD6:  BRA    4C32
....................                   }
04BD8:  BRA    4C26
04BDA:  MOVLB  C
....................                   else
....................                   {
....................                      sms_phonenumber[a] = phonenum;
04BDC:  MOVLW  8B
04BDE:  ADDWF  x1A,W
04BE0:  MOVWF  FE9
04BE2:  MOVLW  09
04BE4:  ADDWFC x1B,W
04BE6:  MOVWF  FEA
04BE8:  MOVFF  C1C,FEF
....................                      
....................                      write_eeprom(0x32+a,phonenum);
04BEC:  MOVLW  32
04BEE:  ADDWF  x1A,W
04BF0:  MOVWF  x23
04BF2:  MOVLW  00
04BF4:  ADDWFC x1B,W
04BF6:  MOVWF  x24
04BF8:  MOVF   FF2,W
04BFA:  MOVWF  00
04BFC:  BCF    FF2.7
04BFE:  MOVFF  C24,FAA
04C02:  MOVFF  C23,FA9
04C06:  MOVFF  C1C,FA8
04C0A:  BCF    FA6.6
04C0C:  BCF    FA6.7
04C0E:  BSF    FA6.2
04C10:  MOVLB  F
04C12:  MOVLW  55
04C14:  MOVWF  FA7
04C16:  MOVLW  AA
04C18:  MOVWF  FA7
04C1A:  BSF    FA6.1
04C1C:  BTFSC  FA6.1
04C1E:  BRA    4C1C
04C20:  BCF    FA6.2
04C22:  MOVF   00,W
04C24:  IORWF  FF2,F
....................                   }
04C26:  MOVLB  C
04C28:  INCF   x1A,F
04C2A:  BTFSC  FD8.2
04C2C:  INCF   x1B,F
04C2E:  BRA    4B6C
04C30:  MOVLB  F
....................                }
....................             
....................             
....................                TxD_Buff[0] = Address ;         //Address
04C32:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x21 ;            //return function code
04C36:  MOVLW  21
04C38:  MOVLB  0
04C3A:  MOVWF  x7C
....................    
....................                CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
04C3C:  MOVLB  C
04C3E:  CLRF   x25
04C40:  MOVLW  7B
04C42:  MOVWF  x24
04C44:  MOVLW  02
04C46:  MOVWF  x26
04C48:  MOVLB  0
04C4A:  CALL   2BE4
....................    
....................                TxD_Buff[2] = CRC_Hi ;
04C4E:  MOVFF  57B,7D
....................                TxD_Buff[3] = CRC_Lo ;
04C52:  MOVFF  57A,7E
....................    
....................                output_bit(P485ctrl,1);
04C56:  BSF    F8A.3
04C58:  BCF    F93.3
....................                delay_ms(10);
04C5A:  MOVLW  0A
04C5C:  MOVLB  C
04C5E:  MOVWF  x23
04C60:  MOVLB  0
04C62:  CALL   06AC
....................    
....................                putc(Txd_Buff[0]);
04C66:  MOVF   x7B,W
04C68:  CALL   2C3A
....................                putc(Txd_Buff[1]);
04C6C:  MOVF   x7C,W
04C6E:  CALL   2C3A
....................                putc(Txd_Buff[2]);
04C72:  MOVF   x7D,W
04C74:  CALL   2C3A
....................                putc(Txd_Buff[3]);
04C78:  MOVF   x7E,W
04C7A:  CALL   2C3A
....................    
....................                delay_ms(3);
04C7E:  MOVLW  03
04C80:  MOVLB  C
04C82:  MOVWF  x23
04C84:  MOVLB  0
04C86:  CALL   06AC
....................                output_bit(P485ctrl,0);
04C8A:  BCF    F8A.3
04C8C:  BCF    F93.3
....................                
....................                reset_cpu();
04C8E:  RESET
....................                //Read_Config(); //jj
....................             }
04C90:  GOTO   5DA6
04C94:  MOVLB  1
....................             
....................             else if(RxD_Buff[1] == 0x22)///////////// WRITE Faultname /////////////////////
04C96:  MOVF   x7B,W
04C98:  SUBLW  22
04C9A:  BTFSS  FD8.2
04C9C:  GOTO   5DA6
....................             {
....................                
....................                //SMS_Massage
....................                int16  i =4,j=0,k=0; //i =4 are first data from RxD_Buff[]
04CA0:  MOVLB  C
04CA2:  CLRF   x1E
04CA4:  MOVLW  04
04CA6:  MOVWF  x1D
04CA8:  CLRF   x20
04CAA:  CLRF   x1F
04CAC:  CLRF   x22
04CAE:  CLRF   x21
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
04CB0:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
04CB2:  MOVLW  7A
04CB4:  ADDWF  x1D,W
04CB6:  MOVWF  FE9
04CB8:  MOVLW  01
04CBA:  ADDWFC x1E,W
04CBC:  MOVWF  FEA
04CBE:  MOVF   FEF,W
04CC0:  SUBLW  0D
04CC2:  BZ    4CCE
04CC4:  MOVF   x20,F
04CC6:  BNZ   4CCE
04CC8:  MOVF   x1F,W
04CCA:  SUBLW  1E
04CCC:  BC    4D0E
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
04CCE:  MOVLW  5D
04CD0:  ADDWF  x1D,W
04CD2:  MOVWF  x23
04CD4:  MOVLW  00
04CD6:  ADDWFC x1E,W
04CD8:  MOVWF  x24
04CDA:  MOVF   FF2,W
04CDC:  MOVWF  00
04CDE:  BCF    FF2.7
04CE0:  MOVFF  C24,FAA
04CE4:  MOVFF  C23,FA9
04CE8:  MOVLW  0D
04CEA:  MOVWF  FA8
04CEC:  BCF    FA6.6
04CEE:  BCF    FA6.7
04CF0:  BSF    FA6.2
04CF2:  MOVLB  F
04CF4:  MOVLW  55
04CF6:  MOVWF  FA7
04CF8:  MOVLW  AA
04CFA:  MOVWF  FA7
04CFC:  BSF    FA6.1
04CFE:  BTFSC  FA6.1
04D00:  BRA    4CFE
04D02:  BCF    FA6.2
04D04:  MOVF   00,W
04D06:  IORWF  FF2,F
....................                      break;
04D08:  BRA    4D98
....................                   }
04D0A:  BRA    4D80
04D0C:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage1[j] = RxD_Buff[i];
04D0E:  MOVLW  9A
04D10:  ADDWF  x1F,W
04D12:  MOVWF  01
04D14:  MOVLW  09
04D16:  ADDWFC x20,W
04D18:  MOVWF  03
04D1A:  MOVLW  7A
04D1C:  ADDWF  x1D,W
04D1E:  MOVWF  FE9
04D20:  MOVLW  01
04D22:  ADDWFC x1E,W
04D24:  MOVWF  FEA
04D26:  MOVFF  FEF,C25
04D2A:  MOVFF  03,FEA
04D2E:  MOVFF  01,FE9
04D32:  MOVFF  C25,FEF
....................                      
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
04D36:  MOVLW  5D
04D38:  ADDWF  x1D,W
04D3A:  MOVWF  x23
04D3C:  MOVLW  00
04D3E:  ADDWFC x1E,W
04D40:  MOVWF  x24
04D42:  MOVLW  7A
04D44:  ADDWF  x1D,W
04D46:  MOVWF  FE9
04D48:  MOVLW  01
04D4A:  ADDWFC x1E,W
04D4C:  MOVWF  FEA
04D4E:  MOVFF  FEF,C25
04D52:  MOVF   FF2,W
04D54:  MOVWF  00
04D56:  BCF    FF2.7
04D58:  MOVFF  C24,FAA
04D5C:  MOVFF  C23,FA9
04D60:  MOVFF  C25,FA8
04D64:  BCF    FA6.6
04D66:  BCF    FA6.7
04D68:  BSF    FA6.2
04D6A:  MOVLB  F
04D6C:  MOVLW  55
04D6E:  MOVWF  FA7
04D70:  MOVLW  AA
04D72:  MOVWF  FA7
04D74:  BSF    FA6.1
04D76:  BTFSC  FA6.1
04D78:  BRA    4D76
04D7A:  BCF    FA6.2
04D7C:  MOVF   00,W
04D7E:  IORWF  FF2,F
....................                   }
04D80:  MOVLB  C
04D82:  MOVFF  C1E,03
04D86:  MOVF   x1D,W
04D88:  INCF   x1D,F
04D8A:  BTFSC  FD8.2
04D8C:  INCF   x1E,F
04D8E:  INCF   x1F,F
04D90:  BTFSC  FD8.2
04D92:  INCF   x20,F
04D94:  BRA    4CB0
04D96:  MOVLB  F
....................                }
....................                SMS_Massage1[j] = '\0' ; // end string
04D98:  MOVLW  9A
04D9A:  MOVLB  C
04D9C:  ADDWF  x1F,W
04D9E:  MOVWF  FE9
04DA0:  MOVLW  09
04DA2:  ADDWFC x20,W
04DA4:  MOVWF  FEA
04DA6:  CLRF   FEF
....................                
....................                j=0;
04DA8:  CLRF   x20
04DAA:  CLRF   x1F
....................                i++;
04DAC:  INCF   x1D,F
04DAE:  BTFSC  FD8.2
04DB0:  INCF   x1E,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
04DB2:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
04DB4:  MOVLW  7A
04DB6:  ADDWF  x1D,W
04DB8:  MOVWF  FE9
04DBA:  MOVLW  01
04DBC:  ADDWFC x1E,W
04DBE:  MOVWF  FEA
04DC0:  MOVF   FEF,W
04DC2:  SUBLW  0D
04DC4:  BZ    4DD0
04DC6:  MOVF   x20,F
04DC8:  BNZ   4DD0
04DCA:  MOVF   x1F,W
04DCC:  SUBLW  1E
04DCE:  BC    4E10
....................                   {  
....................                      write_eeprom(0x5D+i,0x0D);
04DD0:  MOVLW  5D
04DD2:  ADDWF  x1D,W
04DD4:  MOVWF  x23
04DD6:  MOVLW  00
04DD8:  ADDWFC x1E,W
04DDA:  MOVWF  x24
04DDC:  MOVF   FF2,W
04DDE:  MOVWF  00
04DE0:  BCF    FF2.7
04DE2:  MOVFF  C24,FAA
04DE6:  MOVFF  C23,FA9
04DEA:  MOVLW  0D
04DEC:  MOVWF  FA8
04DEE:  BCF    FA6.6
04DF0:  BCF    FA6.7
04DF2:  BSF    FA6.2
04DF4:  MOVLB  F
04DF6:  MOVLW  55
04DF8:  MOVWF  FA7
04DFA:  MOVLW  AA
04DFC:  MOVWF  FA7
04DFE:  BSF    FA6.1
04E00:  BTFSC  FA6.1
04E02:  BRA    4E00
04E04:  BCF    FA6.2
04E06:  MOVF   00,W
04E08:  IORWF  FF2,F
....................                      break;
04E0A:  BRA    4E9A
....................                   }
04E0C:  BRA    4E82
04E0E:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage2[j] = RxD_Buff[i];
04E10:  MOVLW  BA
04E12:  ADDWF  x1F,W
04E14:  MOVWF  01
04E16:  MOVLW  09
04E18:  ADDWFC x20,W
04E1A:  MOVWF  03
04E1C:  MOVLW  7A
04E1E:  ADDWF  x1D,W
04E20:  MOVWF  FE9
04E22:  MOVLW  01
04E24:  ADDWFC x1E,W
04E26:  MOVWF  FEA
04E28:  MOVFF  FEF,C25
04E2C:  MOVFF  03,FEA
04E30:  MOVFF  01,FE9
04E34:  MOVFF  C25,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
04E38:  MOVLW  5D
04E3A:  ADDWF  x1D,W
04E3C:  MOVWF  x23
04E3E:  MOVLW  00
04E40:  ADDWFC x1E,W
04E42:  MOVWF  x24
04E44:  MOVLW  7A
04E46:  ADDWF  x1D,W
04E48:  MOVWF  FE9
04E4A:  MOVLW  01
04E4C:  ADDWFC x1E,W
04E4E:  MOVWF  FEA
04E50:  MOVFF  FEF,C25
04E54:  MOVF   FF2,W
04E56:  MOVWF  00
04E58:  BCF    FF2.7
04E5A:  MOVFF  C24,FAA
04E5E:  MOVFF  C23,FA9
04E62:  MOVFF  C25,FA8
04E66:  BCF    FA6.6
04E68:  BCF    FA6.7
04E6A:  BSF    FA6.2
04E6C:  MOVLB  F
04E6E:  MOVLW  55
04E70:  MOVWF  FA7
04E72:  MOVLW  AA
04E74:  MOVWF  FA7
04E76:  BSF    FA6.1
04E78:  BTFSC  FA6.1
04E7A:  BRA    4E78
04E7C:  BCF    FA6.2
04E7E:  MOVF   00,W
04E80:  IORWF  FF2,F
....................                   }
04E82:  MOVLB  C
04E84:  MOVFF  C1E,03
04E88:  MOVF   x1D,W
04E8A:  INCF   x1D,F
04E8C:  BTFSC  FD8.2
04E8E:  INCF   x1E,F
04E90:  INCF   x1F,F
04E92:  BTFSC  FD8.2
04E94:  INCF   x20,F
04E96:  BRA    4DB2
04E98:  MOVLB  F
....................                }
....................                SMS_Massage2[j] = '\0' ; // end string
04E9A:  MOVLW  BA
04E9C:  MOVLB  C
04E9E:  ADDWF  x1F,W
04EA0:  MOVWF  FE9
04EA2:  MOVLW  09
04EA4:  ADDWFC x20,W
04EA6:  MOVWF  FEA
04EA8:  CLRF   FEF
....................                
....................                j=0;
04EAA:  CLRF   x20
04EAC:  CLRF   x1F
....................                i++;
04EAE:  INCF   x1D,F
04EB0:  BTFSC  FD8.2
04EB2:  INCF   x1E,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
04EB4:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
04EB6:  MOVLW  7A
04EB8:  ADDWF  x1D,W
04EBA:  MOVWF  FE9
04EBC:  MOVLW  01
04EBE:  ADDWFC x1E,W
04EC0:  MOVWF  FEA
04EC2:  MOVF   FEF,W
04EC4:  SUBLW  0D
04EC6:  BZ    4ED2
04EC8:  MOVF   x20,F
04ECA:  BNZ   4ED2
04ECC:  MOVF   x1F,W
04ECE:  SUBLW  1E
04ED0:  BC    4F12
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
04ED2:  MOVLW  5D
04ED4:  ADDWF  x1D,W
04ED6:  MOVWF  x23
04ED8:  MOVLW  00
04EDA:  ADDWFC x1E,W
04EDC:  MOVWF  x24
04EDE:  MOVF   FF2,W
04EE0:  MOVWF  00
04EE2:  BCF    FF2.7
04EE4:  MOVFF  C24,FAA
04EE8:  MOVFF  C23,FA9
04EEC:  MOVLW  0D
04EEE:  MOVWF  FA8
04EF0:  BCF    FA6.6
04EF2:  BCF    FA6.7
04EF4:  BSF    FA6.2
04EF6:  MOVLB  F
04EF8:  MOVLW  55
04EFA:  MOVWF  FA7
04EFC:  MOVLW  AA
04EFE:  MOVWF  FA7
04F00:  BSF    FA6.1
04F02:  BTFSC  FA6.1
04F04:  BRA    4F02
04F06:  BCF    FA6.2
04F08:  MOVF   00,W
04F0A:  IORWF  FF2,F
....................                      break;
04F0C:  BRA    4F9C
....................                   }
04F0E:  BRA    4F84
04F10:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage3[j] = RxD_Buff[i];
04F12:  MOVLW  DA
04F14:  ADDWF  x1F,W
04F16:  MOVWF  01
04F18:  MOVLW  09
04F1A:  ADDWFC x20,W
04F1C:  MOVWF  03
04F1E:  MOVLW  7A
04F20:  ADDWF  x1D,W
04F22:  MOVWF  FE9
04F24:  MOVLW  01
04F26:  ADDWFC x1E,W
04F28:  MOVWF  FEA
04F2A:  MOVFF  FEF,C25
04F2E:  MOVFF  03,FEA
04F32:  MOVFF  01,FE9
04F36:  MOVFF  C25,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
04F3A:  MOVLW  5D
04F3C:  ADDWF  x1D,W
04F3E:  MOVWF  x23
04F40:  MOVLW  00
04F42:  ADDWFC x1E,W
04F44:  MOVWF  x24
04F46:  MOVLW  7A
04F48:  ADDWF  x1D,W
04F4A:  MOVWF  FE9
04F4C:  MOVLW  01
04F4E:  ADDWFC x1E,W
04F50:  MOVWF  FEA
04F52:  MOVFF  FEF,C25
04F56:  MOVF   FF2,W
04F58:  MOVWF  00
04F5A:  BCF    FF2.7
04F5C:  MOVFF  C24,FAA
04F60:  MOVFF  C23,FA9
04F64:  MOVFF  C25,FA8
04F68:  BCF    FA6.6
04F6A:  BCF    FA6.7
04F6C:  BSF    FA6.2
04F6E:  MOVLB  F
04F70:  MOVLW  55
04F72:  MOVWF  FA7
04F74:  MOVLW  AA
04F76:  MOVWF  FA7
04F78:  BSF    FA6.1
04F7A:  BTFSC  FA6.1
04F7C:  BRA    4F7A
04F7E:  BCF    FA6.2
04F80:  MOVF   00,W
04F82:  IORWF  FF2,F
....................                   }
04F84:  MOVLB  C
04F86:  MOVFF  C1E,03
04F8A:  MOVF   x1D,W
04F8C:  INCF   x1D,F
04F8E:  BTFSC  FD8.2
04F90:  INCF   x1E,F
04F92:  INCF   x1F,F
04F94:  BTFSC  FD8.2
04F96:  INCF   x20,F
04F98:  BRA    4EB4
04F9A:  MOVLB  F
....................                }
....................                SMS_Massage3[j] = '\0' ; // end string
04F9C:  MOVLW  DA
04F9E:  MOVLB  C
04FA0:  ADDWF  x1F,W
04FA2:  MOVWF  FE9
04FA4:  MOVLW  09
04FA6:  ADDWFC x20,W
04FA8:  MOVWF  FEA
04FAA:  CLRF   FEF
....................                
....................                j=0;
04FAC:  CLRF   x20
04FAE:  CLRF   x1F
....................                i++;
04FB0:  INCF   x1D,F
04FB2:  BTFSC  FD8.2
04FB4:  INCF   x1E,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
04FB6:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
04FB8:  MOVLW  7A
04FBA:  ADDWF  x1D,W
04FBC:  MOVWF  FE9
04FBE:  MOVLW  01
04FC0:  ADDWFC x1E,W
04FC2:  MOVWF  FEA
04FC4:  MOVF   FEF,W
04FC6:  SUBLW  0D
04FC8:  BZ    4FD4
04FCA:  MOVF   x20,F
04FCC:  BNZ   4FD4
04FCE:  MOVF   x1F,W
04FD0:  SUBLW  1E
04FD2:  BC    5014
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
04FD4:  MOVLW  5D
04FD6:  ADDWF  x1D,W
04FD8:  MOVWF  x23
04FDA:  MOVLW  00
04FDC:  ADDWFC x1E,W
04FDE:  MOVWF  x24
04FE0:  MOVF   FF2,W
04FE2:  MOVWF  00
04FE4:  BCF    FF2.7
04FE6:  MOVFF  C24,FAA
04FEA:  MOVFF  C23,FA9
04FEE:  MOVLW  0D
04FF0:  MOVWF  FA8
04FF2:  BCF    FA6.6
04FF4:  BCF    FA6.7
04FF6:  BSF    FA6.2
04FF8:  MOVLB  F
04FFA:  MOVLW  55
04FFC:  MOVWF  FA7
04FFE:  MOVLW  AA
05000:  MOVWF  FA7
05002:  BSF    FA6.1
05004:  BTFSC  FA6.1
05006:  BRA    5004
05008:  BCF    FA6.2
0500A:  MOVF   00,W
0500C:  IORWF  FF2,F
....................                      break;
0500E:  BRA    509E
....................                   }
05010:  BRA    5086
05012:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage4[j] = RxD_Buff[i];
05014:  MOVLW  FA
05016:  ADDWF  x1F,W
05018:  MOVWF  01
0501A:  MOVLW  09
0501C:  ADDWFC x20,W
0501E:  MOVWF  03
05020:  MOVLW  7A
05022:  ADDWF  x1D,W
05024:  MOVWF  FE9
05026:  MOVLW  01
05028:  ADDWFC x1E,W
0502A:  MOVWF  FEA
0502C:  MOVFF  FEF,C25
05030:  MOVFF  03,FEA
05034:  MOVFF  01,FE9
05038:  MOVFF  C25,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0503C:  MOVLW  5D
0503E:  ADDWF  x1D,W
05040:  MOVWF  x23
05042:  MOVLW  00
05044:  ADDWFC x1E,W
05046:  MOVWF  x24
05048:  MOVLW  7A
0504A:  ADDWF  x1D,W
0504C:  MOVWF  FE9
0504E:  MOVLW  01
05050:  ADDWFC x1E,W
05052:  MOVWF  FEA
05054:  MOVFF  FEF,C25
05058:  MOVF   FF2,W
0505A:  MOVWF  00
0505C:  BCF    FF2.7
0505E:  MOVFF  C24,FAA
05062:  MOVFF  C23,FA9
05066:  MOVFF  C25,FA8
0506A:  BCF    FA6.6
0506C:  BCF    FA6.7
0506E:  BSF    FA6.2
05070:  MOVLB  F
05072:  MOVLW  55
05074:  MOVWF  FA7
05076:  MOVLW  AA
05078:  MOVWF  FA7
0507A:  BSF    FA6.1
0507C:  BTFSC  FA6.1
0507E:  BRA    507C
05080:  BCF    FA6.2
05082:  MOVF   00,W
05084:  IORWF  FF2,F
....................                   }
05086:  MOVLB  C
05088:  MOVFF  C1E,03
0508C:  MOVF   x1D,W
0508E:  INCF   x1D,F
05090:  BTFSC  FD8.2
05092:  INCF   x1E,F
05094:  INCF   x1F,F
05096:  BTFSC  FD8.2
05098:  INCF   x20,F
0509A:  BRA    4FB6
0509C:  MOVLB  F
....................                }
....................                SMS_Massage4[j] = '\0' ; // end string
0509E:  MOVLW  FA
050A0:  MOVLB  C
050A2:  ADDWF  x1F,W
050A4:  MOVWF  FE9
050A6:  MOVLW  09
050A8:  ADDWFC x20,W
050AA:  MOVWF  FEA
050AC:  CLRF   FEF
....................                
....................                j=0;
050AE:  CLRF   x20
050B0:  CLRF   x1F
....................                i++;
050B2:  INCF   x1D,F
050B4:  BTFSC  FD8.2
050B6:  INCF   x1E,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
050B8:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
050BA:  MOVLW  7A
050BC:  ADDWF  x1D,W
050BE:  MOVWF  FE9
050C0:  MOVLW  01
050C2:  ADDWFC x1E,W
050C4:  MOVWF  FEA
050C6:  MOVF   FEF,W
050C8:  SUBLW  0D
050CA:  BZ    50D6
050CC:  MOVF   x20,F
050CE:  BNZ   50D6
050D0:  MOVF   x1F,W
050D2:  SUBLW  1E
050D4:  BC    5116
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
050D6:  MOVLW  5D
050D8:  ADDWF  x1D,W
050DA:  MOVWF  x23
050DC:  MOVLW  00
050DE:  ADDWFC x1E,W
050E0:  MOVWF  x24
050E2:  MOVF   FF2,W
050E4:  MOVWF  00
050E6:  BCF    FF2.7
050E8:  MOVFF  C24,FAA
050EC:  MOVFF  C23,FA9
050F0:  MOVLW  0D
050F2:  MOVWF  FA8
050F4:  BCF    FA6.6
050F6:  BCF    FA6.7
050F8:  BSF    FA6.2
050FA:  MOVLB  F
050FC:  MOVLW  55
050FE:  MOVWF  FA7
05100:  MOVLW  AA
05102:  MOVWF  FA7
05104:  BSF    FA6.1
05106:  BTFSC  FA6.1
05108:  BRA    5106
0510A:  BCF    FA6.2
0510C:  MOVF   00,W
0510E:  IORWF  FF2,F
....................                      break;
05110:  BRA    51A0
....................                   }
05112:  BRA    5188
05114:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage5[j] = RxD_Buff[i];
05116:  MOVLW  1A
05118:  ADDWF  x1F,W
0511A:  MOVWF  01
0511C:  MOVLW  0A
0511E:  ADDWFC x20,W
05120:  MOVWF  03
05122:  MOVLW  7A
05124:  ADDWF  x1D,W
05126:  MOVWF  FE9
05128:  MOVLW  01
0512A:  ADDWFC x1E,W
0512C:  MOVWF  FEA
0512E:  MOVFF  FEF,C25
05132:  MOVFF  03,FEA
05136:  MOVFF  01,FE9
0513A:  MOVFF  C25,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0513E:  MOVLW  5D
05140:  ADDWF  x1D,W
05142:  MOVWF  x23
05144:  MOVLW  00
05146:  ADDWFC x1E,W
05148:  MOVWF  x24
0514A:  MOVLW  7A
0514C:  ADDWF  x1D,W
0514E:  MOVWF  FE9
05150:  MOVLW  01
05152:  ADDWFC x1E,W
05154:  MOVWF  FEA
05156:  MOVFF  FEF,C25
0515A:  MOVF   FF2,W
0515C:  MOVWF  00
0515E:  BCF    FF2.7
05160:  MOVFF  C24,FAA
05164:  MOVFF  C23,FA9
05168:  MOVFF  C25,FA8
0516C:  BCF    FA6.6
0516E:  BCF    FA6.7
05170:  BSF    FA6.2
05172:  MOVLB  F
05174:  MOVLW  55
05176:  MOVWF  FA7
05178:  MOVLW  AA
0517A:  MOVWF  FA7
0517C:  BSF    FA6.1
0517E:  BTFSC  FA6.1
05180:  BRA    517E
05182:  BCF    FA6.2
05184:  MOVF   00,W
05186:  IORWF  FF2,F
....................                   }
05188:  MOVLB  C
0518A:  MOVFF  C1E,03
0518E:  MOVF   x1D,W
05190:  INCF   x1D,F
05192:  BTFSC  FD8.2
05194:  INCF   x1E,F
05196:  INCF   x1F,F
05198:  BTFSC  FD8.2
0519A:  INCF   x20,F
0519C:  BRA    50B8
0519E:  MOVLB  F
....................                }
....................                SMS_Massage5[j] = '\0' ; // end string
051A0:  MOVLW  1A
051A2:  MOVLB  C
051A4:  ADDWF  x1F,W
051A6:  MOVWF  FE9
051A8:  MOVLW  0A
051AA:  ADDWFC x20,W
051AC:  MOVWF  FEA
051AE:  CLRF   FEF
....................                
....................                j=0;
051B0:  CLRF   x20
051B2:  CLRF   x1F
....................                i++;
051B4:  INCF   x1D,F
051B6:  BTFSC  FD8.2
051B8:  INCF   x1E,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
051BA:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
051BC:  MOVLW  7A
051BE:  ADDWF  x1D,W
051C0:  MOVWF  FE9
051C2:  MOVLW  01
051C4:  ADDWFC x1E,W
051C6:  MOVWF  FEA
051C8:  MOVF   FEF,W
051CA:  SUBLW  0D
051CC:  BZ    51D8
051CE:  MOVF   x20,F
051D0:  BNZ   51D8
051D2:  MOVF   x1F,W
051D4:  SUBLW  1E
051D6:  BC    5218
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
051D8:  MOVLW  5D
051DA:  ADDWF  x1D,W
051DC:  MOVWF  x23
051DE:  MOVLW  00
051E0:  ADDWFC x1E,W
051E2:  MOVWF  x24
051E4:  MOVF   FF2,W
051E6:  MOVWF  00
051E8:  BCF    FF2.7
051EA:  MOVFF  C24,FAA
051EE:  MOVFF  C23,FA9
051F2:  MOVLW  0D
051F4:  MOVWF  FA8
051F6:  BCF    FA6.6
051F8:  BCF    FA6.7
051FA:  BSF    FA6.2
051FC:  MOVLB  F
051FE:  MOVLW  55
05200:  MOVWF  FA7
05202:  MOVLW  AA
05204:  MOVWF  FA7
05206:  BSF    FA6.1
05208:  BTFSC  FA6.1
0520A:  BRA    5208
0520C:  BCF    FA6.2
0520E:  MOVF   00,W
05210:  IORWF  FF2,F
....................                      break;
05212:  BRA    52A6
....................                   }
05214:  BRA    528E
05216:  MOVLB  C
....................                   else
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05218:  MOVLW  5D
0521A:  ADDWF  x1D,W
0521C:  MOVWF  x23
0521E:  MOVLW  00
05220:  ADDWFC x1E,W
05222:  MOVWF  x24
05224:  MOVLW  7A
05226:  ADDWF  x1D,W
05228:  MOVWF  FE9
0522A:  MOVLW  01
0522C:  ADDWFC x1E,W
0522E:  MOVWF  FEA
05230:  MOVFF  FEF,C25
05234:  MOVF   FF2,W
05236:  MOVWF  00
05238:  BCF    FF2.7
0523A:  MOVFF  C24,FAA
0523E:  MOVFF  C23,FA9
05242:  MOVFF  C25,FA8
05246:  BCF    FA6.6
05248:  BCF    FA6.7
0524A:  BSF    FA6.2
0524C:  MOVLB  F
0524E:  MOVLW  55
05250:  MOVWF  FA7
05252:  MOVLW  AA
05254:  MOVWF  FA7
05256:  BSF    FA6.1
05258:  BTFSC  FA6.1
0525A:  BRA    5258
0525C:  BCF    FA6.2
0525E:  MOVF   00,W
05260:  IORWF  FF2,F
....................                      SMS_Massage6[j] = RxD_Buff[i];
05262:  MOVLW  3A
05264:  MOVLB  C
05266:  ADDWF  x1F,W
05268:  MOVWF  01
0526A:  MOVLW  0A
0526C:  ADDWFC x20,W
0526E:  MOVWF  03
05270:  MOVLW  7A
05272:  ADDWF  x1D,W
05274:  MOVWF  FE9
05276:  MOVLW  01
05278:  ADDWFC x1E,W
0527A:  MOVWF  FEA
0527C:  MOVFF  FEF,C25
05280:  MOVFF  03,FEA
05284:  MOVFF  01,FE9
05288:  MOVFF  C25,FEF
0528C:  MOVLB  F
....................                   }
0528E:  MOVLB  C
05290:  MOVFF  C1E,03
05294:  MOVF   x1D,W
05296:  INCF   x1D,F
05298:  BTFSC  FD8.2
0529A:  INCF   x1E,F
0529C:  INCF   x1F,F
0529E:  BTFSC  FD8.2
052A0:  INCF   x20,F
052A2:  BRA    51BA
052A4:  MOVLB  F
....................                }
....................                SMS_Massage6[j] = '\0' ; // end string
052A6:  MOVLW  3A
052A8:  MOVLB  C
052AA:  ADDWF  x1F,W
052AC:  MOVWF  FE9
052AE:  MOVLW  0A
052B0:  ADDWFC x20,W
052B2:  MOVWF  FEA
052B4:  CLRF   FEF
....................                
....................                j=0;
052B6:  CLRF   x20
052B8:  CLRF   x1F
....................                i++;
052BA:  INCF   x1D,F
052BC:  BTFSC  FD8.2
052BE:  INCF   x1E,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
052C0:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
052C2:  MOVLW  7A
052C4:  ADDWF  x1D,W
052C6:  MOVWF  FE9
052C8:  MOVLW  01
052CA:  ADDWFC x1E,W
052CC:  MOVWF  FEA
052CE:  MOVF   FEF,W
052D0:  SUBLW  0D
052D2:  BZ    52DE
052D4:  MOVF   x20,F
052D6:  BNZ   52DE
052D8:  MOVF   x1F,W
052DA:  SUBLW  1E
052DC:  BC    531E
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
052DE:  MOVLW  5D
052E0:  ADDWF  x1D,W
052E2:  MOVWF  x23
052E4:  MOVLW  00
052E6:  ADDWFC x1E,W
052E8:  MOVWF  x24
052EA:  MOVF   FF2,W
052EC:  MOVWF  00
052EE:  BCF    FF2.7
052F0:  MOVFF  C24,FAA
052F4:  MOVFF  C23,FA9
052F8:  MOVLW  0D
052FA:  MOVWF  FA8
052FC:  BCF    FA6.6
052FE:  BCF    FA6.7
05300:  BSF    FA6.2
05302:  MOVLB  F
05304:  MOVLW  55
05306:  MOVWF  FA7
05308:  MOVLW  AA
0530A:  MOVWF  FA7
0530C:  BSF    FA6.1
0530E:  BTFSC  FA6.1
05310:  BRA    530E
05312:  BCF    FA6.2
05314:  MOVF   00,W
05316:  IORWF  FF2,F
....................                      break;
05318:  BRA    53A8
....................                   }
0531A:  BRA    5390
0531C:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage7[j] = RxD_Buff[i];
0531E:  MOVLW  5A
05320:  ADDWF  x1F,W
05322:  MOVWF  01
05324:  MOVLW  0A
05326:  ADDWFC x20,W
05328:  MOVWF  03
0532A:  MOVLW  7A
0532C:  ADDWF  x1D,W
0532E:  MOVWF  FE9
05330:  MOVLW  01
05332:  ADDWFC x1E,W
05334:  MOVWF  FEA
05336:  MOVFF  FEF,C25
0533A:  MOVFF  03,FEA
0533E:  MOVFF  01,FE9
05342:  MOVFF  C25,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05346:  MOVLW  5D
05348:  ADDWF  x1D,W
0534A:  MOVWF  x23
0534C:  MOVLW  00
0534E:  ADDWFC x1E,W
05350:  MOVWF  x24
05352:  MOVLW  7A
05354:  ADDWF  x1D,W
05356:  MOVWF  FE9
05358:  MOVLW  01
0535A:  ADDWFC x1E,W
0535C:  MOVWF  FEA
0535E:  MOVFF  FEF,C25
05362:  MOVF   FF2,W
05364:  MOVWF  00
05366:  BCF    FF2.7
05368:  MOVFF  C24,FAA
0536C:  MOVFF  C23,FA9
05370:  MOVFF  C25,FA8
05374:  BCF    FA6.6
05376:  BCF    FA6.7
05378:  BSF    FA6.2
0537A:  MOVLB  F
0537C:  MOVLW  55
0537E:  MOVWF  FA7
05380:  MOVLW  AA
05382:  MOVWF  FA7
05384:  BSF    FA6.1
05386:  BTFSC  FA6.1
05388:  BRA    5386
0538A:  BCF    FA6.2
0538C:  MOVF   00,W
0538E:  IORWF  FF2,F
....................                   }
05390:  MOVLB  C
05392:  MOVFF  C1E,03
05396:  MOVF   x1D,W
05398:  INCF   x1D,F
0539A:  BTFSC  FD8.2
0539C:  INCF   x1E,F
0539E:  INCF   x1F,F
053A0:  BTFSC  FD8.2
053A2:  INCF   x20,F
053A4:  BRA    52C0
053A6:  MOVLB  F
....................                }
....................                SMS_Massage7[j] = '\0' ; // end string
053A8:  MOVLW  5A
053AA:  MOVLB  C
053AC:  ADDWF  x1F,W
053AE:  MOVWF  FE9
053B0:  MOVLW  0A
053B2:  ADDWFC x20,W
053B4:  MOVWF  FEA
053B6:  CLRF   FEF
....................                
....................                j=0;
053B8:  CLRF   x20
053BA:  CLRF   x1F
....................                i++;
053BC:  INCF   x1D,F
053BE:  BTFSC  FD8.2
053C0:  INCF   x1E,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
053C2:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
053C4:  MOVLW  7A
053C6:  ADDWF  x1D,W
053C8:  MOVWF  FE9
053CA:  MOVLW  01
053CC:  ADDWFC x1E,W
053CE:  MOVWF  FEA
053D0:  MOVF   FEF,W
053D2:  SUBLW  0D
053D4:  BZ    53E0
053D6:  MOVF   x20,F
053D8:  BNZ   53E0
053DA:  MOVF   x1F,W
053DC:  SUBLW  1E
053DE:  BC    5420
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
053E0:  MOVLW  5D
053E2:  ADDWF  x1D,W
053E4:  MOVWF  x23
053E6:  MOVLW  00
053E8:  ADDWFC x1E,W
053EA:  MOVWF  x24
053EC:  MOVF   FF2,W
053EE:  MOVWF  00
053F0:  BCF    FF2.7
053F2:  MOVFF  C24,FAA
053F6:  MOVFF  C23,FA9
053FA:  MOVLW  0D
053FC:  MOVWF  FA8
053FE:  BCF    FA6.6
05400:  BCF    FA6.7
05402:  BSF    FA6.2
05404:  MOVLB  F
05406:  MOVLW  55
05408:  MOVWF  FA7
0540A:  MOVLW  AA
0540C:  MOVWF  FA7
0540E:  BSF    FA6.1
05410:  BTFSC  FA6.1
05412:  BRA    5410
05414:  BCF    FA6.2
05416:  MOVF   00,W
05418:  IORWF  FF2,F
....................                      break;
0541A:  BRA    54AA
....................                   }
0541C:  BRA    5492
0541E:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage8[j] = RxD_Buff[i];
05420:  MOVLW  7A
05422:  ADDWF  x1F,W
05424:  MOVWF  01
05426:  MOVLW  0A
05428:  ADDWFC x20,W
0542A:  MOVWF  03
0542C:  MOVLW  7A
0542E:  ADDWF  x1D,W
05430:  MOVWF  FE9
05432:  MOVLW  01
05434:  ADDWFC x1E,W
05436:  MOVWF  FEA
05438:  MOVFF  FEF,C25
0543C:  MOVFF  03,FEA
05440:  MOVFF  01,FE9
05444:  MOVFF  C25,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05448:  MOVLW  5D
0544A:  ADDWF  x1D,W
0544C:  MOVWF  x23
0544E:  MOVLW  00
05450:  ADDWFC x1E,W
05452:  MOVWF  x24
05454:  MOVLW  7A
05456:  ADDWF  x1D,W
05458:  MOVWF  FE9
0545A:  MOVLW  01
0545C:  ADDWFC x1E,W
0545E:  MOVWF  FEA
05460:  MOVFF  FEF,C25
05464:  MOVF   FF2,W
05466:  MOVWF  00
05468:  BCF    FF2.7
0546A:  MOVFF  C24,FAA
0546E:  MOVFF  C23,FA9
05472:  MOVFF  C25,FA8
05476:  BCF    FA6.6
05478:  BCF    FA6.7
0547A:  BSF    FA6.2
0547C:  MOVLB  F
0547E:  MOVLW  55
05480:  MOVWF  FA7
05482:  MOVLW  AA
05484:  MOVWF  FA7
05486:  BSF    FA6.1
05488:  BTFSC  FA6.1
0548A:  BRA    5488
0548C:  BCF    FA6.2
0548E:  MOVF   00,W
05490:  IORWF  FF2,F
....................                   }
05492:  MOVLB  C
05494:  MOVFF  C1E,03
05498:  MOVF   x1D,W
0549A:  INCF   x1D,F
0549C:  BTFSC  FD8.2
0549E:  INCF   x1E,F
054A0:  INCF   x1F,F
054A2:  BTFSC  FD8.2
054A4:  INCF   x20,F
054A6:  BRA    53C2
054A8:  MOVLB  F
....................                }
....................                SMS_Massage8[j] = '\0' ; // end string
054AA:  MOVLW  7A
054AC:  MOVLB  C
054AE:  ADDWF  x1F,W
054B0:  MOVWF  FE9
054B2:  MOVLW  0A
054B4:  ADDWFC x20,W
054B6:  MOVWF  FEA
054B8:  CLRF   FEF
....................                
....................                /////////////////////////////////////////////
....................                j=0;
054BA:  CLRF   x20
054BC:  CLRF   x1F
....................                i++;
054BE:  INCF   x1D,F
054C0:  BTFSC  FD8.2
054C2:  INCF   x1E,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
054C4:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
054C6:  MOVLW  7A
054C8:  ADDWF  x1D,W
054CA:  MOVWF  FE9
054CC:  MOVLW  01
054CE:  ADDWFC x1E,W
054D0:  MOVWF  FEA
054D2:  MOVF   FEF,W
054D4:  SUBLW  0D
054D6:  BZ    54E2
054D8:  MOVF   x20,F
054DA:  BNZ   54E2
054DC:  MOVF   x1F,W
054DE:  SUBLW  1E
054E0:  BC    5532
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
054E2:  MOVLW  5D
054E4:  ADDWF  x1D,W
054E6:  MOVWF  x23
054E8:  MOVLW  00
054EA:  ADDWFC x1E,W
054EC:  MOVWF  x24
054EE:  MOVLW  7A
054F0:  ADDWF  x1D,W
054F2:  MOVWF  FE9
054F4:  MOVLW  01
054F6:  ADDWFC x1E,W
054F8:  MOVWF  FEA
054FA:  MOVFF  FEF,C25
054FE:  MOVF   FF2,W
05500:  MOVWF  00
05502:  BCF    FF2.7
05504:  MOVFF  C24,FAA
05508:  MOVFF  C23,FA9
0550C:  MOVFF  C25,FA8
05510:  BCF    FA6.6
05512:  BCF    FA6.7
05514:  BSF    FA6.2
05516:  MOVLB  F
05518:  MOVLW  55
0551A:  MOVWF  FA7
0551C:  MOVLW  AA
0551E:  MOVWF  FA7
05520:  BSF    FA6.1
05522:  BTFSC  FA6.1
05524:  BRA    5522
05526:  BCF    FA6.2
05528:  MOVF   00,W
0552A:  IORWF  FF2,F
....................                      break;
0552C:  BRA    55BC
....................                   }
0552E:  BRA    55A4
05530:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage9[j] = RxD_Buff[i];
05532:  MOVLW  9A
05534:  ADDWF  x1F,W
05536:  MOVWF  01
05538:  MOVLW  0A
0553A:  ADDWFC x20,W
0553C:  MOVWF  03
0553E:  MOVLW  7A
05540:  ADDWF  x1D,W
05542:  MOVWF  FE9
05544:  MOVLW  01
05546:  ADDWFC x1E,W
05548:  MOVWF  FEA
0554A:  MOVFF  FEF,C25
0554E:  MOVFF  03,FEA
05552:  MOVFF  01,FE9
05556:  MOVFF  C25,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0555A:  MOVLW  5D
0555C:  ADDWF  x1D,W
0555E:  MOVWF  x23
05560:  MOVLW  00
05562:  ADDWFC x1E,W
05564:  MOVWF  x24
05566:  MOVLW  7A
05568:  ADDWF  x1D,W
0556A:  MOVWF  FE9
0556C:  MOVLW  01
0556E:  ADDWFC x1E,W
05570:  MOVWF  FEA
05572:  MOVFF  FEF,C25
05576:  MOVF   FF2,W
05578:  MOVWF  00
0557A:  BCF    FF2.7
0557C:  MOVFF  C24,FAA
05580:  MOVFF  C23,FA9
05584:  MOVFF  C25,FA8
05588:  BCF    FA6.6
0558A:  BCF    FA6.7
0558C:  BSF    FA6.2
0558E:  MOVLB  F
05590:  MOVLW  55
05592:  MOVWF  FA7
05594:  MOVLW  AA
05596:  MOVWF  FA7
05598:  BSF    FA6.1
0559A:  BTFSC  FA6.1
0559C:  BRA    559A
0559E:  BCF    FA6.2
055A0:  MOVF   00,W
055A2:  IORWF  FF2,F
....................                   }
055A4:  MOVLB  C
055A6:  MOVFF  C1E,03
055AA:  MOVF   x1D,W
055AC:  INCF   x1D,F
055AE:  BTFSC  FD8.2
055B0:  INCF   x1E,F
055B2:  INCF   x1F,F
055B4:  BTFSC  FD8.2
055B6:  INCF   x20,F
055B8:  BRA    54C4
055BA:  MOVLB  F
....................                }
....................                SMS_Massage9[j] = '\0' ; // end string
055BC:  MOVLW  9A
055BE:  MOVLB  C
055C0:  ADDWF  x1F,W
055C2:  MOVWF  FE9
055C4:  MOVLW  0A
055C6:  ADDWFC x20,W
055C8:  MOVWF  FEA
055CA:  CLRF   FEF
....................                j=0;
055CC:  CLRF   x20
055CE:  CLRF   x1F
....................                i++;
055D0:  INCF   x1D,F
055D2:  BTFSC  FD8.2
055D4:  INCF   x1E,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
055D6:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
055D8:  MOVLW  7A
055DA:  ADDWF  x1D,W
055DC:  MOVWF  FE9
055DE:  MOVLW  01
055E0:  ADDWFC x1E,W
055E2:  MOVWF  FEA
055E4:  MOVF   FEF,W
055E6:  SUBLW  0D
055E8:  BZ    55F4
055EA:  MOVF   x20,F
055EC:  BNZ   55F4
055EE:  MOVF   x1F,W
055F0:  SUBLW  1E
055F2:  BC    5644
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
055F4:  MOVLW  5D
055F6:  ADDWF  x1D,W
055F8:  MOVWF  x23
055FA:  MOVLW  00
055FC:  ADDWFC x1E,W
055FE:  MOVWF  x24
05600:  MOVLW  7A
05602:  ADDWF  x1D,W
05604:  MOVWF  FE9
05606:  MOVLW  01
05608:  ADDWFC x1E,W
0560A:  MOVWF  FEA
0560C:  MOVFF  FEF,C25
05610:  MOVF   FF2,W
05612:  MOVWF  00
05614:  BCF    FF2.7
05616:  MOVFF  C24,FAA
0561A:  MOVFF  C23,FA9
0561E:  MOVFF  C25,FA8
05622:  BCF    FA6.6
05624:  BCF    FA6.7
05626:  BSF    FA6.2
05628:  MOVLB  F
0562A:  MOVLW  55
0562C:  MOVWF  FA7
0562E:  MOVLW  AA
05630:  MOVWF  FA7
05632:  BSF    FA6.1
05634:  BTFSC  FA6.1
05636:  BRA    5634
05638:  BCF    FA6.2
0563A:  MOVF   00,W
0563C:  IORWF  FF2,F
....................                      break;
0563E:  BRA    56CE
....................                   }
05640:  BRA    56B6
05642:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage10[j] = RxD_Buff[i];
05644:  MOVLW  BA
05646:  ADDWF  x1F,W
05648:  MOVWF  01
0564A:  MOVLW  0A
0564C:  ADDWFC x20,W
0564E:  MOVWF  03
05650:  MOVLW  7A
05652:  ADDWF  x1D,W
05654:  MOVWF  FE9
05656:  MOVLW  01
05658:  ADDWFC x1E,W
0565A:  MOVWF  FEA
0565C:  MOVFF  FEF,C25
05660:  MOVFF  03,FEA
05664:  MOVFF  01,FE9
05668:  MOVFF  C25,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0566C:  MOVLW  5D
0566E:  ADDWF  x1D,W
05670:  MOVWF  x23
05672:  MOVLW  00
05674:  ADDWFC x1E,W
05676:  MOVWF  x24
05678:  MOVLW  7A
0567A:  ADDWF  x1D,W
0567C:  MOVWF  FE9
0567E:  MOVLW  01
05680:  ADDWFC x1E,W
05682:  MOVWF  FEA
05684:  MOVFF  FEF,C25
05688:  MOVF   FF2,W
0568A:  MOVWF  00
0568C:  BCF    FF2.7
0568E:  MOVFF  C24,FAA
05692:  MOVFF  C23,FA9
05696:  MOVFF  C25,FA8
0569A:  BCF    FA6.6
0569C:  BCF    FA6.7
0569E:  BSF    FA6.2
056A0:  MOVLB  F
056A2:  MOVLW  55
056A4:  MOVWF  FA7
056A6:  MOVLW  AA
056A8:  MOVWF  FA7
056AA:  BSF    FA6.1
056AC:  BTFSC  FA6.1
056AE:  BRA    56AC
056B0:  BCF    FA6.2
056B2:  MOVF   00,W
056B4:  IORWF  FF2,F
....................                   }
056B6:  MOVLB  C
056B8:  MOVFF  C1E,03
056BC:  MOVF   x1D,W
056BE:  INCF   x1D,F
056C0:  BTFSC  FD8.2
056C2:  INCF   x1E,F
056C4:  INCF   x1F,F
056C6:  BTFSC  FD8.2
056C8:  INCF   x20,F
056CA:  BRA    55D6
056CC:  MOVLB  F
....................                }
....................                SMS_Massage10[j] = '\0' ; // end string
056CE:  MOVLW  BA
056D0:  MOVLB  C
056D2:  ADDWF  x1F,W
056D4:  MOVWF  FE9
056D6:  MOVLW  0A
056D8:  ADDWFC x20,W
056DA:  MOVWF  FEA
056DC:  CLRF   FEF
....................                
....................                j=0;
056DE:  CLRF   x20
056E0:  CLRF   x1F
....................                i++;
056E2:  INCF   x1D,F
056E4:  BTFSC  FD8.2
056E6:  INCF   x1E,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
056E8:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
056EA:  MOVLW  7A
056EC:  ADDWF  x1D,W
056EE:  MOVWF  FE9
056F0:  MOVLW  01
056F2:  ADDWFC x1E,W
056F4:  MOVWF  FEA
056F6:  MOVF   FEF,W
056F8:  SUBLW  0D
056FA:  BZ    5706
056FC:  MOVF   x20,F
056FE:  BNZ   5706
05700:  MOVF   x1F,W
05702:  SUBLW  1E
05704:  BC    5756
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05706:  MOVLW  5D
05708:  ADDWF  x1D,W
0570A:  MOVWF  x23
0570C:  MOVLW  00
0570E:  ADDWFC x1E,W
05710:  MOVWF  x24
05712:  MOVLW  7A
05714:  ADDWF  x1D,W
05716:  MOVWF  FE9
05718:  MOVLW  01
0571A:  ADDWFC x1E,W
0571C:  MOVWF  FEA
0571E:  MOVFF  FEF,C25
05722:  MOVF   FF2,W
05724:  MOVWF  00
05726:  BCF    FF2.7
05728:  MOVFF  C24,FAA
0572C:  MOVFF  C23,FA9
05730:  MOVFF  C25,FA8
05734:  BCF    FA6.6
05736:  BCF    FA6.7
05738:  BSF    FA6.2
0573A:  MOVLB  F
0573C:  MOVLW  55
0573E:  MOVWF  FA7
05740:  MOVLW  AA
05742:  MOVWF  FA7
05744:  BSF    FA6.1
05746:  BTFSC  FA6.1
05748:  BRA    5746
0574A:  BCF    FA6.2
0574C:  MOVF   00,W
0574E:  IORWF  FF2,F
....................                      break;
05750:  BRA    57E0
....................                   }
05752:  BRA    57C8
05754:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage11[j] = RxD_Buff[i];
05756:  MOVLW  DA
05758:  ADDWF  x1F,W
0575A:  MOVWF  01
0575C:  MOVLW  0A
0575E:  ADDWFC x20,W
05760:  MOVWF  03
05762:  MOVLW  7A
05764:  ADDWF  x1D,W
05766:  MOVWF  FE9
05768:  MOVLW  01
0576A:  ADDWFC x1E,W
0576C:  MOVWF  FEA
0576E:  MOVFF  FEF,C25
05772:  MOVFF  03,FEA
05776:  MOVFF  01,FE9
0577A:  MOVFF  C25,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0577E:  MOVLW  5D
05780:  ADDWF  x1D,W
05782:  MOVWF  x23
05784:  MOVLW  00
05786:  ADDWFC x1E,W
05788:  MOVWF  x24
0578A:  MOVLW  7A
0578C:  ADDWF  x1D,W
0578E:  MOVWF  FE9
05790:  MOVLW  01
05792:  ADDWFC x1E,W
05794:  MOVWF  FEA
05796:  MOVFF  FEF,C25
0579A:  MOVF   FF2,W
0579C:  MOVWF  00
0579E:  BCF    FF2.7
057A0:  MOVFF  C24,FAA
057A4:  MOVFF  C23,FA9
057A8:  MOVFF  C25,FA8
057AC:  BCF    FA6.6
057AE:  BCF    FA6.7
057B0:  BSF    FA6.2
057B2:  MOVLB  F
057B4:  MOVLW  55
057B6:  MOVWF  FA7
057B8:  MOVLW  AA
057BA:  MOVWF  FA7
057BC:  BSF    FA6.1
057BE:  BTFSC  FA6.1
057C0:  BRA    57BE
057C2:  BCF    FA6.2
057C4:  MOVF   00,W
057C6:  IORWF  FF2,F
....................                   }
057C8:  MOVLB  C
057CA:  MOVFF  C1E,03
057CE:  MOVF   x1D,W
057D0:  INCF   x1D,F
057D2:  BTFSC  FD8.2
057D4:  INCF   x1E,F
057D6:  INCF   x1F,F
057D8:  BTFSC  FD8.2
057DA:  INCF   x20,F
057DC:  BRA    56E8
057DE:  MOVLB  F
....................                }
....................                SMS_Massage11[j] = '\0' ; // end string
057E0:  MOVLW  DA
057E2:  MOVLB  C
057E4:  ADDWF  x1F,W
057E6:  MOVWF  FE9
057E8:  MOVLW  0A
057EA:  ADDWFC x20,W
057EC:  MOVWF  FEA
057EE:  CLRF   FEF
....................                
....................                j=0;
057F0:  CLRF   x20
057F2:  CLRF   x1F
....................                i++;
057F4:  INCF   x1D,F
057F6:  BTFSC  FD8.2
057F8:  INCF   x1E,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
057FA:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
057FC:  MOVLW  7A
057FE:  ADDWF  x1D,W
05800:  MOVWF  FE9
05802:  MOVLW  01
05804:  ADDWFC x1E,W
05806:  MOVWF  FEA
05808:  MOVF   FEF,W
0580A:  SUBLW  0D
0580C:  BZ    5818
0580E:  MOVF   x20,F
05810:  BNZ   5818
05812:  MOVF   x1F,W
05814:  SUBLW  1E
05816:  BC    5868
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05818:  MOVLW  5D
0581A:  ADDWF  x1D,W
0581C:  MOVWF  x23
0581E:  MOVLW  00
05820:  ADDWFC x1E,W
05822:  MOVWF  x24
05824:  MOVLW  7A
05826:  ADDWF  x1D,W
05828:  MOVWF  FE9
0582A:  MOVLW  01
0582C:  ADDWFC x1E,W
0582E:  MOVWF  FEA
05830:  MOVFF  FEF,C25
05834:  MOVF   FF2,W
05836:  MOVWF  00
05838:  BCF    FF2.7
0583A:  MOVFF  C24,FAA
0583E:  MOVFF  C23,FA9
05842:  MOVFF  C25,FA8
05846:  BCF    FA6.6
05848:  BCF    FA6.7
0584A:  BSF    FA6.2
0584C:  MOVLB  F
0584E:  MOVLW  55
05850:  MOVWF  FA7
05852:  MOVLW  AA
05854:  MOVWF  FA7
05856:  BSF    FA6.1
05858:  BTFSC  FA6.1
0585A:  BRA    5858
0585C:  BCF    FA6.2
0585E:  MOVF   00,W
05860:  IORWF  FF2,F
....................                      break;
05862:  BRA    58F2
....................                   }
05864:  BRA    58DA
05866:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage12[j] = RxD_Buff[i];
05868:  MOVLW  FA
0586A:  ADDWF  x1F,W
0586C:  MOVWF  01
0586E:  MOVLW  0A
05870:  ADDWFC x20,W
05872:  MOVWF  03
05874:  MOVLW  7A
05876:  ADDWF  x1D,W
05878:  MOVWF  FE9
0587A:  MOVLW  01
0587C:  ADDWFC x1E,W
0587E:  MOVWF  FEA
05880:  MOVFF  FEF,C25
05884:  MOVFF  03,FEA
05888:  MOVFF  01,FE9
0588C:  MOVFF  C25,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05890:  MOVLW  5D
05892:  ADDWF  x1D,W
05894:  MOVWF  x23
05896:  MOVLW  00
05898:  ADDWFC x1E,W
0589A:  MOVWF  x24
0589C:  MOVLW  7A
0589E:  ADDWF  x1D,W
058A0:  MOVWF  FE9
058A2:  MOVLW  01
058A4:  ADDWFC x1E,W
058A6:  MOVWF  FEA
058A8:  MOVFF  FEF,C25
058AC:  MOVF   FF2,W
058AE:  MOVWF  00
058B0:  BCF    FF2.7
058B2:  MOVFF  C24,FAA
058B6:  MOVFF  C23,FA9
058BA:  MOVFF  C25,FA8
058BE:  BCF    FA6.6
058C0:  BCF    FA6.7
058C2:  BSF    FA6.2
058C4:  MOVLB  F
058C6:  MOVLW  55
058C8:  MOVWF  FA7
058CA:  MOVLW  AA
058CC:  MOVWF  FA7
058CE:  BSF    FA6.1
058D0:  BTFSC  FA6.1
058D2:  BRA    58D0
058D4:  BCF    FA6.2
058D6:  MOVF   00,W
058D8:  IORWF  FF2,F
....................                   }
058DA:  MOVLB  C
058DC:  MOVFF  C1E,03
058E0:  MOVF   x1D,W
058E2:  INCF   x1D,F
058E4:  BTFSC  FD8.2
058E6:  INCF   x1E,F
058E8:  INCF   x1F,F
058EA:  BTFSC  FD8.2
058EC:  INCF   x20,F
058EE:  BRA    57FA
058F0:  MOVLB  F
....................                }
....................                SMS_Massage12[j] = '\0' ; // end string
058F2:  MOVLW  FA
058F4:  MOVLB  C
058F6:  ADDWF  x1F,W
058F8:  MOVWF  FE9
058FA:  MOVLW  0A
058FC:  ADDWFC x20,W
058FE:  MOVWF  FEA
05900:  CLRF   FEF
....................                
....................                j=0;
05902:  CLRF   x20
05904:  CLRF   x1F
....................                i++;
05906:  INCF   x1D,F
05908:  BTFSC  FD8.2
0590A:  INCF   x1E,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
0590C:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0590E:  MOVLW  7A
05910:  ADDWF  x1D,W
05912:  MOVWF  FE9
05914:  MOVLW  01
05916:  ADDWFC x1E,W
05918:  MOVWF  FEA
0591A:  MOVF   FEF,W
0591C:  SUBLW  0D
0591E:  BZ    592A
05920:  MOVF   x20,F
05922:  BNZ   592A
05924:  MOVF   x1F,W
05926:  SUBLW  1E
05928:  BC    597A
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0592A:  MOVLW  5D
0592C:  ADDWF  x1D,W
0592E:  MOVWF  x23
05930:  MOVLW  00
05932:  ADDWFC x1E,W
05934:  MOVWF  x24
05936:  MOVLW  7A
05938:  ADDWF  x1D,W
0593A:  MOVWF  FE9
0593C:  MOVLW  01
0593E:  ADDWFC x1E,W
05940:  MOVWF  FEA
05942:  MOVFF  FEF,C25
05946:  MOVF   FF2,W
05948:  MOVWF  00
0594A:  BCF    FF2.7
0594C:  MOVFF  C24,FAA
05950:  MOVFF  C23,FA9
05954:  MOVFF  C25,FA8
05958:  BCF    FA6.6
0595A:  BCF    FA6.7
0595C:  BSF    FA6.2
0595E:  MOVLB  F
05960:  MOVLW  55
05962:  MOVWF  FA7
05964:  MOVLW  AA
05966:  MOVWF  FA7
05968:  BSF    FA6.1
0596A:  BTFSC  FA6.1
0596C:  BRA    596A
0596E:  BCF    FA6.2
05970:  MOVF   00,W
05972:  IORWF  FF2,F
....................                      break;
05974:  BRA    5A04
....................                   }
05976:  BRA    59EC
05978:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage13[j] = RxD_Buff[i];
0597A:  MOVLW  1A
0597C:  ADDWF  x1F,W
0597E:  MOVWF  01
05980:  MOVLW  0B
05982:  ADDWFC x20,W
05984:  MOVWF  03
05986:  MOVLW  7A
05988:  ADDWF  x1D,W
0598A:  MOVWF  FE9
0598C:  MOVLW  01
0598E:  ADDWFC x1E,W
05990:  MOVWF  FEA
05992:  MOVFF  FEF,C25
05996:  MOVFF  03,FEA
0599A:  MOVFF  01,FE9
0599E:  MOVFF  C25,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
059A2:  MOVLW  5D
059A4:  ADDWF  x1D,W
059A6:  MOVWF  x23
059A8:  MOVLW  00
059AA:  ADDWFC x1E,W
059AC:  MOVWF  x24
059AE:  MOVLW  7A
059B0:  ADDWF  x1D,W
059B2:  MOVWF  FE9
059B4:  MOVLW  01
059B6:  ADDWFC x1E,W
059B8:  MOVWF  FEA
059BA:  MOVFF  FEF,C25
059BE:  MOVF   FF2,W
059C0:  MOVWF  00
059C2:  BCF    FF2.7
059C4:  MOVFF  C24,FAA
059C8:  MOVFF  C23,FA9
059CC:  MOVFF  C25,FA8
059D0:  BCF    FA6.6
059D2:  BCF    FA6.7
059D4:  BSF    FA6.2
059D6:  MOVLB  F
059D8:  MOVLW  55
059DA:  MOVWF  FA7
059DC:  MOVLW  AA
059DE:  MOVWF  FA7
059E0:  BSF    FA6.1
059E2:  BTFSC  FA6.1
059E4:  BRA    59E2
059E6:  BCF    FA6.2
059E8:  MOVF   00,W
059EA:  IORWF  FF2,F
....................                   }
059EC:  MOVLB  C
059EE:  MOVFF  C1E,03
059F2:  MOVF   x1D,W
059F4:  INCF   x1D,F
059F6:  BTFSC  FD8.2
059F8:  INCF   x1E,F
059FA:  INCF   x1F,F
059FC:  BTFSC  FD8.2
059FE:  INCF   x20,F
05A00:  BRA    590C
05A02:  MOVLB  F
....................                }
....................                SMS_Massage13[j] = '\0' ; // end string
05A04:  MOVLW  1A
05A06:  MOVLB  C
05A08:  ADDWF  x1F,W
05A0A:  MOVWF  FE9
05A0C:  MOVLW  0B
05A0E:  ADDWFC x20,W
05A10:  MOVWF  FEA
05A12:  CLRF   FEF
....................                
....................                j=0;
05A14:  CLRF   x20
05A16:  CLRF   x1F
....................                i++;
05A18:  INCF   x1D,F
05A1A:  BTFSC  FD8.2
05A1C:  INCF   x1E,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05A1E:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05A20:  MOVLW  7A
05A22:  ADDWF  x1D,W
05A24:  MOVWF  FE9
05A26:  MOVLW  01
05A28:  ADDWFC x1E,W
05A2A:  MOVWF  FEA
05A2C:  MOVF   FEF,W
05A2E:  SUBLW  0D
05A30:  BZ    5A3C
05A32:  MOVF   x20,F
05A34:  BNZ   5A3C
05A36:  MOVF   x1F,W
05A38:  SUBLW  1E
05A3A:  BC    5A8C
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05A3C:  MOVLW  5D
05A3E:  ADDWF  x1D,W
05A40:  MOVWF  x23
05A42:  MOVLW  00
05A44:  ADDWFC x1E,W
05A46:  MOVWF  x24
05A48:  MOVLW  7A
05A4A:  ADDWF  x1D,W
05A4C:  MOVWF  FE9
05A4E:  MOVLW  01
05A50:  ADDWFC x1E,W
05A52:  MOVWF  FEA
05A54:  MOVFF  FEF,C25
05A58:  MOVF   FF2,W
05A5A:  MOVWF  00
05A5C:  BCF    FF2.7
05A5E:  MOVFF  C24,FAA
05A62:  MOVFF  C23,FA9
05A66:  MOVFF  C25,FA8
05A6A:  BCF    FA6.6
05A6C:  BCF    FA6.7
05A6E:  BSF    FA6.2
05A70:  MOVLB  F
05A72:  MOVLW  55
05A74:  MOVWF  FA7
05A76:  MOVLW  AA
05A78:  MOVWF  FA7
05A7A:  BSF    FA6.1
05A7C:  BTFSC  FA6.1
05A7E:  BRA    5A7C
05A80:  BCF    FA6.2
05A82:  MOVF   00,W
05A84:  IORWF  FF2,F
....................                      break;
05A86:  BRA    5B16
....................                   }
05A88:  BRA    5AFE
05A8A:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage14[j] = RxD_Buff[i];
05A8C:  MOVLW  3A
05A8E:  ADDWF  x1F,W
05A90:  MOVWF  01
05A92:  MOVLW  0B
05A94:  ADDWFC x20,W
05A96:  MOVWF  03
05A98:  MOVLW  7A
05A9A:  ADDWF  x1D,W
05A9C:  MOVWF  FE9
05A9E:  MOVLW  01
05AA0:  ADDWFC x1E,W
05AA2:  MOVWF  FEA
05AA4:  MOVFF  FEF,C25
05AA8:  MOVFF  03,FEA
05AAC:  MOVFF  01,FE9
05AB0:  MOVFF  C25,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05AB4:  MOVLW  5D
05AB6:  ADDWF  x1D,W
05AB8:  MOVWF  x23
05ABA:  MOVLW  00
05ABC:  ADDWFC x1E,W
05ABE:  MOVWF  x24
05AC0:  MOVLW  7A
05AC2:  ADDWF  x1D,W
05AC4:  MOVWF  FE9
05AC6:  MOVLW  01
05AC8:  ADDWFC x1E,W
05ACA:  MOVWF  FEA
05ACC:  MOVFF  FEF,C25
05AD0:  MOVF   FF2,W
05AD2:  MOVWF  00
05AD4:  BCF    FF2.7
05AD6:  MOVFF  C24,FAA
05ADA:  MOVFF  C23,FA9
05ADE:  MOVFF  C25,FA8
05AE2:  BCF    FA6.6
05AE4:  BCF    FA6.7
05AE6:  BSF    FA6.2
05AE8:  MOVLB  F
05AEA:  MOVLW  55
05AEC:  MOVWF  FA7
05AEE:  MOVLW  AA
05AF0:  MOVWF  FA7
05AF2:  BSF    FA6.1
05AF4:  BTFSC  FA6.1
05AF6:  BRA    5AF4
05AF8:  BCF    FA6.2
05AFA:  MOVF   00,W
05AFC:  IORWF  FF2,F
....................                   }
05AFE:  MOVLB  C
05B00:  MOVFF  C1E,03
05B04:  MOVF   x1D,W
05B06:  INCF   x1D,F
05B08:  BTFSC  FD8.2
05B0A:  INCF   x1E,F
05B0C:  INCF   x1F,F
05B0E:  BTFSC  FD8.2
05B10:  INCF   x20,F
05B12:  BRA    5A1E
05B14:  MOVLB  F
....................                }
....................                SMS_Massage14[j] = '\0' ; // end string
05B16:  MOVLW  3A
05B18:  MOVLB  C
05B1A:  ADDWF  x1F,W
05B1C:  MOVWF  FE9
05B1E:  MOVLW  0B
05B20:  ADDWFC x20,W
05B22:  MOVWF  FEA
05B24:  CLRF   FEF
....................                
....................                j=0;
05B26:  CLRF   x20
05B28:  CLRF   x1F
....................                i++;
05B2A:  INCF   x1D,F
05B2C:  BTFSC  FD8.2
05B2E:  INCF   x1E,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05B30:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05B32:  MOVLW  7A
05B34:  ADDWF  x1D,W
05B36:  MOVWF  FE9
05B38:  MOVLW  01
05B3A:  ADDWFC x1E,W
05B3C:  MOVWF  FEA
05B3E:  MOVF   FEF,W
05B40:  SUBLW  0D
05B42:  BZ    5B4E
05B44:  MOVF   x20,F
05B46:  BNZ   5B4E
05B48:  MOVF   x1F,W
05B4A:  SUBLW  1E
05B4C:  BC    5B9E
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05B4E:  MOVLW  5D
05B50:  ADDWF  x1D,W
05B52:  MOVWF  x23
05B54:  MOVLW  00
05B56:  ADDWFC x1E,W
05B58:  MOVWF  x24
05B5A:  MOVLW  7A
05B5C:  ADDWF  x1D,W
05B5E:  MOVWF  FE9
05B60:  MOVLW  01
05B62:  ADDWFC x1E,W
05B64:  MOVWF  FEA
05B66:  MOVFF  FEF,C25
05B6A:  MOVF   FF2,W
05B6C:  MOVWF  00
05B6E:  BCF    FF2.7
05B70:  MOVFF  C24,FAA
05B74:  MOVFF  C23,FA9
05B78:  MOVFF  C25,FA8
05B7C:  BCF    FA6.6
05B7E:  BCF    FA6.7
05B80:  BSF    FA6.2
05B82:  MOVLB  F
05B84:  MOVLW  55
05B86:  MOVWF  FA7
05B88:  MOVLW  AA
05B8A:  MOVWF  FA7
05B8C:  BSF    FA6.1
05B8E:  BTFSC  FA6.1
05B90:  BRA    5B8E
05B92:  BCF    FA6.2
05B94:  MOVF   00,W
05B96:  IORWF  FF2,F
....................                      break;
05B98:  BRA    5C28
....................                   }
05B9A:  BRA    5C10
05B9C:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage15[j] = RxD_Buff[i];
05B9E:  MOVLW  5A
05BA0:  ADDWF  x1F,W
05BA2:  MOVWF  01
05BA4:  MOVLW  0B
05BA6:  ADDWFC x20,W
05BA8:  MOVWF  03
05BAA:  MOVLW  7A
05BAC:  ADDWF  x1D,W
05BAE:  MOVWF  FE9
05BB0:  MOVLW  01
05BB2:  ADDWFC x1E,W
05BB4:  MOVWF  FEA
05BB6:  MOVFF  FEF,C25
05BBA:  MOVFF  03,FEA
05BBE:  MOVFF  01,FE9
05BC2:  MOVFF  C25,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05BC6:  MOVLW  5D
05BC8:  ADDWF  x1D,W
05BCA:  MOVWF  x23
05BCC:  MOVLW  00
05BCE:  ADDWFC x1E,W
05BD0:  MOVWF  x24
05BD2:  MOVLW  7A
05BD4:  ADDWF  x1D,W
05BD6:  MOVWF  FE9
05BD8:  MOVLW  01
05BDA:  ADDWFC x1E,W
05BDC:  MOVWF  FEA
05BDE:  MOVFF  FEF,C25
05BE2:  MOVF   FF2,W
05BE4:  MOVWF  00
05BE6:  BCF    FF2.7
05BE8:  MOVFF  C24,FAA
05BEC:  MOVFF  C23,FA9
05BF0:  MOVFF  C25,FA8
05BF4:  BCF    FA6.6
05BF6:  BCF    FA6.7
05BF8:  BSF    FA6.2
05BFA:  MOVLB  F
05BFC:  MOVLW  55
05BFE:  MOVWF  FA7
05C00:  MOVLW  AA
05C02:  MOVWF  FA7
05C04:  BSF    FA6.1
05C06:  BTFSC  FA6.1
05C08:  BRA    5C06
05C0A:  BCF    FA6.2
05C0C:  MOVF   00,W
05C0E:  IORWF  FF2,F
....................                   }
05C10:  MOVLB  C
05C12:  MOVFF  C1E,03
05C16:  MOVF   x1D,W
05C18:  INCF   x1D,F
05C1A:  BTFSC  FD8.2
05C1C:  INCF   x1E,F
05C1E:  INCF   x1F,F
05C20:  BTFSC  FD8.2
05C22:  INCF   x20,F
05C24:  BRA    5B30
05C26:  MOVLB  F
....................                }
....................                SMS_Massage15[j] = '\0' ; // end string
05C28:  MOVLW  5A
05C2A:  MOVLB  C
05C2C:  ADDWF  x1F,W
05C2E:  MOVWF  FE9
05C30:  MOVLW  0B
05C32:  ADDWFC x20,W
05C34:  MOVWF  FEA
05C36:  CLRF   FEF
....................                
....................                j=0;
05C38:  CLRF   x20
05C3A:  CLRF   x1F
....................                i++;
05C3C:  INCF   x1D,F
05C3E:  BTFSC  FD8.2
05C40:  INCF   x1E,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05C42:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05C44:  MOVLW  7A
05C46:  ADDWF  x1D,W
05C48:  MOVWF  FE9
05C4A:  MOVLW  01
05C4C:  ADDWFC x1E,W
05C4E:  MOVWF  FEA
05C50:  MOVF   FEF,W
05C52:  SUBLW  0D
05C54:  BZ    5C60
05C56:  MOVF   x20,F
05C58:  BNZ   5C60
05C5A:  MOVF   x1F,W
05C5C:  SUBLW  1E
05C5E:  BC    5CB0
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05C60:  MOVLW  5D
05C62:  ADDWF  x1D,W
05C64:  MOVWF  x23
05C66:  MOVLW  00
05C68:  ADDWFC x1E,W
05C6A:  MOVWF  x24
05C6C:  MOVLW  7A
05C6E:  ADDWF  x1D,W
05C70:  MOVWF  FE9
05C72:  MOVLW  01
05C74:  ADDWFC x1E,W
05C76:  MOVWF  FEA
05C78:  MOVFF  FEF,C25
05C7C:  MOVF   FF2,W
05C7E:  MOVWF  00
05C80:  BCF    FF2.7
05C82:  MOVFF  C24,FAA
05C86:  MOVFF  C23,FA9
05C8A:  MOVFF  C25,FA8
05C8E:  BCF    FA6.6
05C90:  BCF    FA6.7
05C92:  BSF    FA6.2
05C94:  MOVLB  F
05C96:  MOVLW  55
05C98:  MOVWF  FA7
05C9A:  MOVLW  AA
05C9C:  MOVWF  FA7
05C9E:  BSF    FA6.1
05CA0:  BTFSC  FA6.1
05CA2:  BRA    5CA0
05CA4:  BCF    FA6.2
05CA6:  MOVF   00,W
05CA8:  IORWF  FF2,F
....................                      break;
05CAA:  BRA    5D3A
....................                   }
05CAC:  BRA    5D22
05CAE:  MOVLB  C
....................                   else
....................                   {
....................                      SMS_Massage16[j] = RxD_Buff[i];
05CB0:  MOVLW  7A
05CB2:  ADDWF  x1F,W
05CB4:  MOVWF  01
05CB6:  MOVLW  0B
05CB8:  ADDWFC x20,W
05CBA:  MOVWF  03
05CBC:  MOVLW  7A
05CBE:  ADDWF  x1D,W
05CC0:  MOVWF  FE9
05CC2:  MOVLW  01
05CC4:  ADDWFC x1E,W
05CC6:  MOVWF  FEA
05CC8:  MOVFF  FEF,C25
05CCC:  MOVFF  03,FEA
05CD0:  MOVFF  01,FE9
05CD4:  MOVFF  C25,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05CD8:  MOVLW  5D
05CDA:  ADDWF  x1D,W
05CDC:  MOVWF  x23
05CDE:  MOVLW  00
05CE0:  ADDWFC x1E,W
05CE2:  MOVWF  x24
05CE4:  MOVLW  7A
05CE6:  ADDWF  x1D,W
05CE8:  MOVWF  FE9
05CEA:  MOVLW  01
05CEC:  ADDWFC x1E,W
05CEE:  MOVWF  FEA
05CF0:  MOVFF  FEF,C25
05CF4:  MOVF   FF2,W
05CF6:  MOVWF  00
05CF8:  BCF    FF2.7
05CFA:  MOVFF  C24,FAA
05CFE:  MOVFF  C23,FA9
05D02:  MOVFF  C25,FA8
05D06:  BCF    FA6.6
05D08:  BCF    FA6.7
05D0A:  BSF    FA6.2
05D0C:  MOVLB  F
05D0E:  MOVLW  55
05D10:  MOVWF  FA7
05D12:  MOVLW  AA
05D14:  MOVWF  FA7
05D16:  BSF    FA6.1
05D18:  BTFSC  FA6.1
05D1A:  BRA    5D18
05D1C:  BCF    FA6.2
05D1E:  MOVF   00,W
05D20:  IORWF  FF2,F
....................                   }
05D22:  MOVLB  C
05D24:  MOVFF  C1E,03
05D28:  MOVF   x1D,W
05D2A:  INCF   x1D,F
05D2C:  BTFSC  FD8.2
05D2E:  INCF   x1E,F
05D30:  INCF   x1F,F
05D32:  BTFSC  FD8.2
05D34:  INCF   x20,F
05D36:  BRA    5C42
05D38:  MOVLB  F
....................                }
....................                SMS_Massage16[j] = '\0' ; // end string
05D3A:  MOVLW  7A
05D3C:  MOVLB  C
05D3E:  ADDWF  x1F,W
05D40:  MOVWF  FE9
05D42:  MOVLW  0B
05D44:  ADDWFC x20,W
05D46:  MOVWF  FEA
05D48:  CLRF   FEF
....................                
....................             
....................                TxD_Buff[0] = Address ;         //Address
05D4A:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x22 ;            //return function code
05D4E:  MOVLW  22
05D50:  MOVLB  0
05D52:  MOVWF  x7C
....................    
....................                CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
05D54:  MOVLB  C
05D56:  CLRF   x25
05D58:  MOVLW  7B
05D5A:  MOVWF  x24
05D5C:  MOVLW  02
05D5E:  MOVWF  x26
05D60:  MOVLB  0
05D62:  CALL   2BE4
....................    
....................                TxD_Buff[2] = CRC_Hi ;
05D66:  MOVFF  57B,7D
....................                TxD_Buff[3] = CRC_Lo ;
05D6A:  MOVFF  57A,7E
....................    
....................                output_bit(P485ctrl,1);
05D6E:  BSF    F8A.3
05D70:  BCF    F93.3
....................                delay_ms(10);
05D72:  MOVLW  0A
05D74:  MOVLB  C
05D76:  MOVWF  x23
05D78:  MOVLB  0
05D7A:  CALL   06AC
....................    
....................                putc(Txd_Buff[0]);
05D7E:  MOVF   x7B,W
05D80:  CALL   2C3A
....................                putc(Txd_Buff[1]);
05D84:  MOVF   x7C,W
05D86:  CALL   2C3A
....................                putc(Txd_Buff[2]);
05D8A:  MOVF   x7D,W
05D8C:  CALL   2C3A
....................                putc(Txd_Buff[3]);
05D90:  MOVF   x7E,W
05D92:  CALL   2C3A
....................    
....................                delay_ms(3);
05D96:  MOVLW  03
05D98:  MOVLB  C
05D9A:  MOVWF  x23
05D9C:  MOVLB  0
05D9E:  CALL   06AC
....................                output_bit(P485ctrl,0);
05DA2:  BCF    F8A.3
05DA4:  BCF    F93.3
05DA6:  MOVLB  5
....................             }
....................             ////////////////////////////// WRITE Faultname //////////////////////////
....................    
....................             if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
05DA8:  MOVLB  1
05DAA:  MOVF   x7B,W
05DAC:  SUBLW  03
05DAE:  BNZ   5E3C
....................             {
....................                Data_Buff[0] = Input9_16;
05DB0:  MOVFF  4A,583
....................                Data_Buff[1] = Input1_8;
05DB4:  MOVFF  49,584
....................                
....................                
....................                TxD_Buff[0] = Address ;         //Address
05DB8:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x03 ;           //Function Code
05DBC:  MOVLW  03
05DBE:  MOVLB  0
05DC0:  MOVWF  x7C
....................                TxD_Buff[2] = 0x02 ;          //Byte Count
05DC2:  MOVLW  02
05DC4:  MOVWF  x7D
....................                TxD_Buff[3] = Data_Buff[0];   //first byte Data
05DC6:  MOVFF  583,7E
....................                TxD_Buff[4] = Data_Buff[1];   //first byte Data
05DCA:  MOVFF  584,7F
....................    
....................                CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
05DCE:  MOVLB  C
05DD0:  CLRF   x25
05DD2:  MOVLW  7B
05DD4:  MOVWF  x24
05DD6:  MOVLW  05
05DD8:  MOVWF  x26
05DDA:  MOVLB  0
05DDC:  CALL   2BE4
....................    
....................                TxD_Buff[5] = CRC_Hi ;
05DE0:  MOVFF  57B,80
....................                TxD_Buff[6] = CRC_Lo ;
05DE4:  MOVFF  57A,81
....................    
....................                output_bit(P485ctrl,1);
05DE8:  BSF    F8A.3
05DEA:  BCF    F93.3
....................                restart_wdt();
05DEC:  CLRWDT
....................                delay_ms(4);
05DEE:  MOVLW  04
05DF0:  MOVLB  C
05DF2:  MOVWF  x23
05DF4:  MOVLB  0
05DF6:  CALL   06AC
....................                restart_wdt();
05DFA:  CLRWDT
....................    
....................                putc(TxD_Buff[0]) ;               //Address
05DFC:  MOVF   x7B,W
05DFE:  CALL   2C3A
....................                putc(TxD_Buff[1]) ;               //Function Code
05E02:  MOVF   x7C,W
05E04:  CALL   2C3A
....................                putc(TxD_Buff[2]) ;               //Byte Count
05E08:  MOVF   x7D,W
05E0A:  CALL   2C3A
....................                putc(TxD_Buff[3]) ;
05E0E:  MOVF   x7E,W
05E10:  CALL   2C3A
....................                putc(TxD_Buff[4]) ;
05E14:  MOVF   x7F,W
05E16:  CALL   2C3A
....................                putc(TxD_Buff[5]) ;
05E1A:  MOVF   x80,W
05E1C:  CALL   2C3A
....................                putc(TxD_Buff[6]) ;
05E20:  MOVF   x81,W
05E22:  CALL   2C3A
....................    
....................                restart_wdt();
05E26:  CLRWDT
....................                delay_ms(3);
05E28:  MOVLW  03
05E2A:  MOVLB  C
05E2C:  MOVWF  x23
05E2E:  MOVLB  0
05E30:  CALL   06AC
....................                restart_wdt();
05E34:  CLRWDT
....................                output_bit(P485ctrl,0);
05E36:  BCF    F8A.3
05E38:  BCF    F93.3
05E3A:  MOVLB  1
....................             }
....................       }  //if(RxD_Buff[1] == address)
.................... 
....................       Send_check_Time = 500; //5 Second
05E3C:  MOVLW  01
05E3E:  MOVLB  5
05E40:  MOVWF  x7D
05E42:  MOVLW  F4
05E44:  MOVWF  x7C
....................    }
.................... 
....................    recieve_completed = 0 ;
05E46:  BCF    30.5
....................    sequence = end_sq ;
05E48:  MOVFF  6F,78
....................    T_timeout = 0x00;
05E4C:  MOVLB  9
05E4E:  CLRF   x85
....................    RxD_DataLen = 0x00 ;
05E50:  MOVLB  0
05E52:  CLRF   x7A
....................    output_bit(P485ctrl,0);
05E54:  BCF    F8A.3
05E56:  BCF    F93.3
05E58:  GOTO   9532 (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void Read_Input(void)
.................... {
.................... 
....................    int8 MCP23s17_1_A;
....................    int8 MCP23s17_1_B;
....................    int8 MCP23s17_2_A;
....................    int8 MCP23s17_2_B;
....................    
....................    //if(NoOfPoint >= 10)
....................    //{
....................       // if(NoOfPoint >= 20)
....................    //{   
....................      
....................       ///////////////////////--Edit--///////////////////
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
*
01DD6:  MOVLW  02
01DD8:  MOVLB  C
01DDA:  MOVWF  x28
01DDC:  MOVLB  0
01DDE:  RCALL  1CA6
01DE0:  MOVFF  01,983
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01DE4:  BTFSS  1A.4
01DE6:  BRA    1DEE
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;   
01DE8:  MOVLB  9
01DEA:  COMF   x83,F
01DEC:  MOVLB  0
....................       }
....................       
....................       
....................      // FaultNow[11] = MCP23s17_Ip_dat;
....................       FaultNow[1] = MCP23s17_Ip_dat >> 1;
01DEE:  BCF    FD8.0
01DF0:  MOVLB  9
01DF2:  RRCF   x83,W
01DF4:  MOVLB  B
01DF6:  BCF    xBB.1
01DF8:  BTFSC  FE8.0
01DFA:  BSF    xBB.1
....................       FaultNow[2] = MCP23s17_Ip_dat >> 2;
01DFC:  MOVLB  9
01DFE:  RRCF   x83,W
01E00:  MOVWF  00
01E02:  RRCF   00,F
01E04:  MOVLW  3F
01E06:  ANDWF  00,F
01E08:  MOVLB  B
01E0A:  BCF    xBB.2
01E0C:  BTFSC  00.0
01E0E:  BSF    xBB.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 3;
01E10:  MOVLB  9
01E12:  RRCF   x83,W
01E14:  MOVWF  00
01E16:  RRCF   00,F
01E18:  RRCF   00,F
01E1A:  MOVLW  1F
01E1C:  ANDWF  00,F
01E1E:  MOVLB  B
01E20:  BCF    xBB.3
01E22:  BTFSC  00.0
01E24:  BSF    xBB.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 4;
01E26:  MOVLB  9
01E28:  SWAPF  x83,W
01E2A:  MOVWF  00
01E2C:  MOVLW  0F
01E2E:  ANDWF  00,F
01E30:  MOVLB  B
01E32:  BCF    xBB.4
01E34:  BTFSC  00.0
01E36:  BSF    xBB.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 5;
01E38:  MOVLB  9
01E3A:  SWAPF  x83,W
01E3C:  MOVWF  00
01E3E:  RRCF   00,F
01E40:  MOVLW  07
01E42:  ANDWF  00,F
01E44:  MOVLB  B
01E46:  BCF    xBB.5
01E48:  BTFSC  00.0
01E4A:  BSF    xBB.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 6;
01E4C:  MOVLB  9
01E4E:  SWAPF  x83,W
01E50:  MOVWF  00
01E52:  RRCF   00,F
01E54:  RRCF   00,F
01E56:  MOVLW  03
01E58:  ANDWF  00,F
01E5A:  MOVLB  B
01E5C:  BCF    xBB.6
01E5E:  BTFSC  00.0
01E60:  BSF    xBB.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 7;
01E62:  CLRF   00
01E64:  MOVLB  9
01E66:  BTFSC  x83.7
01E68:  BSF    00.0
01E6A:  MOVLB  B
01E6C:  BCF    xBB.7
01E6E:  BTFSC  00.0
01E70:  BSF    xBB.7
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
01E72:  MOVLW  02
01E74:  MOVLB  C
01E76:  MOVWF  x28
01E78:  MOVLB  0
01E7A:  RCALL  1CC2
01E7C:  MOVFF  01,983
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01E80:  BTFSS  1A.4
01E82:  BRA    1E8A
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
01E84:  MOVLB  9
01E86:  COMF   x83,F
01E88:  MOVLB  0
....................       }
....................       
....................       FaultNow[8] = MCP23s17_Ip_dat;
01E8A:  MOVLB  B
01E8C:  BCF    xBC.0
01E8E:  MOVLB  9
01E90:  BTFSS  x83.0
01E92:  BRA    1E9A
01E94:  MOVLB  B
01E96:  BSF    xBC.0
01E98:  MOVLB  9
....................       
....................       
....................        MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_0);
01E9A:  MOVLB  C
01E9C:  CLRF   x28
01E9E:  MOVLB  0
01EA0:  RCALL  1CA6
01EA2:  MOVFF  01,983
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01EA6:  BTFSS  1A.4
01EA8:  BRA    1EB0
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;         
01EAA:  MOVLB  9
01EAC:  COMF   x83,F
01EAE:  MOVLB  0
....................       }
....................       
....................       // FaultNow[11] = MCP23s17_Ip_dat;
....................       FaultNow[9] = MCP23s17_Ip_dat >> 1;
01EB0:  BCF    FD8.0
01EB2:  MOVLB  9
01EB4:  RRCF   x83,W
01EB6:  MOVLB  B
01EB8:  BCF    xBC.1
01EBA:  BTFSC  FE8.0
01EBC:  BSF    xBC.1
....................       FaultNow[10] = MCP23s17_Ip_dat >> 2;
01EBE:  MOVLB  9
01EC0:  RRCF   x83,W
01EC2:  MOVWF  00
01EC4:  RRCF   00,F
01EC6:  MOVLW  3F
01EC8:  ANDWF  00,F
01ECA:  MOVLB  B
01ECC:  BCF    xBC.2
01ECE:  BTFSC  00.0
01ED0:  BSF    xBC.2
....................       FaultNow[11] = MCP23s17_Ip_dat >> 3;
01ED2:  MOVLB  9
01ED4:  RRCF   x83,W
01ED6:  MOVWF  00
01ED8:  RRCF   00,F
01EDA:  RRCF   00,F
01EDC:  MOVLW  1F
01EDE:  ANDWF  00,F
01EE0:  MOVLB  B
01EE2:  BCF    xBC.3
01EE4:  BTFSC  00.0
01EE6:  BSF    xBC.3
....................       FaultNow[12] = MCP23s17_Ip_dat >> 4;
01EE8:  MOVLB  9
01EEA:  SWAPF  x83,W
01EEC:  MOVWF  00
01EEE:  MOVLW  0F
01EF0:  ANDWF  00,F
01EF2:  MOVLB  B
01EF4:  BCF    xBC.4
01EF6:  BTFSC  00.0
01EF8:  BSF    xBC.4
....................       FaultNow[13] = MCP23s17_Ip_dat >> 5;
01EFA:  MOVLB  9
01EFC:  SWAPF  x83,W
01EFE:  MOVWF  00
01F00:  RRCF   00,F
01F02:  MOVLW  07
01F04:  ANDWF  00,F
01F06:  MOVLB  B
01F08:  BCF    xBC.5
01F0A:  BTFSC  00.0
01F0C:  BSF    xBC.5
....................       FaultNow[14] = MCP23s17_Ip_dat >> 6;
01F0E:  MOVLB  9
01F10:  SWAPF  x83,W
01F12:  MOVWF  00
01F14:  RRCF   00,F
01F16:  RRCF   00,F
01F18:  MOVLW  03
01F1A:  ANDWF  00,F
01F1C:  MOVLB  B
01F1E:  BCF    xBC.6
01F20:  BTFSC  00.0
01F22:  BSF    xBC.6
....................       FaultNow[15] = MCP23s17_Ip_dat >> 7;
01F24:  CLRF   00
01F26:  MOVLB  9
01F28:  BTFSC  x83.7
01F2A:  BSF    00.0
01F2C:  MOVLB  B
01F2E:  BCF    xBC.7
01F30:  BTFSC  00.0
01F32:  BSF    xBC.7
....................       
....................        MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
01F34:  MOVLB  C
01F36:  CLRF   x28
01F38:  MOVLB  0
01F3A:  RCALL  1CC2
01F3C:  MOVFF  01,983
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01F40:  BTFSS  1A.4
01F42:  BRA    1F4A
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
01F44:  MOVLB  9
01F46:  COMF   x83,F
01F48:  MOVLB  0
....................       }
....................       
....................       
....................       FaultNow[16] = MCP23s17_Ip_dat;
01F4A:  MOVLB  B
01F4C:  BCF    xBD.0
01F4E:  MOVLB  9
01F50:  BTFSS  x83.0
01F52:  BRA    1F5A
01F54:  MOVLB  B
01F56:  BSF    xBD.0
01F58:  MOVLB  9
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=16; i++)
01F5A:  MOVLW  01
01F5C:  MOVLB  C
01F5E:  MOVWF  x27
01F60:  MOVF   x27,W
01F62:  SUBLW  10
01F64:  BTFSS  FD8.0
01F66:  BRA    2550
....................       {
....................          if(FaultNCNO[i] ==NO)
01F68:  MOVFF  C27,C2B
01F6C:  MOVLW  0C
01F6E:  MOVWF  x2D
01F70:  MOVLW  12
01F72:  MOVWF  x2C
01F74:  MOVLB  0
01F76:  RCALL  1CDE
01F78:  MOVF   01,W
01F7A:  ANDLW  01
01F7C:  SUBLW  01
01F7E:  BTFSS  FD8.2
01F80:  BRA    2258
....................          {
....................              if(FaultNow[i]==0)
01F82:  MOVFF  C27,C2B
01F86:  MOVLW  0B
01F88:  MOVLB  C
01F8A:  MOVWF  x2D
01F8C:  MOVLW  BB
01F8E:  MOVWF  x2C
01F90:  MOVLB  0
01F92:  RCALL  1CDE
01F94:  MOVF   01,W
01F96:  ANDLW  01
01F98:  BTFSS  FD8.2
01F9A:  BRA    20FA
....................              {   
....................                if(FaultAgo[i]==0)
01F9C:  MOVFF  C27,C2B
01FA0:  MOVLW  0B
01FA2:  MOVLB  C
01FA4:  MOVWF  x2D
01FA6:  MOVLW  B8
01FA8:  MOVWF  x2C
01FAA:  MOVLB  0
01FAC:  RCALL  1CDE
01FAE:  MOVF   01,W
01FB0:  ANDLW  01
01FB2:  BTFSS  FD8.2
01FB4:  BRA    20DE
....................                {
....................                    ReleaseTime[i]++;
01FB6:  BCF    FD8.0
01FB8:  MOVLB  C
01FBA:  RLCF   x27,W
01FBC:  CLRF   03
01FBE:  ADDLW  BE
01FC0:  MOVWF  FE9
01FC2:  MOVLW  0B
01FC4:  ADDWFC 03,W
01FC6:  MOVWF  FEA
01FC8:  MOVLW  01
01FCA:  ADDWF  FEE,F
01FCC:  BNC   1FD0
01FCE:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01FD0:  BCF    FD8.0
01FD2:  RLCF   x27,W
01FD4:  CLRF   03
01FD6:  ADDLW  BE
01FD8:  MOVWF  FE9
01FDA:  MOVLW  0B
01FDC:  ADDWFC 03,W
01FDE:  MOVWF  FEA
01FE0:  MOVFF  FEC,C29
01FE4:  MOVF   FED,F
01FE6:  MOVFF  FEF,C28
01FEA:  BCF    FD8.0
01FEC:  RLCF   x27,W
01FEE:  CLRF   03
01FF0:  ADDLW  E8
01FF2:  MOVWF  FE9
01FF4:  MOVLW  0B
01FF6:  ADDWFC 03,W
01FF8:  MOVWF  FEA
01FFA:  MOVFF  FEC,C2D
01FFE:  MOVF   FED,F
02000:  MOVFF  FEF,C2C
02004:  CLRF   x2F
02006:  MOVLW  4B
02008:  MOVWF  x2E
0200A:  MOVLB  0
0200C:  RCALL  1D14
0200E:  MOVFF  02,C2B
02012:  MOVFF  01,C2A
02016:  MOVLW  0F
02018:  MOVLB  C
0201A:  ADDWF  01,W
0201C:  MOVWF  01
0201E:  MOVLW  00
02020:  ADDWFC 02,W
02022:  MOVWF  03
02024:  MOVF   03,W
02026:  SUBWF  x29,W
02028:  BNC   20DA
0202A:  BNZ   2032
0202C:  MOVF   01,W
0202E:  SUBWF  x28,W
02030:  BNC   20DA
....................                    {   
....................                      ReleaseTime[i] = 0;
02032:  BCF    FD8.0
02034:  RLCF   x27,W
02036:  CLRF   03
02038:  ADDLW  BE
0203A:  MOVWF  FE9
0203C:  MOVLW  0B
0203E:  ADDWFC 03,W
02040:  MOVWF  FEA
02042:  CLRF   FEC
02044:  MOVF   FED,F
02046:  CLRF   FEF
....................                      switch(i)
02048:  MOVLW  01
0204A:  SUBWF  x27,W
0204C:  ADDLW  F0
0204E:  BC    20DA
02050:  ADDLW  10
02052:  MOVLB  0
02054:  GOTO   2726
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
02058:  MOVLB  B
0205A:  BCF    x9A.0
....................                         break;
0205C:  MOVLB  C
0205E:  BRA    20DA
....................                         case 2:
....................                            Inputt.B2 = 0; 
02060:  MOVLB  B
02062:  BCF    x9A.1
....................                         break;
02064:  MOVLB  C
02066:  BRA    20DA
....................                         case 3:
....................                            Inputt.B3 = 0; 
02068:  MOVLB  B
0206A:  BCF    x9A.2
....................                         break;
0206C:  MOVLB  C
0206E:  BRA    20DA
....................                         case 4:
....................                            Inputt.B4 = 0; 
02070:  MOVLB  B
02072:  BCF    x9A.3
....................                         break;
02074:  MOVLB  C
02076:  BRA    20DA
....................                         case 5:
....................                            Inputt.B5 = 0; 
02078:  MOVLB  B
0207A:  BCF    x9A.4
....................                         break;
0207C:  MOVLB  C
0207E:  BRA    20DA
....................                         case 6:
....................                            Inputt.B6 = 0; 
02080:  MOVLB  B
02082:  BCF    x9A.5
....................                         break;
02084:  MOVLB  C
02086:  BRA    20DA
....................                         case 7:
....................                            Inputt.B7 = 0; 
02088:  MOVLB  B
0208A:  BCF    x9A.6
....................                          break;
0208C:  MOVLB  C
0208E:  BRA    20DA
....................                          case 8:
....................                            Inputt.B8 = 0; 
02090:  MOVLB  B
02092:  BCF    x9A.7
....................                         break;
02094:  MOVLB  C
02096:  BRA    20DA
....................                         case 9:
....................                            Inputt.B9 = 0; 
02098:  MOVLB  B
0209A:  BCF    x9B.0
....................                         break;
0209C:  MOVLB  C
0209E:  BRA    20DA
....................                         case 10:
....................                            Inputt.B10 = 0; 
020A0:  MOVLB  B
020A2:  BCF    x9B.1
....................                         break;
020A4:  MOVLB  C
020A6:  BRA    20DA
....................                         case 11:
....................                            Inputt.B11 = 0; 
020A8:  MOVLB  B
020AA:  BCF    x9B.2
....................                         break;
020AC:  MOVLB  C
020AE:  BRA    20DA
....................                         case 12:
....................                            Inputt.B12 = 0; 
020B0:  MOVLB  B
020B2:  BCF    x9B.3
....................                         break;
020B4:  MOVLB  C
020B6:  BRA    20DA
....................                         case 13:
....................                            Inputt.B13 = 0; 
020B8:  MOVLB  B
020BA:  BCF    x9B.4
....................                         break;
020BC:  MOVLB  C
020BE:  BRA    20DA
....................                         case 14:
....................                            Inputt.B14 = 0; 
020C0:  MOVLB  B
020C2:  BCF    x9B.5
....................                         break;
020C4:  MOVLB  C
020C6:  BRA    20DA
....................                         case 15:
....................                            Inputt.B15 = 0; 
020C8:  MOVLB  B
020CA:  BCF    x9B.6
....................                         break;
020CC:  MOVLB  C
020CE:  BRA    20DA
....................                         case 16:
....................                             Inputt.B16 = 0; 
020D0:  MOVLB  B
020D2:  BCF    x9B.7
....................                          break;
020D4:  MOVLB  C
020D6:  BRA    20DA
020D8:  MOVLB  C
....................                                    
....................                      }                 
....................                    }
....................                }
020DA:  BRA    20F6
020DC:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
020DE:  BCF    FD8.0
020E0:  MOVLB  C
020E2:  RLCF   x27,W
020E4:  CLRF   03
020E6:  ADDLW  BE
020E8:  MOVWF  FE9
020EA:  MOVLW  0B
020EC:  ADDWFC 03,W
020EE:  MOVWF  FEA
020F0:  CLRF   FEC
020F2:  MOVF   FED,F
020F4:  CLRF   FEF
....................                }
....................              }
020F6:  BRA    2256
020F8:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
020FA:  MOVFF  C27,C2B
020FE:  MOVLW  0B
02100:  MOVLB  C
02102:  MOVWF  x2D
02104:  MOVLW  B8
02106:  MOVWF  x2C
02108:  MOVLB  0
0210A:  RCALL  1CDE
0210C:  MOVF   01,W
0210E:  ANDLW  01
02110:  SUBLW  01
02112:  BTFSS  FD8.2
02114:  BRA    223E
....................                {
....................                    ReleaseTime[i]++;
02116:  BCF    FD8.0
02118:  MOVLB  C
0211A:  RLCF   x27,W
0211C:  CLRF   03
0211E:  ADDLW  BE
02120:  MOVWF  FE9
02122:  MOVLW  0B
02124:  ADDWFC 03,W
02126:  MOVWF  FEA
02128:  MOVLW  01
0212A:  ADDWF  FEE,F
0212C:  BNC   2130
0212E:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
02130:  BCF    FD8.0
02132:  RLCF   x27,W
02134:  CLRF   03
02136:  ADDLW  BE
02138:  MOVWF  FE9
0213A:  MOVLW  0B
0213C:  ADDWFC 03,W
0213E:  MOVWF  FEA
02140:  MOVFF  FEC,C29
02144:  MOVF   FED,F
02146:  MOVFF  FEF,C28
0214A:  BCF    FD8.0
0214C:  RLCF   x27,W
0214E:  CLRF   03
02150:  ADDLW  E8
02152:  MOVWF  FE9
02154:  MOVLW  0B
02156:  ADDWFC 03,W
02158:  MOVWF  FEA
0215A:  MOVFF  FEC,C2D
0215E:  MOVF   FED,F
02160:  MOVFF  FEF,C2C
02164:  CLRF   x2F
02166:  MOVLW  4B
02168:  MOVWF  x2E
0216A:  MOVLB  0
0216C:  RCALL  1D14
0216E:  MOVFF  02,C2B
02172:  MOVFF  01,C2A
02176:  MOVLW  0F
02178:  MOVLB  C
0217A:  ADDWF  01,W
0217C:  MOVWF  01
0217E:  MOVLW  00
02180:  ADDWFC 02,W
02182:  MOVWF  03
02184:  MOVF   03,W
02186:  SUBWF  x29,W
02188:  BNC   223A
0218A:  BNZ   2192
0218C:  MOVF   01,W
0218E:  SUBWF  x28,W
02190:  BNC   223A
....................                    {   
....................                      ReleaseTime[i] = 1;
02192:  BCF    FD8.0
02194:  RLCF   x27,W
02196:  CLRF   03
02198:  ADDLW  BE
0219A:  MOVWF  FE9
0219C:  MOVLW  0B
0219E:  ADDWFC 03,W
021A0:  MOVWF  FEA
021A2:  CLRF   FEC
021A4:  MOVF   FED,F
021A6:  MOVLW  01
021A8:  MOVWF  FEF
....................                      switch(i)
021AA:  SUBWF  x27,W
021AC:  ADDLW  F0
021AE:  BC    223A
021B0:  ADDLW  10
021B2:  MOVLB  0
021B4:  GOTO   2760
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
021B8:  MOVLB  B
021BA:  BSF    x9A.0
....................                         break;
021BC:  MOVLB  C
021BE:  BRA    223A
....................                         case 2:
....................                            Inputt.B2 = 1; 
021C0:  MOVLB  B
021C2:  BSF    x9A.1
....................                         break;
021C4:  MOVLB  C
021C6:  BRA    223A
....................                         case 3:
....................                            Inputt.B3 = 1; 
021C8:  MOVLB  B
021CA:  BSF    x9A.2
....................                         break;
021CC:  MOVLB  C
021CE:  BRA    223A
....................                         case 4:
....................                            Inputt.B4 = 1; 
021D0:  MOVLB  B
021D2:  BSF    x9A.3
....................                         break;
021D4:  MOVLB  C
021D6:  BRA    223A
....................                         case 5:
....................                            Inputt.B5 = 1; 
021D8:  MOVLB  B
021DA:  BSF    x9A.4
....................                         break;
021DC:  MOVLB  C
021DE:  BRA    223A
....................                         case 6:
....................                            Inputt.B6 = 1; 
021E0:  MOVLB  B
021E2:  BSF    x9A.5
....................                         break;
021E4:  MOVLB  C
021E6:  BRA    223A
....................                         case 7:
....................                            Inputt.B7 = 1; 
021E8:  MOVLB  B
021EA:  BSF    x9A.6
....................                          break;
021EC:  MOVLB  C
021EE:  BRA    223A
....................                          case 8:
....................                          Inputt.B8 = 1; 
021F0:  MOVLB  B
021F2:  BSF    x9A.7
....................                         break;
021F4:  MOVLB  C
021F6:  BRA    223A
....................                         case 9:
....................                            Inputt.B9 = 1; 
021F8:  MOVLB  B
021FA:  BSF    x9B.0
....................                         break;
021FC:  MOVLB  C
021FE:  BRA    223A
....................                         case 10:
....................                            Inputt.B10 = 1; 
02200:  MOVLB  B
02202:  BSF    x9B.1
....................                         break;
02204:  MOVLB  C
02206:  BRA    223A
....................                         case 11:
....................                            Inputt.B11 = 1; 
02208:  MOVLB  B
0220A:  BSF    x9B.2
....................                         break;
0220C:  MOVLB  C
0220E:  BRA    223A
....................                         case 12:
....................                            Inputt.B12 = 1; 
02210:  MOVLB  B
02212:  BSF    x9B.3
....................                         break;
02214:  MOVLB  C
02216:  BRA    223A
....................                         case 13:
....................                            Inputt.B13 = 1; 
02218:  MOVLB  B
0221A:  BSF    x9B.4
....................                         break;
0221C:  MOVLB  C
0221E:  BRA    223A
....................                         case 14:
....................                            Inputt.B14 = 1; 
02220:  MOVLB  B
02222:  BSF    x9B.5
....................                         break;
02224:  MOVLB  C
02226:  BRA    223A
....................                         case 15:
....................                            Inputt.B15 = 1; 
02228:  MOVLB  B
0222A:  BSF    x9B.6
....................                         break;
0222C:  MOVLB  C
0222E:  BRA    223A
....................                         case 16:
....................                             Inputt.B16 = 1;
02230:  MOVLB  B
02232:  BSF    x9B.7
....................                          break;
02234:  MOVLB  C
02236:  BRA    223A
02238:  MOVLB  C
....................                                    
....................                      }                 
....................                    }
....................                }
0223A:  BRA    2256
0223C:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
0223E:  BCF    FD8.0
02240:  MOVLB  C
02242:  RLCF   x27,W
02244:  CLRF   03
02246:  ADDLW  BE
02248:  MOVWF  FE9
0224A:  MOVLW  0B
0224C:  ADDWFC 03,W
0224E:  MOVWF  FEA
02250:  CLRF   FEC
02252:  MOVF   FED,F
02254:  CLRF   FEF
....................                }
....................              
....................              /*
....................                   ReleaseTime[i] = 0;
....................                   switch(i)
....................                   {
....................                       case 1:
....................                          Inputt.B1 = 1; 
....................                       break;
....................                       case 2:
....................                          Inputt.B2 = 1; 
....................                       break;
....................                       case 3:
....................                          Inputt.B3 = 1; 
....................                       break;
....................                       case 4:
....................                          Inputt.B4 = 1; 
....................                       break;
....................                       case 5:
....................                          Inputt.B5 = 1; 
....................                       break;
....................                       case 6:
....................                          Inputt.B6 = 1; 
....................                       break;
....................                       case 7:
....................                          Inputt.B7 = 1; 
....................                       break;
....................                       case 8:
....................                          Inputt.B8 = 1; 
....................                       break;
....................                       case 9:
....................                          Inputt.B9 = 1; 
....................                       break;
....................                       case 10:
....................                          Inputt.B10 = 1; 
....................                       break;
....................                       case 11:
....................                          Inputt.B11 = 1; 
....................                       break;
....................                       case 12:
....................                          Inputt.B12 = 1; 
....................                       break;
....................                       case 13:
....................                          Inputt.B13 = 1; 
....................                       break;
....................                       case 14:
....................                          Inputt.B14 = 1; 
....................                       break;
....................                       case 15:
....................                          Inputt.B15 = 1; 
....................                       break;
....................                       case 16:
....................                          Inputt.B16 = 1; 
....................                       break;
....................                          
....................                   }
....................                   */
....................              }
....................           }
02256:  BRA    2548
....................           else if(FaultNCNO[i] ==NC)
02258:  MOVFF  C27,C2B
0225C:  MOVLW  0C
0225E:  MOVLB  C
02260:  MOVWF  x2D
02262:  MOVLW  12
02264:  MOVWF  x2C
02266:  MOVLB  0
02268:  RCALL  1CDE
0226A:  MOVF   01,W
0226C:  ANDLW  01
0226E:  BTFSS  FD8.2
02270:  BRA    254A
....................           {
....................              if(FaultNow[i]==1)
02272:  MOVFF  C27,C2B
02276:  MOVLW  0B
02278:  MOVLB  C
0227A:  MOVWF  x2D
0227C:  MOVLW  BB
0227E:  MOVWF  x2C
02280:  MOVLB  0
02282:  RCALL  1CDE
02284:  MOVF   01,W
02286:  ANDLW  01
02288:  SUBLW  01
0228A:  BTFSS  FD8.2
0228C:  BRA    23EE
....................              {
....................                if(FaultAgo[i]==1)
0228E:  MOVFF  C27,C2B
02292:  MOVLW  0B
02294:  MOVLB  C
02296:  MOVWF  x2D
02298:  MOVLW  B8
0229A:  MOVWF  x2C
0229C:  MOVLB  0
0229E:  RCALL  1CDE
022A0:  MOVF   01,W
022A2:  ANDLW  01
022A4:  SUBLW  01
022A6:  BTFSS  FD8.2
022A8:  BRA    23D2
....................                {
....................                    ReleaseTime[i]++;
022AA:  BCF    FD8.0
022AC:  MOVLB  C
022AE:  RLCF   x27,W
022B0:  CLRF   03
022B2:  ADDLW  BE
022B4:  MOVWF  FE9
022B6:  MOVLW  0B
022B8:  ADDWFC 03,W
022BA:  MOVWF  FEA
022BC:  MOVLW  01
022BE:  ADDWF  FEE,F
022C0:  BNC   22C4
022C2:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
022C4:  BCF    FD8.0
022C6:  RLCF   x27,W
022C8:  CLRF   03
022CA:  ADDLW  BE
022CC:  MOVWF  FE9
022CE:  MOVLW  0B
022D0:  ADDWFC 03,W
022D2:  MOVWF  FEA
022D4:  MOVFF  FEC,C29
022D8:  MOVF   FED,F
022DA:  MOVFF  FEF,C28
022DE:  BCF    FD8.0
022E0:  RLCF   x27,W
022E2:  CLRF   03
022E4:  ADDLW  E8
022E6:  MOVWF  FE9
022E8:  MOVLW  0B
022EA:  ADDWFC 03,W
022EC:  MOVWF  FEA
022EE:  MOVFF  FEC,C2D
022F2:  MOVF   FED,F
022F4:  MOVFF  FEF,C2C
022F8:  CLRF   x2F
022FA:  MOVLW  4B
022FC:  MOVWF  x2E
022FE:  MOVLB  0
02300:  RCALL  1D14
02302:  MOVFF  02,C2B
02306:  MOVFF  01,C2A
0230A:  MOVLW  0F
0230C:  MOVLB  C
0230E:  ADDWF  01,W
02310:  MOVWF  01
02312:  MOVLW  00
02314:  ADDWFC 02,W
02316:  MOVWF  03
02318:  MOVF   03,W
0231A:  SUBWF  x29,W
0231C:  BNC   23CE
0231E:  BNZ   2326
02320:  MOVF   01,W
02322:  SUBWF  x28,W
02324:  BNC   23CE
....................                    {   
....................                      ReleaseTime[i] = 0;
02326:  BCF    FD8.0
02328:  RLCF   x27,W
0232A:  CLRF   03
0232C:  ADDLW  BE
0232E:  MOVWF  FE9
02330:  MOVLW  0B
02332:  ADDWFC 03,W
02334:  MOVWF  FEA
02336:  CLRF   FEC
02338:  MOVF   FED,F
0233A:  CLRF   FEF
....................                      switch(i)
0233C:  MOVLW  01
0233E:  SUBWF  x27,W
02340:  ADDLW  F0
02342:  BC    23CE
02344:  ADDLW  10
02346:  MOVLB  0
02348:  GOTO   279A
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
0234C:  MOVLB  B
0234E:  BSF    x9A.0
....................                         break;
02350:  MOVLB  C
02352:  BRA    23CE
....................                         case 2:
....................                            Inputt.B2 = 1; 
02354:  MOVLB  B
02356:  BSF    x9A.1
....................                         break;
02358:  MOVLB  C
0235A:  BRA    23CE
....................                         case 3:
....................                            Inputt.B3 = 1; 
0235C:  MOVLB  B
0235E:  BSF    x9A.2
....................                         break;
02360:  MOVLB  C
02362:  BRA    23CE
....................                         case 4:
....................                            Inputt.B4 = 1; 
02364:  MOVLB  B
02366:  BSF    x9A.3
....................                         break;
02368:  MOVLB  C
0236A:  BRA    23CE
....................                         case 5:
....................                            Inputt.B5 = 1; 
0236C:  MOVLB  B
0236E:  BSF    x9A.4
....................                         break;
02370:  MOVLB  C
02372:  BRA    23CE
....................                         case 6:
....................                            Inputt.B6 = 1; 
02374:  MOVLB  B
02376:  BSF    x9A.5
....................                         break;
02378:  MOVLB  C
0237A:  BRA    23CE
....................                         case 7:
....................                            Inputt.B7 = 1; 
0237C:  MOVLB  B
0237E:  BSF    x9A.6
....................                          break;
02380:  MOVLB  C
02382:  BRA    23CE
....................                          case 8:
....................                            Inputt.B8 = 1; 
02384:  MOVLB  B
02386:  BSF    x9A.7
....................                         break;
02388:  MOVLB  C
0238A:  BRA    23CE
....................                         case 9:
....................                            Inputt.B9 = 1; 
0238C:  MOVLB  B
0238E:  BSF    x9B.0
....................                         break;
02390:  MOVLB  C
02392:  BRA    23CE
....................                         case 10:
....................                            Inputt.B10 = 1; 
02394:  MOVLB  B
02396:  BSF    x9B.1
....................                         break;
02398:  MOVLB  C
0239A:  BRA    23CE
....................                         case 11:
....................                            Inputt.B11 = 1; 
0239C:  MOVLB  B
0239E:  BSF    x9B.2
....................                         break;
023A0:  MOVLB  C
023A2:  BRA    23CE
....................                         case 12:
....................                            Inputt.B12 = 1; 
023A4:  MOVLB  B
023A6:  BSF    x9B.3
....................                         break;
023A8:  MOVLB  C
023AA:  BRA    23CE
....................                         case 13:
....................                            Inputt.B13 = 1; 
023AC:  MOVLB  B
023AE:  BSF    x9B.4
....................                         break;
023B0:  MOVLB  C
023B2:  BRA    23CE
....................                         case 14:
....................                            Inputt.B14 = 1; 
023B4:  MOVLB  B
023B6:  BSF    x9B.5
....................                         break;
023B8:  MOVLB  C
023BA:  BRA    23CE
....................                         case 15:
....................                            Inputt.B15 = 1; 
023BC:  MOVLB  B
023BE:  BSF    x9B.6
....................                         break;
023C0:  MOVLB  C
023C2:  BRA    23CE
....................                         case 16:
....................                             Inputt.B16 = 1; 
023C4:  MOVLB  B
023C6:  BSF    x9B.7
....................                          break;
023C8:  MOVLB  C
023CA:  BRA    23CE
023CC:  MOVLB  C
....................                                                                    
....................                      }                 
....................                   }
....................                }
023CE:  BRA    23EA
023D0:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
023D2:  BCF    FD8.0
023D4:  MOVLB  C
023D6:  RLCF   x27,W
023D8:  CLRF   03
023DA:  ADDLW  BE
023DC:  MOVWF  FE9
023DE:  MOVLW  0B
023E0:  ADDWFC 03,W
023E2:  MOVWF  FEA
023E4:  CLRF   FEC
023E6:  MOVF   FED,F
023E8:  CLRF   FEF
....................                }
....................              }
023EA:  BRA    2548
023EC:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
023EE:  MOVFF  C27,C2B
023F2:  MOVLW  0B
023F4:  MOVLB  C
023F6:  MOVWF  x2D
023F8:  MOVLW  B8
023FA:  MOVWF  x2C
023FC:  MOVLB  0
023FE:  RCALL  1CDE
02400:  MOVF   01,W
02402:  ANDLW  01
02404:  BTFSS  FD8.2
02406:  BRA    2530
....................                {
....................                    ReleaseTime[i]++;
02408:  BCF    FD8.0
0240A:  MOVLB  C
0240C:  RLCF   x27,W
0240E:  CLRF   03
02410:  ADDLW  BE
02412:  MOVWF  FE9
02414:  MOVLW  0B
02416:  ADDWFC 03,W
02418:  MOVWF  FEA
0241A:  MOVLW  01
0241C:  ADDWF  FEE,F
0241E:  BNC   2422
02420:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
02422:  BCF    FD8.0
02424:  RLCF   x27,W
02426:  CLRF   03
02428:  ADDLW  BE
0242A:  MOVWF  FE9
0242C:  MOVLW  0B
0242E:  ADDWFC 03,W
02430:  MOVWF  FEA
02432:  MOVFF  FEC,C29
02436:  MOVF   FED,F
02438:  MOVFF  FEF,C28
0243C:  BCF    FD8.0
0243E:  RLCF   x27,W
02440:  CLRF   03
02442:  ADDLW  E8
02444:  MOVWF  FE9
02446:  MOVLW  0B
02448:  ADDWFC 03,W
0244A:  MOVWF  FEA
0244C:  MOVFF  FEC,C2D
02450:  MOVF   FED,F
02452:  MOVFF  FEF,C2C
02456:  CLRF   x2F
02458:  MOVLW  4B
0245A:  MOVWF  x2E
0245C:  MOVLB  0
0245E:  RCALL  1D14
02460:  MOVFF  02,C2B
02464:  MOVFF  01,C2A
02468:  MOVLW  0F
0246A:  MOVLB  C
0246C:  ADDWF  01,W
0246E:  MOVWF  01
02470:  MOVLW  00
02472:  ADDWFC 02,W
02474:  MOVWF  03
02476:  MOVF   03,W
02478:  SUBWF  x29,W
0247A:  BNC   252C
0247C:  BNZ   2484
0247E:  MOVF   01,W
02480:  SUBWF  x28,W
02482:  BNC   252C
....................                    {   
....................                      ReleaseTime[i] = 0;
02484:  BCF    FD8.0
02486:  RLCF   x27,W
02488:  CLRF   03
0248A:  ADDLW  BE
0248C:  MOVWF  FE9
0248E:  MOVLW  0B
02490:  ADDWFC 03,W
02492:  MOVWF  FEA
02494:  CLRF   FEC
02496:  MOVF   FED,F
02498:  CLRF   FEF
....................                      switch(i)
0249A:  MOVLW  01
0249C:  SUBWF  x27,W
0249E:  ADDLW  F0
024A0:  BC    252C
024A2:  ADDLW  10
024A4:  MOVLB  0
024A6:  GOTO   27D4
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
024AA:  MOVLB  B
024AC:  BCF    x9A.0
....................                         break;
024AE:  MOVLB  C
024B0:  BRA    252C
....................                         case 2:
....................                            Inputt.B2 = 0; 
024B2:  MOVLB  B
024B4:  BCF    x9A.1
....................                         break;
024B6:  MOVLB  C
024B8:  BRA    252C
....................                         case 3:
....................                            Inputt.B3 = 0; 
024BA:  MOVLB  B
024BC:  BCF    x9A.2
....................                         break;
024BE:  MOVLB  C
024C0:  BRA    252C
....................                         case 4:
....................                            Inputt.B4 = 0; 
024C2:  MOVLB  B
024C4:  BCF    x9A.3
....................                         break;
024C6:  MOVLB  C
024C8:  BRA    252C
....................                         case 5:
....................                            Inputt.B5 = 0; 
024CA:  MOVLB  B
024CC:  BCF    x9A.4
....................                         break;
024CE:  MOVLB  C
024D0:  BRA    252C
....................                         case 6:
....................                            Inputt.B6 = 0; 
024D2:  MOVLB  B
024D4:  BCF    x9A.5
....................                         break;
024D6:  MOVLB  C
024D8:  BRA    252C
....................                         case 7:
....................                            Inputt.B7 = 0; 
024DA:  MOVLB  B
024DC:  BCF    x9A.6
....................                          break;
024DE:  MOVLB  C
024E0:  BRA    252C
....................                          case 8:
....................                            Inputt.B8 = 0; 
024E2:  MOVLB  B
024E4:  BCF    x9A.7
....................                         break;
024E6:  MOVLB  C
024E8:  BRA    252C
....................                         case 9:
....................                            Inputt.B9 = 0; 
024EA:  MOVLB  B
024EC:  BCF    x9B.0
....................                         break;
024EE:  MOVLB  C
024F0:  BRA    252C
....................                         case 10:
....................                            Inputt.B10 = 0; 
024F2:  MOVLB  B
024F4:  BCF    x9B.1
....................                         break;
024F6:  MOVLB  C
024F8:  BRA    252C
....................                         case 11:
....................                            Inputt.B11 = 0; 
024FA:  MOVLB  B
024FC:  BCF    x9B.2
....................                         break;
024FE:  MOVLB  C
02500:  BRA    252C
....................                         case 12:
....................                            Inputt.B12 = 0; 
02502:  MOVLB  B
02504:  BCF    x9B.3
....................                         break;
02506:  MOVLB  C
02508:  BRA    252C
....................                         case 13:
....................                            Inputt.B13 = 0; 
0250A:  MOVLB  B
0250C:  BCF    x9B.4
....................                         break;
0250E:  MOVLB  C
02510:  BRA    252C
....................                         case 14:
....................                            Inputt.B14 = 0; 
02512:  MOVLB  B
02514:  BCF    x9B.5
....................                         break;
02516:  MOVLB  C
02518:  BRA    252C
....................                         case 15:
....................                            Inputt.B15 = 0; 
0251A:  MOVLB  B
0251C:  BCF    x9B.6
....................                         break;
0251E:  MOVLB  C
02520:  BRA    252C
....................                         case 16:
....................                             Inputt.B16 = 0;
02522:  MOVLB  B
02524:  BCF    x9B.7
....................                          break;
02526:  MOVLB  C
02528:  BRA    252C
0252A:  MOVLB  C
....................                                    
....................                      }                 
....................                    }
....................                }
0252C:  BRA    2548
0252E:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
02530:  BCF    FD8.0
02532:  MOVLB  C
02534:  RLCF   x27,W
02536:  CLRF   03
02538:  ADDLW  BE
0253A:  MOVWF  FE9
0253C:  MOVLW  0B
0253E:  ADDWFC 03,W
02540:  MOVWF  FEA
02542:  CLRF   FEC
02544:  MOVF   FED,F
02546:  CLRF   FEF
02548:  MOVLB  0
....................                }
....................                   /*
....................                   ReleaseTime[i] = 0;
....................                   switch(i)
....................                   {
....................                       case 1:
....................                          Inputt.B1 = 0; 
....................                       break;
....................                       case 2:
....................                          Inputt.B2 = 0; 
....................                       break;
....................                       case 3:
....................                          Inputt.B3 = 0; 
....................                       break;
....................                       case 4:
....................                          Inputt.B4 = 0; 
....................                       break;
....................                       case 5:
....................                          Inputt.B5 = 0; 
....................                       break;
....................                       case 6:
....................                          Inputt.B6 = 0; 
....................                       break;
....................                       case 7:
....................                          Inputt.B7 = 0; 
....................                       break;
....................                       case 8:
....................                          Inputt.B8 = 0; 
....................                       break;
....................                       case 9:
....................                          Inputt.B9 = 0; 
....................                       break;
....................                       case 10:
....................                          Inputt.B10 = 0; 
....................                       break;
....................                       case 11:
....................                          Inputt.B11 = 0; 
....................                       break;
....................                       case 12:
....................                          Inputt.B12 = 0; 
....................                       break;
....................                       case 13:
....................                          Inputt.B13 = 0; 
....................                       break;
....................                       case 14:
....................                          Inputt.B14 = 0; 
....................                       break;
....................                       case 15:
....................                          Inputt.B15 = 0; 
....................                       break;
....................                       case 16:
....................                          Inputt.B16 = 0; 
....................                       break;
....................                              
....................                   }
....................                   */
....................              }
....................           }
0254A:  MOVLB  C
0254C:  INCF   x27,F
0254E:  BRA    1F60
....................       }
....................       
....................       StoreReleaseFault();
02550:  MOVLB  0
02552:  BRA    1D78
....................       
....................       Input11_18 = 0x00;
02554:  CLRF   4C
....................       Input11_18 = Input11_18 | ~Inputt.B16;
02556:  MOVLW  00
02558:  MOVLB  B
0255A:  BTFSS  x9B.7
0255C:  MOVLW  01
0255E:  IORWF  4C,F
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B16;
02560:  BCF    FD8.0
02562:  RLCF   4C,W
02564:  MOVLB  C
02566:  MOVWF  x28
02568:  MOVLW  00
0256A:  MOVLB  B
0256C:  BTFSS  x9B.7
0256E:  MOVLW  01
02570:  MOVLB  C
02572:  IORWF  x28,W
02574:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B16;
02576:  BCF    FD8.0
02578:  RLCF   4C,W
0257A:  MOVWF  x28
0257C:  MOVLW  00
0257E:  MOVLB  B
02580:  BTFSS  x9B.7
02582:  MOVLW  01
02584:  MOVLB  C
02586:  IORWF  x28,W
02588:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B15;
0258A:  BCF    FD8.0
0258C:  RLCF   4C,W
0258E:  MOVWF  x28
02590:  MOVLW  00
02592:  MOVLB  B
02594:  BTFSS  x9B.6
02596:  MOVLW  01
02598:  MOVLB  C
0259A:  IORWF  x28,W
0259C:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B14;
0259E:  BCF    FD8.0
025A0:  RLCF   4C,W
025A2:  MOVWF  x28
025A4:  MOVLW  00
025A6:  MOVLB  B
025A8:  BTFSS  x9B.5
025AA:  MOVLW  01
025AC:  MOVLB  C
025AE:  IORWF  x28,W
025B0:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B13;
025B2:  BCF    FD8.0
025B4:  RLCF   4C,W
025B6:  MOVWF  x28
025B8:  MOVLW  00
025BA:  MOVLB  B
025BC:  BTFSS  x9B.4
025BE:  MOVLW  01
025C0:  MOVLB  C
025C2:  IORWF  x28,W
025C4:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B12;
025C6:  BCF    FD8.0
025C8:  RLCF   4C,W
025CA:  MOVWF  x28
025CC:  MOVLW  00
025CE:  MOVLB  B
025D0:  BTFSS  x9B.3
025D2:  MOVLW  01
025D4:  MOVLB  C
025D6:  IORWF  x28,W
025D8:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B11;
025DA:  BCF    FD8.0
025DC:  RLCF   4C,W
025DE:  MOVWF  x28
025E0:  MOVLW  00
025E2:  MOVLB  B
025E4:  BTFSS  x9B.2
025E6:  MOVLW  01
025E8:  MOVLB  C
025EA:  IORWF  x28,W
025EC:  MOVWF  4C
....................       
....................    
....................       Input1_8 = 0x00;
025EE:  CLRF   49
....................       Input1_8 = Input1_8 | ~Inputt.B8;
025F0:  MOVLW  00
025F2:  MOVLB  B
025F4:  BTFSS  x9A.7
025F6:  MOVLW  01
025F8:  IORWF  49,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
025FA:  BCF    FD8.0
025FC:  RLCF   49,W
025FE:  MOVLB  C
02600:  MOVWF  x28
02602:  MOVLW  00
02604:  MOVLB  B
02606:  BTFSS  x9A.6
02608:  MOVLW  01
0260A:  MOVLB  C
0260C:  IORWF  x28,W
0260E:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
02610:  BCF    FD8.0
02612:  RLCF   49,W
02614:  MOVWF  x28
02616:  MOVLW  00
02618:  MOVLB  B
0261A:  BTFSS  x9A.5
0261C:  MOVLW  01
0261E:  MOVLB  C
02620:  IORWF  x28,W
02622:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
02624:  BCF    FD8.0
02626:  RLCF   49,W
02628:  MOVWF  x28
0262A:  MOVLW  00
0262C:  MOVLB  B
0262E:  BTFSS  x9A.4
02630:  MOVLW  01
02632:  MOVLB  C
02634:  IORWF  x28,W
02636:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
02638:  BCF    FD8.0
0263A:  RLCF   49,W
0263C:  MOVWF  x28
0263E:  MOVLW  00
02640:  MOVLB  B
02642:  BTFSS  x9A.3
02644:  MOVLW  01
02646:  MOVLB  C
02648:  IORWF  x28,W
0264A:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
0264C:  BCF    FD8.0
0264E:  RLCF   49,W
02650:  MOVWF  x28
02652:  MOVLW  00
02654:  MOVLB  B
02656:  BTFSS  x9A.2
02658:  MOVLW  01
0265A:  MOVLB  C
0265C:  IORWF  x28,W
0265E:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
02660:  BCF    FD8.0
02662:  RLCF   49,W
02664:  MOVWF  x28
02666:  MOVLW  00
02668:  MOVLB  B
0266A:  BTFSS  x9A.1
0266C:  MOVLW  01
0266E:  MOVLB  C
02670:  IORWF  x28,W
02672:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
02674:  BCF    FD8.0
02676:  RLCF   49,W
02678:  MOVWF  x28
0267A:  MOVLW  00
0267C:  MOVLB  B
0267E:  BTFSS  x9A.0
02680:  MOVLW  01
02682:  MOVLB  C
02684:  IORWF  x28,W
02686:  MOVWF  49
....................     
....................       //Input9_10 = 0x00;
....................       //Input9_10 = Input9_10 | ~Inputt.B10;
....................       //Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
....................       
....................       Input9_16 = 0x00;
02688:  CLRF   4A
....................       Input9_16 = Input9_16 | ~Inputt.B16;
0268A:  MOVLW  00
0268C:  MOVLB  B
0268E:  BTFSS  x9B.7
02690:  MOVLW  01
02692:  IORWF  4A,F
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B15;
02694:  BCF    FD8.0
02696:  RLCF   4A,W
02698:  MOVLB  C
0269A:  MOVWF  x28
0269C:  MOVLW  00
0269E:  MOVLB  B
026A0:  BTFSS  x9B.6
026A2:  MOVLW  01
026A4:  MOVLB  C
026A6:  IORWF  x28,W
026A8:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B14;
026AA:  BCF    FD8.0
026AC:  RLCF   4A,W
026AE:  MOVWF  x28
026B0:  MOVLW  00
026B2:  MOVLB  B
026B4:  BTFSS  x9B.5
026B6:  MOVLW  01
026B8:  MOVLB  C
026BA:  IORWF  x28,W
026BC:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B13;
026BE:  BCF    FD8.0
026C0:  RLCF   4A,W
026C2:  MOVWF  x28
026C4:  MOVLW  00
026C6:  MOVLB  B
026C8:  BTFSS  x9B.4
026CA:  MOVLW  01
026CC:  MOVLB  C
026CE:  IORWF  x28,W
026D0:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B12;
026D2:  BCF    FD8.0
026D4:  RLCF   4A,W
026D6:  MOVWF  x28
026D8:  MOVLW  00
026DA:  MOVLB  B
026DC:  BTFSS  x9B.3
026DE:  MOVLW  01
026E0:  MOVLB  C
026E2:  IORWF  x28,W
026E4:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B11;
026E6:  BCF    FD8.0
026E8:  RLCF   4A,W
026EA:  MOVWF  x28
026EC:  MOVLW  00
026EE:  MOVLB  B
026F0:  BTFSS  x9B.2
026F2:  MOVLW  01
026F4:  MOVLB  C
026F6:  IORWF  x28,W
026F8:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B10;
026FA:  BCF    FD8.0
026FC:  RLCF   4A,W
026FE:  MOVWF  x28
02700:  MOVLW  00
02702:  MOVLB  B
02704:  BTFSS  x9B.1
02706:  MOVLW  01
02708:  MOVLB  C
0270A:  IORWF  x28,W
0270C:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B9;
0270E:  BCF    FD8.0
02710:  RLCF   4A,W
02712:  MOVWF  x28
02714:  MOVLW  00
02716:  MOVLB  B
02718:  BTFSS  x9B.0
0271A:  MOVLW  01
0271C:  MOVLB  C
0271E:  IORWF  x28,W
02720:  MOVWF  4A
02722:  MOVLB  0
02724:  RETURN 0
....................       
....................       ///////////////---Anal Fault---//////////////////
....................       
....................       ///////////////////////--Edit--///////////////////
....................       
....................       /*
....................       Inputt.B11 = MCP23s17_Ip_dat;
....................       Inputt.B12 = MCP23s17_Ip_dat >> 1;
....................       Inputt.B13 = MCP23s17_Ip_dat >> 2;
....................       Inputt.B14 = MCP23s17_Ip_dat >> 3;
....................       Inputt.B15 = MCP23s17_Ip_dat >> 4;
....................       Inputt.B16 = MCP23s17_Ip_dat >> 5;
....................       Inputt.B17 = MCP23s17_Ip_dat >> 6;
....................       Inputt.B18 = MCP23s17_Ip_dat >> 7;
.................... 
....................       Input11_18 = 0x00;
....................       Input11_18 = Input1_8 | ~Inputt.B18;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B17;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B16;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B15;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B14;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B13;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B12;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B11;
....................       
....................       */
....................     /*
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................       }
....................       
....................       Inputt.B19 = MCP23s17_Ip_dat;
....................       Inputt.B20 = MCP23s17_Ip_dat >> 1;
....................       
.................... 
....................       Input19_20 = 0x00;
....................       Input19_20 = Input9_10 | ~Inputt.B20;
....................       Input19_20 = (Input9_10 << 1) | ~Inputt.B19;
....................    //}
....................    
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................          
....................       }
....................       
....................       Inputt.B1 = MCP23s17_Ip_dat;
....................       Inputt.B2 = MCP23s17_Ip_dat >> 1;
....................       Inputt.B3 = MCP23s17_Ip_dat >> 2;
....................       Inputt.B4 = MCP23s17_Ip_dat >> 3;
....................       Inputt.B5 = MCP23s17_Ip_dat >> 4;
....................       Inputt.B6 = MCP23s17_Ip_dat >> 5;
....................       Inputt.B7 = MCP23s17_Ip_dat >> 6;
....................       Inputt.B8 = MCP23s17_Ip_dat >> 7;
.................... 
....................       Input1_8 = 0x00;
....................       Input1_8 = Input1_8 | ~Inputt.B8;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
....................     
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................       }
....................       
....................       Inputt.B9 = MCP23s17_Ip_dat;
....................       Inputt.B10 = MCP23s17_Ip_dat >> 1;
....................       
.................... 
....................       Input9_10 = 0x00;
....................       Input9_10 = Input9_10 | ~Inputt.B10;
....................       Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
....................       */
....................       //+++++++++++++++++++++++++++++++++++++++++++
....................    //}
....................    
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Input type 1-8
*
007CA:  MOVFF  FF2,C24
007CE:  BCF    FF2.7
007D0:  CLRF   FAA
007D2:  MOVLW  01
007D4:  MOVWF  FA9
007D6:  BCF    FA6.6
007D8:  BCF    FA6.7
007DA:  BSF    FA6.0
007DC:  MOVF   FA8,W
007DE:  MOVLB  C
007E0:  BTFSC  x24.7
007E2:  BSF    FF2.7
007E4:  MOVWF  39
....................    InputType1_8 = EEpDat;
007E6:  MOVFF  39,3A
.................... 
....................    InputType.B1 = EEpDat;
007EA:  MOVLB  B
007EC:  BCF    x9E.0
007EE:  BTFSC  39.0
007F0:  BSF    x9E.0
....................    InputType.B2 = EEpDat >> 1;
007F2:  BCF    FD8.0
007F4:  RRCF   39,W
007F6:  BCF    x9E.1
007F8:  BTFSC  FE8.0
007FA:  BSF    x9E.1
....................    InputType.B3 = EEpDat >> 2;
007FC:  RRCF   39,W
007FE:  MOVWF  00
00800:  RRCF   00,F
00802:  MOVLW  3F
00804:  ANDWF  00,F
00806:  BCF    x9E.2
00808:  BTFSC  00.0
0080A:  BSF    x9E.2
....................    InputType.B4 = EEpDat >> 3;
0080C:  RRCF   39,W
0080E:  MOVWF  00
00810:  RRCF   00,F
00812:  RRCF   00,F
00814:  MOVLW  1F
00816:  ANDWF  00,F
00818:  BCF    x9E.3
0081A:  BTFSC  00.0
0081C:  BSF    x9E.3
....................    InputType.B5 = EEpDat >> 4;
0081E:  SWAPF  39,W
00820:  MOVWF  00
00822:  MOVLW  0F
00824:  ANDWF  00,F
00826:  BCF    x9E.4
00828:  BTFSC  00.0
0082A:  BSF    x9E.4
....................    InputType.B6 = EEpDat >> 5;
0082C:  SWAPF  39,W
0082E:  MOVWF  00
00830:  RRCF   00,F
00832:  MOVLW  07
00834:  ANDWF  00,F
00836:  BCF    x9E.5
00838:  BTFSC  00.0
0083A:  BSF    x9E.5
....................    InputType.B7 = EEpDat >> 6;
0083C:  SWAPF  39,W
0083E:  MOVWF  00
00840:  RRCF   00,F
00842:  RRCF   00,F
00844:  MOVLW  03
00846:  ANDWF  00,F
00848:  BCF    x9E.6
0084A:  BTFSC  00.0
0084C:  BSF    x9E.6
....................    InputType.B8 = EEpDat >> 7;
0084E:  CLRF   00
00850:  BTFSC  39.7
00852:  BSF    00.0
00854:  BCF    x9E.7
00856:  BTFSC  00.0
00858:  BSF    x9E.7
.................... 
....................    EEpDat = read_eeprom(0x02);   // Input type 9-16
0085A:  MOVFF  FF2,C24
0085E:  BCF    FF2.7
00860:  CLRF   FAA
00862:  MOVLW  02
00864:  MOVWF  FA9
00866:  BCF    FA6.6
00868:  BCF    FA6.7
0086A:  BSF    FA6.0
0086C:  MOVF   FA8,W
0086E:  MOVLB  C
00870:  BTFSC  x24.7
00872:  BSF    FF2.7
00874:  MOVWF  39
....................    InputType9_16 = EEpDat;
00876:  MOVFF  39,3B
.................... 
....................    InputType.B9 = EEpDat;
0087A:  MOVLB  B
0087C:  BCF    x9F.0
0087E:  BTFSC  39.0
00880:  BSF    x9F.0
....................    InputType.B10 = EEpDat >> 1;
00882:  BCF    FD8.0
00884:  RRCF   39,W
00886:  BCF    x9F.1
00888:  BTFSC  FE8.0
0088A:  BSF    x9F.1
....................    InputType.B11 = EEpDat >> 2;
0088C:  RRCF   39,W
0088E:  MOVWF  00
00890:  RRCF   00,F
00892:  MOVLW  3F
00894:  ANDWF  00,F
00896:  BCF    x9F.2
00898:  BTFSC  00.0
0089A:  BSF    x9F.2
....................    InputType.B12 = EEpDat >> 3;
0089C:  RRCF   39,W
0089E:  MOVWF  00
008A0:  RRCF   00,F
008A2:  RRCF   00,F
008A4:  MOVLW  1F
008A6:  ANDWF  00,F
008A8:  BCF    x9F.3
008AA:  BTFSC  00.0
008AC:  BSF    x9F.3
....................    InputType.B13 = EEpDat >> 4;
008AE:  SWAPF  39,W
008B0:  MOVWF  00
008B2:  MOVLW  0F
008B4:  ANDWF  00,F
008B6:  BCF    x9F.4
008B8:  BTFSC  00.0
008BA:  BSF    x9F.4
....................    InputType.B14 = EEpDat >> 5;
008BC:  SWAPF  39,W
008BE:  MOVWF  00
008C0:  RRCF   00,F
008C2:  MOVLW  07
008C4:  ANDWF  00,F
008C6:  BCF    x9F.5
008C8:  BTFSC  00.0
008CA:  BSF    x9F.5
....................    InputType.B15 = EEpDat >> 6;
008CC:  SWAPF  39,W
008CE:  MOVWF  00
008D0:  RRCF   00,F
008D2:  RRCF   00,F
008D4:  MOVLW  03
008D6:  ANDWF  00,F
008D8:  BCF    x9F.6
008DA:  BTFSC  00.0
008DC:  BSF    x9F.6
....................    InputType.B16 = EEpDat >> 7;
008DE:  CLRF   00
008E0:  BTFSC  39.7
008E2:  BSF    00.0
008E4:  BCF    x9F.7
008E6:  BTFSC  00.0
008E8:  BSF    x9F.7
....................    
....................    FaultNCNO[1] = InputType.B1;
008EA:  MOVLB  C
008EC:  BCF    x12.1
008EE:  MOVLB  B
008F0:  BTFSS  x9E.0
008F2:  BRA    08FA
008F4:  MOVLB  C
008F6:  BSF    x12.1
008F8:  MOVLB  B
....................    FaultNCNO[2] = InputType.B2;
008FA:  MOVLB  C
008FC:  BCF    x12.2
008FE:  MOVLB  B
00900:  BTFSS  x9E.1
00902:  BRA    090A
00904:  MOVLB  C
00906:  BSF    x12.2
00908:  MOVLB  B
....................    FaultNCNO[3] = InputType.B3;
0090A:  MOVLB  C
0090C:  BCF    x12.3
0090E:  MOVLB  B
00910:  BTFSS  x9E.2
00912:  BRA    091A
00914:  MOVLB  C
00916:  BSF    x12.3
00918:  MOVLB  B
....................    FaultNCNO[4] = InputType.B4;
0091A:  MOVLB  C
0091C:  BCF    x12.4
0091E:  MOVLB  B
00920:  BTFSS  x9E.3
00922:  BRA    092A
00924:  MOVLB  C
00926:  BSF    x12.4
00928:  MOVLB  B
....................    FaultNCNO[5] = InputType.B5;
0092A:  MOVLB  C
0092C:  BCF    x12.5
0092E:  MOVLB  B
00930:  BTFSS  x9E.4
00932:  BRA    093A
00934:  MOVLB  C
00936:  BSF    x12.5
00938:  MOVLB  B
....................    FaultNCNO[6] = InputType.B6;
0093A:  MOVLB  C
0093C:  BCF    x12.6
0093E:  MOVLB  B
00940:  BTFSS  x9E.5
00942:  BRA    094A
00944:  MOVLB  C
00946:  BSF    x12.6
00948:  MOVLB  B
....................    FaultNCNO[7] = InputType.B7;
0094A:  MOVLB  C
0094C:  BCF    x12.7
0094E:  MOVLB  B
00950:  BTFSS  x9E.6
00952:  BRA    095A
00954:  MOVLB  C
00956:  BSF    x12.7
00958:  MOVLB  B
....................    FaultNCNO[8] = InputType.B8;
0095A:  MOVLB  C
0095C:  BCF    x13.0
0095E:  MOVLB  B
00960:  BTFSS  x9E.7
00962:  BRA    096A
00964:  MOVLB  C
00966:  BSF    x13.0
00968:  MOVLB  B
....................    FaultNCNO[9] = InputType.B9;
0096A:  MOVLB  C
0096C:  BCF    x13.1
0096E:  MOVLB  B
00970:  BTFSS  x9F.0
00972:  BRA    097A
00974:  MOVLB  C
00976:  BSF    x13.1
00978:  MOVLB  B
....................    FaultNCNO[10] = InputType.B10;
0097A:  MOVLB  C
0097C:  BCF    x13.2
0097E:  MOVLB  B
00980:  BTFSS  x9F.1
00982:  BRA    098A
00984:  MOVLB  C
00986:  BSF    x13.2
00988:  MOVLB  B
....................    FaultNCNO[11] = InputType.B11;
0098A:  MOVLB  C
0098C:  BCF    x13.3
0098E:  MOVLB  B
00990:  BTFSS  x9F.2
00992:  BRA    099A
00994:  MOVLB  C
00996:  BSF    x13.3
00998:  MOVLB  B
....................    FaultNCNO[12] = InputType.B12;
0099A:  MOVLB  C
0099C:  BCF    x13.4
0099E:  MOVLB  B
009A0:  BTFSS  x9F.3
009A2:  BRA    09AA
009A4:  MOVLB  C
009A6:  BSF    x13.4
009A8:  MOVLB  B
....................    FaultNCNO[13] = InputType.B13;
009AA:  MOVLB  C
009AC:  BCF    x13.5
009AE:  MOVLB  B
009B0:  BTFSS  x9F.4
009B2:  BRA    09BA
009B4:  MOVLB  C
009B6:  BSF    x13.5
009B8:  MOVLB  B
....................    FaultNCNO[14] = InputType.B14;
009BA:  MOVLB  C
009BC:  BCF    x13.6
009BE:  MOVLB  B
009C0:  BTFSS  x9F.5
009C2:  BRA    09CA
009C4:  MOVLB  C
009C6:  BSF    x13.6
009C8:  MOVLB  B
....................    FaultNCNO[15] = InputType.B15;
009CA:  MOVLB  C
009CC:  BCF    x13.7
009CE:  MOVLB  B
009D0:  BTFSS  x9F.6
009D2:  BRA    09DA
009D4:  MOVLB  C
009D6:  BSF    x13.7
009D8:  MOVLB  B
....................    FaultNCNO[16] = InputType.B16;
009DA:  MOVLB  C
009DC:  BCF    x14.0
009DE:  MOVLB  B
009E0:  BTFSS  x9F.7
009E2:  BRA    09EA
009E4:  MOVLB  C
009E6:  BSF    x14.0
009E8:  MOVLB  B
....................    
.................... /*
....................    EEpDat = read_eeprom(0x03);   // Input type 9-16
....................    InputType17_24 = EEpDat;
.................... 
....................    InputType.B17 = EEpDat;
....................    InputType.B18 = EEpDat >> 1;
....................    InputType.B19 = EEpDat >> 2;
....................    InputType.B20 = EEpDat >> 3;
....................    InputType.B21 = EEpDat >> 4;
....................    InputType.B22 = EEpDat >> 5;
....................    InputType.B23 = EEpDat >> 6;
....................    InputType.B24 = EEpDat >> 7;
.................... */
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
009EA:  MOVFF  FF2,C24
009EE:  BCF    FF2.7
009F0:  CLRF   FAA
009F2:  MOVLW  04
009F4:  MOVWF  FA9
009F6:  BCF    FA6.6
009F8:  BCF    FA6.7
009FA:  BSF    FA6.0
009FC:  MOVF   FA8,W
009FE:  MOVLB  C
00A00:  BTFSC  x24.7
00A02:  BSF    FF2.7
00A04:  MOVWF  39
....................    FaultType1_8 = EEpDat;
00A06:  MOVFF  39,3D
.................... 
....................    FaultType.B1 = EEpDat;
00A0A:  MOVLB  B
00A0C:  BCF    xA0.0
00A0E:  BTFSC  39.0
00A10:  BSF    xA0.0
....................    FaultType.B2 = EEpDat >> 1;
00A12:  BCF    FD8.0
00A14:  RRCF   39,W
00A16:  BCF    xA0.1
00A18:  BTFSC  FE8.0
00A1A:  BSF    xA0.1
....................    FaultType.B3 = EEpDat >> 2;
00A1C:  RRCF   39,W
00A1E:  MOVWF  00
00A20:  RRCF   00,F
00A22:  MOVLW  3F
00A24:  ANDWF  00,F
00A26:  BCF    xA0.2
00A28:  BTFSC  00.0
00A2A:  BSF    xA0.2
....................    FaultType.B4 = EEpDat >> 3;
00A2C:  RRCF   39,W
00A2E:  MOVWF  00
00A30:  RRCF   00,F
00A32:  RRCF   00,F
00A34:  MOVLW  1F
00A36:  ANDWF  00,F
00A38:  BCF    xA0.3
00A3A:  BTFSC  00.0
00A3C:  BSF    xA0.3
....................    FaultType.B5 = EEpDat >> 4;
00A3E:  SWAPF  39,W
00A40:  MOVWF  00
00A42:  MOVLW  0F
00A44:  ANDWF  00,F
00A46:  BCF    xA0.4
00A48:  BTFSC  00.0
00A4A:  BSF    xA0.4
....................    FaultType.B6 = EEpDat >> 5;
00A4C:  SWAPF  39,W
00A4E:  MOVWF  00
00A50:  RRCF   00,F
00A52:  MOVLW  07
00A54:  ANDWF  00,F
00A56:  BCF    xA0.5
00A58:  BTFSC  00.0
00A5A:  BSF    xA0.5
....................    FaultType.B7 = EEpDat >> 6;
00A5C:  SWAPF  39,W
00A5E:  MOVWF  00
00A60:  RRCF   00,F
00A62:  RRCF   00,F
00A64:  MOVLW  03
00A66:  ANDWF  00,F
00A68:  BCF    xA0.6
00A6A:  BTFSC  00.0
00A6C:  BSF    xA0.6
....................    FaultType.B8 = EEpDat >> 7;
00A6E:  CLRF   00
00A70:  BTFSC  39.7
00A72:  BSF    00.0
00A74:  BCF    xA0.7
00A76:  BTFSC  00.0
00A78:  BSF    xA0.7
.................... 
....................    EEpDat = read_eeprom(0x05);   // Fault type 9-16
00A7A:  MOVFF  FF2,C24
00A7E:  BCF    FF2.7
00A80:  CLRF   FAA
00A82:  MOVLW  05
00A84:  MOVWF  FA9
00A86:  BCF    FA6.6
00A88:  BCF    FA6.7
00A8A:  BSF    FA6.0
00A8C:  MOVF   FA8,W
00A8E:  MOVLB  C
00A90:  BTFSC  x24.7
00A92:  BSF    FF2.7
00A94:  MOVWF  39
....................    FaultType9_16 = EEpDat;
00A96:  MOVFF  39,3E
.................... 
....................    FaultType.B9 = EEpDat;
00A9A:  MOVLB  B
00A9C:  BCF    xA1.0
00A9E:  BTFSC  39.0
00AA0:  BSF    xA1.0
....................    FaultType.B10 = EEpDat >> 1;
00AA2:  BCF    FD8.0
00AA4:  RRCF   39,W
00AA6:  BCF    xA1.1
00AA8:  BTFSC  FE8.0
00AAA:  BSF    xA1.1
....................    FaultType.B11 = EEpDat >> 2;
00AAC:  RRCF   39,W
00AAE:  MOVWF  00
00AB0:  RRCF   00,F
00AB2:  MOVLW  3F
00AB4:  ANDWF  00,F
00AB6:  BCF    xA1.2
00AB8:  BTFSC  00.0
00ABA:  BSF    xA1.2
....................    FaultType.B12 = EEpDat >> 3;
00ABC:  RRCF   39,W
00ABE:  MOVWF  00
00AC0:  RRCF   00,F
00AC2:  RRCF   00,F
00AC4:  MOVLW  1F
00AC6:  ANDWF  00,F
00AC8:  BCF    xA1.3
00ACA:  BTFSC  00.0
00ACC:  BSF    xA1.3
....................    FaultType.B13 = EEpDat >> 4;
00ACE:  SWAPF  39,W
00AD0:  MOVWF  00
00AD2:  MOVLW  0F
00AD4:  ANDWF  00,F
00AD6:  BCF    xA1.4
00AD8:  BTFSC  00.0
00ADA:  BSF    xA1.4
....................    FaultType.B14 = EEpDat >> 5;
00ADC:  SWAPF  39,W
00ADE:  MOVWF  00
00AE0:  RRCF   00,F
00AE2:  MOVLW  07
00AE4:  ANDWF  00,F
00AE6:  BCF    xA1.5
00AE8:  BTFSC  00.0
00AEA:  BSF    xA1.5
....................    FaultType.B15 = EEpDat >> 6;
00AEC:  SWAPF  39,W
00AEE:  MOVWF  00
00AF0:  RRCF   00,F
00AF2:  RRCF   00,F
00AF4:  MOVLW  03
00AF6:  ANDWF  00,F
00AF8:  BCF    xA1.6
00AFA:  BTFSC  00.0
00AFC:  BSF    xA1.6
....................    FaultType.B16 = EEpDat >> 7;
00AFE:  CLRF   00
00B00:  BTFSC  39.7
00B02:  BSF    00.0
00B04:  BCF    xA1.7
00B06:  BTFSC  00.0
00B08:  BSF    xA1.7
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00B0A:  MOVFF  FF2,C24
00B0E:  BCF    FF2.7
00B10:  CLRF   FAA
00B12:  MOVLW  07
00B14:  MOVWF  FA9
00B16:  BCF    FA6.6
00B18:  BCF    FA6.7
00B1A:  BSF    FA6.0
00B1C:  MOVF   FA8,W
00B1E:  MOVLB  C
00B20:  BTFSC  x24.7
00B22:  BSF    FF2.7
00B24:  MOVWF  39
....................    OutputType1_8 = EEpDat;
00B26:  MOVFF  39,40
.................... 
....................    OutputType.B1 = EEpDat;
00B2A:  MOVLB  B
00B2C:  BCF    xA2.0
00B2E:  BTFSC  39.0
00B30:  BSF    xA2.0
....................    OutputType.B2 = EEpDat >> 1;
00B32:  BCF    FD8.0
00B34:  RRCF   39,W
00B36:  BCF    xA2.1
00B38:  BTFSC  FE8.0
00B3A:  BSF    xA2.1
....................    OutputType.B3 = EEpDat >> 2;
00B3C:  RRCF   39,W
00B3E:  MOVWF  00
00B40:  RRCF   00,F
00B42:  MOVLW  3F
00B44:  ANDWF  00,F
00B46:  BCF    xA2.2
00B48:  BTFSC  00.0
00B4A:  BSF    xA2.2
....................    OutputType.B4 = EEpDat >> 3;
00B4C:  RRCF   39,W
00B4E:  MOVWF  00
00B50:  RRCF   00,F
00B52:  RRCF   00,F
00B54:  MOVLW  1F
00B56:  ANDWF  00,F
00B58:  BCF    xA2.3
00B5A:  BTFSC  00.0
00B5C:  BSF    xA2.3
....................    OutputType.B5 = EEpDat >> 4;
00B5E:  SWAPF  39,W
00B60:  MOVWF  00
00B62:  MOVLW  0F
00B64:  ANDWF  00,F
00B66:  BCF    xA2.4
00B68:  BTFSC  00.0
00B6A:  BSF    xA2.4
....................    OutputType.B6 = EEpDat >> 5;
00B6C:  SWAPF  39,W
00B6E:  MOVWF  00
00B70:  RRCF   00,F
00B72:  MOVLW  07
00B74:  ANDWF  00,F
00B76:  BCF    xA2.5
00B78:  BTFSC  00.0
00B7A:  BSF    xA2.5
....................    OutputType.B7 = EEpDat >> 6;
00B7C:  SWAPF  39,W
00B7E:  MOVWF  00
00B80:  RRCF   00,F
00B82:  RRCF   00,F
00B84:  MOVLW  03
00B86:  ANDWF  00,F
00B88:  BCF    xA2.6
00B8A:  BTFSC  00.0
00B8C:  BSF    xA2.6
....................    OutputType.B8 = EEpDat >> 7;
00B8E:  CLRF   00
00B90:  BTFSC  39.7
00B92:  BSF    00.0
00B94:  BCF    xA2.7
00B96:  BTFSC  00.0
00B98:  BSF    xA2.7
.................... 
....................    EEpDat = read_eeprom(0x08);   // Output type 9-16
00B9A:  MOVFF  FF2,C24
00B9E:  BCF    FF2.7
00BA0:  CLRF   FAA
00BA2:  MOVLW  08
00BA4:  MOVWF  FA9
00BA6:  BCF    FA6.6
00BA8:  BCF    FA6.7
00BAA:  BSF    FA6.0
00BAC:  MOVF   FA8,W
00BAE:  MOVLB  C
00BB0:  BTFSC  x24.7
00BB2:  BSF    FF2.7
00BB4:  MOVWF  39
....................    OutputType9_16 = EEpDat;
00BB6:  MOVFF  39,41
.................... 
....................    OutputType.B9 = EEpDat;
00BBA:  MOVLB  B
00BBC:  BCF    xA3.0
00BBE:  BTFSC  39.0
00BC0:  BSF    xA3.0
....................    OutputType.B10 = EEpDat >> 1;
00BC2:  BCF    FD8.0
00BC4:  RRCF   39,W
00BC6:  BCF    xA3.1
00BC8:  BTFSC  FE8.0
00BCA:  BSF    xA3.1
....................    OutputType.B11 = EEpDat >> 2;
00BCC:  RRCF   39,W
00BCE:  MOVWF  00
00BD0:  RRCF   00,F
00BD2:  MOVLW  3F
00BD4:  ANDWF  00,F
00BD6:  BCF    xA3.2
00BD8:  BTFSC  00.0
00BDA:  BSF    xA3.2
....................    OutputType.B12 = EEpDat >> 3;
00BDC:  RRCF   39,W
00BDE:  MOVWF  00
00BE0:  RRCF   00,F
00BE2:  RRCF   00,F
00BE4:  MOVLW  1F
00BE6:  ANDWF  00,F
00BE8:  BCF    xA3.3
00BEA:  BTFSC  00.0
00BEC:  BSF    xA3.3
....................    OutputType.B13 = EEpDat >> 4;
00BEE:  SWAPF  39,W
00BF0:  MOVWF  00
00BF2:  MOVLW  0F
00BF4:  ANDWF  00,F
00BF6:  BCF    xA3.4
00BF8:  BTFSC  00.0
00BFA:  BSF    xA3.4
....................    OutputType.B14 = EEpDat >> 5;
00BFC:  SWAPF  39,W
00BFE:  MOVWF  00
00C00:  RRCF   00,F
00C02:  MOVLW  07
00C04:  ANDWF  00,F
00C06:  BCF    xA3.5
00C08:  BTFSC  00.0
00C0A:  BSF    xA3.5
....................    OutputType.B15 = EEpDat >> 6;
00C0C:  SWAPF  39,W
00C0E:  MOVWF  00
00C10:  RRCF   00,F
00C12:  RRCF   00,F
00C14:  MOVLW  03
00C16:  ANDWF  00,F
00C18:  BCF    xA3.6
00C1A:  BTFSC  00.0
00C1C:  BSF    xA3.6
....................    OutputType.B16 = EEpDat >> 7;
00C1E:  CLRF   00
00C20:  BTFSC  39.7
00C22:  BSF    00.0
00C24:  BCF    xA3.7
00C26:  BTFSC  00.0
00C28:  BSF    xA3.7
.................... 
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
00C2A:  MOVFF  FF2,C24
00C2E:  BCF    FF2.7
00C30:  CLRF   FAA
00C32:  MOVLW  0A
00C34:  MOVWF  FA9
00C36:  BCF    FA6.6
00C38:  BCF    FA6.7
00C3A:  BSF    FA6.0
00C3C:  MOVF   FA8,W
00C3E:  MOVLB  C
00C40:  BTFSC  x24.7
00C42:  BSF    FF2.7
00C44:  MOVWF  39
....................    OutputBoth1_8 = EEpDat;
00C46:  MOVFF  39,43
.................... 
....................    OutputBoth.B1 = EEpDat;
00C4A:  MOVLB  B
00C4C:  BCF    xA4.0
00C4E:  BTFSC  39.0
00C50:  BSF    xA4.0
....................    OutputBoth.B2 = EEpDat >> 1;
00C52:  BCF    FD8.0
00C54:  RRCF   39,W
00C56:  BCF    xA4.1
00C58:  BTFSC  FE8.0
00C5A:  BSF    xA4.1
....................    OutputBoth.B3 = EEpDat >> 2;
00C5C:  RRCF   39,W
00C5E:  MOVWF  00
00C60:  RRCF   00,F
00C62:  MOVLW  3F
00C64:  ANDWF  00,F
00C66:  BCF    xA4.2
00C68:  BTFSC  00.0
00C6A:  BSF    xA4.2
....................    OutputBoth.B4 = EEpDat >> 3;
00C6C:  RRCF   39,W
00C6E:  MOVWF  00
00C70:  RRCF   00,F
00C72:  RRCF   00,F
00C74:  MOVLW  1F
00C76:  ANDWF  00,F
00C78:  BCF    xA4.3
00C7A:  BTFSC  00.0
00C7C:  BSF    xA4.3
....................    OutputBoth.B5 = EEpDat >> 4;
00C7E:  SWAPF  39,W
00C80:  MOVWF  00
00C82:  MOVLW  0F
00C84:  ANDWF  00,F
00C86:  BCF    xA4.4
00C88:  BTFSC  00.0
00C8A:  BSF    xA4.4
....................    OutputBoth.B6 = EEpDat >> 5;
00C8C:  SWAPF  39,W
00C8E:  MOVWF  00
00C90:  RRCF   00,F
00C92:  MOVLW  07
00C94:  ANDWF  00,F
00C96:  BCF    xA4.5
00C98:  BTFSC  00.0
00C9A:  BSF    xA4.5
....................    OutputBoth.B7 = EEpDat >> 6;
00C9C:  SWAPF  39,W
00C9E:  MOVWF  00
00CA0:  RRCF   00,F
00CA2:  RRCF   00,F
00CA4:  MOVLW  03
00CA6:  ANDWF  00,F
00CA8:  BCF    xA4.6
00CAA:  BTFSC  00.0
00CAC:  BSF    xA4.6
....................    OutputBoth.B8 = EEpDat >> 7;
00CAE:  CLRF   00
00CB0:  BTFSC  39.7
00CB2:  BSF    00.0
00CB4:  BCF    xA4.7
00CB6:  BTFSC  00.0
00CB8:  BSF    xA4.7
.................... 
....................    EEpDat = read_eeprom(0x0B);   // Output Both 9-16
00CBA:  MOVFF  FF2,C24
00CBE:  BCF    FF2.7
00CC0:  CLRF   FAA
00CC2:  MOVLW  0B
00CC4:  MOVWF  FA9
00CC6:  BCF    FA6.6
00CC8:  BCF    FA6.7
00CCA:  BSF    FA6.0
00CCC:  MOVF   FA8,W
00CCE:  MOVLB  C
00CD0:  BTFSC  x24.7
00CD2:  BSF    FF2.7
00CD4:  MOVWF  39
....................    OutputBoth9_16 = EEpDat;
00CD6:  MOVFF  39,44
.................... 
....................    OutputBoth.B9 = EEpDat;
00CDA:  MOVLB  B
00CDC:  BCF    xA5.0
00CDE:  BTFSC  39.0
00CE0:  BSF    xA5.0
....................    OutputBoth.B10 = EEpDat >> 1;
00CE2:  BCF    FD8.0
00CE4:  RRCF   39,W
00CE6:  BCF    xA5.1
00CE8:  BTFSC  FE8.0
00CEA:  BSF    xA5.1
....................    OutputBoth.B11 = EEpDat >> 2;
00CEC:  RRCF   39,W
00CEE:  MOVWF  00
00CF0:  RRCF   00,F
00CF2:  MOVLW  3F
00CF4:  ANDWF  00,F
00CF6:  BCF    xA5.2
00CF8:  BTFSC  00.0
00CFA:  BSF    xA5.2
....................    OutputBoth.B12 = EEpDat >> 3;
00CFC:  RRCF   39,W
00CFE:  MOVWF  00
00D00:  RRCF   00,F
00D02:  RRCF   00,F
00D04:  MOVLW  1F
00D06:  ANDWF  00,F
00D08:  BCF    xA5.3
00D0A:  BTFSC  00.0
00D0C:  BSF    xA5.3
....................    OutputBoth.B13 = EEpDat >> 4;
00D0E:  SWAPF  39,W
00D10:  MOVWF  00
00D12:  MOVLW  0F
00D14:  ANDWF  00,F
00D16:  BCF    xA5.4
00D18:  BTFSC  00.0
00D1A:  BSF    xA5.4
....................    OutputBoth.B14 = EEpDat >> 5;
00D1C:  SWAPF  39,W
00D1E:  MOVWF  00
00D20:  RRCF   00,F
00D22:  MOVLW  07
00D24:  ANDWF  00,F
00D26:  BCF    xA5.5
00D28:  BTFSC  00.0
00D2A:  BSF    xA5.5
....................    OutputBoth.B15 = EEpDat >> 6;
00D2C:  SWAPF  39,W
00D2E:  MOVWF  00
00D30:  RRCF   00,F
00D32:  RRCF   00,F
00D34:  MOVLW  03
00D36:  ANDWF  00,F
00D38:  BCF    xA5.6
00D3A:  BTFSC  00.0
00D3C:  BSF    xA5.6
....................    OutputBoth.B16 = EEpDat >> 7;
00D3E:  CLRF   00
00D40:  BTFSC  39.7
00D42:  BSF    00.0
00D44:  BCF    xA5.7
00D46:  BTFSC  00.0
00D48:  BSF    xA5.7
.................... 
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
00D4A:  MOVFF  FF2,C24
00D4E:  BCF    FF2.7
00D50:  CLRF   FAA
00D52:  MOVLW  0D
00D54:  MOVWF  FA9
00D56:  BCF    FA6.6
00D58:  BCF    FA6.7
00D5A:  BSF    FA6.0
00D5C:  MOVF   FA8,W
00D5E:  MOVLB  C
00D60:  BTFSC  x24.7
00D62:  BSF    FF2.7
00D64:  MOVWF  39
....................    Alarm_Indicator1_8 = EEpDat;
00D66:  MOVFF  39,46
.................... 
....................    AlarmIndicator.B1 = EEpDat;
00D6A:  MOVLB  B
00D6C:  BCF    xA6.0
00D6E:  BTFSC  39.0
00D70:  BSF    xA6.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
00D72:  BCF    FD8.0
00D74:  RRCF   39,W
00D76:  BCF    xA6.1
00D78:  BTFSC  FE8.0
00D7A:  BSF    xA6.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
00D7C:  RRCF   39,W
00D7E:  MOVWF  00
00D80:  RRCF   00,F
00D82:  MOVLW  3F
00D84:  ANDWF  00,F
00D86:  BCF    xA6.2
00D88:  BTFSC  00.0
00D8A:  BSF    xA6.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
00D8C:  RRCF   39,W
00D8E:  MOVWF  00
00D90:  RRCF   00,F
00D92:  RRCF   00,F
00D94:  MOVLW  1F
00D96:  ANDWF  00,F
00D98:  BCF    xA6.3
00D9A:  BTFSC  00.0
00D9C:  BSF    xA6.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
00D9E:  SWAPF  39,W
00DA0:  MOVWF  00
00DA2:  MOVLW  0F
00DA4:  ANDWF  00,F
00DA6:  BCF    xA6.4
00DA8:  BTFSC  00.0
00DAA:  BSF    xA6.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
00DAC:  SWAPF  39,W
00DAE:  MOVWF  00
00DB0:  RRCF   00,F
00DB2:  MOVLW  07
00DB4:  ANDWF  00,F
00DB6:  BCF    xA6.5
00DB8:  BTFSC  00.0
00DBA:  BSF    xA6.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
00DBC:  SWAPF  39,W
00DBE:  MOVWF  00
00DC0:  RRCF   00,F
00DC2:  RRCF   00,F
00DC4:  MOVLW  03
00DC6:  ANDWF  00,F
00DC8:  BCF    xA6.6
00DCA:  BTFSC  00.0
00DCC:  BSF    xA6.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
00DCE:  CLRF   00
00DD0:  BTFSC  39.7
00DD2:  BSF    00.0
00DD4:  BCF    xA6.7
00DD6:  BTFSC  00.0
00DD8:  BSF    xA6.7
.................... 
....................    EEpDat = read_eeprom(0x0E);   // AlarmIndicator 9-16
00DDA:  MOVFF  FF2,C24
00DDE:  BCF    FF2.7
00DE0:  CLRF   FAA
00DE2:  MOVLW  0E
00DE4:  MOVWF  FA9
00DE6:  BCF    FA6.6
00DE8:  BCF    FA6.7
00DEA:  BSF    FA6.0
00DEC:  MOVF   FA8,W
00DEE:  MOVLB  C
00DF0:  BTFSC  x24.7
00DF2:  BSF    FF2.7
00DF4:  MOVWF  39
....................    Alarm_Indicator9_16 = EEpDat;
00DF6:  MOVFF  39,47
.................... 
....................    AlarmIndicator.B9 = EEpDat;
00DFA:  MOVLB  B
00DFC:  BCF    xA7.0
00DFE:  BTFSC  39.0
00E00:  BSF    xA7.0
....................    AlarmIndicator.B10 = EEpDat >> 1;
00E02:  BCF    FD8.0
00E04:  RRCF   39,W
00E06:  BCF    xA7.1
00E08:  BTFSC  FE8.0
00E0A:  BSF    xA7.1
....................    AlarmIndicator.B11 = EEpDat >> 2;
00E0C:  RRCF   39,W
00E0E:  MOVWF  00
00E10:  RRCF   00,F
00E12:  MOVLW  3F
00E14:  ANDWF  00,F
00E16:  BCF    xA7.2
00E18:  BTFSC  00.0
00E1A:  BSF    xA7.2
....................    AlarmIndicator.B12 = EEpDat >> 3;
00E1C:  RRCF   39,W
00E1E:  MOVWF  00
00E20:  RRCF   00,F
00E22:  RRCF   00,F
00E24:  MOVLW  1F
00E26:  ANDWF  00,F
00E28:  BCF    xA7.3
00E2A:  BTFSC  00.0
00E2C:  BSF    xA7.3
....................    AlarmIndicator.B13 = EEpDat >> 4;
00E2E:  SWAPF  39,W
00E30:  MOVWF  00
00E32:  MOVLW  0F
00E34:  ANDWF  00,F
00E36:  BCF    xA7.4
00E38:  BTFSC  00.0
00E3A:  BSF    xA7.4
....................    AlarmIndicator.B14 = EEpDat >> 5;
00E3C:  SWAPF  39,W
00E3E:  MOVWF  00
00E40:  RRCF   00,F
00E42:  MOVLW  07
00E44:  ANDWF  00,F
00E46:  BCF    xA7.5
00E48:  BTFSC  00.0
00E4A:  BSF    xA7.5
....................    AlarmIndicator.B15 = EEpDat >> 6;
00E4C:  SWAPF  39,W
00E4E:  MOVWF  00
00E50:  RRCF   00,F
00E52:  RRCF   00,F
00E54:  MOVLW  03
00E56:  ANDWF  00,F
00E58:  BCF    xA7.6
00E5A:  BTFSC  00.0
00E5C:  BSF    xA7.6
....................    AlarmIndicator.B16 = EEpDat >> 7;
00E5E:  CLRF   00
00E60:  BTFSC  39.7
00E62:  BSF    00.0
00E64:  BCF    xA7.7
00E66:  BTFSC  00.0
00E68:  BSF    xA7.7
.................... 
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
00E6A:  MOVFF  FF2,C24
00E6E:  BCF    FF2.7
00E70:  CLRF   FAA
00E72:  MOVLW  10
00E74:  MOVWF  FA9
00E76:  BCF    FA6.6
00E78:  BCF    FA6.7
00E7A:  BSF    FA6.0
00E7C:  MOVF   FA8,W
00E7E:  MOVLB  C
00E80:  BTFSC  x24.7
00E82:  BSF    FF2.7
00E84:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
00E86:  MOVLB  B
00E88:  BCF    xB2.0
00E8A:  BTFSC  39.0
00E8C:  BSF    xB2.0
....................    RED_Colour.B2 = EEpDat >> 1;
00E8E:  BCF    FD8.0
00E90:  RRCF   39,W
00E92:  BCF    xB2.1
00E94:  BTFSC  FE8.0
00E96:  BSF    xB2.1
....................    RED_Colour.B3 = EEpDat >> 2;
00E98:  RRCF   39,W
00E9A:  MOVWF  00
00E9C:  RRCF   00,F
00E9E:  MOVLW  3F
00EA0:  ANDWF  00,F
00EA2:  BCF    xB2.2
00EA4:  BTFSC  00.0
00EA6:  BSF    xB2.2
....................    RED_Colour.B4 = EEpDat >> 3;
00EA8:  RRCF   39,W
00EAA:  MOVWF  00
00EAC:  RRCF   00,F
00EAE:  RRCF   00,F
00EB0:  MOVLW  1F
00EB2:  ANDWF  00,F
00EB4:  BCF    xB2.3
00EB6:  BTFSC  00.0
00EB8:  BSF    xB2.3
....................    RED_Colour.B5 = EEpDat >> 4;
00EBA:  SWAPF  39,W
00EBC:  MOVWF  00
00EBE:  MOVLW  0F
00EC0:  ANDWF  00,F
00EC2:  BCF    xB2.4
00EC4:  BTFSC  00.0
00EC6:  BSF    xB2.4
....................    RED_Colour.B6 = EEpDat >> 5;
00EC8:  SWAPF  39,W
00ECA:  MOVWF  00
00ECC:  RRCF   00,F
00ECE:  MOVLW  07
00ED0:  ANDWF  00,F
00ED2:  BCF    xB2.5
00ED4:  BTFSC  00.0
00ED6:  BSF    xB2.5
....................    RED_Colour.B7 = EEpDat >> 6;
00ED8:  SWAPF  39,W
00EDA:  MOVWF  00
00EDC:  RRCF   00,F
00EDE:  RRCF   00,F
00EE0:  MOVLW  03
00EE2:  ANDWF  00,F
00EE4:  BCF    xB2.6
00EE6:  BTFSC  00.0
00EE8:  BSF    xB2.6
....................    RED_Colour.B8 = EEpDat >> 7;
00EEA:  CLRF   00
00EEC:  BTFSC  39.7
00EEE:  BSF    00.0
00EF0:  BCF    xB2.7
00EF2:  BTFSC  00.0
00EF4:  BSF    xB2.7
....................    
....................    EEpDat = read_eeprom(0x11);
00EF6:  MOVFF  FF2,C24
00EFA:  BCF    FF2.7
00EFC:  CLRF   FAA
00EFE:  MOVLW  11
00F00:  MOVWF  FA9
00F02:  BCF    FA6.6
00F04:  BCF    FA6.7
00F06:  BSF    FA6.0
00F08:  MOVF   FA8,W
00F0A:  MOVLB  C
00F0C:  BTFSC  x24.7
00F0E:  BSF    FF2.7
00F10:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
00F12:  MOVLB  B
00F14:  BCF    xB3.0
00F16:  BTFSC  39.0
00F18:  BSF    xB3.0
....................    RED_Colour.B10 = EEpDat >> 1;
00F1A:  BCF    FD8.0
00F1C:  RRCF   39,W
00F1E:  BCF    xB3.1
00F20:  BTFSC  FE8.0
00F22:  BSF    xB3.1
....................    
....................    EEpDat = read_eeprom(0x12);
00F24:  MOVFF  FF2,C24
00F28:  BCF    FF2.7
00F2A:  CLRF   FAA
00F2C:  MOVLW  12
00F2E:  MOVWF  FA9
00F30:  BCF    FA6.6
00F32:  BCF    FA6.7
00F34:  BSF    FA6.0
00F36:  MOVF   FA8,W
00F38:  MOVLB  C
00F3A:  BTFSC  x24.7
00F3C:  BSF    FF2.7
00F3E:  MOVWF  39
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
00F40:  MOVLB  B
00F42:  BCF    xB3.2
00F44:  BTFSC  39.0
00F46:  BSF    xB3.2
....................    RED_Colour.B12 = EEpDat >> 1;
00F48:  BCF    FD8.0
00F4A:  RRCF   39,W
00F4C:  BCF    xB3.3
00F4E:  BTFSC  FE8.0
00F50:  BSF    xB3.3
....................    RED_Colour.B13 = EEpDat >> 2;
00F52:  RRCF   39,W
00F54:  MOVWF  00
00F56:  RRCF   00,F
00F58:  MOVLW  3F
00F5A:  ANDWF  00,F
00F5C:  BCF    xB3.4
00F5E:  BTFSC  00.0
00F60:  BSF    xB3.4
....................    RED_Colour.B14 = EEpDat >> 3;
00F62:  RRCF   39,W
00F64:  MOVWF  00
00F66:  RRCF   00,F
00F68:  RRCF   00,F
00F6A:  MOVLW  1F
00F6C:  ANDWF  00,F
00F6E:  BCF    xB3.5
00F70:  BTFSC  00.0
00F72:  BSF    xB3.5
....................    RED_Colour.B15 = EEpDat >> 4;
00F74:  SWAPF  39,W
00F76:  MOVWF  00
00F78:  MOVLW  0F
00F7A:  ANDWF  00,F
00F7C:  BCF    xB3.6
00F7E:  BTFSC  00.0
00F80:  BSF    xB3.6
....................    RED_Colour.B16 = EEpDat >> 5;
00F82:  SWAPF  39,W
00F84:  MOVWF  00
00F86:  RRCF   00,F
00F88:  MOVLW  07
00F8A:  ANDWF  00,F
00F8C:  BCF    xB3.7
00F8E:  BTFSC  00.0
00F90:  BSF    xB3.7
.................... 
....................    
....................    EEpDat = read_eeprom(0x14);
00F92:  MOVFF  FF2,C24
00F96:  BCF    FF2.7
00F98:  CLRF   FAA
00F9A:  MOVLW  14
00F9C:  MOVWF  FA9
00F9E:  BCF    FA6.6
00FA0:  BCF    FA6.7
00FA2:  BSF    FA6.0
00FA4:  MOVF   FA8,W
00FA6:  MOVLB  C
00FA8:  BTFSC  x24.7
00FAA:  BSF    FF2.7
00FAC:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
00FAE:  MOVLB  B
00FB0:  BCF    xB4.0
00FB2:  BTFSC  39.0
00FB4:  BSF    xB4.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
00FB6:  BCF    FD8.0
00FB8:  RRCF   39,W
00FBA:  BCF    xB4.1
00FBC:  BTFSC  FE8.0
00FBE:  BSF    xB4.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
00FC0:  RRCF   39,W
00FC2:  MOVWF  00
00FC4:  RRCF   00,F
00FC6:  MOVLW  3F
00FC8:  ANDWF  00,F
00FCA:  BCF    xB4.2
00FCC:  BTFSC  00.0
00FCE:  BSF    xB4.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
00FD0:  RRCF   39,W
00FD2:  MOVWF  00
00FD4:  RRCF   00,F
00FD6:  RRCF   00,F
00FD8:  MOVLW  1F
00FDA:  ANDWF  00,F
00FDC:  BCF    xB4.3
00FDE:  BTFSC  00.0
00FE0:  BSF    xB4.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
00FE2:  SWAPF  39,W
00FE4:  MOVWF  00
00FE6:  MOVLW  0F
00FE8:  ANDWF  00,F
00FEA:  BCF    xB4.4
00FEC:  BTFSC  00.0
00FEE:  BSF    xB4.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
00FF0:  SWAPF  39,W
00FF2:  MOVWF  00
00FF4:  RRCF   00,F
00FF6:  MOVLW  07
00FF8:  ANDWF  00,F
00FFA:  BCF    xB4.5
00FFC:  BTFSC  00.0
00FFE:  BSF    xB4.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
01000:  SWAPF  39,W
01002:  MOVWF  00
01004:  RRCF   00,F
01006:  RRCF   00,F
01008:  MOVLW  03
0100A:  ANDWF  00,F
0100C:  BCF    xB4.6
0100E:  BTFSC  00.0
01010:  BSF    xB4.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
01012:  CLRF   00
01014:  BTFSC  39.7
01016:  BSF    00.0
01018:  BCF    xB4.7
0101A:  BTFSC  00.0
0101C:  BSF    xB4.7
....................    
....................    EEpDat = read_eeprom(0x15);
0101E:  MOVFF  FF2,C24
01022:  BCF    FF2.7
01024:  CLRF   FAA
01026:  MOVLW  15
01028:  MOVWF  FA9
0102A:  BCF    FA6.6
0102C:  BCF    FA6.7
0102E:  BSF    FA6.0
01030:  MOVF   FA8,W
01032:  MOVLB  C
01034:  BTFSC  x24.7
01036:  BSF    FF2.7
01038:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
0103A:  MOVLB  B
0103C:  BCF    xB5.0
0103E:  BTFSC  39.0
01040:  BSF    xB5.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
01042:  BCF    FD8.0
01044:  RRCF   39,W
01046:  BCF    xB5.1
01048:  BTFSC  FE8.0
0104A:  BSF    xB5.1
....................    
....................    
....................    EEpDat = read_eeprom(0x16);
0104C:  MOVFF  FF2,C24
01050:  BCF    FF2.7
01052:  CLRF   FAA
01054:  MOVLW  16
01056:  MOVWF  FA9
01058:  BCF    FA6.6
0105A:  BCF    FA6.7
0105C:  BSF    FA6.0
0105E:  MOVF   FA8,W
01060:  MOVLB  C
01062:  BTFSC  x24.7
01064:  BSF    FF2.7
01066:  MOVWF  39
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
01068:  MOVLB  B
0106A:  BCF    xB5.2
0106C:  BTFSC  39.0
0106E:  BSF    xB5.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
01070:  BCF    FD8.0
01072:  RRCF   39,W
01074:  BCF    xB5.3
01076:  BTFSC  FE8.0
01078:  BSF    xB5.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
0107A:  RRCF   39,W
0107C:  MOVWF  00
0107E:  RRCF   00,F
01080:  MOVLW  3F
01082:  ANDWF  00,F
01084:  BCF    xB5.4
01086:  BTFSC  00.0
01088:  BSF    xB5.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
0108A:  RRCF   39,W
0108C:  MOVWF  00
0108E:  RRCF   00,F
01090:  RRCF   00,F
01092:  MOVLW  1F
01094:  ANDWF  00,F
01096:  BCF    xB5.5
01098:  BTFSC  00.0
0109A:  BSF    xB5.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
0109C:  SWAPF  39,W
0109E:  MOVWF  00
010A0:  MOVLW  0F
010A2:  ANDWF  00,F
010A4:  BCF    xB5.6
010A6:  BTFSC  00.0
010A8:  BSF    xB5.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
010AA:  SWAPF  39,W
010AC:  MOVWF  00
010AE:  RRCF   00,F
010B0:  MOVLW  07
010B2:  ANDWF  00,F
010B4:  BCF    xB5.7
010B6:  BTFSC  00.0
010B8:  BSF    xB5.7
.................... 
....................     //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
010BA:  MOVFF  FF2,C24
010BE:  BCF    FF2.7
010C0:  CLRF   FAA
010C2:  MOVLW  18
010C4:  MOVWF  FA9
010C6:  BCF    FA6.6
010C8:  BCF    FA6.7
010CA:  BSF    FA6.0
010CC:  MOVF   FA8,W
010CE:  MOVLB  C
010D0:  BTFSC  x24.7
010D2:  BSF    FF2.7
010D4:  MOVLB  0
010D6:  MOVWF  x6A
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
010D8:  MOVFF  FF2,C24
010DC:  BCF    FF2.7
010DE:  CLRF   FAA
010E0:  MOVLW  19
010E2:  MOVWF  FA9
010E4:  BCF    FA6.6
010E6:  BCF    FA6.7
010E8:  BSF    FA6.0
010EA:  MOVF   FA8,W
010EC:  MOVLB  C
010EE:  BTFSC  x24.7
010F0:  BSF    FF2.7
010F2:  MOVLB  0
010F4:  MOVWF  x6B
....................    FlashingRate = read_eeprom(0x1A); // Flashing rate
010F6:  MOVFF  FF2,C24
010FA:  BCF    FF2.7
010FC:  CLRF   FAA
010FE:  MOVLW  1A
01100:  MOVWF  FA9
01102:  BCF    FA6.6
01104:  BCF    FA6.7
01106:  BSF    FA6.0
01108:  MOVF   FA8,W
0110A:  MOVLB  C
0110C:  BTFSC  x24.7
0110E:  BSF    FF2.7
01110:  MOVLB  0
01112:  MOVWF  x6C
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
01114:  MOVFF  FF2,C24
01118:  BCF    FF2.7
0111A:  CLRF   FAA
0111C:  MOVLW  1B
0111E:  MOVWF  FA9
01120:  BCF    FA6.6
01122:  BCF    FA6.7
01124:  BSF    FA6.0
01126:  MOVF   FA8,W
01128:  MOVLB  C
0112A:  BTFSC  x24.7
0112C:  BSF    FF2.7
0112E:  MOVLB  0
01130:  MOVWF  x6D
....................    
....................    FaultDelayTime[0] = read_eeprom(0x1C);  // Master or slave sync(flashing)
01132:  MOVFF  FF2,C24
01136:  BCF    FF2.7
01138:  CLRF   FAA
0113A:  MOVLW  1C
0113C:  MOVWF  FA9
0113E:  BCF    FA6.6
01140:  BCF    FA6.7
01142:  BSF    FA6.0
01144:  MOVF   FA8,W
01146:  MOVLB  C
01148:  BTFSC  x24.7
0114A:  BSF    FF2.7
0114C:  MOVLB  B
0114E:  CLRF   xE9
01150:  MOVWF  xE8
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
01152:  MOVFF  FF2,C24
01156:  BCF    FF2.7
01158:  CLRF   FAA
0115A:  MOVLW  1D
0115C:  MOVWF  FA9
0115E:  BCF    FA6.6
01160:  BCF    FA6.7
01162:  BSF    FA6.0
01164:  MOVF   FA8,W
01166:  MOVLB  C
01168:  BTFSC  x24.7
0116A:  BSF    FF2.7
0116C:  MOVLB  0
0116E:  MOVWF  x79
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
01170:  MOVFF  FF2,C24
01174:  BCF    FF2.7
01176:  CLRF   FAA
01178:  MOVLW  1E
0117A:  MOVWF  FA9
0117C:  BCF    FA6.6
0117E:  BCF    FA6.7
01180:  BSF    FA6.0
01182:  MOVF   FA8,W
01184:  MOVLB  C
01186:  BTFSC  x24.7
01188:  BSF    FF2.7
0118A:  MOVLB  B
0118C:  CLRF   xEB
0118E:  MOVWF  xEA
....................    FaultDelayTime[2] = read_eeprom(0x1F);
01190:  MOVFF  FF2,C24
01194:  BCF    FF2.7
01196:  CLRF   FAA
01198:  MOVLW  1F
0119A:  MOVWF  FA9
0119C:  BCF    FA6.6
0119E:  BCF    FA6.7
011A0:  BSF    FA6.0
011A2:  MOVF   FA8,W
011A4:  MOVLB  C
011A6:  BTFSC  x24.7
011A8:  BSF    FF2.7
011AA:  MOVLB  B
011AC:  CLRF   xED
011AE:  MOVWF  xEC
....................    FaultDelayTime[3] = read_eeprom(0x20);
011B0:  MOVFF  FF2,C24
011B4:  BCF    FF2.7
011B6:  CLRF   FAA
011B8:  MOVLW  20
011BA:  MOVWF  FA9
011BC:  BCF    FA6.6
011BE:  BCF    FA6.7
011C0:  BSF    FA6.0
011C2:  MOVF   FA8,W
011C4:  MOVLB  C
011C6:  BTFSC  x24.7
011C8:  BSF    FF2.7
011CA:  MOVLB  B
011CC:  CLRF   xEF
011CE:  MOVWF  xEE
....................    FaultDelayTime[4] = read_eeprom(0x21);
011D0:  MOVFF  FF2,C24
011D4:  BCF    FF2.7
011D6:  CLRF   FAA
011D8:  MOVLW  21
011DA:  MOVWF  FA9
011DC:  BCF    FA6.6
011DE:  BCF    FA6.7
011E0:  BSF    FA6.0
011E2:  MOVF   FA8,W
011E4:  MOVLB  C
011E6:  BTFSC  x24.7
011E8:  BSF    FF2.7
011EA:  MOVLB  B
011EC:  CLRF   xF1
011EE:  MOVWF  xF0
....................    FaultDelayTime[5] = read_eeprom(0x22);
011F0:  MOVFF  FF2,C24
011F4:  BCF    FF2.7
011F6:  CLRF   FAA
011F8:  MOVLW  22
011FA:  MOVWF  FA9
011FC:  BCF    FA6.6
011FE:  BCF    FA6.7
01200:  BSF    FA6.0
01202:  MOVF   FA8,W
01204:  MOVLB  C
01206:  BTFSC  x24.7
01208:  BSF    FF2.7
0120A:  MOVLB  B
0120C:  CLRF   xF3
0120E:  MOVWF  xF2
....................    FaultDelayTime[6] = read_eeprom(0x23);
01210:  MOVFF  FF2,C24
01214:  BCF    FF2.7
01216:  CLRF   FAA
01218:  MOVLW  23
0121A:  MOVWF  FA9
0121C:  BCF    FA6.6
0121E:  BCF    FA6.7
01220:  BSF    FA6.0
01222:  MOVF   FA8,W
01224:  MOVLB  C
01226:  BTFSC  x24.7
01228:  BSF    FF2.7
0122A:  MOVLB  B
0122C:  CLRF   xF5
0122E:  MOVWF  xF4
....................    FaultDelayTime[7] = read_eeprom(0x24);
01230:  MOVFF  FF2,C24
01234:  BCF    FF2.7
01236:  CLRF   FAA
01238:  MOVLW  24
0123A:  MOVWF  FA9
0123C:  BCF    FA6.6
0123E:  BCF    FA6.7
01240:  BSF    FA6.0
01242:  MOVF   FA8,W
01244:  MOVLB  C
01246:  BTFSC  x24.7
01248:  BSF    FF2.7
0124A:  MOVLB  B
0124C:  CLRF   xF7
0124E:  MOVWF  xF6
....................    FaultDelayTime[8] = read_eeprom(0x25);
01250:  MOVFF  FF2,C24
01254:  BCF    FF2.7
01256:  CLRF   FAA
01258:  MOVLW  25
0125A:  MOVWF  FA9
0125C:  BCF    FA6.6
0125E:  BCF    FA6.7
01260:  BSF    FA6.0
01262:  MOVF   FA8,W
01264:  MOVLB  C
01266:  BTFSC  x24.7
01268:  BSF    FF2.7
0126A:  MOVLB  B
0126C:  CLRF   xF9
0126E:  MOVWF  xF8
....................    FaultDelayTime[9] = read_eeprom(0x26);
01270:  MOVFF  FF2,C24
01274:  BCF    FF2.7
01276:  CLRF   FAA
01278:  MOVLW  26
0127A:  MOVWF  FA9
0127C:  BCF    FA6.6
0127E:  BCF    FA6.7
01280:  BSF    FA6.0
01282:  MOVF   FA8,W
01284:  MOVLB  C
01286:  BTFSC  x24.7
01288:  BSF    FF2.7
0128A:  MOVLB  B
0128C:  CLRF   xFB
0128E:  MOVWF  xFA
....................    FaultDelayTime[10] = read_eeprom(0x27);
01290:  MOVFF  FF2,C24
01294:  BCF    FF2.7
01296:  CLRF   FAA
01298:  MOVLW  27
0129A:  MOVWF  FA9
0129C:  BCF    FA6.6
0129E:  BCF    FA6.7
012A0:  BSF    FA6.0
012A2:  MOVF   FA8,W
012A4:  MOVLB  C
012A6:  BTFSC  x24.7
012A8:  BSF    FF2.7
012AA:  MOVLB  B
012AC:  CLRF   xFD
012AE:  MOVWF  xFC
....................    FaultDelayTime[11] = read_eeprom(0x28);
012B0:  MOVFF  FF2,C24
012B4:  BCF    FF2.7
012B6:  CLRF   FAA
012B8:  MOVLW  28
012BA:  MOVWF  FA9
012BC:  BCF    FA6.6
012BE:  BCF    FA6.7
012C0:  BSF    FA6.0
012C2:  MOVF   FA8,W
012C4:  MOVLB  C
012C6:  BTFSC  x24.7
012C8:  BSF    FF2.7
012CA:  MOVLB  B
012CC:  CLRF   xFF
012CE:  MOVWF  xFE
....................    FaultDelayTime[12] = read_eeprom(0x29);
012D0:  MOVFF  FF2,C24
012D4:  BCF    FF2.7
012D6:  CLRF   FAA
012D8:  MOVLW  29
012DA:  MOVWF  FA9
012DC:  BCF    FA6.6
012DE:  BCF    FA6.7
012E0:  BSF    FA6.0
012E2:  MOVF   FA8,W
012E4:  MOVLB  C
012E6:  BTFSC  x24.7
012E8:  BSF    FF2.7
012EA:  CLRF   x01
012EC:  MOVWF  x00
....................    FaultDelayTime[13] = read_eeprom(0x2A);
012EE:  MOVFF  FF2,C24
012F2:  BCF    FF2.7
012F4:  CLRF   FAA
012F6:  MOVLW  2A
012F8:  MOVWF  FA9
012FA:  BCF    FA6.6
012FC:  BCF    FA6.7
012FE:  BSF    FA6.0
01300:  MOVF   FA8,W
01302:  BTFSC  x24.7
01304:  BSF    FF2.7
01306:  CLRF   x03
01308:  MOVWF  x02
....................    FaultDelayTime[14] = read_eeprom(0x2B);
0130A:  MOVFF  FF2,C24
0130E:  BCF    FF2.7
01310:  CLRF   FAA
01312:  MOVLW  2B
01314:  MOVWF  FA9
01316:  BCF    FA6.6
01318:  BCF    FA6.7
0131A:  BSF    FA6.0
0131C:  MOVF   FA8,W
0131E:  BTFSC  x24.7
01320:  BSF    FF2.7
01322:  CLRF   x05
01324:  MOVWF  x04
....................    FaultDelayTime[15] = read_eeprom(0x2C);
01326:  MOVFF  FF2,C24
0132A:  BCF    FF2.7
0132C:  CLRF   FAA
0132E:  MOVLW  2C
01330:  MOVWF  FA9
01332:  BCF    FA6.6
01334:  BCF    FA6.7
01336:  BSF    FA6.0
01338:  MOVF   FA8,W
0133A:  BTFSC  x24.7
0133C:  BSF    FF2.7
0133E:  CLRF   x07
01340:  MOVWF  x06
....................    FaultDelayTime[16] = read_eeprom(0x2D);
01342:  MOVFF  FF2,C24
01346:  BCF    FF2.7
01348:  CLRF   FAA
0134A:  MOVLW  2D
0134C:  MOVWF  FA9
0134E:  BCF    FA6.6
01350:  BCF    FA6.7
01352:  BSF    FA6.0
01354:  MOVF   FA8,W
01356:  BTFSC  x24.7
01358:  BSF    FF2.7
0135A:  CLRF   x09
0135C:  MOVWF  x08
....................    FaultDelayTime[17] = read_eeprom(0x2E);
0135E:  MOVFF  FF2,C24
01362:  BCF    FF2.7
01364:  CLRF   FAA
01366:  MOVLW  2E
01368:  MOVWF  FA9
0136A:  BCF    FA6.6
0136C:  BCF    FA6.7
0136E:  BSF    FA6.0
01370:  MOVF   FA8,W
01372:  BTFSC  x24.7
01374:  BSF    FF2.7
01376:  CLRF   x0B
01378:  MOVWF  x0A
....................    FaultDelayTime[18] = read_eeprom(0x2F);
0137A:  MOVFF  FF2,C24
0137E:  BCF    FF2.7
01380:  CLRF   FAA
01382:  MOVLW  2F
01384:  MOVWF  FA9
01386:  BCF    FA6.6
01388:  BCF    FA6.7
0138A:  BSF    FA6.0
0138C:  MOVF   FA8,W
0138E:  BTFSC  x24.7
01390:  BSF    FF2.7
01392:  CLRF   x0D
01394:  MOVWF  x0C
....................    FaultDelayTime[19] = read_eeprom(0x30);
01396:  MOVFF  FF2,C24
0139A:  BCF    FF2.7
0139C:  CLRF   FAA
0139E:  MOVLW  30
013A0:  MOVWF  FA9
013A2:  BCF    FA6.6
013A4:  BCF    FA6.7
013A6:  BSF    FA6.0
013A8:  MOVF   FA8,W
013AA:  BTFSC  x24.7
013AC:  BSF    FF2.7
013AE:  CLRF   x0F
013B0:  MOVWF  x0E
....................    FaultDelayTime[20] = read_eeprom(0x31);
013B2:  MOVFF  FF2,C24
013B6:  BCF    FF2.7
013B8:  CLRF   FAA
013BA:  MOVLW  31
013BC:  MOVWF  FA9
013BE:  BCF    FA6.6
013C0:  BCF    FA6.7
013C2:  BSF    FA6.0
013C4:  MOVF   FA8,W
013C6:  BTFSC  x24.7
013C8:  BSF    FF2.7
013CA:  CLRF   x11
013CC:  MOVWF  x10
....................    
....................       unsigned int  a = 0; 
....................    unsigned char  phonenum;
013CE:  CLRF   x1A
....................    for(; ; a++)
....................    {
....................       restart_wdt();
013D0:  CLRWDT
....................       phonenum = read_eeprom(0x32 + a);
013D2:  MOVLW  32
013D4:  ADDWF  x1A,W
013D6:  MOVWF  x24
013D8:  MOVFF  FF2,C25
013DC:  BCF    FF2.7
013DE:  CLRF   FAA
013E0:  MOVFF  C24,FA9
013E4:  BCF    FA6.6
013E6:  BCF    FA6.7
013E8:  BSF    FA6.0
013EA:  MOVF   FA8,W
013EC:  BTFSC  x25.7
013EE:  BSF    FF2.7
013F0:  MOVWF  x1B
....................       if((phonenum == 0x0D) || (a > 15))
013F2:  MOVF   x1B,W
013F4:  SUBLW  0D
013F6:  BZ    13FE
013F8:  MOVF   x1A,W
013FA:  SUBLW  0F
013FC:  BC    1446
....................       {
....................          sms_phonenumber[a] =  '\0';
013FE:  CLRF   03
01400:  MOVF   x1A,W
01402:  ADDLW  8B
01404:  MOVWF  FE9
01406:  MOVLW  09
01408:  ADDWFC 03,W
0140A:  MOVWF  FEA
0140C:  CLRF   FEF
....................          write_eeprom(0x32+a,phonenum);
0140E:  MOVLW  32
01410:  ADDWF  x1A,W
01412:  MOVWF  x24
01414:  MOVF   FF2,W
01416:  MOVWF  00
01418:  BCF    FF2.7
0141A:  CLRF   FAA
0141C:  MOVFF  C24,FA9
01420:  MOVFF  C1B,FA8
01424:  BCF    FA6.6
01426:  BCF    FA6.7
01428:  BSF    FA6.2
0142A:  MOVLB  F
0142C:  MOVLW  55
0142E:  MOVWF  FA7
01430:  MOVLW  AA
01432:  MOVWF  FA7
01434:  BSF    FA6.1
01436:  BTFSC  FA6.1
01438:  BRA    1436
0143A:  BCF    FA6.2
0143C:  MOVF   00,W
0143E:  IORWF  FF2,F
....................          break;
01440:  BRA    1462
....................       }
01442:  BRA    145A
01444:  MOVLB  C
....................       else
....................       {
....................          sms_phonenumber[a] = phonenum;
01446:  CLRF   03
01448:  MOVF   x1A,W
0144A:  ADDLW  8B
0144C:  MOVWF  FE9
0144E:  MOVLW  09
01450:  ADDWFC 03,W
01452:  MOVWF  FEA
01454:  MOVFF  C1B,FEF
01458:  MOVLB  F
....................       }
0145A:  MOVLB  C
0145C:  INCF   x1A,F
0145E:  BRA    13D0
01460:  MOVLB  F
....................    }
....................    
....................       
....................    int16  i =3,j=0,k=0 , buff;
01462:  MOVLB  C
01464:  CLRF   x1D
01466:  MOVLW  03
01468:  MOVWF  x1C
0146A:  CLRF   x1F
0146C:  CLRF   x1E
0146E:  CLRF   x21
01470:  CLRF   x20
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01472:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01474:  MOVLW  5D
01476:  ADDWF  x1C,W
01478:  MOVWF  x24
0147A:  MOVLW  00
0147C:  ADDWFC x1D,W
0147E:  MOVWF  x25
01480:  MOVFF  FF2,C26
01484:  BCF    FF2.7
01486:  MOVFF  C25,FAA
0148A:  MOVFF  C24,FA9
0148E:  BCF    FA6.6
01490:  BCF    FA6.7
01492:  BSF    FA6.0
01494:  MOVF   FA8,W
01496:  BTFSC  x26.7
01498:  BSF    FF2.7
0149A:  CLRF   x23
0149C:  MOVWF  x22
....................       
....................       if((buff == 0x0D)|| (j>30))
0149E:  MOVF   x22,W
014A0:  SUBLW  0D
014A2:  BNZ   14A8
014A4:  MOVF   x23,F
014A6:  BZ    14B2
014A8:  MOVF   x1F,F
014AA:  BNZ   14B2
014AC:  MOVF   x1E,W
014AE:  SUBLW  1E
014B0:  BC    14C4
....................       {
....................          SMS_Massage1[j] = '\0' ; // end string
014B2:  MOVLW  9A
014B4:  ADDWF  x1E,W
014B6:  MOVWF  FE9
014B8:  MOVLW  09
014BA:  ADDWFC x1F,W
014BC:  MOVWF  FEA
014BE:  CLRF   FEF
....................          break;
014C0:  BRA    14E8
....................       }
014C2:  BRA    14D4
....................       else
....................       {
....................          SMS_Massage1[j] = buff;  
014C4:  MOVLW  9A
014C6:  ADDWF  x1E,W
014C8:  MOVWF  FE9
014CA:  MOVLW  09
014CC:  ADDWFC x1F,W
014CE:  MOVWF  FEA
014D0:  MOVFF  C22,FEF
....................       }
014D4:  MOVFF  C1D,03
014D8:  MOVF   x1C,W
014DA:  INCF   x1C,F
014DC:  BTFSC  FD8.2
014DE:  INCF   x1D,F
014E0:  INCF   x1E,F
014E2:  BTFSC  FD8.2
014E4:  INCF   x1F,F
014E6:  BRA    1472
....................    }
....................    
....................    i++;
014E8:  INCF   x1C,F
014EA:  BTFSC  FD8.2
014EC:  INCF   x1D,F
....................    j=0;
014EE:  CLRF   x1F
014F0:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
014F2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
014F4:  MOVLW  5D
014F6:  ADDWF  x1C,W
014F8:  MOVWF  x24
014FA:  MOVLW  00
014FC:  ADDWFC x1D,W
014FE:  MOVWF  x25
01500:  MOVFF  FF2,C26
01504:  BCF    FF2.7
01506:  MOVFF  C25,FAA
0150A:  MOVFF  C24,FA9
0150E:  BCF    FA6.6
01510:  BCF    FA6.7
01512:  BSF    FA6.0
01514:  MOVF   FA8,W
01516:  BTFSC  x26.7
01518:  BSF    FF2.7
0151A:  CLRF   x23
0151C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
0151E:  MOVF   x22,W
01520:  SUBLW  0D
01522:  BNZ   1528
01524:  MOVF   x23,F
01526:  BZ    1532
01528:  MOVF   x1F,F
0152A:  BNZ   1532
0152C:  MOVF   x1E,W
0152E:  SUBLW  1E
01530:  BC    1544
....................       {
....................          SMS_Massage2[j] = '\0' ; // end string
01532:  MOVLW  BA
01534:  ADDWF  x1E,W
01536:  MOVWF  FE9
01538:  MOVLW  09
0153A:  ADDWFC x1F,W
0153C:  MOVWF  FEA
0153E:  CLRF   FEF
....................          break;
01540:  BRA    1568
....................       }
01542:  BRA    1554
....................       else
....................       {
....................          SMS_Massage2[j] = buff;
01544:  MOVLW  BA
01546:  ADDWF  x1E,W
01548:  MOVWF  FE9
0154A:  MOVLW  09
0154C:  ADDWFC x1F,W
0154E:  MOVWF  FEA
01550:  MOVFF  C22,FEF
....................          
....................       }
01554:  MOVFF  C1D,03
01558:  MOVF   x1C,W
0155A:  INCF   x1C,F
0155C:  BTFSC  FD8.2
0155E:  INCF   x1D,F
01560:  INCF   x1E,F
01562:  BTFSC  FD8.2
01564:  INCF   x1F,F
01566:  BRA    14F2
....................    }
....................    
....................    i++;
01568:  INCF   x1C,F
0156A:  BTFSC  FD8.2
0156C:  INCF   x1D,F
....................    j=0;
0156E:  CLRF   x1F
01570:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01572:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01574:  MOVLW  5D
01576:  ADDWF  x1C,W
01578:  MOVWF  x24
0157A:  MOVLW  00
0157C:  ADDWFC x1D,W
0157E:  MOVWF  x25
01580:  MOVFF  FF2,C26
01584:  BCF    FF2.7
01586:  MOVFF  C25,FAA
0158A:  MOVFF  C24,FA9
0158E:  BCF    FA6.6
01590:  BCF    FA6.7
01592:  BSF    FA6.0
01594:  MOVF   FA8,W
01596:  BTFSC  x26.7
01598:  BSF    FF2.7
0159A:  CLRF   x23
0159C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
0159E:  MOVF   x22,W
015A0:  SUBLW  0D
015A2:  BNZ   15A8
015A4:  MOVF   x23,F
015A6:  BZ    15B2
015A8:  MOVF   x1F,F
015AA:  BNZ   15B2
015AC:  MOVF   x1E,W
015AE:  SUBLW  1E
015B0:  BC    15C4
....................       {
....................          SMS_Massage3[j] = '\0' ; // end string
015B2:  MOVLW  DA
015B4:  ADDWF  x1E,W
015B6:  MOVWF  FE9
015B8:  MOVLW  09
015BA:  ADDWFC x1F,W
015BC:  MOVWF  FEA
015BE:  CLRF   FEF
....................          break;
015C0:  BRA    15E8
....................       }
015C2:  BRA    15D4
....................       else
....................       {
....................          SMS_Massage3[j] = buff;
015C4:  MOVLW  DA
015C6:  ADDWF  x1E,W
015C8:  MOVWF  FE9
015CA:  MOVLW  09
015CC:  ADDWFC x1F,W
015CE:  MOVWF  FEA
015D0:  MOVFF  C22,FEF
....................          
....................       }
015D4:  MOVFF  C1D,03
015D8:  MOVF   x1C,W
015DA:  INCF   x1C,F
015DC:  BTFSC  FD8.2
015DE:  INCF   x1D,F
015E0:  INCF   x1E,F
015E2:  BTFSC  FD8.2
015E4:  INCF   x1F,F
015E6:  BRA    1572
....................    }
....................    
....................    i++;
015E8:  INCF   x1C,F
015EA:  BTFSC  FD8.2
015EC:  INCF   x1D,F
....................    j=0;
015EE:  CLRF   x1F
015F0:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
015F2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
015F4:  MOVLW  5D
015F6:  ADDWF  x1C,W
015F8:  MOVWF  x24
015FA:  MOVLW  00
015FC:  ADDWFC x1D,W
015FE:  MOVWF  x25
01600:  MOVFF  FF2,C26
01604:  BCF    FF2.7
01606:  MOVFF  C25,FAA
0160A:  MOVFF  C24,FA9
0160E:  BCF    FA6.6
01610:  BCF    FA6.7
01612:  BSF    FA6.0
01614:  MOVF   FA8,W
01616:  BTFSC  x26.7
01618:  BSF    FF2.7
0161A:  CLRF   x23
0161C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
0161E:  MOVF   x22,W
01620:  SUBLW  0D
01622:  BNZ   1628
01624:  MOVF   x23,F
01626:  BZ    1632
01628:  MOVF   x1F,F
0162A:  BNZ   1632
0162C:  MOVF   x1E,W
0162E:  SUBLW  1E
01630:  BC    1644
....................       {
....................          SMS_Massage4[j] = '\0' ; // end string
01632:  MOVLW  FA
01634:  ADDWF  x1E,W
01636:  MOVWF  FE9
01638:  MOVLW  09
0163A:  ADDWFC x1F,W
0163C:  MOVWF  FEA
0163E:  CLRF   FEF
....................          break;
01640:  BRA    1668
....................       }
01642:  BRA    1654
....................       else
....................       {
....................          SMS_Massage4[j] = buff;
01644:  MOVLW  FA
01646:  ADDWF  x1E,W
01648:  MOVWF  FE9
0164A:  MOVLW  09
0164C:  ADDWFC x1F,W
0164E:  MOVWF  FEA
01650:  MOVFF  C22,FEF
....................          
....................       }
01654:  MOVFF  C1D,03
01658:  MOVF   x1C,W
0165A:  INCF   x1C,F
0165C:  BTFSC  FD8.2
0165E:  INCF   x1D,F
01660:  INCF   x1E,F
01662:  BTFSC  FD8.2
01664:  INCF   x1F,F
01666:  BRA    15F2
....................    }
....................    
....................    i++;
01668:  INCF   x1C,F
0166A:  BTFSC  FD8.2
0166C:  INCF   x1D,F
....................    j=0;
0166E:  CLRF   x1F
01670:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01672:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01674:  MOVLW  5D
01676:  ADDWF  x1C,W
01678:  MOVWF  x24
0167A:  MOVLW  00
0167C:  ADDWFC x1D,W
0167E:  MOVWF  x25
01680:  MOVFF  FF2,C26
01684:  BCF    FF2.7
01686:  MOVFF  C25,FAA
0168A:  MOVFF  C24,FA9
0168E:  BCF    FA6.6
01690:  BCF    FA6.7
01692:  BSF    FA6.0
01694:  MOVF   FA8,W
01696:  BTFSC  x26.7
01698:  BSF    FF2.7
0169A:  CLRF   x23
0169C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
0169E:  MOVF   x22,W
016A0:  SUBLW  0D
016A2:  BNZ   16A8
016A4:  MOVF   x23,F
016A6:  BZ    16B2
016A8:  MOVF   x1F,F
016AA:  BNZ   16B2
016AC:  MOVF   x1E,W
016AE:  SUBLW  1E
016B0:  BC    16C4
....................       {
....................          SMS_Massage5[j] = '\0' ; // end string
016B2:  MOVLW  1A
016B4:  ADDWF  x1E,W
016B6:  MOVWF  FE9
016B8:  MOVLW  0A
016BA:  ADDWFC x1F,W
016BC:  MOVWF  FEA
016BE:  CLRF   FEF
....................          break;
016C0:  BRA    16E8
....................       }
016C2:  BRA    16D4
....................       else
....................       {
....................          SMS_Massage5[j] = buff;
016C4:  MOVLW  1A
016C6:  ADDWF  x1E,W
016C8:  MOVWF  FE9
016CA:  MOVLW  0A
016CC:  ADDWFC x1F,W
016CE:  MOVWF  FEA
016D0:  MOVFF  C22,FEF
....................          
....................       }
016D4:  MOVFF  C1D,03
016D8:  MOVF   x1C,W
016DA:  INCF   x1C,F
016DC:  BTFSC  FD8.2
016DE:  INCF   x1D,F
016E0:  INCF   x1E,F
016E2:  BTFSC  FD8.2
016E4:  INCF   x1F,F
016E6:  BRA    1672
....................    }
....................    
....................    i++;
016E8:  INCF   x1C,F
016EA:  BTFSC  FD8.2
016EC:  INCF   x1D,F
....................    j=0;
016EE:  CLRF   x1F
016F0:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
016F2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
016F4:  MOVLW  5D
016F6:  ADDWF  x1C,W
016F8:  MOVWF  x24
016FA:  MOVLW  00
016FC:  ADDWFC x1D,W
016FE:  MOVWF  x25
01700:  MOVFF  FF2,C26
01704:  BCF    FF2.7
01706:  MOVFF  C25,FAA
0170A:  MOVFF  C24,FA9
0170E:  BCF    FA6.6
01710:  BCF    FA6.7
01712:  BSF    FA6.0
01714:  MOVF   FA8,W
01716:  BTFSC  x26.7
01718:  BSF    FF2.7
0171A:  CLRF   x23
0171C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
0171E:  MOVF   x22,W
01720:  SUBLW  0D
01722:  BNZ   1728
01724:  MOVF   x23,F
01726:  BZ    1732
01728:  MOVF   x1F,F
0172A:  BNZ   1732
0172C:  MOVF   x1E,W
0172E:  SUBLW  1E
01730:  BC    1744
....................       {
....................          SMS_Massage6[j] = '\0' ; // end string
01732:  MOVLW  3A
01734:  ADDWF  x1E,W
01736:  MOVWF  FE9
01738:  MOVLW  0A
0173A:  ADDWFC x1F,W
0173C:  MOVWF  FEA
0173E:  CLRF   FEF
....................          break;
01740:  BRA    1768
....................       }
01742:  BRA    1754
....................       else
....................       {
....................          SMS_Massage6[j] = buff;
01744:  MOVLW  3A
01746:  ADDWF  x1E,W
01748:  MOVWF  FE9
0174A:  MOVLW  0A
0174C:  ADDWFC x1F,W
0174E:  MOVWF  FEA
01750:  MOVFF  C22,FEF
....................          
....................       }
01754:  MOVFF  C1D,03
01758:  MOVF   x1C,W
0175A:  INCF   x1C,F
0175C:  BTFSC  FD8.2
0175E:  INCF   x1D,F
01760:  INCF   x1E,F
01762:  BTFSC  FD8.2
01764:  INCF   x1F,F
01766:  BRA    16F2
....................    }
....................    
....................    i++;
01768:  INCF   x1C,F
0176A:  BTFSC  FD8.2
0176C:  INCF   x1D,F
....................    j=0;
0176E:  CLRF   x1F
01770:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01772:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01774:  MOVLW  5D
01776:  ADDWF  x1C,W
01778:  MOVWF  x24
0177A:  MOVLW  00
0177C:  ADDWFC x1D,W
0177E:  MOVWF  x25
01780:  MOVFF  FF2,C26
01784:  BCF    FF2.7
01786:  MOVFF  C25,FAA
0178A:  MOVFF  C24,FA9
0178E:  BCF    FA6.6
01790:  BCF    FA6.7
01792:  BSF    FA6.0
01794:  MOVF   FA8,W
01796:  BTFSC  x26.7
01798:  BSF    FF2.7
0179A:  CLRF   x23
0179C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
0179E:  MOVF   x22,W
017A0:  SUBLW  0D
017A2:  BNZ   17A8
017A4:  MOVF   x23,F
017A6:  BZ    17B2
017A8:  MOVF   x1F,F
017AA:  BNZ   17B2
017AC:  MOVF   x1E,W
017AE:  SUBLW  1E
017B0:  BC    17C4
....................       {
....................          SMS_Massage7[j] = '\0' ; // end string
017B2:  MOVLW  5A
017B4:  ADDWF  x1E,W
017B6:  MOVWF  FE9
017B8:  MOVLW  0A
017BA:  ADDWFC x1F,W
017BC:  MOVWF  FEA
017BE:  CLRF   FEF
....................          break;
017C0:  BRA    17E8
....................       }
017C2:  BRA    17D4
....................       else
....................       {
....................          SMS_Massage7[j] = buff;
017C4:  MOVLW  5A
017C6:  ADDWF  x1E,W
017C8:  MOVWF  FE9
017CA:  MOVLW  0A
017CC:  ADDWFC x1F,W
017CE:  MOVWF  FEA
017D0:  MOVFF  C22,FEF
....................          
....................       }
017D4:  MOVFF  C1D,03
017D8:  MOVF   x1C,W
017DA:  INCF   x1C,F
017DC:  BTFSC  FD8.2
017DE:  INCF   x1D,F
017E0:  INCF   x1E,F
017E2:  BTFSC  FD8.2
017E4:  INCF   x1F,F
017E6:  BRA    1772
....................    }
....................    
....................    i++;
017E8:  INCF   x1C,F
017EA:  BTFSC  FD8.2
017EC:  INCF   x1D,F
....................    j=0;
017EE:  CLRF   x1F
017F0:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
017F2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
017F4:  MOVLW  5D
017F6:  ADDWF  x1C,W
017F8:  MOVWF  x24
017FA:  MOVLW  00
017FC:  ADDWFC x1D,W
017FE:  MOVWF  x25
01800:  MOVFF  FF2,C26
01804:  BCF    FF2.7
01806:  MOVFF  C25,FAA
0180A:  MOVFF  C24,FA9
0180E:  BCF    FA6.6
01810:  BCF    FA6.7
01812:  BSF    FA6.0
01814:  MOVF   FA8,W
01816:  BTFSC  x26.7
01818:  BSF    FF2.7
0181A:  CLRF   x23
0181C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
0181E:  MOVF   x22,W
01820:  SUBLW  0D
01822:  BNZ   1828
01824:  MOVF   x23,F
01826:  BZ    1832
01828:  MOVF   x1F,F
0182A:  BNZ   1832
0182C:  MOVF   x1E,W
0182E:  SUBLW  1E
01830:  BC    1844
....................       {
....................          SMS_Massage8[j] = '\0' ; // end string
01832:  MOVLW  7A
01834:  ADDWF  x1E,W
01836:  MOVWF  FE9
01838:  MOVLW  0A
0183A:  ADDWFC x1F,W
0183C:  MOVWF  FEA
0183E:  CLRF   FEF
....................          break;
01840:  BRA    1868
....................       }
01842:  BRA    1854
....................       else
....................       {
....................          SMS_Massage8[j] = buff;
01844:  MOVLW  7A
01846:  ADDWF  x1E,W
01848:  MOVWF  FE9
0184A:  MOVLW  0A
0184C:  ADDWFC x1F,W
0184E:  MOVWF  FEA
01850:  MOVFF  C22,FEF
....................          
....................       }
01854:  MOVFF  C1D,03
01858:  MOVF   x1C,W
0185A:  INCF   x1C,F
0185C:  BTFSC  FD8.2
0185E:  INCF   x1D,F
01860:  INCF   x1E,F
01862:  BTFSC  FD8.2
01864:  INCF   x1F,F
01866:  BRA    17F2
....................    }
....................    
....................    i++;
01868:  INCF   x1C,F
0186A:  BTFSC  FD8.2
0186C:  INCF   x1D,F
....................    j=0;
0186E:  CLRF   x1F
01870:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01872:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01874:  MOVLW  5D
01876:  ADDWF  x1C,W
01878:  MOVWF  x24
0187A:  MOVLW  00
0187C:  ADDWFC x1D,W
0187E:  MOVWF  x25
01880:  MOVFF  FF2,C26
01884:  BCF    FF2.7
01886:  MOVFF  C25,FAA
0188A:  MOVFF  C24,FA9
0188E:  BCF    FA6.6
01890:  BCF    FA6.7
01892:  BSF    FA6.0
01894:  MOVF   FA8,W
01896:  BTFSC  x26.7
01898:  BSF    FF2.7
0189A:  CLRF   x23
0189C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
0189E:  MOVF   x22,W
018A0:  SUBLW  0D
018A2:  BNZ   18A8
018A4:  MOVF   x23,F
018A6:  BZ    18B2
018A8:  MOVF   x1F,F
018AA:  BNZ   18B2
018AC:  MOVF   x1E,W
018AE:  SUBLW  1E
018B0:  BC    18C4
....................       {
....................          SMS_Massage9[j] = '\0' ; // end string
018B2:  MOVLW  9A
018B4:  ADDWF  x1E,W
018B6:  MOVWF  FE9
018B8:  MOVLW  0A
018BA:  ADDWFC x1F,W
018BC:  MOVWF  FEA
018BE:  CLRF   FEF
....................          break;
018C0:  BRA    18E8
....................       }
018C2:  BRA    18D4
....................       else
....................       {
....................          SMS_Massage9[j] = buff;
018C4:  MOVLW  9A
018C6:  ADDWF  x1E,W
018C8:  MOVWF  FE9
018CA:  MOVLW  0A
018CC:  ADDWFC x1F,W
018CE:  MOVWF  FEA
018D0:  MOVFF  C22,FEF
....................          
....................       }
018D4:  MOVFF  C1D,03
018D8:  MOVF   x1C,W
018DA:  INCF   x1C,F
018DC:  BTFSC  FD8.2
018DE:  INCF   x1D,F
018E0:  INCF   x1E,F
018E2:  BTFSC  FD8.2
018E4:  INCF   x1F,F
018E6:  BRA    1872
....................    }
....................    
....................    i++;
018E8:  INCF   x1C,F
018EA:  BTFSC  FD8.2
018EC:  INCF   x1D,F
....................    j=0;
018EE:  CLRF   x1F
018F0:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
018F2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
018F4:  MOVLW  5D
018F6:  ADDWF  x1C,W
018F8:  MOVWF  x24
018FA:  MOVLW  00
018FC:  ADDWFC x1D,W
018FE:  MOVWF  x25
01900:  MOVFF  FF2,C26
01904:  BCF    FF2.7
01906:  MOVFF  C25,FAA
0190A:  MOVFF  C24,FA9
0190E:  BCF    FA6.6
01910:  BCF    FA6.7
01912:  BSF    FA6.0
01914:  MOVF   FA8,W
01916:  BTFSC  x26.7
01918:  BSF    FF2.7
0191A:  CLRF   x23
0191C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
0191E:  MOVF   x22,W
01920:  SUBLW  0D
01922:  BNZ   1928
01924:  MOVF   x23,F
01926:  BZ    1932
01928:  MOVF   x1F,F
0192A:  BNZ   1932
0192C:  MOVF   x1E,W
0192E:  SUBLW  1E
01930:  BC    1944
....................       {
....................          SMS_Massage10[j] = '\0' ; // end string
01932:  MOVLW  BA
01934:  ADDWF  x1E,W
01936:  MOVWF  FE9
01938:  MOVLW  0A
0193A:  ADDWFC x1F,W
0193C:  MOVWF  FEA
0193E:  CLRF   FEF
....................          break;
01940:  BRA    1968
....................       }
01942:  BRA    1954
....................       else
....................       {
....................          SMS_Massage10[j] = buff;
01944:  MOVLW  BA
01946:  ADDWF  x1E,W
01948:  MOVWF  FE9
0194A:  MOVLW  0A
0194C:  ADDWFC x1F,W
0194E:  MOVWF  FEA
01950:  MOVFF  C22,FEF
....................          
....................       }
01954:  MOVFF  C1D,03
01958:  MOVF   x1C,W
0195A:  INCF   x1C,F
0195C:  BTFSC  FD8.2
0195E:  INCF   x1D,F
01960:  INCF   x1E,F
01962:  BTFSC  FD8.2
01964:  INCF   x1F,F
01966:  BRA    18F2
....................    }
....................       
....................    i++;
01968:  INCF   x1C,F
0196A:  BTFSC  FD8.2
0196C:  INCF   x1D,F
....................    j=0;
0196E:  CLRF   x1F
01970:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01972:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01974:  MOVLW  5D
01976:  ADDWF  x1C,W
01978:  MOVWF  x24
0197A:  MOVLW  00
0197C:  ADDWFC x1D,W
0197E:  MOVWF  x25
01980:  MOVFF  FF2,C26
01984:  BCF    FF2.7
01986:  MOVFF  C25,FAA
0198A:  MOVFF  C24,FA9
0198E:  BCF    FA6.6
01990:  BCF    FA6.7
01992:  BSF    FA6.0
01994:  MOVF   FA8,W
01996:  BTFSC  x26.7
01998:  BSF    FF2.7
0199A:  CLRF   x23
0199C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
0199E:  MOVF   x22,W
019A0:  SUBLW  0D
019A2:  BNZ   19A8
019A4:  MOVF   x23,F
019A6:  BZ    19B2
019A8:  MOVF   x1F,F
019AA:  BNZ   19B2
019AC:  MOVF   x1E,W
019AE:  SUBLW  1E
019B0:  BC    19C4
....................       {
....................          SMS_Massage11[j] = '\0' ; // end string
019B2:  MOVLW  DA
019B4:  ADDWF  x1E,W
019B6:  MOVWF  FE9
019B8:  MOVLW  0A
019BA:  ADDWFC x1F,W
019BC:  MOVWF  FEA
019BE:  CLRF   FEF
....................          break;
019C0:  BRA    19E8
....................       }
019C2:  BRA    19D4
....................       else
....................       {
....................          SMS_Massage11[j] = buff;
019C4:  MOVLW  DA
019C6:  ADDWF  x1E,W
019C8:  MOVWF  FE9
019CA:  MOVLW  0A
019CC:  ADDWFC x1F,W
019CE:  MOVWF  FEA
019D0:  MOVFF  C22,FEF
....................          
....................       }
019D4:  MOVFF  C1D,03
019D8:  MOVF   x1C,W
019DA:  INCF   x1C,F
019DC:  BTFSC  FD8.2
019DE:  INCF   x1D,F
019E0:  INCF   x1E,F
019E2:  BTFSC  FD8.2
019E4:  INCF   x1F,F
019E6:  BRA    1972
....................    }
....................       
....................    i++;
019E8:  INCF   x1C,F
019EA:  BTFSC  FD8.2
019EC:  INCF   x1D,F
....................    j=0;
019EE:  CLRF   x1F
019F0:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
019F2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
019F4:  MOVLW  5D
019F6:  ADDWF  x1C,W
019F8:  MOVWF  x24
019FA:  MOVLW  00
019FC:  ADDWFC x1D,W
019FE:  MOVWF  x25
01A00:  MOVFF  FF2,C26
01A04:  BCF    FF2.7
01A06:  MOVFF  C25,FAA
01A0A:  MOVFF  C24,FA9
01A0E:  BCF    FA6.6
01A10:  BCF    FA6.7
01A12:  BSF    FA6.0
01A14:  MOVF   FA8,W
01A16:  BTFSC  x26.7
01A18:  BSF    FF2.7
01A1A:  CLRF   x23
01A1C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
01A1E:  MOVF   x22,W
01A20:  SUBLW  0D
01A22:  BNZ   1A28
01A24:  MOVF   x23,F
01A26:  BZ    1A32
01A28:  MOVF   x1F,F
01A2A:  BNZ   1A32
01A2C:  MOVF   x1E,W
01A2E:  SUBLW  1E
01A30:  BC    1A44
....................       {
....................          SMS_Massage12[j] = '\0' ; // end string
01A32:  MOVLW  FA
01A34:  ADDWF  x1E,W
01A36:  MOVWF  FE9
01A38:  MOVLW  0A
01A3A:  ADDWFC x1F,W
01A3C:  MOVWF  FEA
01A3E:  CLRF   FEF
....................          break;
01A40:  BRA    1A68
....................       }
01A42:  BRA    1A54
....................       else
....................       {
....................          SMS_Massage12[j] = buff;
01A44:  MOVLW  FA
01A46:  ADDWF  x1E,W
01A48:  MOVWF  FE9
01A4A:  MOVLW  0A
01A4C:  ADDWFC x1F,W
01A4E:  MOVWF  FEA
01A50:  MOVFF  C22,FEF
....................          
....................       }
01A54:  MOVFF  C1D,03
01A58:  MOVF   x1C,W
01A5A:  INCF   x1C,F
01A5C:  BTFSC  FD8.2
01A5E:  INCF   x1D,F
01A60:  INCF   x1E,F
01A62:  BTFSC  FD8.2
01A64:  INCF   x1F,F
01A66:  BRA    19F2
....................    }
....................       
....................    i++;
01A68:  INCF   x1C,F
01A6A:  BTFSC  FD8.2
01A6C:  INCF   x1D,F
....................    j=0;
01A6E:  CLRF   x1F
01A70:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01A72:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01A74:  MOVLW  5D
01A76:  ADDWF  x1C,W
01A78:  MOVWF  x24
01A7A:  MOVLW  00
01A7C:  ADDWFC x1D,W
01A7E:  MOVWF  x25
01A80:  MOVFF  FF2,C26
01A84:  BCF    FF2.7
01A86:  MOVFF  C25,FAA
01A8A:  MOVFF  C24,FA9
01A8E:  BCF    FA6.6
01A90:  BCF    FA6.7
01A92:  BSF    FA6.0
01A94:  MOVF   FA8,W
01A96:  BTFSC  x26.7
01A98:  BSF    FF2.7
01A9A:  CLRF   x23
01A9C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
01A9E:  MOVF   x22,W
01AA0:  SUBLW  0D
01AA2:  BNZ   1AA8
01AA4:  MOVF   x23,F
01AA6:  BZ    1AB2
01AA8:  MOVF   x1F,F
01AAA:  BNZ   1AB2
01AAC:  MOVF   x1E,W
01AAE:  SUBLW  1E
01AB0:  BC    1AC4
....................       {
....................          SMS_Massage13[j] = '\0' ; // end string
01AB2:  MOVLW  1A
01AB4:  ADDWF  x1E,W
01AB6:  MOVWF  FE9
01AB8:  MOVLW  0B
01ABA:  ADDWFC x1F,W
01ABC:  MOVWF  FEA
01ABE:  CLRF   FEF
....................          break;
01AC0:  BRA    1AE8
....................       }
01AC2:  BRA    1AD4
....................       else
....................       {
....................          SMS_Massage13[j] = buff;
01AC4:  MOVLW  1A
01AC6:  ADDWF  x1E,W
01AC8:  MOVWF  FE9
01ACA:  MOVLW  0B
01ACC:  ADDWFC x1F,W
01ACE:  MOVWF  FEA
01AD0:  MOVFF  C22,FEF
....................          
....................       }
01AD4:  MOVFF  C1D,03
01AD8:  MOVF   x1C,W
01ADA:  INCF   x1C,F
01ADC:  BTFSC  FD8.2
01ADE:  INCF   x1D,F
01AE0:  INCF   x1E,F
01AE2:  BTFSC  FD8.2
01AE4:  INCF   x1F,F
01AE6:  BRA    1A72
....................    }
....................       
....................    i++;
01AE8:  INCF   x1C,F
01AEA:  BTFSC  FD8.2
01AEC:  INCF   x1D,F
....................    j=0;
01AEE:  CLRF   x1F
01AF0:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01AF2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01AF4:  MOVLW  5D
01AF6:  ADDWF  x1C,W
01AF8:  MOVWF  x24
01AFA:  MOVLW  00
01AFC:  ADDWFC x1D,W
01AFE:  MOVWF  x25
01B00:  MOVFF  FF2,C26
01B04:  BCF    FF2.7
01B06:  MOVFF  C25,FAA
01B0A:  MOVFF  C24,FA9
01B0E:  BCF    FA6.6
01B10:  BCF    FA6.7
01B12:  BSF    FA6.0
01B14:  MOVF   FA8,W
01B16:  BTFSC  x26.7
01B18:  BSF    FF2.7
01B1A:  CLRF   x23
01B1C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
01B1E:  MOVF   x22,W
01B20:  SUBLW  0D
01B22:  BNZ   1B28
01B24:  MOVF   x23,F
01B26:  BZ    1B32
01B28:  MOVF   x1F,F
01B2A:  BNZ   1B32
01B2C:  MOVF   x1E,W
01B2E:  SUBLW  1E
01B30:  BC    1B44
....................       {
....................          SMS_Massage14[j] = '\0' ; // end string
01B32:  MOVLW  3A
01B34:  ADDWF  x1E,W
01B36:  MOVWF  FE9
01B38:  MOVLW  0B
01B3A:  ADDWFC x1F,W
01B3C:  MOVWF  FEA
01B3E:  CLRF   FEF
....................          break;
01B40:  BRA    1B68
....................       }
01B42:  BRA    1B54
....................       else
....................       {
....................          SMS_Massage14[j] = buff;
01B44:  MOVLW  3A
01B46:  ADDWF  x1E,W
01B48:  MOVWF  FE9
01B4A:  MOVLW  0B
01B4C:  ADDWFC x1F,W
01B4E:  MOVWF  FEA
01B50:  MOVFF  C22,FEF
....................          
....................       }
01B54:  MOVFF  C1D,03
01B58:  MOVF   x1C,W
01B5A:  INCF   x1C,F
01B5C:  BTFSC  FD8.2
01B5E:  INCF   x1D,F
01B60:  INCF   x1E,F
01B62:  BTFSC  FD8.2
01B64:  INCF   x1F,F
01B66:  BRA    1AF2
....................    }
....................       
....................    i++;
01B68:  INCF   x1C,F
01B6A:  BTFSC  FD8.2
01B6C:  INCF   x1D,F
....................    j=0;
01B6E:  CLRF   x1F
01B70:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01B72:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01B74:  MOVLW  5D
01B76:  ADDWF  x1C,W
01B78:  MOVWF  x24
01B7A:  MOVLW  00
01B7C:  ADDWFC x1D,W
01B7E:  MOVWF  x25
01B80:  MOVFF  FF2,C26
01B84:  BCF    FF2.7
01B86:  MOVFF  C25,FAA
01B8A:  MOVFF  C24,FA9
01B8E:  BCF    FA6.6
01B90:  BCF    FA6.7
01B92:  BSF    FA6.0
01B94:  MOVF   FA8,W
01B96:  BTFSC  x26.7
01B98:  BSF    FF2.7
01B9A:  CLRF   x23
01B9C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
01B9E:  MOVF   x22,W
01BA0:  SUBLW  0D
01BA2:  BNZ   1BA8
01BA4:  MOVF   x23,F
01BA6:  BZ    1BB2
01BA8:  MOVF   x1F,F
01BAA:  BNZ   1BB2
01BAC:  MOVF   x1E,W
01BAE:  SUBLW  1E
01BB0:  BC    1BC4
....................       {
....................          SMS_Massage15[j] = '\0' ; // end string
01BB2:  MOVLW  5A
01BB4:  ADDWF  x1E,W
01BB6:  MOVWF  FE9
01BB8:  MOVLW  0B
01BBA:  ADDWFC x1F,W
01BBC:  MOVWF  FEA
01BBE:  CLRF   FEF
....................          break;
01BC0:  BRA    1BE8
....................       }
01BC2:  BRA    1BD4
....................       else
....................       {
....................          SMS_Massage15[j] = buff;
01BC4:  MOVLW  5A
01BC6:  ADDWF  x1E,W
01BC8:  MOVWF  FE9
01BCA:  MOVLW  0B
01BCC:  ADDWFC x1F,W
01BCE:  MOVWF  FEA
01BD0:  MOVFF  C22,FEF
....................          
....................       }
01BD4:  MOVFF  C1D,03
01BD8:  MOVF   x1C,W
01BDA:  INCF   x1C,F
01BDC:  BTFSC  FD8.2
01BDE:  INCF   x1D,F
01BE0:  INCF   x1E,F
01BE2:  BTFSC  FD8.2
01BE4:  INCF   x1F,F
01BE6:  BRA    1B72
....................    }
....................       
....................    i++;
01BE8:  INCF   x1C,F
01BEA:  BTFSC  FD8.2
01BEC:  INCF   x1D,F
....................    j=0;
01BEE:  CLRF   x1F
01BF0:  CLRF   x1E
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01BF2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01BF4:  MOVLW  5D
01BF6:  ADDWF  x1C,W
01BF8:  MOVWF  x24
01BFA:  MOVLW  00
01BFC:  ADDWFC x1D,W
01BFE:  MOVWF  x25
01C00:  MOVFF  FF2,C26
01C04:  BCF    FF2.7
01C06:  MOVFF  C25,FAA
01C0A:  MOVFF  C24,FA9
01C0E:  BCF    FA6.6
01C10:  BCF    FA6.7
01C12:  BSF    FA6.0
01C14:  MOVF   FA8,W
01C16:  BTFSC  x26.7
01C18:  BSF    FF2.7
01C1A:  CLRF   x23
01C1C:  MOVWF  x22
....................       
....................       if((buff == 0x0D) || (j>30))
01C1E:  MOVF   x22,W
01C20:  SUBLW  0D
01C22:  BNZ   1C28
01C24:  MOVF   x23,F
01C26:  BZ    1C32
01C28:  MOVF   x1F,F
01C2A:  BNZ   1C32
01C2C:  MOVF   x1E,W
01C2E:  SUBLW  1E
01C30:  BC    1C44
....................       {
....................          SMS_Massage16[j] = '\0' ; // end string
01C32:  MOVLW  7A
01C34:  ADDWF  x1E,W
01C36:  MOVWF  FE9
01C38:  MOVLW  0B
01C3A:  ADDWFC x1F,W
01C3C:  MOVWF  FEA
01C3E:  CLRF   FEF
....................          break;
01C40:  BRA    1C68
....................       }
01C42:  BRA    1C54
....................       else
....................       {
....................          SMS_Massage16[j] = buff;
01C44:  MOVLW  7A
01C46:  ADDWF  x1E,W
01C48:  MOVWF  FE9
01C4A:  MOVLW  0B
01C4C:  ADDWFC x1F,W
01C4E:  MOVWF  FEA
01C50:  MOVFF  C22,FEF
....................          
....................       }
01C54:  MOVFF  C1D,03
01C58:  MOVF   x1C,W
01C5A:  INCF   x1C,F
01C5C:  BTFSC  FD8.2
01C5E:  INCF   x1D,F
01C60:  INCF   x1E,F
01C62:  BTFSC  FD8.2
01C64:  INCF   x1F,F
01C66:  BRA    1BF2
....................    }
01C68:  MOVLB  0
01C6A:  GOTO   8F82 (RETURN)
....................    
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
.................... 
....................    //Data = getc();
....................    //putc(Data);
....................    SBUF = getc();
*
0056A:  BTFSS  F9E.5
0056C:  BRA    056A
0056E:  MOVFF  FAE,2E
....................    checkCommand();
00572:  BRA    02DA
.................... }
.................... 
00574:  BCF    F9E.5
00576:  GOTO   006C
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
0057A:  INCF   19,F
.................... 
....................    if(T_timeout != 0)
0057C:  MOVLB  9
0057E:  MOVF   x85,F
00580:  BZ    0590
....................    {
....................       T_timeout--;
00582:  DECF   x85,F
....................       if(T_timeout == 0)
00584:  MOVF   x85,F
00586:  BNZ   0590
....................       {
....................          //sequence = stop_sq;         //timeout
....................          sequence = end_sq;         //timeout   
00588:  MOVFF  6F,78
....................          output_bit(P485ctrl,0);
0058C:  BCF    F8A.3
0058E:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
00590:  MOVF   1C,F
00592:  BZ    05AC
....................    {
....................       TimeBase1s--;
00594:  DECF   1C,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
00596:  MOVF   1C,F
00598:  BNZ   05AC
....................       {
....................          if(AutoAckDelayTime != 0x00)
0059A:  MOVF   1D,F
0059C:  BZ    05A6
....................          {
....................             AutoAckDelayTime--;
0059E:  DECF   1D,F
....................             if(AutoAckDelayTime == 0x00)
005A0:  MOVF   1D,F
005A2:  BNZ   05A6
....................             {
....................                AutoAckFlag = 1 ;
005A4:  BSF    1A.2
....................             }
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
005A6:  BSF    30.4
....................          TimeBase1s = 100;
005A8:  MOVLW  64
005AA:  MOVWF  1C
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 50)    //500mS
005AC:  MOVF   19,W
005AE:  SUBLW  32
005B0:  BNZ   05DA
....................    {
....................       StatusTime = 0;
005B2:  CLRF   19
....................       if(HearthbeatInd == 0)
005B4:  BTFSC  1A.0
005B6:  BRA    05C0
....................       {
....................          HearthbeatInd = 1;
005B8:  BSF    1A.0
....................          output_bit(Pled,1);
005BA:  BSF    F8A.5
005BC:  BCF    F93.5
....................       }
005BE:  BRA    05C6
....................       else
....................       {
....................          HearthbeatInd = 0;
005C0:  BCF    1A.0
....................          output_bit(Pled,0); 
005C2:  BCF    F8A.5
005C4:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................     if(Test == 1)            //Test function
005C6:  BTFSS  1A.6
005C8:  BRA    05D8
....................    {
....................        if(T_test > 0x00) T_test --;
005CA:  MOVF   2F,F
005CC:  BZ    05D0
005CE:  DECF   2F,F
....................        if(T_test == 0x00) Test_fault = 1;
005D0:  MOVF   2F,F
005D2:  BNZ   05D6
005D4:  BSF    1A.5
....................     }
005D6:  BRA    05DA
....................     else
....................     {
....................        //Test = 0;
....................        T_test = 0x00;
005D8:  CLRF   2F
....................     }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
005DA:  MOVF   1B,F
005DC:  BZ    0604
....................    {
....................       FlashingRateTime--;
005DE:  DECF   1B,F
....................       if(FlashingRateTime == 0)
005E0:  MOVF   1B,F
005E2:  BNZ   05F8
....................       {
....................          outmcp23 = 0xff;
005E4:  SETF   x88
....................          
....................          if(SyncStatus == 0)
005E6:  BTFSC  30.1
005E8:  BRA    05F4
....................          {
....................             if(FlashingFlag == 1)
005EA:  BTFSS  1A.1
005EC:  BRA    05F2
....................             {
....................                FlashingFlag = 0;
005EE:  BCF    1A.1
....................                //output_bit(PSyncS,0);
....................             }
005F0:  BRA    05F4
....................             else
....................             {
.................... 
....................                FlashingFlag = 1;
005F2:  BSF    1A.1
....................                //output_bit(PSyncS,1);
....................             }
....................          }
....................          //FlashingFlag = ~FlashingFlag;
....................          FlashingRateTime = FlashingRate;      //reload value
005F4:  MOVFF  6C,1B
....................       }
.................... 
....................       if(Synctimer != 0x00)
005F8:  MOVF   31,F
005FA:  BZ    0604
....................       {
....................          Synctimer--;
005FC:  DECF   31,F
....................          if(Synctimer == 0x00)
005FE:  MOVF   31,F
00600:  BNZ   0604
....................          {
....................             SyncStatus = 0;
00602:  BCF    30.1
....................          }
....................       }
.................... 
....................    }
....................    
00604:  BCF    F9E.1
00606:  MOVLB  0
00608:  GOTO   006C
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
069C8:  MOVLB  B
069CA:  BTFSS  xA6.0
069CC:  BRA    6AE4
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
069CE:  MOVLW  00
069D0:  BTFSC  x9A.0
069D2:  MOVLW  01
069D4:  MOVLB  C
069D6:  MOVWF  x23
069D8:  MOVLW  00
069DA:  MOVLB  B
069DC:  BTFSC  x9E.0
069DE:  MOVLW  01
069E0:  MOVLB  C
069E2:  XORWF  x23,W
069E4:  SUBLW  01
069E6:  BNZ   69EE
069E8:  MOVLB  B
069EA:  BTFSC  xA0.0
069EC:  BRA    69F4
069EE:  MOVLB  B
069F0:  BTFSS  xAA.0
069F2:  BRA    6ADC
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
069F4:  BTFSC  xA8.0
069F6:  BRA    6ADA
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
069F8:  BTFSC  xAA.0
069FA:  BRA    6A14
069FC:  MOVLB  0
069FE:  MOVF   x6A,W
06A00:  SUBLW  0F
06A02:  BTFSC  FD8.2
06A04:  BRA    6A0A
06A06:  MOVLB  B
06A08:  BRA    6A14
....................             {
....................                TimeBase1s = 100 ;            //reload again
06A0A:  MOVLW  64
06A0C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
06A0E:  MOVFF  6B,1D
06A12:  MOVLB  B
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
06A14:  BSF    xAA.0
....................             if(FlashingFlag == 0)
06A16:  BTFSC  1A.1
06A18:  BRA    6A1E
....................             {
....................                Output.B1 = 0;           //Flash output1
06A1A:  BCF    x9C.0
....................             }
06A1C:  BRA    6A20
....................             else
....................             {
....................                Output.B1 = 1;
06A1E:  BSF    x9C.0
....................             }
.................... 
....................             if (~AutoTestFlag)
06A20:  BTFSC  1A.4
06A22:  BRA    6A40
....................             {
....................                if(OutputBoth.B1 == 0)                  //Both output
06A24:  BTFSC  xA4.0
06A26:  BRA    6A32
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06A28:  BSF    F89.4
06A2A:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06A2C:  BSF    F89.3
06A2E:  BCF    F92.3
....................                }
06A30:  BRA    6A40
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
06A32:  BTFSS  xA2.0
06A34:  BRA    6A3C
06A36:  BSF    F89.4
06A38:  BCF    F92.4
06A3A:  BRA    6A40
....................                   else output_bit(Pbell,1);                          //Bell
06A3C:  BSF    F89.3
06A3E:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending 
....................             if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
06A40:  BTFSC  xB6.0
06A42:  BRA    6ADA
06A44:  BTFSC  30.3
06A46:  BRA    6ADA
06A48:  BTFSC  xA8.0
06A4A:  BRA    6ADA
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
06A4C:  MOVLW  0C
06A4E:  MOVWF  FF6
06A50:  MOVLW  06
06A52:  MOVWF  FF7
06A54:  MOVLB  0
06A56:  CALL   5F7C
....................                putc('\n',CH2);
06A5A:  MOVLW  0A
06A5C:  MOVLB  C
06A5E:  MOVWF  x24
06A60:  MOVLB  0
06A62:  CALL   5F36
....................                delay_ms(10);
06A66:  MOVLW  0A
06A68:  MOVLB  C
06A6A:  MOVWF  x23
06A6C:  MOVLB  0
06A6E:  CALL   06AC
....................             
....................                SendSMS.B1 =1;
06A72:  MOVLB  B
06A74:  BSF    xB6.0
....................                fprintf(CH2,"AT+CMGS=\"");
06A76:  MOVLW  16
06A78:  MOVWF  FF6
06A7A:  MOVLW  06
06A7C:  MOVWF  FF7
06A7E:  MOVLB  0
06A80:  CALL   5F7C
....................                fprintf(CH2,sms_phonenumber);
06A84:  MOVLW  09
06A86:  MOVWF  FEA
06A88:  MOVLW  8B
06A8A:  MOVWF  FE9
06A8C:  CALL   5F9C
....................                
....................                fprintf(CH2,"\"");
06A90:  MOVLW  22
06A92:  MOVLB  C
06A94:  MOVWF  x24
06A96:  MOVLB  0
06A98:  CALL   5F36
....................                putc('\n',CH2);
06A9C:  MOVLW  0A
06A9E:  MOVLB  C
06AA0:  MOVWF  x24
06AA2:  MOVLB  0
06AA4:  CALL   5F36
....................                delay_ms(50);
06AA8:  MOVLW  32
06AAA:  MOVLB  C
06AAC:  MOVWF  x23
06AAE:  MOVLB  0
06AB0:  CALL   06AC
....................               
....................               fprintf(CH2,SMS_Massage1);
06AB4:  MOVLW  09
06AB6:  MOVWF  FEA
06AB8:  MOVLW  9A
06ABA:  MOVWF  FE9
06ABC:  CALL   5F9C
....................               putc('\n',CH2);
06AC0:  MOVLW  0A
06AC2:  MOVLB  C
06AC4:  MOVWF  x24
06AC6:  MOVLB  0
06AC8:  CALL   5F36
....................               putc(26,CH2);
06ACC:  MOVLW  1A
06ACE:  MOVLB  C
06AD0:  MOVWF  x24
06AD2:  MOVLB  0
06AD4:  CALL   5F36
06AD8:  MOVLB  B
....................             }
....................         }
....................       }
06ADA:  BRA    6AE2
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
06ADC:  BTFSS  xA0.0
06ADE:  BRA    6AE2
06AE0:  BCF    xA8.0
....................    }
06AE2:  BRA    6BA8
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
06AE4:  MOVLW  00
06AE6:  BTFSC  x9A.0
06AE8:  MOVLW  01
06AEA:  MOVLB  C
06AEC:  MOVWF  x23
06AEE:  MOVLW  00
06AF0:  MOVLB  B
06AF2:  BTFSC  x9E.0
06AF4:  MOVLW  01
06AF6:  MOVLB  C
06AF8:  XORWF  x23,W
06AFA:  SUBLW  01
06AFC:  BNZ   6BA0
....................       {
....................          Output.B1 = 0;
06AFE:  MOVLB  B
06B00:  BCF    x9C.0
....................          // SMS Sending 
....................          if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
06B02:  BTFSC  xB6.0
06B04:  BRA    6B9C
06B06:  BTFSC  30.3
06B08:  BRA    6B9C
06B0A:  BTFSC  xA8.0
06B0C:  BRA    6B9C
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
06B0E:  MOVLW  20
06B10:  MOVWF  FF6
06B12:  MOVLW  06
06B14:  MOVWF  FF7
06B16:  MOVLB  0
06B18:  CALL   5F7C
....................             putc('\n',CH2);
06B1C:  MOVLW  0A
06B1E:  MOVLB  C
06B20:  MOVWF  x24
06B22:  MOVLB  0
06B24:  CALL   5F36
....................             delay_ms(10);
06B28:  MOVLW  0A
06B2A:  MOVLB  C
06B2C:  MOVWF  x23
06B2E:  MOVLB  0
06B30:  CALL   06AC
....................          
....................             SendSMS.B1 =1;
06B34:  MOVLB  B
06B36:  BSF    xB6.0
....................             fprintf(CH2,"AT+CMGS=\"");
06B38:  MOVLW  2A
06B3A:  MOVWF  FF6
06B3C:  MOVLW  06
06B3E:  MOVWF  FF7
06B40:  MOVLB  0
06B42:  CALL   5F7C
....................             fprintf(CH2,sms_phonenumber);
06B46:  MOVLW  09
06B48:  MOVWF  FEA
06B4A:  MOVLW  8B
06B4C:  MOVWF  FE9
06B4E:  CALL   5F9C
....................             
....................             fprintf(CH2,"\"");
06B52:  MOVLW  22
06B54:  MOVLB  C
06B56:  MOVWF  x24
06B58:  MOVLB  0
06B5A:  CALL   5F36
....................             putc('\n',CH2);
06B5E:  MOVLW  0A
06B60:  MOVLB  C
06B62:  MOVWF  x24
06B64:  MOVLB  0
06B66:  CALL   5F36
....................             delay_ms(50);
06B6A:  MOVLW  32
06B6C:  MOVLB  C
06B6E:  MOVWF  x23
06B70:  MOVLB  0
06B72:  CALL   06AC
....................            
....................            fprintf(CH2,SMS_Massage1);
06B76:  MOVLW  09
06B78:  MOVWF  FEA
06B7A:  MOVLW  9A
06B7C:  MOVWF  FE9
06B7E:  CALL   5F9C
....................            putc('\n',CH2);
06B82:  MOVLW  0A
06B84:  MOVLB  C
06B86:  MOVWF  x24
06B88:  MOVLB  0
06B8A:  CALL   5F36
....................            putc(26,CH2);
06B8E:  MOVLW  1A
06B90:  MOVLB  C
06B92:  MOVWF  x24
06B94:  MOVLB  0
06B96:  CALL   5F36
06B9A:  MOVLB  B
....................          }
....................       }
06B9C:  BRA    6BA8
06B9E:  MOVLB  C
....................       else
....................       {
....................          Output.B1 = 1;
06BA0:  MOVLB  B
06BA2:  BSF    x9C.0
.................... 
....................          SendSMS.B1 =0;
06BA4:  BCF    xB6.0
....................          functointest_f =0;
06BA6:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
06BA8:  BTFSS  xA6.1
06BAA:  BRA    6CC2
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
06BAC:  MOVLW  00
06BAE:  BTFSC  x9A.1
06BB0:  MOVLW  01
06BB2:  MOVLB  C
06BB4:  MOVWF  x23
06BB6:  MOVLW  00
06BB8:  MOVLB  B
06BBA:  BTFSC  x9E.1
06BBC:  MOVLW  01
06BBE:  MOVLB  C
06BC0:  XORWF  x23,W
06BC2:  SUBLW  01
06BC4:  BNZ   6BCC
06BC6:  MOVLB  B
06BC8:  BTFSC  xA0.1
06BCA:  BRA    6BD2
06BCC:  MOVLB  B
06BCE:  BTFSS  xAA.1
06BD0:  BRA    6CBA
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
06BD2:  BTFSC  xA8.1
06BD4:  BRA    6CB8
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
06BD6:  BTFSC  xAA.1
06BD8:  BRA    6BF2
06BDA:  MOVLB  0
06BDC:  MOVF   x6A,W
06BDE:  SUBLW  0F
06BE0:  BTFSC  FD8.2
06BE2:  BRA    6BE8
06BE4:  MOVLB  B
06BE6:  BRA    6BF2
....................             {
....................                TimeBase1s = 100 ;            //reload again
06BE8:  MOVLW  64
06BEA:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
06BEC:  MOVFF  6B,1D
06BF0:  MOVLB  B
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
06BF2:  BSF    xAA.1
....................             if(FlashingFlag == 0)
06BF4:  BTFSC  1A.1
06BF6:  BRA    6BFC
....................             {
....................                Output.B2 = 0;           //Flash output1
06BF8:  BCF    x9C.1
....................             }
06BFA:  BRA    6BFE
....................             else
....................             {
....................                Output.B2 = 1;
06BFC:  BSF    x9C.1
....................             }
.................... 
....................             if (~AutoTestFlag)
06BFE:  BTFSC  1A.4
06C00:  BRA    6C1E
....................             {
....................                if(OutputBoth.B2 == 0)                  //Both output
06C02:  BTFSC  xA4.1
06C04:  BRA    6C10
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06C06:  BSF    F89.4
06C08:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06C0A:  BSF    F89.3
06C0C:  BCF    F92.3
....................                }
06C0E:  BRA    6C1E
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
06C10:  BTFSS  xA2.1
06C12:  BRA    6C1A
06C14:  BSF    F89.4
06C16:  BCF    F92.4
06C18:  BRA    6C1E
....................                   else output_bit(Pbell,1);                          //Bell
06C1A:  BSF    F89.3
06C1C:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
06C1E:  BTFSC  xB6.1
06C20:  BRA    6CB8
06C22:  BTFSC  30.3
06C24:  BRA    6CB8
06C26:  BTFSC  xA8.1
06C28:  BRA    6CB8
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
06C2A:  MOVLW  34
06C2C:  MOVWF  FF6
06C2E:  MOVLW  06
06C30:  MOVWF  FF7
06C32:  MOVLB  0
06C34:  CALL   5F7C
....................                putc('\n',CH2);
06C38:  MOVLW  0A
06C3A:  MOVLB  C
06C3C:  MOVWF  x24
06C3E:  MOVLB  0
06C40:  CALL   5F36
....................                delay_ms(10);
06C44:  MOVLW  0A
06C46:  MOVLB  C
06C48:  MOVWF  x23
06C4A:  MOVLB  0
06C4C:  CALL   06AC
....................                 
....................                SendSMS.B2 =1;
06C50:  MOVLB  B
06C52:  BSF    xB6.1
....................                fprintf(CH2,"AT+CMGS=\"");
06C54:  MOVLW  3E
06C56:  MOVWF  FF6
06C58:  MOVLW  06
06C5A:  MOVWF  FF7
06C5C:  MOVLB  0
06C5E:  CALL   5F7C
....................                fprintf(CH2,sms_phonenumber);
06C62:  MOVLW  09
06C64:  MOVWF  FEA
06C66:  MOVLW  8B
06C68:  MOVWF  FE9
06C6A:  CALL   5F9C
....................                
....................                fprintf(CH2,"\"");
06C6E:  MOVLW  22
06C70:  MOVLB  C
06C72:  MOVWF  x24
06C74:  MOVLB  0
06C76:  CALL   5F36
....................                putc('\n',CH2);
06C7A:  MOVLW  0A
06C7C:  MOVLB  C
06C7E:  MOVWF  x24
06C80:  MOVLB  0
06C82:  CALL   5F36
....................                delay_ms(50);
06C86:  MOVLW  32
06C88:  MOVLB  C
06C8A:  MOVWF  x23
06C8C:  MOVLB  0
06C8E:  CALL   06AC
....................                
....................               fprintf(CH2,SMS_Massage2);
06C92:  MOVLW  09
06C94:  MOVWF  FEA
06C96:  MOVLW  BA
06C98:  MOVWF  FE9
06C9A:  CALL   5F9C
....................               putc('\n',CH2);
06C9E:  MOVLW  0A
06CA0:  MOVLB  C
06CA2:  MOVWF  x24
06CA4:  MOVLB  0
06CA6:  CALL   5F36
....................              putc(26,CH2);
06CAA:  MOVLW  1A
06CAC:  MOVLB  C
06CAE:  MOVWF  x24
06CB0:  MOVLB  0
06CB2:  CALL   5F36
06CB6:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
06CB8:  BRA    6CC0
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
06CBA:  BTFSS  xA0.1
06CBC:  BRA    6CC0
06CBE:  BCF    xA8.1
....................    }
06CC0:  BRA    6D86
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
06CC2:  MOVLW  00
06CC4:  BTFSC  x9A.1
06CC6:  MOVLW  01
06CC8:  MOVLB  C
06CCA:  MOVWF  x23
06CCC:  MOVLW  00
06CCE:  MOVLB  B
06CD0:  BTFSC  x9E.1
06CD2:  MOVLW  01
06CD4:  MOVLB  C
06CD6:  XORWF  x23,W
06CD8:  SUBLW  01
06CDA:  BNZ   6D7E
....................       {
....................          Output.B2 = 0;
06CDC:  MOVLB  B
06CDE:  BCF    x9C.1
....................          // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
06CE0:  BTFSC  xB6.1
06CE2:  BRA    6D7A
06CE4:  BTFSC  30.3
06CE6:  BRA    6D7A
06CE8:  BTFSC  xA8.1
06CEA:  BRA    6D7A
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
06CEC:  MOVLW  48
06CEE:  MOVWF  FF6
06CF0:  MOVLW  06
06CF2:  MOVWF  FF7
06CF4:  MOVLB  0
06CF6:  CALL   5F7C
....................                putc('\n',CH2);
06CFA:  MOVLW  0A
06CFC:  MOVLB  C
06CFE:  MOVWF  x24
06D00:  MOVLB  0
06D02:  CALL   5F36
....................                delay_ms(10);
06D06:  MOVLW  0A
06D08:  MOVLB  C
06D0A:  MOVWF  x23
06D0C:  MOVLB  0
06D0E:  CALL   06AC
....................                 
....................                SendSMS.B2 =1;
06D12:  MOVLB  B
06D14:  BSF    xB6.1
....................                fprintf(CH2,"AT+CMGS=\"");
06D16:  MOVLW  52
06D18:  MOVWF  FF6
06D1A:  MOVLW  06
06D1C:  MOVWF  FF7
06D1E:  MOVLB  0
06D20:  CALL   5F7C
....................                fprintf(CH2,sms_phonenumber);
06D24:  MOVLW  09
06D26:  MOVWF  FEA
06D28:  MOVLW  8B
06D2A:  MOVWF  FE9
06D2C:  CALL   5F9C
....................                
....................                fprintf(CH2,"\"");
06D30:  MOVLW  22
06D32:  MOVLB  C
06D34:  MOVWF  x24
06D36:  MOVLB  0
06D38:  CALL   5F36
....................                putc('\n',CH2);
06D3C:  MOVLW  0A
06D3E:  MOVLB  C
06D40:  MOVWF  x24
06D42:  MOVLB  0
06D44:  CALL   5F36
....................                delay_ms(50);
06D48:  MOVLW  32
06D4A:  MOVLB  C
06D4C:  MOVWF  x23
06D4E:  MOVLB  0
06D50:  CALL   06AC
....................                
....................               fprintf(CH2,SMS_Massage2);
06D54:  MOVLW  09
06D56:  MOVWF  FEA
06D58:  MOVLW  BA
06D5A:  MOVWF  FE9
06D5C:  CALL   5F9C
....................               putc('\n',CH2);
06D60:  MOVLW  0A
06D62:  MOVLB  C
06D64:  MOVWF  x24
06D66:  MOVLB  0
06D68:  CALL   5F36
....................              putc(26,CH2);
06D6C:  MOVLW  1A
06D6E:  MOVLB  C
06D70:  MOVWF  x24
06D72:  MOVLB  0
06D74:  CALL   5F36
06D78:  MOVLB  B
....................             } 
....................       }
06D7A:  BRA    6D86
06D7C:  MOVLB  C
....................       else
....................       {
....................          Output.B2 = 1;
06D7E:  MOVLB  B
06D80:  BSF    x9C.1
....................          SendSMS.B2 =0;
06D82:  BCF    xB6.1
....................          functointest_f =0;
06D84:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
06D86:  BTFSS  xA6.2
06D88:  BRA    6EA0
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
06D8A:  MOVLW  00
06D8C:  BTFSC  x9A.2
06D8E:  MOVLW  01
06D90:  MOVLB  C
06D92:  MOVWF  x23
06D94:  MOVLW  00
06D96:  MOVLB  B
06D98:  BTFSC  x9E.2
06D9A:  MOVLW  01
06D9C:  MOVLB  C
06D9E:  XORWF  x23,W
06DA0:  SUBLW  01
06DA2:  BNZ   6DAA
06DA4:  MOVLB  B
06DA6:  BTFSC  xA0.2
06DA8:  BRA    6DB0
06DAA:  MOVLB  B
06DAC:  BTFSS  xAA.2
06DAE:  BRA    6E98
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
06DB0:  BTFSC  xA8.2
06DB2:  BRA    6E96
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
06DB4:  BTFSC  xAA.2
06DB6:  BRA    6DD0
06DB8:  MOVLB  0
06DBA:  MOVF   x6A,W
06DBC:  SUBLW  0F
06DBE:  BTFSC  FD8.2
06DC0:  BRA    6DC6
06DC2:  MOVLB  B
06DC4:  BRA    6DD0
....................             {
....................                TimeBase1s = 100 ;            //reload again
06DC6:  MOVLW  64
06DC8:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
06DCA:  MOVFF  6B,1D
06DCE:  MOVLB  B
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
06DD0:  BSF    xAA.2
....................             if(FlashingFlag == 0)
06DD2:  BTFSC  1A.1
06DD4:  BRA    6DDA
....................             {
....................                Output.B3 = 0;           //Flash output1
06DD6:  BCF    x9C.2
....................             }
06DD8:  BRA    6DDC
....................             else
....................             {
....................                Output.B3 = 1;
06DDA:  BSF    x9C.2
....................             }
.................... 
....................             if (~AutoTestFlag)
06DDC:  BTFSC  1A.4
06DDE:  BRA    6DFC
....................             {
....................                if(OutputBoth.B3 == 0)                  //Both output
06DE0:  BTFSC  xA4.2
06DE2:  BRA    6DEE
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06DE4:  BSF    F89.4
06DE6:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06DE8:  BSF    F89.3
06DEA:  BCF    F92.3
....................                }
06DEC:  BRA    6DFC
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
06DEE:  BTFSS  xA2.2
06DF0:  BRA    6DF8
06DF2:  BSF    F89.4
06DF4:  BCF    F92.4
06DF6:  BRA    6DFC
....................                   else output_bit(Pbell,1);                          //Bell
06DF8:  BSF    F89.3
06DFA:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
06DFC:  BTFSC  xB6.2
06DFE:  BRA    6E96
06E00:  BTFSC  30.3
06E02:  BRA    6E96
06E04:  BTFSC  xA8.2
06E06:  BRA    6E96
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
06E08:  MOVLW  5C
06E0A:  MOVWF  FF6
06E0C:  MOVLW  06
06E0E:  MOVWF  FF7
06E10:  MOVLB  0
06E12:  CALL   5F7C
....................                putc('\n',CH2);
06E16:  MOVLW  0A
06E18:  MOVLB  C
06E1A:  MOVWF  x24
06E1C:  MOVLB  0
06E1E:  CALL   5F36
....................                delay_ms(10);
06E22:  MOVLW  0A
06E24:  MOVLB  C
06E26:  MOVWF  x23
06E28:  MOVLB  0
06E2A:  CALL   06AC
....................                
....................                SendSMS.B3 =1;
06E2E:  MOVLB  B
06E30:  BSF    xB6.2
....................                fprintf(CH2,"AT+CMGS=\"");
06E32:  MOVLW  66
06E34:  MOVWF  FF6
06E36:  MOVLW  06
06E38:  MOVWF  FF7
06E3A:  MOVLB  0
06E3C:  CALL   5F7C
....................                fprintf(CH2,sms_phonenumber);
06E40:  MOVLW  09
06E42:  MOVWF  FEA
06E44:  MOVLW  8B
06E46:  MOVWF  FE9
06E48:  CALL   5F9C
....................                
....................                fprintf(CH2,"\"");
06E4C:  MOVLW  22
06E4E:  MOVLB  C
06E50:  MOVWF  x24
06E52:  MOVLB  0
06E54:  CALL   5F36
....................                putc('\n',CH2);
06E58:  MOVLW  0A
06E5A:  MOVLB  C
06E5C:  MOVWF  x24
06E5E:  MOVLB  0
06E60:  CALL   5F36
....................                delay_ms(50);
06E64:  MOVLW  32
06E66:  MOVLB  C
06E68:  MOVWF  x23
06E6A:  MOVLB  0
06E6C:  CALL   06AC
....................               
....................               fprintf(CH2,SMS_Massage3);
06E70:  MOVLW  09
06E72:  MOVWF  FEA
06E74:  MOVLW  DA
06E76:  MOVWF  FE9
06E78:  CALL   5F9C
....................               putc('\n',CH2);
06E7C:  MOVLW  0A
06E7E:  MOVLB  C
06E80:  MOVWF  x24
06E82:  MOVLB  0
06E84:  CALL   5F36
....................              putc(26,CH2);
06E88:  MOVLW  1A
06E8A:  MOVLB  C
06E8C:  MOVWF  x24
06E8E:  MOVLB  0
06E90:  CALL   5F36
06E94:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
06E96:  BRA    6E9E
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
06E98:  BTFSS  xA0.2
06E9A:  BRA    6E9E
06E9C:  BCF    xA8.2
....................    }
06E9E:  BRA    6F64
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
06EA0:  MOVLW  00
06EA2:  BTFSC  x9A.2
06EA4:  MOVLW  01
06EA6:  MOVLB  C
06EA8:  MOVWF  x23
06EAA:  MOVLW  00
06EAC:  MOVLB  B
06EAE:  BTFSC  x9E.2
06EB0:  MOVLW  01
06EB2:  MOVLB  C
06EB4:  XORWF  x23,W
06EB6:  SUBLW  01
06EB8:  BNZ   6F5C
....................       {
....................          Output.B3 = 0;
06EBA:  MOVLB  B
06EBC:  BCF    x9C.2
....................          // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
06EBE:  BTFSC  xB6.2
06EC0:  BRA    6F58
06EC2:  BTFSC  30.3
06EC4:  BRA    6F58
06EC6:  BTFSC  xA8.2
06EC8:  BRA    6F58
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
06ECA:  MOVLW  70
06ECC:  MOVWF  FF6
06ECE:  MOVLW  06
06ED0:  MOVWF  FF7
06ED2:  MOVLB  0
06ED4:  CALL   5F7C
....................                putc('\n',CH2);
06ED8:  MOVLW  0A
06EDA:  MOVLB  C
06EDC:  MOVWF  x24
06EDE:  MOVLB  0
06EE0:  CALL   5F36
....................                delay_ms(10);
06EE4:  MOVLW  0A
06EE6:  MOVLB  C
06EE8:  MOVWF  x23
06EEA:  MOVLB  0
06EEC:  CALL   06AC
....................                
....................                SendSMS.B3 =1;
06EF0:  MOVLB  B
06EF2:  BSF    xB6.2
....................                fprintf(CH2,"AT+CMGS=\"");
06EF4:  MOVLW  7A
06EF6:  MOVWF  FF6
06EF8:  MOVLW  06
06EFA:  MOVWF  FF7
06EFC:  MOVLB  0
06EFE:  CALL   5F7C
....................                fprintf(CH2,sms_phonenumber);
06F02:  MOVLW  09
06F04:  MOVWF  FEA
06F06:  MOVLW  8B
06F08:  MOVWF  FE9
06F0A:  CALL   5F9C
....................                
....................                fprintf(CH2,"\"");
06F0E:  MOVLW  22
06F10:  MOVLB  C
06F12:  MOVWF  x24
06F14:  MOVLB  0
06F16:  CALL   5F36
....................                putc('\n',CH2);
06F1A:  MOVLW  0A
06F1C:  MOVLB  C
06F1E:  MOVWF  x24
06F20:  MOVLB  0
06F22:  CALL   5F36
....................                delay_ms(50);
06F26:  MOVLW  32
06F28:  MOVLB  C
06F2A:  MOVWF  x23
06F2C:  MOVLB  0
06F2E:  CALL   06AC
....................               
....................               fprintf(CH2,SMS_Massage3);
06F32:  MOVLW  09
06F34:  MOVWF  FEA
06F36:  MOVLW  DA
06F38:  MOVWF  FE9
06F3A:  CALL   5F9C
....................               putc('\n',CH2);
06F3E:  MOVLW  0A
06F40:  MOVLB  C
06F42:  MOVWF  x24
06F44:  MOVLB  0
06F46:  CALL   5F36
....................              putc(26,CH2);
06F4A:  MOVLW  1A
06F4C:  MOVLB  C
06F4E:  MOVWF  x24
06F50:  MOVLB  0
06F52:  CALL   5F36
06F56:  MOVLB  B
....................             }
....................       }
06F58:  BRA    6F64
06F5A:  MOVLB  C
....................       else
....................       {
....................          Output.B3 = 1;
06F5C:  MOVLB  B
06F5E:  BSF    x9C.2
....................          SendSMS.B3 =0;
06F60:  BCF    xB6.2
....................          functointest_f =0;
06F62:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
06F64:  BTFSS  xA6.3
06F66:  BRA    707E
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
06F68:  MOVLW  00
06F6A:  BTFSC  x9A.3
06F6C:  MOVLW  01
06F6E:  MOVLB  C
06F70:  MOVWF  x23
06F72:  MOVLW  00
06F74:  MOVLB  B
06F76:  BTFSC  x9E.3
06F78:  MOVLW  01
06F7A:  MOVLB  C
06F7C:  XORWF  x23,W
06F7E:  SUBLW  01
06F80:  BNZ   6F88
06F82:  MOVLB  B
06F84:  BTFSC  xA0.3
06F86:  BRA    6F8E
06F88:  MOVLB  B
06F8A:  BTFSS  xAA.3
06F8C:  BRA    7076
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
06F8E:  BTFSC  xA8.3
06F90:  BRA    7074
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
06F92:  BTFSC  xAA.3
06F94:  BRA    6FAE
06F96:  MOVLB  0
06F98:  MOVF   x6A,W
06F9A:  SUBLW  0F
06F9C:  BTFSC  FD8.2
06F9E:  BRA    6FA4
06FA0:  MOVLB  B
06FA2:  BRA    6FAE
....................             {
....................                TimeBase1s = 100 ;            //reload again
06FA4:  MOVLW  64
06FA6:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
06FA8:  MOVFF  6B,1D
06FAC:  MOVLB  B
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
06FAE:  BSF    xAA.3
....................             if(FlashingFlag == 0)
06FB0:  BTFSC  1A.1
06FB2:  BRA    6FB8
....................             {
....................                Output.B4 = 0;           //Flash output1
06FB4:  BCF    x9C.3
....................             }
06FB6:  BRA    6FBA
....................             else
....................             {
....................                Output.B4 = 1;
06FB8:  BSF    x9C.3
....................             }
.................... 
....................             if (~AutoTestFlag)
06FBA:  BTFSC  1A.4
06FBC:  BRA    6FDA
....................             {
....................                if(OutputBoth.B4 == 0)                  //Both output
06FBE:  BTFSC  xA4.3
06FC0:  BRA    6FCC
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06FC2:  BSF    F89.4
06FC4:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06FC6:  BSF    F89.3
06FC8:  BCF    F92.3
....................                }
06FCA:  BRA    6FDA
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
06FCC:  BTFSS  xA2.3
06FCE:  BRA    6FD6
06FD0:  BSF    F89.4
06FD2:  BCF    F92.4
06FD4:  BRA    6FDA
....................                   else output_bit(Pbell,1);                          //Bell
06FD6:  BSF    F89.3
06FD8:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
06FDA:  BTFSC  xB6.3
06FDC:  BRA    7074
06FDE:  BTFSC  30.3
06FE0:  BRA    7074
06FE2:  BTFSC  xA8.3
06FE4:  BRA    7074
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
06FE6:  MOVLW  84
06FE8:  MOVWF  FF6
06FEA:  MOVLW  06
06FEC:  MOVWF  FF7
06FEE:  MOVLB  0
06FF0:  CALL   5F7C
....................                putc('\n',CH2);
06FF4:  MOVLW  0A
06FF6:  MOVLB  C
06FF8:  MOVWF  x24
06FFA:  MOVLB  0
06FFC:  CALL   5F36
....................                delay_ms(10);
07000:  MOVLW  0A
07002:  MOVLB  C
07004:  MOVWF  x23
07006:  MOVLB  0
07008:  CALL   06AC
....................                
....................                SendSMS.B4 =1;
0700C:  MOVLB  B
0700E:  BSF    xB6.3
....................                fprintf(CH2,"AT+CMGS=\"");
07010:  MOVLW  8E
07012:  MOVWF  FF6
07014:  MOVLW  06
07016:  MOVWF  FF7
07018:  MOVLB  0
0701A:  CALL   5F7C
....................                fprintf(CH2,sms_phonenumber);
0701E:  MOVLW  09
07020:  MOVWF  FEA
07022:  MOVLW  8B
07024:  MOVWF  FE9
07026:  CALL   5F9C
....................             
....................                fprintf(CH2,"\"");
0702A:  MOVLW  22
0702C:  MOVLB  C
0702E:  MOVWF  x24
07030:  MOVLB  0
07032:  CALL   5F36
....................                putc('\n',CH2);
07036:  MOVLW  0A
07038:  MOVLB  C
0703A:  MOVWF  x24
0703C:  MOVLB  0
0703E:  CALL   5F36
....................                delay_ms(50);
07042:  MOVLW  32
07044:  MOVLB  C
07046:  MOVWF  x23
07048:  MOVLB  0
0704A:  CALL   06AC
....................               
....................               fprintf(CH2,SMS_Massage4);
0704E:  MOVLW  09
07050:  MOVWF  FEA
07052:  MOVLW  FA
07054:  MOVWF  FE9
07056:  CALL   5F9C
....................               putc('\n',CH2);
0705A:  MOVLW  0A
0705C:  MOVLB  C
0705E:  MOVWF  x24
07060:  MOVLB  0
07062:  CALL   5F36
....................              putc(26,CH2);
07066:  MOVLW  1A
07068:  MOVLB  C
0706A:  MOVWF  x24
0706C:  MOVLB  0
0706E:  CALL   5F36
07072:  MOVLB  B
....................             }
....................           }
.................... 
....................       }
07074:  BRA    707C
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
07076:  BTFSS  xA0.3
07078:  BRA    707C
0707A:  BCF    xA8.3
....................    }
0707C:  BRA    7142
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
0707E:  MOVLW  00
07080:  BTFSC  x9A.3
07082:  MOVLW  01
07084:  MOVLB  C
07086:  MOVWF  x23
07088:  MOVLW  00
0708A:  MOVLB  B
0708C:  BTFSC  x9E.3
0708E:  MOVLW  01
07090:  MOVLB  C
07092:  XORWF  x23,W
07094:  SUBLW  01
07096:  BNZ   713A
....................       {
....................          Output.B4 = 0;
07098:  MOVLB  B
0709A:  BCF    x9C.3
....................          // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
0709C:  BTFSC  xB6.3
0709E:  BRA    7136
070A0:  BTFSC  30.3
070A2:  BRA    7136
070A4:  BTFSC  xA8.3
070A6:  BRA    7136
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
070A8:  MOVLW  98
070AA:  MOVWF  FF6
070AC:  MOVLW  06
070AE:  MOVWF  FF7
070B0:  MOVLB  0
070B2:  CALL   5F7C
....................                putc('\n',CH2);
070B6:  MOVLW  0A
070B8:  MOVLB  C
070BA:  MOVWF  x24
070BC:  MOVLB  0
070BE:  CALL   5F36
....................                delay_ms(10);
070C2:  MOVLW  0A
070C4:  MOVLB  C
070C6:  MOVWF  x23
070C8:  MOVLB  0
070CA:  CALL   06AC
....................                
....................                SendSMS.B4 =1;
070CE:  MOVLB  B
070D0:  BSF    xB6.3
....................                fprintf(CH2,"AT+CMGS=\"");
070D2:  MOVLW  A2
070D4:  MOVWF  FF6
070D6:  MOVLW  06
070D8:  MOVWF  FF7
070DA:  MOVLB  0
070DC:  CALL   5F7C
....................                fprintf(CH2,sms_phonenumber);
070E0:  MOVLW  09
070E2:  MOVWF  FEA
070E4:  MOVLW  8B
070E6:  MOVWF  FE9
070E8:  CALL   5F9C
....................             
....................                fprintf(CH2,"\"");
070EC:  MOVLW  22
070EE:  MOVLB  C
070F0:  MOVWF  x24
070F2:  MOVLB  0
070F4:  CALL   5F36
....................                putc('\n',CH2);
070F8:  MOVLW  0A
070FA:  MOVLB  C
070FC:  MOVWF  x24
070FE:  MOVLB  0
07100:  CALL   5F36
....................                delay_ms(50);
07104:  MOVLW  32
07106:  MOVLB  C
07108:  MOVWF  x23
0710A:  MOVLB  0
0710C:  CALL   06AC
....................               
....................               fprintf(CH2,SMS_Massage4);
07110:  MOVLW  09
07112:  MOVWF  FEA
07114:  MOVLW  FA
07116:  MOVWF  FE9
07118:  CALL   5F9C
....................               putc('\n',CH2);
0711C:  MOVLW  0A
0711E:  MOVLB  C
07120:  MOVWF  x24
07122:  MOVLB  0
07124:  CALL   5F36
....................              putc(26,CH2);
07128:  MOVLW  1A
0712A:  MOVLB  C
0712C:  MOVWF  x24
0712E:  MOVLB  0
07130:  CALL   5F36
07134:  MOVLB  B
....................             }
....................       }
07136:  BRA    7142
07138:  MOVLB  C
....................       else
....................       {
....................          Output.B4 = 1;
0713A:  MOVLB  B
0713C:  BSF    x9C.3
....................          SendSMS.B4 =0;
0713E:  BCF    xB6.3
....................          functointest_f =0;
07140:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
07142:  BTFSS  xA6.4
07144:  BRA    71C2
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
07146:  MOVLW  00
07148:  BTFSC  x9A.4
0714A:  MOVLW  01
0714C:  MOVLB  C
0714E:  MOVWF  x23
07150:  MOVLW  00
07152:  MOVLB  B
07154:  BTFSC  x9E.4
07156:  MOVLW  01
07158:  MOVLB  C
0715A:  XORWF  x23,W
0715C:  SUBLW  01
0715E:  BNZ   7166
07160:  MOVLB  B
07162:  BTFSC  xA0.4
07164:  BRA    716C
07166:  MOVLB  B
07168:  BTFSS  xAA.4
0716A:  BRA    71BA
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
0716C:  BTFSC  xA8.4
0716E:  BRA    71B8
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07170:  BTFSC  xAA.4
07172:  BRA    718C
07174:  MOVLB  0
07176:  MOVF   x6A,W
07178:  SUBLW  0F
0717A:  BTFSC  FD8.2
0717C:  BRA    7182
0717E:  MOVLB  B
07180:  BRA    718C
....................             {
....................                TimeBase1s = 100 ;            //reload again
07182:  MOVLW  64
07184:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07186:  MOVFF  6B,1D
0718A:  MOVLB  B
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
0718C:  BSF    xAA.4
....................             if(FlashingFlag == 0)
0718E:  BTFSC  1A.1
07190:  BRA    7196
....................             {
....................                Output.B5 = 0;           //Flash output1
07192:  BCF    x9C.4
....................             }
07194:  BRA    7198
....................             else
....................             {
....................                Output.B5 = 1;
07196:  BSF    x9C.4
....................             }
.................... 
....................             if (~AutoTestFlag)
07198:  BTFSC  1A.4
0719A:  BRA    71B8
....................             {
....................                if(OutputBoth.B5 == 0)                  //Both output
0719C:  BTFSC  xA4.4
0719E:  BRA    71AA
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
071A0:  BSF    F89.4
071A2:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
071A4:  BSF    F89.3
071A6:  BCF    F92.3
....................                }
071A8:  BRA    71B8
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
071AA:  BTFSS  xA2.4
071AC:  BRA    71B4
071AE:  BSF    F89.4
071B0:  BCF    F92.4
071B2:  BRA    71B8
....................                   else output_bit(Pbell,1);                          //Bell
071B4:  BSF    F89.3
071B6:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
071B8:  BRA    71C0
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
071BA:  BTFSS  xA0.4
071BC:  BRA    71C0
071BE:  BCF    xA8.4
....................    }
071C0:  BRA    71E8
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
071C2:  MOVLW  00
071C4:  BTFSC  x9A.4
071C6:  MOVLW  01
071C8:  MOVLB  C
071CA:  MOVWF  x23
071CC:  MOVLW  00
071CE:  MOVLB  B
071D0:  BTFSC  x9E.4
071D2:  MOVLW  01
071D4:  MOVLB  C
071D6:  XORWF  x23,W
071D8:  SUBLW  01
071DA:  BNZ   71E4
....................       {
....................          Output.B5 = 0;
071DC:  MOVLB  B
071DE:  BCF    x9C.4
....................       }
071E0:  BRA    71E8
071E2:  MOVLB  C
....................       else
....................       {
....................          Output.B5 = 1;
071E4:  MOVLB  B
071E6:  BSF    x9C.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
071E8:  BTFSS  xA6.5
071EA:  BRA    7268
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
071EC:  MOVLW  00
071EE:  BTFSC  x9A.5
071F0:  MOVLW  01
071F2:  MOVLB  C
071F4:  MOVWF  x23
071F6:  MOVLW  00
071F8:  MOVLB  B
071FA:  BTFSC  x9E.5
071FC:  MOVLW  01
071FE:  MOVLB  C
07200:  XORWF  x23,W
07202:  SUBLW  01
07204:  BNZ   720C
07206:  MOVLB  B
07208:  BTFSC  xA0.5
0720A:  BRA    7212
0720C:  MOVLB  B
0720E:  BTFSS  xAA.5
07210:  BRA    7260
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
07212:  BTFSC  xA8.5
07214:  BRA    725E
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07216:  BTFSC  xAA.5
07218:  BRA    7232
0721A:  MOVLB  0
0721C:  MOVF   x6A,W
0721E:  SUBLW  0F
07220:  BTFSC  FD8.2
07222:  BRA    7228
07224:  MOVLB  B
07226:  BRA    7232
....................             {
....................                TimeBase1s = 100 ;            //reload again
07228:  MOVLW  64
0722A:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0722C:  MOVFF  6B,1D
07230:  MOVLB  B
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
07232:  BSF    xAA.5
....................             if(FlashingFlag == 0)
07234:  BTFSC  1A.1
07236:  BRA    723C
....................             {
....................                Output.B6 = 0;           //Flash output1
07238:  BCF    x9C.5
....................             }
0723A:  BRA    723E
....................             else
....................             {
....................                Output.B6 = 1;
0723C:  BSF    x9C.5
....................             }
.................... 
....................             if (~AutoTestFlag)
0723E:  BTFSC  1A.4
07240:  BRA    725E
....................             {
....................                if(OutputBoth.B6 == 0)                  //Both output
07242:  BTFSC  xA4.5
07244:  BRA    7250
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07246:  BSF    F89.4
07248:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0724A:  BSF    F89.3
0724C:  BCF    F92.3
....................                }
0724E:  BRA    725E
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
07250:  BTFSS  xA2.5
07252:  BRA    725A
07254:  BSF    F89.4
07256:  BCF    F92.4
07258:  BRA    725E
....................                   else output_bit(Pbell,1);                          //Bell
0725A:  BSF    F89.3
0725C:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
0725E:  BRA    7266
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
07260:  BTFSS  xA0.5
07262:  BRA    7266
07264:  BCF    xA8.5
....................    }
07266:  BRA    728E
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
07268:  MOVLW  00
0726A:  BTFSC  x9A.5
0726C:  MOVLW  01
0726E:  MOVLB  C
07270:  MOVWF  x23
07272:  MOVLW  00
07274:  MOVLB  B
07276:  BTFSC  x9E.5
07278:  MOVLW  01
0727A:  MOVLB  C
0727C:  XORWF  x23,W
0727E:  SUBLW  01
07280:  BNZ   728A
....................       {
....................          Output.B6 = 0;
07282:  MOVLB  B
07284:  BCF    x9C.5
....................       }
07286:  BRA    728E
07288:  MOVLB  C
....................       else
....................       {
....................          Output.B6 = 1;
0728A:  MOVLB  B
0728C:  BSF    x9C.5
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
0728E:  BTFSS  xA6.6
07290:  BRA    730E
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
07292:  MOVLW  00
07294:  BTFSC  x9A.6
07296:  MOVLW  01
07298:  MOVLB  C
0729A:  MOVWF  x23
0729C:  MOVLW  00
0729E:  MOVLB  B
072A0:  BTFSC  x9E.6
072A2:  MOVLW  01
072A4:  MOVLB  C
072A6:  XORWF  x23,W
072A8:  SUBLW  01
072AA:  BNZ   72B2
072AC:  MOVLB  B
072AE:  BTFSC  xA0.6
072B0:  BRA    72B8
072B2:  MOVLB  B
072B4:  BTFSS  xAA.6
072B6:  BRA    7306
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
072B8:  BTFSC  xA8.6
072BA:  BRA    7304
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
072BC:  BTFSC  xAA.6
072BE:  BRA    72D8
072C0:  MOVLB  0
072C2:  MOVF   x6A,W
072C4:  SUBLW  0F
072C6:  BTFSC  FD8.2
072C8:  BRA    72CE
072CA:  MOVLB  B
072CC:  BRA    72D8
....................             {
....................                TimeBase1s = 100 ;            //reload again
072CE:  MOVLW  64
072D0:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
072D2:  MOVFF  6B,1D
072D6:  MOVLB  B
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
072D8:  BSF    xAA.6
....................             if(FlashingFlag == 0)
072DA:  BTFSC  1A.1
072DC:  BRA    72E2
....................             {
....................                Output.B7 = 0;           //Flash output1
072DE:  BCF    x9C.6
....................             }
072E0:  BRA    72E4
....................             else
....................             {
....................                Output.B7 = 1;
072E2:  BSF    x9C.6
....................             }
.................... 
....................             if (~AutoTestFlag)
072E4:  BTFSC  1A.4
072E6:  BRA    7304
....................             {
....................                if(OutputBoth.B7 == 0)                  //Both output
072E8:  BTFSC  xA4.6
072EA:  BRA    72F6
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
072EC:  BSF    F89.4
072EE:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
072F0:  BSF    F89.3
072F2:  BCF    F92.3
....................                }
072F4:  BRA    7304
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
072F6:  BTFSS  xA2.6
072F8:  BRA    7300
072FA:  BSF    F89.4
072FC:  BCF    F92.4
072FE:  BRA    7304
....................                   else output_bit(Pbell,1);                          //Bell
07300:  BSF    F89.3
07302:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
07304:  BRA    730C
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
07306:  BTFSS  xA0.6
07308:  BRA    730C
0730A:  BCF    xA8.6
....................    }
0730C:  BRA    7334
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
0730E:  MOVLW  00
07310:  BTFSC  x9A.6
07312:  MOVLW  01
07314:  MOVLB  C
07316:  MOVWF  x23
07318:  MOVLW  00
0731A:  MOVLB  B
0731C:  BTFSC  x9E.6
0731E:  MOVLW  01
07320:  MOVLB  C
07322:  XORWF  x23,W
07324:  SUBLW  01
07326:  BNZ   7330
....................       {
....................          Output.B7 = 0;
07328:  MOVLB  B
0732A:  BCF    x9C.6
....................       }
0732C:  BRA    7334
0732E:  MOVLB  C
....................       else
....................       {
....................          Output.B7 = 1;
07330:  MOVLB  B
07332:  BSF    x9C.6
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
07334:  BTFSS  xA6.7
07336:  BRA    73B4
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
07338:  MOVLW  00
0733A:  BTFSC  x9A.7
0733C:  MOVLW  01
0733E:  MOVLB  C
07340:  MOVWF  x23
07342:  MOVLW  00
07344:  MOVLB  B
07346:  BTFSC  x9E.7
07348:  MOVLW  01
0734A:  MOVLB  C
0734C:  XORWF  x23,W
0734E:  SUBLW  01
07350:  BNZ   7358
07352:  MOVLB  B
07354:  BTFSC  xA0.7
07356:  BRA    735E
07358:  MOVLB  B
0735A:  BTFSS  xAA.7
0735C:  BRA    73AC
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
0735E:  BTFSC  xA8.7
07360:  BRA    73AA
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07362:  BTFSC  xAA.7
07364:  BRA    737E
07366:  MOVLB  0
07368:  MOVF   x6A,W
0736A:  SUBLW  0F
0736C:  BTFSC  FD8.2
0736E:  BRA    7374
07370:  MOVLB  B
07372:  BRA    737E
....................             {
....................                TimeBase1s = 100 ;            //reload again
07374:  MOVLW  64
07376:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07378:  MOVFF  6B,1D
0737C:  MOVLB  B
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
0737E:  BSF    xAA.7
....................             if(FlashingFlag == 0)
07380:  BTFSC  1A.1
07382:  BRA    7388
....................             {
....................                Output.B8 = 0;           //Flash output1
07384:  BCF    x9C.7
....................             }
07386:  BRA    738A
....................             else
....................             {
....................                Output.B8 = 1;
07388:  BSF    x9C.7
....................             }
.................... 
....................             if (~AutoTestFlag)
0738A:  BTFSC  1A.4
0738C:  BRA    73AA
....................             {
....................                if(OutputBoth.B8 == 0)                  //Both output
0738E:  BTFSC  xA4.7
07390:  BRA    739C
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07392:  BSF    F89.4
07394:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07396:  BSF    F89.3
07398:  BCF    F92.3
....................                }
0739A:  BRA    73AA
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
0739C:  BTFSS  xA2.7
0739E:  BRA    73A6
073A0:  BSF    F89.4
073A2:  BCF    F92.4
073A4:  BRA    73AA
....................                   else output_bit(Pbell,1);                          //Bell
073A6:  BSF    F89.3
073A8:  BCF    F92.3
....................                }
....................             }
....................        }
.................... 
....................       }
073AA:  BRA    73B2
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
073AC:  BTFSS  xA0.7
073AE:  BRA    73B2
073B0:  BCF    xA8.7
....................    }
073B2:  BRA    73DA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
073B4:  MOVLW  00
073B6:  BTFSC  x9A.7
073B8:  MOVLW  01
073BA:  MOVLB  C
073BC:  MOVWF  x23
073BE:  MOVLW  00
073C0:  MOVLB  B
073C2:  BTFSC  x9E.7
073C4:  MOVLW  01
073C6:  MOVLB  C
073C8:  XORWF  x23,W
073CA:  SUBLW  01
073CC:  BNZ   73D6
....................       {
....................          Output.B8 = 0;
073CE:  MOVLB  B
073D0:  BCF    x9C.7
....................       }
073D2:  BRA    73DA
073D4:  MOVLB  C
....................       else
....................       {
....................          Output.B8 = 1;
073D6:  MOVLB  B
073D8:  BSF    x9C.7
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if(AlarmIndicator.B9 == 1)    // Alarm Function
073DA:  BTFSS  xA7.0
073DC:  BRA    745A
....................    {
....................       if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 1))|| In.B9 == 1)    // alarm1 occure and "Lock type"
073DE:  MOVLW  00
073E0:  BTFSC  x9B.0
073E2:  MOVLW  01
073E4:  MOVLB  C
073E6:  MOVWF  x23
073E8:  MOVLW  00
073EA:  MOVLB  B
073EC:  BTFSC  x9F.0
073EE:  MOVLW  01
073F0:  MOVLB  C
073F2:  XORWF  x23,W
073F4:  SUBLW  01
073F6:  BNZ   73FE
073F8:  MOVLB  B
073FA:  BTFSC  xA1.0
073FC:  BRA    7404
073FE:  MOVLB  B
07400:  BTFSS  xAB.0
07402:  BRA    7452
....................       //if(Inputt.B9 == 0)
....................       {
....................          if(Ack.B9 == 0)
07404:  BTFSC  xA9.0
07406:  BRA    7450
....................          {
....................             if(In.B9 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07408:  BTFSC  xAB.0
0740A:  BRA    7424
0740C:  MOVLB  0
0740E:  MOVF   x6A,W
07410:  SUBLW  0F
07412:  BTFSC  FD8.2
07414:  BRA    741A
07416:  MOVLB  B
07418:  BRA    7424
....................             {
....................                TimeBase1s = 100 ;            //reload again
0741A:  MOVLW  64
0741C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0741E:  MOVFF  6B,1D
07422:  MOVLB  B
....................             }
.................... 
....................             In.B9 = 1;                                 // setbit in1
07424:  BSF    xAB.0
....................             if(FlashingFlag == 0)
07426:  BTFSC  1A.1
07428:  BRA    742E
....................             {
....................                Output.B9 = 0;           //Flash output1
0742A:  BCF    x9D.0
....................             }
0742C:  BRA    7430
....................             else
....................             {
....................                Output.B9 = 1;
0742E:  BSF    x9D.0
....................             }
.................... 
....................             if (~AutoTestFlag)
07430:  BTFSC  1A.4
07432:  BRA    7450
....................             {
....................                if(OutputBoth.B9 == 0)                  //Both output
07434:  BTFSC  xA5.0
07436:  BRA    7442
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07438:  BSF    F89.4
0743A:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0743C:  BSF    F89.3
0743E:  BCF    F92.3
....................                }
07440:  BRA    7450
....................                else
....................                {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
07442:  BTFSS  xA3.0
07444:  BRA    744C
07446:  BSF    F89.4
07448:  BCF    F92.4
0744A:  BRA    7450
....................                   else output_bit(Pbell,1);                          //Bell
0744C:  BSF    F89.3
0744E:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
07450:  BRA    7458
....................       else if(FaultType.B9 == 1) Ack.B9 = 0;
07452:  BTFSS  xA1.0
07454:  BRA    7458
07456:  BCF    xA9.0
....................    }
07458:  BRA    7480
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B9 ^ InputType.B9) == 1)
0745A:  MOVLW  00
0745C:  BTFSC  x9B.0
0745E:  MOVLW  01
07460:  MOVLB  C
07462:  MOVWF  x23
07464:  MOVLW  00
07466:  MOVLB  B
07468:  BTFSC  x9F.0
0746A:  MOVLW  01
0746C:  MOVLB  C
0746E:  XORWF  x23,W
07470:  SUBLW  01
07472:  BNZ   747C
....................       {
....................          Output.B9 = 0;
07474:  MOVLB  B
07476:  BCF    x9D.0
....................       }
07478:  BRA    7480
0747A:  MOVLB  C
....................       else
....................       {
....................          Output.B9 = 1;
0747C:  MOVLB  B
0747E:  BSF    x9D.0
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if(AlarmIndicator.B10 == 1)    // Alarm Function
07480:  BTFSS  xA7.1
07482:  BRA    7500
....................    {
....................       if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 1))|| In.B10 == 1)    // alarm1 occure and "Lock type"
07484:  MOVLW  00
07486:  BTFSC  x9B.1
07488:  MOVLW  01
0748A:  MOVLB  C
0748C:  MOVWF  x23
0748E:  MOVLW  00
07490:  MOVLB  B
07492:  BTFSC  x9F.1
07494:  MOVLW  01
07496:  MOVLB  C
07498:  XORWF  x23,W
0749A:  SUBLW  01
0749C:  BNZ   74A4
0749E:  MOVLB  B
074A0:  BTFSC  xA1.1
074A2:  BRA    74AA
074A4:  MOVLB  B
074A6:  BTFSS  xAB.1
074A8:  BRA    74F8
....................       //if(Inputt.B10 == 0)
....................       {
....................          if(Ack.B10 == 0)
074AA:  BTFSC  xA9.1
074AC:  BRA    74F6
....................          {
....................             if(In.B10 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
074AE:  BTFSC  xAB.1
074B0:  BRA    74CA
074B2:  MOVLB  0
074B4:  MOVF   x6A,W
074B6:  SUBLW  0F
074B8:  BTFSC  FD8.2
074BA:  BRA    74C0
074BC:  MOVLB  B
074BE:  BRA    74CA
....................             {
....................                TimeBase1s = 100 ;            //reload again
074C0:  MOVLW  64
074C2:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
074C4:  MOVFF  6B,1D
074C8:  MOVLB  B
....................             }
.................... 
....................             In.B10 = 1;                                 // setbit in1
074CA:  BSF    xAB.1
....................             if(FlashingFlag == 0)
074CC:  BTFSC  1A.1
074CE:  BRA    74D4
....................             {
....................                Output.B10 = 0;           //Flash output1
074D0:  BCF    x9D.1
....................             }
074D2:  BRA    74D6
....................             else
....................             {
....................                Output.B10 = 1;
074D4:  BSF    x9D.1
....................             }
.................... 
....................             if (~AutoTestFlag)
074D6:  BTFSC  1A.4
074D8:  BRA    74F6
....................             {
....................                if(OutputBoth.B10 == 0)                  //Both output
074DA:  BTFSC  xA5.1
074DC:  BRA    74E8
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
074DE:  BSF    F89.4
074E0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
074E2:  BSF    F89.3
074E4:  BCF    F92.3
....................                }
074E6:  BRA    74F6
....................                else
....................                {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
074E8:  BTFSS  xA3.1
074EA:  BRA    74F2
074EC:  BSF    F89.4
074EE:  BCF    F92.4
074F0:  BRA    74F6
....................                   else output_bit(Pbell,1);                          //Bell
074F2:  BSF    F89.3
074F4:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
074F6:  BRA    74FE
....................       else if(FaultType.B10 == 1) Ack.B10 = 0;
074F8:  BTFSS  xA1.1
074FA:  BRA    74FE
074FC:  BCF    xA9.1
....................    }
074FE:  BRA    7526
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B10 ^ InputType.B10) == 1)
07500:  MOVLW  00
07502:  BTFSC  x9B.1
07504:  MOVLW  01
07506:  MOVLB  C
07508:  MOVWF  x23
0750A:  MOVLW  00
0750C:  MOVLB  B
0750E:  BTFSC  x9F.1
07510:  MOVLW  01
07512:  MOVLB  C
07514:  XORWF  x23,W
07516:  SUBLW  01
07518:  BNZ   7522
....................       {
....................          Output.B10 = 0;
0751A:  MOVLB  B
0751C:  BCF    x9D.1
....................       }
0751E:  BRA    7526
07520:  MOVLB  C
....................       else
....................       {
....................          Output.B10 = 1;
07522:  MOVLB  B
07524:  BSF    x9D.1
....................       }
....................    }
.................... //}
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if(AlarmIndicator.B11 == 1)    // Alarm Function
07526:  BTFSS  xA7.2
07528:  BRA    75A6
....................    {
....................       if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 1))|| In.B11 == 1)    // alarm1 occure and "Lock type"
0752A:  MOVLW  00
0752C:  BTFSC  x9B.2
0752E:  MOVLW  01
07530:  MOVLB  C
07532:  MOVWF  x23
07534:  MOVLW  00
07536:  MOVLB  B
07538:  BTFSC  x9F.2
0753A:  MOVLW  01
0753C:  MOVLB  C
0753E:  XORWF  x23,W
07540:  SUBLW  01
07542:  BNZ   754A
07544:  MOVLB  B
07546:  BTFSC  xA1.2
07548:  BRA    7550
0754A:  MOVLB  B
0754C:  BTFSS  xAB.2
0754E:  BRA    759E
....................       //if(Inputt.B11 == 0)
....................       {
....................          if(Ack.B11 == 0)
07550:  BTFSC  xA9.2
07552:  BRA    759C
....................          {
....................             if(In.B11 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07554:  BTFSC  xAB.2
07556:  BRA    7570
07558:  MOVLB  0
0755A:  MOVF   x6A,W
0755C:  SUBLW  0F
0755E:  BTFSC  FD8.2
07560:  BRA    7566
07562:  MOVLB  B
07564:  BRA    7570
....................             {
....................                TimeBase1s = 100 ;            //reload again
07566:  MOVLW  64
07568:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0756A:  MOVFF  6B,1D
0756E:  MOVLB  B
....................             }
.................... 
....................             In.B11 = 1;                                 // setbit in1
07570:  BSF    xAB.2
....................             if(FlashingFlag == 0)
07572:  BTFSC  1A.1
07574:  BRA    757A
....................             {
....................                Output.B11 = 0;           //Flash output1
07576:  BCF    x9D.2
....................             }
07578:  BRA    757C
....................             else
....................             {
....................                Output.B11 = 1;
0757A:  BSF    x9D.2
....................             }
.................... 
....................             if (~AutoTestFlag)
0757C:  BTFSC  1A.4
0757E:  BRA    759C
....................             {
....................                if(OutputBoth.B11 == 0)                  //Both output
07580:  BTFSC  xA5.2
07582:  BRA    758E
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07584:  BSF    F89.4
07586:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07588:  BSF    F89.3
0758A:  BCF    F92.3
....................                }
0758C:  BRA    759C
....................                else
....................                {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,1);     //Buzzer
0758E:  BTFSS  xA3.2
07590:  BRA    7598
07592:  BSF    F89.4
07594:  BCF    F92.4
07596:  BRA    759C
....................                   else output_bit(Pbell,1);                          //Bell
07598:  BSF    F89.3
0759A:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
0759C:  BRA    75A4
....................       else if(FaultType.B11 == 1) Ack.B11 = 0;
0759E:  BTFSS  xA1.2
075A0:  BRA    75A4
075A2:  BCF    xA9.2
....................    }
075A4:  BRA    75CC
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B11 ^ InputType.B11) == 1)
075A6:  MOVLW  00
075A8:  BTFSC  x9B.2
075AA:  MOVLW  01
075AC:  MOVLB  C
075AE:  MOVWF  x23
075B0:  MOVLW  00
075B2:  MOVLB  B
075B4:  BTFSC  x9F.2
075B6:  MOVLW  01
075B8:  MOVLB  C
075BA:  XORWF  x23,W
075BC:  SUBLW  01
075BE:  BNZ   75C8
....................       {
....................          Output.B11 = 0;
075C0:  MOVLB  B
075C2:  BCF    x9D.2
....................       }
075C4:  BRA    75CC
075C6:  MOVLB  C
....................       else
....................       {
....................          Output.B11 = 1;
075C8:  MOVLB  B
075CA:  BSF    x9D.2
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if(AlarmIndicator.B12 == 1)    // Alarm Function
075CC:  BTFSS  xA7.3
075CE:  BRA    764C
....................    {
....................       if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 1))|| In.B12 == 1)    // alarm1 occure and "Lock type"
075D0:  MOVLW  00
075D2:  BTFSC  x9B.3
075D4:  MOVLW  01
075D6:  MOVLB  C
075D8:  MOVWF  x23
075DA:  MOVLW  00
075DC:  MOVLB  B
075DE:  BTFSC  x9F.3
075E0:  MOVLW  01
075E2:  MOVLB  C
075E4:  XORWF  x23,W
075E6:  SUBLW  01
075E8:  BNZ   75F0
075EA:  MOVLB  B
075EC:  BTFSC  xA1.3
075EE:  BRA    75F6
075F0:  MOVLB  B
075F2:  BTFSS  xAB.3
075F4:  BRA    7644
....................       //if(Inputt.B12 == 0)
....................       {
....................          if(Ack.B12 == 0)
075F6:  BTFSC  xA9.3
075F8:  BRA    7642
....................          {
....................             if(In.B12 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
075FA:  BTFSC  xAB.3
075FC:  BRA    7616
075FE:  MOVLB  0
07600:  MOVF   x6A,W
07602:  SUBLW  0F
07604:  BTFSC  FD8.2
07606:  BRA    760C
07608:  MOVLB  B
0760A:  BRA    7616
....................             {
....................                TimeBase1s = 100 ;            //reload again
0760C:  MOVLW  64
0760E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07610:  MOVFF  6B,1D
07614:  MOVLB  B
....................             }
.................... 
....................             In.B12 = 1;                                 // setbit in1
07616:  BSF    xAB.3
....................             if(FlashingFlag == 0)
07618:  BTFSC  1A.1
0761A:  BRA    7620
....................             {
....................                Output.B12 = 0;           //Flash output1
0761C:  BCF    x9D.3
....................             }
0761E:  BRA    7622
....................             else
....................             {
....................                Output.B12 = 1;
07620:  BSF    x9D.3
....................             }
.................... 
....................             if (~AutoTestFlag)
07622:  BTFSC  1A.4
07624:  BRA    7642
....................             {
....................                if(OutputBoth.B12 == 0)                  //Both output
07626:  BTFSC  xA5.3
07628:  BRA    7634
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0762A:  BSF    F89.4
0762C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0762E:  BSF    F89.3
07630:  BCF    F92.3
....................                }
07632:  BRA    7642
....................                else
....................                {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,1);     //Buzzer
07634:  BTFSS  xA3.3
07636:  BRA    763E
07638:  BSF    F89.4
0763A:  BCF    F92.4
0763C:  BRA    7642
....................                   else output_bit(Pbell,1);                          //Bell
0763E:  BSF    F89.3
07640:  BCF    F92.3
....................                }
....................             }
....................         }
.................... 
....................       }
07642:  BRA    764A
....................       else if(FaultType.B12 == 1) Ack.B12 = 0;
07644:  BTFSS  xA1.3
07646:  BRA    764A
07648:  BCF    xA9.3
....................    }
0764A:  BRA    7672
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B12 ^ InputType.B12) == 1)
0764C:  MOVLW  00
0764E:  BTFSC  x9B.3
07650:  MOVLW  01
07652:  MOVLB  C
07654:  MOVWF  x23
07656:  MOVLW  00
07658:  MOVLB  B
0765A:  BTFSC  x9F.3
0765C:  MOVLW  01
0765E:  MOVLB  C
07660:  XORWF  x23,W
07662:  SUBLW  01
07664:  BNZ   766E
....................       {
....................          Output.B12 = 0;
07666:  MOVLB  B
07668:  BCF    x9D.3
....................       }
0766A:  BRA    7672
0766C:  MOVLB  C
....................       else
....................       {
....................          Output.B12 = 1;
0766E:  MOVLB  B
07670:  BSF    x9D.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if(AlarmIndicator.B13 == 1)    // Alarm Function
07672:  BTFSS  xA7.4
07674:  BRA    76F2
....................    {
....................       if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 1))|| In.B13 == 1)    // alarm1 occure and "Lock type"
07676:  MOVLW  00
07678:  BTFSC  x9B.4
0767A:  MOVLW  01
0767C:  MOVLB  C
0767E:  MOVWF  x23
07680:  MOVLW  00
07682:  MOVLB  B
07684:  BTFSC  x9F.4
07686:  MOVLW  01
07688:  MOVLB  C
0768A:  XORWF  x23,W
0768C:  SUBLW  01
0768E:  BNZ   7696
07690:  MOVLB  B
07692:  BTFSC  xA1.4
07694:  BRA    769C
07696:  MOVLB  B
07698:  BTFSS  xAB.4
0769A:  BRA    76EA
....................       //if(Inputt.B13 == 0)
....................       {
....................          if(Ack.B13 == 0)
0769C:  BTFSC  xA9.4
0769E:  BRA    76E8
....................          {
....................             if(In.B13 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
076A0:  BTFSC  xAB.4
076A2:  BRA    76BC
076A4:  MOVLB  0
076A6:  MOVF   x6A,W
076A8:  SUBLW  0F
076AA:  BTFSC  FD8.2
076AC:  BRA    76B2
076AE:  MOVLB  B
076B0:  BRA    76BC
....................             {
....................                TimeBase1s = 100 ;            //reload again
076B2:  MOVLW  64
076B4:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
076B6:  MOVFF  6B,1D
076BA:  MOVLB  B
....................             }
.................... 
....................             In.B13 = 1;                                 // setbit in1
076BC:  BSF    xAB.4
....................             if(FlashingFlag == 0)
076BE:  BTFSC  1A.1
076C0:  BRA    76C6
....................             {
....................                Output.B13 = 0;           //Flash output1
076C2:  BCF    x9D.4
....................             }
076C4:  BRA    76C8
....................             else
....................             {
....................                Output.B13 = 1;
076C6:  BSF    x9D.4
....................             }
.................... 
....................             if (~AutoTestFlag)
076C8:  BTFSC  1A.4
076CA:  BRA    76E8
....................             {
....................                if(OutputBoth.B13 == 0)                  //Both output
076CC:  BTFSC  xA5.4
076CE:  BRA    76DA
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
076D0:  BSF    F89.4
076D2:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
076D4:  BSF    F89.3
076D6:  BCF    F92.3
....................                }
076D8:  BRA    76E8
....................                else
....................                {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,1);     //Buzzer
076DA:  BTFSS  xA3.4
076DC:  BRA    76E4
076DE:  BSF    F89.4
076E0:  BCF    F92.4
076E2:  BRA    76E8
....................                   else output_bit(Pbell,1);                          //Bell
076E4:  BSF    F89.3
076E6:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
076E8:  BRA    76F0
....................       else if(FaultType.B13 == 1) Ack.B13 = 0;
076EA:  BTFSS  xA1.4
076EC:  BRA    76F0
076EE:  BCF    xA9.4
....................    }
076F0:  BRA    7718
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B13 ^ InputType.B13) == 1)
076F2:  MOVLW  00
076F4:  BTFSC  x9B.4
076F6:  MOVLW  01
076F8:  MOVLB  C
076FA:  MOVWF  x23
076FC:  MOVLW  00
076FE:  MOVLB  B
07700:  BTFSC  x9F.4
07702:  MOVLW  01
07704:  MOVLB  C
07706:  XORWF  x23,W
07708:  SUBLW  01
0770A:  BNZ   7714
....................       {
....................          Output.B13 = 0;
0770C:  MOVLB  B
0770E:  BCF    x9D.4
....................       }
07710:  BRA    7718
07712:  MOVLB  C
....................       else
....................       {
....................          Output.B13 = 1;
07714:  MOVLB  B
07716:  BSF    x9D.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if(AlarmIndicator.B14 == 1)    // Alarm Function
07718:  BTFSS  xA7.5
0771A:  BRA    7798
....................    {
....................       if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 1))|| In.B14 == 1)    // alarm1 occure and "Lock type"
0771C:  MOVLW  00
0771E:  BTFSC  x9B.5
07720:  MOVLW  01
07722:  MOVLB  C
07724:  MOVWF  x23
07726:  MOVLW  00
07728:  MOVLB  B
0772A:  BTFSC  x9F.5
0772C:  MOVLW  01
0772E:  MOVLB  C
07730:  XORWF  x23,W
07732:  SUBLW  01
07734:  BNZ   773C
07736:  MOVLB  B
07738:  BTFSC  xA1.5
0773A:  BRA    7742
0773C:  MOVLB  B
0773E:  BTFSS  xAB.5
07740:  BRA    7790
....................       //if(Inputt.B14 == 0)
....................       {
....................          if(Ack.B14 == 0)
07742:  BTFSC  xA9.5
07744:  BRA    778E
....................          {
....................             if(In.B14 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07746:  BTFSC  xAB.5
07748:  BRA    7762
0774A:  MOVLB  0
0774C:  MOVF   x6A,W
0774E:  SUBLW  0F
07750:  BTFSC  FD8.2
07752:  BRA    7758
07754:  MOVLB  B
07756:  BRA    7762
....................             {
....................                TimeBase1s = 100 ;            //reload again
07758:  MOVLW  64
0775A:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0775C:  MOVFF  6B,1D
07760:  MOVLB  B
....................             }
.................... 
....................             In.B14 = 1;                                 // setbit in1
07762:  BSF    xAB.5
....................             if(FlashingFlag == 0)
07764:  BTFSC  1A.1
07766:  BRA    776C
....................             {
....................                Output.B14 = 0;           //Flash output1
07768:  BCF    x9D.5
....................             }
0776A:  BRA    776E
....................             else
....................             {
....................                Output.B14 = 1;
0776C:  BSF    x9D.5
....................             }
.................... 
....................             if (~AutoTestFlag)
0776E:  BTFSC  1A.4
07770:  BRA    778E
....................             {
....................                if(OutputBoth.B14 == 0)                  //Both output
07772:  BTFSC  xA5.5
07774:  BRA    7780
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07776:  BSF    F89.4
07778:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0777A:  BSF    F89.3
0777C:  BCF    F92.3
....................                }
0777E:  BRA    778E
....................                else
....................                {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,1);     //Buzzer
07780:  BTFSS  xA3.5
07782:  BRA    778A
07784:  BSF    F89.4
07786:  BCF    F92.4
07788:  BRA    778E
....................                   else output_bit(Pbell,1);                          //Bell
0778A:  BSF    F89.3
0778C:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
0778E:  BRA    7796
....................       else if(FaultType.B14 == 1) Ack.B14 = 0;
07790:  BTFSS  xA1.5
07792:  BRA    7796
07794:  BCF    xA9.5
....................    }
07796:  BRA    77BE
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B14 ^ InputType.B14) == 1)
07798:  MOVLW  00
0779A:  BTFSC  x9B.5
0779C:  MOVLW  01
0779E:  MOVLB  C
077A0:  MOVWF  x23
077A2:  MOVLW  00
077A4:  MOVLB  B
077A6:  BTFSC  x9F.5
077A8:  MOVLW  01
077AA:  MOVLB  C
077AC:  XORWF  x23,W
077AE:  SUBLW  01
077B0:  BNZ   77BA
....................       {
....................          Output.B14 = 0;
077B2:  MOVLB  B
077B4:  BCF    x9D.5
....................       }
077B6:  BRA    77BE
077B8:  MOVLB  C
....................       else
....................       {
....................          Output.B14 = 1;
077BA:  MOVLB  B
077BC:  BSF    x9D.5
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if(AlarmIndicator.B15 == 1)    // Alarm Function
077BE:  BTFSS  xA7.6
077C0:  BRA    783E
....................    {
....................       if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 1))|| In.B15 == 1)    // alarm1 occure and "Lock type"
077C2:  MOVLW  00
077C4:  BTFSC  x9B.6
077C6:  MOVLW  01
077C8:  MOVLB  C
077CA:  MOVWF  x23
077CC:  MOVLW  00
077CE:  MOVLB  B
077D0:  BTFSC  x9F.6
077D2:  MOVLW  01
077D4:  MOVLB  C
077D6:  XORWF  x23,W
077D8:  SUBLW  01
077DA:  BNZ   77E2
077DC:  MOVLB  B
077DE:  BTFSC  xA1.6
077E0:  BRA    77E8
077E2:  MOVLB  B
077E4:  BTFSS  xAB.6
077E6:  BRA    7836
....................       //if(Inputt.B15 == 0)
....................       {
....................          if(Ack.B15 == 0)
077E8:  BTFSC  xA9.6
077EA:  BRA    7834
....................          {
....................             if(In.B15 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
077EC:  BTFSC  xAB.6
077EE:  BRA    7808
077F0:  MOVLB  0
077F2:  MOVF   x6A,W
077F4:  SUBLW  0F
077F6:  BTFSC  FD8.2
077F8:  BRA    77FE
077FA:  MOVLB  B
077FC:  BRA    7808
....................             {
....................                TimeBase1s = 100 ;            //reload again
077FE:  MOVLW  64
07800:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07802:  MOVFF  6B,1D
07806:  MOVLB  B
....................             }
.................... 
....................             In.B15 = 1;                                 // setbit in1
07808:  BSF    xAB.6
....................             if(FlashingFlag == 0)
0780A:  BTFSC  1A.1
0780C:  BRA    7812
....................             {
....................                Output.B15 = 0;           //Flash output1
0780E:  BCF    x9D.6
....................             }
07810:  BRA    7814
....................             else
....................             {
....................                Output.B15 = 1;
07812:  BSF    x9D.6
....................             }
.................... 
....................             if (~AutoTestFlag)
07814:  BTFSC  1A.4
07816:  BRA    7834
....................             {
....................                if(OutputBoth.B15 == 0)                  //Both output
07818:  BTFSC  xA5.6
0781A:  BRA    7826
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0781C:  BSF    F89.4
0781E:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07820:  BSF    F89.3
07822:  BCF    F92.3
....................                }
07824:  BRA    7834
....................                else
....................                {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,1);     //Buzzer
07826:  BTFSS  xA3.6
07828:  BRA    7830
0782A:  BSF    F89.4
0782C:  BCF    F92.4
0782E:  BRA    7834
....................                   else output_bit(Pbell,1);                          //Bell
07830:  BSF    F89.3
07832:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
07834:  BRA    783C
....................       else if(FaultType.B15 == 1) Ack.B15 = 0;
07836:  BTFSS  xA1.6
07838:  BRA    783C
0783A:  BCF    xA9.6
....................    }
0783C:  BRA    7864
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B15 ^ InputType.B15) == 1)
0783E:  MOVLW  00
07840:  BTFSC  x9B.6
07842:  MOVLW  01
07844:  MOVLB  C
07846:  MOVWF  x23
07848:  MOVLW  00
0784A:  MOVLB  B
0784C:  BTFSC  x9F.6
0784E:  MOVLW  01
07850:  MOVLB  C
07852:  XORWF  x23,W
07854:  SUBLW  01
07856:  BNZ   7860
....................       {
....................          Output.B15 = 0;
07858:  MOVLB  B
0785A:  BCF    x9D.6
....................       }
0785C:  BRA    7864
0785E:  MOVLB  C
....................       else
....................       {
....................          Output.B15 = 1;
07860:  MOVLB  B
07862:  BSF    x9D.6
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if(AlarmIndicator.B16 == 1)    // Alarm Function
07864:  BTFSS  xA7.7
07866:  BRA    78E4
....................    {
....................       if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 1))|| In.B16 == 1)    // alarm1 occure and "Lock type"
07868:  MOVLW  00
0786A:  BTFSC  x9B.7
0786C:  MOVLW  01
0786E:  MOVLB  C
07870:  MOVWF  x23
07872:  MOVLW  00
07874:  MOVLB  B
07876:  BTFSC  x9F.7
07878:  MOVLW  01
0787A:  MOVLB  C
0787C:  XORWF  x23,W
0787E:  SUBLW  01
07880:  BNZ   7888
07882:  MOVLB  B
07884:  BTFSC  xA1.7
07886:  BRA    788E
07888:  MOVLB  B
0788A:  BTFSS  xAB.7
0788C:  BRA    78DC
....................       //if(Inputt.B16 == 0)
....................       {
....................          if(Ack.B16 == 0)
0788E:  BTFSC  xA9.7
07890:  BRA    78DA
....................          {
....................             if(In.B16 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07892:  BTFSC  xAB.7
07894:  BRA    78AE
07896:  MOVLB  0
07898:  MOVF   x6A,W
0789A:  SUBLW  0F
0789C:  BTFSC  FD8.2
0789E:  BRA    78A4
078A0:  MOVLB  B
078A2:  BRA    78AE
....................             {
....................                TimeBase1s = 100 ;            //reload again
078A4:  MOVLW  64
078A6:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
078A8:  MOVFF  6B,1D
078AC:  MOVLB  B
....................             }
.................... 
....................             In.B16 = 1;                                 // setbit in1
078AE:  BSF    xAB.7
....................             if(FlashingFlag == 0)
078B0:  BTFSC  1A.1
078B2:  BRA    78B8
....................             {
....................                Output.B16 = 0;           //Flash output1
078B4:  BCF    x9D.7
....................             }
078B6:  BRA    78BA
....................             else
....................             {
....................                Output.B16 = 1;
078B8:  BSF    x9D.7
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
078BA:  BTFSC  1A.4
078BC:  BRA    78DA
....................             {
....................                if(OutputBoth.B16 == 0)                  //Both output
078BE:  BTFSC  xA5.7
078C0:  BRA    78CC
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
078C2:  BSF    F89.4
078C4:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
078C6:  BSF    F89.3
078C8:  BCF    F92.3
....................                }
078CA:  BRA    78DA
....................                else
....................                {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,1);     //Buzzer
078CC:  BTFSS  xA3.7
078CE:  BRA    78D6
078D0:  BSF    F89.4
078D2:  BCF    F92.4
078D4:  BRA    78DA
....................                   else output_bit(Pbell,1);                          //Bell
078D6:  BSF    F89.3
078D8:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
078DA:  BRA    78E2
....................       else if(FaultType.B16 == 1) Ack.B16 = 0;
078DC:  BTFSS  xA1.7
078DE:  BRA    78E2
078E0:  BCF    xA9.7
....................    }
078E2:  BRA    790A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B16 ^ InputType.B16) == 1)
078E4:  MOVLW  00
078E6:  BTFSC  x9B.7
078E8:  MOVLW  01
078EA:  MOVLB  C
078EC:  MOVWF  x23
078EE:  MOVLW  00
078F0:  MOVLB  B
078F2:  BTFSC  x9F.7
078F4:  MOVLW  01
078F6:  MOVLB  C
078F8:  XORWF  x23,W
078FA:  SUBLW  01
078FC:  BNZ   7906
....................       {
....................          Output.B16 = 0;
078FE:  MOVLB  B
07900:  BCF    x9D.7
....................       }
07902:  BRA    790A
07904:  MOVLB  C
....................       else
....................       {
....................          Output.B16 = 1;
07906:  MOVLB  B
07908:  BSF    x9D.7
....................       }
....................    }
.................... //}
.................... /*
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input17
....................    
....................    if(AlarmIndicator.B17 == 1)    // Alarm Function
....................    {
....................       if((((Inputt.B17 ^ InputType.B17) == 1) && (FaultType.B17 == 1))|| In.B17 == 1)    // alarm1 occure and "Lock type"
....................       //if(Inputt.B17 == 0)
....................       {
....................          if(Ack.B17 == 0)
....................          {
....................             if(In.B17 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
....................             {
....................                TimeBase1s = 100 ;            //reload again
....................                AutoAckDelayTime = AutoAckTime ;
....................             }
.................... 
....................             In.B17 = 1;                                 // setbit in1
....................             if(FlashingFlag == 0)
....................             {
....................                Output.B17 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B17 = 1;
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
....................             {
....................                if(OutputBoth.B17 == 0)                  //Both output
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
....................                   output_bit(Pbell,1);     //Bell
....................                }
....................                else
....................                {
....................                   if(OutputType.B17 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                   else output_bit(Pbell,1);                          //Bell
....................                }
....................             }
....................           }
.................... 
....................       }
....................       else if(FaultType.B17 == 1) Ack.B17 = 0;
....................    }
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B17 ^ InputType.B17) == 1)
....................       {
....................          Output.B17 = 0;
....................       }
....................       else
....................       {
....................          Output.B17 = 1;
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... //input18
....................    if(AlarmIndicator.B18 == 1)    // Alarm Function
....................    {
....................       if((((Inputt.B18 ^ InputType.B18) == 1) && (FaultType.B18 == 1))|| In.B18 == 1)    // alarm1 occure and "Lock type"
....................       //if(Inputt.B18 == 0)
....................       {
....................          if(Ack.B18 == 0)
....................          {
....................             if(In.B18 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
....................             {
....................                TimeBase1s = 100 ;            //reload again
....................                AutoAckDelayTime = AutoAckTime ;
....................             }
.................... 
....................             In.B18 = 1;                                 // setbit in1
....................             if(FlashingFlag == 0)
....................             {
....................                Output.B18 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B18 = 1;
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
....................             {
....................                if(OutputBoth.B18 == 0)                  //Both output
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
....................                   output_bit(Pbell,1);     //Bell
....................                }
....................                else
....................                {
....................                   if(OutputType.B18 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                   else output_bit(Pbell,1);                          //Bell
....................                }
....................             }
....................           }
.................... 
....................       }
....................       else if(FaultType.B18 == 1) Ack.B18 = 0;
....................    }
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B18 ^ InputType.B18) == 1)
....................       {
....................          Output.B18 = 0;
....................       }
....................       else
....................       {
....................          Output.B18 = 1;
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input19
....................    if(AlarmIndicator.B19 == 1)    // Alarm Function
....................    {
....................       if((((Inputt.B19 ^ InputType.B19) == 1) && (FaultType.B19 == 1))|| In.B19 == 1)    // alarm1 occure and "Lock type"
....................       //if(Inputt.B19 == 0)
....................       {
....................          if(Ack.B19 == 0)
....................          {
....................             if(In.B19 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
....................             {
....................                TimeBase1s = 100 ;            //reload again
....................                AutoAckDelayTime = AutoAckTime ;
....................             }
.................... 
....................             In.B19 = 1;                                 // setbit in1
....................             if(FlashingFlag == 0)
....................             {
....................                Output.B19 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B19 = 1;
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
....................             {
....................                if(OutputBoth.B19 == 0)                  //Both output
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
....................                   output_bit(Pbell,1);     //Bell
....................                }
....................                else
....................                {
....................                   if(OutputType.B19 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                   else output_bit(Pbell,1);                          //Bell
....................                }
....................             }
....................           }
.................... 
....................       }
....................       else if(FaultType.B19 == 1) Ack.B19 = 0;
....................    }
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B19 ^ InputType.B19) == 1)
....................       {
....................          Output.B19 = 0;
....................       }
....................       else
....................       {
....................          Output.B19 = 1;
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input20
....................    if(AlarmIndicator.B20 == 1)    // Alarm Function
....................    {
....................       if((((Inputt.B20 ^ InputType.B20) == 1) && (FaultType.B20 == 1))|| In.B20 == 1)    // alarm1 occure and "Lock type"
....................       //if(Inputt.B18 == 0)
....................       {
....................          if(Ack.B20 == 0)
....................          {
....................             if(In.B20 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
....................             {
....................                TimeBase1s = 100 ;            //reload again
....................                AutoAckDelayTime = AutoAckTime ;
....................             }
.................... 
....................             In.B20 = 1;                                 // setbit in1
....................             if(FlashingFlag == 0)
....................             {
....................                Output.B20 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B20 = 1;
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
....................             {
....................                if(OutputBoth.B20 == 0)                  //Both output
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
....................                   output_bit(Pbell,1);     //Bell
....................                }
....................                else
....................                {
....................                   if(OutputType.B20 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                   else output_bit(Pbell,1);                          //Bell
....................                }
....................             }
....................           }
.................... 
....................       }
....................       else if(FaultType.B20 == 1) Ack.B20 = 0;
....................    }
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B20 ^ InputType.B20) == 1)
....................       {
....................          Output.B20 = 0;
....................       }
....................       else
....................       {
....................          Output.B20 = 1;
....................       }
....................    }
....................  */  
.................... //}
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
.................... 
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// AUTO RESET ///////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0790A:  MOVLW  00
0790C:  BTFSC  x9A.0
0790E:  MOVLW  01
07910:  MOVLB  C
07912:  MOVWF  x23
07914:  MOVLW  00
07916:  MOVLB  B
07918:  BTFSC  x9E.0
0791A:  MOVLW  01
0791C:  MOVLB  C
0791E:  XORWF  x23,W
07920:  SUBLW  01
07922:  BNZ   792C
07924:  MOVLB  B
07926:  BTFSS  xA0.0
07928:  BRA    7932
0792A:  MOVLB  C
0792C:  BTFSS  1A.5
0792E:  BRA    798E
07930:  MOVLB  B
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
07932:  BTFSC  xAC.0
07934:  BRA    7952
07936:  MOVLB  0
07938:  MOVF   x6A,W
0793A:  SUBLW  0F
0793C:  BTFSC  FD8.2
0793E:  BRA    7944
07940:  MOVLB  B
07942:  BRA    7952
07944:  MOVLB  B
07946:  BTFSC  xA8.0
07948:  BRA    7952
....................       {
....................             TimeBase1s = 100 ;            //reload again
0794A:  MOVLW  64
0794C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0794E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B1 = 1;
07952:  BSF    xAC.0
....................       if(Ack.B1 == 0)
07954:  BTFSC  xA8.0
07956:  BRA    7986
....................       {
....................          if(FlashingFlag == 0)
07958:  BTFSC  1A.1
0795A:  BRA    7960
....................             {
....................                Output.B1 = 0;           //Flash output1
0795C:  BCF    x9C.0
....................             }
0795E:  BRA    7962
....................             else
....................             {
....................                Output.B1 = 1;
07960:  BSF    x9C.0
....................             }
....................          if (~AutoTestFlag)
07962:  BTFSC  1A.4
07964:  BRA    7986
....................          {
....................             if(AlarmIndicator.B1 == 1){
07966:  BTFSS  xA6.0
07968:  BRA    7986
....................                 if(OutputBoth.B1 == 0)        //Both output
0796A:  BTFSC  xA4.0
0796C:  BRA    7978
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0796E:  BSF    F89.4
07970:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07972:  BSF    F89.3
07974:  BCF    F92.3
....................                 }
07976:  BRA    7986
....................                 else
....................                 {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
07978:  BTFSS  xA2.0
0797A:  BRA    7982
0797C:  BSF    F89.4
0797E:  BCF    F92.4
07980:  BRA    7986
....................                   else output_bit(Pbell,1);                          //Bell
07982:  BSF    F89.3
07984:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
07986:  MOVLW  01
07988:  MOVLB  C
0798A:  MOVWF  x17
....................    }
0798C:  BRA    7A38
....................    else if(FaultType.B1 == 0)
0798E:  MOVLB  B
07990:  BTFSC  xA0.0
07992:  BRA    7A36
....................    {
....................       In2.B1 = 0x00;
07994:  BCF    xAC.0
....................       Ack.B1 = 0;
07996:  BCF    xA8.0
....................       Output.B1 = 1;      //Off LED
07998:  BSF    x9C.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0)&& inputflag ==0)      //If Buzzer or Both
0799A:  BTFSC  xA2.0
0799C:  BRA    79A2
0799E:  BTFSC  xA4.0
079A0:  BRA    79C4
079A2:  MOVLB  C
079A4:  MOVF   x17,F
079A6:  BTFSC  FD8.2
079A8:  BRA    79AE
079AA:  MOVLB  B
079AC:  BRA    79C4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
079AE:  MOVLW  01
079B0:  MOVWF  x22
079B2:  MOVLB  0
079B4:  CALL   5FC0
079B8:  DECFSZ 01,W
079BA:  BRA    79BE
079BC:  BRA    79C2
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
079BE:  BCF    F89.4
079C0:  BCF    F92.4
079C2:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0)&& inputflag ==0)  //If Bell or Both
079C4:  BTFSS  xA2.0
079C6:  BRA    79CC
079C8:  BTFSC  xA4.0
079CA:  BRA    79EE
079CC:  MOVLB  C
079CE:  MOVF   x17,F
079D0:  BTFSC  FD8.2
079D2:  BRA    79D8
079D4:  MOVLB  B
079D6:  BRA    79EE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
079D8:  MOVLW  02
079DA:  MOVWF  x22
079DC:  MOVLB  0
079DE:  CALL   5FC0
079E2:  DECFSZ 01,W
079E4:  BRA    79E8
079E6:  BRA    79EC
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
079E8:  BCF    F89.3
079EA:  BCF    F92.3
079EC:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
079EE:  BTFSC  xAC.0
079F0:  BRA    7A36
079F2:  BTFSC  xAC.1
079F4:  BRA    7A36
079F6:  BTFSC  xAC.2
079F8:  BRA    7A36
079FA:  BTFSC  xAC.3
079FC:  BRA    7A36
079FE:  BTFSC  xAC.4
07A00:  BRA    7A36
07A02:  BTFSC  xAC.5
07A04:  BRA    7A36
07A06:  BTFSC  xAC.6
07A08:  BRA    7A36
07A0A:  BTFSC  xAC.7
07A0C:  BRA    7A36
07A0E:  BTFSC  xAD.0
07A10:  BRA    7A36
07A12:  BTFSC  xAD.1
07A14:  BRA    7A36
07A16:  BTFSC  xAD.2
07A18:  BRA    7A36
07A1A:  BTFSC  xAD.3
07A1C:  BRA    7A36
07A1E:  BTFSC  xAD.4
07A20:  BRA    7A36
07A22:  BTFSC  xAD.5
07A24:  BRA    7A36
07A26:  BTFSC  xAD.6
07A28:  BRA    7A36
07A2A:  BTFSC  xAD.7
07A2C:  BRA    7A36
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
07A2E:  BCF    F89.3
07A30:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
07A32:  BCF    F89.4
07A34:  BCF    F92.4
07A36:  MOVLB  C
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
07A38:  MOVLW  00
07A3A:  MOVLB  B
07A3C:  BTFSC  x9A.1
07A3E:  MOVLW  01
07A40:  MOVLB  C
07A42:  MOVWF  x23
07A44:  MOVLW  00
07A46:  MOVLB  B
07A48:  BTFSC  x9E.1
07A4A:  MOVLW  01
07A4C:  MOVLB  C
07A4E:  XORWF  x23,W
07A50:  SUBLW  01
07A52:  BNZ   7A5C
07A54:  MOVLB  B
07A56:  BTFSS  xA0.1
07A58:  BRA    7A62
07A5A:  MOVLB  C
07A5C:  BTFSS  1A.5
07A5E:  BRA    7ABE
07A60:  MOVLB  B
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
07A62:  BTFSC  xAC.1
07A64:  BRA    7A82
07A66:  MOVLB  0
07A68:  MOVF   x6A,W
07A6A:  SUBLW  0F
07A6C:  BTFSC  FD8.2
07A6E:  BRA    7A74
07A70:  MOVLB  B
07A72:  BRA    7A82
07A74:  MOVLB  B
07A76:  BTFSC  xA8.1
07A78:  BRA    7A82
....................       {
....................             TimeBase1s = 100 ;            //reload again
07A7A:  MOVLW  64
07A7C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
07A7E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B2 = 1;
07A82:  BSF    xAC.1
....................       if(Ack.B2 == 0)
07A84:  BTFSC  xA8.1
07A86:  BRA    7AB6
....................       {
....................          if(FlashingFlag == 0)
07A88:  BTFSC  1A.1
07A8A:  BRA    7A90
....................             {
....................                Output.B2 = 0;           //Flash output1
07A8C:  BCF    x9C.1
....................             }
07A8E:  BRA    7A92
....................             else
....................             {
....................                Output.B2 = 1;
07A90:  BSF    x9C.1
....................             }
....................          if (~AutoTestFlag)
07A92:  BTFSC  1A.4
07A94:  BRA    7AB6
....................          {
....................             if(AlarmIndicator.B2 == 1){
07A96:  BTFSS  xA6.1
07A98:  BRA    7AB6
....................                 if(OutputBoth.B2 == 0)        //Both output
07A9A:  BTFSC  xA4.1
07A9C:  BRA    7AA8
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07A9E:  BSF    F89.4
07AA0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07AA2:  BSF    F89.3
07AA4:  BCF    F92.3
....................                 }
07AA6:  BRA    7AB6
....................                 else
....................                 {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
07AA8:  BTFSS  xA2.1
07AAA:  BRA    7AB2
07AAC:  BSF    F89.4
07AAE:  BCF    F92.4
07AB0:  BRA    7AB6
....................                   else output_bit(Pbell,1);                          //Bell
07AB2:  BSF    F89.3
07AB4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
07AB6:  MOVLW  01
07AB8:  MOVLB  C
07ABA:  MOVWF  x17
....................    }
07ABC:  BRA    7B68
....................    else if(FaultType.B2 == 0)
07ABE:  MOVLB  B
07AC0:  BTFSC  xA0.1
07AC2:  BRA    7B66
....................    {
....................       In2.B2 = 0x00;
07AC4:  BCF    xAC.1
....................       Ack.B2 = 0;
07AC6:  BCF    xA8.1
....................       Output.B2 = 1;      //Off LED
07AC8:  BSF    x9C.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0)&& inputflag ==0)      //If Buzzer or Both
07ACA:  BTFSC  xA2.1
07ACC:  BRA    7AD2
07ACE:  BTFSC  xA4.1
07AD0:  BRA    7AF4
07AD2:  MOVLB  C
07AD4:  MOVF   x17,F
07AD6:  BTFSC  FD8.2
07AD8:  BRA    7ADE
07ADA:  MOVLB  B
07ADC:  BRA    7AF4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
07ADE:  MOVLW  01
07AE0:  MOVWF  x22
07AE2:  MOVLB  0
07AE4:  CALL   5FC0
07AE8:  DECFSZ 01,W
07AEA:  BRA    7AEE
07AEC:  BRA    7AF2
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
07AEE:  BCF    F89.4
07AF0:  BCF    F92.4
07AF2:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0)&& inputflag ==0)  //If Bell or Both
07AF4:  BTFSS  xA2.1
07AF6:  BRA    7AFC
07AF8:  BTFSC  xA4.1
07AFA:  BRA    7B1E
07AFC:  MOVLB  C
07AFE:  MOVF   x17,F
07B00:  BTFSC  FD8.2
07B02:  BRA    7B08
07B04:  MOVLB  B
07B06:  BRA    7B1E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
07B08:  MOVLW  02
07B0A:  MOVWF  x22
07B0C:  MOVLB  0
07B0E:  CALL   5FC0
07B12:  DECFSZ 01,W
07B14:  BRA    7B18
07B16:  BRA    7B1C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
07B18:  BCF    F89.3
07B1A:  BCF    F92.3
07B1C:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
07B1E:  BTFSC  xAC.0
07B20:  BRA    7B66
07B22:  BTFSC  xAC.1
07B24:  BRA    7B66
07B26:  BTFSC  xAC.2
07B28:  BRA    7B66
07B2A:  BTFSC  xAC.3
07B2C:  BRA    7B66
07B2E:  BTFSC  xAC.4
07B30:  BRA    7B66
07B32:  BTFSC  xAC.5
07B34:  BRA    7B66
07B36:  BTFSC  xAC.6
07B38:  BRA    7B66
07B3A:  BTFSC  xAC.7
07B3C:  BRA    7B66
07B3E:  BTFSC  xAD.0
07B40:  BRA    7B66
07B42:  BTFSC  xAD.1
07B44:  BRA    7B66
07B46:  BTFSC  xAD.2
07B48:  BRA    7B66
07B4A:  BTFSC  xAD.3
07B4C:  BRA    7B66
07B4E:  BTFSC  xAD.4
07B50:  BRA    7B66
07B52:  BTFSC  xAD.5
07B54:  BRA    7B66
07B56:  BTFSC  xAD.6
07B58:  BRA    7B66
07B5A:  BTFSC  xAD.7
07B5C:  BRA    7B66
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
07B5E:  BCF    F89.3
07B60:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
07B62:  BCF    F89.4
07B64:  BCF    F92.4
07B66:  MOVLB  C
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
07B68:  MOVLW  00
07B6A:  MOVLB  B
07B6C:  BTFSC  x9A.2
07B6E:  MOVLW  01
07B70:  MOVLB  C
07B72:  MOVWF  x23
07B74:  MOVLW  00
07B76:  MOVLB  B
07B78:  BTFSC  x9E.2
07B7A:  MOVLW  01
07B7C:  MOVLB  C
07B7E:  XORWF  x23,W
07B80:  SUBLW  01
07B82:  BNZ   7B8C
07B84:  MOVLB  B
07B86:  BTFSS  xA0.2
07B88:  BRA    7B92
07B8A:  MOVLB  C
07B8C:  BTFSS  1A.5
07B8E:  BRA    7BEE
07B90:  MOVLB  B
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
07B92:  BTFSC  xAC.2
07B94:  BRA    7BB2
07B96:  MOVLB  0
07B98:  MOVF   x6A,W
07B9A:  SUBLW  0F
07B9C:  BTFSC  FD8.2
07B9E:  BRA    7BA4
07BA0:  MOVLB  B
07BA2:  BRA    7BB2
07BA4:  MOVLB  B
07BA6:  BTFSC  xA8.2
07BA8:  BRA    7BB2
....................       {
....................             TimeBase1s = 100 ;            //reload again
07BAA:  MOVLW  64
07BAC:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
07BAE:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B3 = 1;
07BB2:  BSF    xAC.2
....................       if(Ack.B3 == 0)
07BB4:  BTFSC  xA8.2
07BB6:  BRA    7BE6
....................       {
....................          if(FlashingFlag == 0)
07BB8:  BTFSC  1A.1
07BBA:  BRA    7BC0
....................             {
....................                Output.B3 = 0;           //Flash output1
07BBC:  BCF    x9C.2
....................             }
07BBE:  BRA    7BC2
....................             else
....................             {
....................                Output.B3 = 1;
07BC0:  BSF    x9C.2
....................             }
....................          if (~AutoTestFlag)
07BC2:  BTFSC  1A.4
07BC4:  BRA    7BE6
....................          {
....................             if(AlarmIndicator.B3 == 1){
07BC6:  BTFSS  xA6.2
07BC8:  BRA    7BE6
....................                 if(OutputBoth.B3 == 0)        //Both output
07BCA:  BTFSC  xA4.2
07BCC:  BRA    7BD8
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07BCE:  BSF    F89.4
07BD0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07BD2:  BSF    F89.3
07BD4:  BCF    F92.3
....................                 }
07BD6:  BRA    7BE6
....................                 else
....................                 {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
07BD8:  BTFSS  xA2.2
07BDA:  BRA    7BE2
07BDC:  BSF    F89.4
07BDE:  BCF    F92.4
07BE0:  BRA    7BE6
....................                   else output_bit(Pbell,1);                          //Bell
07BE2:  BSF    F89.3
07BE4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
07BE6:  MOVLW  01
07BE8:  MOVLB  C
07BEA:  MOVWF  x17
....................    }
07BEC:  BRA    7C98
....................    else if(FaultType.B3 == 0)
07BEE:  MOVLB  B
07BF0:  BTFSC  xA0.2
07BF2:  BRA    7C96
....................    {
....................       In2.B3 = 0x00;
07BF4:  BCF    xAC.2
....................       Ack.B3 = 0;
07BF6:  BCF    xA8.2
....................       Output.B3 = 1;      //Off LED
07BF8:  BSF    x9C.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0)&& inputflag ==0)      //If Buzzer or Both
07BFA:  BTFSC  xA2.2
07BFC:  BRA    7C02
07BFE:  BTFSC  xA4.2
07C00:  BRA    7C24
07C02:  MOVLB  C
07C04:  MOVF   x17,F
07C06:  BTFSC  FD8.2
07C08:  BRA    7C0E
07C0A:  MOVLB  B
07C0C:  BRA    7C24
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
07C0E:  MOVLW  01
07C10:  MOVWF  x22
07C12:  MOVLB  0
07C14:  CALL   5FC0
07C18:  DECFSZ 01,W
07C1A:  BRA    7C1E
07C1C:  BRA    7C22
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
07C1E:  BCF    F89.4
07C20:  BCF    F92.4
07C22:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0)&& inputflag ==0)  //If Bell or Both
07C24:  BTFSS  xA2.2
07C26:  BRA    7C2C
07C28:  BTFSC  xA4.2
07C2A:  BRA    7C4E
07C2C:  MOVLB  C
07C2E:  MOVF   x17,F
07C30:  BTFSC  FD8.2
07C32:  BRA    7C38
07C34:  MOVLB  B
07C36:  BRA    7C4E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
07C38:  MOVLW  02
07C3A:  MOVWF  x22
07C3C:  MOVLB  0
07C3E:  CALL   5FC0
07C42:  DECFSZ 01,W
07C44:  BRA    7C48
07C46:  BRA    7C4C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
07C48:  BCF    F89.3
07C4A:  BCF    F92.3
07C4C:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
07C4E:  BTFSC  xAC.0
07C50:  BRA    7C96
07C52:  BTFSC  xAC.1
07C54:  BRA    7C96
07C56:  BTFSC  xAC.2
07C58:  BRA    7C96
07C5A:  BTFSC  xAC.3
07C5C:  BRA    7C96
07C5E:  BTFSC  xAC.4
07C60:  BRA    7C96
07C62:  BTFSC  xAC.5
07C64:  BRA    7C96
07C66:  BTFSC  xAC.6
07C68:  BRA    7C96
07C6A:  BTFSC  xAC.7
07C6C:  BRA    7C96
07C6E:  BTFSC  xAD.0
07C70:  BRA    7C96
07C72:  BTFSC  xAD.1
07C74:  BRA    7C96
07C76:  BTFSC  xAD.2
07C78:  BRA    7C96
07C7A:  BTFSC  xAD.3
07C7C:  BRA    7C96
07C7E:  BTFSC  xAD.4
07C80:  BRA    7C96
07C82:  BTFSC  xAD.5
07C84:  BRA    7C96
07C86:  BTFSC  xAD.6
07C88:  BRA    7C96
07C8A:  BTFSC  xAD.7
07C8C:  BRA    7C96
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
07C8E:  BCF    F89.3
07C90:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
07C92:  BCF    F89.4
07C94:  BCF    F92.4
07C96:  MOVLB  C
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
07C98:  MOVLW  00
07C9A:  MOVLB  B
07C9C:  BTFSC  x9A.3
07C9E:  MOVLW  01
07CA0:  MOVLB  C
07CA2:  MOVWF  x23
07CA4:  MOVLW  00
07CA6:  MOVLB  B
07CA8:  BTFSC  x9E.3
07CAA:  MOVLW  01
07CAC:  MOVLB  C
07CAE:  XORWF  x23,W
07CB0:  SUBLW  01
07CB2:  BNZ   7CBC
07CB4:  MOVLB  B
07CB6:  BTFSS  xA0.3
07CB8:  BRA    7CC2
07CBA:  MOVLB  C
07CBC:  BTFSS  1A.5
07CBE:  BRA    7D1E
07CC0:  MOVLB  B
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
07CC2:  BTFSC  xAC.3
07CC4:  BRA    7CE2
07CC6:  MOVLB  0
07CC8:  MOVF   x6A,W
07CCA:  SUBLW  0F
07CCC:  BTFSC  FD8.2
07CCE:  BRA    7CD4
07CD0:  MOVLB  B
07CD2:  BRA    7CE2
07CD4:  MOVLB  B
07CD6:  BTFSC  xA8.3
07CD8:  BRA    7CE2
....................       {
....................             TimeBase1s = 100 ;            //reload again
07CDA:  MOVLW  64
07CDC:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
07CDE:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B4 = 1;
07CE2:  BSF    xAC.3
....................       if(Ack.B4 == 0)
07CE4:  BTFSC  xA8.3
07CE6:  BRA    7D16
....................       {
....................          if(FlashingFlag == 0)
07CE8:  BTFSC  1A.1
07CEA:  BRA    7CF0
....................             {
....................                Output.B4 = 0;           //Flash output1
07CEC:  BCF    x9C.3
....................             }
07CEE:  BRA    7CF2
....................             else
....................             {
....................                Output.B4 = 1;
07CF0:  BSF    x9C.3
....................             }
....................          if (~AutoTestFlag)
07CF2:  BTFSC  1A.4
07CF4:  BRA    7D16
....................          {
....................             if(AlarmIndicator.B4 == 1){
07CF6:  BTFSS  xA6.3
07CF8:  BRA    7D16
....................                 if(OutputBoth.B4 == 0)        //Both output
07CFA:  BTFSC  xA4.3
07CFC:  BRA    7D08
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07CFE:  BSF    F89.4
07D00:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07D02:  BSF    F89.3
07D04:  BCF    F92.3
....................                 }
07D06:  BRA    7D16
....................                 else
....................                 {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
07D08:  BTFSS  xA2.3
07D0A:  BRA    7D12
07D0C:  BSF    F89.4
07D0E:  BCF    F92.4
07D10:  BRA    7D16
....................                   else output_bit(Pbell,1);                          //Bell
07D12:  BSF    F89.3
07D14:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
07D16:  MOVLW  01
07D18:  MOVLB  C
07D1A:  MOVWF  x17
....................    }
07D1C:  BRA    7DC8
....................    else if(FaultType.B4 == 0)
07D1E:  MOVLB  B
07D20:  BTFSC  xA0.3
07D22:  BRA    7DC6
....................    {
....................       In2.B4 = 0x00;
07D24:  BCF    xAC.3
....................       Ack.B4 = 0;
07D26:  BCF    xA8.3
....................       Output.B4 = 1;      //Off LED
07D28:  BSF    x9C.3
.................... 
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0)&& inputflag ==0)      //If Buzzer or Both
07D2A:  BTFSC  xA2.3
07D2C:  BRA    7D32
07D2E:  BTFSC  xA4.3
07D30:  BRA    7D54
07D32:  MOVLB  C
07D34:  MOVF   x17,F
07D36:  BTFSC  FD8.2
07D38:  BRA    7D3E
07D3A:  MOVLB  B
07D3C:  BRA    7D54
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
07D3E:  MOVLW  01
07D40:  MOVWF  x22
07D42:  MOVLB  0
07D44:  CALL   5FC0
07D48:  DECFSZ 01,W
07D4A:  BRA    7D4E
07D4C:  BRA    7D52
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
07D4E:  BCF    F89.4
07D50:  BCF    F92.4
07D52:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0)&& inputflag ==0)  //If Bell or Both
07D54:  BTFSS  xA2.3
07D56:  BRA    7D5C
07D58:  BTFSC  xA4.3
07D5A:  BRA    7D7E
07D5C:  MOVLB  C
07D5E:  MOVF   x17,F
07D60:  BTFSC  FD8.2
07D62:  BRA    7D68
07D64:  MOVLB  B
07D66:  BRA    7D7E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
07D68:  MOVLW  02
07D6A:  MOVWF  x22
07D6C:  MOVLB  0
07D6E:  CALL   5FC0
07D72:  DECFSZ 01,W
07D74:  BRA    7D78
07D76:  BRA    7D7C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
07D78:  BCF    F89.3
07D7A:  BCF    F92.3
07D7C:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
07D7E:  BTFSC  xAC.0
07D80:  BRA    7DC6
07D82:  BTFSC  xAC.1
07D84:  BRA    7DC6
07D86:  BTFSC  xAC.2
07D88:  BRA    7DC6
07D8A:  BTFSC  xAC.3
07D8C:  BRA    7DC6
07D8E:  BTFSC  xAC.4
07D90:  BRA    7DC6
07D92:  BTFSC  xAC.5
07D94:  BRA    7DC6
07D96:  BTFSC  xAC.6
07D98:  BRA    7DC6
07D9A:  BTFSC  xAC.7
07D9C:  BRA    7DC6
07D9E:  BTFSC  xAD.0
07DA0:  BRA    7DC6
07DA2:  BTFSC  xAD.1
07DA4:  BRA    7DC6
07DA6:  BTFSC  xAD.2
07DA8:  BRA    7DC6
07DAA:  BTFSC  xAD.3
07DAC:  BRA    7DC6
07DAE:  BTFSC  xAD.4
07DB0:  BRA    7DC6
07DB2:  BTFSC  xAD.5
07DB4:  BRA    7DC6
07DB6:  BTFSC  xAD.6
07DB8:  BRA    7DC6
07DBA:  BTFSC  xAD.7
07DBC:  BRA    7DC6
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
07DBE:  BCF    F89.3
07DC0:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
07DC2:  BCF    F89.4
07DC4:  BCF    F92.4
07DC6:  MOVLB  C
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
07DC8:  MOVLW  00
07DCA:  MOVLB  B
07DCC:  BTFSC  x9A.4
07DCE:  MOVLW  01
07DD0:  MOVLB  C
07DD2:  MOVWF  x23
07DD4:  MOVLW  00
07DD6:  MOVLB  B
07DD8:  BTFSC  x9E.4
07DDA:  MOVLW  01
07DDC:  MOVLB  C
07DDE:  XORWF  x23,W
07DE0:  SUBLW  01
07DE2:  BNZ   7DEC
07DE4:  MOVLB  B
07DE6:  BTFSS  xA0.4
07DE8:  BRA    7DF2
07DEA:  MOVLB  C
07DEC:  BTFSS  1A.5
07DEE:  BRA    7E4E
07DF0:  MOVLB  B
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
07DF2:  BTFSC  xAC.4
07DF4:  BRA    7E12
07DF6:  MOVLB  0
07DF8:  MOVF   x6A,W
07DFA:  SUBLW  0F
07DFC:  BTFSC  FD8.2
07DFE:  BRA    7E04
07E00:  MOVLB  B
07E02:  BRA    7E12
07E04:  MOVLB  B
07E06:  BTFSC  xA8.4
07E08:  BRA    7E12
....................       {
....................             TimeBase1s = 100 ;            //reload again
07E0A:  MOVLW  64
07E0C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
07E0E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B5 = 1;
07E12:  BSF    xAC.4
....................       if(Ack.B5 == 0)
07E14:  BTFSC  xA8.4
07E16:  BRA    7E46
....................       {
....................          if(FlashingFlag == 0)
07E18:  BTFSC  1A.1
07E1A:  BRA    7E20
....................             {
....................                Output.B5 = 0;           //Flash output1
07E1C:  BCF    x9C.4
....................             }
07E1E:  BRA    7E22
....................             else
....................             {
....................                Output.B5 = 1;
07E20:  BSF    x9C.4
....................             }
....................          if (~AutoTestFlag)
07E22:  BTFSC  1A.4
07E24:  BRA    7E46
....................          {
....................             if(AlarmIndicator.B5 == 1){
07E26:  BTFSS  xA6.4
07E28:  BRA    7E46
....................                 if(OutputBoth.B5 == 0)        //Both output
07E2A:  BTFSC  xA4.4
07E2C:  BRA    7E38
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07E2E:  BSF    F89.4
07E30:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07E32:  BSF    F89.3
07E34:  BCF    F92.3
....................                 }
07E36:  BRA    7E46
....................                 else
....................                 {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
07E38:  BTFSS  xA2.4
07E3A:  BRA    7E42
07E3C:  BSF    F89.4
07E3E:  BCF    F92.4
07E40:  BRA    7E46
....................                   else output_bit(Pbell,1);                          //Bell
07E42:  BSF    F89.3
07E44:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
07E46:  MOVLW  01
07E48:  MOVLB  C
07E4A:  MOVWF  x17
....................    }
07E4C:  BRA    7EF8
....................    else if(FaultType.B5 == 0)
07E4E:  MOVLB  B
07E50:  BTFSC  xA0.4
07E52:  BRA    7EF6
....................    {
....................       In2.B5 = 0x00;
07E54:  BCF    xAC.4
....................       Ack.B5 = 0;
07E56:  BCF    xA8.4
....................       Output.B5 = 1;      //Off LED
07E58:  BSF    x9C.4
.................... 
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0)&& inputflag ==0)      //If Buzzer or Both
07E5A:  BTFSC  xA2.4
07E5C:  BRA    7E62
07E5E:  BTFSC  xA4.4
07E60:  BRA    7E84
07E62:  MOVLB  C
07E64:  MOVF   x17,F
07E66:  BTFSC  FD8.2
07E68:  BRA    7E6E
07E6A:  MOVLB  B
07E6C:  BRA    7E84
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
07E6E:  MOVLW  01
07E70:  MOVWF  x22
07E72:  MOVLB  0
07E74:  CALL   5FC0
07E78:  DECFSZ 01,W
07E7A:  BRA    7E7E
07E7C:  BRA    7E82
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
07E7E:  BCF    F89.4
07E80:  BCF    F92.4
07E82:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0)&& inputflag ==0)  //If Bell or Both
07E84:  BTFSS  xA2.4
07E86:  BRA    7E8C
07E88:  BTFSC  xA4.4
07E8A:  BRA    7EAE
07E8C:  MOVLB  C
07E8E:  MOVF   x17,F
07E90:  BTFSC  FD8.2
07E92:  BRA    7E98
07E94:  MOVLB  B
07E96:  BRA    7EAE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
07E98:  MOVLW  02
07E9A:  MOVWF  x22
07E9C:  MOVLB  0
07E9E:  CALL   5FC0
07EA2:  DECFSZ 01,W
07EA4:  BRA    7EA8
07EA6:  BRA    7EAC
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
07EA8:  BCF    F89.3
07EAA:  BCF    F92.3
07EAC:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
07EAE:  BTFSC  xAC.0
07EB0:  BRA    7EF6
07EB2:  BTFSC  xAC.1
07EB4:  BRA    7EF6
07EB6:  BTFSC  xAC.2
07EB8:  BRA    7EF6
07EBA:  BTFSC  xAC.3
07EBC:  BRA    7EF6
07EBE:  BTFSC  xAC.4
07EC0:  BRA    7EF6
07EC2:  BTFSC  xAC.5
07EC4:  BRA    7EF6
07EC6:  BTFSC  xAC.6
07EC8:  BRA    7EF6
07ECA:  BTFSC  xAC.7
07ECC:  BRA    7EF6
07ECE:  BTFSC  xAD.0
07ED0:  BRA    7EF6
07ED2:  BTFSC  xAD.1
07ED4:  BRA    7EF6
07ED6:  BTFSC  xAD.2
07ED8:  BRA    7EF6
07EDA:  BTFSC  xAD.3
07EDC:  BRA    7EF6
07EDE:  BTFSC  xAD.4
07EE0:  BRA    7EF6
07EE2:  BTFSC  xAD.5
07EE4:  BRA    7EF6
07EE6:  BTFSC  xAD.6
07EE8:  BRA    7EF6
07EEA:  BTFSC  xAD.7
07EEC:  BRA    7EF6
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
07EEE:  BCF    F89.3
07EF0:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
07EF2:  BCF    F89.4
07EF4:  BCF    F92.4
07EF6:  MOVLB  C
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
07EF8:  MOVLW  00
07EFA:  MOVLB  B
07EFC:  BTFSC  x9A.5
07EFE:  MOVLW  01
07F00:  MOVLB  C
07F02:  MOVWF  x23
07F04:  MOVLW  00
07F06:  MOVLB  B
07F08:  BTFSC  x9E.5
07F0A:  MOVLW  01
07F0C:  MOVLB  C
07F0E:  XORWF  x23,W
07F10:  SUBLW  01
07F12:  BNZ   7F1C
07F14:  MOVLB  B
07F16:  BTFSS  xA0.5
07F18:  BRA    7F22
07F1A:  MOVLB  C
07F1C:  BTFSS  1A.5
07F1E:  BRA    7F7E
07F20:  MOVLB  B
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
07F22:  BTFSC  xAC.5
07F24:  BRA    7F42
07F26:  MOVLB  0
07F28:  MOVF   x6A,W
07F2A:  SUBLW  0F
07F2C:  BTFSC  FD8.2
07F2E:  BRA    7F34
07F30:  MOVLB  B
07F32:  BRA    7F42
07F34:  MOVLB  B
07F36:  BTFSC  xA8.5
07F38:  BRA    7F42
....................       {
....................             TimeBase1s = 100 ;            //reload again
07F3A:  MOVLW  64
07F3C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
07F3E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B6 = 1;
07F42:  BSF    xAC.5
....................       if(Ack.B6 == 0)
07F44:  BTFSC  xA8.5
07F46:  BRA    7F76
....................       {
....................          if(FlashingFlag == 0)
07F48:  BTFSC  1A.1
07F4A:  BRA    7F50
....................             {
....................                Output.B6 = 0;           //Flash output1
07F4C:  BCF    x9C.5
....................             }
07F4E:  BRA    7F52
....................             else
....................             {
....................                Output.B6 = 1;
07F50:  BSF    x9C.5
....................             }
....................          if (~AutoTestFlag)
07F52:  BTFSC  1A.4
07F54:  BRA    7F76
....................          {
....................             if(AlarmIndicator.B6 == 1){
07F56:  BTFSS  xA6.5
07F58:  BRA    7F76
....................                 if(OutputBoth.B6 == 0)        //Both output
07F5A:  BTFSC  xA4.5
07F5C:  BRA    7F68
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
07F5E:  BSF    F89.4
07F60:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
07F62:  BSF    F89.3
07F64:  BCF    F92.3
....................                 }
07F66:  BRA    7F76
....................                 else
....................                 {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
07F68:  BTFSS  xA2.5
07F6A:  BRA    7F72
07F6C:  BSF    F89.4
07F6E:  BCF    F92.4
07F70:  BRA    7F76
....................                   else output_bit(Pbell,1);                          //Bell
07F72:  BSF    F89.3
07F74:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
07F76:  MOVLW  01
07F78:  MOVLB  C
07F7A:  MOVWF  x17
....................    }
07F7C:  BRA    8028
....................    else if(FaultType.B6 == 0)
07F7E:  MOVLB  B
07F80:  BTFSC  xA0.5
07F82:  BRA    8026
....................    {
....................       In2.B6 = 0x00;
07F84:  BCF    xAC.5
....................       Ack.B6 = 0;
07F86:  BCF    xA8.5
....................       Output.B6 = 1;      //Off LED
07F88:  BSF    x9C.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)      //If Buzzer or Both
07F8A:  BTFSC  xA2.5
07F8C:  BRA    7F92
07F8E:  BTFSC  xA4.5
07F90:  BRA    7FB4
07F92:  MOVLB  C
07F94:  MOVF   x17,F
07F96:  BTFSC  FD8.2
07F98:  BRA    7F9E
07F9A:  MOVLB  B
07F9C:  BRA    7FB4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
07F9E:  MOVLW  01
07FA0:  MOVWF  x22
07FA2:  MOVLB  0
07FA4:  CALL   5FC0
07FA8:  DECFSZ 01,W
07FAA:  BRA    7FAE
07FAC:  BRA    7FB2
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
07FAE:  BCF    F89.4
07FB0:  BCF    F92.4
07FB2:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)  //If Bell or Both
07FB4:  BTFSS  xA2.5
07FB6:  BRA    7FBC
07FB8:  BTFSC  xA4.5
07FBA:  BRA    7FDE
07FBC:  MOVLB  C
07FBE:  MOVF   x17,F
07FC0:  BTFSC  FD8.2
07FC2:  BRA    7FC8
07FC4:  MOVLB  B
07FC6:  BRA    7FDE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
07FC8:  MOVLW  02
07FCA:  MOVWF  x22
07FCC:  MOVLB  0
07FCE:  CALL   5FC0
07FD2:  DECFSZ 01,W
07FD4:  BRA    7FD8
07FD6:  BRA    7FDC
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
07FD8:  BCF    F89.3
07FDA:  BCF    F92.3
07FDC:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
07FDE:  BTFSC  xAC.0
07FE0:  BRA    8026
07FE2:  BTFSC  xAC.1
07FE4:  BRA    8026
07FE6:  BTFSC  xAC.2
07FE8:  BRA    8026
07FEA:  BTFSC  xAC.3
07FEC:  BRA    8026
07FEE:  BTFSC  xAC.4
07FF0:  BRA    8026
07FF2:  BTFSC  xAC.5
07FF4:  BRA    8026
07FF6:  BTFSC  xAC.6
07FF8:  BRA    8026
07FFA:  BTFSC  xAC.7
07FFC:  BRA    8026
07FFE:  BTFSC  xAD.0
08000:  BRA    8026
08002:  BTFSC  xAD.1
08004:  BRA    8026
08006:  BTFSC  xAD.2
08008:  BRA    8026
0800A:  BTFSC  xAD.3
0800C:  BRA    8026
0800E:  BTFSC  xAD.4
08010:  BRA    8026
08012:  BTFSC  xAD.5
08014:  BRA    8026
08016:  BTFSC  xAD.6
08018:  BRA    8026
0801A:  BTFSC  xAD.7
0801C:  BRA    8026
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0801E:  BCF    F89.3
08020:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08022:  BCF    F89.4
08024:  BCF    F92.4
08026:  MOVLB  C
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08028:  MOVLW  00
0802A:  MOVLB  B
0802C:  BTFSC  x9A.6
0802E:  MOVLW  01
08030:  MOVLB  C
08032:  MOVWF  x23
08034:  MOVLW  00
08036:  MOVLB  B
08038:  BTFSC  x9E.6
0803A:  MOVLW  01
0803C:  MOVLB  C
0803E:  XORWF  x23,W
08040:  SUBLW  01
08042:  BNZ   804C
08044:  MOVLB  B
08046:  BTFSS  xA0.6
08048:  BRA    8052
0804A:  MOVLB  C
0804C:  BTFSS  1A.5
0804E:  BRA    80AE
08050:  MOVLB  B
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
08052:  BTFSC  xAC.6
08054:  BRA    8072
08056:  MOVLB  0
08058:  MOVF   x6A,W
0805A:  SUBLW  0F
0805C:  BTFSC  FD8.2
0805E:  BRA    8064
08060:  MOVLB  B
08062:  BRA    8072
08064:  MOVLB  B
08066:  BTFSC  xA8.6
08068:  BRA    8072
....................       {
....................             TimeBase1s = 100 ;            //reload again
0806A:  MOVLW  64
0806C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0806E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B7 = 1;
08072:  BSF    xAC.6
....................       if(Ack.B7 == 0)
08074:  BTFSC  xA8.6
08076:  BRA    80A6
....................       {
....................          if(FlashingFlag == 0)
08078:  BTFSC  1A.1
0807A:  BRA    8080
....................             {
....................                Output.B7 = 0;           //Flash output1
0807C:  BCF    x9C.6
....................             }
0807E:  BRA    8082
....................             else
....................             {
....................                Output.B7 = 1;
08080:  BSF    x9C.6
....................             }
....................          if (~AutoTestFlag)
08082:  BTFSC  1A.4
08084:  BRA    80A6
....................          {
....................             if(AlarmIndicator.B7 == 1){
08086:  BTFSS  xA6.6
08088:  BRA    80A6
....................                 if(OutputBoth.B7 == 0)        //Both output
0808A:  BTFSC  xA4.6
0808C:  BRA    8098
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0808E:  BSF    F89.4
08090:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08092:  BSF    F89.3
08094:  BCF    F92.3
....................                 }
08096:  BRA    80A6
....................                 else
....................                 {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
08098:  BTFSS  xA2.6
0809A:  BRA    80A2
0809C:  BSF    F89.4
0809E:  BCF    F92.4
080A0:  BRA    80A6
....................                   else output_bit(Pbell,1);                          //Bell
080A2:  BSF    F89.3
080A4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
080A6:  MOVLW  01
080A8:  MOVLB  C
080AA:  MOVWF  x17
....................    }
080AC:  BRA    8158
....................    else if(FaultType.B7 == 0)
080AE:  MOVLB  B
080B0:  BTFSC  xA0.6
080B2:  BRA    8156
....................    {
....................       In2.B7 = 0x00;
080B4:  BCF    xAC.6
....................       Ack.B7 = 0;
080B6:  BCF    xA8.6
....................       Output.B7 = 1;      //Off LED
080B8:  BSF    x9C.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)      //If Buzzer or Both
080BA:  BTFSC  xA2.6
080BC:  BRA    80C2
080BE:  BTFSC  xA4.6
080C0:  BRA    80E4
080C2:  MOVLB  C
080C4:  MOVF   x17,F
080C6:  BTFSC  FD8.2
080C8:  BRA    80CE
080CA:  MOVLB  B
080CC:  BRA    80E4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
080CE:  MOVLW  01
080D0:  MOVWF  x22
080D2:  MOVLB  0
080D4:  CALL   5FC0
080D8:  DECFSZ 01,W
080DA:  BRA    80DE
080DC:  BRA    80E2
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
080DE:  BCF    F89.4
080E0:  BCF    F92.4
080E2:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)  //If Bell or Both
080E4:  BTFSS  xA2.6
080E6:  BRA    80EC
080E8:  BTFSC  xA4.6
080EA:  BRA    810E
080EC:  MOVLB  C
080EE:  MOVF   x17,F
080F0:  BTFSC  FD8.2
080F2:  BRA    80F8
080F4:  MOVLB  B
080F6:  BRA    810E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
080F8:  MOVLW  02
080FA:  MOVWF  x22
080FC:  MOVLB  0
080FE:  CALL   5FC0
08102:  DECFSZ 01,W
08104:  BRA    8108
08106:  BRA    810C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08108:  BCF    F89.3
0810A:  BCF    F92.3
0810C:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0810E:  BTFSC  xAC.0
08110:  BRA    8156
08112:  BTFSC  xAC.1
08114:  BRA    8156
08116:  BTFSC  xAC.2
08118:  BRA    8156
0811A:  BTFSC  xAC.3
0811C:  BRA    8156
0811E:  BTFSC  xAC.4
08120:  BRA    8156
08122:  BTFSC  xAC.5
08124:  BRA    8156
08126:  BTFSC  xAC.6
08128:  BRA    8156
0812A:  BTFSC  xAC.7
0812C:  BRA    8156
0812E:  BTFSC  xAD.0
08130:  BRA    8156
08132:  BTFSC  xAD.1
08134:  BRA    8156
08136:  BTFSC  xAD.2
08138:  BRA    8156
0813A:  BTFSC  xAD.3
0813C:  BRA    8156
0813E:  BTFSC  xAD.4
08140:  BRA    8156
08142:  BTFSC  xAD.5
08144:  BRA    8156
08146:  BTFSC  xAD.6
08148:  BRA    8156
0814A:  BTFSC  xAD.7
0814C:  BRA    8156
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0814E:  BCF    F89.3
08150:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08152:  BCF    F89.4
08154:  BCF    F92.4
08156:  MOVLB  C
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08158:  MOVLW  00
0815A:  MOVLB  B
0815C:  BTFSC  x9A.7
0815E:  MOVLW  01
08160:  MOVLB  C
08162:  MOVWF  x23
08164:  MOVLW  00
08166:  MOVLB  B
08168:  BTFSC  x9E.7
0816A:  MOVLW  01
0816C:  MOVLB  C
0816E:  XORWF  x23,W
08170:  SUBLW  01
08172:  BNZ   817C
08174:  MOVLB  B
08176:  BTFSS  xA0.7
08178:  BRA    8182
0817A:  MOVLB  C
0817C:  BTFSS  1A.5
0817E:  BRA    81DE
08180:  MOVLB  B
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
08182:  BTFSC  xAC.7
08184:  BRA    81A2
08186:  MOVLB  0
08188:  MOVF   x6A,W
0818A:  SUBLW  0F
0818C:  BTFSC  FD8.2
0818E:  BRA    8194
08190:  MOVLB  B
08192:  BRA    81A2
08194:  MOVLB  B
08196:  BTFSC  xA8.7
08198:  BRA    81A2
....................       {
....................             TimeBase1s = 100 ;            //reload again
0819A:  MOVLW  64
0819C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0819E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B8 = 1;
081A2:  BSF    xAC.7
....................       if(Ack.B8 == 0)
081A4:  BTFSC  xA8.7
081A6:  BRA    81D6
....................       {
....................          if(FlashingFlag == 0)
081A8:  BTFSC  1A.1
081AA:  BRA    81B0
....................             {
....................                Output.B8 = 0;           //Flash output1
081AC:  BCF    x9C.7
....................             }
081AE:  BRA    81B2
....................             else
....................             {
....................                Output.B8 = 1;
081B0:  BSF    x9C.7
....................             }
....................          if (~AutoTestFlag)
081B2:  BTFSC  1A.4
081B4:  BRA    81D6
....................          {
....................             if(AlarmIndicator.B8 == 1){
081B6:  BTFSS  xA6.7
081B8:  BRA    81D6
....................                 if(OutputBoth.B8 == 0)        //Both output
081BA:  BTFSC  xA4.7
081BC:  BRA    81C8
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
081BE:  BSF    F89.4
081C0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
081C2:  BSF    F89.3
081C4:  BCF    F92.3
....................                 }
081C6:  BRA    81D6
....................                 else
....................                 {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
081C8:  BTFSS  xA2.7
081CA:  BRA    81D2
081CC:  BSF    F89.4
081CE:  BCF    F92.4
081D0:  BRA    81D6
....................                   else output_bit(Pbell,1);                          //Bell
081D2:  BSF    F89.3
081D4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
081D6:  MOVLW  01
081D8:  MOVLB  C
081DA:  MOVWF  x17
....................    }
081DC:  BRA    8288
....................    else if(FaultType.B8 == 0)
081DE:  MOVLB  B
081E0:  BTFSC  xA0.7
081E2:  BRA    8286
....................    {
....................       In2.B8 = 0x00;
081E4:  BCF    xAC.7
....................       Ack.B8 = 0;
081E6:  BCF    xA8.7
....................       Output.B8 = 1;      //Off LED
081E8:  BSF    x9C.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)      //If Buzzer or Both
081EA:  BTFSC  xA2.7
081EC:  BRA    81F2
081EE:  BTFSC  xA4.7
081F0:  BRA    8214
081F2:  MOVLB  C
081F4:  MOVF   x17,F
081F6:  BTFSC  FD8.2
081F8:  BRA    81FE
081FA:  MOVLB  B
081FC:  BRA    8214
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
081FE:  MOVLW  01
08200:  MOVWF  x22
08202:  MOVLB  0
08204:  CALL   5FC0
08208:  DECFSZ 01,W
0820A:  BRA    820E
0820C:  BRA    8212
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0820E:  BCF    F89.4
08210:  BCF    F92.4
08212:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)  //If Bell or Both
08214:  BTFSS  xA2.7
08216:  BRA    821C
08218:  BTFSC  xA4.7
0821A:  BRA    823E
0821C:  MOVLB  C
0821E:  MOVF   x17,F
08220:  BTFSC  FD8.2
08222:  BRA    8228
08224:  MOVLB  B
08226:  BRA    823E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08228:  MOVLW  02
0822A:  MOVWF  x22
0822C:  MOVLB  0
0822E:  CALL   5FC0
08232:  DECFSZ 01,W
08234:  BRA    8238
08236:  BRA    823C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08238:  BCF    F89.3
0823A:  BCF    F92.3
0823C:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0823E:  BTFSC  xAC.0
08240:  BRA    8286
08242:  BTFSC  xAC.1
08244:  BRA    8286
08246:  BTFSC  xAC.2
08248:  BRA    8286
0824A:  BTFSC  xAC.3
0824C:  BRA    8286
0824E:  BTFSC  xAC.4
08250:  BRA    8286
08252:  BTFSC  xAC.5
08254:  BRA    8286
08256:  BTFSC  xAC.6
08258:  BRA    8286
0825A:  BTFSC  xAC.7
0825C:  BRA    8286
0825E:  BTFSC  xAD.0
08260:  BRA    8286
08262:  BTFSC  xAD.1
08264:  BRA    8286
08266:  BTFSC  xAD.2
08268:  BRA    8286
0826A:  BTFSC  xAD.3
0826C:  BRA    8286
0826E:  BTFSC  xAD.4
08270:  BRA    8286
08272:  BTFSC  xAD.5
08274:  BRA    8286
08276:  BTFSC  xAD.6
08278:  BRA    8286
0827A:  BTFSC  xAD.7
0827C:  BRA    8286
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0827E:  BCF    F89.3
08280:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08282:  BCF    F89.4
08284:  BCF    F92.4
08286:  MOVLB  C
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08288:  MOVLW  00
0828A:  MOVLB  B
0828C:  BTFSC  x9B.0
0828E:  MOVLW  01
08290:  MOVLB  C
08292:  MOVWF  x23
08294:  MOVLW  00
08296:  MOVLB  B
08298:  BTFSC  x9F.0
0829A:  MOVLW  01
0829C:  MOVLB  C
0829E:  XORWF  x23,W
082A0:  SUBLW  01
082A2:  BNZ   82AC
082A4:  MOVLB  B
082A6:  BTFSS  xA1.0
082A8:  BRA    82B2
082AA:  MOVLB  C
082AC:  BTFSS  1A.5
082AE:  BRA    830E
082B0:  MOVLB  B
....................    {
....................       if(In2.B9 == 0 && AutoAck == 0x0F && Ack.B9 == 0)   //use auto acknowlegde
082B2:  BTFSC  xAD.0
082B4:  BRA    82D2
082B6:  MOVLB  0
082B8:  MOVF   x6A,W
082BA:  SUBLW  0F
082BC:  BTFSC  FD8.2
082BE:  BRA    82C4
082C0:  MOVLB  B
082C2:  BRA    82D2
082C4:  MOVLB  B
082C6:  BTFSC  xA9.0
082C8:  BRA    82D2
....................       {
....................             TimeBase1s = 100 ;            //reload again
082CA:  MOVLW  64
082CC:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
082CE:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B9 = 1;
082D2:  BSF    xAD.0
....................       if(Ack.B9 == 0)
082D4:  BTFSC  xA9.0
082D6:  BRA    8306
....................       {
....................          if(FlashingFlag == 0)
082D8:  BTFSC  1A.1
082DA:  BRA    82E0
....................             {
....................                Output.B9 = 0;           //Flash output1
082DC:  BCF    x9D.0
....................             }
082DE:  BRA    82E2
....................             else
....................             {
....................                Output.B9 = 1;
082E0:  BSF    x9D.0
....................             }
....................          if (~AutoTestFlag)
082E2:  BTFSC  1A.4
082E4:  BRA    8306
....................          {
....................             if(AlarmIndicator.B9 == 1){
082E6:  BTFSS  xA7.0
082E8:  BRA    8306
....................                 if(OutputBoth.B9 == 0)        //Both output
082EA:  BTFSC  xA5.0
082EC:  BRA    82F8
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
082EE:  BSF    F89.4
082F0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
082F2:  BSF    F89.3
082F4:  BCF    F92.3
....................                 }
082F6:  BRA    8306
....................                 else
....................                 {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
082F8:  BTFSS  xA3.0
082FA:  BRA    8302
082FC:  BSF    F89.4
082FE:  BCF    F92.4
08300:  BRA    8306
....................                   else output_bit(Pbell,1);                          //Bell
08302:  BSF    F89.3
08304:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08306:  MOVLW  01
08308:  MOVLB  C
0830A:  MOVWF  x17
....................    }
0830C:  BRA    83B8
....................    else if(FaultType.B9 == 0)
0830E:  MOVLB  B
08310:  BTFSC  xA1.0
08312:  BRA    83B6
....................    {
....................       In2.B9 = 0x00;
08314:  BCF    xAD.0
....................       Ack.B9 = 0;
08316:  BCF    xA9.0
....................       Output.B9 = 1;      //Off LED
08318:  BSF    x9D.0
.................... 
....................       if((OutputType.B9 == 1 || OutputBoth.B9 == 0)&& inputflag ==0)      //If Buzzer or Both
0831A:  BTFSC  xA3.0
0831C:  BRA    8322
0831E:  BTFSC  xA5.0
08320:  BRA    8344
08322:  MOVLB  C
08324:  MOVF   x17,F
08326:  BTFSC  FD8.2
08328:  BRA    832E
0832A:  MOVLB  B
0832C:  BRA    8344
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0832E:  MOVLW  01
08330:  MOVWF  x22
08332:  MOVLB  0
08334:  CALL   5FC0
08338:  DECFSZ 01,W
0833A:  BRA    833E
0833C:  BRA    8342
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0833E:  BCF    F89.4
08340:  BCF    F92.4
08342:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B9 == 0 || OutputBoth.B9 == 0)&& inputflag ==0)  //If Bell or Both
08344:  BTFSS  xA3.0
08346:  BRA    834C
08348:  BTFSC  xA5.0
0834A:  BRA    836E
0834C:  MOVLB  C
0834E:  MOVF   x17,F
08350:  BTFSC  FD8.2
08352:  BRA    8358
08354:  MOVLB  B
08356:  BRA    836E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08358:  MOVLW  02
0835A:  MOVWF  x22
0835C:  MOVLB  0
0835E:  CALL   5FC0
08362:  DECFSZ 01,W
08364:  BRA    8368
08366:  BRA    836C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08368:  BCF    F89.3
0836A:  BCF    F92.3
0836C:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0836E:  BTFSC  xAC.0
08370:  BRA    83B6
08372:  BTFSC  xAC.1
08374:  BRA    83B6
08376:  BTFSC  xAC.2
08378:  BRA    83B6
0837A:  BTFSC  xAC.3
0837C:  BRA    83B6
0837E:  BTFSC  xAC.4
08380:  BRA    83B6
08382:  BTFSC  xAC.5
08384:  BRA    83B6
08386:  BTFSC  xAC.6
08388:  BRA    83B6
0838A:  BTFSC  xAC.7
0838C:  BRA    83B6
0838E:  BTFSC  xAD.0
08390:  BRA    83B6
08392:  BTFSC  xAD.1
08394:  BRA    83B6
08396:  BTFSC  xAD.2
08398:  BRA    83B6
0839A:  BTFSC  xAD.3
0839C:  BRA    83B6
0839E:  BTFSC  xAD.4
083A0:  BRA    83B6
083A2:  BTFSC  xAD.5
083A4:  BRA    83B6
083A6:  BTFSC  xAD.6
083A8:  BRA    83B6
083AA:  BTFSC  xAD.7
083AC:  BRA    83B6
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
083AE:  BCF    F89.3
083B0:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
083B2:  BCF    F89.4
083B4:  BCF    F92.4
083B6:  MOVLB  C
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
083B8:  MOVLW  00
083BA:  MOVLB  B
083BC:  BTFSC  x9B.1
083BE:  MOVLW  01
083C0:  MOVLB  C
083C2:  MOVWF  x23
083C4:  MOVLW  00
083C6:  MOVLB  B
083C8:  BTFSC  x9F.1
083CA:  MOVLW  01
083CC:  MOVLB  C
083CE:  XORWF  x23,W
083D0:  SUBLW  01
083D2:  BNZ   83DC
083D4:  MOVLB  B
083D6:  BTFSS  xA1.1
083D8:  BRA    83E2
083DA:  MOVLB  C
083DC:  BTFSS  1A.5
083DE:  BRA    843E
083E0:  MOVLB  B
....................    {
....................       if(In2.B10 == 0 && AutoAck == 0x0F && Ack.B10 == 0)   //use auto acknowlegde
083E2:  BTFSC  xAD.1
083E4:  BRA    8402
083E6:  MOVLB  0
083E8:  MOVF   x6A,W
083EA:  SUBLW  0F
083EC:  BTFSC  FD8.2
083EE:  BRA    83F4
083F0:  MOVLB  B
083F2:  BRA    8402
083F4:  MOVLB  B
083F6:  BTFSC  xA9.1
083F8:  BRA    8402
....................       {
....................             TimeBase1s = 100 ;            //reload again
083FA:  MOVLW  64
083FC:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
083FE:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B10 = 1;
08402:  BSF    xAD.1
....................       if(Ack.B10 == 0)
08404:  BTFSC  xA9.1
08406:  BRA    8436
....................       {
....................          if(FlashingFlag == 0)
08408:  BTFSC  1A.1
0840A:  BRA    8410
....................             {
....................                Output.B10 = 0;           //Flash output1
0840C:  BCF    x9D.1
....................             }
0840E:  BRA    8412
....................             else
....................             {
....................                Output.B10 = 1;
08410:  BSF    x9D.1
....................             }
....................          if (~AutoTestFlag)
08412:  BTFSC  1A.4
08414:  BRA    8436
....................          {
....................             if(AlarmIndicator.B10 == 1){
08416:  BTFSS  xA7.1
08418:  BRA    8436
....................                 if(OutputBoth.B10 == 0)        //Both output
0841A:  BTFSC  xA5.1
0841C:  BRA    8428
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0841E:  BSF    F89.4
08420:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08422:  BSF    F89.3
08424:  BCF    F92.3
....................                 }
08426:  BRA    8436
....................                 else
....................                 {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
08428:  BTFSS  xA3.1
0842A:  BRA    8432
0842C:  BSF    F89.4
0842E:  BCF    F92.4
08430:  BRA    8436
....................                   else output_bit(Pbell,1);                          //Bell
08432:  BSF    F89.3
08434:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08436:  MOVLW  01
08438:  MOVLB  C
0843A:  MOVWF  x17
....................    }
0843C:  BRA    84E8
....................    else if(FaultType.B10 == 0)
0843E:  MOVLB  B
08440:  BTFSC  xA1.1
08442:  BRA    84E6
....................    {
....................       In2.B10 = 0x00;
08444:  BCF    xAD.1
....................       Ack.B10 = 0;
08446:  BCF    xA9.1
....................       Output.B10 = 1;      //Off LED
08448:  BSF    x9D.1
.................... 
....................       if((OutputType.B10 == 1 || OutputBoth.B10 == 0)&& inputflag ==0)      //If Buzzer or Both
0844A:  BTFSC  xA3.1
0844C:  BRA    8452
0844E:  BTFSC  xA5.1
08450:  BRA    8474
08452:  MOVLB  C
08454:  MOVF   x17,F
08456:  BTFSC  FD8.2
08458:  BRA    845E
0845A:  MOVLB  B
0845C:  BRA    8474
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0845E:  MOVLW  01
08460:  MOVWF  x22
08462:  MOVLB  0
08464:  CALL   5FC0
08468:  DECFSZ 01,W
0846A:  BRA    846E
0846C:  BRA    8472
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0846E:  BCF    F89.4
08470:  BCF    F92.4
08472:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B10 == 0 || OutputBoth.B10 == 0)&& inputflag ==0)  //If Bell or Both
08474:  BTFSS  xA3.1
08476:  BRA    847C
08478:  BTFSC  xA5.1
0847A:  BRA    849E
0847C:  MOVLB  C
0847E:  MOVF   x17,F
08480:  BTFSC  FD8.2
08482:  BRA    8488
08484:  MOVLB  B
08486:  BRA    849E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08488:  MOVLW  02
0848A:  MOVWF  x22
0848C:  MOVLB  0
0848E:  CALL   5FC0
08492:  DECFSZ 01,W
08494:  BRA    8498
08496:  BRA    849C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08498:  BCF    F89.3
0849A:  BCF    F92.3
0849C:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0849E:  BTFSC  xAC.0
084A0:  BRA    84E6
084A2:  BTFSC  xAC.1
084A4:  BRA    84E6
084A6:  BTFSC  xAC.2
084A8:  BRA    84E6
084AA:  BTFSC  xAC.3
084AC:  BRA    84E6
084AE:  BTFSC  xAC.4
084B0:  BRA    84E6
084B2:  BTFSC  xAC.5
084B4:  BRA    84E6
084B6:  BTFSC  xAC.6
084B8:  BRA    84E6
084BA:  BTFSC  xAC.7
084BC:  BRA    84E6
084BE:  BTFSC  xAD.0
084C0:  BRA    84E6
084C2:  BTFSC  xAD.1
084C4:  BRA    84E6
084C6:  BTFSC  xAD.2
084C8:  BRA    84E6
084CA:  BTFSC  xAD.3
084CC:  BRA    84E6
084CE:  BTFSC  xAD.4
084D0:  BRA    84E6
084D2:  BTFSC  xAD.5
084D4:  BRA    84E6
084D6:  BTFSC  xAD.6
084D8:  BRA    84E6
084DA:  BTFSC  xAD.7
084DC:  BRA    84E6
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
084DE:  BCF    F89.3
084E0:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
084E2:  BCF    F89.4
084E4:  BCF    F92.4
084E6:  MOVLB  C
....................       }
....................    }
....................    
.................... //}
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
084E8:  MOVLW  00
084EA:  MOVLB  B
084EC:  BTFSC  x9B.2
084EE:  MOVLW  01
084F0:  MOVLB  C
084F2:  MOVWF  x23
084F4:  MOVLW  00
084F6:  MOVLB  B
084F8:  BTFSC  x9F.2
084FA:  MOVLW  01
084FC:  MOVLB  C
084FE:  XORWF  x23,W
08500:  SUBLW  01
08502:  BNZ   850C
08504:  MOVLB  B
08506:  BTFSS  xA1.2
08508:  BRA    8512
0850A:  MOVLB  C
0850C:  BTFSS  1A.5
0850E:  BRA    856E
08510:  MOVLB  B
....................    {
....................       if(In2.B11 == 0 && AutoAck == 0x0F && Ack.B11 == 0)   //use auto acknowlegde
08512:  BTFSC  xAD.2
08514:  BRA    8532
08516:  MOVLB  0
08518:  MOVF   x6A,W
0851A:  SUBLW  0F
0851C:  BTFSC  FD8.2
0851E:  BRA    8524
08520:  MOVLB  B
08522:  BRA    8532
08524:  MOVLB  B
08526:  BTFSC  xA9.2
08528:  BRA    8532
....................       {
....................             TimeBase1s = 100 ;            //reload again
0852A:  MOVLW  64
0852C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0852E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B11 = 1;
08532:  BSF    xAD.2
....................       if(Ack.B11 == 0)
08534:  BTFSC  xA9.2
08536:  BRA    8566
....................       {
....................          if(FlashingFlag == 0)
08538:  BTFSC  1A.1
0853A:  BRA    8540
....................             {
....................                Output.B11 = 0;           //Flash output1
0853C:  BCF    x9D.2
....................             }
0853E:  BRA    8542
....................             else
....................             {
....................                Output.B11 = 1;
08540:  BSF    x9D.2
....................             }
....................          if (~AutoTestFlag)
08542:  BTFSC  1A.4
08544:  BRA    8566
....................          {
....................             if(AlarmIndicator.B11 == 1){
08546:  BTFSS  xA7.2
08548:  BRA    8566
....................                 if(OutputBoth.B11 == 0)        //Both output
0854A:  BTFSC  xA5.2
0854C:  BRA    8558
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0854E:  BSF    F89.4
08550:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08552:  BSF    F89.3
08554:  BCF    F92.3
....................                 }
08556:  BRA    8566
....................                 else
....................                 {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,1);     //Buzzer
08558:  BTFSS  xA3.2
0855A:  BRA    8562
0855C:  BSF    F89.4
0855E:  BCF    F92.4
08560:  BRA    8566
....................                   else output_bit(Pbell,1);                          //Bell
08562:  BSF    F89.3
08564:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08566:  MOVLW  01
08568:  MOVLB  C
0856A:  MOVWF  x17
....................    }
0856C:  BRA    8618
....................    else if(FaultType.B11 == 0)
0856E:  MOVLB  B
08570:  BTFSC  xA1.2
08572:  BRA    8616
....................    {
....................       In2.B11 = 0x00;
08574:  BCF    xAD.2
....................       Ack.B11 = 0;
08576:  BCF    xA9.2
....................       Output.B11 = 1;      //Off LED
08578:  BSF    x9D.2
.................... 
....................       if((OutputType.B11 == 1 || OutputBoth.B11 == 0)&& inputflag ==0)      //If Buzzer or Both
0857A:  BTFSC  xA3.2
0857C:  BRA    8582
0857E:  BTFSC  xA5.2
08580:  BRA    85A4
08582:  MOVLB  C
08584:  MOVF   x17,F
08586:  BTFSC  FD8.2
08588:  BRA    858E
0858A:  MOVLB  B
0858C:  BRA    85A4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0858E:  MOVLW  01
08590:  MOVWF  x22
08592:  MOVLB  0
08594:  CALL   5FC0
08598:  DECFSZ 01,W
0859A:  BRA    859E
0859C:  BRA    85A2
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0859E:  BCF    F89.4
085A0:  BCF    F92.4
085A2:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B11 == 0 || OutputBoth.B11 == 0)&& inputflag ==0)  //If Bell or Both
085A4:  BTFSS  xA3.2
085A6:  BRA    85AC
085A8:  BTFSC  xA5.2
085AA:  BRA    85CE
085AC:  MOVLB  C
085AE:  MOVF   x17,F
085B0:  BTFSC  FD8.2
085B2:  BRA    85B8
085B4:  MOVLB  B
085B6:  BRA    85CE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
085B8:  MOVLW  02
085BA:  MOVWF  x22
085BC:  MOVLB  0
085BE:  CALL   5FC0
085C2:  DECFSZ 01,W
085C4:  BRA    85C8
085C6:  BRA    85CC
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
085C8:  BCF    F89.3
085CA:  BCF    F92.3
085CC:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
085CE:  BTFSC  xAC.0
085D0:  BRA    8616
085D2:  BTFSC  xAC.1
085D4:  BRA    8616
085D6:  BTFSC  xAC.2
085D8:  BRA    8616
085DA:  BTFSC  xAC.3
085DC:  BRA    8616
085DE:  BTFSC  xAC.4
085E0:  BRA    8616
085E2:  BTFSC  xAC.5
085E4:  BRA    8616
085E6:  BTFSC  xAC.6
085E8:  BRA    8616
085EA:  BTFSC  xAC.7
085EC:  BRA    8616
085EE:  BTFSC  xAD.0
085F0:  BRA    8616
085F2:  BTFSC  xAD.1
085F4:  BRA    8616
085F6:  BTFSC  xAD.2
085F8:  BRA    8616
085FA:  BTFSC  xAD.3
085FC:  BRA    8616
085FE:  BTFSC  xAD.4
08600:  BRA    8616
08602:  BTFSC  xAD.5
08604:  BRA    8616
08606:  BTFSC  xAD.6
08608:  BRA    8616
0860A:  BTFSC  xAD.7
0860C:  BRA    8616
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0860E:  BCF    F89.3
08610:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08612:  BCF    F89.4
08614:  BCF    F92.4
08616:  MOVLB  C
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08618:  MOVLW  00
0861A:  MOVLB  B
0861C:  BTFSC  x9B.3
0861E:  MOVLW  01
08620:  MOVLB  C
08622:  MOVWF  x23
08624:  MOVLW  00
08626:  MOVLB  B
08628:  BTFSC  x9F.3
0862A:  MOVLW  01
0862C:  MOVLB  C
0862E:  XORWF  x23,W
08630:  SUBLW  01
08632:  BNZ   863C
08634:  MOVLB  B
08636:  BTFSS  xA1.3
08638:  BRA    8642
0863A:  MOVLB  C
0863C:  BTFSS  1A.5
0863E:  BRA    869E
08640:  MOVLB  B
....................    {
....................       if(In2.B12 == 0 && AutoAck == 0x0F && Ack.B12 == 0)   //use auto acknowlegde
08642:  BTFSC  xAD.3
08644:  BRA    8662
08646:  MOVLB  0
08648:  MOVF   x6A,W
0864A:  SUBLW  0F
0864C:  BTFSC  FD8.2
0864E:  BRA    8654
08650:  MOVLB  B
08652:  BRA    8662
08654:  MOVLB  B
08656:  BTFSC  xA9.3
08658:  BRA    8662
....................       {
....................             TimeBase1s = 100 ;            //reload again
0865A:  MOVLW  64
0865C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0865E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B12 = 1;
08662:  BSF    xAD.3
....................       if(Ack.B12 == 0)
08664:  BTFSC  xA9.3
08666:  BRA    8696
....................       {
....................          if(FlashingFlag == 0)
08668:  BTFSC  1A.1
0866A:  BRA    8670
....................             {
....................                Output.B12 = 0;           //Flash output1
0866C:  BCF    x9D.3
....................             }
0866E:  BRA    8672
....................             else
....................             {
....................                Output.B12 = 1;
08670:  BSF    x9D.3
....................             }
....................          if (~AutoTestFlag)
08672:  BTFSC  1A.4
08674:  BRA    8696
....................          {
....................             if(AlarmIndicator.B12 == 1){
08676:  BTFSS  xA7.3
08678:  BRA    8696
....................                 if(OutputBoth.B12 == 0)        //Both output
0867A:  BTFSC  xA5.3
0867C:  BRA    8688
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0867E:  BSF    F89.4
08680:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08682:  BSF    F89.3
08684:  BCF    F92.3
....................                 }
08686:  BRA    8696
....................                 else
....................                 {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,1);     //Buzzer
08688:  BTFSS  xA3.3
0868A:  BRA    8692
0868C:  BSF    F89.4
0868E:  BCF    F92.4
08690:  BRA    8696
....................                   else output_bit(Pbell,1);                          //Bell
08692:  BSF    F89.3
08694:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08696:  MOVLW  01
08698:  MOVLB  C
0869A:  MOVWF  x17
....................    }
0869C:  BRA    8748
....................    else if(FaultType.B12 == 0)
0869E:  MOVLB  B
086A0:  BTFSC  xA1.3
086A2:  BRA    8746
....................    {
....................       In2.B12 = 0x00;
086A4:  BCF    xAD.3
....................       Ack.B12 = 0;
086A6:  BCF    xA9.3
....................       Output.B12 = 1;      //Off LED
086A8:  BSF    x9D.3
.................... 
....................       if((OutputType.B12 == 1 || OutputBoth.B12 == 0)&& inputflag ==0)      //If Buzzer or Both
086AA:  BTFSC  xA3.3
086AC:  BRA    86B2
086AE:  BTFSC  xA5.3
086B0:  BRA    86D4
086B2:  MOVLB  C
086B4:  MOVF   x17,F
086B6:  BTFSC  FD8.2
086B8:  BRA    86BE
086BA:  MOVLB  B
086BC:  BRA    86D4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
086BE:  MOVLW  01
086C0:  MOVWF  x22
086C2:  MOVLB  0
086C4:  CALL   5FC0
086C8:  DECFSZ 01,W
086CA:  BRA    86CE
086CC:  BRA    86D2
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
086CE:  BCF    F89.4
086D0:  BCF    F92.4
086D2:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B12 == 0 || OutputBoth.B12 == 0)&& inputflag ==0)  //If Bell or Both
086D4:  BTFSS  xA3.3
086D6:  BRA    86DC
086D8:  BTFSC  xA5.3
086DA:  BRA    86FE
086DC:  MOVLB  C
086DE:  MOVF   x17,F
086E0:  BTFSC  FD8.2
086E2:  BRA    86E8
086E4:  MOVLB  B
086E6:  BRA    86FE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
086E8:  MOVLW  02
086EA:  MOVWF  x22
086EC:  MOVLB  0
086EE:  CALL   5FC0
086F2:  DECFSZ 01,W
086F4:  BRA    86F8
086F6:  BRA    86FC
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
086F8:  BCF    F89.3
086FA:  BCF    F92.3
086FC:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
086FE:  BTFSC  xAC.0
08700:  BRA    8746
08702:  BTFSC  xAC.1
08704:  BRA    8746
08706:  BTFSC  xAC.2
08708:  BRA    8746
0870A:  BTFSC  xAC.3
0870C:  BRA    8746
0870E:  BTFSC  xAC.4
08710:  BRA    8746
08712:  BTFSC  xAC.5
08714:  BRA    8746
08716:  BTFSC  xAC.6
08718:  BRA    8746
0871A:  BTFSC  xAC.7
0871C:  BRA    8746
0871E:  BTFSC  xAD.0
08720:  BRA    8746
08722:  BTFSC  xAD.1
08724:  BRA    8746
08726:  BTFSC  xAD.2
08728:  BRA    8746
0872A:  BTFSC  xAD.3
0872C:  BRA    8746
0872E:  BTFSC  xAD.4
08730:  BRA    8746
08732:  BTFSC  xAD.5
08734:  BRA    8746
08736:  BTFSC  xAD.6
08738:  BRA    8746
0873A:  BTFSC  xAD.7
0873C:  BRA    8746
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0873E:  BCF    F89.3
08740:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08742:  BCF    F89.4
08744:  BCF    F92.4
08746:  MOVLB  C
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08748:  MOVLW  00
0874A:  MOVLB  B
0874C:  BTFSC  x9B.4
0874E:  MOVLW  01
08750:  MOVLB  C
08752:  MOVWF  x23
08754:  MOVLW  00
08756:  MOVLB  B
08758:  BTFSC  x9F.4
0875A:  MOVLW  01
0875C:  MOVLB  C
0875E:  XORWF  x23,W
08760:  SUBLW  01
08762:  BNZ   876C
08764:  MOVLB  B
08766:  BTFSS  xA1.4
08768:  BRA    8772
0876A:  MOVLB  C
0876C:  BTFSS  1A.5
0876E:  BRA    87CE
08770:  MOVLB  B
....................    {
....................       if(In2.B13 == 0 && AutoAck == 0x0F && Ack.B13 == 0)   //use auto acknowlegde
08772:  BTFSC  xAD.4
08774:  BRA    8792
08776:  MOVLB  0
08778:  MOVF   x6A,W
0877A:  SUBLW  0F
0877C:  BTFSC  FD8.2
0877E:  BRA    8784
08780:  MOVLB  B
08782:  BRA    8792
08784:  MOVLB  B
08786:  BTFSC  xA9.4
08788:  BRA    8792
....................       {
....................             TimeBase1s = 100 ;            //reload again
0878A:  MOVLW  64
0878C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0878E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B13 = 1;
08792:  BSF    xAD.4
....................       if(Ack.B13 == 0)
08794:  BTFSC  xA9.4
08796:  BRA    87C6
....................       {
....................          if(FlashingFlag == 0)
08798:  BTFSC  1A.1
0879A:  BRA    87A0
....................             {
....................                Output.B13 = 0;           //Flash output1
0879C:  BCF    x9D.4
....................             }
0879E:  BRA    87A2
....................             else
....................             {
....................                Output.B13 = 1;
087A0:  BSF    x9D.4
....................             }
....................          if (~AutoTestFlag)
087A2:  BTFSC  1A.4
087A4:  BRA    87C6
....................          {
....................             if(AlarmIndicator.B13 == 1){
087A6:  BTFSS  xA7.4
087A8:  BRA    87C6
....................                 if(OutputBoth.B13 == 0)        //Both output
087AA:  BTFSC  xA5.4
087AC:  BRA    87B8
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
087AE:  BSF    F89.4
087B0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
087B2:  BSF    F89.3
087B4:  BCF    F92.3
....................                 }
087B6:  BRA    87C6
....................                 else
....................                 {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,1);     //Buzzer
087B8:  BTFSS  xA3.4
087BA:  BRA    87C2
087BC:  BSF    F89.4
087BE:  BCF    F92.4
087C0:  BRA    87C6
....................                   else output_bit(Pbell,1);                          //Bell
087C2:  BSF    F89.3
087C4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
087C6:  MOVLW  01
087C8:  MOVLB  C
087CA:  MOVWF  x17
....................    }
087CC:  BRA    8878
....................    else if(FaultType.B13 == 0)
087CE:  MOVLB  B
087D0:  BTFSC  xA1.4
087D2:  BRA    8876
....................    {
....................       In2.B13 = 0x00;
087D4:  BCF    xAD.4
....................       Ack.B13 = 0;
087D6:  BCF    xA9.4
....................       Output.B13 = 1;      //Off LED
087D8:  BSF    x9D.4
.................... 
....................       if((OutputType.B13 == 1 || OutputBoth.B13 == 0)&& inputflag ==0)      //If Buzzer or Both
087DA:  BTFSC  xA3.4
087DC:  BRA    87E2
087DE:  BTFSC  xA5.4
087E0:  BRA    8804
087E2:  MOVLB  C
087E4:  MOVF   x17,F
087E6:  BTFSC  FD8.2
087E8:  BRA    87EE
087EA:  MOVLB  B
087EC:  BRA    8804
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
087EE:  MOVLW  01
087F0:  MOVWF  x22
087F2:  MOVLB  0
087F4:  CALL   5FC0
087F8:  DECFSZ 01,W
087FA:  BRA    87FE
087FC:  BRA    8802
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
087FE:  BCF    F89.4
08800:  BCF    F92.4
08802:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B13 == 0 || OutputBoth.B13 == 0)&& inputflag ==0)  //If Bell or Both
08804:  BTFSS  xA3.4
08806:  BRA    880C
08808:  BTFSC  xA5.4
0880A:  BRA    882E
0880C:  MOVLB  C
0880E:  MOVF   x17,F
08810:  BTFSC  FD8.2
08812:  BRA    8818
08814:  MOVLB  B
08816:  BRA    882E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08818:  MOVLW  02
0881A:  MOVWF  x22
0881C:  MOVLB  0
0881E:  CALL   5FC0
08822:  DECFSZ 01,W
08824:  BRA    8828
08826:  BRA    882C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08828:  BCF    F89.3
0882A:  BCF    F92.3
0882C:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0882E:  BTFSC  xAC.0
08830:  BRA    8876
08832:  BTFSC  xAC.1
08834:  BRA    8876
08836:  BTFSC  xAC.2
08838:  BRA    8876
0883A:  BTFSC  xAC.3
0883C:  BRA    8876
0883E:  BTFSC  xAC.4
08840:  BRA    8876
08842:  BTFSC  xAC.5
08844:  BRA    8876
08846:  BTFSC  xAC.6
08848:  BRA    8876
0884A:  BTFSC  xAC.7
0884C:  BRA    8876
0884E:  BTFSC  xAD.0
08850:  BRA    8876
08852:  BTFSC  xAD.1
08854:  BRA    8876
08856:  BTFSC  xAD.2
08858:  BRA    8876
0885A:  BTFSC  xAD.3
0885C:  BRA    8876
0885E:  BTFSC  xAD.4
08860:  BRA    8876
08862:  BTFSC  xAD.5
08864:  BRA    8876
08866:  BTFSC  xAD.6
08868:  BRA    8876
0886A:  BTFSC  xAD.7
0886C:  BRA    8876
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0886E:  BCF    F89.3
08870:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08872:  BCF    F89.4
08874:  BCF    F92.4
08876:  MOVLB  C
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08878:  MOVLW  00
0887A:  MOVLB  B
0887C:  BTFSC  x9B.5
0887E:  MOVLW  01
08880:  MOVLB  C
08882:  MOVWF  x23
08884:  MOVLW  00
08886:  MOVLB  B
08888:  BTFSC  x9F.5
0888A:  MOVLW  01
0888C:  MOVLB  C
0888E:  XORWF  x23,W
08890:  SUBLW  01
08892:  BNZ   889C
08894:  MOVLB  B
08896:  BTFSS  xA1.5
08898:  BRA    88A2
0889A:  MOVLB  C
0889C:  BTFSS  1A.5
0889E:  BRA    88FE
088A0:  MOVLB  B
....................    {
....................       if(In2.B14 == 0 && AutoAck == 0x0F && Ack.B14 == 0)   //use auto acknowlegde
088A2:  BTFSC  xAD.5
088A4:  BRA    88C2
088A6:  MOVLB  0
088A8:  MOVF   x6A,W
088AA:  SUBLW  0F
088AC:  BTFSC  FD8.2
088AE:  BRA    88B4
088B0:  MOVLB  B
088B2:  BRA    88C2
088B4:  MOVLB  B
088B6:  BTFSC  xA9.5
088B8:  BRA    88C2
....................       {
....................             TimeBase1s = 100 ;            //reload again
088BA:  MOVLW  64
088BC:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
088BE:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B14 = 1;
088C2:  BSF    xAD.5
....................       if(Ack.B14 == 0)
088C4:  BTFSC  xA9.5
088C6:  BRA    88F6
....................       {
....................          if(FlashingFlag == 0)
088C8:  BTFSC  1A.1
088CA:  BRA    88D0
....................             {
....................                Output.B14 = 0;           //Flash output1
088CC:  BCF    x9D.5
....................             }
088CE:  BRA    88D2
....................             else
....................             {
....................                Output.B14 = 1;
088D0:  BSF    x9D.5
....................             }
....................          if (~AutoTestFlag)
088D2:  BTFSC  1A.4
088D4:  BRA    88F6
....................          {
....................             if(AlarmIndicator.B14 == 1){
088D6:  BTFSS  xA7.5
088D8:  BRA    88F6
....................                 if(OutputBoth.B14 == 0)        //Both output
088DA:  BTFSC  xA5.5
088DC:  BRA    88E8
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
088DE:  BSF    F89.4
088E0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
088E2:  BSF    F89.3
088E4:  BCF    F92.3
....................                 }
088E6:  BRA    88F6
....................                 else
....................                 {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,1);     //Buzzer
088E8:  BTFSS  xA3.5
088EA:  BRA    88F2
088EC:  BSF    F89.4
088EE:  BCF    F92.4
088F0:  BRA    88F6
....................                   else output_bit(Pbell,1);                          //Bell
088F2:  BSF    F89.3
088F4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
088F6:  MOVLW  01
088F8:  MOVLB  C
088FA:  MOVWF  x17
....................    }
088FC:  BRA    89A8
....................    else if(FaultType.B14 == 0)
088FE:  MOVLB  B
08900:  BTFSC  xA1.5
08902:  BRA    89A6
....................    {
....................       In2.B14 = 0x00;
08904:  BCF    xAD.5
....................       Ack.B14 = 0;
08906:  BCF    xA9.5
....................       Output.B14 = 1;      //Off LED
08908:  BSF    x9D.5
.................... 
....................       if((OutputType.B14 == 1 || OutputBoth.B14 == 0)&& inputflag ==0)      //If Buzzer or Both
0890A:  BTFSC  xA3.5
0890C:  BRA    8912
0890E:  BTFSC  xA5.5
08910:  BRA    8934
08912:  MOVLB  C
08914:  MOVF   x17,F
08916:  BTFSC  FD8.2
08918:  BRA    891E
0891A:  MOVLB  B
0891C:  BRA    8934
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0891E:  MOVLW  01
08920:  MOVWF  x22
08922:  MOVLB  0
08924:  CALL   5FC0
08928:  DECFSZ 01,W
0892A:  BRA    892E
0892C:  BRA    8932
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0892E:  BCF    F89.4
08930:  BCF    F92.4
08932:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B14 == 0 || OutputBoth.B14 == 0)&& inputflag ==0)  //If Bell or Both
08934:  BTFSS  xA3.5
08936:  BRA    893C
08938:  BTFSC  xA5.5
0893A:  BRA    895E
0893C:  MOVLB  C
0893E:  MOVF   x17,F
08940:  BTFSC  FD8.2
08942:  BRA    8948
08944:  MOVLB  B
08946:  BRA    895E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08948:  MOVLW  02
0894A:  MOVWF  x22
0894C:  MOVLB  0
0894E:  CALL   5FC0
08952:  DECFSZ 01,W
08954:  BRA    8958
08956:  BRA    895C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08958:  BCF    F89.3
0895A:  BCF    F92.3
0895C:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0895E:  BTFSC  xAC.0
08960:  BRA    89A6
08962:  BTFSC  xAC.1
08964:  BRA    89A6
08966:  BTFSC  xAC.2
08968:  BRA    89A6
0896A:  BTFSC  xAC.3
0896C:  BRA    89A6
0896E:  BTFSC  xAC.4
08970:  BRA    89A6
08972:  BTFSC  xAC.5
08974:  BRA    89A6
08976:  BTFSC  xAC.6
08978:  BRA    89A6
0897A:  BTFSC  xAC.7
0897C:  BRA    89A6
0897E:  BTFSC  xAD.0
08980:  BRA    89A6
08982:  BTFSC  xAD.1
08984:  BRA    89A6
08986:  BTFSC  xAD.2
08988:  BRA    89A6
0898A:  BTFSC  xAD.3
0898C:  BRA    89A6
0898E:  BTFSC  xAD.4
08990:  BRA    89A6
08992:  BTFSC  xAD.5
08994:  BRA    89A6
08996:  BTFSC  xAD.6
08998:  BRA    89A6
0899A:  BTFSC  xAD.7
0899C:  BRA    89A6
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0899E:  BCF    F89.3
089A0:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
089A2:  BCF    F89.4
089A4:  BCF    F92.4
089A6:  MOVLB  C
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
089A8:  MOVLW  00
089AA:  MOVLB  B
089AC:  BTFSC  x9B.6
089AE:  MOVLW  01
089B0:  MOVLB  C
089B2:  MOVWF  x23
089B4:  MOVLW  00
089B6:  MOVLB  B
089B8:  BTFSC  x9F.6
089BA:  MOVLW  01
089BC:  MOVLB  C
089BE:  XORWF  x23,W
089C0:  SUBLW  01
089C2:  BNZ   89CC
089C4:  MOVLB  B
089C6:  BTFSS  xA1.6
089C8:  BRA    89D2
089CA:  MOVLB  C
089CC:  BTFSS  1A.5
089CE:  BRA    8A2E
089D0:  MOVLB  B
....................    {
....................       if(In2.B15 == 0 && AutoAck == 0x0F && Ack.B15 == 0)   //use auto acknowlegde
089D2:  BTFSC  xAD.6
089D4:  BRA    89F2
089D6:  MOVLB  0
089D8:  MOVF   x6A,W
089DA:  SUBLW  0F
089DC:  BTFSC  FD8.2
089DE:  BRA    89E4
089E0:  MOVLB  B
089E2:  BRA    89F2
089E4:  MOVLB  B
089E6:  BTFSC  xA9.6
089E8:  BRA    89F2
....................       {
....................             TimeBase1s = 100 ;            //reload again
089EA:  MOVLW  64
089EC:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
089EE:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B15 = 1;
089F2:  BSF    xAD.6
....................       if(Ack.B15 == 0)
089F4:  BTFSC  xA9.6
089F6:  BRA    8A26
....................       {
....................          if(FlashingFlag == 0)
089F8:  BTFSC  1A.1
089FA:  BRA    8A00
....................             {
....................                Output.B15 = 0;           //Flash output1
089FC:  BCF    x9D.6
....................             }
089FE:  BRA    8A02
....................             else
....................             {
....................                Output.B15 = 1;
08A00:  BSF    x9D.6
....................             }
....................          if (~AutoTestFlag)
08A02:  BTFSC  1A.4
08A04:  BRA    8A26
....................          {
....................             if(AlarmIndicator.B15 == 1){
08A06:  BTFSS  xA7.6
08A08:  BRA    8A26
....................                 if(OutputBoth.B15 == 0)        //Both output
08A0A:  BTFSC  xA5.6
08A0C:  BRA    8A18
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
08A0E:  BSF    F89.4
08A10:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08A12:  BSF    F89.3
08A14:  BCF    F92.3
....................                 }
08A16:  BRA    8A26
....................                 else
....................                 {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,1);     //Buzzer
08A18:  BTFSS  xA3.6
08A1A:  BRA    8A22
08A1C:  BSF    F89.4
08A1E:  BCF    F92.4
08A20:  BRA    8A26
....................                   else output_bit(Pbell,1);                          //Bell
08A22:  BSF    F89.3
08A24:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08A26:  MOVLW  01
08A28:  MOVLB  C
08A2A:  MOVWF  x17
....................    }
08A2C:  BRA    8AD8
....................    else if(FaultType.B15 == 0)
08A2E:  MOVLB  B
08A30:  BTFSC  xA1.6
08A32:  BRA    8AD6
....................    {
....................       In2.B15 = 0x00;
08A34:  BCF    xAD.6
....................       Ack.B15 = 0;
08A36:  BCF    xA9.6
....................       Output.B15 = 1;      //Off LED
08A38:  BSF    x9D.6
.................... 
....................       if((OutputType.B15 == 1 || OutputBoth.B15 == 0)&& inputflag ==0)      //If Buzzer or Both
08A3A:  BTFSC  xA3.6
08A3C:  BRA    8A42
08A3E:  BTFSC  xA5.6
08A40:  BRA    8A64
08A42:  MOVLB  C
08A44:  MOVF   x17,F
08A46:  BTFSC  FD8.2
08A48:  BRA    8A4E
08A4A:  MOVLB  B
08A4C:  BRA    8A64
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
08A4E:  MOVLW  01
08A50:  MOVWF  x22
08A52:  MOVLB  0
08A54:  CALL   5FC0
08A58:  DECFSZ 01,W
08A5A:  BRA    8A5E
08A5C:  BRA    8A62
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
08A5E:  BCF    F89.4
08A60:  BCF    F92.4
08A62:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B15 == 0 || OutputBoth.B15 == 0)&& inputflag ==0)  //If Bell or Both
08A64:  BTFSS  xA3.6
08A66:  BRA    8A6C
08A68:  BTFSC  xA5.6
08A6A:  BRA    8A8E
08A6C:  MOVLB  C
08A6E:  MOVF   x17,F
08A70:  BTFSC  FD8.2
08A72:  BRA    8A78
08A74:  MOVLB  B
08A76:  BRA    8A8E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08A78:  MOVLW  02
08A7A:  MOVWF  x22
08A7C:  MOVLB  0
08A7E:  CALL   5FC0
08A82:  DECFSZ 01,W
08A84:  BRA    8A88
08A86:  BRA    8A8C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08A88:  BCF    F89.3
08A8A:  BCF    F92.3
08A8C:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
08A8E:  BTFSC  xAC.0
08A90:  BRA    8AD6
08A92:  BTFSC  xAC.1
08A94:  BRA    8AD6
08A96:  BTFSC  xAC.2
08A98:  BRA    8AD6
08A9A:  BTFSC  xAC.3
08A9C:  BRA    8AD6
08A9E:  BTFSC  xAC.4
08AA0:  BRA    8AD6
08AA2:  BTFSC  xAC.5
08AA4:  BRA    8AD6
08AA6:  BTFSC  xAC.6
08AA8:  BRA    8AD6
08AAA:  BTFSC  xAC.7
08AAC:  BRA    8AD6
08AAE:  BTFSC  xAD.0
08AB0:  BRA    8AD6
08AB2:  BTFSC  xAD.1
08AB4:  BRA    8AD6
08AB6:  BTFSC  xAD.2
08AB8:  BRA    8AD6
08ABA:  BTFSC  xAD.3
08ABC:  BRA    8AD6
08ABE:  BTFSC  xAD.4
08AC0:  BRA    8AD6
08AC2:  BTFSC  xAD.5
08AC4:  BRA    8AD6
08AC6:  BTFSC  xAD.6
08AC8:  BRA    8AD6
08ACA:  BTFSC  xAD.7
08ACC:  BRA    8AD6
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
08ACE:  BCF    F89.3
08AD0:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08AD2:  BCF    F89.4
08AD4:  BCF    F92.4
08AD6:  MOVLB  C
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
08AD8:  MOVLW  00
08ADA:  MOVLB  B
08ADC:  BTFSC  x9B.7
08ADE:  MOVLW  01
08AE0:  MOVLB  C
08AE2:  MOVWF  x23
08AE4:  MOVLW  00
08AE6:  MOVLB  B
08AE8:  BTFSC  x9F.7
08AEA:  MOVLW  01
08AEC:  MOVLB  C
08AEE:  XORWF  x23,W
08AF0:  SUBLW  01
08AF2:  BNZ   8AFC
08AF4:  MOVLB  B
08AF6:  BTFSS  xA1.7
08AF8:  BRA    8B02
08AFA:  MOVLB  C
08AFC:  BTFSS  1A.5
08AFE:  BRA    8B5E
08B00:  MOVLB  B
....................    {
....................       if(In2.B16 == 0 && AutoAck == 0x0F && Ack.B16 == 0)   //use auto acknowlegde
08B02:  BTFSC  xAD.7
08B04:  BRA    8B22
08B06:  MOVLB  0
08B08:  MOVF   x6A,W
08B0A:  SUBLW  0F
08B0C:  BTFSC  FD8.2
08B0E:  BRA    8B14
08B10:  MOVLB  B
08B12:  BRA    8B22
08B14:  MOVLB  B
08B16:  BTFSC  xA9.7
08B18:  BRA    8B22
....................       {
....................             TimeBase1s = 100 ;            //reload again
08B1A:  MOVLW  64
08B1C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
08B1E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B16 = 1;
08B22:  BSF    xAD.7
....................       if(Ack.B16 == 0)
08B24:  BTFSC  xA9.7
08B26:  BRA    8B56
....................       {
....................          if(FlashingFlag == 0)
08B28:  BTFSC  1A.1
08B2A:  BRA    8B30
....................             {
....................                Output.B16 = 0;         //Flash output1
08B2C:  BCF    x9D.7
....................             }
08B2E:  BRA    8B32
....................             else
....................             {
....................                Output.B16 = 1;
08B30:  BSF    x9D.7
....................             }
....................          if (~AutoTestFlag)
08B32:  BTFSC  1A.4
08B34:  BRA    8B56
....................          {
....................             if(AlarmIndicator.B16 == 1){
08B36:  BTFSS  xA7.7
08B38:  BRA    8B56
....................                 if(OutputBoth.B16 == 0)        //Both output
08B3A:  BTFSC  xA5.7
08B3C:  BRA    8B48
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
08B3E:  BSF    F89.4
08B40:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
08B42:  BSF    F89.3
08B44:  BCF    F92.3
....................                 }
08B46:  BRA    8B56
....................                 else
....................                 {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,1);     //Buzzer
08B48:  BTFSS  xA3.7
08B4A:  BRA    8B52
08B4C:  BSF    F89.4
08B4E:  BCF    F92.4
08B50:  BRA    8B56
....................                   else output_bit(Pbell,1);                          //Bell
08B52:  BSF    F89.3
08B54:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
08B56:  MOVLW  01
08B58:  MOVLB  C
08B5A:  MOVWF  x17
....................    }
08B5C:  BRA    8C08
....................    else if(FaultType.B16 == 0)
08B5E:  MOVLB  B
08B60:  BTFSC  xA1.7
08B62:  BRA    8C06
....................    {
....................       In2.B16 = 0x00;
08B64:  BCF    xAD.7
....................       Ack.B16 = 0;
08B66:  BCF    xA9.7
....................       Output.B16 = 1;      //Off LED
08B68:  BSF    x9D.7
.................... 
....................       if((OutputType.B16 == 1 || OutputBoth.B16 == 0)&& inputflag ==0)      //If Buzzer or Both
08B6A:  BTFSC  xA3.7
08B6C:  BRA    8B72
08B6E:  BTFSC  xA5.7
08B70:  BRA    8B94
08B72:  MOVLB  C
08B74:  MOVF   x17,F
08B76:  BTFSC  FD8.2
08B78:  BRA    8B7E
08B7A:  MOVLB  B
08B7C:  BRA    8B94
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
08B7E:  MOVLW  01
08B80:  MOVWF  x22
08B82:  MOVLB  0
08B84:  CALL   5FC0
08B88:  DECFSZ 01,W
08B8A:  BRA    8B8E
08B8C:  BRA    8B92
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
08B8E:  BCF    F89.4
08B90:  BCF    F92.4
08B92:  MOVLB  B
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B16 == 0 || OutputBoth.B16 == 0)&& inputflag ==0)  //If Bell or Both
08B94:  BTFSS  xA3.7
08B96:  BRA    8B9C
08B98:  BTFSC  xA5.7
08B9A:  BRA    8BBE
08B9C:  MOVLB  C
08B9E:  MOVF   x17,F
08BA0:  BTFSC  FD8.2
08BA2:  BRA    8BA8
08BA4:  MOVLB  B
08BA6:  BRA    8BBE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
08BA8:  MOVLW  02
08BAA:  MOVWF  x22
08BAC:  MOVLB  0
08BAE:  CALL   5FC0
08BB2:  DECFSZ 01,W
08BB4:  BRA    8BB8
08BB6:  BRA    8BBC
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
08BB8:  BCF    F89.3
08BBA:  BCF    F92.3
08BBC:  MOVLB  B
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
08BBE:  BTFSC  xAC.0
08BC0:  BRA    8C06
08BC2:  BTFSC  xAC.1
08BC4:  BRA    8C06
08BC6:  BTFSC  xAC.2
08BC8:  BRA    8C06
08BCA:  BTFSC  xAC.3
08BCC:  BRA    8C06
08BCE:  BTFSC  xAC.4
08BD0:  BRA    8C06
08BD2:  BTFSC  xAC.5
08BD4:  BRA    8C06
08BD6:  BTFSC  xAC.6
08BD8:  BRA    8C06
08BDA:  BTFSC  xAC.7
08BDC:  BRA    8C06
08BDE:  BTFSC  xAD.0
08BE0:  BRA    8C06
08BE2:  BTFSC  xAD.1
08BE4:  BRA    8C06
08BE6:  BTFSC  xAD.2
08BE8:  BRA    8C06
08BEA:  BTFSC  xAD.3
08BEC:  BRA    8C06
08BEE:  BTFSC  xAD.4
08BF0:  BRA    8C06
08BF2:  BTFSC  xAD.5
08BF4:  BRA    8C06
08BF6:  BTFSC  xAD.6
08BF8:  BRA    8C06
08BFA:  BTFSC  xAD.7
08BFC:  BRA    8C06
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
08BFE:  BCF    F89.3
08C00:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
08C02:  BCF    F89.4
08C04:  BCF    F92.4
08C06:  MOVLB  C
....................       }
....................    }
08C08:  MOVLB  0
08C0A:  RETURN 0
....................    
....................    /*
.................... //input17
....................    if(((Inputt.B17 ^ InputType.B17) == 1) && (FaultType.B17 == 0))    // alarm1 occure and " Non Lock type"
....................    {
....................       if(In2.B17 == 0 && AutoAck == 0x0F && Ack.B17 == 0)   //use auto acknowlegde
....................       {
....................             TimeBase1s = 100 ;            //reload again
....................             AutoAckDelayTime = AutoAckTime ;
....................       }
.................... 
....................       In2.B17 = 1;
....................       if(Ack.B17 == 0)
....................       {
....................          if(FlashingFlag == 0)
....................             {
....................                Output.B17 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B17 = 1;
....................             }
....................          if (~AutoTestFlag)
....................          {
....................              if(OutputBoth.B17 == 0)        //Both output
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
....................                output_bit(Pbell,1);     //Bell
....................              }
....................              else
....................              {
....................                if(OutputType.B17 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                else output_bit(Pbell,1);                          //Bell
....................              }
....................          }
....................        }
.................... 
....................    }
....................    else if(FaultType.B17 == 0)
....................    {
....................       In2.B17 = 0x00;
....................       Ack.B17 = 0;
....................       Output.B17 = 1;      //Off LED
.................... 
....................       if(OutputType.B17 == 1 || OutputBoth.B17 == 0)      //If Buzzer or Both
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
....................          }
....................       }
.................... 
.................... 
....................       if(OutputType.B17 == 0 || OutputBoth.B17 == 0)  //If Bell or Both
....................       {
....................          if(CheckAutoReset(0x02) == 1);
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
....................          }
....................       }
....................    }
.................... //input18
....................    if(((Inputt.B18 ^ InputType.B18) == 1) && (FaultType.B18 == 0))    // alarm1 occure and " Non Lock type"
....................    {
....................       if(In2.B18 == 0 && AutoAck == 0x0F && Ack.B18 == 0)   //use auto acknowlegde
....................       {
....................             TimeBase1s = 100 ;            //reload again
....................             AutoAckDelayTime = AutoAckTime ;
....................       }
.................... 
....................       In2.B18 = 1;
....................       if(Ack.B18 == 0)
....................       {
....................          if(FlashingFlag == 0)
....................             {
....................                Output.B18 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B18 = 1;
....................             }
....................          if (~AutoTestFlag)
....................          {
....................              if(OutputBoth.B18 == 0)        //Both output
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
....................                output_bit(Pbell,1);     //Bell
....................              }
....................              else
....................              {
....................                if(OutputType.B18 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                else output_bit(Pbell,1);                          //Bell
....................              }
....................          }
....................        }
.................... 
....................    }
....................    else if(FaultType.B18 == 0)
....................    {
....................       In2.B18 = 0x00;
....................       Ack.B18 = 0;
....................       Output.B18 = 1;      //Off LED
.................... 
....................       if(OutputType.B18== 1 || OutputBoth.B18 == 0)      //If Buzzer or Both
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
....................          }
....................       }
.................... 
.................... 
....................       if(OutputType.B18 == 0 || OutputBoth.B18 == 0)  //If Bell or Both
....................       {
....................          if(CheckAutoReset(0x02) == 1);
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
....................          }
....................       }
....................    }
.................... //input19
....................    if(((Inputt.B19 ^ InputType.B19) == 1) && (FaultType.B19 == 0))    // alarm1 occure and " Non Lock type"
....................    {
....................       if(In2.B19 == 0 && AutoAck == 0x0F && Ack.B19 == 0)   //use auto acknowlegde
....................       {
....................             TimeBase1s = 100 ;            //reload again
....................             AutoAckDelayTime = AutoAckTime ;
....................       }
.................... 
....................       In2.B19 = 1;
....................       if(Ack.B19 == 0)
....................       {
....................          if(FlashingFlag == 0)
....................             {
....................                Output.B19 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B19 = 1;
....................             }
....................          if (~AutoTestFlag)
....................          {
....................              if(OutputBoth.B19 == 0)        //Both output
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
....................                output_bit(Pbell,1);     //Bell
....................              }
....................              else
....................              {
....................                if(OutputType.B19 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                else output_bit(Pbell,1);                          //Bell
....................              }
....................          }
....................        }
.................... 
....................    }
....................    else if(FaultType.B19 == 0)
....................    {
....................       In2.B19 = 0x00;
....................       Ack.B19 = 0;
....................       Output.B19 = 1;      //Off LED
.................... 
....................       if(OutputType.B19== 1 || OutputBoth.B19 == 0)      //If Buzzer or Both
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
....................          }
....................       }
.................... 
.................... 
....................       if(OutputType.B19 == 0 || OutputBoth.B19== 0)  //If Bell or Both
....................       {
....................          if(CheckAutoReset(0x02) == 1);
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
....................          }
....................       }
....................    }
....................    //input20
....................    if(((Inputt.B20 ^ InputType.B20) == 1) && (FaultType.B20 == 0))    // alarm1 occure and " Non Lock type"
....................    {
....................       if(In2.B20 == 0 && AutoAck == 0x0F && Ack.B20 == 0)   //use auto acknowlegde
....................       {
....................             TimeBase1s = 100 ;            //reload again
....................             AutoAckDelayTime = AutoAckTime ;
....................       }
.................... 
....................       In2.B20 = 1;
....................       if(Ack.B20 == 0)
....................       {
....................          if(FlashingFlag == 0)
....................             {
....................                Output.B20 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B20 = 1;
....................             }
....................          if (~AutoTestFlag)
....................          {
....................              if(OutputBoth.B20 == 0)        //Both output
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
....................                output_bit(Pbell,1);     //Bell
....................              }
....................              else
....................              {
....................                if(OutputType.B20 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                else output_bit(Pbell,1);                          //Bell
....................              }
....................          }
....................        }
.................... 
....................    }
....................    else if(FaultType.B20 == 0)
....................    {
....................       In2.B20 = 0x00;
....................       Ack.B20 = 0;
....................       Output.B20 = 1;      //Off LED
.................... 
....................       if(OutputType.B20== 1 || OutputBoth.B20 == 0)      //If Buzzer or Both
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
....................          }
....................       }
.................... 
.................... 
....................       if(OutputType.B20 == 0 || OutputBoth.B20 == 0)  //If Bell or Both
....................       {
....................          if(CheckAutoReset(0x02) == 1);
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
....................          }
....................       }
....................    }
....................    */
....................  //}
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Send_Ouput(void)
.................... {
....................     Red1_7 = 0;
*
0283A:  CLRF   4E
....................     Red8_8 = 0;
0283C:  CLRF   4F
....................     Red9_15 = 0;
0283E:  CLRF   50
....................     Red16_16 = 0;
02840:  CLRF   51
.................... 
....................     Green1_7 = 0;
02842:  CLRF   52
....................     Green8_8 = 0;
02844:  CLRF   53
....................     Green9_15 = 0;
02846:  CLRF   54
....................     Green16_16 = 0;
02848:  CLRF   55
.................... 
....................    if(T_test == 0x00)
0284A:  MOVF   2F,F
0284C:  BTFSS  FD8.2
0284E:  BRA    2BE2
....................    {
....................       //if(NoOfPoint >= 10)
....................       //{
....................       
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
02850:  MOVLB  B
02852:  BTFSS  x9C.0
02854:  BRA    285C
....................            {
....................              bit_clear(Red1_7,1); bit_clear(Green1_7,1);
02856:  BCF    4E.1
02858:  BCF    52.1
....................            }
0285A:  BRA    2884
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
0285C:  BTFSS  xB2.0
0285E:  BRA    286A
02860:  BTFSC  xB4.0
02862:  BRA    286A
....................              {
....................                bit_set(Red1_7,1); bit_clear(Green1_7,1);
02864:  BSF    4E.1
02866:  BCF    52.1
....................              }
02868:  BRA    2884
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
0286A:  BTFSC  xB2.0
0286C:  BRA    2878
0286E:  BTFSS  xB4.0
02870:  BRA    2878
....................              {
....................                bit_clear(Red1_7,1); bit_set(Green1_7,1); 
02872:  BCF    4E.1
02874:  BSF    52.1
....................              }
02876:  BRA    2884
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
02878:  BTFSS  xB2.0
0287A:  BRA    2884
0287C:  BTFSS  xB4.0
0287E:  BRA    2884
....................              {
....................                bit_set(Red1_7,1); bit_set(Green1_7,1) ; 
02880:  BSF    4E.1
02882:  BSF    52.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
02884:  BTFSS  x9C.1
02886:  BRA    288E
....................            {
....................              bit_clear(Red1_7,2); bit_clear(Green1_7,2);
02888:  BCF    4E.2
0288A:  BCF    52.2
....................            }
0288C:  BRA    28B6
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
0288E:  BTFSS  xB2.1
02890:  BRA    289C
02892:  BTFSC  xB4.1
02894:  BRA    289C
....................              {
....................                bit_set(Red1_7,2); bit_clear(Green1_7,2);
02896:  BSF    4E.2
02898:  BCF    52.2
....................              }
0289A:  BRA    28B6
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
0289C:  BTFSC  xB2.1
0289E:  BRA    28AA
028A0:  BTFSS  xB4.1
028A2:  BRA    28AA
....................              {
....................                bit_clear(Red1_7,2); bit_set(Green1_7,2); 
028A4:  BCF    4E.2
028A6:  BSF    52.2
....................              }
028A8:  BRA    28B6
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
028AA:  BTFSS  xB2.1
028AC:  BRA    28B6
028AE:  BTFSS  xB4.1
028B0:  BRA    28B6
....................              {
....................                bit_set(Red1_7,2); bit_set(Green1_7,2) ; 
028B2:  BSF    4E.2
028B4:  BSF    52.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
028B6:  BTFSS  x9C.2
028B8:  BRA    28C0
....................            {
....................              bit_clear(Red1_7,3); bit_clear(Green1_7,3);
028BA:  BCF    4E.3
028BC:  BCF    52.3
....................            }
028BE:  BRA    28E8
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
028C0:  BTFSS  xB2.2
028C2:  BRA    28CE
028C4:  BTFSC  xB4.2
028C6:  BRA    28CE
....................              {
....................                bit_set(Red1_7,3); bit_clear(Green1_7,3);
028C8:  BSF    4E.3
028CA:  BCF    52.3
....................              }
028CC:  BRA    28E8
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
028CE:  BTFSC  xB2.2
028D0:  BRA    28DC
028D2:  BTFSS  xB4.2
028D4:  BRA    28DC
....................              {
....................                bit_clear(Red1_7,3); bit_set(Green1_7,3); 
028D6:  BCF    4E.3
028D8:  BSF    52.3
....................              }
028DA:  BRA    28E8
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
028DC:  BTFSS  xB2.2
028DE:  BRA    28E8
028E0:  BTFSS  xB4.2
028E2:  BRA    28E8
....................              {
....................                bit_set(Red1_7,3); bit_set(Green1_7,3) ; 
028E4:  BSF    4E.3
028E6:  BSF    52.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
028E8:  BTFSS  x9C.3
028EA:  BRA    28F2
....................            {
....................              bit_clear(Red1_7,4); bit_clear(Green1_7,4);
028EC:  BCF    4E.4
028EE:  BCF    52.4
....................            }
028F0:  BRA    291A
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
028F2:  BTFSS  xB2.3
028F4:  BRA    2900
028F6:  BTFSC  xB4.3
028F8:  BRA    2900
....................              {
....................                bit_set(Red1_7,4); bit_clear(Green1_7,4);
028FA:  BSF    4E.4
028FC:  BCF    52.4
....................              }
028FE:  BRA    291A
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
02900:  BTFSC  xB2.3
02902:  BRA    290E
02904:  BTFSS  xB4.3
02906:  BRA    290E
....................              {
....................                bit_clear(Red1_7,4); bit_set(Green1_7,4); 
02908:  BCF    4E.4
0290A:  BSF    52.4
....................              }
0290C:  BRA    291A
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
0290E:  BTFSS  xB2.3
02910:  BRA    291A
02912:  BTFSS  xB4.3
02914:  BRA    291A
....................              {
....................                bit_set(Red1_7,4); bit_set(Green1_7,4) ; 
02916:  BSF    4E.4
02918:  BSF    52.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
0291A:  BTFSS  x9C.4
0291C:  BRA    2924
....................            {
....................              bit_clear(Red1_7,5); bit_clear(Green1_7,5);
0291E:  BCF    4E.5
02920:  BCF    52.5
....................            }
02922:  BRA    294C
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
02924:  BTFSS  xB2.4
02926:  BRA    2932
02928:  BTFSC  xB4.4
0292A:  BRA    2932
....................              {
....................                bit_set(Red1_7,5); bit_clear(Green1_7,5);
0292C:  BSF    4E.5
0292E:  BCF    52.5
....................              }
02930:  BRA    294C
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
02932:  BTFSC  xB2.4
02934:  BRA    2940
02936:  BTFSS  xB4.4
02938:  BRA    2940
....................              {
....................                bit_clear(Red1_7,5); bit_set(Green1_7,5); 
0293A:  BCF    4E.5
0293C:  BSF    52.5
....................              }
0293E:  BRA    294C
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
02940:  BTFSS  xB2.4
02942:  BRA    294C
02944:  BTFSS  xB4.4
02946:  BRA    294C
....................              {
....................                bit_set(Red1_7,5); bit_set(Green1_7,5) ; 
02948:  BSF    4E.5
0294A:  BSF    52.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
0294C:  BTFSS  x9C.5
0294E:  BRA    2956
....................            {
....................              bit_clear(Red1_7,6); bit_clear(Green1_7,6);
02950:  BCF    4E.6
02952:  BCF    52.6
....................            }
02954:  BRA    297E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
02956:  BTFSS  xB2.5
02958:  BRA    2964
0295A:  BTFSC  xB4.5
0295C:  BRA    2964
....................              {
....................                bit_set(Red1_7,6); bit_clear(Green1_7,6);
0295E:  BSF    4E.6
02960:  BCF    52.6
....................              }
02962:  BRA    297E
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
02964:  BTFSC  xB2.5
02966:  BRA    2972
02968:  BTFSS  xB4.5
0296A:  BRA    2972
....................              {
....................                bit_clear(Red1_7,6); bit_set(Green1_7,6); 
0296C:  BCF    4E.6
0296E:  BSF    52.6
....................              }
02970:  BRA    297E
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
02972:  BTFSS  xB2.5
02974:  BRA    297E
02976:  BTFSS  xB4.5
02978:  BRA    297E
....................              {
....................                bit_set(Red1_7,6); bit_set(Green1_7,6) ; 
0297A:  BSF    4E.6
0297C:  BSF    52.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
0297E:  BTFSS  x9C.6
02980:  BRA    2988
....................            {
....................              bit_clear(Red1_7,7); bit_clear(Green1_7,7);
02982:  BCF    4E.7
02984:  BCF    52.7
....................            }
02986:  BRA    29B0
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
02988:  BTFSS  xB2.6
0298A:  BRA    2996
0298C:  BTFSC  xB4.6
0298E:  BRA    2996
....................              {
....................                bit_set(Red1_7,7); bit_clear(Green1_7,7);
02990:  BSF    4E.7
02992:  BCF    52.7
....................              }
02994:  BRA    29B0
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
02996:  BTFSC  xB2.6
02998:  BRA    29A4
0299A:  BTFSS  xB4.6
0299C:  BRA    29A4
....................              {
....................                bit_clear(Red1_7,7); bit_set(Green1_7,7); 
0299E:  BCF    4E.7
029A0:  BSF    52.7
....................              }
029A2:  BRA    29B0
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
029A4:  BTFSS  xB2.6
029A6:  BRA    29B0
029A8:  BTFSS  xB4.6
029AA:  BRA    29B0
....................              {
....................                bit_set(Red1_7,7); bit_set(Green
029AC:  BSF    4E.7
029AE:  BSF    52.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
029B0:  BTFSS  x9C.7
029B2:  BRA    29BA
....................            {
....................              bit_clear(Red8_8,0); bit_clear(Green8_8,0);
029B4:  BCF    4F.0
029B6:  BCF    53.0
....................            }
029B8:  BRA    29E2
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
029BA:  BTFSS  xB2.7
029BC:  BRA    29C8
029BE:  BTFSC  xB4.7
029C0:  BRA    29C8
....................              {
....................                bit_set(Red8_8,0); bit_clear(Green8_8,0);
029C2:  BSF    4F.0
029C4:  BCF    53.0
....................              }
029C6:  BRA    29E2
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
029C8:  BTFSC  xB2.7
029CA:  BRA    29D6
029CC:  BTFSS  xB4.7
029CE:  BRA    29D6
....................              {
....................                bit_clear(Red8_8,0); bit_set(Green8_8,0); 
029D0:  BCF    4F.0
029D2:  BSF    53.0
....................              }
029D4:  BRA    29E2
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
029D6:  BTFSS  xB2.7
029D8:  BRA    29E2
029DA:  BTFSS  xB4.7
029DC:  BRA    29E2
....................              {
....................                bit_set(Red8_8,0); bit_set(Green8_8,0) ; 
029DE:  BSF    4F.0
029E0:  BSF    53.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            ////////////////////////////////////////////////////////
....................            if(Output.B9)//++++++++++++B9+++++++++++++++++++++
029E2:  BTFSS  x9D.0
029E4:  BRA    29EC
....................            {
....................              bit_clear(Red9_15,1); bit_clear(Green9_15,1);
029E6:  BCF    50.1
029E8:  BCF    54.1
....................            }
029EA:  BRA    2A14
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B9 )&&(GREEN_Colour.B9 ==0 ))//Red
029EC:  BTFSS  xB3.0
029EE:  BRA    29FA
029F0:  BTFSC  xB5.0
029F2:  BRA    29FA
....................              {
....................                bit_set(Red9_15,1); bit_clear(Green9_15,1);
029F4:  BSF    50.1
029F6:  BCF    54.1
....................              }
029F8:  BRA    2A14
....................              else if((RED_Colour.B9==0 )&&(GREEN_Colour.B9))//Green
029FA:  BTFSC  xB3.0
029FC:  BRA    2A08
029FE:  BTFSS  xB5.0
02A00:  BRA    2A08
....................              {
....................                bit_clear(Red9_15,1); bit_set(Green9_15,1); 
02A02:  BCF    50.1
02A04:  BSF    54.1
....................              }
02A06:  BRA    2A14
....................              else if((RED_Colour.B9)&&(GREEN_Colour.B9))//Ambian
02A08:  BTFSS  xB3.0
02A0A:  BRA    2A14
02A0C:  BTFSS  xB5.0
02A0E:  BRA    2A14
....................              {
....................                bit_set(Red9_15,1); bit_set(Green9_15,1) ; 
02A10:  BSF    50.1
02A12:  BSF    54.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B10)//++++++++++++B10+++++++++++++++++++++
02A14:  BTFSS  x9D.1
02A16:  BRA    2A1E
....................            {
....................              bit_clear(Red9_15,2); bit_clear(Green9_15,2);
02A18:  BCF    50.2
02A1A:  BCF    54.2
....................            }
02A1C:  BRA    2A46
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B10 )&&(GREEN_Colour.B10 ==0 ))//Red
02A1E:  BTFSS  xB3.1
02A20:  BRA    2A2C
02A22:  BTFSC  xB5.1
02A24:  BRA    2A2C
....................              {
....................                bit_set(Red9_15,2); bit_clear(Green9_15,2);
02A26:  BSF    50.2
02A28:  BCF    54.2
....................              }
02A2A:  BRA    2A46
....................              else if((RED_Colour.B10==0 )&&(GREEN_Colour.B10))//Green
02A2C:  BTFSC  xB3.1
02A2E:  BRA    2A3A
02A30:  BTFSS  xB5.1
02A32:  BRA    2A3A
....................              {
....................                bit_clear(Red9_15,2); bit_set(Green9_15,2); 
02A34:  BCF    50.2
02A36:  BSF    54.2
....................              }
02A38:  BRA    2A46
....................              else if((RED_Colour.B10)&&(GREEN_Colour.B10))//Ambian
02A3A:  BTFSS  xB3.1
02A3C:  BRA    2A46
02A3E:  BTFSS  xB5.1
02A40:  BRA    2A46
....................              {
....................                bit_set(Red9_15,2); bit_set(Green9_15,2) ; 
02A42:  BSF    50.2
02A44:  BSF    54.2
....................              }  
....................            }
....................            
....................        // }
....................         
....................        // if(NoOfPoint >= 20)
....................       //{   
....................            ////////////////////////////////////////////////////////
....................             if(Output.B11)//++++++++++++B11+++++++++++++++++++++
02A46:  BTFSS  x9D.2
02A48:  BRA    2A50
....................            {
....................              bit_clear(Red9_15,3); bit_clear(Green9_15,3);
02A4A:  BCF    50.3
02A4C:  BCF    54.3
....................            }
02A4E:  BRA    2A78
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B11 )&&(GREEN_Colour.B11 ==0 ))//Red
02A50:  BTFSS  xB3.2
02A52:  BRA    2A5E
02A54:  BTFSC  xB5.2
02A56:  BRA    2A5E
....................              {
....................                bit_set(Red9_15,3); bit_clear(Green9_15,3);
02A58:  BSF    50.3
02A5A:  BCF    54.3
....................              }
02A5C:  BRA    2A78
....................              else if((RED_Colour.B11==0 )&&(GREEN_Colour.B11))//Green
02A5E:  BTFSC  xB3.2
02A60:  BRA    2A6C
02A62:  BTFSS  xB5.2
02A64:  BRA    2A6C
....................              {
....................                bit_clear(Red9_15,3); bit_set(Green9_15,3); 
02A66:  BCF    50.3
02A68:  BSF    54.3
....................              }
02A6A:  BRA    2A78
....................              else if((RED_Colour.B11)&&(GREEN_Colour.B11))//Ambian
02A6C:  BTFSS  xB3.2
02A6E:  BRA    2A78
02A70:  BTFSS  xB5.2
02A72:  BRA    2A78
....................              {
....................                bit_set(Red9_15,3); bit_set(Green9_15,3) ; 
02A74:  BSF    50.3
02A76:  BSF    54.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B12)//++++++++++++B12+++++++++++++++++++++
02A78:  BTFSS  x9D.3
02A7A:  BRA    2A82
....................            {
....................              bit_clear(Red9_15,4); bit_clear(Green9_15,4);
02A7C:  BCF    50.4
02A7E:  BCF    54.4
....................            }
02A80:  BRA    2AAA
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B12 )&&(GREEN_Colour.B12 ==0 ))//Red
02A82:  BTFSS  xB3.3
02A84:  BRA    2A90
02A86:  BTFSC  xB5.3
02A88:  BRA    2A90
....................              {
....................                bit_set(Red9_15,4); bit_clear(Green9_15,4);
02A8A:  BSF    50.4
02A8C:  BCF    54.4
....................              }
02A8E:  BRA    2AAA
....................              else if((RED_Colour.B12==0 )&&(GREEN_Colour.B12))//Green
02A90:  BTFSC  xB3.3
02A92:  BRA    2A9E
02A94:  BTFSS  xB5.3
02A96:  BRA    2A9E
....................              {
....................                bit_clear(Red9_15,4); bit_set(Green9_15,4); 
02A98:  BCF    50.4
02A9A:  BSF    54.4
....................              }
02A9C:  BRA    2AAA
....................              else if((RED_Colour.B12)&&(GREEN_Colour.B12))//Ambian
02A9E:  BTFSS  xB3.3
02AA0:  BRA    2AAA
02AA2:  BTFSS  xB5.3
02AA4:  BRA    2AAA
....................              {
....................                bit_set(Red9_15,4); bit_set(Green9_15,4) ; 
02AA6:  BSF    50.4
02AA8:  BSF    54.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B13)//++++++++++++B13+++++++++++++++++++++
02AAA:  BTFSS  x9D.4
02AAC:  BRA    2AB4
....................            {
....................              bit_clear(Red9_15,5); bit_clear(Green9_15,5);
02AAE:  BCF    50.5
02AB0:  BCF    54.5
....................            }
02AB2:  BRA    2ADC
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B13 )&&(GREEN_Colour.B13 ==0 ))//Red
02AB4:  BTFSS  xB3.4
02AB6:  BRA    2AC2
02AB8:  BTFSC  xB5.4
02ABA:  BRA    2AC2
....................              {
....................                bit_set(Red9_15,5); bit_clear(Green9_15,5);
02ABC:  BSF    50.5
02ABE:  BCF    54.5
....................              }
02AC0:  BRA    2ADC
....................              else if((RED_Colour.B13==0 )&&(GREEN_Colour.B13))//Green
02AC2:  BTFSC  xB3.4
02AC4:  BRA    2AD0
02AC6:  BTFSS  xB5.4
02AC8:  BRA    2AD0
....................              {
....................                bit_clear(Red9_15,5); bit_set(Green9_15,5); 
02ACA:  BCF    50.5
02ACC:  BSF    54.5
....................              }
02ACE:  BRA    2ADC
....................              else if((RED_Colour.B13)&&(GREEN_Colour.B13))//Ambian
02AD0:  BTFSS  xB3.4
02AD2:  BRA    2ADC
02AD4:  BTFSS  xB5.4
02AD6:  BRA    2ADC
....................              {
....................                bit_set(Red9_15,5); bit_set(Green9_15,5) ; 
02AD8:  BSF    50.5
02ADA:  BSF    54.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B14)//++++++++++++B14+++++++++++++++++++++
02ADC:  BTFSS  x9D.5
02ADE:  BRA    2AE6
....................            {
....................              bit_clear(Red9_15,6); bit_clear(Green9_15,6);
02AE0:  BCF    50.6
02AE2:  BCF    54.6
....................            }
02AE4:  BRA    2B0E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B14 )&&(GREEN_Colour.B14 ==0 ))//Red
02AE6:  BTFSS  xB3.5
02AE8:  BRA    2AF4
02AEA:  BTFSC  xB5.5
02AEC:  BRA    2AF4
....................              {
....................                bit_set(Red9_15,6); bit_clear(Green9_15,6);
02AEE:  BSF    50.6
02AF0:  BCF    54.6
....................              }
02AF2:  BRA    2B0E
....................              else if((RED_Colour.B14==0 )&&(GREEN_Colour.B14))//Green
02AF4:  BTFSC  xB3.5
02AF6:  BRA    2B02
02AF8:  BTFSS  xB5.5
02AFA:  BRA    2B02
....................              {
....................                bit_clear(Red9_15,6); bit_set(Green9_15,6); 
02AFC:  BCF    50.6
02AFE:  BSF    54.6
....................              }
02B00:  BRA    2B0E
....................              else if((RED_Colour.B14)&&(GREEN_Colour.B14))//Ambian
02B02:  BTFSS  xB3.5
02B04:  BRA    2B0E
02B06:  BTFSS  xB5.5
02B08:  BRA    2B0E
....................              {
....................                bit_set(Red9_15,6); bit_set(Green9_15,6) ; 
02B0A:  BSF    50.6
02B0C:  BSF    54.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B15)//++++++++++++B15+++++++++++++++++++++
02B0E:  BTFSS  x9D.6
02B10:  BRA    2B18
....................            {
....................              bit_clear(Red9_15,7); bit_clear(Green9_15,7);
02B12:  BCF    50.7
02B14:  BCF    54.7
....................            }
02B16:  BRA    2B40
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B15 )&&(GREEN_Colour.B15 ==0 ))//Red
02B18:  BTFSS  xB3.6
02B1A:  BRA    2B26
02B1C:  BTFSC  xB5.6
02B1E:  BRA    2B26
....................              {
....................                bit_set(Red9_15,7); bit_clear(Green9_15,7);
02B20:  BSF    50.7
02B22:  BCF    54.7
....................              }
02B24:  BRA    2B40
....................              else if((RED_Colour.B15==0 )&&(GREEN_Colour.B15))//Green
02B26:  BTFSC  xB3.6
02B28:  BRA    2B34
02B2A:  BTFSS  xB5.6
02B2C:  BRA    2B34
....................              {
....................                bit_clear(Red9_15,7); bit_set(Green9_15,7); 
02B2E:  BCF    50.7
02B30:  BSF    54.7
....................              }
02B32:  BRA    2B40
....................              else if((RED_Colour.B15)&&(GREEN_Colour.B15))//Ambian
02B34:  BTFSS  xB3.6
02B36:  BRA    2B40
02B38:  BTFSS  xB5.6
02B3A:  BRA    2B40
....................              {
....................                bit_set(Red9_15,7); bit_set(Green9_15,7) ; 
02B3C:  BSF    50.7
02B3E:  BSF    54.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B16)//++++++++++++B16+++++++++++++++++++++
02B40:  BTFSS  x9D.7
02B42:  BRA    2B4A
....................            {
....................              bit_clear(Red16_16,0); bit_clear(Green16_16,0);
02B44:  BCF    51.0
02B46:  BCF    55.0
....................            }
02B48:  BRA    2B72
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B16 )&&(GREEN_Colour.B16 ==0 ))//Red
02B4A:  BTFSS  xB3.7
02B4C:  BRA    2B58
02B4E:  BTFSC  xB5.7
02B50:  BRA    2B58
....................              {
....................                bit_set(Red16_16,0); bit_clear(Green16_16,0);
02B52:  BSF    51.0
02B54:  BCF    55.0
....................              }
02B56:  BRA    2B72
....................              else if((RED_Colour.B16==0 )&&(GREEN_Colour.B16))//Green
02B58:  BTFSC  xB3.7
02B5A:  BRA    2B66
02B5C:  BTFSS  xB5.7
02B5E:  BRA    2B66
....................              {
....................                bit_clear(Red16_16,0); bit_set(Green16_16,0); 
02B60:  BCF    51.0
02B62:  BSF    55.0
....................              }
02B64:  BRA    2B72
....................              else if((RED_Colour.B16)&&(GREEN_Colour.B16))//Ambian
02B66:  BTFSS  xB3.7
02B68:  BRA    2B72
02B6A:  BTFSS  xB5.7
02B6C:  BRA    2B72
....................              {
....................                bit_set(Red16_16,0); bit_set(Green16_16,0) ; 
02B6E:  BSF    51.0
02B70:  BSF    55.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            
....................             /*
....................           
....................           
....................            ////////////////////////////////////////////////////////
....................            if(Output.B17)//++++++++++++B17+++++++++++++++++++++
....................            {
....................              bit_clear(Green11_18,6); bit_clear(Red11_18,6);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B17 )&&(GREEN_Colour.B17 ==0 ))//Red
....................              {
....................                bit_set(Red11_18,6); bit_clear(Green11_18,6);
....................              }
....................              else if((RED_Colour.B17==0 )&&(GREEN_Colour.B17))//Green
....................              {
....................                bit_clear(Red11_18,6); bit_set(Green11_18,6); 
....................              }
....................              else if((RED_Colour.B17)&&(GREEN_Colour.B17))//Ambian
....................              {
....................                bit_set(Red11_18,6); bit_set(Green11_18,6) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B18)//++++++++++++B18+++++++++++++++++++++
....................            {
....................              bit_clear(Green11_18,7); bit_clear(Red11_18,7);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B18 )&&(GREEN_Colour.B18 ==0 ))//Red
....................              {
....................                bit_set(Red11_18,7); bit_clear(Green11_18,7);
....................              }
....................              else if((RED_Colour.B18==0 )&&(GREEN_Colour.B18))//Green
....................              {
....................                bit_clear(Red11_18,7); bit_set(Green11_18,7); 
....................              }
....................              else if((RED_Colour.B18)&&(GREEN_Colour.B18))//Ambian
....................              {
....................                bit_set(Red11_18,7); bit_set(Green11_18,7) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B19)//++++++++++++B19+++++++++++++++++++++
....................            {
....................              bit_clear(Green19_20,0); bit_clear(Red19_20,0);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B19 )&&(GREEN_Colour.B19 ==0 ))//Red
....................              {
....................                bit_set(Red19_20,0); bit_clear(Green19_20,0);
....................              }
....................              else if((RED_Colour.B19==0 )&&(GREEN_Colour.B19))//Green
....................              {
....................                bit_clear(Red19_20,0); bit_set(Green19_20,0); 
....................              }
....................              else if((RED_Colour.B19)&&(GREEN_Colour.B19))//Ambian
....................              {
....................                bit_set(Red19_20,0); bit_set(Green19_20,0) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B20)//++++++++++++B20+++++++++++++++++++++
....................            {
....................              bit_clear(Green19_20,1); bit_clear(Red19_20,1);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B20 )&&(GREEN_Colour.B20 ==0 ))//Red
....................              {
....................                bit_set(Red19_20,1); bit_clear(Green19_20,1);
....................              }
....................              else if((RED_Colour.B20==0 )&&(GREEN_Colour.B20))//Green
....................              {
....................                bit_clear(Red19_20,1); bit_set(Green19_20,1); 
....................              }
....................              else if((RED_Colour.B20)&&(GREEN_Colour.B20))//Ambian
....................              {
....................                bit_set(Red19_20,1); bit_set(Green19_20,1) ; 
....................              }  
....................            }
....................            
....................            
....................            ////////////////////////////////////////////////////////
....................          
....................       //} 
.................... 
....................         */
....................         
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_7);
02B72:  MOVLW  04
02B74:  MOVLB  C
02B76:  MOVWF  x22
02B78:  MOVFF  4E,C23
02B7C:  MOVLB  0
02B7E:  RCALL  280E
....................            IO_OUTPUT_B(IO_DEVICE_2, Red8_8);
02B80:  MOVLW  04
02B82:  MOVLB  C
02B84:  MOVWF  x22
02B86:  MOVFF  4F,C23
02B8A:  MOVLB  0
02B8C:  RCALL  2824
....................                       
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_7);
02B8E:  MOVLW  06
02B90:  MOVLB  C
02B92:  MOVWF  x22
02B94:  MOVFF  52,C23
02B98:  MOVLB  0
02B9A:  RCALL  280E
....................            IO_OUTPUT_B(IO_DEVICE_3, Green8_8);
02B9C:  MOVLW  06
02B9E:  MOVLB  C
02BA0:  MOVWF  x22
02BA2:  MOVFF  53,C23
02BA6:  MOVLB  0
02BA8:  RCALL  2824
....................            
....................            IO_OUTPUT_A(IO_DEVICE_5, Red9_15);                                                                                                                                      
02BAA:  MOVLW  0A
02BAC:  MOVLB  C
02BAE:  MOVWF  x22
02BB0:  MOVFF  50,C23
02BB4:  MOVLB  0
02BB6:  RCALL  280E
....................            IO_OUTPUT_B(IO_DEVICE_5, Red16_16);
02BB8:  MOVLW  0A
02BBA:  MOVLB  C
02BBC:  MOVWF  x22
02BBE:  MOVFF  51,C23
02BC2:  MOVLB  0
02BC4:  RCALL  2824
....................                      
....................            IO_OUTPUT_A(IO_DEVICE_4, Green9_15);
02BC6:  MOVLW  08
02BC8:  MOVLB  C
02BCA:  MOVWF  x22
02BCC:  MOVFF  54,C23
02BD0:  MOVLB  0
02BD2:  RCALL  280E
....................            IO_OUTPUT_B(IO_DEVICE_4, Green16_16);
02BD4:  MOVLW  08
02BD6:  MOVLB  C
02BD8:  MOVWF  x22
02BDA:  MOVFF  55,C23
02BDE:  MOVLB  0
02BE0:  RCALL  2824
....................            
....................                                 
....................            //IO_OUTPUT_A(IO_DEVICE_4, Red1_8); //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_4, Red9_10); //jj test
....................            
....................            //IO_OUTPUT_A(IO_DEVICE_5, Green1_8);  //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_5, Green9_10); //jj test
....................                                            
....................            
....................    }
02BE2:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
....................    if(NoOfPoint == 8)
*
05E5C:  MOVF   x6D,W
05E5E:  SUBLW  08
05E60:  BNZ   5EA8
....................    {
....................       Inputt.B1 = ~InputType.B1;
05E62:  MOVLB  B
05E64:  BCF    x9A.0
05E66:  BTFSS  x9E.0
05E68:  BSF    x9A.0
....................       Inputt.B2 = ~InputType.B2;
05E6A:  BCF    x9A.1
05E6C:  BTFSS  x9E.1
05E6E:  BSF    x9A.1
....................       Inputt.B3 = ~InputType.B3;
05E70:  BCF    x9A.2
05E72:  BTFSS  x9E.2
05E74:  BSF    x9A.2
....................       Inputt.B4 = ~InputType.B4;
05E76:  BCF    x9A.3
05E78:  BTFSS  x9E.3
05E7A:  BSF    x9A.3
....................       Inputt.B5 = ~InputType.B5;
05E7C:  BCF    x9A.4
05E7E:  BTFSS  x9E.4
05E80:  BSF    x9A.4
....................       Inputt.B6 = ~InputType.B6;
05E82:  BCF    x9A.5
05E84:  BTFSS  x9E.5
05E86:  BSF    x9A.5
....................       Inputt.B7 = ~InputType.B7;
05E88:  BCF    x9A.6
05E8A:  BTFSS  x9E.6
05E8C:  BSF    x9A.6
....................       Inputt.B8 = ~InputType.B8;
05E8E:  BCF    x9A.7
05E90:  BTFSS  x9E.7
05E92:  BSF    x9A.7
....................       Ack.B1 = 0;
05E94:  BCF    xA8.0
....................       Ack.B2 = 0;
05E96:  BCF    xA8.1
....................       Ack.B3 = 0;
05E98:  BCF    xA8.2
....................       Ack.B4 = 0;
05E9A:  BCF    xA8.3
....................       Ack.B5 = 0;
05E9C:  BCF    xA8.4
....................       Ack.B6 = 0;
05E9E:  BCF    xA8.5
....................       Ack.B7 = 0;
05EA0:  BCF    xA8.6
....................       Ack.B8 = 0;
05EA2:  BCF    xA8.7
....................    }
05EA4:  BRA    5F30
05EA6:  MOVLB  0
....................    else if(NoOfPoint == 16)
05EA8:  MOVF   x6D,W
05EAA:  SUBLW  10
05EAC:  BNZ   5F30
....................    {
....................       Inputt.B1 = ~InputType.B1;
05EAE:  MOVLB  B
05EB0:  BCF    x9A.0
05EB2:  BTFSS  x9E.0
05EB4:  BSF    x9A.0
....................       Inputt.B2 = ~InputType.B2;
05EB6:  BCF    x9A.1
05EB8:  BTFSS  x9E.1
05EBA:  BSF    x9A.1
....................       Inputt.B3 = ~InputType.B3;
05EBC:  BCF    x9A.2
05EBE:  BTFSS  x9E.2
05EC0:  BSF    x9A.2
....................       Inputt.B4 = ~InputType.B4;
05EC2:  BCF    x9A.3
05EC4:  BTFSS  x9E.3
05EC6:  BSF    x9A.3
....................       Inputt.B5 = ~InputType.B5;
05EC8:  BCF    x9A.4
05ECA:  BTFSS  x9E.4
05ECC:  BSF    x9A.4
....................       Inputt.B6 = ~InputType.B6;
05ECE:  BCF    x9A.5
05ED0:  BTFSS  x9E.5
05ED2:  BSF    x9A.5
....................       Inputt.B7 = ~InputType.B7;
05ED4:  BCF    x9A.6
05ED6:  BTFSS  x9E.6
05ED8:  BSF    x9A.6
....................       Inputt.B8 = ~InputType.B8;
05EDA:  BCF    x9A.7
05EDC:  BTFSS  x9E.7
05EDE:  BSF    x9A.7
....................       Inputt.B9 = ~InputType.B9;
05EE0:  BCF    x9B.0
05EE2:  BTFSS  x9F.0
05EE4:  BSF    x9B.0
....................       Inputt.B10 = ~InputType.B10;
05EE6:  BCF    x9B.1
05EE8:  BTFSS  x9F.1
05EEA:  BSF    x9B.1
....................       Inputt.B11 = ~InputType.B11;
05EEC:  BCF    x9B.2
05EEE:  BTFSS  x9F.2
05EF0:  BSF    x9B.2
....................       Inputt.B12 = ~InputType.B12;
05EF2:  BCF    x9B.3
05EF4:  BTFSS  x9F.3
05EF6:  BSF    x9B.3
....................       Inputt.B13 = ~InputType.B13;
05EF8:  BCF    x9B.4
05EFA:  BTFSS  x9F.4
05EFC:  BSF    x9B.4
....................       Inputt.B14 = ~InputType.B14;
05EFE:  BCF    x9B.5
05F00:  BTFSS  x9F.5
05F02:  BSF    x9B.5
....................       Inputt.B15 = ~InputType.B15;
05F04:  BCF    x9B.6
05F06:  BTFSS  x9F.6
05F08:  BSF    x9B.6
....................       Inputt.B16 = ~InputType.B16;
05F0A:  BCF    x9B.7
05F0C:  BTFSS  x9F.7
05F0E:  BSF    x9B.7
....................       Ack.B1 = 0;
05F10:  BCF    xA8.0
....................       Ack.B2 = 0;
05F12:  BCF    xA8.1
....................       Ack.B3 = 0;
05F14:  BCF    xA8.2
....................       Ack.B4 = 0;
05F16:  BCF    xA8.3
....................       Ack.B5 = 0;
05F18:  BCF    xA8.4
....................       Ack.B6 = 0;
05F1A:  BCF    xA8.5
....................       Ack.B7 = 0;
05F1C:  BCF    xA8.6
....................       Ack.B8 = 0;
05F1E:  BCF    xA8.7
....................       Ack.B9 = 0;
05F20:  BCF    xA9.0
....................       Ack.B10 = 0;
05F22:  BCF    xA9.1
....................       Ack.B11 = 0;
05F24:  BCF    xA9.2
....................       Ack.B12 = 0;
05F26:  BCF    xA9.3
....................       Ack.B13 = 0;
05F28:  BCF    xA9.4
....................       Ack.B14 = 0;
05F2A:  BCF    xA9.5
....................       Ack.B15 = 0;
05F2C:  BCF    xA9.6
....................       Ack.B16 = 0;
05F2E:  BCF    xA9.7
05F30:  MOVLB  0
....................    }
05F32:  GOTO   8CE0 (RETURN)
....................   
.................... }
.................... 
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
*
08C0C:  MOVFF  32,C1A
....................    output_temp[1] = output9_16;
08C10:  MOVFF  33,C1B
.................... 
.................... 
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
08C14:  BSF    F94.2
08C16:  BTFSC  F82.2
08C18:  BRA    8C1E
08C1A:  BTFSS  1A.6
08C1C:  BRA    8C22
08C1E:  BTFSS  1A.4
08C20:  BRA    8C2E
08C22:  MOVLW  32
08C24:  MOVLB  C
08C26:  MOVWF  x23
08C28:  MOVLB  0
08C2A:  CALL   06AC
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
08C2E:  BSF    F94.2
08C30:  BTFSC  F82.2
08C32:  BRA    8C38
08C34:  BTFSS  1A.6
08C36:  BRA    8C3C
08C38:  BTFSS  1A.4
08C3A:  BRA    8CC8
....................        {
....................            if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
08C3C:  BSF    F94.2
08C3E:  BTFSC  F82.2
08C40:  BRA    8C46
08C42:  BTFSS  1A.6
08C44:  BRA    8C4A
08C46:  BTFSS  1A.4
08C48:  BRA    8CC6
....................            {
....................              restart_wdt();
08C4A:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
08C4C:  MOVF   2F,F
08C4E:  BNZ   8C54
08C50:  MOVLW  06
08C52:  MOVWF  2F
....................              Test = 1;
08C54:  BSF    1A.6
....................               //if(NoOfPoint >= 16)
....................              // {
....................              
....................                  IO_OUTPUT_A(IO_DEVICE_2, 0xFF);
08C56:  MOVLW  04
08C58:  MOVLB  C
08C5A:  MOVWF  x22
08C5C:  SETF   x23
08C5E:  MOVLB  0
08C60:  CALL   280E
....................                  IO_OUTPUT_B(IO_DEVICE_2, 0xFF);
08C64:  MOVLW  04
08C66:  MOVLB  C
08C68:  MOVWF  x22
08C6A:  SETF   x23
08C6C:  MOVLB  0
08C6E:  CALL   2824
....................                             
....................                  IO_OUTPUT_A(IO_DEVICE_3, 0xFF);
08C72:  MOVLW  06
08C74:  MOVLB  C
08C76:  MOVWF  x22
08C78:  SETF   x23
08C7A:  MOVLB  0
08C7C:  CALL   280E
....................                  IO_OUTPUT_B(IO_DEVICE_3, 0xFF);
08C80:  MOVLW  06
08C82:  MOVLB  C
08C84:  MOVWF  x22
08C86:  SETF   x23
08C88:  MOVLB  0
08C8A:  CALL   2824
....................                  
....................                  IO_OUTPUT_A(IO_DEVICE_4, 0xFF);
08C8E:  MOVLW  08
08C90:  MOVLB  C
08C92:  MOVWF  x22
08C94:  SETF   x23
08C96:  MOVLB  0
08C98:  CALL   280E
....................                  IO_OUTPUT_B(IO_DEVICE_4, 0xFF);
08C9C:  MOVLW  08
08C9E:  MOVLB  C
08CA0:  MOVWF  x22
08CA2:  SETF   x23
08CA4:  MOVLB  0
08CA6:  CALL   2824
....................                            
....................                  IO_OUTPUT_A(IO_DEVICE_5, 0xFF);
08CAA:  MOVLW  0A
08CAC:  MOVLB  C
08CAE:  MOVWF  x22
08CB0:  SETF   x23
08CB2:  MOVLB  0
08CB4:  CALL   280E
....................                  IO_OUTPUT_B(IO_DEVICE_5, 0xFF);
08CB8:  MOVLW  0A
08CBA:  MOVLB  C
08CBC:  MOVWF  x22
08CBE:  SETF   x23
08CC0:  MOVLB  0
08CC2:  CALL   2824
....................                  //PCF8575_write(0xFF,0x00,Input1_8_Wr_addr);
....................                  //PCF8575_write(0xFF,0x00,Input9_16_Wr_addr);
....................                  //IO_OUTPUT_B(IO_DEVICE_0, 0x00);
....................                  //IO_OUTPUT_B(IO_DEVICE_1, 0x00);
....................              // }
....................              
....................            }
....................        }
08CC6:  BRA    8CD8
....................        else if(input(Ptest) == 1 && Test == 1)
08CC8:  BSF    F94.2
08CCA:  BTFSS  F82.2
08CCC:  BRA    8CD8
08CCE:  BTFSS  1A.6
08CD0:  BRA    8CD8
....................        {
....................            T_test = 0x00;
08CD2:  CLRF   2F
....................            Test = 0;
08CD4:  BCF    1A.6
....................            Test_fault = 0;
08CD6:  BCF    1A.5
....................        }
.................... 
.................... 
....................        if(Test_fault == 1)
08CD8:  BTFSS  1A.5
08CDA:  BRA    8CEE
....................        {
....................           ForceAllAlarm();
08CDC:  GOTO   5E5C
....................           Anal_Function();
08CE0:  CALL   69C8
....................           if(input(Ptest) == 1)
08CE4:  BSF    F94.2
08CE6:  BTFSS  F82.2
08CE8:  BRA    8CEC
....................           {
....................             Test_fault = 0;
08CEA:  BCF    1A.5
....................           }
....................        }
08CEC:  BRA    8D04
....................       
....................        else if(input(Ptest) == 1 && Test == 1)
08CEE:  BSF    F94.2
08CF0:  BTFSS  F82.2
08CF2:  BRA    8D04
08CF4:  BTFSS  1A.6
08CF6:  BRA    8D04
....................        {
....................           if(NoOfPoint >= 16)
08CF8:  MOVF   x6D,W
08CFA:  SUBLW  0F
08CFC:  BC    8CFE
....................           {
....................              //PCF8575_write(0xFF,output_temp[0],Input1_8_Wr_addr);
....................              //PCF8575_write(0xFF,output_temp[1],Input9_16_Wr_addr);
....................              //IO_OUTPUT_B(IO_DEVICE_0, output_temp[0]);
....................              //IO_OUTPUT_B(IO_DEVICE_1, output_temp[1]); 
....................           }
....................           
.................... 
....................           T_test = 0x00;
08CFE:  CLRF   2F
....................           Test = 0;
08D00:  BCF    1A.6
....................           Test_fault = 0;
08D02:  BCF    1A.5
....................        }
08D04:  GOTO   9544 (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
02F90:  BSF    F94.0
02F92:  BTFSC  F82.0
02F94:  BRA    2F9A
02F96:  BTFSS  1A.7
02F98:  BRA    2F9E
02F9A:  BTFSS  1A.2
02F9C:  BRA    2FAA
02F9E:  MOVLW  32
02FA0:  MOVLB  C
02FA2:  MOVWF  x23
02FA4:  MOVLB  0
02FA6:  CALL   06AC
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
02FAA:  BSF    F94.0
02FAC:  BTFSC  F82.0
02FAE:  BRA    2FB4
02FB0:  BTFSS  1A.7
02FB2:  BRA    2FB8
02FB4:  BTFSS  1A.2
02FB6:  BRA    30CC
....................    {
....................             AutoAckFlag = 0;
02FB8:  BCF    1A.2
....................             AutoAckDelayTime = 0x00;
02FBA:  CLRF   1D
....................       
....................                   //if(In.B1 == 1 || ((Inputt.B1 ^ InputType.B1) == 1))
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
02FBC:  MOVLB  B
02FBE:  BTFSC  xAA.0
02FC0:  BRA    2FC6
02FC2:  BTFSS  xAC.0
02FC4:  BRA    2FCE
....................            {
....................              Ack.B1 = 1;
02FC6:  BSF    xA8.0
....................              In.B1 = 0;
02FC8:  BCF    xAA.0
....................              In2.B1 = 0;      //for auto reset
02FCA:  BCF    xAC.0
....................              Output.B1 = 0;
02FCC:  BCF    x9C.0
....................            }
....................            //if(In.B2 == 1 || ((Inputt.B2 ^ InputType.B2) == 1))
....................            if((In.B2 == 1)||(In2.B2 == 1))
02FCE:  BTFSC  xAA.1
02FD0:  BRA    2FD6
02FD2:  BTFSS  xAC.1
02FD4:  BRA    2FDE
....................            {
....................              Ack.B2 = 1;
02FD6:  BSF    xA8.1
....................              In.B2 = 0;
02FD8:  BCF    xAA.1
....................              In2.B2 = 0;      //for auto reset
02FDA:  BCF    xAC.1
....................              Output.B2 = 0;
02FDC:  BCF    x9C.1
....................            }
....................            //if(In.B3 == 1 || ((Inputt.B3 ^ InputType.B3) == 1))
....................            if((In.B3 == 1)||(In2.B3 == 1))
02FDE:  BTFSC  xAA.2
02FE0:  BRA    2FE6
02FE2:  BTFSS  xAC.2
02FE4:  BRA    2FEE
....................            {
....................              Ack.B3 = 1;
02FE6:  BSF    xA8.2
....................              In.B3 = 0;
02FE8:  BCF    xAA.2
....................              In2.B3 = 0;      //for auto reset
02FEA:  BCF    xAC.2
....................              Output.B3 = 0;
02FEC:  BCF    x9C.2
....................            }
....................            //if(In.B4 == 1 || ((Inputt.B4 ^ InputType.B4) == 1))
....................            if((In.B4 == 1)||(In2.B4 == 1))
02FEE:  BTFSC  xAA.3
02FF0:  BRA    2FF6
02FF2:  BTFSS  xAC.3
02FF4:  BRA    2FFE
....................            {
....................              Ack.B4 = 1;
02FF6:  BSF    xA8.3
....................              In.B4 = 0;
02FF8:  BCF    xAA.3
....................              In2.B4 = 0;      //for auto reset
02FFA:  BCF    xAC.3
....................              Output.B4 = 0;
02FFC:  BCF    x9C.3
....................            }
....................            //if(In.B5 == 1 || ((Inputt.B5 ^ InputType.B5) == 1))
....................            if((In.B5 == 1)||(In2.B5 == 1))
02FFE:  BTFSC  xAA.4
03000:  BRA    3006
03002:  BTFSS  xAC.4
03004:  BRA    300E
....................            {
....................              Ack.B5 = 1;
03006:  BSF    xA8.4
....................              In.B5 = 0;
03008:  BCF    xAA.4
....................              In2.B5 = 0;      //for auto reset
0300A:  BCF    xAC.4
....................              Output.B5 = 0;
0300C:  BCF    x9C.4
....................            }
....................            //if(In.B6 == 1 || ((Inputt.B6 ^ InputType.B6) == 1))
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
0300E:  BTFSC  xAA.5
03010:  BRA    3016
03012:  BTFSS  xAC.5
03014:  BRA    301E
....................            {
....................              Ack.B6 = 1;
03016:  BSF    xA8.5
....................              In.B6 = 0;
03018:  BCF    xAA.5
....................              In2.B6 = 0;      //for auto reset
0301A:  BCF    xAC.5
....................              Output.B6 = 0;
0301C:  BCF    x9C.5
....................            }
....................            //if(In.B7 == 1 || ((Inputt.B7 ^ InputType.B7) == 1))
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
0301E:  BTFSC  xAA.6
03020:  BRA    3026
03022:  BTFSS  xAC.6
03024:  BRA    302E
....................            {
....................              Ack.B7 = 1;
03026:  BSF    xA8.6
....................              In.B7 = 0;
03028:  BCF    xAA.6
....................              In2.B7 = 0;      //for auto reset
0302A:  BCF    xAC.6
....................              Output.B7 = 0;
0302C:  BCF    x9C.6
....................            }
....................            //if(In.B8 == 1 || ((Inputt.B8 ^ InputType.B8) == 1))
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
0302E:  BTFSC  xAA.7
03030:  BRA    3036
03032:  BTFSS  xAC.7
03034:  BRA    303E
....................            {
....................              Ack.B8 = 1;
03036:  BSF    xA8.7
....................              In.B8 = 0;
03038:  BCF    xAA.7
....................              In2.B8 = 0;      //for auto reset
0303A:  BCF    xAC.7
....................              Output.B8 = 0;
0303C:  BCF    x9C.7
....................            }
....................           // if(In.B9 == 1 || ((Inputt.B9 ^ InputType.B9) == 1))
....................            if((In.B9 == 1 )||(In2.B9 == 1 ))
0303E:  BTFSC  xAB.0
03040:  BRA    3046
03042:  BTFSS  xAD.0
03044:  BRA    304E
....................            {
....................              Ack.B9 = 1;
03046:  BSF    xA9.0
....................              In.B9 = 0;
03048:  BCF    xAB.0
....................              In2.B9 = 0;      //for auto reset
0304A:  BCF    xAD.0
....................              Output.B9 = 0;
0304C:  BCF    x9D.0
....................            }
....................            //if(In.B10 == 1 || ((Inputt.B10 ^ InputType.B10) == 1))
....................            if((In.B10 == 1)||(In2.B10 == 1))
0304E:  BTFSC  xAB.1
03050:  BRA    3056
03052:  BTFSS  xAD.1
03054:  BRA    305E
....................            {
....................              Ack.B10 = 1;
03056:  BSF    xA9.1
....................              In.B10 = 0;
03058:  BCF    xAB.1
....................              In2.B10 = 0;      //for auto reset
0305A:  BCF    xAD.1
....................              Output.B10 = 0;
0305C:  BCF    x9D.1
....................            }
....................            //if(In.B11 == 1 || ((Inputt.B11 ^ InputType.B11) == 1))
....................            if((In.B11 == 1)||(In2.B11 == 1))
0305E:  BTFSC  xAB.2
03060:  BRA    3066
03062:  BTFSS  xAD.2
03064:  BRA    306E
....................            {
....................              Ack.B11 = 1;
03066:  BSF    xA9.2
....................              In.B11 = 0;
03068:  BCF    xAB.2
....................              In2.B11 = 0;      //for auto reset
0306A:  BCF    xAD.2
....................              Output.B11 = 0;
0306C:  BCF    x9D.2
....................            }
....................            //if(In.B12 == 1 || ((Inputt.B12 ^ InputType.B12) == 1))
....................            if((In.B12 == 1)||(In2.B12 == 1))
0306E:  BTFSC  xAB.3
03070:  BRA    3076
03072:  BTFSS  xAD.3
03074:  BRA    307E
....................            {
....................              Ack.B12 = 1;
03076:  BSF    xA9.3
....................              In.B12 = 0;
03078:  BCF    xAB.3
....................              In2.B12 = 0;      //for auto reset
0307A:  BCF    xAD.3
....................              Output.B12 = 0;
0307C:  BCF    x9D.3
....................            }
....................            //if(In.B13 == 1 || ((Inputt.B13 ^ InputType.B13) == 1))
....................            if((In.B13 == 1 )||(In2.B13 == 1 ))
0307E:  BTFSC  xAB.4
03080:  BRA    3086
03082:  BTFSS  xAD.4
03084:  BRA    308E
....................            {
....................              Ack.B13 = 1;
03086:  BSF    xA9.4
....................              In.B13 = 0;
03088:  BCF    xAB.4
....................              In2.B13 = 0;      //for auto reset
0308A:  BCF    xAD.4
....................              Output.B13 = 0;
0308C:  BCF    x9D.4
....................            }
....................            //if(In.B14 == 1 || ((Inputt.B14 ^ InputType.B14) == 1))
....................            if((In.B14 == 1)||(In2.B14 == 1))
0308E:  BTFSC  xAB.5
03090:  BRA    3096
03092:  BTFSS  xAD.5
03094:  BRA    309E
....................            {
....................              Ack.B14 = 1;
03096:  BSF    xA9.5
....................              In.B14 = 0;
03098:  BCF    xAB.5
....................              In2.B14 = 0;      //for auto reset
0309A:  BCF    xAD.5
....................              Output.B14 = 0;
0309C:  BCF    x9D.5
....................            }
....................            //if(In.B15 == 1 || ((Inputt.B15 ^ InputType.B15) == 1))
....................            if((In.B15 == 1)||(In2.B15 == 1))
0309E:  BTFSC  xAB.6
030A0:  BRA    30A6
030A2:  BTFSS  xAD.6
030A4:  BRA    30AE
....................            {
....................              Ack.B15 = 1;
030A6:  BSF    xA9.6
....................              In.B15 = 0;
030A8:  BCF    xAB.6
....................              In2.B15 = 0;      //for auto reset
030AA:  BCF    xAD.6
....................              Output.B15 = 0;
030AC:  BCF    x9D.6
....................            }
....................            //if(In.B16 == 1 || ((Inputt.B16 ^ InputType.B16) == 1))
....................            if((In.B16 == 1)||(In2.B16 == 1))
030AE:  BTFSC  xAB.7
030B0:  BRA    30B6
030B2:  BTFSS  xAD.7
030B4:  BRA    30BE
....................            {
....................              Ack.B16 = 1;
030B6:  BSF    xA9.7
....................              In.B16 = 0;
030B8:  BCF    xAB.7
....................              In2.B16 = 0;      //for auto reset
030BA:  BCF    xAD.7
....................              Output.B16 = 0;
030BC:  BCF    x9D.7
....................            }     
....................       
....................             Ack_F = 1;
030BE:  BSF    1A.7
....................             output_bit(Pbuzzer,0);   //Buzzer
030C0:  BCF    F89.4
030C2:  BCF    F92.4
....................             output_bit(Pbell,0);     //Bell
030C4:  BCF    F89.3
030C6:  BCF    F92.3
....................    }
030C8:  BRA    30DA
030CA:  MOVLB  0
....................    else if(input(Pack) == 1 && Ack_F == 1)
030CC:  BSF    F94.0
030CE:  BTFSS  F82.0
030D0:  BRA    30D8
030D2:  BTFSS  1A.7
030D4:  BRA    30D8
....................    {
....................       Ack_F = 0;
030D6:  BCF    1A.7
030D8:  MOVLB  B
....................    }
030DA:  MOVLB  0
030DC:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
030DE:  BSF    F94.1
030E0:  BTFSC  F82.1
030E2:  BRA    30E8
030E4:  BTFSS  30.0
030E6:  BRA    30EC
030E8:  BTFSS  1A.3
030EA:  BRA    30F8
030EC:  MOVLW  32
030EE:  MOVLB  C
030F0:  MOVWF  x23
030F2:  MOVLB  0
030F4:  CALL   06AC
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
030F8:  BSF    F94.1
030FA:  BTFSC  F82.1
030FC:  BRA    3102
030FE:  BTFSS  30.0
03100:  BRA    3106
03102:  BTFSS  1A.3
03104:  BRA    338E
....................     {
....................        AutoResetFlag = 0;
03106:  BCF    1A.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
03108:  MOVLW  00
0310A:  MOVLB  B
0310C:  BTFSC  x9A.0
0310E:  MOVLW  01
03110:  MOVLB  C
03112:  MOVWF  x24
03114:  MOVLW  00
03116:  MOVLB  B
03118:  BTFSC  x9E.0
0311A:  MOVLW  01
0311C:  MOVLB  C
0311E:  XORWF  x24,W
03120:  BNZ   3130
03122:  MOVLB  B
03124:  BTFSS  xAA.0
03126:  BRA    312C
03128:  MOVLB  C
0312A:  BRA    3130
0312C:  BSF    x9C.0
0312E:  MOVLB  C
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
03130:  MOVLW  00
03132:  MOVLB  B
03134:  BTFSC  x9A.1
03136:  MOVLW  01
03138:  MOVLB  C
0313A:  MOVWF  x24
0313C:  MOVLW  00
0313E:  MOVLB  B
03140:  BTFSC  x9E.1
03142:  MOVLW  01
03144:  MOVLB  C
03146:  XORWF  x24,W
03148:  BNZ   3158
0314A:  MOVLB  B
0314C:  BTFSS  xAA.1
0314E:  BRA    3154
03150:  MOVLB  C
03152:  BRA    3158
03154:  BSF    x9C.1
03156:  MOVLB  C
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
03158:  MOVLW  00
0315A:  MOVLB  B
0315C:  BTFSC  x9A.2
0315E:  MOVLW  01
03160:  MOVLB  C
03162:  MOVWF  x24
03164:  MOVLW  00
03166:  MOVLB  B
03168:  BTFSC  x9E.2
0316A:  MOVLW  01
0316C:  MOVLB  C
0316E:  XORWF  x24,W
03170:  BNZ   3180
03172:  MOVLB  B
03174:  BTFSS  xAA.2
03176:  BRA    317C
03178:  MOVLB  C
0317A:  BRA    3180
0317C:  BSF    x9C.2
0317E:  MOVLB  C
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
03180:  MOVLW  00
03182:  MOVLB  B
03184:  BTFSC  x9A.3
03186:  MOVLW  01
03188:  MOVLB  C
0318A:  MOVWF  x24
0318C:  MOVLW  00
0318E:  MOVLB  B
03190:  BTFSC  x9E.3
03192:  MOVLW  01
03194:  MOVLB  C
03196:  XORWF  x24,W
03198:  BNZ   31A8
0319A:  MOVLB  B
0319C:  BTFSS  xAA.3
0319E:  BRA    31A4
031A0:  MOVLB  C
031A2:  BRA    31A8
031A4:  BSF    x9C.3
031A6:  MOVLB  C
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
031A8:  MOVLW  00
031AA:  MOVLB  B
031AC:  BTFSC  x9A.4
031AE:  MOVLW  01
031B0:  MOVLB  C
031B2:  MOVWF  x24
031B4:  MOVLW  00
031B6:  MOVLB  B
031B8:  BTFSC  x9E.4
031BA:  MOVLW  01
031BC:  MOVLB  C
031BE:  XORWF  x24,W
031C0:  BNZ   31D0
031C2:  MOVLB  B
031C4:  BTFSS  xAA.4
031C6:  BRA    31CC
031C8:  MOVLB  C
031CA:  BRA    31D0
031CC:  BSF    x9C.4
031CE:  MOVLB  C
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
031D0:  MOVLW  00
031D2:  MOVLB  B
031D4:  BTFSC  x9A.5
031D6:  MOVLW  01
031D8:  MOVLB  C
031DA:  MOVWF  x24
031DC:  MOVLW  00
031DE:  MOVLB  B
031E0:  BTFSC  x9E.5
031E2:  MOVLW  01
031E4:  MOVLB  C
031E6:  XORWF  x24,W
031E8:  BNZ   31F8
031EA:  MOVLB  B
031EC:  BTFSS  xAA.5
031EE:  BRA    31F4
031F0:  MOVLB  C
031F2:  BRA    31F8
031F4:  BSF    x9C.5
031F6:  MOVLB  C
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
031F8:  MOVLW  00
031FA:  MOVLB  B
031FC:  BTFSC  x9A.6
031FE:  MOVLW  01
03200:  MOVLB  C
03202:  MOVWF  x24
03204:  MOVLW  00
03206:  MOVLB  B
03208:  BTFSC  x9E.6
0320A:  MOVLW  01
0320C:  MOVLB  C
0320E:  XORWF  x24,W
03210:  BNZ   3220
03212:  MOVLB  B
03214:  BTFSS  xAA.6
03216:  BRA    321C
03218:  MOVLB  C
0321A:  BRA    3220
0321C:  BSF    x9C.6
0321E:  MOVLB  C
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
03220:  MOVLW  00
03222:  MOVLB  B
03224:  BTFSC  x9A.7
03226:  MOVLW  01
03228:  MOVLB  C
0322A:  MOVWF  x24
0322C:  MOVLW  00
0322E:  MOVLB  B
03230:  BTFSC  x9E.7
03232:  MOVLW  01
03234:  MOVLB  C
03236:  XORWF  x24,W
03238:  BNZ   3248
0323A:  MOVLB  B
0323C:  BTFSS  xAA.7
0323E:  BRA    3244
03240:  MOVLB  C
03242:  BRA    3248
03244:  BSF    x9C.7
03246:  MOVLB  C
....................        if((Inputt.B9 ^ InputType.B9) == 0 && In.B9 == 0) Output.B9 = 1;
03248:  MOVLW  00
0324A:  MOVLB  B
0324C:  BTFSC  x9B.0
0324E:  MOVLW  01
03250:  MOVLB  C
03252:  MOVWF  x24
03254:  MOVLW  00
03256:  MOVLB  B
03258:  BTFSC  x9F.0
0325A:  MOVLW  01
0325C:  MOVLB  C
0325E:  XORWF  x24,W
03260:  BNZ   3270
03262:  MOVLB  B
03264:  BTFSS  xAB.0
03266:  BRA    326C
03268:  MOVLB  C
0326A:  BRA    3270
0326C:  BSF    x9D.0
0326E:  MOVLB  C
....................        if((Inputt.B10 ^ InputType.B10) == 0 && In.B10 == 0) Output.B10 = 1;
03270:  MOVLW  00
03272:  MOVLB  B
03274:  BTFSC  x9B.1
03276:  MOVLW  01
03278:  MOVLB  C
0327A:  MOVWF  x24
0327C:  MOVLW  00
0327E:  MOVLB  B
03280:  BTFSC  x9F.1
03282:  MOVLW  01
03284:  MOVLB  C
03286:  XORWF  x24,W
03288:  BNZ   3298
0328A:  MOVLB  B
0328C:  BTFSS  xAB.1
0328E:  BRA    3294
03290:  MOVLB  C
03292:  BRA    3298
03294:  BSF    x9D.1
03296:  MOVLB  C
....................        if((Inputt.B11 ^ InputType.B11) == 0 && In.B11 == 0) Output.B11 = 1;
03298:  MOVLW  00
0329A:  MOVLB  B
0329C:  BTFSC  x9B.2
0329E:  MOVLW  01
032A0:  MOVLB  C
032A2:  MOVWF  x24
032A4:  MOVLW  00
032A6:  MOVLB  B
032A8:  BTFSC  x9F.2
032AA:  MOVLW  01
032AC:  MOVLB  C
032AE:  XORWF  x24,W
032B0:  BNZ   32C0
032B2:  MOVLB  B
032B4:  BTFSS  xAB.2
032B6:  BRA    32BC
032B8:  MOVLB  C
032BA:  BRA    32C0
032BC:  BSF    x9D.2
032BE:  MOVLB  C
....................        if((Inputt.B12 ^ InputType.B12) == 0 && In.B12 == 0) Output.B12 = 1;
032C0:  MOVLW  00
032C2:  MOVLB  B
032C4:  BTFSC  x9B.3
032C6:  MOVLW  01
032C8:  MOVLB  C
032CA:  MOVWF  x24
032CC:  MOVLW  00
032CE:  MOVLB  B
032D0:  BTFSC  x9F.3
032D2:  MOVLW  01
032D4:  MOVLB  C
032D6:  XORWF  x24,W
032D8:  BNZ   32E8
032DA:  MOVLB  B
032DC:  BTFSS  xAB.3
032DE:  BRA    32E4
032E0:  MOVLB  C
032E2:  BRA    32E8
032E4:  BSF    x9D.3
032E6:  MOVLB  C
....................        if((Inputt.B13 ^ InputType.B13) == 0 && In.B13 == 0) Output.B13 = 1;
032E8:  MOVLW  00
032EA:  MOVLB  B
032EC:  BTFSC  x9B.4
032EE:  MOVLW  01
032F0:  MOVLB  C
032F2:  MOVWF  x24
032F4:  MOVLW  00
032F6:  MOVLB  B
032F8:  BTFSC  x9F.4
032FA:  MOVLW  01
032FC:  MOVLB  C
032FE:  XORWF  x24,W
03300:  BNZ   3310
03302:  MOVLB  B
03304:  BTFSS  xAB.4
03306:  BRA    330C
03308:  MOVLB  C
0330A:  BRA    3310
0330C:  BSF    x9D.4
0330E:  MOVLB  C
....................        if((Inputt.B14 ^ InputType.B14) == 0 && In.B14 == 0) Output.B14 = 1;
03310:  MOVLW  00
03312:  MOVLB  B
03314:  BTFSC  x9B.5
03316:  MOVLW  01
03318:  MOVLB  C
0331A:  MOVWF  x24
0331C:  MOVLW  00
0331E:  MOVLB  B
03320:  BTFSC  x9F.5
03322:  MOVLW  01
03324:  MOVLB  C
03326:  XORWF  x24,W
03328:  BNZ   3338
0332A:  MOVLB  B
0332C:  BTFSS  xAB.5
0332E:  BRA    3334
03330:  MOVLB  C
03332:  BRA    3338
03334:  BSF    x9D.5
03336:  MOVLB  C
....................        if((Inputt.B15 ^ InputType.B15) == 0 && In.B15 == 0) Output.B15 = 1;
03338:  MOVLW  00
0333A:  MOVLB  B
0333C:  BTFSC  x9B.6
0333E:  MOVLW  01
03340:  MOVLB  C
03342:  MOVWF  x24
03344:  MOVLW  00
03346:  MOVLB  B
03348:  BTFSC  x9F.6
0334A:  MOVLW  01
0334C:  MOVLB  C
0334E:  XORWF  x24,W
03350:  BNZ   3360
03352:  MOVLB  B
03354:  BTFSS  xAB.6
03356:  BRA    335C
03358:  MOVLB  C
0335A:  BRA    3360
0335C:  BSF    x9D.6
0335E:  MOVLB  C
....................        if((Inputt.B16 ^ InputType.B16) == 0 && In.B16 == 0) Output.B16 = 1;
03360:  MOVLW  00
03362:  MOVLB  B
03364:  BTFSC  x9B.7
03366:  MOVLW  01
03368:  MOVLB  C
0336A:  MOVWF  x24
0336C:  MOVLW  00
0336E:  MOVLB  B
03370:  BTFSC  x9F.7
03372:  MOVLW  01
03374:  MOVLB  C
03376:  XORWF  x24,W
03378:  BNZ   3388
0337A:  MOVLB  B
0337C:  BTFSS  xAB.7
0337E:  BRA    3384
03380:  MOVLB  C
03382:  BRA    3388
03384:  BSF    x9D.7
03386:  MOVLB  C
....................        /*
....................        if((Inputt.B17 ^ InputType.B17) == 0 && In.B17 == 0) Output.B17 = 1;
....................        if((Inputt.B18 ^ InputType.B18) == 0 && In.B18 == 0) Output.B18 = 1;
....................        if((Inputt.B19 ^ InputType.B19) == 0 && In.B19 == 0) Output.B19 = 1;
....................        if((Inputt.B20 ^ InputType.B20) == 0 && In.B20 == 0) Output.B20 = 1;
....................        */
.................... 
....................        Reset_F = 1;
03388:  BSF    30.0
....................     }
0338A:  BRA    339C
0338C:  MOVLB  0
....................     else if(input(Preset) == 1 && Reset_F == 1)
0338E:  BSF    F94.1
03390:  BTFSS  F82.1
03392:  BRA    339A
03394:  BTFSS  30.0
03396:  BRA    339A
....................     {
....................        Reset_F = 0;
03398:  BCF    30.0
0339A:  MOVLB  C
....................     }
0339C:  MOVLB  0
0339E:  RETURN 0
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////// Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
05FC0:  MOVLB  C
05FC2:  DECFSZ x22,W
05FC4:  BRA    64BE
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
05FC6:  MOVLW  00
05FC8:  MOVLB  B
05FCA:  BTFSC  xAA.0
05FCC:  MOVLW  01
05FCE:  MOVLB  C
05FD0:  MOVWF  x25
05FD2:  MOVLW  00
05FD4:  MOVLB  B
05FD6:  BTFSC  xAC.0
05FD8:  MOVLW  01
05FDA:  MOVLB  C
05FDC:  IORWF  x25,W
05FDE:  MOVWF  x24
05FE0:  MOVLW  00
05FE2:  MOVLB  B
05FE4:  BTFSS  xA8.0
05FE6:  MOVLW  01
05FE8:  MOVLB  C
05FEA:  ANDWF  x24,F
05FEC:  MOVLW  00
05FEE:  MOVLB  B
05FF0:  BTFSC  xA2.0
05FF2:  MOVLW  01
05FF4:  MOVLB  C
05FF6:  MOVWF  x27
05FF8:  MOVLW  00
05FFA:  MOVLB  B
05FFC:  BTFSC  xA4.0
05FFE:  MOVLW  01
06000:  MOVLB  C
06002:  IORWF  x27,W
06004:  ANDWF  x24,W
06006:  BCF    x23.0
06008:  BTFSC  FE8.0
0600A:  BSF    x23.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
0600C:  MOVLW  00
0600E:  BTFSC  x23.0
06010:  MOVLW  01
06012:  MOVWF  x24
06014:  MOVLW  00
06016:  MOVLB  B
06018:  BTFSC  xAA.1
0601A:  MOVLW  01
0601C:  MOVLB  C
0601E:  MOVWF  x26
06020:  MOVLW  00
06022:  MOVLB  B
06024:  BTFSC  xAC.1
06026:  MOVLW  01
06028:  MOVLB  C
0602A:  IORWF  x26,W
0602C:  MOVWF  x25
0602E:  MOVLW  00
06030:  MOVLB  B
06032:  BTFSS  xA8.1
06034:  MOVLW  01
06036:  MOVLB  C
06038:  ANDWF  x25,F
0603A:  MOVLW  00
0603C:  MOVLB  B
0603E:  BTFSC  xA2.1
06040:  MOVLW  01
06042:  MOVLB  C
06044:  MOVWF  x28
06046:  MOVLW  00
06048:  MOVLB  B
0604A:  BTFSC  xA4.1
0604C:  MOVLW  01
0604E:  MOVLB  C
06050:  IORWF  x28,W
06052:  ANDWF  x25,W
06054:  IORWF  x24,W
06056:  BCF    x23.0
06058:  BTFSC  FE8.0
0605A:  BSF    x23.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
0605C:  MOVLW  00
0605E:  BTFSC  x23.0
06060:  MOVLW  01
06062:  MOVWF  x24
06064:  MOVLW  00
06066:  MOVLB  B
06068:  BTFSC  xAA.2
0606A:  MOVLW  01
0606C:  MOVLB  C
0606E:  MOVWF  x26
06070:  MOVLW  00
06072:  MOVLB  B
06074:  BTFSC  xAC.2
06076:  MOVLW  01
06078:  MOVLB  C
0607A:  IORWF  x26,W
0607C:  MOVWF  x25
0607E:  MOVLW  00
06080:  MOVLB  B
06082:  BTFSS  xA8.2
06084:  MOVLW  01
06086:  MOVLB  C
06088:  ANDWF  x25,F
0608A:  MOVLW  00
0608C:  MOVLB  B
0608E:  BTFSC  xA2.2
06090:  MOVLW  01
06092:  MOVLB  C
06094:  MOVWF  x28
06096:  MOVLW  00
06098:  MOVLB  B
0609A:  BTFSC  xA4.2
0609C:  MOVLW  01
0609E:  MOVLB  C
060A0:  IORWF  x28,W
060A2:  ANDWF  x25,W
060A4:  IORWF  x24,W
060A6:  BCF    x23.0
060A8:  BTFSC  FE8.0
060AA:  BSF    x23.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
060AC:  MOVLW  00
060AE:  BTFSC  x23.0
060B0:  MOVLW  01
060B2:  MOVWF  x24
060B4:  MOVLW  00
060B6:  MOVLB  B
060B8:  BTFSC  xAA.3
060BA:  MOVLW  01
060BC:  MOVLB  C
060BE:  MOVWF  x26
060C0:  MOVLW  00
060C2:  MOVLB  B
060C4:  BTFSC  xAC.3
060C6:  MOVLW  01
060C8:  MOVLB  C
060CA:  IORWF  x26,W
060CC:  MOVWF  x25
060CE:  MOVLW  00
060D0:  MOVLB  B
060D2:  BTFSS  xA8.3
060D4:  MOVLW  01
060D6:  MOVLB  C
060D8:  ANDWF  x25,F
060DA:  MOVLW  00
060DC:  MOVLB  B
060DE:  BTFSC  xA2.3
060E0:  MOVLW  01
060E2:  MOVLB  C
060E4:  MOVWF  x28
060E6:  MOVLW  00
060E8:  MOVLB  B
060EA:  BTFSC  xA4.3
060EC:  MOVLW  01
060EE:  MOVLB  C
060F0:  IORWF  x28,W
060F2:  ANDWF  x25,W
060F4:  IORWF  x24,W
060F6:  BCF    x23.0
060F8:  BTFSC  FE8.0
060FA:  BSF    x23.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
060FC:  MOVLW  00
060FE:  BTFSC  x23.0
06100:  MOVLW  01
06102:  MOVWF  x24
06104:  MOVLW  00
06106:  MOVLB  B
06108:  BTFSC  xAA.4
0610A:  MOVLW  01
0610C:  MOVLB  C
0610E:  MOVWF  x26
06110:  MOVLW  00
06112:  MOVLB  B
06114:  BTFSC  xAC.4
06116:  MOVLW  01
06118:  MOVLB  C
0611A:  IORWF  x26,W
0611C:  MOVWF  x25
0611E:  MOVLW  00
06120:  MOVLB  B
06122:  BTFSS  xA8.4
06124:  MOVLW  01
06126:  MOVLB  C
06128:  ANDWF  x25,F
0612A:  MOVLW  00
0612C:  MOVLB  B
0612E:  BTFSC  xA2.4
06130:  MOVLW  01
06132:  MOVLB  C
06134:  MOVWF  x28
06136:  MOVLW  00
06138:  MOVLB  B
0613A:  BTFSC  xA4.4
0613C:  MOVLW  01
0613E:  MOVLB  C
06140:  IORWF  x28,W
06142:  ANDWF  x25,W
06144:  IORWF  x24,W
06146:  BCF    x23.0
06148:  BTFSC  FE8.0
0614A:  BSF    x23.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
0614C:  MOVLW  00
0614E:  BTFSC  x23.0
06150:  MOVLW  01
06152:  MOVWF  x24
06154:  MOVLW  00
06156:  MOVLB  B
06158:  BTFSC  xAA.5
0615A:  MOVLW  01
0615C:  MOVLB  C
0615E:  MOVWF  x26
06160:  MOVLW  00
06162:  MOVLB  B
06164:  BTFSC  xAC.5
06166:  MOVLW  01
06168:  MOVLB  C
0616A:  IORWF  x26,W
0616C:  MOVWF  x25
0616E:  MOVLW  00
06170:  MOVLB  B
06172:  BTFSS  xA8.5
06174:  MOVLW  01
06176:  MOVLB  C
06178:  ANDWF  x25,F
0617A:  MOVLW  00
0617C:  MOVLB  B
0617E:  BTFSC  xA2.5
06180:  MOVLW  01
06182:  MOVLB  C
06184:  MOVWF  x28
06186:  MOVLW  00
06188:  MOVLB  B
0618A:  BTFSC  xA4.5
0618C:  MOVLW  01
0618E:  MOVLB  C
06190:  IORWF  x28,W
06192:  ANDWF  x25,W
06194:  IORWF  x24,W
06196:  BCF    x23.0
06198:  BTFSC  FE8.0
0619A:  BSF    x23.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
0619C:  MOVLW  00
0619E:  BTFSC  x23.0
061A0:  MOVLW  01
061A2:  MOVWF  x24
061A4:  MOVLW  00
061A6:  MOVLB  B
061A8:  BTFSC  xAA.6
061AA:  MOVLW  01
061AC:  MOVLB  C
061AE:  MOVWF  x26
061B0:  MOVLW  00
061B2:  MOVLB  B
061B4:  BTFSC  xAC.6
061B6:  MOVLW  01
061B8:  MOVLB  C
061BA:  IORWF  x26,W
061BC:  MOVWF  x25
061BE:  MOVLW  00
061C0:  MOVLB  B
061C2:  BTFSS  xA8.6
061C4:  MOVLW  01
061C6:  MOVLB  C
061C8:  ANDWF  x25,F
061CA:  MOVLW  00
061CC:  MOVLB  B
061CE:  BTFSC  xA2.6
061D0:  MOVLW  01
061D2:  MOVLB  C
061D4:  MOVWF  x28
061D6:  MOVLW  00
061D8:  MOVLB  B
061DA:  BTFSC  xA4.6
061DC:  MOVLW  01
061DE:  MOVLB  C
061E0:  IORWF  x28,W
061E2:  ANDWF  x25,W
061E4:  IORWF  x24,W
061E6:  BCF    x23.0
061E8:  BTFSC  FE8.0
061EA:  BSF    x23.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
061EC:  MOVLW  00
061EE:  BTFSC  x23.0
061F0:  MOVLW  01
061F2:  MOVWF  x24
061F4:  MOVLW  00
061F6:  MOVLB  B
061F8:  BTFSC  xAA.7
061FA:  MOVLW  01
061FC:  MOVLB  C
061FE:  MOVWF  x26
06200:  MOVLW  00
06202:  MOVLB  B
06204:  BTFSC  xAC.7
06206:  MOVLW  01
06208:  MOVLB  C
0620A:  IORWF  x26,W
0620C:  MOVWF  x25
0620E:  MOVLW  00
06210:  MOVLB  B
06212:  BTFSS  xA8.7
06214:  MOVLW  01
06216:  MOVLB  C
06218:  ANDWF  x25,F
0621A:  MOVLW  00
0621C:  MOVLB  B
0621E:  BTFSC  xA2.7
06220:  MOVLW  01
06222:  MOVLB  C
06224:  MOVWF  x28
06226:  MOVLW  00
06228:  MOVLB  B
0622A:  BTFSC  xA4.7
0622C:  MOVLW  01
0622E:  MOVLB  C
06230:  IORWF  x28,W
06232:  ANDWF  x25,W
06234:  IORWF  x24,W
06236:  BCF    x23.0
06238:  BTFSC  FE8.0
0623A:  BSF    x23.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (OutputType.B9 | OutputBoth.B9));
0623C:  MOVLW  00
0623E:  BTFSC  x23.0
06240:  MOVLW  01
06242:  MOVWF  x24
06244:  MOVLW  00
06246:  MOVLB  B
06248:  BTFSC  xAB.0
0624A:  MOVLW  01
0624C:  MOVLB  C
0624E:  MOVWF  x26
06250:  MOVLW  00
06252:  MOVLB  B
06254:  BTFSC  xAD.0
06256:  MOVLW  01
06258:  MOVLB  C
0625A:  IORWF  x26,W
0625C:  MOVWF  x25
0625E:  MOVLW  00
06260:  MOVLB  B
06262:  BTFSS  xA9.0
06264:  MOVLW  01
06266:  MOVLB  C
06268:  ANDWF  x25,F
0626A:  MOVLW  00
0626C:  MOVLB  B
0626E:  BTFSC  xA3.0
06270:  MOVLW  01
06272:  MOVLB  C
06274:  MOVWF  x28
06276:  MOVLW  00
06278:  MOVLB  B
0627A:  BTFSC  xA5.0
0627C:  MOVLW  01
0627E:  MOVLB  C
06280:  IORWF  x28,W
06282:  ANDWF  x25,W
06284:  IORWF  x24,W
06286:  BCF    x23.0
06288:  BTFSC  FE8.0
0628A:  BSF    x23.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (OutputType.B10 | OutputBoth.B10));
0628C:  MOVLW  00
0628E:  BTFSC  x23.0
06290:  MOVLW  01
06292:  MOVWF  x24
06294:  MOVLW  00
06296:  MOVLB  B
06298:  BTFSC  xAB.1
0629A:  MOVLW  01
0629C:  MOVLB  C
0629E:  MOVWF  x26
062A0:  MOVLW  00
062A2:  MOVLB  B
062A4:  BTFSC  xAD.1
062A6:  MOVLW  01
062A8:  MOVLB  C
062AA:  IORWF  x26,W
062AC:  MOVWF  x25
062AE:  MOVLW  00
062B0:  MOVLB  B
062B2:  BTFSS  xA9.1
062B4:  MOVLW  01
062B6:  MOVLB  C
062B8:  ANDWF  x25,F
062BA:  MOVLW  00
062BC:  MOVLB  B
062BE:  BTFSC  xA3.1
062C0:  MOVLW  01
062C2:  MOVLB  C
062C4:  MOVWF  x28
062C6:  MOVLW  00
062C8:  MOVLB  B
062CA:  BTFSC  xA5.1
062CC:  MOVLW  01
062CE:  MOVLB  C
062D0:  IORWF  x28,W
062D2:  ANDWF  x25,W
062D4:  IORWF  x24,W
062D6:  BCF    x23.0
062D8:  BTFSC  FE8.0
062DA:  BSF    x23.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (OutputType.B11 | OutputBoth.B11));
062DC:  MOVLW  00
062DE:  BTFSC  x23.0
062E0:  MOVLW  01
062E2:  MOVWF  x24
062E4:  MOVLW  00
062E6:  MOVLB  B
062E8:  BTFSC  xAB.2
062EA:  MOVLW  01
062EC:  MOVLB  C
062EE:  MOVWF  x26
062F0:  MOVLW  00
062F2:  MOVLB  B
062F4:  BTFSC  xAD.2
062F6:  MOVLW  01
062F8:  MOVLB  C
062FA:  IORWF  x26,W
062FC:  MOVWF  x25
062FE:  MOVLW  00
06300:  MOVLB  B
06302:  BTFSS  xA9.2
06304:  MOVLW  01
06306:  MOVLB  C
06308:  ANDWF  x25,F
0630A:  MOVLW  00
0630C:  MOVLB  B
0630E:  BTFSC  xA3.2
06310:  MOVLW  01
06312:  MOVLB  C
06314:  MOVWF  x28
06316:  MOVLW  00
06318:  MOVLB  B
0631A:  BTFSC  xA5.2
0631C:  MOVLW  01
0631E:  MOVLB  C
06320:  IORWF  x28,W
06322:  ANDWF  x25,W
06324:  IORWF  x24,W
06326:  BCF    x23.0
06328:  BTFSC  FE8.0
0632A:  BSF    x23.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (OutputType.B12 | OutputBoth.B12));
0632C:  MOVLW  00
0632E:  BTFSC  x23.0
06330:  MOVLW  01
06332:  MOVWF  x24
06334:  MOVLW  00
06336:  MOVLB  B
06338:  BTFSC  xAB.3
0633A:  MOVLW  01
0633C:  MOVLB  C
0633E:  MOVWF  x26
06340:  MOVLW  00
06342:  MOVLB  B
06344:  BTFSC  xAD.3
06346:  MOVLW  01
06348:  MOVLB  C
0634A:  IORWF  x26,W
0634C:  MOVWF  x25
0634E:  MOVLW  00
06350:  MOVLB  B
06352:  BTFSS  xA9.3
06354:  MOVLW  01
06356:  MOVLB  C
06358:  ANDWF  x25,F
0635A:  MOVLW  00
0635C:  MOVLB  B
0635E:  BTFSC  xA3.3
06360:  MOVLW  01
06362:  MOVLB  C
06364:  MOVWF  x28
06366:  MOVLW  00
06368:  MOVLB  B
0636A:  BTFSC  xA5.3
0636C:  MOVLW  01
0636E:  MOVLB  C
06370:  IORWF  x28,W
06372:  ANDWF  x25,W
06374:  IORWF  x24,W
06376:  BCF    x23.0
06378:  BTFSC  FE8.0
0637A:  BSF    x23.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (OutputType.B13 | OutputBoth.B13));
0637C:  MOVLW  00
0637E:  BTFSC  x23.0
06380:  MOVLW  01
06382:  MOVWF  x24
06384:  MOVLW  00
06386:  MOVLB  B
06388:  BTFSC  xAB.4
0638A:  MOVLW  01
0638C:  MOVLB  C
0638E:  MOVWF  x26
06390:  MOVLW  00
06392:  MOVLB  B
06394:  BTFSC  xAD.4
06396:  MOVLW  01
06398:  MOVLB  C
0639A:  IORWF  x26,W
0639C:  MOVWF  x25
0639E:  MOVLW  00
063A0:  MOVLB  B
063A2:  BTFSS  xA9.4
063A4:  MOVLW  01
063A6:  MOVLB  C
063A8:  ANDWF  x25,F
063AA:  MOVLW  00
063AC:  MOVLB  B
063AE:  BTFSC  xA3.4
063B0:  MOVLW  01
063B2:  MOVLB  C
063B4:  MOVWF  x28
063B6:  MOVLW  00
063B8:  MOVLB  B
063BA:  BTFSC  xA5.4
063BC:  MOVLW  01
063BE:  MOVLB  C
063C0:  IORWF  x28,W
063C2:  ANDWF  x25,W
063C4:  IORWF  x24,W
063C6:  BCF    x23.0
063C8:  BTFSC  FE8.0
063CA:  BSF    x23.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (OutputType.B14 | OutputBoth.B14));
063CC:  MOVLW  00
063CE:  BTFSC  x23.0
063D0:  MOVLW  01
063D2:  MOVWF  x24
063D4:  MOVLW  00
063D6:  MOVLB  B
063D8:  BTFSC  xAB.5
063DA:  MOVLW  01
063DC:  MOVLB  C
063DE:  MOVWF  x26
063E0:  MOVLW  00
063E2:  MOVLB  B
063E4:  BTFSC  xAD.5
063E6:  MOVLW  01
063E8:  MOVLB  C
063EA:  IORWF  x26,W
063EC:  MOVWF  x25
063EE:  MOVLW  00
063F0:  MOVLB  B
063F2:  BTFSS  xA9.5
063F4:  MOVLW  01
063F6:  MOVLB  C
063F8:  ANDWF  x25,F
063FA:  MOVLW  00
063FC:  MOVLB  B
063FE:  BTFSC  xA3.5
06400:  MOVLW  01
06402:  MOVLB  C
06404:  MOVWF  x28
06406:  MOVLW  00
06408:  MOVLB  B
0640A:  BTFSC  xA5.5
0640C:  MOVLW  01
0640E:  MOVLB  C
06410:  IORWF  x28,W
06412:  ANDWF  x25,W
06414:  IORWF  x24,W
06416:  BCF    x23.0
06418:  BTFSC  FE8.0
0641A:  BSF    x23.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (OutputType.B15 | OutputBoth.B15));
0641C:  MOVLW  00
0641E:  BTFSC  x23.0
06420:  MOVLW  01
06422:  MOVWF  x24
06424:  MOVLW  00
06426:  MOVLB  B
06428:  BTFSC  xAB.6
0642A:  MOVLW  01
0642C:  MOVLB  C
0642E:  MOVWF  x26
06430:  MOVLW  00
06432:  MOVLB  B
06434:  BTFSC  xAD.6
06436:  MOVLW  01
06438:  MOVLB  C
0643A:  IORWF  x26,W
0643C:  MOVWF  x25
0643E:  MOVLW  00
06440:  MOVLB  B
06442:  BTFSS  xA9.6
06444:  MOVLW  01
06446:  MOVLB  C
06448:  ANDWF  x25,F
0644A:  MOVLW  00
0644C:  MOVLB  B
0644E:  BTFSC  xA3.6
06450:  MOVLW  01
06452:  MOVLB  C
06454:  MOVWF  x28
06456:  MOVLW  00
06458:  MOVLB  B
0645A:  BTFSC  xA5.6
0645C:  MOVLW  01
0645E:  MOVLB  C
06460:  IORWF  x28,W
06462:  ANDWF  x25,W
06464:  IORWF  x24,W
06466:  BCF    x23.0
06468:  BTFSC  FE8.0
0646A:  BSF    x23.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (OutputType.B16 | OutputBoth.B16));
0646C:  MOVLW  00
0646E:  BTFSC  x23.0
06470:  MOVLW  01
06472:  MOVWF  x24
06474:  MOVLW  00
06476:  MOVLB  B
06478:  BTFSC  xAB.7
0647A:  MOVLW  01
0647C:  MOVLB  C
0647E:  MOVWF  x26
06480:  MOVLW  00
06482:  MOVLB  B
06484:  BTFSC  xAD.7
06486:  MOVLW  01
06488:  MOVLB  C
0648A:  IORWF  x26,W
0648C:  MOVWF  x25
0648E:  MOVLW  00
06490:  MOVLB  B
06492:  BTFSS  xA9.7
06494:  MOVLW  01
06496:  MOVLB  C
06498:  ANDWF  x25,F
0649A:  MOVLW  00
0649C:  MOVLB  B
0649E:  BTFSC  xA3.7
064A0:  MOVLW  01
064A2:  MOVLB  C
064A4:  MOVWF  x28
064A6:  MOVLW  00
064A8:  MOVLB  B
064AA:  BTFSC  xA5.7
064AC:  MOVLW  01
064AE:  MOVLB  C
064B0:  IORWF  x28,W
064B2:  ANDWF  x25,W
064B4:  IORWF  x24,W
064B6:  BCF    x23.0
064B8:  BTFSC  FE8.0
064BA:  BSF    x23.0
....................       /*
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (OutputType.B17 | OutputBoth.B17));
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (OutputType.B18 | OutputBoth.B18));
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (OutputType.B19 | OutputBoth.B19));
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (OutputType.B20 | OutputBoth.B20));
....................       */
....................      
....................    }
064BC:  BRA    69BC
....................    else if(DatType == 0x02)             //Bell
064BE:  MOVF   x22,W
064C0:  SUBLW  02
064C2:  BTFSS  FD8.2
064C4:  BRA    69BC
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
064C6:  MOVLW  00
064C8:  MOVLB  B
064CA:  BTFSC  xAA.0
064CC:  MOVLW  01
064CE:  MOVLB  C
064D0:  MOVWF  x25
064D2:  MOVLW  00
064D4:  MOVLB  B
064D6:  BTFSC  xAC.0
064D8:  MOVLW  01
064DA:  MOVLB  C
064DC:  IORWF  x25,W
064DE:  MOVWF  x24
064E0:  MOVLW  00
064E2:  MOVLB  B
064E4:  BTFSS  xA8.0
064E6:  MOVLW  01
064E8:  MOVLB  C
064EA:  ANDWF  x24,F
064EC:  MOVLW  00
064EE:  MOVLB  B
064F0:  BTFSS  xA2.0
064F2:  MOVLW  01
064F4:  MOVLB  C
064F6:  MOVWF  x27
064F8:  MOVLW  00
064FA:  MOVLB  B
064FC:  BTFSC  xA4.0
064FE:  MOVLW  01
06500:  MOVLB  C
06502:  IORWF  x27,W
06504:  ANDWF  x24,W
06506:  BCF    x23.0
06508:  BTFSC  FE8.0
0650A:  BSF    x23.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
0650C:  MOVLW  00
0650E:  BTFSC  x23.0
06510:  MOVLW  01
06512:  MOVWF  x24
06514:  MOVLW  00
06516:  MOVLB  B
06518:  BTFSC  xAA.1
0651A:  MOVLW  01
0651C:  MOVLB  C
0651E:  MOVWF  x26
06520:  MOVLW  00
06522:  MOVLB  B
06524:  BTFSC  xAC.1
06526:  MOVLW  01
06528:  MOVLB  C
0652A:  IORWF  x26,W
0652C:  MOVWF  x25
0652E:  MOVLW  00
06530:  MOVLB  B
06532:  BTFSS  xA8.1
06534:  MOVLW  01
06536:  MOVLB  C
06538:  ANDWF  x25,F
0653A:  MOVLW  00
0653C:  MOVLB  B
0653E:  BTFSS  xA2.1
06540:  MOVLW  01
06542:  MOVLB  C
06544:  MOVWF  x28
06546:  MOVLW  00
06548:  MOVLB  B
0654A:  BTFSC  xA4.1
0654C:  MOVLW  01
0654E:  MOVLB  C
06550:  IORWF  x28,W
06552:  ANDWF  x25,W
06554:  IORWF  x24,W
06556:  BCF    x23.0
06558:  BTFSC  FE8.0
0655A:  BSF    x23.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
0655C:  MOVLW  00
0655E:  BTFSC  x23.0
06560:  MOVLW  01
06562:  MOVWF  x24
06564:  MOVLW  00
06566:  MOVLB  B
06568:  BTFSC  xAA.2
0656A:  MOVLW  01
0656C:  MOVLB  C
0656E:  MOVWF  x26
06570:  MOVLW  00
06572:  MOVLB  B
06574:  BTFSC  xAC.2
06576:  MOVLW  01
06578:  MOVLB  C
0657A:  IORWF  x26,W
0657C:  MOVWF  x25
0657E:  MOVLW  00
06580:  MOVLB  B
06582:  BTFSS  xA8.2
06584:  MOVLW  01
06586:  MOVLB  C
06588:  ANDWF  x25,F
0658A:  MOVLW  00
0658C:  MOVLB  B
0658E:  BTFSS  xA2.2
06590:  MOVLW  01
06592:  MOVLB  C
06594:  MOVWF  x28
06596:  MOVLW  00
06598:  MOVLB  B
0659A:  BTFSC  xA4.2
0659C:  MOVLW  01
0659E:  MOVLB  C
065A0:  IORWF  x28,W
065A2:  ANDWF  x25,W
065A4:  IORWF  x24,W
065A6:  BCF    x23.0
065A8:  BTFSC  FE8.0
065AA:  BSF    x23.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
065AC:  MOVLW  00
065AE:  BTFSC  x23.0
065B0:  MOVLW  01
065B2:  MOVWF  x24
065B4:  MOVLW  00
065B6:  MOVLB  B
065B8:  BTFSC  xAA.3
065BA:  MOVLW  01
065BC:  MOVLB  C
065BE:  MOVWF  x26
065C0:  MOVLW  00
065C2:  MOVLB  B
065C4:  BTFSC  xAC.3
065C6:  MOVLW  01
065C8:  MOVLB  C
065CA:  IORWF  x26,W
065CC:  MOVWF  x25
065CE:  MOVLW  00
065D0:  MOVLB  B
065D2:  BTFSS  xA8.3
065D4:  MOVLW  01
065D6:  MOVLB  C
065D8:  ANDWF  x25,F
065DA:  MOVLW  00
065DC:  MOVLB  B
065DE:  BTFSS  xA2.3
065E0:  MOVLW  01
065E2:  MOVLB  C
065E4:  MOVWF  x28
065E6:  MOVLW  00
065E8:  MOVLB  B
065EA:  BTFSC  xA4.3
065EC:  MOVLW  01
065EE:  MOVLB  C
065F0:  IORWF  x28,W
065F2:  ANDWF  x25,W
065F4:  IORWF  x24,W
065F6:  BCF    x23.0
065F8:  BTFSC  FE8.0
065FA:  BSF    x23.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
065FC:  MOVLW  00
065FE:  BTFSC  x23.0
06600:  MOVLW  01
06602:  MOVWF  x24
06604:  MOVLW  00
06606:  MOVLB  B
06608:  BTFSC  xAA.4
0660A:  MOVLW  01
0660C:  MOVLB  C
0660E:  MOVWF  x26
06610:  MOVLW  00
06612:  MOVLB  B
06614:  BTFSC  xAC.4
06616:  MOVLW  01
06618:  MOVLB  C
0661A:  IORWF  x26,W
0661C:  MOVWF  x25
0661E:  MOVLW  00
06620:  MOVLB  B
06622:  BTFSS  xA8.4
06624:  MOVLW  01
06626:  MOVLB  C
06628:  ANDWF  x25,F
0662A:  MOVLW  00
0662C:  MOVLB  B
0662E:  BTFSS  xA2.4
06630:  MOVLW  01
06632:  MOVLB  C
06634:  MOVWF  x28
06636:  MOVLW  00
06638:  MOVLB  B
0663A:  BTFSC  xA4.4
0663C:  MOVLW  01
0663E:  MOVLB  C
06640:  IORWF  x28,W
06642:  ANDWF  x25,W
06644:  IORWF  x24,W
06646:  BCF    x23.0
06648:  BTFSC  FE8.0
0664A:  BSF    x23.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
0664C:  MOVLW  00
0664E:  BTFSC  x23.0
06650:  MOVLW  01
06652:  MOVWF  x24
06654:  MOVLW  00
06656:  MOVLB  B
06658:  BTFSC  xAA.5
0665A:  MOVLW  01
0665C:  MOVLB  C
0665E:  MOVWF  x26
06660:  MOVLW  00
06662:  MOVLB  B
06664:  BTFSC  xAC.5
06666:  MOVLW  01
06668:  MOVLB  C
0666A:  IORWF  x26,W
0666C:  MOVWF  x25
0666E:  MOVLW  00
06670:  MOVLB  B
06672:  BTFSS  xA8.5
06674:  MOVLW  01
06676:  MOVLB  C
06678:  ANDWF  x25,F
0667A:  MOVLW  00
0667C:  MOVLB  B
0667E:  BTFSS  xA2.5
06680:  MOVLW  01
06682:  MOVLB  C
06684:  MOVWF  x28
06686:  MOVLW  00
06688:  MOVLB  B
0668A:  BTFSC  xA4.5
0668C:  MOVLW  01
0668E:  MOVLB  C
06690:  IORWF  x28,W
06692:  ANDWF  x25,W
06694:  IORWF  x24,W
06696:  BCF    x23.0
06698:  BTFSC  FE8.0
0669A:  BSF    x23.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
0669C:  MOVLW  00
0669E:  BTFSC  x23.0
066A0:  MOVLW  01
066A2:  MOVWF  x24
066A4:  MOVLW  00
066A6:  MOVLB  B
066A8:  BTFSC  xAA.6
066AA:  MOVLW  01
066AC:  MOVLB  C
066AE:  MOVWF  x26
066B0:  MOVLW  00
066B2:  MOVLB  B
066B4:  BTFSC  xAC.6
066B6:  MOVLW  01
066B8:  MOVLB  C
066BA:  IORWF  x26,W
066BC:  MOVWF  x25
066BE:  MOVLW  00
066C0:  MOVLB  B
066C2:  BTFSS  xA8.6
066C4:  MOVLW  01
066C6:  MOVLB  C
066C8:  ANDWF  x25,F
066CA:  MOVLW  00
066CC:  MOVLB  B
066CE:  BTFSS  xA2.6
066D0:  MOVLW  01
066D2:  MOVLB  C
066D4:  MOVWF  x28
066D6:  MOVLW  00
066D8:  MOVLB  B
066DA:  BTFSC  xA4.6
066DC:  MOVLW  01
066DE:  MOVLB  C
066E0:  IORWF  x28,W
066E2:  ANDWF  x25,W
066E4:  IORWF  x24,W
066E6:  BCF    x23.0
066E8:  BTFSC  FE8.0
066EA:  BSF    x23.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
066EC:  MOVLW  00
066EE:  BTFSC  x23.0
066F0:  MOVLW  01
066F2:  MOVWF  x24
066F4:  MOVLW  00
066F6:  MOVLB  B
066F8:  BTFSC  xAA.7
066FA:  MOVLW  01
066FC:  MOVLB  C
066FE:  MOVWF  x26
06700:  MOVLW  00
06702:  MOVLB  B
06704:  BTFSC  xAC.7
06706:  MOVLW  01
06708:  MOVLB  C
0670A:  IORWF  x26,W
0670C:  MOVWF  x25
0670E:  MOVLW  00
06710:  MOVLB  B
06712:  BTFSS  xA8.7
06714:  MOVLW  01
06716:  MOVLB  C
06718:  ANDWF  x25,F
0671A:  MOVLW  00
0671C:  MOVLB  B
0671E:  BTFSS  xA2.7
06720:  MOVLW  01
06722:  MOVLB  C
06724:  MOVWF  x28
06726:  MOVLW  00
06728:  MOVLB  B
0672A:  BTFSC  xA4.7
0672C:  MOVLW  01
0672E:  MOVLB  C
06730:  IORWF  x28,W
06732:  ANDWF  x25,W
06734:  IORWF  x24,W
06736:  BCF    x23.0
06738:  BTFSC  FE8.0
0673A:  BSF    x23.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (~OutputType.B9 | OutputBoth.B9));
0673C:  MOVLW  00
0673E:  BTFSC  x23.0
06740:  MOVLW  01
06742:  MOVWF  x24
06744:  MOVLW  00
06746:  MOVLB  B
06748:  BTFSC  xAB.0
0674A:  MOVLW  01
0674C:  MOVLB  C
0674E:  MOVWF  x26
06750:  MOVLW  00
06752:  MOVLB  B
06754:  BTFSC  xAD.0
06756:  MOVLW  01
06758:  MOVLB  C
0675A:  IORWF  x26,W
0675C:  MOVWF  x25
0675E:  MOVLW  00
06760:  MOVLB  B
06762:  BTFSS  xA9.0
06764:  MOVLW  01
06766:  MOVLB  C
06768:  ANDWF  x25,F
0676A:  MOVLW  00
0676C:  MOVLB  B
0676E:  BTFSS  xA3.0
06770:  MOVLW  01
06772:  MOVLB  C
06774:  MOVWF  x28
06776:  MOVLW  00
06778:  MOVLB  B
0677A:  BTFSC  xA5.0
0677C:  MOVLW  01
0677E:  MOVLB  C
06780:  IORWF  x28,W
06782:  ANDWF  x25,W
06784:  IORWF  x24,W
06786:  BCF    x23.0
06788:  BTFSC  FE8.0
0678A:  BSF    x23.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (~OutputType.B10 | OutputBoth.B10));
0678C:  MOVLW  00
0678E:  BTFSC  x23.0
06790:  MOVLW  01
06792:  MOVWF  x24
06794:  MOVLW  00
06796:  MOVLB  B
06798:  BTFSC  xAB.1
0679A:  MOVLW  01
0679C:  MOVLB  C
0679E:  MOVWF  x26
067A0:  MOVLW  00
067A2:  MOVLB  B
067A4:  BTFSC  xAD.1
067A6:  MOVLW  01
067A8:  MOVLB  C
067AA:  IORWF  x26,W
067AC:  MOVWF  x25
067AE:  MOVLW  00
067B0:  MOVLB  B
067B2:  BTFSS  xA9.1
067B4:  MOVLW  01
067B6:  MOVLB  C
067B8:  ANDWF  x25,F
067BA:  MOVLW  00
067BC:  MOVLB  B
067BE:  BTFSS  xA3.1
067C0:  MOVLW  01
067C2:  MOVLB  C
067C4:  MOVWF  x28
067C6:  MOVLW  00
067C8:  MOVLB  B
067CA:  BTFSC  xA5.1
067CC:  MOVLW  01
067CE:  MOVLB  C
067D0:  IORWF  x28,W
067D2:  ANDWF  x25,W
067D4:  IORWF  x24,W
067D6:  BCF    x23.0
067D8:  BTFSC  FE8.0
067DA:  BSF    x23.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (~OutputType.B11 | OutputBoth.B11));
067DC:  MOVLW  00
067DE:  BTFSC  x23.0
067E0:  MOVLW  01
067E2:  MOVWF  x24
067E4:  MOVLW  00
067E6:  MOVLB  B
067E8:  BTFSC  xAB.2
067EA:  MOVLW  01
067EC:  MOVLB  C
067EE:  MOVWF  x26
067F0:  MOVLW  00
067F2:  MOVLB  B
067F4:  BTFSC  xAD.2
067F6:  MOVLW  01
067F8:  MOVLB  C
067FA:  IORWF  x26,W
067FC:  MOVWF  x25
067FE:  MOVLW  00
06800:  MOVLB  B
06802:  BTFSS  xA9.2
06804:  MOVLW  01
06806:  MOVLB  C
06808:  ANDWF  x25,F
0680A:  MOVLW  00
0680C:  MOVLB  B
0680E:  BTFSS  xA3.2
06810:  MOVLW  01
06812:  MOVLB  C
06814:  MOVWF  x28
06816:  MOVLW  00
06818:  MOVLB  B
0681A:  BTFSC  xA5.2
0681C:  MOVLW  01
0681E:  MOVLB  C
06820:  IORWF  x28,W
06822:  ANDWF  x25,W
06824:  IORWF  x24,W
06826:  BCF    x23.0
06828:  BTFSC  FE8.0
0682A:  BSF    x23.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (~OutputType.B12 | OutputBoth.B12));
0682C:  MOVLW  00
0682E:  BTFSC  x23.0
06830:  MOVLW  01
06832:  MOVWF  x24
06834:  MOVLW  00
06836:  MOVLB  B
06838:  BTFSC  xAB.3
0683A:  MOVLW  01
0683C:  MOVLB  C
0683E:  MOVWF  x26
06840:  MOVLW  00
06842:  MOVLB  B
06844:  BTFSC  xAD.3
06846:  MOVLW  01
06848:  MOVLB  C
0684A:  IORWF  x26,W
0684C:  MOVWF  x25
0684E:  MOVLW  00
06850:  MOVLB  B
06852:  BTFSS  xA9.3
06854:  MOVLW  01
06856:  MOVLB  C
06858:  ANDWF  x25,F
0685A:  MOVLW  00
0685C:  MOVLB  B
0685E:  BTFSS  xA3.3
06860:  MOVLW  01
06862:  MOVLB  C
06864:  MOVWF  x28
06866:  MOVLW  00
06868:  MOVLB  B
0686A:  BTFSC  xA5.3
0686C:  MOVLW  01
0686E:  MOVLB  C
06870:  IORWF  x28,W
06872:  ANDWF  x25,W
06874:  IORWF  x24,W
06876:  BCF    x23.0
06878:  BTFSC  FE8.0
0687A:  BSF    x23.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (~OutputType.B13 | OutputBoth.B13));
0687C:  MOVLW  00
0687E:  BTFSC  x23.0
06880:  MOVLW  01
06882:  MOVWF  x24
06884:  MOVLW  00
06886:  MOVLB  B
06888:  BTFSC  xAB.4
0688A:  MOVLW  01
0688C:  MOVLB  C
0688E:  MOVWF  x26
06890:  MOVLW  00
06892:  MOVLB  B
06894:  BTFSC  xAD.4
06896:  MOVLW  01
06898:  MOVLB  C
0689A:  IORWF  x26,W
0689C:  MOVWF  x25
0689E:  MOVLW  00
068A0:  MOVLB  B
068A2:  BTFSS  xA9.4
068A4:  MOVLW  01
068A6:  MOVLB  C
068A8:  ANDWF  x25,F
068AA:  MOVLW  00
068AC:  MOVLB  B
068AE:  BTFSS  xA3.4
068B0:  MOVLW  01
068B2:  MOVLB  C
068B4:  MOVWF  x28
068B6:  MOVLW  00
068B8:  MOVLB  B
068BA:  BTFSC  xA5.4
068BC:  MOVLW  01
068BE:  MOVLB  C
068C0:  IORWF  x28,W
068C2:  ANDWF  x25,W
068C4:  IORWF  x24,W
068C6:  BCF    x23.0
068C8:  BTFSC  FE8.0
068CA:  BSF    x23.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (~OutputType.B14 | OutputBoth.B14));
068CC:  MOVLW  00
068CE:  BTFSC  x23.0
068D0:  MOVLW  01
068D2:  MOVWF  x24
068D4:  MOVLW  00
068D6:  MOVLB  B
068D8:  BTFSC  xAB.5
068DA:  MOVLW  01
068DC:  MOVLB  C
068DE:  MOVWF  x26
068E0:  MOVLW  00
068E2:  MOVLB  B
068E4:  BTFSC  xAD.5
068E6:  MOVLW  01
068E8:  MOVLB  C
068EA:  IORWF  x26,W
068EC:  MOVWF  x25
068EE:  MOVLW  00
068F0:  MOVLB  B
068F2:  BTFSS  xA9.5
068F4:  MOVLW  01
068F6:  MOVLB  C
068F8:  ANDWF  x25,F
068FA:  MOVLW  00
068FC:  MOVLB  B
068FE:  BTFSS  xA3.5
06900:  MOVLW  01
06902:  MOVLB  C
06904:  MOVWF  x28
06906:  MOVLW  00
06908:  MOVLB  B
0690A:  BTFSC  xA5.5
0690C:  MOVLW  01
0690E:  MOVLB  C
06910:  IORWF  x28,W
06912:  ANDWF  x25,W
06914:  IORWF  x24,W
06916:  BCF    x23.0
06918:  BTFSC  FE8.0
0691A:  BSF    x23.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (~OutputType.B15 | OutputBoth.B15));
0691C:  MOVLW  00
0691E:  BTFSC  x23.0
06920:  MOVLW  01
06922:  MOVWF  x24
06924:  MOVLW  00
06926:  MOVLB  B
06928:  BTFSC  xAB.6
0692A:  MOVLW  01
0692C:  MOVLB  C
0692E:  MOVWF  x26
06930:  MOVLW  00
06932:  MOVLB  B
06934:  BTFSC  xAD.6
06936:  MOVLW  01
06938:  MOVLB  C
0693A:  IORWF  x26,W
0693C:  MOVWF  x25
0693E:  MOVLW  00
06940:  MOVLB  B
06942:  BTFSS  xA9.6
06944:  MOVLW  01
06946:  MOVLB  C
06948:  ANDWF  x25,F
0694A:  MOVLW  00
0694C:  MOVLB  B
0694E:  BTFSS  xA3.6
06950:  MOVLW  01
06952:  MOVLB  C
06954:  MOVWF  x28
06956:  MOVLW  00
06958:  MOVLB  B
0695A:  BTFSC  xA5.6
0695C:  MOVLW  01
0695E:  MOVLB  C
06960:  IORWF  x28,W
06962:  ANDWF  x25,W
06964:  IORWF  x24,W
06966:  BCF    x23.0
06968:  BTFSC  FE8.0
0696A:  BSF    x23.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (~OutputType.B16 | OutputBoth.B16));
0696C:  MOVLW  00
0696E:  BTFSC  x23.0
06970:  MOVLW  01
06972:  MOVWF  x24
06974:  MOVLW  00
06976:  MOVLB  B
06978:  BTFSC  xAB.7
0697A:  MOVLW  01
0697C:  MOVLB  C
0697E:  MOVWF  x26
06980:  MOVLW  00
06982:  MOVLB  B
06984:  BTFSC  xAD.7
06986:  MOVLW  01
06988:  MOVLB  C
0698A:  IORWF  x26,W
0698C:  MOVWF  x25
0698E:  MOVLW  00
06990:  MOVLB  B
06992:  BTFSS  xA9.7
06994:  MOVLW  01
06996:  MOVLB  C
06998:  ANDWF  x25,F
0699A:  MOVLW  00
0699C:  MOVLB  B
0699E:  BTFSS  xA3.7
069A0:  MOVLW  01
069A2:  MOVLB  C
069A4:  MOVWF  x28
069A6:  MOVLW  00
069A8:  MOVLB  B
069AA:  BTFSC  xA5.7
069AC:  MOVLW  01
069AE:  MOVLB  C
069B0:  IORWF  x28,W
069B2:  ANDWF  x25,W
069B4:  IORWF  x24,W
069B6:  BCF    x23.0
069B8:  BTFSC  FE8.0
069BA:  BSF    x23.0
....................       /*
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (~OutputType.B17 | OutputBoth.B17));
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (~OutputType.B18 | OutputBoth.B18));
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (~OutputType.B19 | OutputBoth.B19));
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (~OutputType.B20 | OutputBoth.B20));
....................       */
.................... 
....................    }
....................    return(check);
069BC:  MOVLW  00
069BE:  BTFSC  x23.0
069C0:  MOVLW  01
069C2:  MOVWF  01
069C4:  MOVLB  0
069C6:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... void main()
*
08D08:  CLRF   FF8
08D0A:  BCF    FD0.7
08D0C:  BSF    07.7
08D0E:  MOVLW  70
08D10:  MOVWF  FD3
08D12:  BCF    F9B.6
08D14:  BCF    F9B.7
08D16:  BSF    FB8.3
08D18:  MOVLW  A0
08D1A:  MOVWF  FAF
08D1C:  MOVLW  01
08D1E:  MOVWF  FB0
08D20:  MOVLW  A6
08D22:  MOVWF  FAC
08D24:  MOVLW  90
08D26:  MOVWF  FAB
08D28:  BCF    F93.0
08D2A:  BSF    F8A.0
08D2C:  CLRF   19
08D2E:  BCF    1A.0
08D30:  MOVLW  19
08D32:  MOVWF  1B
08D34:  BCF    1A.1
08D36:  MOVLW  64
08D38:  MOVWF  1C
08D3A:  CLRF   1D
08D3C:  BCF    1A.2
08D3E:  BCF    1A.3
08D40:  BCF    1A.4
08D42:  CLRF   2E
08D44:  BCF    1A.5
08D46:  CLRF   2F
08D48:  BCF    1A.6
08D4A:  BCF    1A.7
08D4C:  BCF    30.0
08D4E:  BCF    30.1
08D50:  BCF    30.2
08D52:  CLRF   31
08D54:  BCF    30.3
08D56:  BCF    30.4
08D58:  MOVLW  11
08D5A:  MOVWF  x6F
08D5C:  MOVLW  12
08D5E:  MOVWF  x70
08D60:  MOVLW  13
08D62:  MOVWF  x71
08D64:  MOVLW  14
08D66:  MOVWF  x72
08D68:  MOVLW  16
08D6A:  MOVWF  x73
08D6C:  MOVLW  17
08D6E:  MOVWF  x74
08D70:  MOVLW  18
08D72:  MOVWF  x75
08D74:  MOVLW  19
08D76:  MOVWF  x76
08D78:  MOVLW  20
08D7A:  MOVWF  x77
08D7C:  BCF    30.5
08D7E:  CLRF   x7A
08D80:  MOVLW  01
08D82:  MOVLB  5
08D84:  MOVWF  x7D
08D86:  MOVLW  F4
08D88:  MOVWF  x7C
08D8A:  CLRF   x7F
08D8C:  CLRF   x7E
08D8E:  CLRF   x81
08D90:  CLRF   x80
08D92:  CLRF   x82
08D94:  MOVLB  9
08D96:  CLRF   x87
08D98:  CLRF   x86
08D9A:  CLRF   x88
08D9C:  CLRF   x8A
08D9E:  CLRF   x89
08DA0:  MOVLB  C
08DA2:  CLRF   x16
08DA4:  CLRF   x15
08DA6:  MOVLB  F
08DA8:  CLRF   x38
08DAA:  CLRF   x39
08DAC:  CLRF   x3A
08DAE:  CLRF   F77
08DB0:  CLRF   F78
08DB2:  CLRF   F79
08DB4:  MOVLB  C
08DB6:  CLRF   x17
.................... {
....................    
....................    
....................    delay_ms(50);
08DB8:  MOVLW  32
08DBA:  MOVWF  x23
08DBC:  MOVLB  0
08DBE:  CALL   06AC
....................    output_bit(Pled,0);   //power on watchdog signal
08DC2:  BCF    F8A.5
08DC4:  BCF    F93.5
.................... 
....................    //jj
....................    //setup_adc_ports(NO_ANALOGS|VSS_VDD);
....................    //setup_adc(ADC_OFF|ADC_TAD_MUL_0);
....................    
....................    //setup_spi(FALSE);
....................    
....................    setup_timer_0(RTCC_INTERNAL);
08DC6:  MOVLW  80
08DC8:  MOVWF  FD5
....................    //setup_timer_1(T1_DISABLED);
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
08DCA:  MOVLW  78
08DCC:  IORLW  06
08DCE:  MOVWF  FBA
08DD0:  MOVLW  C4
08DD2:  MOVWF  FBB
....................    //setup_timer_3(T3_DISABLED|T3_DIV_BY_1);
....................    //setup_comparator(NC_NC_NC_NC);
....................    //setup_vref(FALSE);
....................    enable_interrupts(INT_TIMER2);
08DD4:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
08DD6:  BSF    F9D.5
....................    
....................    //setup_oscillator(False);
....................    
.................... 
....................    //  set_tris_c (0b01010111);
....................    //setup_spi(SPI_MASTER | SPI_XMIT_L_TO_H |SPI_SS_DISABLED|SPI_H_TO_L  | SPI_CLK_DIV_4  );
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L  | SPI_CLK_DIV_4 |SPI_SS_DISABLED); // Initial SPI
....................    //setup_spi(SPI_MASTER|SPI_H_TO_L|SPI_SS_DISABLED|SPI_CLK_DIV_16);
....................    //setup_spi2( FALSE );
....................    //setup_spi( FALSE );
....................    
....................   // setup_spi(SPI_MASTER |SPI_SS_DISABLED | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //masterOK
....................    
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_64); //master1 jj
08DD8:  BCF    FC6.5
08DDA:  BCF    F94.5
08DDC:  BSF    F94.4
08DDE:  BCF    F94.3
08DE0:  MOVLW  22
08DE2:  MOVWF  FC6
08DE4:  MOVLW  40
08DE6:  MOVWF  FC7
.................... 
....................     //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 ); //master2
....................     //setup_spi(SPI_MASTER |SPI_SS_DISABLED |SPI_SAMPLE_AT_END | SPI_H_TO_L | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //master1.1
....................    //spi_init(SPI1_MODE0, TRUE);
....................    //spi_init(250000);
....................    //setup_spi(SPI_MASTER | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_SS_DISABLED  | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_T2 | SPI_XMIT_L_TO_H);
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L| SPI_SAMPLE_AT_END | SPI_CLK_DIV_64);//master3
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED| SPI_L_TO_H | SPI_SAMPLE_AT_END | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4);
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_CLK_DIV_4);
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_DIV_16);
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED| spi_L_to_H| SPI_XMIT_L_TO_H|SPI_CLK_DIV_4 );
....................   
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
08DE8:  GOTO   070E
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
08DEC:  MOVLB  C
08DEE:  CLRF   x1A
08DF0:  SETF   x1B
08DF2:  MOVLB  0
08DF4:  CALL   07A4
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
08DF8:  MOVLB  C
08DFA:  CLRF   x1A
08DFC:  SETF   x1B
08DFE:  MOVLB  0
08E00:  CALL   07B6
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
08E04:  MOVLW  02
08E06:  MOVLB  C
08E08:  MOVWF  x1A
08E0A:  SETF   x1B
08E0C:  MOVLB  0
08E0E:  CALL   07A4
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input 
08E12:  MOVLW  02
08E14:  MOVLB  C
08E16:  MOVWF  x1A
08E18:  SETF   x1B
08E1A:  MOVLB  0
08E1C:  CALL   07B6
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
08E20:  MOVLB  C
08E22:  CLRF   x24
08E24:  MOVLW  06
08E26:  MOVWF  x25
08E28:  SETF   x26
08E2A:  MOVLB  0
08E2C:  CALL   06DC
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
08E30:  MOVLB  C
08E32:  CLRF   x24
08E34:  MOVLW  16
08E36:  MOVWF  x25
08E38:  SETF   x26
08E3A:  MOVLB  0
08E3C:  CALL   06DC
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
08E40:  MOVLW  02
08E42:  MOVLB  C
08E44:  MOVWF  x24
08E46:  MOVLW  06
08E48:  MOVWF  x25
08E4A:  SETF   x26
08E4C:  MOVLB  0
08E4E:  CALL   06DC
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
08E52:  MOVLW  02
08E54:  MOVLB  C
08E56:  MOVWF  x24
08E58:  MOVLW  16
08E5A:  MOVWF  x25
08E5C:  SETF   x26
08E5E:  MOVLB  0
08E60:  CALL   06DC
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
08E64:  MOVLW  04
08E66:  MOVLB  C
08E68:  MOVWF  x1A
08E6A:  CLRF   x1B
08E6C:  MOVLB  0
08E6E:  CALL   07A4
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
08E72:  MOVLW  04
08E74:  MOVLB  C
08E76:  MOVWF  x1A
08E78:  CLRF   x1B
08E7A:  MOVLB  0
08E7C:  CALL   07B6
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
08E80:  MOVLW  06
08E82:  MOVLB  C
08E84:  MOVWF  x1A
08E86:  CLRF   x1B
08E88:  MOVLB  0
08E8A:  CALL   07A4
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
08E8E:  MOVLW  06
08E90:  MOVLB  C
08E92:  MOVWF  x1A
08E94:  CLRF   x1B
08E96:  MOVLB  0
08E98:  CALL   07B6
....................    IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
08E9C:  MOVLW  08
08E9E:  MOVLB  C
08EA0:  MOVWF  x1A
08EA2:  CLRF   x1B
08EA4:  MOVLB  0
08EA6:  CALL   07A4
....................    IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
08EAA:  MOVLW  08
08EAC:  MOVLB  C
08EAE:  MOVWF  x1A
08EB0:  CLRF   x1B
08EB2:  MOVLB  0
08EB4:  CALL   07B6
....................    IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
08EB8:  MOVLW  0A
08EBA:  MOVLB  C
08EBC:  MOVWF  x1A
08EBE:  CLRF   x1B
08EC0:  MOVLB  0
08EC2:  CALL   07A4
....................    IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
08EC6:  MOVLW  0A
08EC8:  MOVLB  C
08ECA:  MOVWF  x1A
08ECC:  CLRF   x1B
08ECE:  MOVLB  0
08ED0:  CALL   07B6
....................    
....................    FlashingFlag = 1;
08ED4:  BSF    1A.1
....................    //output_bit(P485ctrl,0);
....................    sequence = end_sq;
08ED6:  MOVFF  6F,78
....................    Address = 1;
08EDA:  MOVLW  01
08EDC:  MOVWF  x79
.................... 
....................    Output.B1 = 1;
08EDE:  MOVLB  B
08EE0:  BSF    x9C.0
....................    Output.B2 = 1;
08EE2:  BSF    x9C.1
....................    Output.B3 = 1;
08EE4:  BSF    x9C.2
....................    Output.B4 = 1;
08EE6:  BSF    x9C.3
....................    Output.B5 = 1;
08EE8:  BSF    x9C.4
....................    Output.B6 = 1;
08EEA:  BSF    x9C.5
....................    Output.B7 = 1;
08EEC:  BSF    x9C.6
....................    Output.B8 = 1;
08EEE:  BSF    x9C.7
....................    Output.B9 = 1;
08EF0:  BSF    x9D.0
....................    Output.B10 = 1;
08EF2:  BSF    x9D.1
....................    Output.B11 = 1;
08EF4:  BSF    x9D.2
....................    Output.B12 = 1;
08EF6:  BSF    x9D.3
....................    Output.B13 = 1;
08EF8:  BSF    x9D.4
....................    Output.B14 = 1;
08EFA:  BSF    x9D.5
....................    Output.B15 = 1;
08EFC:  BSF    x9D.6
....................    Output.B16 = 1;
08EFE:  BSF    x9D.7
....................    
....................    //Output.B17 = 1;
....................    //Output.B18 = 1;
....................    //Output.B19 = 1;
....................    //Output.B20 = 1;
....................    
....................    ////////////////////
....................    In.B1 = 0;
08F00:  BCF    xAA.0
....................    In.B2 = 0;
08F02:  BCF    xAA.1
....................    In.B3 = 0;
08F04:  BCF    xAA.2
....................    In.B4 = 0;
08F06:  BCF    xAA.3
....................    In.B5 = 0;
08F08:  BCF    xAA.4
....................    In.B6 = 0;
08F0A:  BCF    xAA.5
....................    In.B7 = 0;
08F0C:  BCF    xAA.6
....................    In.B8 = 0;
08F0E:  BCF    xAA.7
....................    In.B9 = 0;
08F10:  BCF    xAB.0
....................    In.B10 = 0;
08F12:  BCF    xAB.1
....................    In.B11 = 0;
08F14:  BCF    xAB.2
....................    In.B12 = 0;
08F16:  BCF    xAB.3
....................    In.B13 = 0;
08F18:  BCF    xAB.4
....................    In.B14 = 0;
08F1A:  BCF    xAB.5
....................    In.B15 = 0;
08F1C:  BCF    xAB.6
....................    In.B16 = 0;
08F1E:  BCF    xAB.7
....................    //In.B17 = 0;
....................    //In.B18 = 0;
....................    //In.B19 = 0;
....................    //In.B20 = 0;
....................     ////////////////////
....................    In2.B1 = 0;
08F20:  BCF    xAC.0
....................    In2.B2 = 0;
08F22:  BCF    xAC.1
....................    In2.B3 = 0;
08F24:  BCF    xAC.2
....................    In2.B4 = 0;
08F26:  BCF    xAC.3
....................    In2.B5 = 0;
08F28:  BCF    xAC.4
....................    In2.B6 = 0;
08F2A:  BCF    xAC.5
....................    In2.B7 = 0;
08F2C:  BCF    xAC.6
....................    In2.B8 = 0;
08F2E:  BCF    xAC.7
....................    In2.B9 = 0;
08F30:  BCF    xAD.0
....................    In2.B10 = 0;
08F32:  BCF    xAD.1
....................    In2.B11 = 0;
08F34:  BCF    xAD.2
....................    In2.B12 = 0;
08F36:  BCF    xAD.3
....................    In2.B13 = 0;
08F38:  BCF    xAD.4
....................    In2.B14 = 0;
08F3A:  BCF    xAD.5
....................    In2.B15 = 0;
08F3C:  BCF    xAD.6
....................    In2.B16 = 0;
08F3E:  BCF    xAD.7
....................    
....................    /*
....................    //  jj
....................    //Input
....................    if(FaultNCNO[i] ==NO)
....................    {
....................       Inputt.B1 = 1;
....................       Inputt.B2 = 1;
....................       Inputt.B3 = 1;
....................       Inputt.B4 = 1;
....................       Inputt.B5 = 1;
....................       Inputt.B6 = 1;
....................       Inputt.B7 = 1;
....................       Inputt.B8 = 1;
....................       Inputt.B9 = 1;
....................       Inputt.B10 = 1;
....................       Inputt.B11 = 1;
....................       Inputt.B12 = 1;
....................       Inputt.B13 = 1;
....................       Inputt.B14 = 1;
....................       Inputt.B15 = 1;
....................       Inputt.B16 = 1;
....................       //In.B17 = 1;
....................       //In.B18 = 1;
....................       //In.B19 = 1;
....................       //In.B20 = 1;
....................    }
....................    else
....................    {
....................       
....................    }
....................    */
....................     ////////////////////
....................    
....................    ////////////////////////
....................    Ack.B1 = 0;
08F40:  BCF    xA8.0
....................    Ack.B2 = 0;
08F42:  BCF    xA8.1
....................    Ack.B3 = 0;
08F44:  BCF    xA8.2
....................    Ack.B4 = 0;
08F46:  BCF    xA8.3
....................    Ack.B5 = 0;
08F48:  BCF    xA8.4
....................    Ack.B6 = 0;
08F4A:  BCF    xA8.5
....................    Ack.B7 = 0;
08F4C:  BCF    xA8.6
....................    Ack.B8 = 0;
08F4E:  BCF    xA8.7
....................    Ack.B9 = 0;
08F50:  BCF    xA9.0
....................    Ack.B10 = 0;
08F52:  BCF    xA9.1
....................    Ack.B11 = 0;
08F54:  BCF    xA9.2
....................    Ack.B12 = 0;
08F56:  BCF    xA9.3
....................    Ack.B13 = 0;
08F58:  BCF    xA9.4
....................    Ack.B14 = 0;
08F5A:  BCF    xA9.5
....................    Ack.B15 = 0;
08F5C:  BCF    xA9.6
....................    Ack.B16 = 0;
08F5E:  BCF    xA9.7
....................    //Ack.B17 = 0;
....................    //Ack.B18 = 0;
....................    //Ack.B19 = 0;
....................    //Ack.B20 = 0;
....................  
.................... 
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0x0F)
08F60:  MOVFF  FF2,C1A
08F64:  BCF    FF2.7
08F66:  CLRF   FAA
08F68:  CLRF   FA9
08F6A:  BCF    FA6.6
08F6C:  BCF    FA6.7
08F6E:  BSF    FA6.0
08F70:  MOVF   FA8,W
08F72:  MOVLB  C
08F74:  BTFSC  x1A.7
08F76:  BSF    FF2.7
08F78:  SUBLW  0F
08F7A:  BNZ   8F86
....................    {
....................       Read_Config();
08F7C:  MOVLB  0
08F7E:  GOTO   07CA
....................    }
08F82:  BRA    92E2
08F84:  MOVLB  C
....................    else
....................    {
....................       FlashingRateTime = 25;
08F86:  MOVLW  19
08F88:  MOVWF  1B
....................       AutoAck = 0xF0; //not use auto ack
08F8A:  MOVLW  F0
08F8C:  MOVLB  0
08F8E:  MOVWF  x6A
....................       Address = 0x01;
08F90:  MOVLW  01
08F92:  MOVWF  x79
.................... 
....................       AutoAckTime = 5;
08F94:  MOVLW  05
08F96:  MOVWF  x6B
....................       FlashingRate = 25;
08F98:  MOVLW  19
08F9A:  MOVWF  x6C
....................       NoOfPoint = 16;
08F9C:  MOVLW  10
08F9E:  MOVWF  x6D
....................       char i;
....................       for(i =0; i<=NoOfPoint; i++)
08FA0:  MOVLB  C
08FA2:  CLRF   x18
08FA4:  MOVF   x18,W
08FA6:  MOVLB  0
08FA8:  SUBWF  x6D,W
08FAA:  BNC   8FCA
....................       {
....................          FaultDelayTime[i] = 0;
08FAC:  BCF    FD8.0
08FAE:  MOVLB  C
08FB0:  RLCF   x18,W
08FB2:  CLRF   03
08FB4:  ADDLW  E8
08FB6:  MOVWF  FE9
08FB8:  MOVLW  0B
08FBA:  ADDWFC 03,W
08FBC:  MOVWF  FEA
08FBE:  CLRF   FEC
08FC0:  MOVF   FED,F
08FC2:  CLRF   FEF
08FC4:  INCF   x18,F
08FC6:  BRA    8FA4
08FC8:  MOVLB  0
....................       }
.................... 
.................... 
....................       InputType.B1 = 1;
08FCA:  MOVLB  B
08FCC:  BSF    x9E.0
....................       InputType.B2 = 1;
08FCE:  BSF    x9E.1
....................       InputType.B3 = 1;
08FD0:  BSF    x9E.2
....................       InputType.B4 = 1;
08FD2:  BSF    x9E.3
....................       InputType.B5 = 1;
08FD4:  BSF    x9E.4
....................       InputType.B6 = 1;
08FD6:  BSF    x9E.5
....................       InputType.B7 = 1;
08FD8:  BSF    x9E.6
....................       InputType.B8 = 1;
08FDA:  BSF    x9E.7
....................       InputType.B9 = 1;
08FDC:  BSF    x9F.0
....................       InputType.B10 = 1;
08FDE:  BSF    x9F.1
....................       InputType.B11 = 1;
08FE0:  BSF    x9F.2
....................       InputType.B12 = 1;
08FE2:  BSF    x9F.3
....................       InputType.B13 = 1;
08FE4:  BSF    x9F.4
....................       InputType.B14 = 1;
08FE6:  BSF    x9F.5
....................       InputType.B15 = 1;
08FE8:  BSF    x9F.6
....................       InputType.B16 = 1;
08FEA:  BSF    x9F.7
....................       
....................       FaultNCNO[1] = 1;
08FEC:  MOVLB  C
08FEE:  BSF    x12.1
....................       FaultNCNO[2] = 1;
08FF0:  BSF    x12.2
....................       FaultNCNO[3] = 1;
08FF2:  BSF    x12.3
....................       FaultNCNO[4] = 1;
08FF4:  BSF    x12.4
....................       FaultNCNO[5] = 1;
08FF6:  BSF    x12.5
....................       FaultNCNO[6] = 1;
08FF8:  BSF    x12.6
....................       FaultNCNO[7] = 1;
08FFA:  BSF    x12.7
....................       FaultNCNO[8] = 1;
08FFC:  BSF    x13.0
....................       FaultNCNO[9] = 1;
08FFE:  BSF    x13.1
....................       FaultNCNO[10] = 1;
09000:  BSF    x13.2
....................       FaultNCNO[11] = 1;
09002:  BSF    x13.3
....................       FaultNCNO[12] = 1;
09004:  BSF    x13.4
....................       FaultNCNO[13] = 1;
09006:  BSF    x13.5
....................       FaultNCNO[14] = 1;
09008:  BSF    x13.6
....................       FaultNCNO[15] = 1;
0900A:  BSF    x13.7
....................       FaultNCNO[16] = 1;
0900C:  BSF    x14.0
....................       
....................       /////////////////////////////
....................       FaultType.B1 = 1;
0900E:  MOVLB  B
09010:  BSF    xA0.0
....................       FaultType.B2= 1;
09012:  BSF    xA0.1
....................       FaultType.B3 = 1;
09014:  BSF    xA0.2
....................       FaultType.B4 = 1;
09016:  BSF    xA0.3
....................       FaultType.B5 = 1;
09018:  BSF    xA0.4
....................       FaultType.B6 = 1;
0901A:  BSF    xA0.5
....................       FaultType.B7 = 1;
0901C:  BSF    xA0.6
....................       FaultType.B8 = 1;
0901E:  BSF    xA0.7
....................       FaultType.B9 = 1;
09020:  BSF    xA1.0
....................       FaultType.B10 = 1;
09022:  BSF    xA1.1
....................       FaultType.B11 = 1;
09024:  BSF    xA1.2
....................       FaultType.B12 = 1;
09026:  BSF    xA1.3
....................       FaultType.B13 = 1;
09028:  BSF    xA1.4
....................       FaultType.B14 = 1;
0902A:  BSF    xA1.5
....................       FaultType.B15 = 1;
0902C:  BSF    xA1.6
....................       FaultType.B16 = 1;
0902E:  BSF    xA1.7
....................       //FaultType.B17 = 1;
....................       //FaultType.B18 = 1;
....................       //FaultType.B19 = 1;
....................       //FaultType.B20 = 1;
....................       
....................       ////////////////////////////
....................       OutputType.B1 = 1;
09030:  BSF    xA2.0
....................       OutputType.B2 = 1;
09032:  BSF    xA2.1
....................       OutputType.B3 = 1;
09034:  BSF    xA2.2
....................       OutputType.B4 = 1;
09036:  BSF    xA2.3
....................       OutputType.B5 = 1;
09038:  BSF    xA2.4
....................       OutputType.B6 = 1;
0903A:  BSF    xA2.5
....................       OutputType.B7 = 1;
0903C:  BSF    xA2.6
....................       OutputType.B8 = 1;
0903E:  BSF    xA2.7
....................       OutputType.B9 = 1;
09040:  BSF    xA3.0
....................       OutputType.B10 = 1;
09042:  BSF    xA3.1
....................       OutputType.B11 = 1;
09044:  BSF    xA3.2
....................       OutputType.B12 = 1;
09046:  BSF    xA3.3
....................       OutputType.B13 = 1;
09048:  BSF    xA3.4
....................       OutputType.B14 = 1;
0904A:  BSF    xA3.5
....................       OutputType.B15 = 1;
0904C:  BSF    xA3.6
....................       OutputType.B16 = 1;
0904E:  BSF    xA3.7
....................       //OutputType.B17 = 1;
....................       //OutputType.B18 = 1;
....................       //OutputType.B19 = 1;
....................       //OutputType.B20 = 1;
....................  
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
09050:  BSF    xA4.0
....................       OutputBoth.B2 = 1;
09052:  BSF    xA4.1
....................       OutputBoth.B3 = 1;
09054:  BSF    xA4.2
....................       OutputBoth.B4 = 1;
09056:  BSF    xA4.3
....................       OutputBoth.B5 = 1;
09058:  BSF    xA4.4
....................       OutputBoth.B6 = 1;
0905A:  BSF    xA4.5
....................       OutputBoth.B7 = 1;
0905C:  BSF    xA4.6
....................       OutputBoth.B8 = 1;
0905E:  BSF    xA4.7
....................       OutputBoth.B9 = 1;
09060:  BSF    xA5.0
....................       OutputBoth.B10 = 1;
09062:  BSF    xA5.1
....................       OutputBoth.B11 = 1;
09064:  BSF    xA5.2
....................       OutputBoth.B12 = 1;
09066:  BSF    xA5.3
....................       OutputBoth.B13 = 1;
09068:  BSF    xA5.4
....................       OutputBoth.B14 = 1;
0906A:  BSF    xA5.5
....................       OutputBoth.B15 = 1;
0906C:  BSF    xA5.6
....................       OutputBoth.B16 = 1;
0906E:  BSF    xA5.7
....................       //OutputBoth.B17 = 1;
....................       //OutputBoth.B18 = 1;
....................       //OutputBoth.B19 = 1;
....................       //OutputBoth.B20 = 1;
....................       
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
09070:  BSF    xA6.0
....................       AlarmIndicator.B2 = 1;
09072:  BSF    xA6.1
....................       AlarmIndicator.B3 = 1;
09074:  BSF    xA6.2
....................       AlarmIndicator.B4 = 1;
09076:  BSF    xA6.3
....................       AlarmIndicator.B5 = 1;
09078:  BSF    xA6.4
....................       AlarmIndicator.B6 = 1;
0907A:  BSF    xA6.5
....................       AlarmIndicator.B7 = 1;
0907C:  BSF    xA6.6
....................       AlarmIndicator.B8 = 1;
0907E:  BSF    xA6.7
....................       AlarmIndicator.B9 = 1;
09080:  BSF    xA7.0
....................       AlarmIndicator.B10 = 1;
09082:  BSF    xA7.1
....................       AlarmIndicator.B11 = 1;
09084:  BSF    xA7.2
....................       AlarmIndicator.B12 = 1;
09086:  BSF    xA7.3
....................       AlarmIndicator.B13 = 1;
09088:  BSF    xA7.4
....................       AlarmIndicator.B14 = 1;
0908A:  BSF    xA7.5
....................       AlarmIndicator.B15 = 1;
0908C:  BSF    xA7.6
....................       AlarmIndicator.B16 = 1;
0908E:  BSF    xA7.7
....................       //AlarmIndicator.B17 = 1;
....................       //AlarmIndicator.B18 = 1;
....................       //AlarmIndicator.B19 = 1;
....................       //AlarmIndicator.B20 = 1;
....................       
....................       ///////////// JACK///////////////////
....................    EEpDat = read_eeprom(0x10);
09090:  MOVFF  FF2,C1A
09094:  BCF    FF2.7
09096:  CLRF   FAA
09098:  MOVLW  10
0909A:  MOVWF  FA9
0909C:  BCF    FA6.6
0909E:  BCF    FA6.7
090A0:  BSF    FA6.0
090A2:  MOVF   FA8,W
090A4:  MOVLB  C
090A6:  BTFSC  x1A.7
090A8:  BSF    FF2.7
090AA:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
090AC:  MOVLB  B
090AE:  BCF    xB2.0
090B0:  BTFSC  39.0
090B2:  BSF    xB2.0
....................    RED_Colour.B2 = EEpDat >> 1;
090B4:  BCF    FD8.0
090B6:  RRCF   39,W
090B8:  BCF    xB2.1
090BA:  BTFSC  FE8.0
090BC:  BSF    xB2.1
....................    RED_Colour.B3 = EEpDat >> 2;
090BE:  RRCF   39,W
090C0:  MOVWF  00
090C2:  RRCF   00,F
090C4:  MOVLW  3F
090C6:  ANDWF  00,F
090C8:  BCF    xB2.2
090CA:  BTFSC  00.0
090CC:  BSF    xB2.2
....................    RED_Colour.B4 = EEpDat >> 3;
090CE:  RRCF   39,W
090D0:  MOVWF  00
090D2:  RRCF   00,F
090D4:  RRCF   00,F
090D6:  MOVLW  1F
090D8:  ANDWF  00,F
090DA:  BCF    xB2.3
090DC:  BTFSC  00.0
090DE:  BSF    xB2.3
....................    RED_Colour.B5 = EEpDat >> 4;
090E0:  SWAPF  39,W
090E2:  MOVWF  00
090E4:  MOVLW  0F
090E6:  ANDWF  00,F
090E8:  BCF    xB2.4
090EA:  BTFSC  00.0
090EC:  BSF    xB2.4
....................    RED_Colour.B6 = EEpDat >> 5;
090EE:  SWAPF  39,W
090F0:  MOVWF  00
090F2:  RRCF   00,F
090F4:  MOVLW  07
090F6:  ANDWF  00,F
090F8:  BCF    xB2.5
090FA:  BTFSC  00.0
090FC:  BSF    xB2.5
....................    RED_Colour.B7 = EEpDat >> 6;
090FE:  SWAPF  39,W
09100:  MOVWF  00
09102:  RRCF   00,F
09104:  RRCF   00,F
09106:  MOVLW  03
09108:  ANDWF  00,F
0910A:  BCF    xB2.6
0910C:  BTFSC  00.0
0910E:  BSF    xB2.6
....................    RED_Colour.B8 = EEpDat >> 7;
09110:  CLRF   00
09112:  BTFSC  39.7
09114:  BSF    00.0
09116:  BCF    xB2.7
09118:  BTFSC  00.0
0911A:  BSF    xB2.7
....................    
....................    EEpDat = read_eeprom(0x11);
0911C:  MOVFF  FF2,C1A
09120:  BCF    FF2.7
09122:  CLRF   FAA
09124:  MOVLW  11
09126:  MOVWF  FA9
09128:  BCF    FA6.6
0912A:  BCF    FA6.7
0912C:  BSF    FA6.0
0912E:  MOVF   FA8,W
09130:  MOVLB  C
09132:  BTFSC  x1A.7
09134:  BSF    FF2.7
09136:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
09138:  MOVLB  B
0913A:  BCF    xB3.0
0913C:  BTFSC  39.0
0913E:  BSF    xB3.0
....................    RED_Colour.B10 = EEpDat >> 1;
09140:  BCF    FD8.0
09142:  RRCF   39,W
09144:  BCF    xB3.1
09146:  BTFSC  FE8.0
09148:  BSF    xB3.1
....................    
....................    
....................    EEpDat = read_eeprom(0x12);
0914A:  MOVFF  FF2,C1A
0914E:  BCF    FF2.7
09150:  CLRF   FAA
09152:  MOVLW  12
09154:  MOVWF  FA9
09156:  BCF    FA6.6
09158:  BCF    FA6.7
0915A:  BSF    FA6.0
0915C:  MOVF   FA8,W
0915E:  MOVLB  C
09160:  BTFSC  x1A.7
09162:  BSF    FF2.7
09164:  MOVWF  39
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
09166:  MOVLB  B
09168:  BCF    xB3.2
0916A:  BTFSC  39.0
0916C:  BSF    xB3.2
....................    RED_Colour.B12 = EEpDat >> 1;
0916E:  BCF    FD8.0
09170:  RRCF   39,W
09172:  BCF    xB3.3
09174:  BTFSC  FE8.0
09176:  BSF    xB3.3
....................    RED_Colour.B13 = EEpDat >> 2;
09178:  RRCF   39,W
0917A:  MOVWF  00
0917C:  RRCF   00,F
0917E:  MOVLW  3F
09180:  ANDWF  00,F
09182:  BCF    xB3.4
09184:  BTFSC  00.0
09186:  BSF    xB3.4
....................    RED_Colour.B14 = EEpDat >> 3;
09188:  RRCF   39,W
0918A:  MOVWF  00
0918C:  RRCF   00,F
0918E:  RRCF   00,F
09190:  MOVLW  1F
09192:  ANDWF  00,F
09194:  BCF    xB3.5
09196:  BTFSC  00.0
09198:  BSF    xB3.5
....................    RED_Colour.B15 = EEpDat >> 4;
0919A:  SWAPF  39,W
0919C:  MOVWF  00
0919E:  MOVLW  0F
091A0:  ANDWF  00,F
091A2:  BCF    xB3.6
091A4:  BTFSC  00.0
091A6:  BSF    xB3.6
....................    RED_Colour.B16 = EEpDat >> 5;
091A8:  SWAPF  39,W
091AA:  MOVWF  00
091AC:  RRCF   00,F
091AE:  MOVLW  07
091B0:  ANDWF  00,F
091B2:  BCF    xB3.7
091B4:  BTFSC  00.0
091B6:  BSF    xB3.7
....................    //RED_Colour.B17 = EEpDat >> 6;
....................    //RED_Colour.B18 = EEpDat >> 7;
....................    
....................    //EEpDat = read_eeprom(0x13);
....................    //Red19_20 = EEpDat;
....................    //RED_Colour.B19 = EEpDat;
....................    //RED_Colour.B20 = EEpDat >> 1;
....................    
....................    
....................    EEpDat = read_eeprom(0x14);
091B8:  MOVFF  FF2,C1A
091BC:  BCF    FF2.7
091BE:  CLRF   FAA
091C0:  MOVLW  14
091C2:  MOVWF  FA9
091C4:  BCF    FA6.6
091C6:  BCF    FA6.7
091C8:  BSF    FA6.0
091CA:  MOVF   FA8,W
091CC:  MOVLB  C
091CE:  BTFSC  x1A.7
091D0:  BSF    FF2.7
091D2:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
091D4:  MOVLB  B
091D6:  BCF    xB4.0
091D8:  BTFSC  39.0
091DA:  BSF    xB4.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
091DC:  BCF    FD8.0
091DE:  RRCF   39,W
091E0:  BCF    xB4.1
091E2:  BTFSC  FE8.0
091E4:  BSF    xB4.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
091E6:  RRCF   39,W
091E8:  MOVWF  00
091EA:  RRCF   00,F
091EC:  MOVLW  3F
091EE:  ANDWF  00,F
091F0:  BCF    xB4.2
091F2:  BTFSC  00.0
091F4:  BSF    xB4.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
091F6:  RRCF   39,W
091F8:  MOVWF  00
091FA:  RRCF   00,F
091FC:  RRCF   00,F
091FE:  MOVLW  1F
09200:  ANDWF  00,F
09202:  BCF    xB4.3
09204:  BTFSC  00.0
09206:  BSF    xB4.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
09208:  SWAPF  39,W
0920A:  MOVWF  00
0920C:  MOVLW  0F
0920E:  ANDWF  00,F
09210:  BCF    xB4.4
09212:  BTFSC  00.0
09214:  BSF    xB4.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
09216:  SWAPF  39,W
09218:  MOVWF  00
0921A:  RRCF   00,F
0921C:  MOVLW  07
0921E:  ANDWF  00,F
09220:  BCF    xB4.5
09222:  BTFSC  00.0
09224:  BSF    xB4.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
09226:  SWAPF  39,W
09228:  MOVWF  00
0922A:  RRCF   00,F
0922C:  RRCF   00,F
0922E:  MOVLW  03
09230:  ANDWF  00,F
09232:  BCF    xB4.6
09234:  BTFSC  00.0
09236:  BSF    xB4.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
09238:  CLRF   00
0923A:  BTFSC  39.7
0923C:  BSF    00.0
0923E:  BCF    xB4.7
09240:  BTFSC  00.0
09242:  BSF    xB4.7
....................    
....................    EEpDat = read_eeprom(0x15);
09244:  MOVFF  FF2,C1A
09248:  BCF    FF2.7
0924A:  CLRF   FAA
0924C:  MOVLW  15
0924E:  MOVWF  FA9
09250:  BCF    FA6.6
09252:  BCF    FA6.7
09254:  BSF    FA6.0
09256:  MOVF   FA8,W
09258:  MOVLB  C
0925A:  BTFSC  x1A.7
0925C:  BSF    FF2.7
0925E:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
09260:  MOVLB  B
09262:  BCF    xB5.0
09264:  BTFSC  39.0
09266:  BSF    xB5.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
09268:  BCF    FD8.0
0926A:  RRCF   39,W
0926C:  BCF    xB5.1
0926E:  BTFSC  FE8.0
09270:  BSF    xB5.1
....................    
....................    
....................    EEpDat = read_eeprom(0x16);
09272:  MOVFF  FF2,C1A
09276:  BCF    FF2.7
09278:  CLRF   FAA
0927A:  MOVLW  16
0927C:  MOVWF  FA9
0927E:  BCF    FA6.6
09280:  BCF    FA6.7
09282:  BSF    FA6.0
09284:  MOVF   FA8,W
09286:  MOVLB  C
09288:  BTFSC  x1A.7
0928A:  BSF    FF2.7
0928C:  MOVWF  39
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
0928E:  MOVLB  B
09290:  BCF    xB5.2
09292:  BTFSC  39.0
09294:  BSF    xB5.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
09296:  BCF    FD8.0
09298:  RRCF   39,W
0929A:  BCF    xB5.3
0929C:  BTFSC  FE8.0
0929E:  BSF    xB5.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
092A0:  RRCF   39,W
092A2:  MOVWF  00
092A4:  RRCF   00,F
092A6:  MOVLW  3F
092A8:  ANDWF  00,F
092AA:  BCF    xB5.4
092AC:  BTFSC  00.0
092AE:  BSF    xB5.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
092B0:  RRCF   39,W
092B2:  MOVWF  00
092B4:  RRCF   00,F
092B6:  RRCF   00,F
092B8:  MOVLW  1F
092BA:  ANDWF  00,F
092BC:  BCF    xB5.5
092BE:  BTFSC  00.0
092C0:  BSF    xB5.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
092C2:  SWAPF  39,W
092C4:  MOVWF  00
092C6:  MOVLW  0F
092C8:  ANDWF  00,F
092CA:  BCF    xB5.6
092CC:  BTFSC  00.0
092CE:  BSF    xB5.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
092D0:  SWAPF  39,W
092D2:  MOVWF  00
092D4:  RRCF   00,F
092D6:  MOVLW  07
092D8:  ANDWF  00,F
092DA:  BCF    xB5.7
092DC:  BTFSC  00.0
092DE:  BSF    xB5.7
092E0:  MOVLB  0
....................    //GREEN_Colour.B17 = EEpDat >> 6;
....................    //GREEN_Colour.B18 = EEpDat >> 7;
....................    
....................    //EEpDat = read_eeprom(0x17);
....................    //Green19_20 = EEpDat;
....................    //GREEN_Colour.B19 = EEpDat;
....................    //GREEN_Colour.B20 = EEpDat >> 1;
....................    
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
....................    
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
092E2:  MOVLW  00
092E4:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
092E6:  MOVWF  F93
....................    enable_interrupts(GLOBAL);
092E8:  MOVLW  C0
092EA:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
092EC:  BSF    FD1.0
....................    Read_input(); restart_wdt();
092EE:  CALL   1DD6
092F2:  CLRWDT
....................    
....................    output_bit(Pbuzzer,0);   //Clear Buzzer
092F4:  BCF    F89.4
092F6:  BCF    F92.4
....................    output_bit(Pbell,0);      //Clear Bell
092F8:  BCF    F89.3
092FA:  BCF    F92.3
....................    output_bit(P485ctrl,0);
092FC:  BCF    F8A.3
092FE:  BCF    F93.3
....................    //output_bit(P485ctrl,0);
....................    output_bit(PIN_B4,1); //jj
09300:  BSF    F8A.4
09302:  BCF    F93.4
....................    Send_Ouput();
09304:  CALL   283A
....................    
....................    IO_OUTPUT_A(IO_DEVICE_2, 0xff);
09308:  MOVLW  04
0930A:  MOVLB  C
0930C:  MOVWF  x22
0930E:  SETF   x23
09310:  MOVLB  0
09312:  CALL   280E
....................    IO_OUTPUT_B(IO_DEVICE_2, 0xff);
09316:  MOVLW  04
09318:  MOVLB  C
0931A:  MOVWF  x22
0931C:  SETF   x23
0931E:  MOVLB  0
09320:  CALL   2824
....................             
....................    IO_OUTPUT_A(IO_DEVICE_3, 0xff);
09324:  MOVLW  06
09326:  MOVLB  C
09328:  MOVWF  x22
0932A:  SETF   x23
0932C:  MOVLB  0
0932E:  CALL   280E
....................    IO_OUTPUT_B(IO_DEVICE_3, 0xff);
09332:  MOVLW  06
09334:  MOVLB  C
09336:  MOVWF  x22
09338:  SETF   x23
0933A:  MOVLB  0
0933C:  CALL   2824
....................   
....................    IO_OUTPUT_A(IO_DEVICE_5, 0xff);  
09340:  MOVLW  0A
09342:  MOVLB  C
09344:  MOVWF  x22
09346:  SETF   x23
09348:  MOVLB  0
0934A:  CALL   280E
....................    IO_OUTPUT_B(IO_DEVICE_5, 0xff);
0934E:  MOVLW  0A
09350:  MOVLB  C
09352:  MOVWF  x22
09354:  SETF   x23
09356:  MOVLB  0
09358:  CALL   2824
....................             
....................    IO_OUTPUT_A(IO_DEVICE_4, 0xff);
0935C:  MOVLW  08
0935E:  MOVLB  C
09360:  MOVWF  x22
09362:  SETF   x23
09364:  MOVLB  0
09366:  CALL   280E
....................    IO_OUTPUT_B(IO_DEVICE_4, 0xff);
0936A:  MOVLW  08
0936C:  MOVLB  C
0936E:  MOVWF  x22
09370:  SETF   x23
09372:  MOVLB  0
09374:  CALL   2824
....................    
....................    
....................    
....................    delay_ms(500);
09378:  MOVLW  02
0937A:  MOVLB  C
0937C:  MOVWF  x1A
0937E:  MOVLW  FA
09380:  MOVWF  x23
09382:  MOVLB  0
09384:  CALL   06AC
09388:  MOVLB  C
0938A:  DECFSZ x1A,F
0938C:  BRA    937E
....................    
....................    // jj
....................    char i;
....................    for(i=1;i<=16;i++)
0938E:  MOVLW  01
09390:  MOVWF  x19
09392:  MOVF   x19,W
09394:  SUBLW  10
09396:  BTFSS  FD8.0
09398:  BRA    9526
....................    {
....................       FaultAgo[i] = 0;
0939A:  MOVFF  C19,C2B
0939E:  CLRF   x2C
093A0:  MOVLW  0B
093A2:  MOVWF  x2E
093A4:  MOVLW  B8
093A6:  MOVWF  x2D
093A8:  MOVLB  0
093AA:  CALL   1D36
....................       FaultNow[i] = 0;
093AE:  MOVFF  C19,C2B
093B2:  MOVLB  C
093B4:  CLRF   x2C
093B6:  MOVLW  0B
093B8:  MOVWF  x2E
093BA:  MOVLW  BB
093BC:  MOVWF  x2D
093BE:  MOVLB  0
093C0:  CALL   1D36
....................       ReleaseTime[i] = 0;
093C4:  BCF    FD8.0
093C6:  MOVLB  C
093C8:  RLCF   x19,W
093CA:  CLRF   03
093CC:  ADDLW  BE
093CE:  MOVWF  FE9
093D0:  MOVLW  0B
093D2:  ADDWFC 03,W
093D4:  MOVWF  FEA
093D6:  CLRF   FEC
093D8:  MOVF   FED,F
093DA:  CLRF   FEF
....................       if(FaultNCNO[i] ==NO)
093DC:  MOVFF  C19,C2B
093E0:  MOVLW  0C
093E2:  MOVWF  x2D
093E4:  MOVLW  12
093E6:  MOVWF  x2C
093E8:  MOVLB  0
093EA:  CALL   1CDE
093EE:  MOVF   01,W
093F0:  ANDLW  01
093F2:  SUBLW  01
093F4:  BNZ   948E
....................       {
....................          switch(i)
093F6:  MOVLW  01
093F8:  MOVLB  C
093FA:  SUBWF  x19,W
093FC:  ADDLW  F0
093FE:  BC    948A
09400:  ADDLW  10
09402:  MOVLB  0
09404:  GOTO   9684
....................          {
....................             case 1:
....................                Inputt.B1 = 1; 
09408:  MOVLB  B
0940A:  BSF    x9A.0
....................             break;
0940C:  MOVLB  C
0940E:  BRA    948A
....................             case 2:
....................                Inputt.B2 = 1; 
09410:  MOVLB  B
09412:  BSF    x9A.1
....................             break;
09414:  MOVLB  C
09416:  BRA    948A
....................             case 3:
....................                Inputt.B3 = 1; 
09418:  MOVLB  B
0941A:  BSF    x9A.2
....................             break;
0941C:  MOVLB  C
0941E:  BRA    948A
....................             case 4:
....................                Inputt.B4 = 1; 
09420:  MOVLB  B
09422:  BSF    x9A.3
....................             break;
09424:  MOVLB  C
09426:  BRA    948A
....................             case 5:
....................                Inputt.B5 = 1; 
09428:  MOVLB  B
0942A:  BSF    x9A.4
....................             break;
0942C:  MOVLB  C
0942E:  BRA    948A
....................             case 6:
....................                Inputt.B6 = 1; 
09430:  MOVLB  B
09432:  BSF    x9A.5
....................             break;
09434:  MOVLB  C
09436:  BRA    948A
....................             case 7:
....................                Inputt.B7 = 1; 
09438:  MOVLB  B
0943A:  BSF    x9A.6
....................              break;
0943C:  MOVLB  C
0943E:  BRA    948A
....................              case 8:
....................                Inputt.B8 = 1; 
09440:  MOVLB  B
09442:  BSF    x9A.7
....................             break;
09444:  MOVLB  C
09446:  BRA    948A
....................             case 9:
....................                Inputt.B9 = 1; 
09448:  MOVLB  B
0944A:  BSF    x9B.0
....................             break;
0944C:  MOVLB  C
0944E:  BRA    948A
....................             case 10:
....................                Inputt.B10 = 1; 
09450:  MOVLB  B
09452:  BSF    x9B.1
....................             break;
09454:  MOVLB  C
09456:  BRA    948A
....................             case 11:
....................                Inputt.B11 = 1; 
09458:  MOVLB  B
0945A:  BSF    x9B.2
....................             break;
0945C:  MOVLB  C
0945E:  BRA    948A
....................             case 12:
....................                Inputt.B12 = 1; 
09460:  MOVLB  B
09462:  BSF    x9B.3
....................             break;
09464:  MOVLB  C
09466:  BRA    948A
....................             case 13:
....................                Inputt.B13 = 1; 
09468:  MOVLB  B
0946A:  BSF    x9B.4
....................             break;
0946C:  MOVLB  C
0946E:  BRA    948A
....................             case 14:
....................                Inputt.B14 = 1; 
09470:  MOVLB  B
09472:  BSF    x9B.5
....................             break;
09474:  MOVLB  C
09476:  BRA    948A
....................             case 15:
....................                Inputt.B15 = 1; 
09478:  MOVLB  B
0947A:  BSF    x9B.6
....................             break;
0947C:  MOVLB  C
0947E:  BRA    948A
....................             case 16:
....................                 Inputt.B16 = 1;
09480:  MOVLB  B
09482:  BSF    x9B.7
....................              break;
09484:  MOVLB  C
09486:  BRA    948A
09488:  MOVLB  C
....................                        
....................          }                 
....................       }
0948A:  BRA    9522
0948C:  MOVLB  0
....................       else
....................       {
....................          switch(i)
0948E:  MOVLW  01
09490:  MOVLB  C
09492:  SUBWF  x19,W
09494:  ADDLW  F0
09496:  BC    9522
09498:  ADDLW  10
0949A:  MOVLB  0
0949C:  GOTO   96BE
....................          {
....................             case 1:
....................                Inputt.B1 = 0; 
094A0:  MOVLB  B
094A2:  BCF    x9A.0
....................             break;
094A4:  MOVLB  C
094A6:  BRA    9522
....................             case 2:
....................                Inputt.B2 = 0; 
094A8:  MOVLB  B
094AA:  BCF    x9A.1
....................             break;
094AC:  MOVLB  C
094AE:  BRA    9522
....................             case 3:
....................                Inputt.B3 = 0; 
094B0:  MOVLB  B
094B2:  BCF    x9A.2
....................             break;
094B4:  MOVLB  C
094B6:  BRA    9522
....................             case 4:
....................                Inputt.B4 = 0; 
094B8:  MOVLB  B
094BA:  BCF    x9A.3
....................             break;
094BC:  MOVLB  C
094BE:  BRA    9522
....................             case 5:
....................                Inputt.B5 = 0; 
094C0:  MOVLB  B
094C2:  BCF    x9A.4
....................             break;
094C4:  MOVLB  C
094C6:  BRA    9522
....................             case 6:
....................                Inputt.B6 = 0; 
094C8:  MOVLB  B
094CA:  BCF    x9A.5
....................             break;
094CC:  MOVLB  C
094CE:  BRA    9522
....................             case 7:
....................                Inputt.B7 = 0; 
094D0:  MOVLB  B
094D2:  BCF    x9A.6
....................              break;
094D4:  MOVLB  C
094D6:  BRA    9522
....................              case 8:
....................                Inputt.B8 = 0; 
094D8:  MOVLB  B
094DA:  BCF    x9A.7
....................             break;
094DC:  MOVLB  C
094DE:  BRA    9522
....................             case 9:
....................                Inputt.B9 = 0; 
094E0:  MOVLB  B
094E2:  BCF    x9B.0
....................             break;
094E4:  MOVLB  C
094E6:  BRA    9522
....................             case 10:
....................                Inputt.B10 = 0; 
094E8:  MOVLB  B
094EA:  BCF    x9B.1
....................             break;
094EC:  MOVLB  C
094EE:  BRA    9522
....................             case 11:
....................                Inputt.B11 = 0; 
094F0:  MOVLB  B
094F2:  BCF    x9B.2
....................             break;
094F4:  MOVLB  C
094F6:  BRA    9522
....................             case 12:
....................                Inputt.B12 = 0; 
094F8:  MOVLB  B
094FA:  BCF    x9B.3
....................             break;
094FC:  MOVLB  C
094FE:  BRA    9522
....................             case 13:
....................                Inputt.B13 = 0; 
09500:  MOVLB  B
09502:  BCF    x9B.4
....................             break;
09504:  MOVLB  C
09506:  BRA    9522
....................             case 14:
....................                Inputt.B14 = 0; 
09508:  MOVLB  B
0950A:  BCF    x9B.5
....................             break;
0950C:  MOVLB  C
0950E:  BRA    9522
....................             case 15:
....................                Inputt.B15 = 0; 
09510:  MOVLB  B
09512:  BCF    x9B.6
....................             break;
09514:  MOVLB  C
09516:  BRA    9522
....................             case 16:
....................                 Inputt.B16 = 0;
09518:  MOVLB  B
0951A:  BCF    x9B.7
....................              break;
0951C:  MOVLB  C
0951E:  BRA    9522
09520:  MOVLB  C
....................                        
....................          }                 
....................       }
09522:  INCF   x19,F
09524:  BRA    9392
....................       
....................    }
.................... 
....................   /*
....................    //Start-Up UART1
....................   fprintf(CH1,"\n\n\n\r");
....................   fprintf(CH1,"Demo UART1 ET-BASE PIC40/46K22(ICD2)\n\r");
....................   fprintf(CH1,"Run 64.00 MHz(Internal 16 MHz + PLL)\n\r");  
....................   fprintf(CH1,"UART1>");
....................   
....................   //Start-Up UART2
....................   fprintf(CH2,"\n\n\n\r");
....................   fprintf(CH2,"Demo UART2 ET-BASE PIC40/46K22(ICD2)\n\r");
....................   fprintf(CH2,"Run 64.00 MHz(Internal 16 MHz + PLL)\n\r");  
....................   fprintf(CH2,"UART2>");
....................  */
....................  
....................    while(TRUE)
....................    {
.................... 
....................       
....................       restart_wdt();
09526:  CLRWDT
.................... 
....................       if(recieve_completed == 1)
09528:  BTFSS  30.5
0952A:  BRA    9536
....................       {
....................          Modbus_Function();
0952C:  MOVLB  0
0952E:  GOTO   33A0
....................          recieve_completed = 0;
09532:  BCF    30.5
09534:  MOVLB  C
....................       }
....................       
.................... 
....................    /*
....................       if(input(PSyncR) != SyncFlag)      //Check Sync
....................       {
....................          FlashingFlag = input(PSyncR);
....................          SyncFlag = input(PSyncR);
....................          output_bit(PSyncS,SyncFlag);
....................          SyncStatus = 1;
....................          Synctimer = 200;
....................       }
....................    */
....................    
.................... 
....................       check_ack();
09536:  MOVLB  0
09538:  CALL   2F90
....................       check_reset();
0953C:  CALL   30DE
....................       check_test();
09540:  GOTO   8C0C
....................       
....................       restart_wdt();
09544:  CLRWDT
....................       
....................       /*
....................       if((FaultDelayTime == 0)||(FaultDelayTime == 0xff))
....................       {
....................          Read_input(); restart_wdt();
....................       }
....................       else
....................       {
....................          if(ReadIn_flag)
....................          {
....................                ReadIn_flag = 0;
....................                Read_input(); restart_wdt();
....................          }
....................       }
....................       */
....................       Read_input(); restart_wdt();// Must be first
09546:  CALL   1DD6
0954A:  CLRWDT
....................       Anal_Function(); restart_wdt();
0954C:  CALL   69C8
09550:  CLRWDT
....................       Send_Ouput(); restart_wdt();
09552:  CALL   283A
09556:  CLRWDT
....................       
....................       //Driver595(); restart_wdt();
....................       
....................       
....................       output_toggle(PIN_A0);
09558:  BCF    F92.0
0955A:  BTG    F89.0
....................       
....................       
....................       if(RefreshConfigData)
0955C:  BTFSS  30.4
0955E:  BRA    964A
....................       {
....................          RefreshConfigData =0;
09560:  BCF    30.4
....................          //Read_Config();
....................          //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................   
....................          IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
09562:  MOVLB  C
09564:  CLRF   x1A
09566:  SETF   x1B
09568:  MOVLB  0
0956A:  CALL   07A4
....................          IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
0956E:  MOVLB  C
09570:  CLRF   x1A
09572:  SETF   x1B
09574:  MOVLB  0
09576:  CALL   07B6
....................          IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
0957A:  MOVLW  02
0957C:  MOVLB  C
0957E:  MOVWF  x1A
09580:  SETF   x1B
09582:  MOVLB  0
09584:  CALL   07A4
....................          IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input 
09588:  MOVLW  02
0958A:  MOVLB  C
0958C:  MOVWF  x1A
0958E:  SETF   x1B
09590:  MOVLB  0
09592:  CALL   07B6
....................          //  jj
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
09596:  MOVLB  C
09598:  CLRF   x24
0959A:  MOVLW  06
0959C:  MOVWF  x25
0959E:  SETF   x26
095A0:  MOVLB  0
095A2:  CALL   06DC
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
095A6:  MOVLB  C
095A8:  CLRF   x24
095AA:  MOVLW  16
095AC:  MOVWF  x25
095AE:  SETF   x26
095B0:  MOVLB  0
095B2:  CALL   06DC
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
095B6:  MOVLW  02
095B8:  MOVLB  C
095BA:  MOVWF  x24
095BC:  MOVLW  06
095BE:  MOVWF  x25
095C0:  SETF   x26
095C2:  MOVLB  0
095C4:  CALL   06DC
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
095C8:  MOVLW  02
095CA:  MOVLB  C
095CC:  MOVWF  x24
095CE:  MOVLW  16
095D0:  MOVWF  x25
095D2:  SETF   x26
095D4:  MOVLB  0
095D6:  CALL   06DC
....................          //  jj
....................          IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
095DA:  MOVLW  04
095DC:  MOVLB  C
095DE:  MOVWF  x1A
095E0:  CLRF   x1B
095E2:  MOVLB  0
095E4:  CALL   07A4
....................          IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
095E8:  MOVLW  04
095EA:  MOVLB  C
095EC:  MOVWF  x1A
095EE:  CLRF   x1B
095F0:  MOVLB  0
095F2:  CALL   07B6
....................          IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
095F6:  MOVLW  06
095F8:  MOVLB  C
095FA:  MOVWF  x1A
095FC:  CLRF   x1B
095FE:  MOVLB  0
09600:  CALL   07A4
....................          IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
09604:  MOVLW  06
09606:  MOVLB  C
09608:  MOVWF  x1A
0960A:  CLRF   x1B
0960C:  MOVLB  0
0960E:  CALL   07B6
....................          IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
09612:  MOVLW  08
09614:  MOVLB  C
09616:  MOVWF  x1A
09618:  CLRF   x1B
0961A:  MOVLB  0
0961C:  CALL   07A4
....................          IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
09620:  MOVLW  08
09622:  MOVLB  C
09624:  MOVWF  x1A
09626:  CLRF   x1B
09628:  MOVLB  0
0962A:  CALL   07B6
....................          IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0962E:  MOVLW  0A
09630:  MOVLB  C
09632:  MOVWF  x1A
09634:  CLRF   x1B
09636:  MOVLB  0
09638:  CALL   07A4
....................          IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
0963C:  MOVLW  0A
0963E:  MOVLB  C
09640:  MOVWF  x1A
09642:  CLRF   x1B
09644:  MOVLB  0
09646:  CALL   07B6
....................          
....................         
....................       }
....................       
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
0964A:  MOVLB  C
0964C:  CLRF   x22
0964E:  SETF   x23
09650:  MOVLB  0
09652:  CALL   280E
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
09656:  MOVLB  C
09658:  CLRF   x22
0965A:  SETF   x23
0965C:  MOVLB  0
0965E:  CALL   2824
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
09662:  MOVLW  02
09664:  MOVLB  C
09666:  MOVWF  x22
09668:  SETF   x23
0966A:  MOVLB  0
0966C:  CALL   280E
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
09670:  MOVLW  02
09672:  MOVLB  C
09674:  MOVWF  x22
09676:  SETF   x23
09678:  MOVLB  0
0967A:  CALL   2824
0967E:  MOVLB  C
09680:  BRA    9526
....................       
....................       
....................       /*        
....................       if(outmcp23)
....................       {
....................          outmcp23 = 0;
....................          FlashingRateTime = 1; //100 time per sec.
....................          
....................          MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_0);
....................          restart_wdt();
....................                   
....................          MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
....................          restart_wdt();
....................                 
....................          IO_OUTPUT_A(IO_DEVICE_1, MCP23s17_Ip_dat);
....................          restart_wdt();
....................          
....................          IO_OUTPUT_B(IO_DEVICE_1, MCP23s17_Ip_dat);
....................          restart_wdt();   
....................         
....................       }
....................       */
....................    }
....................    
.................... }
09682:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
