CCS PCH C Compiler, Version 5.091, 5967               07-¡.Â.-21 10:41

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_16 - Delay - SP - SMD\ESPAN-04.lst

               ROM used:   27784 bytes (42%)
                           Largest free fragment is 37748
               RAM used:   448 (11%) at main() level
                           472 (12%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   6308
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.1
00056:  GOTO   0060
0005A:  BTFSC  F9E.1
0005C:  GOTO   0520
00060:  BTFSS  F9D.5
00062:  GOTO   006C
00066:  BTFSC  F9E.5
00068:  GOTO   0510
0006C:  MOVFF  0E,00
00070:  MOVFF  0F,01
00074:  MOVFF  10,02
00078:  MOVFF  11,03
0007C:  MOVFF  0C,FE9
00080:  MOVFF  07,FEA
00084:  BSF    07.7
00086:  MOVFF  08,FE1
0008A:  MOVFF  09,FE2
0008E:  MOVFF  0A,FD9
00092:  MOVFF  0B,FDA
00096:  MOVFF  12,FF3
0009A:  MOVFF  13,FF4
0009E:  MOVFF  14,FFA
000A2:  MOVFF  15,FF5
000A6:  MOVFF  16,FF6
000AA:  MOVFF  17,FF7
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
000BA:  CLRF   FF7
000BC:  ADDLW  CA
000BE:  MOVWF  FF6
000C0:  MOVLW  00
000C2:  ADDWFC FF7,F
000C4:  TBLRD*+
000C6:  MOVF   FF5,W
000C8:  RETURN 0
000CA:  DATA 00,C1
000CC:  DATA 81,40
000CE:  DATA 01,C0
000D0:  DATA 80,41
000D2:  DATA 01,C0
000D4:  DATA 80,41
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 00,C1
000E0:  DATA 81,40
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 01,C0
000EC:  DATA 80,41
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 00,C1
000F4:  DATA 81,40
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 01,C0
00100:  DATA 80,41
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 00,C1
00110:  DATA 81,40
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 01,C0
00120:  DATA 80,41
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 00,C1
0012C:  DATA 81,40
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 01,C0
00134:  DATA 80,41
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 00,C1
00140:  DATA 81,40
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 01,C0
0014C:  DATA 80,41
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 00,C1
00154:  DATA 81,40
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 01,C0
00160:  DATA 80,41
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 00,C1
0016C:  DATA 81,40
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 01,C0
00174:  DATA 80,41
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 00,C1
00180:  DATA 81,40
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 01,C0
00190:  DATA 80,41
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 00,C1
001A0:  DATA 81,40
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 01,C0
001AC:  DATA 80,41
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 00,C1
001B4:  DATA 81,40
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 01,C0
001C0:  DATA 80,41
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  CLRF   FF7
001CC:  ADDLW  DA
001CE:  MOVWF  FF6
001D0:  MOVLW  01
001D2:  ADDWFC FF7,F
001D4:  TBLRD*+
001D6:  MOVF   FF5,W
001D8:  RETURN 0
001DA:  DATA 00,C0
001DC:  DATA C1,01
001DE:  DATA C3,03
001E0:  DATA 02,C2
001E2:  DATA C6,06
001E4:  DATA 07,C7
001E6:  DATA 05,C5
001E8:  DATA C4,04
001EA:  DATA CC,0C
001EC:  DATA 0D,CD
001EE:  DATA 0F,CF
001F0:  DATA CE,0E
001F2:  DATA 0A,CA
001F4:  DATA CB,0B
001F6:  DATA C9,09
001F8:  DATA 08,C8
001FA:  DATA D8,18
001FC:  DATA 19,D9
001FE:  DATA 1B,DB
00200:  DATA DA,1A
00202:  DATA 1E,DE
00204:  DATA DF,1F
00206:  DATA DD,1D
00208:  DATA 1C,DC
0020A:  DATA 14,D4
0020C:  DATA D5,15
0020E:  DATA D7,17
00210:  DATA 16,D6
00212:  DATA D2,12
00214:  DATA 13,D3
00216:  DATA 11,D1
00218:  DATA D0,10
0021A:  DATA F0,30
0021C:  DATA 31,F1
0021E:  DATA 33,F3
00220:  DATA F2,32
00222:  DATA 36,F6
00224:  DATA F7,37
00226:  DATA F5,35
00228:  DATA 34,F4
0022A:  DATA 3C,FC
0022C:  DATA FD,3D
0022E:  DATA FF,3F
00230:  DATA 3E,FE
00232:  DATA FA,3A
00234:  DATA 3B,FB
00236:  DATA 39,F9
00238:  DATA F8,38
0023A:  DATA 28,E8
0023C:  DATA E9,29
0023E:  DATA EB,2B
00240:  DATA 2A,EA
00242:  DATA EE,2E
00244:  DATA 2F,EF
00246:  DATA 2D,ED
00248:  DATA EC,2C
0024A:  DATA E4,24
0024C:  DATA 25,E5
0024E:  DATA 27,E7
00250:  DATA E6,26
00252:  DATA 22,E2
00254:  DATA E3,23
00256:  DATA E1,21
00258:  DATA 20,E0
0025A:  DATA A0,60
0025C:  DATA 61,A1
0025E:  DATA 63,A3
00260:  DATA A2,62
00262:  DATA 66,A6
00264:  DATA A7,67
00266:  DATA A5,65
00268:  DATA 64,A4
0026A:  DATA 6C,AC
0026C:  DATA AD,6D
0026E:  DATA AF,6F
00270:  DATA 6E,AE
00272:  DATA AA,6A
00274:  DATA 6B,AB
00276:  DATA 69,A9
00278:  DATA A8,68
0027A:  DATA 78,B8
0027C:  DATA B9,79
0027E:  DATA BB,7B
00280:  DATA 7A,BA
00282:  DATA BE,7E
00284:  DATA 7F,BF
00286:  DATA 7D,BD
00288:  DATA BC,7C
0028A:  DATA B4,74
0028C:  DATA 75,B5
0028E:  DATA 77,B7
00290:  DATA B6,76
00292:  DATA 72,B2
00294:  DATA B3,73
00296:  DATA B1,71
00298:  DATA 70,B0
0029A:  DATA 50,90
0029C:  DATA 91,51
0029E:  DATA 93,53
002A0:  DATA 52,92
002A2:  DATA 96,56
002A4:  DATA 57,97
002A6:  DATA 55,95
002A8:  DATA 94,54
002AA:  DATA 9C,5C
002AC:  DATA 5D,9D
002AE:  DATA 5F,9F
002B0:  DATA 9E,5E
002B2:  DATA 5A,9A
002B4:  DATA 9B,5B
002B6:  DATA 99,59
002B8:  DATA 58,98
002BA:  DATA 88,48
002BC:  DATA 49,89
002BE:  DATA 4B,8B
002C0:  DATA 8A,4A
002C2:  DATA 4E,8E
002C4:  DATA 8F,4F
002C6:  DATA 8D,4D
002C8:  DATA 4C,8C
002CA:  DATA 44,84
002CC:  DATA 85,45
002CE:  DATA 87,47
002D0:  DATA 46,86
002D2:  DATA 82,42
002D4:  DATA 43,83
002D6:  DATA 41,81
002D8:  DATA 80,40
*
0123A:  MOVLB  1
0123C:  MOVF   xC6,W
0123E:  ANDLW  07
01240:  MOVWF  00
01242:  RRCF   xC6,W
01244:  MOVWF  01
01246:  RRCF   01,F
01248:  RRCF   01,F
0124A:  MOVLW  1F
0124C:  ANDWF  01,F
0124E:  MOVF   01,W
01250:  ADDWF  xC7,W
01252:  MOVWF  FE9
01254:  MOVLW  00
01256:  ADDWFC xC8,W
01258:  MOVWF  FEA
0125A:  MOVFF  FEF,01
0125E:  INCF   00,F
01260:  BRA    1264
01262:  RRCF   01,F
01264:  DECFSZ 00,F
01266:  BRA    1262
01268:  MOVLW  01
0126A:  ANDWF  01,F
0126C:  MOVLB  0
0126E:  RETURN 0
01270:  MOVLB  1
01272:  MOVF   xC7,W
01274:  MULWF  xC9
01276:  MOVFF  FF3,01
0127A:  MOVFF  FF4,00
0127E:  MULWF  xCA
01280:  MOVF   FF3,W
01282:  ADDWF  00,F
01284:  MOVF   xC8,W
01286:  MULWF  xC9
01288:  MOVF   FF3,W
0128A:  ADDWFC 00,W
0128C:  MOVWF  02
0128E:  MOVLB  0
01290:  RETURN 0
01292:  MOVLB  1
01294:  MOVF   xC6,W
01296:  ANDLW  07
01298:  MOVWF  00
0129A:  RRCF   xC6,W
0129C:  MOVWF  01
0129E:  RRCF   01,F
012A0:  RRCF   01,F
012A2:  MOVLW  1F
012A4:  ANDWF  01,F
012A6:  MOVF   01,W
012A8:  ADDWF  xC8,W
012AA:  MOVWF  FE9
012AC:  MOVLW  00
012AE:  ADDWFC xC9,W
012B0:  MOVWF  FEA
012B2:  CLRF   01
012B4:  INCF   01,F
012B6:  INCF   00,F
012B8:  BRA    12BC
012BA:  RLCF   01,F
012BC:  DECFSZ 00,F
012BE:  BRA    12BA
012C0:  MOVF   xC7,F
012C2:  BZ    12CA
012C4:  MOVF   01,W
012C6:  IORWF  FEF,F
012C8:  BRA    12D0
012CA:  COMF   01,F
012CC:  MOVF   01,W
012CE:  ANDWF  FEF,F
012D0:  MOVLB  0
012D2:  RETURN 0
*
01B58:  ADDWF  FE8,W
01B5A:  CLRF   FF7
01B5C:  RLCF   FF7,F
01B5E:  ADDLW  73
01B60:  MOVWF  FF6
01B62:  MOVLW  1B
01B64:  ADDWFC FF7,F
01B66:  TBLRD*-
01B68:  MOVF   FF5,W
01B6A:  MOVWF  FFA
01B6C:  TBLRD*
01B6E:  MOVF   FF5,W
01B70:  MOVWF  FF9
01B72:  DATA 68,15
01B74:  DATA 6E,15
01B76:  DATA 74,15
01B78:  DATA 7A,15
01B7A:  DATA 80,15
01B7C:  DATA 86,15
01B7E:  DATA 8C,15
01B80:  DATA 92,15
01B82:  DATA 98,15
01B84:  DATA 9E,15
01B86:  DATA A4,15
01B88:  DATA AA,15
01B8A:  DATA B0,15
01B8C:  DATA B6,15
01B8E:  DATA BC,15
01B90:  DATA C2,15
01B92:  ADDWF  FE8,W
01B94:  CLRF   FF7
01B96:  RLCF   FF7,F
01B98:  ADDLW  AD
01B9A:  MOVWF  FF6
01B9C:  MOVLW  1B
01B9E:  ADDWFC FF7,F
01BA0:  TBLRD*-
01BA2:  MOVF   FF5,W
01BA4:  MOVWF  FFA
01BA6:  TBLRD*
01BA8:  MOVF   FF5,W
01BAA:  MOVWF  FF9
01BAC:  DATA A8,16
01BAE:  DATA AE,16
01BB0:  DATA B4,16
01BB2:  DATA BA,16
01BB4:  DATA C0,16
01BB6:  DATA C6,16
01BB8:  DATA CC,16
01BBA:  DATA D2,16
01BBC:  DATA D8,16
01BBE:  DATA DE,16
01BC0:  DATA E4,16
01BC2:  DATA EA,16
01BC4:  DATA F0,16
01BC6:  DATA F6,16
01BC8:  DATA FC,16
01BCA:  DATA 02,17
01BCC:  ADDWF  FE8,W
01BCE:  CLRF   FF7
01BD0:  RLCF   FF7,F
01BD2:  ADDLW  E7
01BD4:  MOVWF  FF6
01BD6:  MOVLW  1B
01BD8:  ADDWFC FF7,F
01BDA:  TBLRD*-
01BDC:  MOVF   FF5,W
01BDE:  MOVWF  FFA
01BE0:  TBLRD*
01BE2:  MOVF   FF5,W
01BE4:  MOVWF  FF9
01BE6:  DATA 1C,18
01BE8:  DATA 22,18
01BEA:  DATA 28,18
01BEC:  DATA 2E,18
01BEE:  DATA 34,18
01BF0:  DATA 3A,18
01BF2:  DATA 40,18
01BF4:  DATA 46,18
01BF6:  DATA 4C,18
01BF8:  DATA 52,18
01BFA:  DATA 58,18
01BFC:  DATA 5E,18
01BFE:  DATA 64,18
01C00:  DATA 6A,18
01C02:  DATA 70,18
01C04:  DATA 76,18
01C06:  ADDWF  FE8,W
01C08:  CLRF   FF7
01C0A:  RLCF   FF7,F
01C0C:  ADDLW  21
01C0E:  MOVWF  FF6
01C10:  MOVLW  1C
01C12:  ADDWFC FF7,F
01C14:  TBLRD*-
01C16:  MOVF   FF5,W
01C18:  MOVWF  FFA
01C1A:  TBLRD*
01C1C:  MOVF   FF5,W
01C1E:  MOVWF  FF9
01C20:  DATA 5A,19
01C22:  DATA 60,19
01C24:  DATA 66,19
01C26:  DATA 6C,19
01C28:  DATA 72,19
01C2A:  DATA 78,19
01C2C:  DATA 7E,19
01C2E:  DATA 84,19
01C30:  DATA 8A,19
01C32:  DATA 90,19
01C34:  DATA 96,19
01C36:  DATA 9C,19
01C38:  DATA A2,19
01C3A:  DATA A8,19
01C3C:  DATA AE,19
01C3E:  DATA B4,19
*
06C18:  ADDWF  FE8,W
06C1A:  CLRF   FF7
06C1C:  RLCF   FF7,F
06C1E:  ADDLW  33
06C20:  MOVWF  FF6
06C22:  MOVLW  6C
06C24:  ADDWFC FF7,F
06C26:  TBLRD*-
06C28:  MOVF   FF5,W
06C2A:  MOVWF  FFA
06C2C:  TBLRD*
06C2E:  MOVF   FF5,W
06C30:  MOVWF  FF9
06C32:  DATA D6,69
06C34:  DATA DC,69
06C36:  DATA E2,69
06C38:  DATA E8,69
06C3A:  DATA EE,69
06C3C:  DATA F4,69
06C3E:  DATA FA,69
06C40:  DATA 00,6A
06C42:  DATA 06,6A
06C44:  DATA 0C,6A
06C46:  DATA 12,6A
06C48:  DATA 18,6A
06C4A:  DATA 1E,6A
06C4C:  DATA 24,6A
06C4E:  DATA 2A,6A
06C50:  DATA 30,6A
06C52:  ADDWF  FE8,W
06C54:  CLRF   FF7
06C56:  RLCF   FF7,F
06C58:  ADDLW  6D
06C5A:  MOVWF  FF6
06C5C:  MOVLW  6C
06C5E:  ADDWFC FF7,F
06C60:  TBLRD*-
06C62:  MOVF   FF5,W
06C64:  MOVWF  FFA
06C66:  TBLRD*
06C68:  MOVF   FF5,W
06C6A:  MOVWF  FF9
06C6C:  DATA 4E,6A
06C6E:  DATA 54,6A
06C70:  DATA 5A,6A
06C72:  DATA 60,6A
06C74:  DATA 66,6A
06C76:  DATA 6C,6A
06C78:  DATA 72,6A
06C7A:  DATA 78,6A
06C7C:  DATA 7E,6A
06C7E:  DATA 84,6A
06C80:  DATA 8A,6A
06C82:  DATA 90,6A
06C84:  DATA 96,6A
06C86:  DATA 9C,6A
06C88:  DATA A2,6A
06C8A:  DATA A8,6A
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
005B2:  MOVLW  01
005B4:  MOVWF  FEA
005B6:  MOVLW  C6
005B8:  MOVWF  FE9
005BA:  MOVF   FEF,W
005BC:  BZ    05E0
005BE:  MOVLW  05
005C0:  MOVWF  01
005C2:  MOVLW  BF
005C4:  MOVWF  00
005C6:  CLRWDT
005C8:  DECFSZ 00,F
005CA:  BRA    05C6
005CC:  DECFSZ 01,F
005CE:  BRA    05C2
005D0:  MOVLW  2E
005D2:  MOVWF  00
005D4:  DECFSZ 00,F
005D6:  BRA    05D4
005D8:  NOP   
005DA:  CLRWDT
005DC:  DECFSZ FEF,F
005DE:  BRA    05BE
005E0:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR    0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP     0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW    0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL    0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
00614:  BCF    F92.5
00616:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
00618:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
0061A:  MOVLB  1
0061C:  CLRF   xC8
0061E:  MOVLW  0A
00620:  MOVWF  xC9
00622:  MOVLW  AA
00624:  MOVWF  xCA
00626:  MOVLB  0
00628:  RCALL  05E2
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
0062A:  MOVLW  02
0062C:  MOVLB  1
0062E:  MOVWF  xC8
00630:  MOVLW  0A
00632:  MOVWF  xC9
00634:  MOVLW  AA
00636:  MOVWF  xCA
00638:  MOVLB  0
0063A:  RCALL  05E2
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
0063C:  MOVLW  04
0063E:  MOVLB  1
00640:  MOVWF  xC8
00642:  MOVLW  0A
00644:  MOVWF  xC9
00646:  MOVLW  AA
00648:  MOVWF  xCA
0064A:  MOVLB  0
0064C:  RCALL  05E2
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
0064E:  MOVLW  06
00650:  MOVLB  1
00652:  MOVWF  xC8
00654:  MOVLW  0A
00656:  MOVWF  xC9
00658:  MOVLW  AA
0065A:  MOVWF  xCA
0065C:  MOVLB  0
0065E:  RCALL  05E2
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
00660:  MOVLW  08
00662:  MOVLB  1
00664:  MOVWF  xC8
00666:  MOVLW  0A
00668:  MOVWF  xC9
0066A:  MOVLW  AA
0066C:  MOVWF  xCA
0066E:  MOVLB  0
00670:  RCALL  05E2
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
00672:  MOVLW  0A
00674:  MOVLB  1
00676:  MOVWF  xC8
00678:  MOVWF  xC9
0067A:  MOVLW  AA
0067C:  MOVWF  xCA
0067E:  MOVLB  0
00680:  RCALL  05E2
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
00682:  MOVLW  0C
00684:  MOVLB  1
00686:  MOVWF  xC8
00688:  MOVLW  0A
0068A:  MOVWF  xC9
0068C:  MOVLW  AA
0068E:  MOVWF  xCA
00690:  MOVLB  0
00692:  RCALL  05E2
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
00694:  MOVLW  0E
00696:  MOVLB  1
00698:  MOVWF  xC8
0069A:  MOVLW  0A
0069C:  MOVWF  xC9
0069E:  MOVLW  AA
006A0:  MOVWF  xCA
006A2:  MOVLB  0
006A4:  RCALL  05E2
....................    #endif
006A6:  GOTO   63D8 (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
005E2:  BCF    F92.5
005E4:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
005E6:  MOVLB  1
005E8:  MOVF   xC8,W
005EA:  IORLW  40
005EC:  MOVWF  xCB
005EE:  MOVF   FC9,W
005F0:  MOVFF  1CB,FC9
005F4:  RRCF   FC7,W
005F6:  BNC   05F4
....................    #endif
....................    
....................    spi_write(reg);
005F8:  MOVF   FC9,W
005FA:  MOVFF  1C9,FC9
005FE:  RRCF   FC7,W
00600:  BNC   05FE
....................    spi_write(data);
00602:  MOVF   FC9,W
00604:  MOVFF  1CA,FC9
00608:  RRCF   FC7,W
0060A:  BNC   0608
....................    
....................    output_high(IO_CS_PIN);
0060C:  BCF    F92.5
0060E:  BSF    F89.5
00610:  MOVLB  0
00612:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
011CA:  BCF    F92.5
011CC:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
011CE:  MOVLB  1
011D0:  MOVF   xC5,W
011D2:  IORLW  41
011D4:  MOVWF  xC8
011D6:  MOVF   FC9,W
011D8:  MOVFF  1C8,FC9
011DC:  RRCF   FC7,W
011DE:  BNC   11DC
....................    #endif
....................    
....................    spi_write(reg);
011E0:  MOVF   FC9,W
011E2:  MOVFF  1C6,FC9
011E6:  RRCF   FC7,W
011E8:  BNC   11E6
....................    retVal = spi_read(0);
011EA:  MOVF   FC9,W
011EC:  CLRF   FC9
011EE:  RRCF   FC7,W
011F0:  BNC   11EE
011F2:  MOVFF  FC9,1C7
....................    
....................    output_high(IO_CS_PIN);
011F6:  BCF    F92.5
011F8:  BSF    F89.5
....................    
....................    return retVal;
011FA:  MOVFF  1C7,01
011FE:  MOVLB  0
01200:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
01C40:  MOVFF  1C6,1C8
01C44:  MOVLW  0A
01C46:  MOVLB  1
01C48:  MOVWF  xC9
01C4A:  MOVFF  1C7,1CA
01C4E:  MOVLB  0
01C50:  CALL   05E2
....................    #endif
01C54:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
01C56:  MOVFF  1C6,1C8
01C5A:  MOVLW  1A
01C5C:  MOVLB  1
01C5E:  MOVWF  xC9
01C60:  MOVFF  1C7,1CA
01C64:  MOVLB  0
01C66:  CALL   05E2
....................    #endif
01C6A:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
01202:  MOVFF  1C3,1C5
01206:  MOVLW  09
01208:  MOVLB  1
0120A:  MOVWF  xC6
0120C:  MOVLB  0
0120E:  RCALL  11CA
01210:  MOVFF  01,1C4
....................    #endif
....................    
....................    return retVal;
01214:  MOVLB  1
01216:  MOVFF  1C4,01
0121A:  MOVLB  0
0121C:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
0121E:  MOVFF  1C3,1C5
01222:  MOVLW  19
01224:  MOVLB  1
01226:  MOVWF  xC6
01228:  MOVLB  0
0122A:  RCALL  11CA
0122C:  MOVFF  01,1C4
....................    #endif
....................    
....................    return retVal;
01230:  MOVLB  1
01232:  MOVFF  1C4,01
01236:  MOVLB  0
01238:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
006AA:  MOVFF  1BE,1C8
006AE:  MOVLB  1
006B0:  CLRF   xC9
006B2:  MOVFF  1BF,1CA
006B6:  MOVLB  0
006B8:  RCALL  05E2
....................    #endif
006BA:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
006BC:  MOVFF  1BE,1C8
006C0:  MOVLW  10
006C2:  MOVLB  1
006C4:  MOVWF  xC9
006C6:  MOVFF  1BF,1CA
006CA:  MOVLB  0
006CC:  RCALL  05E2
....................    #endif
006CE:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... 
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... 
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... 
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
02064:  BTFSS  F9E.4
02066:  BRA    2064
02068:  MOVWF  FAD
0206A:  RETURN 0
.................... 
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... /*
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_C1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
.................... */
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... //int8 Input1_8;
.................... //int8 Input9_16;
.................... 
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... int8 Output595[4];
.................... 
.................... int8 tempdata;
.................... //int8 EEP_Config = 0x00;   //
.................... //int8 NUMBER_OF_595 ;
.................... 
.................... int8 EEpDat;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_16;
.................... 
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Red1_7;
.................... int8 Red8_8;
.................... int8 Red9_15;
.................... int8 Red16_16;
.................... 
.................... int8 Green1_7;
.................... int8 Green8_8;
.................... int8 Green9_15;
.................... int8 Green16_16;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_16;
.................... 
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... 
.................... int8 Green1_8 ;
.................... int8 Green9_16 ;
.................... 
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_16 ;
.................... 
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... 
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_16 ;
.................... 
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... 
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... int8 MasterSlaveSync;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... 
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////
.................... unsigned char const addr_sq = 0x10,end_sq = 0x11,code_sq = 0x12,start_addr_hi_sq = 0x13,start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15,ubyte_lo_sq = 0x16,crc_hi_sq = 0x17,byte_count_sq = 0x19,data_sq = 0x20;      //serial sequnce
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned char RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[60];
.................... unsigned char RxD_Buff[60];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[25];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;   //use for calculate RxD timeout
.................... unsigned char index = 0x00;         //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... volatile int16 MCP23_ReadError =0;
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... } ; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Input
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8,B9,B10;
....................    int1 B11,B12,B13,B14,B15,B16;
....................    //int1 B21,B22,B23,B24,B25,B26,B27,B28,B29,B30;
....................    //int1 B31,B32,B33,B34,B35,B36,B37,B38,B39,B40;
....................    //int1 B41,B42,B43,B44,B45,B46,B47,B48,B49,B50;
....................    //int1 B51,B52,B53,B54,B55,B56,B57,B58,B59,B60;
....................    //int1 B61,B62,B63,B64;
.................... };
.................... 
.................... 
....................    //Output   (LED Lit = "0")
....................    //Input Type NO/NC (NO = "1" , NC = "0")
....................    //Fault Type Manual/Auto (Manual = "1" , Auto = "0")
....................    //Output Type Buz/Bell (Buzzer = "1" , Bell = "0")
....................    //Output Both (Normal = "1" , Both = "0")
....................    //Acknowledge flag (Acked = "1" , non Ack = "0")
.................... 
.................... //struct Bit64 Input,Output,InputType,FaultType,OutputType,OutputBoth;
.................... struct Bit64 Inputt;
.................... struct Bit64 Output;
.................... struct Bit64 InputType;
.................... struct Bit64 FaultType;
.................... struct Bit64 OutputType;
.................... struct Bit64 OutputBoth;
.................... 
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 LED_Colour,AckSend,RED_Colour,GREEN_Colour;
.................... 
.................... int1 FaultAgo[30];
.................... int1 FaultNow[30];
.................... int16 ReleaseTime[30];
.................... int16 FaultDelayTime[30];
.................... 
.................... int1 FaultNCNO[25];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //volatile int8 ReadIn_Count =0;
.................... //int1 ReadIn_flag = 0;
.................... 
.................... 
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void StoreReleaseFault()
*
012D4:  MOVLB  1
012D6:  CLRF   xC3
.................... {
....................    Signed int8 i=0;
....................    for(i=1;i<=16;i++)
012D8:  MOVLW  01
012DA:  MOVWF  xC3
012DC:  BTFSC  xC3.7
012DE:  BRA    12E6
012E0:  MOVF   xC3,W
012E2:  SUBLW  10
012E4:  BNC   132C
....................    {
....................       FaultAgo[i] = FaultNow[i];
012E6:  CLRF   03
012E8:  MOVF   xC3,W
012EA:  MOVWF  00
012EC:  BTFSC  FE8.7
012EE:  DECF   03,F
012F0:  MOVWF  xC4
012F2:  MOVFF  03,1C5
012F6:  CLRF   03
012F8:  MOVF   xC3,W
012FA:  MOVWF  00
012FC:  BTFSC  FE8.7
012FE:  DECF   03,F
01300:  MOVWF  xC6
01302:  MOVLW  01
01304:  MOVWF  xC8
01306:  MOVLW  3B
01308:  MOVWF  xC7
0130A:  MOVLB  0
0130C:  RCALL  123A
0130E:  MOVFF  1C4,1C6
01312:  MOVLB  1
01314:  CLRF   xC7
01316:  BTFSC  01.0
01318:  INCF   xC7,F
0131A:  MOVLW  01
0131C:  MOVWF  xC9
0131E:  MOVLW  37
01320:  MOVWF  xC8
01322:  MOVLB  0
01324:  RCALL  1292
01326:  MOVLB  1
01328:  INCF   xC3,F
0132A:  BRA    12DC
....................    }
0132C:  MOVLB  0
0132E:  GOTO   19E4 (RETURN)
.................... }
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
02014:  SETF   xF3
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
02016:  SETF   xF2
.................... 
....................    for(i = 0;i < usDataLen;i++)
02018:  MOVLB  1
0201A:  CLRF   xC3
0201C:  MOVF   xC1,W
0201E:  SUBWF  xC3,W
02020:  BC    2060
....................    {
....................       restart_wdt();
02022:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
02024:  MOVF   xC3,W
02026:  ADDWF  xBF,W
02028:  MOVWF  FE9
0202A:  MOVLW  00
0202C:  ADDWFC xC0,W
0202E:  MOVWF  FEA
02030:  MOVF   FEF,W
02032:  MOVLB  0
02034:  XORWF  xF3,W
02036:  MOVLB  1
02038:  MOVWF  xC2
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
0203A:  CLRF   03
0203C:  MOVF   xC2,W
0203E:  MOVLB  0
02040:  CALL   00BA
02044:  MOVWF  01
02046:  MOVF   xF2,W
02048:  XORWF  01,W
0204A:  MOVWF  xF3
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
0204C:  CLRF   03
0204E:  MOVLB  1
02050:  MOVF   xC2,W
02052:  MOVLB  0
02054:  CALL   01CA
02058:  MOVWF  xF2
0205A:  MOVLB  1
0205C:  INCF   xC3,F
0205E:  BRA    201C
....................    }
02060:  MOVLB  0
02062:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... void Driver595()
*
061F6:  MOVLB  1
061F8:  CLRF   xBE
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
061FA:  CLRWDT
....................     
....................     data_out = (~Input19_20);
061FC:  MOVFF  4D,1BF
06200:  COMF   xBF,F
....................     for(j=7;j>=0;j--)
06202:  MOVLW  07
06204:  MOVWF  xBE
06206:  BTFSC  xBE.7
06208:  BRA    623A
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
0620A:  MOVFF  1BF,00
0620E:  MOVF   xBE,W
06210:  MOVWF  01
06212:  BZ    621C
06214:  BCF    FD8.0
06216:  RRCF   00,F
06218:  DECFSZ 01,F
0621A:  BRA    6214
0621C:  BTFSC  00.0
0621E:  BRA    6224
06220:  BCF    F8A.2
06222:  BRA    6226
06224:  BSF    F8A.2
06226:  BCF    F93.2
....................      output_high(EXP_OUT_CLOCK);
06228:  BCF    F93.1
0622A:  BSF    F8A.1
....................      delay_us(1);
0622C:  CLRWDT
0622E:  BRA    6230
06230:  NOP   
....................      output_low(EXP_OUT_CLOCK);
06232:  BCF    F93.1
06234:  BCF    F8A.1
06236:  DECF   xBE,F
06238:  BRA    6206
....................     }    
....................     data_out = (~Input11_18);
0623A:  MOVFF  4C,1BF
0623E:  COMF   xBF,F
....................     for(j=7;j>=0;j--)
06240:  MOVLW  07
06242:  MOVWF  xBE
06244:  BTFSC  xBE.7
06246:  BRA    6278
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
06248:  MOVFF  1BF,00
0624C:  MOVF   xBE,W
0624E:  MOVWF  01
06250:  BZ    625A
06252:  BCF    FD8.0
06254:  RRCF   00,F
06256:  DECFSZ 01,F
06258:  BRA    6252
0625A:  BTFSC  00.0
0625C:  BRA    6262
0625E:  BCF    F8A.2
06260:  BRA    6264
06262:  BSF    F8A.2
06264:  BCF    F93.2
....................      output_high(EXP_OUT_CLOCK);
06266:  BCF    F93.1
06268:  BSF    F8A.1
....................      delay_us(1);
0626A:  CLRWDT
0626C:  BRA    626E
0626E:  NOP   
....................      output_low(EXP_OUT_CLOCK);
06270:  BCF    F93.1
06272:  BCF    F8A.1
06274:  DECF   xBE,F
06276:  BRA    6244
....................     }
....................     
....................     data_out = (~Input9_10);
06278:  MOVFF  4B,1BF
0627C:  COMF   xBF,F
....................     for(j=7;j>=0;j--)
0627E:  MOVLW  07
06280:  MOVWF  xBE
06282:  BTFSC  xBE.7
06284:  BRA    62B6
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
06286:  MOVFF  1BF,00
0628A:  MOVF   xBE,W
0628C:  MOVWF  01
0628E:  BZ    6298
06290:  BCF    FD8.0
06292:  RRCF   00,F
06294:  DECFSZ 01,F
06296:  BRA    6290
06298:  BTFSC  00.0
0629A:  BRA    62A0
0629C:  BCF    F8A.2
0629E:  BRA    62A2
062A0:  BSF    F8A.2
062A2:  BCF    F93.2
....................      output_high(EXP_OUT_CLOCK);
062A4:  BCF    F93.1
062A6:  BSF    F8A.1
....................      delay_us(1);
062A8:  CLRWDT
062AA:  BRA    62AC
062AC:  NOP   
....................      output_low(EXP_OUT_CLOCK);
062AE:  BCF    F93.1
062B0:  BCF    F8A.1
062B2:  DECF   xBE,F
062B4:  BRA    6282
....................     }    
....................     data_out = (~Input1_8);
062B6:  MOVFF  49,1BF
062BA:  COMF   xBF,F
....................     for(j=7;j>=0;j--)
062BC:  MOVLW  07
062BE:  MOVWF  xBE
062C0:  BTFSC  xBE.7
062C2:  BRA    62F4
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
062C4:  MOVFF  1BF,00
062C8:  MOVF   xBE,W
062CA:  MOVWF  01
062CC:  BZ    62D6
062CE:  BCF    FD8.0
062D0:  RRCF   00,F
062D2:  DECFSZ 01,F
062D4:  BRA    62CE
062D6:  BTFSC  00.0
062D8:  BRA    62DE
062DA:  BCF    F8A.2
062DC:  BRA    62E0
062DE:  BSF    F8A.2
062E0:  BCF    F93.2
....................      output_high(EXP_OUT_CLOCK);
062E2:  BCF    F93.1
062E4:  BSF    F8A.1
....................      delay_us(1);
062E6:  CLRWDT
062E8:  BRA    62EA
062EA:  NOP   
....................      output_low(EXP_OUT_CLOCK);
062EC:  BCF    F93.1
062EE:  BCF    F8A.1
062F0:  DECF   xBE,F
062F2:  BRA    62C0
....................     }
....................  
....................    output_high(EXP_OUT_ENABLE);
062F4:  BCF    F93.0
062F6:  BSF    F8A.0
....................    delay_us(1);
062F8:  CLRWDT
062FA:  BRA    62FC
062FC:  NOP   
....................    output_low(EXP_OUT_ENABLE);
062FE:  BCF    F93.0
06300:  BCF    F8A.0
06302:  MOVLB  0
06304:  GOTO   6AEA (RETURN)
.................... }
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
0206C:  CLRF   1E
....................    Input9_16_Send = 0x00;
0206E:  CLRF   1F
....................    
....................    
....................    Ack1_8_Send = 0x00;
02070:  CLRF   26
....................    Ack9_16_Send = 0x00;
02072:  CLRF   27
.................... 
....................    
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
02074:  MOVLB  1
02076:  BTFSC  x2B.0
02078:  BRA    2082
0207A:  BTFSC  x1D.0
0207C:  BRA    2082
....................       AckSend.B1 = 1;
0207E:  BSF    x31.0
02080:  BRA    2084
....................    else
....................       AckSend.B1 = 0;
02082:  BCF    x31.0
....................    if((In.B2 == 0) && (Output.B2 ==0))
02084:  BTFSC  x2B.1
02086:  BRA    2090
02088:  BTFSC  x1D.1
0208A:  BRA    2090
....................       AckSend.B2 = 1;
0208C:  BSF    x31.1
0208E:  BRA    2092
....................    else
....................       AckSend.B2 = 0;
02090:  BCF    x31.1
....................    if((In.B3 == 0) && (Output.B3 ==0))
02092:  BTFSC  x2B.2
02094:  BRA    209E
02096:  BTFSC  x1D.2
02098:  BRA    209E
....................       AckSend.B3 = 1;
0209A:  BSF    x31.2
0209C:  BRA    20A0
....................    else
....................       AckSend.B3 = 0;
0209E:  BCF    x31.2
....................    if((In.B4 == 0) && (Output.B4 ==0))
020A0:  BTFSC  x2B.3
020A2:  BRA    20AC
020A4:  BTFSC  x1D.3
020A6:  BRA    20AC
....................       AckSend.B4 = 1;
020A8:  BSF    x31.3
020AA:  BRA    20AE
....................    else
....................       AckSend.B4 = 0;
020AC:  BCF    x31.3
....................    if((In.B5 == 0) && (Output.B5 ==0))
020AE:  BTFSC  x2B.4
020B0:  BRA    20BA
020B2:  BTFSC  x1D.4
020B4:  BRA    20BA
....................       AckSend.B5 = 1;
020B6:  BSF    x31.4
020B8:  BRA    20BC
....................    else
....................       AckSend.B5 = 0;
020BA:  BCF    x31.4
....................    if((In.B6 == 0) && (Output.B6 ==0))
020BC:  BTFSC  x2B.5
020BE:  BRA    20C8
020C0:  BTFSC  x1D.5
020C2:  BRA    20C8
....................       AckSend.B6 = 1;
020C4:  BSF    x31.5
020C6:  BRA    20CA
....................    else
....................       AckSend.B6 = 0;
020C8:  BCF    x31.5
....................    if((In.B7 == 0) && (Output.B7 ==0))
020CA:  BTFSC  x2B.6
020CC:  BRA    20D6
020CE:  BTFSC  x1D.6
020D0:  BRA    20D6
....................       AckSend.B7 = 1;
020D2:  BSF    x31.6
020D4:  BRA    20D8
....................    else
....................       AckSend.B7 = 0;
020D6:  BCF    x31.6
....................    if((In.B8 == 0) && (Output.B8 ==0))
020D8:  BTFSC  x2B.7
020DA:  BRA    20E4
020DC:  BTFSC  x1D.7
020DE:  BRA    20E4
....................       AckSend.B8 = 1;
020E0:  BSF    x31.7
020E2:  BRA    20E6
....................    else
....................       AckSend.B8 = 0;
020E4:  BCF    x31.7
....................    if((In.B9 == 0) && (Output.B9 ==0))
020E6:  BTFSC  x2C.0
020E8:  BRA    20F2
020EA:  BTFSC  x1E.0
020EC:  BRA    20F2
....................       AckSend.B9 = 1;
020EE:  BSF    x32.0
020F0:  BRA    20F4
....................    else
....................       AckSend.B9 = 0;
020F2:  BCF    x32.0
....................    if((In.B10 == 0) && (Output.B10 ==0))
020F4:  BTFSC  x2C.1
020F6:  BRA    2100
020F8:  BTFSC  x1E.1
020FA:  BRA    2100
....................       AckSend.B10 = 1;
020FC:  BSF    x32.1
020FE:  BRA    2102
....................    else
....................       AckSend.B10 = 0;
02100:  BCF    x32.1
....................    if((In.B11 == 0) && (Output.B11 ==0))
02102:  BTFSC  x2C.2
02104:  BRA    210E
02106:  BTFSC  x1E.2
02108:  BRA    210E
....................       AckSend.B11 = 1;
0210A:  BSF    x32.2
0210C:  BRA    2110
....................    else
....................       AckSend.B11 = 0;
0210E:  BCF    x32.2
....................    if((In.B12 == 0) && (Output.B12 ==0))
02110:  BTFSC  x2C.3
02112:  BRA    211C
02114:  BTFSC  x1E.3
02116:  BRA    211C
....................       AckSend.B12 = 1;
02118:  BSF    x32.3
0211A:  BRA    211E
....................    else
....................       AckSend.B12 = 0;
0211C:  BCF    x32.3
....................    if((In.B13 == 0) && (Output.B13 ==0))
0211E:  BTFSC  x2C.4
02120:  BRA    212A
02122:  BTFSC  x1E.4
02124:  BRA    212A
....................       AckSend.B13 = 1;
02126:  BSF    x32.4
02128:  BRA    212C
....................    else
....................       AckSend.B13 = 0;
0212A:  BCF    x32.4
....................    if((In.B14 == 0) && (Output.B14 ==0))
0212C:  BTFSC  x2C.5
0212E:  BRA    2138
02130:  BTFSC  x1E.5
02132:  BRA    2138
....................       AckSend.B14 = 1;
02134:  BSF    x32.5
02136:  BRA    213A
....................    else
....................       AckSend.B14 = 0;
02138:  BCF    x32.5
....................    if((In.B15 == 0) && (Output.B15 ==0))
0213A:  BTFSC  x2C.6
0213C:  BRA    2146
0213E:  BTFSC  x1E.6
02140:  BRA    2146
....................       AckSend.B15 = 1;
02142:  BSF    x32.6
02144:  BRA    2148
....................    else
....................       AckSend.B15 = 0;
02146:  BCF    x32.6
....................    if((In.B16 == 0) && (Output.B16 ==0))
02148:  BTFSC  x2C.7
0214A:  BRA    2154
0214C:  BTFSC  x1E.7
0214E:  BRA    2154
....................       AckSend.B16 = 1;
02150:  BSF    x32.7
02152:  BRA    2156
....................    else
....................       AckSend.B16 = 0;
02154:  BCF    x32.7
.................... 
....................       
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
02156:  MOVLW  00
02158:  BTFSC  x31.7
0215A:  MOVLW  01
0215C:  IORWF  26,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
0215E:  BCF    FD8.0
02160:  RLCF   26,W
02162:  MOVWF  xBF
02164:  MOVLW  00
02166:  BTFSC  x31.6
02168:  MOVLW  01
0216A:  IORWF  xBF,W
0216C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
0216E:  BCF    FD8.0
02170:  RLCF   26,W
02172:  MOVWF  xBF
02174:  MOVLW  00
02176:  BTFSC  x31.5
02178:  MOVLW  01
0217A:  IORWF  xBF,W
0217C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
0217E:  BCF    FD8.0
02180:  RLCF   26,W
02182:  MOVWF  xBF
02184:  MOVLW  00
02186:  BTFSC  x31.4
02188:  MOVLW  01
0218A:  IORWF  xBF,W
0218C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
0218E:  BCF    FD8.0
02190:  RLCF   26,W
02192:  MOVWF  xBF
02194:  MOVLW  00
02196:  BTFSC  x31.3
02198:  MOVLW  01
0219A:  IORWF  xBF,W
0219C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
0219E:  BCF    FD8.0
021A0:  RLCF   26,W
021A2:  MOVWF  xBF
021A4:  MOVLW  00
021A6:  BTFSC  x31.2
021A8:  MOVLW  01
021AA:  IORWF  xBF,W
021AC:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
021AE:  BCF    FD8.0
021B0:  RLCF   26,W
021B2:  MOVWF  xBF
021B4:  MOVLW  00
021B6:  BTFSC  x31.1
021B8:  MOVLW  01
021BA:  IORWF  xBF,W
021BC:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
021BE:  BCF    FD8.0
021C0:  RLCF   26,W
021C2:  MOVWF  xBF
021C4:  MOVLW  00
021C6:  BTFSC  x31.0
021C8:  MOVLW  01
021CA:  IORWF  xBF,W
021CC:  MOVWF  26
....................    
....................    Ack9_16_Send = Ack9_16_Send | AckSend.B16;
021CE:  MOVLW  00
021D0:  BTFSC  x32.7
021D2:  MOVLW  01
021D4:  IORWF  27,F
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B15;
021D6:  BCF    FD8.0
021D8:  RLCF   27,W
021DA:  MOVWF  xBF
021DC:  MOVLW  00
021DE:  BTFSC  x32.6
021E0:  MOVLW  01
021E2:  IORWF  xBF,W
021E4:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B14;
021E6:  BCF    FD8.0
021E8:  RLCF   27,W
021EA:  MOVWF  xBF
021EC:  MOVLW  00
021EE:  BTFSC  x32.5
021F0:  MOVLW  01
021F2:  IORWF  xBF,W
021F4:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B13;
021F6:  BCF    FD8.0
021F8:  RLCF   27,W
021FA:  MOVWF  xBF
021FC:  MOVLW  00
021FE:  BTFSC  x32.4
02200:  MOVLW  01
02202:  IORWF  xBF,W
02204:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B12;
02206:  BCF    FD8.0
02208:  RLCF   27,W
0220A:  MOVWF  xBF
0220C:  MOVLW  00
0220E:  BTFSC  x32.3
02210:  MOVLW  01
02212:  IORWF  xBF,W
02214:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B11;
02216:  BCF    FD8.0
02218:  RLCF   27,W
0221A:  MOVWF  xBF
0221C:  MOVLW  00
0221E:  BTFSC  x32.2
02220:  MOVLW  01
02222:  IORWF  xBF,W
02224:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B10;
02226:  BCF    FD8.0
02228:  RLCF   27,W
0222A:  MOVWF  xBF
0222C:  MOVLW  00
0222E:  BTFSC  x32.1
02230:  MOVLW  01
02232:  IORWF  xBF,W
02234:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B9;
02236:  BCF    FD8.0
02238:  RLCF   27,W
0223A:  MOVWF  xBF
0223C:  MOVLW  00
0223E:  BTFSC  x32.0
02240:  MOVLW  01
02242:  IORWF  xBF,W
02244:  MOVWF  27
....................       
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
02246:  MOVLW  00
02248:  BTFSC  x2B.7
0224A:  MOVLW  01
0224C:  IORWF  1E,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
0224E:  BCF    FD8.0
02250:  RLCF   1E,W
02252:  MOVWF  xBF
02254:  MOVLW  00
02256:  BTFSC  x2B.6
02258:  MOVLW  01
0225A:  IORWF  xBF,W
0225C:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
0225E:  BCF    FD8.0
02260:  RLCF   1E,W
02262:  MOVWF  xBF
02264:  MOVLW  00
02266:  BTFSC  x2B.5
02268:  MOVLW  01
0226A:  IORWF  xBF,W
0226C:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
0226E:  BCF    FD8.0
02270:  RLCF   1E,W
02272:  MOVWF  xBF
02274:  MOVLW  00
02276:  BTFSC  x2B.4
02278:  MOVLW  01
0227A:  IORWF  xBF,W
0227C:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
0227E:  BCF    FD8.0
02280:  RLCF   1E,W
02282:  MOVWF  xBF
02284:  MOVLW  00
02286:  BTFSC  x2B.3
02288:  MOVLW  01
0228A:  IORWF  xBF,W
0228C:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
0228E:  BCF    FD8.0
02290:  RLCF   1E,W
02292:  MOVWF  xBF
02294:  MOVLW  00
02296:  BTFSC  x2B.2
02298:  MOVLW  01
0229A:  IORWF  xBF,W
0229C:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
0229E:  BCF    FD8.0
022A0:  RLCF   1E,W
022A2:  MOVWF  xBF
022A4:  MOVLW  00
022A6:  BTFSC  x2B.1
022A8:  MOVLW  01
022AA:  IORWF  xBF,W
022AC:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
022AE:  BCF    FD8.0
022B0:  RLCF   1E,W
022B2:  MOVWF  xBF
022B4:  MOVLW  00
022B6:  BTFSC  x2B.0
022B8:  MOVLW  01
022BA:  IORWF  xBF,W
022BC:  MOVWF  1E
....................    
....................    Input9_16_Send = Input9_16_Send | In.B16;
022BE:  MOVLW  00
022C0:  BTFSC  x2C.7
022C2:  MOVLW  01
022C4:  IORWF  1F,F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B15;
022C6:  BCF    FD8.0
022C8:  RLCF   1F,W
022CA:  MOVWF  xBF
022CC:  MOVLW  00
022CE:  BTFSC  x2C.6
022D0:  MOVLW  01
022D2:  IORWF  xBF,W
022D4:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B14;
022D6:  BCF    FD8.0
022D8:  RLCF   1F,W
022DA:  MOVWF  xBF
022DC:  MOVLW  00
022DE:  BTFSC  x2C.5
022E0:  MOVLW  01
022E2:  IORWF  xBF,W
022E4:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B13;
022E6:  BCF    FD8.0
022E8:  RLCF   1F,W
022EA:  MOVWF  xBF
022EC:  MOVLW  00
022EE:  BTFSC  x2C.4
022F0:  MOVLW  01
022F2:  IORWF  xBF,W
022F4:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B12;
022F6:  BCF    FD8.0
022F8:  RLCF   1F,W
022FA:  MOVWF  xBF
022FC:  MOVLW  00
022FE:  BTFSC  x2C.3
02300:  MOVLW  01
02302:  IORWF  xBF,W
02304:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B11;
02306:  BCF    FD8.0
02308:  RLCF   1F,W
0230A:  MOVWF  xBF
0230C:  MOVLW  00
0230E:  BTFSC  x2C.2
02310:  MOVLW  01
02312:  IORWF  xBF,W
02314:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B10;
02316:  BCF    FD8.0
02318:  RLCF   1F,W
0231A:  MOVWF  xBF
0231C:  MOVLW  00
0231E:  BTFSC  x2C.1
02320:  MOVLW  01
02322:  IORWF  xBF,W
02324:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B9;
02326:  BCF    FD8.0
02328:  RLCF   1F,W
0232A:  MOVWF  xBF
0232C:  MOVLW  00
0232E:  BTFSC  x2C.0
02330:  MOVLW  01
02332:  IORWF  xBF,W
02334:  MOVWF  1F
02336:  MOVLB  0
02338:  GOTO   2F60 (RETURN)
....................    
....................    
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void checkCommand(void)
.................... {
....................    restart_wdt();
*
002DA:  CLRWDT
.................... 
....................    //if(sequence == end_sq && Address == SBUF)     //check Address
....................    if(sequence == end_sq )     //check Address
002DC:  MOVF   x6F,W
002DE:  SUBWF  x77,W
002E0:  BNZ   0308
....................    {
....................      RxD_DataLen = 0x00 ;
002E2:  CLRF   x79
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002E4:  CLRF   03
002E6:  MOVF   x79,W
002E8:  ADDLW  B6
002EA:  MOVWF  FE9
002EC:  MOVLW  00
002EE:  ADDWFC 03,W
002F0:  MOVWF  FEA
002F2:  MOVFF  2E,FEF
....................      restart_wdt();
002F6:  CLRWDT
....................      RxD_DataLen ++ ;
002F8:  INCF   x79,F
....................      sequence = addr_sq;
002FA:  MOVLW  10
002FC:  MOVWF  x77
....................      T_timeout = 0x14; //200ms
002FE:  MOVLW  14
00300:  MOVLB  1
00302:  MOVWF  x16
....................    }
00304:  BRA    050A
00306:  MOVLB  0
....................    else if(sequence == addr_sq)
00308:  MOVF   x77,W
0030A:  SUBLW  10
0030C:  BNZ   03A2
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
0030E:  CLRF   03
00310:  MOVF   x79,W
00312:  ADDLW  B6
00314:  MOVWF  FE9
00316:  MOVLW  00
00318:  ADDWFC 03,W
0031A:  MOVWF  FEA
0031C:  MOVFF  2E,FEF
....................       restart_wdt();
00320:  CLRWDT
....................       RxD_DataLen ++ ;
00322:  INCF   x79,F
.................... 
....................        if(RxD_Buff[RxD_DataLen - 1] < 0x17)   //Function Code Must be less than 0x20
00324:  MOVLW  01
00326:  SUBWF  x79,W
00328:  CLRF   03
0032A:  ADDLW  B6
0032C:  MOVWF  FE9
0032E:  MOVLW  00
00330:  ADDWFC 03,W
00332:  MOVWF  FEA
00334:  MOVF   FEF,W
00336:  SUBLW  16
00338:  BNC   0348
....................        {
....................            sequence = code_sq;
0033A:  MOVFF  70,77
....................            T_timeout = 0x14; //200ms
0033E:  MOVLW  14
00340:  MOVLB  1
00342:  MOVWF  x16
....................        }
00344:  BRA    039E
00346:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x20)   /////Read Setting//////
00348:  MOVLW  01
0034A:  SUBWF  x79,W
0034C:  CLRF   03
0034E:  ADDLW  B6
00350:  MOVWF  FE9
00352:  MOVLW  00
00354:  ADDWFC 03,W
00356:  MOVWF  FEA
00358:  MOVF   FEF,W
0035A:  SUBLW  20
0035C:  BNZ   036C
....................        {
....................           sequence = ubyte_lo_sq;
0035E:  MOVFF  73,77
....................           T_timeout = 0x14; //200ms
00362:  MOVLW  14
00364:  MOVLB  1
00366:  MOVWF  x16
....................        }
00368:  BRA    039E
0036A:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x21)   /////Write setting/////
0036C:  MOVLW  01
0036E:  SUBWF  x79,W
00370:  CLRF   03
00372:  ADDLW  B6
00374:  MOVWF  FE9
00376:  MOVLW  00
00378:  ADDWFC 03,W
0037A:  MOVWF  FEA
0037C:  MOVF   FEF,W
0037E:  SUBLW  21
00380:  BNZ   0390
....................        {
....................           sequence = byte_count_sq ;
00382:  MOVFF  75,77
....................           T_timeout = 0x14; //200ms
00386:  MOVLW  14
00388:  MOVLB  1
0038A:  MOVWF  x16
....................        }
0038C:  BRA    039E
0038E:  MOVLB  0
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
00390:  CLRF   x79
....................           sequence = end_sq;
00392:  MOVFF  6F,77
....................           T_timeout = 0x00;
00396:  MOVLB  1
00398:  CLRF   x16
....................           output_bit(P485ctrl,0);
0039A:  BCF    F8A.3
0039C:  BCF    F93.3
....................        }
....................    }
0039E:  BRA    050A
003A0:  MOVLB  0
....................    else if(sequence == byte_count_sq)
003A2:  MOVF   x75,W
003A4:  SUBWF  x77,W
003A6:  BNZ   03E0
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
003A8:  CLRF   03
003AA:  MOVF   x79,W
003AC:  ADDLW  B6
003AE:  MOVWF  FE9
003B0:  MOVLW  00
003B2:  ADDWFC 03,W
003B4:  MOVWF  FEA
003B6:  MOVFF  2E,FEF
....................       restart_wdt();
003BA:  CLRWDT
....................       RxD_DataLen ++ ;
003BC:  INCF   x79,F
....................       index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
003BE:  MOVLW  01
003C0:  SUBWF  x79,W
003C2:  CLRF   03
003C4:  ADDLW  B6
003C6:  MOVWF  FE9
003C8:  MOVLW  00
003CA:  ADDWFC 03,W
003CC:  MOVWF  FEA
003CE:  MOVFF  FEF,117
....................       T_timeout = 0x14; //200ms
003D2:  MOVLW  14
003D4:  MOVLB  1
003D6:  MOVWF  x16
....................       sequence = data_sq ;
003D8:  MOVFF  76,77
....................    }
003DC:  BRA    050A
003DE:  MOVLB  0
....................    else if(sequence == data_sq)
003E0:  MOVF   x76,W
003E2:  SUBWF  x77,W
003E4:  BNZ   0410
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
003E6:  CLRF   03
003E8:  MOVF   x79,W
003EA:  ADDLW  B6
003EC:  MOVWF  FE9
003EE:  MOVLW  00
003F0:  ADDWFC 03,W
003F2:  MOVWF  FEA
003F4:  MOVFF  2E,FEF
....................       restart_wdt();
003F8:  CLRWDT
....................       RxD_DataLen ++ ;
003FA:  INCF   x79,F
....................       index -- ;                     //Data Byte Count
003FC:  MOVLB  1
003FE:  DECF   x17,F
....................       if(index == 0x00)
00400:  MOVF   x17,F
00402:  BNZ   0408
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
00404:  MOVFF  73,77
....................       }
....................       T_timeout = 0x14; //200ms
00408:  MOVLW  14
0040A:  MOVWF  x16
....................    }
0040C:  BRA    050A
0040E:  MOVLB  0
....................    else if(sequence == code_sq)
00410:  MOVF   x70,W
00412:  SUBWF  x77,W
00414:  BNZ   043A
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
00416:  CLRF   03
00418:  MOVF   x79,W
0041A:  ADDLW  B6
0041C:  MOVWF  FE9
0041E:  MOVLW  00
00420:  ADDWFC 03,W
00422:  MOVWF  FEA
00424:  MOVFF  2E,FEF
....................       restart_wdt();
00428:  CLRWDT
....................       RxD_DataLen ++ ;
0042A:  INCF   x79,F
....................       sequence = start_addr_hi_sq;
0042C:  MOVFF  71,77
....................       T_timeout = 0x14; //200ms
00430:  MOVLW  14
00432:  MOVLB  1
00434:  MOVWF  x16
.................... 
....................    }
00436:  BRA    050A
00438:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
0043A:  MOVF   x71,W
0043C:  SUBWF  x77,W
0043E:  BNZ   0464
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
00440:  CLRF   03
00442:  MOVF   x79,W
00444:  ADDLW  B6
00446:  MOVWF  FE9
00448:  MOVLW  00
0044A:  ADDWFC 03,W
0044C:  MOVWF  FEA
0044E:  MOVFF  2E,FEF
....................       restart_wdt();
00452:  CLRWDT
....................       RxD_DataLen ++ ;
00454:  INCF   x79,F
....................       sequence = start_addr_lo_sq;
00456:  MOVFF  72,77
....................       T_timeout = 0x14; //200ms
0045A:  MOVLW  14
0045C:  MOVLB  1
0045E:  MOVWF  x16
....................    }
00460:  BRA    050A
00462:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
00464:  MOVF   x72,W
00466:  SUBWF  x77,W
00468:  BNZ   048E
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
0046A:  CLRF   03
0046C:  MOVF   x79,W
0046E:  ADDLW  B6
00470:  MOVWF  FE9
00472:  MOVLW  00
00474:  ADDWFC 03,W
00476:  MOVWF  FEA
00478:  MOVFF  2E,FEF
....................       restart_wdt();
0047C:  CLRWDT
....................       RxD_DataLen ++ ;
0047E:  INCF   x79,F
....................       sequence = ubyte_hi_sq;
00480:  MOVLW  15
00482:  MOVWF  x77
....................       T_timeout = 0x14; //200ms
00484:  MOVLW  14
00486:  MOVLB  1
00488:  MOVWF  x16
....................    }
0048A:  BRA    050A
0048C:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
0048E:  MOVF   x77,W
00490:  SUBLW  15
00492:  BNZ   04B8
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
00494:  CLRF   03
00496:  MOVF   x79,W
00498:  ADDLW  B6
0049A:  MOVWF  FE9
0049C:  MOVLW  00
0049E:  ADDWFC 03,W
004A0:  MOVWF  FEA
004A2:  MOVFF  2E,FEF
....................       restart_wdt();
004A6:  CLRWDT
....................       RxD_DataLen ++ ;
004A8:  INCF   x79,F
....................       sequence = ubyte_lo_sq;
004AA:  MOVFF  73,77
....................       T_timeout = 0x14; //200ms
004AE:  MOVLW  14
004B0:  MOVLB  1
004B2:  MOVWF  x16
....................    }
004B4:  BRA    050A
004B6:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
004B8:  MOVF   x73,W
004BA:  SUBWF  x77,W
004BC:  BNZ   04E2
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
004BE:  CLRF   03
004C0:  MOVF   x79,W
004C2:  ADDLW  B6
004C4:  MOVWF  FE9
004C6:  MOVLW  00
004C8:  ADDWFC 03,W
004CA:  MOVWF  FEA
004CC:  MOVFF  2E,FEF
....................       restart_wdt();
004D0:  CLRWDT
....................       RxD_DataLen ++ ;
004D2:  INCF   x79,F
....................       sequence = crc_hi_sq;
004D4:  MOVFF  74,77
....................       T_timeout = 0x14; //200ms
004D8:  MOVLW  14
004DA:  MOVLB  1
004DC:  MOVWF  x16
....................    }
004DE:  BRA    050A
004E0:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
004E2:  MOVF   x74,W
004E4:  SUBWF  x77,W
004E6:  BNZ   050A
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
004E8:  CLRF   03
004EA:  MOVF   x79,W
004EC:  ADDLW  B6
004EE:  MOVWF  FE9
004F0:  MOVLW  00
004F2:  ADDWFC 03,W
004F4:  MOVWF  FEA
004F6:  MOVFF  2E,FEF
....................       restart_wdt();
004FA:  CLRWDT
....................       sequence = end_sq;
004FC:  MOVFF  6F,77
....................       T_timeout = 0x00;
00500:  MOVLB  1
00502:  CLRF   x16
....................       //T_timeout = 0x14; //200ms
....................       recieve_completed = 1 ;            //Recieve completed then translate
00504:  BSF    30.4
....................       output_bit(P485ctrl,0);
00506:  BCF    F8A.3
00508:  BCF    F93.3
0050A:  MOVLB  0
....................    }
0050C:  GOTO   051A (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
0264E:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
02650:  MOVLW  01
02652:  SUBWF  x79,W
02654:  MOVLB  1
02656:  MOVWF  xBE
02658:  CLRF   xC0
0265A:  MOVLW  B6
0265C:  MOVWF  xBF
0265E:  MOVFF  1BE,1C1
02662:  MOVLB  0
02664:  RCALL  2014
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
02666:  MOVLW  01
02668:  SUBWF  x79,W
0266A:  CLRF   03
0266C:  ADDLW  B6
0266E:  MOVWF  FE9
02670:  MOVLW  00
02672:  ADDWFC 03,W
02674:  MOVWF  FEA
02676:  MOVF   FEF,W
02678:  SUBWF  xF3,W
0267A:  BTFSS  FD8.2
0267C:  GOTO   3EBC
02680:  CLRF   03
02682:  MOVF   x79,W
02684:  ADDLW  B6
02686:  MOVWF  FE9
02688:  MOVLW  00
0268A:  ADDWFC 03,W
0268C:  MOVWF  FEA
0268E:  MOVF   FEF,W
02690:  SUBWF  xF2,W
02692:  BTFSS  FD8.2
02694:  GOTO   3EBC
....................    {
....................    
....................          
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
02698:  MOVF   xB6,W
0269A:  SUBLW  AA
0269C:  BTFSS  FD8.2
0269E:  BRA    2B34
026A0:  MOVF   xB7,W
026A2:  SUBLW  20
026A4:  BTFSS  FD8.2
026A6:  BRA    2B34
....................       {
....................          TxD_Buff[0] = Address ;         //Address
026A8:  MOVFF  78,7A
....................          TxD_Buff[1] = 0x20 ;            //function code
026AC:  MOVLW  20
026AE:  MOVWF  x7B
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
026B0:  MOVLW  1C
026B2:  MOVWF  x7C
....................          
....................          /////////////////////////////////////////////
....................          InputType1_8 = 0x00;
026B4:  CLRF   3A
....................          InputType1_8 = InputType1_8 | FaultNCNO[8];
026B6:  MOVLW  00
026B8:  MOVLB  1
026BA:  BTFSC  xB8.0
026BC:  MOVLW  01
026BE:  IORWF  3A,F
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[7];
026C0:  BCF    FD8.0
026C2:  RLCF   3A,W
026C4:  MOVWF  xBF
026C6:  MOVLW  00
026C8:  BTFSC  xB7.7
026CA:  MOVLW  01
026CC:  IORWF  xBF,W
026CE:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[6];
026D0:  BCF    FD8.0
026D2:  RLCF   3A,W
026D4:  MOVWF  xBF
026D6:  MOVLW  00
026D8:  BTFSC  xB7.6
026DA:  MOVLW  01
026DC:  IORWF  xBF,W
026DE:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[5];
026E0:  BCF    FD8.0
026E2:  RLCF   3A,W
026E4:  MOVWF  xBF
026E6:  MOVLW  00
026E8:  BTFSC  xB7.5
026EA:  MOVLW  01
026EC:  IORWF  xBF,W
026EE:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[4];
026F0:  BCF    FD8.0
026F2:  RLCF   3A,W
026F4:  MOVWF  xBF
026F6:  MOVLW  00
026F8:  BTFSC  xB7.4
026FA:  MOVLW  01
026FC:  IORWF  xBF,W
026FE:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[3];
02700:  BCF    FD8.0
02702:  RLCF   3A,W
02704:  MOVWF  xBF
02706:  MOVLW  00
02708:  BTFSC  xB7.3
0270A:  MOVLW  01
0270C:  IORWF  xBF,W
0270E:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[2];
02710:  BCF    FD8.0
02712:  RLCF   3A,W
02714:  MOVWF  xBF
02716:  MOVLW  00
02718:  BTFSC  xB7.2
0271A:  MOVLW  01
0271C:  IORWF  xBF,W
0271E:  MOVWF  3A
....................          InputType1_8 = (InputType1_8 << 1) | FaultNCNO[1];
02720:  BCF    FD8.0
02722:  RLCF   3A,W
02724:  MOVWF  xBF
02726:  MOVLW  00
02728:  BTFSC  xB7.1
0272A:  MOVLW  01
0272C:  IORWF  xBF,W
0272E:  MOVWF  3A
.................... 
....................          InputType9_16 = 0x00;
02730:  CLRF   3B
....................          InputType9_16 = InputType9_16 | FaultNCNO[16];
02732:  MOVLW  00
02734:  BTFSC  xB9.0
02736:  MOVLW  01
02738:  IORWF  3B,F
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[15];
0273A:  BCF    FD8.0
0273C:  RLCF   3B,W
0273E:  MOVWF  xBF
02740:  MOVLW  00
02742:  BTFSC  xB8.7
02744:  MOVLW  01
02746:  IORWF  xBF,W
02748:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[14];
0274A:  BCF    FD8.0
0274C:  RLCF   3B,W
0274E:  MOVWF  xBF
02750:  MOVLW  00
02752:  BTFSC  xB8.6
02754:  MOVLW  01
02756:  IORWF  xBF,W
02758:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[13];
0275A:  BCF    FD8.0
0275C:  RLCF   3B,W
0275E:  MOVWF  xBF
02760:  MOVLW  00
02762:  BTFSC  xB8.5
02764:  MOVLW  01
02766:  IORWF  xBF,W
02768:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[12];
0276A:  BCF    FD8.0
0276C:  RLCF   3B,W
0276E:  MOVWF  xBF
02770:  MOVLW  00
02772:  BTFSC  xB8.4
02774:  MOVLW  01
02776:  IORWF  xBF,W
02778:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[11];
0277A:  BCF    FD8.0
0277C:  RLCF   3B,W
0277E:  MOVWF  xBF
02780:  MOVLW  00
02782:  BTFSC  xB8.3
02784:  MOVLW  01
02786:  IORWF  xBF,W
02788:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[10];
0278A:  BCF    FD8.0
0278C:  RLCF   3B,W
0278E:  MOVWF  xBF
02790:  MOVLW  00
02792:  BTFSC  xB8.2
02794:  MOVLW  01
02796:  IORWF  xBF,W
02798:  MOVWF  3B
....................          InputType9_16 = (InputType9_16 << 1) | FaultNCNO[9];
0279A:  BCF    FD8.0
0279C:  RLCF   3B,W
0279E:  MOVWF  xBF
027A0:  MOVLW  00
027A2:  BTFSC  xB8.1
027A4:  MOVLW  01
027A6:  IORWF  xBF,W
027A8:  MOVWF  3B
....................          
....................          FaultType17_24 = 0x00;
027AA:  CLRF   3F
....................          FaultType17_24 = FaultType17_24 | FaultNCNO[24];
027AC:  MOVLW  00
027AE:  BTFSC  xBA.0
027B0:  MOVLW  01
027B2:  IORWF  3F,F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[23];
027B4:  BCF    FD8.0
027B6:  RLCF   3F,W
027B8:  MOVWF  xBF
027BA:  MOVLW  00
027BC:  BTFSC  xB9.7
027BE:  MOVLW  01
027C0:  IORWF  xBF,W
027C2:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[22];
027C4:  BCF    FD8.0
027C6:  RLCF   3F,W
027C8:  MOVWF  xBF
027CA:  MOVLW  00
027CC:  BTFSC  xB9.6
027CE:  MOVLW  01
027D0:  IORWF  xBF,W
027D2:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[21];
027D4:  BCF    FD8.0
027D6:  RLCF   3F,W
027D8:  MOVWF  xBF
027DA:  MOVLW  00
027DC:  BTFSC  xB9.5
027DE:  MOVLW  01
027E0:  IORWF  xBF,W
027E2:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[20];
027E4:  BCF    FD8.0
027E6:  RLCF   3F,W
027E8:  MOVWF  xBF
027EA:  MOVLW  00
027EC:  BTFSC  xB9.4
027EE:  MOVLW  01
027F0:  IORWF  xBF,W
027F2:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[19];
027F4:  BCF    FD8.0
027F6:  RLCF   3F,W
027F8:  MOVWF  xBF
027FA:  MOVLW  00
027FC:  BTFSC  xB9.3
027FE:  MOVLW  01
02800:  IORWF  xBF,W
02802:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[18];
02804:  BCF    FD8.0
02806:  RLCF   3F,W
02808:  MOVWF  xBF
0280A:  MOVLW  00
0280C:  BTFSC  xB9.2
0280E:  MOVLW  01
02810:  IORWF  xBF,W
02812:  MOVWF  3F
....................          FaultType17_24 = (FaultType17_24 << 1) | FaultNCNO[17];
02814:  BCF    FD8.0
02816:  RLCF   3F,W
02818:  MOVWF  xBF
0281A:  MOVLW  00
0281C:  BTFSC  xB9.1
0281E:  MOVLW  01
02820:  IORWF  xBF,W
02822:  MOVWF  3F
....................          
....................          ///////////////////////////////////////////
....................          
....................          TxD_Buff[3] = InputType1_8 ;    //1
02824:  MOVFF  3A,7D
....................          TxD_Buff[4] = InputType9_16 ;  //2
02828:  MOVFF  3B,7E
....................          TxD_Buff[5] = InputType17_24 ;//3
0282C:  MOVFF  3C,7F
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
02830:  MOVFF  3D,80
....................          TxD_Buff[7] = FaultType9_16 ; //5
02834:  MOVFF  3E,81
....................          TxD_Buff[8] = FaultType17_24 ;   //6
02838:  MOVFF  3F,82
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
0283C:  MOVFF  40,83
....................          TxD_Buff[10] = OutputType9_16 ;  //8
02840:  MOVFF  41,84
....................          TxD_Buff[11] = OutputType17_24 ; //9
02844:  MOVFF  42,85
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
02848:  MOVFF  43,86
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
0284C:  MOVFF  44,87
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
02850:  MOVFF  45,88
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
02854:  MOVFF  46,89
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
02858:  MOVFF  47,8A
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
0285C:  MOVFF  48,8B
....................         
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
02860:  MOVFF  FF2,1BE
02864:  BCF    FF2.7
02866:  CLRF   FAA
02868:  MOVLW  10
0286A:  MOVWF  FA9
0286C:  BCF    FA6.6
0286E:  BCF    FA6.7
02870:  BSF    FA6.0
02872:  MOVF   FA8,W
02874:  BTFSC  xBE.7
02876:  BSF    FF2.7
02878:  MOVLB  0
0287A:  MOVWF  x8C
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
0287C:  MOVFF  FF2,1BE
02880:  BCF    FF2.7
02882:  CLRF   FAA
02884:  MOVLW  11
02886:  MOVWF  FA9
02888:  BCF    FA6.6
0288A:  BCF    FA6.7
0288C:  BSF    FA6.0
0288E:  MOVF   FA8,W
02890:  MOVLB  1
02892:  BTFSC  xBE.7
02894:  BSF    FF2.7
02896:  MOVLB  0
02898:  MOVWF  x8D
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
0289A:  MOVFF  FF2,1BE
0289E:  BCF    FF2.7
028A0:  CLRF   FAA
028A2:  MOVLW  12
028A4:  MOVWF  FA9
028A6:  BCF    FA6.6
028A8:  BCF    FA6.7
028AA:  BSF    FA6.0
028AC:  MOVF   FA8,W
028AE:  MOVLB  1
028B0:  BTFSC  xBE.7
028B2:  BSF    FF2.7
028B4:  MOVLB  0
028B6:  MOVWF  x8E
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
028B8:  MOVFF  FF2,1BE
028BC:  BCF    FF2.7
028BE:  CLRF   FAA
028C0:  MOVLW  13
028C2:  MOVWF  FA9
028C4:  BCF    FA6.6
028C6:  BCF    FA6.7
028C8:  BSF    FA6.0
028CA:  MOVF   FA8,W
028CC:  MOVLB  1
028CE:  BTFSC  xBE.7
028D0:  BSF    FF2.7
028D2:  MOVLB  0
028D4:  MOVWF  x8F
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
028D6:  MOVFF  FF2,1BE
028DA:  BCF    FF2.7
028DC:  CLRF   FAA
028DE:  MOVLW  14
028E0:  MOVWF  FA9
028E2:  BCF    FA6.6
028E4:  BCF    FA6.7
028E6:  BSF    FA6.0
028E8:  MOVF   FA8,W
028EA:  MOVLB  1
028EC:  BTFSC  xBE.7
028EE:  BSF    FF2.7
028F0:  MOVLB  0
028F2:  MOVWF  x90
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
028F4:  MOVFF  FF2,1BE
028F8:  BCF    FF2.7
028FA:  CLRF   FAA
028FC:  MOVLW  15
028FE:  MOVWF  FA9
02900:  BCF    FA6.6
02902:  BCF    FA6.7
02904:  BSF    FA6.0
02906:  MOVF   FA8,W
02908:  MOVLB  1
0290A:  BTFSC  xBE.7
0290C:  BSF    FF2.7
0290E:  MOVLB  0
02910:  MOVWF  x91
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
02912:  MOVFF  FF2,1BE
02916:  BCF    FF2.7
02918:  CLRF   FAA
0291A:  MOVLW  16
0291C:  MOVWF  FA9
0291E:  BCF    FA6.6
02920:  BCF    FA6.7
02922:  BSF    FA6.0
02924:  MOVF   FA8,W
02926:  MOVLB  1
02928:  BTFSC  xBE.7
0292A:  BSF    FF2.7
0292C:  MOVLB  0
0292E:  MOVWF  x92
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
02930:  MOVFF  FF2,1BE
02934:  BCF    FF2.7
02936:  CLRF   FAA
02938:  MOVLW  17
0293A:  MOVWF  FA9
0293C:  BCF    FA6.6
0293E:  BCF    FA6.7
02940:  BSF    FA6.0
02942:  MOVF   FA8,W
02944:  MOVLB  1
02946:  BTFSC  xBE.7
02948:  BSF    FF2.7
0294A:  MOVLB  0
0294C:  MOVWF  x93
....................        
....................          ///////////////////////////////////////jj------------------
....................          
....................          /*
....................          Red1_8 = Red1_8 | RED_Colour.B8;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B7;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B6;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B5;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B4;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B3;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B2;
....................          Red1_8 = (Red1_8 << 1) | RED_Colour.B1;
....................          
....................          Red9_10 = Red9_10 | RED_Colour.B10;
....................          Red9_10 = (Red9_10 << 1) | RED_Colour.B9;
....................          
....................          Red11_18 = Red11_18 | RED_Colour.B16;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B15;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B14;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B13;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B12;
....................          Red11_18 = (Red11_18 << 1) | RED_Colour.B11;
....................          //Red11_18 = (Red11_18 << 1) | RED_Colour.B2;
....................          //Red11_18 = (Red11_18 << 1) | RED_Colour.B1;
....................         
....................          Green1_8 = Green1_8 | GREEN_Colour.B8;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B7;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B6;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B5;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B4;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B3;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B2;
....................          Green1_8 = (Green1_8 << 1) | GREEN_Colour.B1;
....................          
....................          Green9_10 = Green9_10 | GREEN_Colour.B10;
....................          Green9_10 = (Green9_10 << 1) | GREEN_Colour.B9;
....................          
....................          Green11_18 = Green11_18 | GREEN_Colour.B16;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B15;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B14;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B13;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B12;
....................          Green11_18 = (Green11_18 << 1) | GREEN_Colour.B11;
....................          
....................           //TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
....................           TxD_Buff[18] = Red1_8;//Red1_8;    //16
....................           
....................           TxD_Buff[19] = Red9_10;//Red9_10;      //17
....................           TxD_Buff[20] = Red11_18;//Red11_18;     //18
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
....................           
....................           //TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
....................           TxD_Buff[22] = Green1_8;//Green1_8;     //20
....................           
....................           TxD_Buff[23] = Green9_10;//Green9_10;    //21
....................           TxD_Buff[24] = Green11_18;//Green11_18;      //22
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
....................           */
....................           ///////////////////////////////////////jj------------------
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
0294E:  MOVFF  6A,94
....................          TxD_Buff[27] = AutoAckTime ;        //25
02952:  MOVFF  6B,95
....................          TxD_Buff[28] = FlashingRate ;       //26
02956:  MOVFF  6C,96
....................          TxD_Buff[29] = NoOfPoint ;          //27
0295A:  MOVFF  6D,97
....................          TxD_Buff[30] = FaultDelayTime ;    //28
0295E:  MOVLW  7B
02960:  MOVWF  x98
....................          TxD_Buff[31] = Address ;            //29
02962:  MOVFF  78,99
.................... 
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
02966:  MOVFF  17D,9A
....................          TxD_Buff[33] = FaultDelayTime[2] ;
0296A:  MOVFF  17F,9B
....................          TxD_Buff[34] = FaultDelayTime[3] ;
0296E:  MOVFF  181,9C
....................          TxD_Buff[35] = FaultDelayTime[4] ;
02972:  MOVFF  183,9D
....................          TxD_Buff[36] = FaultDelayTime[5] ;
02976:  MOVFF  185,9E
....................          TxD_Buff[37] = FaultDelayTime[6] ;
0297A:  MOVFF  187,9F
....................          TxD_Buff[38] = FaultDelayTime[7] ;
0297E:  MOVFF  189,A0
....................          TxD_Buff[39] = FaultDelayTime[8] ;
02982:  MOVFF  18B,A1
....................          TxD_Buff[40] = FaultDelayTime[9] ;
02986:  MOVFF  18D,A2
....................          TxD_Buff[41] = FaultDelayTime[10] ;
0298A:  MOVFF  18F,A3
....................          TxD_Buff[42] = FaultDelayTime[11] ;
0298E:  MOVFF  191,A4
....................          TxD_Buff[43] = FaultDelayTime[12] ;
02992:  MOVFF  193,A5
....................          TxD_Buff[44] = FaultDelayTime[13] ;
02996:  MOVFF  195,A6
....................          TxD_Buff[45] = FaultDelayTime[14] ;
0299A:  MOVFF  197,A7
....................          TxD_Buff[46] = FaultDelayTime[15] ;
0299E:  MOVFF  199,A8
....................          TxD_Buff[47] = FaultDelayTime[16] ;
029A2:  MOVFF  19B,A9
....................          TxD_Buff[48] = FaultDelayTime[17] ;
029A6:  MOVFF  19D,AA
....................          TxD_Buff[49] = FaultDelayTime[18] ;
029AA:  MOVFF  19F,AB
....................          TxD_Buff[50] = FaultDelayTime[19] ;
029AE:  MOVFF  1A1,AC
....................          TxD_Buff[51] = FaultDelayTime[20] ;
029B2:  MOVFF  1A3,AD
....................          
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
029B6:  MOVLB  1
029B8:  CLRF   xC0
029BA:  MOVLW  7A
029BC:  MOVWF  xBF
029BE:  MOVLW  34
029C0:  MOVWF  xC1
029C2:  MOVLB  0
029C4:  CALL   2014
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
029C8:  MOVFF  F3,AE
....................          TxD_Buff[53] = CRC_Lo ;
029CC:  MOVFF  F2,AF
.................... 
....................          output_bit(P485ctrl,1);
029D0:  BSF    F8A.3
029D2:  BCF    F93.3
....................          delay_ms(10);
029D4:  MOVLW  0A
029D6:  MOVLB  1
029D8:  MOVWF  xC6
029DA:  MOVLB  0
029DC:  CALL   05B2
.................... 
....................          putc(Txd_Buff[0]);
029E0:  MOVF   x7A,W
029E2:  CALL   2064
....................          putc(Txd_Buff[1]);
029E6:  MOVF   x7B,W
029E8:  CALL   2064
....................          putc(Txd_Buff[2]);
029EC:  MOVF   x7C,W
029EE:  CALL   2064
....................          putc(Txd_Buff[3]);
029F2:  MOVF   x7D,W
029F4:  CALL   2064
....................          putc(Txd_Buff[4]);
029F8:  MOVF   x7E,W
029FA:  CALL   2064
....................          putc(Txd_Buff[5]);
029FE:  MOVF   x7F,W
02A00:  CALL   2064
....................          putc(Txd_Buff[6]);
02A04:  MOVF   x80,W
02A06:  CALL   2064
....................          putc(Txd_Buff[7]);
02A0A:  MOVF   x81,W
02A0C:  CALL   2064
....................          putc(Txd_Buff[8]);
02A10:  MOVF   x82,W
02A12:  CALL   2064
....................          putc(Txd_Buff[9]);
02A16:  MOVF   x83,W
02A18:  CALL   2064
....................          putc(Txd_Buff[10]);
02A1C:  MOVF   x84,W
02A1E:  CALL   2064
....................          putc(Txd_Buff[11]);
02A22:  MOVF   x85,W
02A24:  CALL   2064
....................          putc(Txd_Buff[12]);
02A28:  MOVF   x86,W
02A2A:  CALL   2064
....................          putc(Txd_Buff[13]);
02A2E:  MOVF   x87,W
02A30:  CALL   2064
....................          putc(Txd_Buff[14]);
02A34:  MOVF   x88,W
02A36:  CALL   2064
....................          putc(Txd_Buff[15]);
02A3A:  MOVF   x89,W
02A3C:  CALL   2064
....................          putc(Txd_Buff[16]);
02A40:  MOVF   x8A,W
02A42:  CALL   2064
....................          putc(Txd_Buff[17]);
02A46:  MOVF   x8B,W
02A48:  CALL   2064
....................          putc(Txd_Buff[18]);
02A4C:  MOVF   x8C,W
02A4E:  CALL   2064
....................          putc(Txd_Buff[19]);
02A52:  MOVF   x8D,W
02A54:  CALL   2064
....................          putc(Txd_Buff[20]);
02A58:  MOVF   x8E,W
02A5A:  CALL   2064
....................          putc(Txd_Buff[21]);
02A5E:  MOVF   x8F,W
02A60:  CALL   2064
....................          putc(Txd_Buff[22]);
02A64:  MOVF   x90,W
02A66:  CALL   2064
....................          putc(Txd_Buff[23]);
02A6A:  MOVF   x91,W
02A6C:  CALL   2064
....................          putc(Txd_Buff[24]);
02A70:  MOVF   x92,W
02A72:  CALL   2064
....................          putc(Txd_Buff[25]);
02A76:  MOVF   x93,W
02A78:  CALL   2064
....................          putc(Txd_Buff[26]);
02A7C:  MOVF   x94,W
02A7E:  CALL   2064
....................          putc(Txd_Buff[27]);
02A82:  MOVF   x95,W
02A84:  CALL   2064
....................          putc(Txd_Buff[28]);
02A88:  MOVF   x96,W
02A8A:  CALL   2064
....................          putc(Txd_Buff[29]);
02A8E:  MOVF   x97,W
02A90:  CALL   2064
....................          putc(Txd_Buff[30]);
02A94:  MOVF   x98,W
02A96:  CALL   2064
....................          putc(Txd_Buff[31]);
02A9A:  MOVF   x99,W
02A9C:  CALL   2064
....................          
....................          putc(Txd_Buff[32]);
02AA0:  MOVF   x9A,W
02AA2:  CALL   2064
....................          putc(Txd_Buff[33]);
02AA6:  MOVF   x9B,W
02AA8:  CALL   2064
....................          putc(Txd_Buff[34]);
02AAC:  MOVF   x9C,W
02AAE:  CALL   2064
....................          putc(Txd_Buff[35]);
02AB2:  MOVF   x9D,W
02AB4:  CALL   2064
....................          putc(Txd_Buff[36]);
02AB8:  MOVF   x9E,W
02ABA:  CALL   2064
....................          putc(Txd_Buff[37]);
02ABE:  MOVF   x9F,W
02AC0:  CALL   2064
....................          putc(Txd_Buff[38]);
02AC4:  MOVF   xA0,W
02AC6:  CALL   2064
....................          putc(Txd_Buff[39]);
02ACA:  MOVF   xA1,W
02ACC:  CALL   2064
....................          putc(Txd_Buff[40]);
02AD0:  MOVF   xA2,W
02AD2:  CALL   2064
....................          putc(Txd_Buff[41]);
02AD6:  MOVF   xA3,W
02AD8:  CALL   2064
....................          
....................          putc(Txd_Buff[42]);
02ADC:  MOVF   xA4,W
02ADE:  CALL   2064
....................          putc(Txd_Buff[43]);
02AE2:  MOVF   xA5,W
02AE4:  CALL   2064
....................          putc(Txd_Buff[44]);
02AE8:  MOVF   xA6,W
02AEA:  CALL   2064
....................          putc(Txd_Buff[45]);
02AEE:  MOVF   xA7,W
02AF0:  CALL   2064
....................          putc(Txd_Buff[46]);
02AF4:  MOVF   xA8,W
02AF6:  CALL   2064
....................          putc(Txd_Buff[47]);
02AFA:  MOVF   xA9,W
02AFC:  CALL   2064
....................          putc(Txd_Buff[48]);
02B00:  MOVF   xAA,W
02B02:  CALL   2064
....................          putc(Txd_Buff[49]);
02B06:  MOVF   xAB,W
02B08:  CALL   2064
....................          putc(Txd_Buff[50]);
02B0C:  MOVF   xAC,W
02B0E:  CALL   2064
....................          putc(Txd_Buff[51]);
02B12:  MOVF   xAD,W
02B14:  CALL   2064
....................          
....................          putc(Txd_Buff[52]);
02B18:  MOVF   xAE,W
02B1A:  CALL   2064
....................          putc(Txd_Buff[53]);
02B1E:  MOVF   xAF,W
02B20:  CALL   2064
....................        
....................          delay_ms(3);
02B24:  MOVLW  03
02B26:  MOVLB  1
02B28:  MOVWF  xC6
02B2A:  MOVLB  0
02B2C:  CALL   05B2
....................          output_bit(P485ctrl,0);        
02B30:  BCF    F8A.3
02B32:  BCF    F93.3
....................       }
....................    
....................    ///////////////////////////////////////////////////////////////
....................       if(RxD_Buff[0] == Address)
02B34:  MOVF   x78,W
02B36:  SUBWF  xB6,W
02B38:  BTFSS  FD8.2
02B3A:  GOTO   3EB4
....................       {
....................       
....................       if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
02B3E:  DECFSZ xB7,W
02B40:  BRA    2F54
....................       {
....................             //Do Read Coil
....................             Start_Address = RxD_Buff[2] ;
02B42:  CLRF   xF7
02B44:  MOVFF  B8,F6
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
02B48:  MOVFF  F6,F7
02B4C:  MOVLB  1
02B4E:  CLRF   xBE
02B50:  MOVF   xBE,W
02B52:  MOVLB  0
02B54:  IORWF  xB9,W
02B56:  MOVWF  xF6
02B58:  MOVLB  0
....................             No_PointCount = RxD_Buff[4] ;
02B5A:  CLRF   xF9
02B5C:  MOVFF  BA,F8
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //No. of Point 16 bit
02B60:  MOVFF  F8,F9
02B64:  MOVLB  1
02B66:  CLRF   xBE
02B68:  MOVF   xBE,W
02B6A:  MOVLB  0
02B6C:  IORWF  xBB,W
02B6E:  MOVWF  xF8
02B70:  MOVLB  0
.................... 
....................             if(Start_Address < 0x10 && (Start_Address + No_PointCount) < 0x11)  //Valid point 0-15
02B72:  MOVF   xF7,F
02B74:  BTFSS  FD8.2
02B76:  BRA    2EE8
02B78:  MOVF   xF6,W
02B7A:  SUBLW  0F
02B7C:  BTFSS  FD8.0
02B7E:  BRA    2EE8
02B80:  MOVF   xF8,W
02B82:  ADDWF  xF6,W
02B84:  MOVLB  1
02B86:  MOVWF  xBE
02B88:  MOVLB  0
02B8A:  MOVF   xF9,W
02B8C:  ADDWFC xF7,W
02B8E:  MOVLB  1
02B90:  MOVWF  xBF
02B92:  MOVF   xBF,F
02B94:  BTFSC  FD8.2
02B96:  BRA    2B9C
02B98:  MOVLB  0
02B9A:  BRA    2EE8
02B9C:  MOVF   xBE,W
02B9E:  SUBLW  10
02BA0:  BTFSC  FD8.0
02BA2:  BRA    2BA8
02BA4:  MOVLB  0
02BA6:  BRA    2EE8
....................             {
....................                if(No_PointCount < 9) Data_ByteCount = 0x01 ;
02BA8:  MOVLB  0
02BAA:  MOVF   xF9,F
02BAC:  BNZ   2BBA
02BAE:  MOVF   xF8,W
02BB0:  SUBLW  08
02BB2:  BNC   2BBA
02BB4:  MOVLW  01
02BB6:  MOVWF  xFA
02BB8:  BRA    2BDE
....................                else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
02BBA:  MOVF   xF9,F
02BBC:  BNZ   2BCA
02BBE:  MOVF   xF8,W
02BC0:  SUBLW  10
02BC2:  BNC   2BCA
02BC4:  MOVLW  02
02BC6:  MOVWF  xFA
02BC8:  BRA    2BDE
....................                else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
02BCA:  MOVF   xF9,F
02BCC:  BNZ   2BDA
02BCE:  MOVF   xF8,W
02BD0:  SUBLW  18
02BD2:  BNC   2BDA
02BD4:  MOVLW  03
02BD6:  MOVWF  xFA
02BD8:  BRA    2BDE
....................                else   Data_ByteCount = 0x01 ; //----Jack
02BDA:  MOVLW  01
02BDC:  MOVWF  xFA
.................... 
....................                if(Data_ByteCount == 0x01)
02BDE:  DECFSZ xFA,W
02BE0:  BRA    2D22
....................                {
.................... 
....................                   if(Start_Address < 0x09)
02BE2:  MOVF   xF7,F
02BE4:  BNZ   2C00
02BE6:  MOVF   xF6,W
02BE8:  SUBLW  08
02BEA:  BNC   2C00
....................                   {
....................                      //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                      //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                      //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                       Data_Buff[0] = Input1_8 >> Start_Address ;
02BEC:  MOVFF  49,FB
02BF0:  MOVF   xF6,W
02BF2:  MOVWF  01
02BF4:  BZ    2BFE
02BF6:  BCF    FD8.0
02BF8:  RRCF   xFB,F
02BFA:  DECFSZ 01,F
02BFC:  BRA    2BF6
....................                       //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                       //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                   }
02BFE:  BRA    2C34
....................                   else if(Start_Address > 0x08 && Start_Address < 0x10)
02C00:  MOVF   xF7,F
02C02:  BNZ   2C0A
02C04:  MOVF   xF6,W
02C06:  SUBLW  08
02C08:  BC    2C34
02C0A:  MOVF   xF7,F
02C0C:  BNZ   2C34
02C0E:  MOVF   xF6,W
02C10:  SUBLW  0F
02C12:  BNC   2C34
....................                   {
....................                      //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                      Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
02C14:  MOVLW  08
02C16:  SUBWF  xF6,W
02C18:  MOVWF  00
02C1A:  MOVLW  00
02C1C:  SUBWFB xF7,W
02C1E:  MOVWF  03
02C20:  MOVFF  00,01
02C24:  MOVFF  4A,FB
02C28:  MOVF   01,F
02C2A:  BZ    2C34
02C2C:  BCF    FD8.0
02C2E:  RRCF   xFB,F
02C30:  DECFSZ 01,F
02C32:  BRA    2C2C
....................                   }
.................... 
.................... 
....................                   if(No_PointCount == 0x08)
02C34:  MOVF   xF8,W
02C36:  SUBLW  08
02C38:  BNZ   2C40
02C3A:  MOVF   xF9,F
02C3C:  BNZ   2C40
....................                   {
....................                      Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                   }
02C3E:  BRA    2CAA
....................                   else if(No_PointCount == 0x07)
02C40:  MOVF   xF8,W
02C42:  SUBLW  07
02C44:  BNZ   2C4E
02C46:  MOVF   xF9,F
02C48:  BNZ   2C4E
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
02C4A:  BCF    xFB.7
....................                   }
02C4C:  BRA    2CAA
....................                   else if(No_PointCount == 0x06)
02C4E:  MOVF   xF8,W
02C50:  SUBLW  06
02C52:  BNZ   2C5E
02C54:  MOVF   xF9,F
02C56:  BNZ   2C5E
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
02C58:  MOVLW  3F
02C5A:  ANDWF  xFB,F
....................                   }
02C5C:  BRA    2CAA
....................                   else if(No_PointCount == 0x05)
02C5E:  MOVF   xF8,W
02C60:  SUBLW  05
02C62:  BNZ   2C6E
02C64:  MOVF   xF9,F
02C66:  BNZ   2C6E
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
02C68:  MOVLW  1F
02C6A:  ANDWF  xFB,F
....................                   }
02C6C:  BRA    2CAA
....................                   else if(No_PointCount == 0x04)
02C6E:  MOVF   xF8,W
02C70:  SUBLW  04
02C72:  BNZ   2C7E
02C74:  MOVF   xF9,F
02C76:  BNZ   2C7E
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
02C78:  MOVLW  0F
02C7A:  ANDWF  xFB,F
....................                   }
02C7C:  BRA    2CAA
....................                   else if(No_PointCount == 0x03)
02C7E:  MOVF   xF8,W
02C80:  SUBLW  03
02C82:  BNZ   2C8E
02C84:  MOVF   xF9,F
02C86:  BNZ   2C8E
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
02C88:  MOVLW  07
02C8A:  ANDWF  xFB,F
....................                   }
02C8C:  BRA    2CAA
....................                   else if(No_PointCount == 0x02)
02C8E:  MOVF   xF8,W
02C90:  SUBLW  02
02C92:  BNZ   2C9E
02C94:  MOVF   xF9,F
02C96:  BNZ   2C9E
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
02C98:  MOVLW  03
02C9A:  ANDWF  xFB,F
....................                   }
02C9C:  BRA    2CAA
....................                   else if(No_PointCount == 0x01)
02C9E:  DECFSZ xF8,W
02CA0:  BRA    2CAA
02CA2:  MOVF   xF9,F
02CA4:  BNZ   2CAA
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
02CA6:  MOVLW  01
02CA8:  ANDWF  xFB,F
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02CAA:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
02CAE:  MOVLW  01
02CB0:  MOVWF  x7B
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
02CB2:  MOVFF  FA,7C
....................                   TxD_Buff[3] = Data_Buff[0] ;   //Data
02CB6:  MOVFF  FB,7D
.................... 
....................                   CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
02CBA:  MOVLB  1
02CBC:  CLRF   xC0
02CBE:  MOVLW  7A
02CC0:  MOVWF  xBF
02CC2:  MOVLW  04
02CC4:  MOVWF  xC1
02CC6:  MOVLB  0
02CC8:  CALL   2014
.................... 
....................                   TxD_Buff[4] = CRC_Hi ;
02CCC:  MOVFF  F3,7E
....................                   TxD_Buff[5] = CRC_Lo ;
02CD0:  MOVFF  F2,7F
.................... 
....................                   //TxD_DataLen = 0x06 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
02CD4:  BSF    F8A.3
02CD6:  BCF    F93.3
....................                   restart_wdt();
02CD8:  CLRWDT
....................                   delay_ms(4);
02CDA:  MOVLW  04
02CDC:  MOVLB  1
02CDE:  MOVWF  xC6
02CE0:  MOVLB  0
02CE2:  CALL   05B2
....................                   restart_wdt();
02CE6:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02CE8:  MOVF   x7A,W
02CEA:  CALL   2064
....................                   putc(TxD_Buff[1]) ;               //Function Code
02CEE:  MOVF   x7B,W
02CF0:  CALL   2064
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02CF4:  MOVF   x7C,W
02CF6:  CALL   2064
....................                   putc(TxD_Buff[3]) ;
02CFA:  MOVF   x7D,W
02CFC:  CALL   2064
....................                   putc(TxD_Buff[4]) ;
02D00:  MOVF   x7E,W
02D02:  CALL   2064
....................                   putc(TxD_Buff[5]) ;
02D06:  MOVF   x7F,W
02D08:  CALL   2064
....................                   //putc(TxD_Buff[6]) ;
....................                   //putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
....................                
....................                   restart_wdt();
02D0C:  CLRWDT
....................                   delay_ms(3);
02D0E:  MOVLW  03
02D10:  MOVLB  1
02D12:  MOVWF  xC6
02D14:  MOVLB  0
02D16:  CALL   05B2
....................                   restart_wdt();
02D1A:  CLRWDT
....................                   output_bit(P485ctrl,0);
02D1C:  BCF    F8A.3
02D1E:  BCF    F93.3
....................               
....................                }
02D20:  BRA    2EE6
....................                else if(Data_ByteCount == 0x02)
02D22:  MOVF   xFA,W
02D24:  SUBLW  02
02D26:  BTFSS  FD8.2
02D28:  BRA    2EE6
....................                {
....................                   //Data_Buff[1] = ~output[1] >> Start_Address ;
....................                   //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                   //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                   
....................                   //Data_Buff[1] = Output9_16 >> Start_Address ;//jj
....................                   //DataTemp = Output9_16 << (0x08 - Start_Address) ;//jj
....................                   //Data_Buff[0] = (Output1_8 >> Start_Address) | DataTemp;   //Low Byte//jj
....................                   Data_Buff[0] = Input1_8 >> Start_Address ;
02D2A:  MOVFF  49,FB
02D2E:  MOVF   xF6,W
02D30:  MOVWF  01
02D32:  BZ    2D3C
02D34:  BCF    FD8.0
02D36:  RRCF   xFB,F
02D38:  DECFSZ 01,F
02D3A:  BRA    2D34
....................                   Data_Buff[1] = Input9_16 ;// >> Start_Address ;
02D3C:  MOVFF  4A,FC
.................... 
.................... 
....................                   if((No_PointCount - 0x07) == 0x08)
02D40:  MOVLW  07
02D42:  SUBWF  xF8,W
02D44:  MOVLB  1
02D46:  MOVWF  xBE
02D48:  MOVLW  00
02D4A:  MOVLB  0
02D4C:  SUBWFB xF9,W
02D4E:  MOVLB  1
02D50:  MOVWF  xBF
02D52:  MOVF   xBE,W
02D54:  SUBLW  08
02D56:  BNZ   2D5E
02D58:  MOVF   xBF,F
02D5A:  BNZ   2D5E
....................                   {
....................                      Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                   }
02D5C:  BRA    2E64
....................                   else if((No_PointCount - 0x07) == 0x07)
02D5E:  MOVLW  07
02D60:  MOVLB  0
02D62:  SUBWF  xF8,W
02D64:  MOVLB  1
02D66:  MOVWF  xBE
02D68:  MOVLW  00
02D6A:  MOVLB  0
02D6C:  SUBWFB xF9,W
02D6E:  MOVLB  1
02D70:  MOVWF  xBF
02D72:  MOVF   xBE,W
02D74:  SUBLW  07
02D76:  BNZ   2D82
02D78:  MOVF   xBF,F
02D7A:  BNZ   2D82
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
02D7C:  MOVLB  0
02D7E:  BCF    xFC.7
....................                   }
02D80:  BRA    2E62
....................                   else if((No_PointCount - 0x07) == 0x06)
02D82:  MOVLW  07
02D84:  MOVLB  0
02D86:  SUBWF  xF8,W
02D88:  MOVLB  1
02D8A:  MOVWF  xBE
02D8C:  MOVLW  00
02D8E:  MOVLB  0
02D90:  SUBWFB xF9,W
02D92:  MOVLB  1
02D94:  MOVWF  xBF
02D96:  MOVF   xBE,W
02D98:  SUBLW  06
02D9A:  BNZ   2DA8
02D9C:  MOVF   xBF,F
02D9E:  BNZ   2DA8
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
02DA0:  MOVLW  3F
02DA2:  MOVLB  0
02DA4:  ANDWF  xFC,F
....................                   }
02DA6:  BRA    2E62
....................                   else if((No_PointCount - 0x07) == 0x05)
02DA8:  MOVLW  07
02DAA:  MOVLB  0
02DAC:  SUBWF  xF8,W
02DAE:  MOVLB  1
02DB0:  MOVWF  xBE
02DB2:  MOVLW  00
02DB4:  MOVLB  0
02DB6:  SUBWFB xF9,W
02DB8:  MOVLB  1
02DBA:  MOVWF  xBF
02DBC:  MOVF   xBE,W
02DBE:  SUBLW  05
02DC0:  BNZ   2DCE
02DC2:  MOVF   xBF,F
02DC4:  BNZ   2DCE
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
02DC6:  MOVLW  1F
02DC8:  MOVLB  0
02DCA:  ANDWF  xFC,F
....................                   }
02DCC:  BRA    2E62
....................                   else if((No_PointCount - 0x07) == 0x04)
02DCE:  MOVLW  07
02DD0:  MOVLB  0
02DD2:  SUBWF  xF8,W
02DD4:  MOVLB  1
02DD6:  MOVWF  xBE
02DD8:  MOVLW  00
02DDA:  MOVLB  0
02DDC:  SUBWFB xF9,W
02DDE:  MOVLB  1
02DE0:  MOVWF  xBF
02DE2:  MOVF   xBE,W
02DE4:  SUBLW  04
02DE6:  BNZ   2DF4
02DE8:  MOVF   xBF,F
02DEA:  BNZ   2DF4
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
02DEC:  MOVLW  0F
02DEE:  MOVLB  0
02DF0:  ANDWF  xFC,F
....................                   }
02DF2:  BRA    2E62
....................                   else if((No_PointCount - 0x07) == 0x03)
02DF4:  MOVLW  07
02DF6:  MOVLB  0
02DF8:  SUBWF  xF8,W
02DFA:  MOVLB  1
02DFC:  MOVWF  xBE
02DFE:  MOVLW  00
02E00:  MOVLB  0
02E02:  SUBWFB xF9,W
02E04:  MOVLB  1
02E06:  MOVWF  xBF
02E08:  MOVF   xBE,W
02E0A:  SUBLW  03
02E0C:  BNZ   2E1A
02E0E:  MOVF   xBF,F
02E10:  BNZ   2E1A
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
02E12:  MOVLW  07
02E14:  MOVLB  0
02E16:  ANDWF  xFC,F
....................                   }
02E18:  BRA    2E62
....................                   else if((No_PointCount - 0x07) == 0x02)
02E1A:  MOVLW  07
02E1C:  MOVLB  0
02E1E:  SUBWF  xF8,W
02E20:  MOVLB  1
02E22:  MOVWF  xBE
02E24:  MOVLW  00
02E26:  MOVLB  0
02E28:  SUBWFB xF9,W
02E2A:  MOVLB  1
02E2C:  MOVWF  xBF
02E2E:  MOVF   xBE,W
02E30:  SUBLW  02
02E32:  BNZ   2E40
02E34:  MOVF   xBF,F
02E36:  BNZ   2E40
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
02E38:  MOVLW  03
02E3A:  MOVLB  0
02E3C:  ANDWF  xFC,F
....................                   }
02E3E:  BRA    2E62
....................                   else if((No_PointCount - 0x07) == 0x01)
02E40:  MOVLW  07
02E42:  MOVLB  0
02E44:  SUBWF  xF8,W
02E46:  MOVLB  1
02E48:  MOVWF  xBE
02E4A:  MOVLW  00
02E4C:  MOVLB  0
02E4E:  SUBWFB xF9,W
02E50:  MOVLB  1
02E52:  MOVWF  xBF
02E54:  DECFSZ xBE,W
02E56:  BRA    2E64
02E58:  MOVF   xBF,F
02E5A:  BNZ   2E64
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
02E5C:  MOVLW  01
02E5E:  MOVLB  0
02E60:  ANDWF  xFC,F
02E62:  MOVLB  1
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02E64:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
02E68:  MOVLW  01
02E6A:  MOVLB  0
02E6C:  MOVWF  x7B
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
02E6E:  MOVFF  FA,7C
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02E72:  MOVFF  FB,7D
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02E76:  MOVFF  FC,7E
.................... 
....................                   CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
02E7A:  MOVLB  1
02E7C:  CLRF   xC0
02E7E:  MOVLW  7A
02E80:  MOVWF  xBF
02E82:  MOVLW  05
02E84:  MOVWF  xC1
02E86:  MOVLB  0
02E88:  CALL   2014
.................... 
....................                   TxD_Buff[5] = CRC_Hi ;
02E8C:  MOVFF  F3,7F
....................                   TxD_Buff[6] = CRC_Lo ;
02E90:  MOVFF  F2,80
.................... 
....................                   //TxD_DataLen = 0x07 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
02E94:  BSF    F8A.3
02E96:  BCF    F93.3
....................                   restart_wdt();
02E98:  CLRWDT
....................                   delay_ms(4);
02E9A:  MOVLW  04
02E9C:  MOVLB  1
02E9E:  MOVWF  xC6
02EA0:  MOVLB  0
02EA2:  CALL   05B2
....................                   restart_wdt();
02EA6:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02EA8:  MOVF   x7A,W
02EAA:  CALL   2064
....................                   putc(TxD_Buff[1]) ;               //Function Code
02EAE:  MOVF   x7B,W
02EB0:  CALL   2064
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02EB4:  MOVF   x7C,W
02EB6:  CALL   2064
....................                   putc(TxD_Buff[3]) ;
02EBA:  MOVF   x7D,W
02EBC:  CALL   2064
....................                   putc(TxD_Buff[4]) ;
02EC0:  MOVF   x7E,W
02EC2:  CALL   2064
....................                   putc(TxD_Buff[5]) ;
02EC6:  MOVF   x7F,W
02EC8:  CALL   2064
....................                   putc(TxD_Buff[6]) ;
02ECC:  MOVF   x80,W
02ECE:  CALL   2064
....................                   //putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
02ED2:  CLRWDT
....................                   delay_ms(3);
02ED4:  MOVLW  03
02ED6:  MOVLB  1
02ED8:  MOVWF  xC6
02EDA:  MOVLB  0
02EDC:  CALL   05B2
....................                   restart_wdt();
02EE0:  CLRWDT
....................                   output_bit(P485ctrl,0);
02EE2:  BCF    F8A.3
02EE4:  BCF    F93.3
....................               
....................                }
....................             }
02EE6:  BRA    2F54
....................             else
....................             {
....................                //invalid parameter
....................                TxD_Buff[0] = Address ;         //Address
02EE8:  MOVFF  78,7A
....................                TxD_Buff[1] = 0x81 ;         //Function Code
02EEC:  MOVLW  81
02EEE:  MOVWF  x7B
....................                TxD_Buff[2] = 0x02 ;         //illegal data address
02EF0:  MOVLW  02
02EF2:  MOVWF  x7C
.................... 
....................                CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
02EF4:  MOVLB  1
02EF6:  CLRF   xC0
02EF8:  MOVLW  7A
02EFA:  MOVWF  xBF
02EFC:  MOVLW  03
02EFE:  MOVWF  xC1
02F00:  MOVLB  0
02F02:  CALL   2014
.................... 
....................                TxD_Buff[3] = CRC_Hi ;
02F06:  MOVFF  F3,7D
....................                TxD_Buff[4] = CRC_Lo ;
02F0A:  MOVFF  F2,7E
.................... 
....................                //TxD_DataLen = 0x05 ;
....................                //rs485_ctrl = 1;
....................                //restart_wdt();
....................                //dmsec(4);
....................                //restart_wdt();
....................                //send = 1;
....................                //TI=1;
....................                output_bit(P485ctrl,1);
02F0E:  BSF    F8A.3
02F10:  BCF    F93.3
....................                restart_wdt();
02F12:  CLRWDT
....................                delay_ms(4);
02F14:  MOVLW  04
02F16:  MOVLB  1
02F18:  MOVWF  xC6
02F1A:  MOVLB  0
02F1C:  CALL   05B2
....................                restart_wdt();
02F20:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
02F22:  MOVF   x7A,W
02F24:  CALL   2064
....................                putc(TxD_Buff[1]) ;               //Function Code
02F28:  MOVF   x7B,W
02F2A:  CALL   2064
....................                putc(TxD_Buff[2]) ;               //Byte Count
02F2E:  MOVF   x7C,W
02F30:  CALL   2064
....................                putc(TxD_Buff[3]) ;
02F34:  MOVF   x7D,W
02F36:  CALL   2064
....................                putc(TxD_Buff[4]) ;
02F3A:  MOVF   x7E,W
02F3C:  CALL   2064
....................               //putc(TxD_Buff[5]) ;
....................                //putc(TxD_Buff[6]) ;
....................                //putc(TxD_Buff[7]) ;
....................                //putc(TxD_Buff[8]) ;
....................                //putc(TxD_Buff[9]) ;
.................... 
....................                restart_wdt();
02F40:  CLRWDT
....................                delay_ms(3);
02F42:  MOVLW  03
02F44:  MOVLB  1
02F46:  MOVWF  xC6
02F48:  MOVLB  0
02F4A:  CALL   05B2
....................                restart_wdt();
02F4E:  CLRWDT
....................                output_bit(P485ctrl,0);
02F50:  BCF    F8A.3
02F52:  BCF    F93.3
....................                
....................             }
....................          }
....................          
....................  /*           //Read 03
....................       if(RxD_Buff[1] == 0x03)///////////// READ COIL /////////////////////
....................       {
....................             //Do Read Coil
....................             Start_Address = RxD_Buff[2] ;
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
....................             No_PointCount = RxD_Buff[4] ;
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //No. of Point 16 bit
.................... 
....................            if(Start_Address < 0x01 && (Start_Address + No_PointCount) < 0x02)  //Valid point 0
....................             {
....................                if(No_PointCount < 2) Data_ByteCount = 0x02 ;
....................                //else if(No_PointCount < 3) Data_ByteCount = 0x02 ;
....................                //else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
....................                
....................                //if(Data_ByteCount == 0x01)
....................                //{
....................                   Data_Buff[0] = Input1_8 >> Start_Address ;
....................                   Data_Buff[1] = Input9_16 ;// >> Start_Address ;
....................                   
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
....................                   TxD_Buff[1] = 0x03 ;         //Function Code
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
....................                   TxD_Buff[3] = Data_Buff[1] ;      //first byte Data
....................                   TxD_Buff[4] = Data_Buff[0] ;      //second byte Data
.................... 
....................                   CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
.................... 
....................                   TxD_Buff[5] = CRC_Hi ;
....................                   TxD_Buff[6] = CRC_Lo ;
.................... 
....................                   //TxD_DataLen = 0x07 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
....................                   restart_wdt();
....................                   delay_ms(4);
....................                   restart_wdt();
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
....................                   putc(TxD_Buff[1]) ;               //Function Code
....................                   putc(TxD_Buff[2]) ;               //Byte Count
....................                   putc(TxD_Buff[3]) ;
....................                   putc(TxD_Buff[4]) ;
....................                   putc(TxD_Buff[5]) ;
....................                   putc(TxD_Buff[6]) ;
....................                   //putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
....................                   delay_ms(3);
....................                   restart_wdt();
....................                   output_bit(P485ctrl,0);
....................               
....................             }
....................             else
....................             {
....................                //invalid parameter
....................                TxD_Buff[0] = Address ;         //Address
....................                TxD_Buff[1] = 0x81 ;         //Function Code
....................                TxD_Buff[2] = 0x02 ;         //illegal data address
.................... 
....................                CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
.................... 
....................                TxD_Buff[3] = CRC_Hi ;
....................                TxD_Buff[4] = CRC_Lo ;
.................... 
....................                //TxD_DataLen = 0x05 ;
....................                //rs485_ctrl = 1;
....................                //restart_wdt();
....................                //dmsec(4);
....................                //restart_wdt();
....................                //send = 1;
....................                //TI=1;
....................                output_bit(P485ctrl,1);
....................                restart_wdt();
....................                delay_ms(4);
....................                restart_wdt();
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
....................                putc(TxD_Buff[1]) ;               //Function Code
....................                putc(TxD_Buff[2]) ;               //Byte Count
....................                putc(TxD_Buff[3]) ;
....................                putc(TxD_Buff[4]) ;
....................               //putc(TxD_Buff[5]) ;
....................                //putc(TxD_Buff[6]) ;
....................                //putc(TxD_Buff[7]) ;
....................                //putc(TxD_Buff[8]) ;
....................                //putc(TxD_Buff[9]) ;
.................... 
....................                restart_wdt();
....................                delay_ms(3);
....................                restart_wdt();
....................                output_bit(P485ctrl,0);
....................                
....................             }
....................          }
....................          
.................... */
....................    
....................                   /*-------------jack----*/
....................  
....................       if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
02F54:  MOVF   xB7,W
02F56:  SUBLW  07
02F58:  BTFSS  FD8.2
02F5A:  BRA    30B8
....................       {
....................          alarmtosend();
02F5C:  GOTO   206C
....................          
....................          disable_interrupts(INT_TIMER2);
02F60:  BCF    F9D.1
....................          //----------------------------------jj----------------------------//
....................          
....................             Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
02F62:  MOVFF  1E,FB
....................             Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
02F66:  MOVFF  1F,FC
....................             Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
02F6A:  MOVFF  20,FD
....................             Data_Buff[3] = Input25_32_Send ;
02F6E:  MOVFF  21,FE
....................             Data_Buff[4] = Input33_40_Send ;
02F72:  MOVFF  22,FF
....................             Data_Buff[5] = Input41_48_Send ;
02F76:  MOVFF  23,100
....................             Data_Buff[6] = Input49_56_Send ;
02F7A:  MOVFF  24,101
....................             Data_Buff[7] = Input57_64_Send ;
02F7E:  MOVFF  25,102
....................            
....................             Data_Buff[8] = Ack1_8_Send ;
02F82:  MOVFF  26,103
....................             Data_Buff[9] = Ack9_16_Send ;
02F86:  MOVFF  27,104
....................             Data_Buff[10] = Ack17_24_Send ;
02F8A:  MOVFF  28,105
....................             Data_Buff[11] = Ack25_32_Send ;
02F8E:  MOVFF  29,106
....................             Data_Buff[12] = Ack33_40_Send ;
02F92:  MOVFF  2A,107
....................             Data_Buff[13] = Ack41_48_Send ;
02F96:  MOVFF  2B,108
....................             Data_Buff[14] = Ack49_56_Send ;
02F9A:  MOVFF  2C,109
....................             Data_Buff[15] = Ack57_64_Send ;
02F9E:  MOVFF  2D,10A
....................    
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
02FA2:  MOVFF  78,7A
....................             TxD_Buff[1] = 0x07 ;         //Function Code
02FA6:  MOVLW  07
02FA8:  MOVWF  x7B
....................             TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
02FAA:  MOVLW  10
02FAC:  MOVWF  xFA
02FAE:  MOVFF  FA,7C
....................             TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02FB2:  MOVFF  FB,7D
....................             TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02FB6:  MOVFF  FC,7E
....................             TxD_Buff[5] = Data_Buff[2] ;  
02FBA:  MOVFF  FD,7F
....................             TxD_Buff[6] = Data_Buff[3] ;
02FBE:  MOVFF  FE,80
....................             TxD_Buff[7] = Data_Buff[4] ;
02FC2:  MOVFF  FF,81
....................             TxD_Buff[8] = Data_Buff[5] ;
02FC6:  MOVFF  100,82
....................             TxD_Buff[9] = Data_Buff[6] ;
02FCA:  MOVFF  101,83
....................             TxD_Buff[10] = Data_Buff[7] ;
02FCE:  MOVFF  102,84
....................               
....................            TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
02FD2:  MOVFF  103,85
....................            TxD_Buff[12] = Data_Buff[9] ;
02FD6:  MOVFF  104,86
....................            TxD_Buff[13] = Data_Buff[10] ;
02FDA:  MOVFF  105,87
....................            TxD_Buff[14] = Data_Buff[11] ;
02FDE:  MOVFF  106,88
....................            TxD_Buff[15] = Data_Buff[12] ;
02FE2:  MOVFF  107,89
....................            TxD_Buff[16] = Data_Buff[13] ;
02FE6:  MOVFF  108,8A
....................            TxD_Buff[17] = Data_Buff[14] ;
02FEA:  MOVFF  109,8B
....................            TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
02FEE:  MOVFF  10A,8C
.................... 
....................            CRC(TxD_Buff,19);            //Cal CRC 5 Byte
02FF2:  MOVLB  1
02FF4:  CLRF   xC0
02FF6:  MOVLW  7A
02FF8:  MOVWF  xBF
02FFA:  MOVLW  13
02FFC:  MOVWF  xC1
02FFE:  MOVLB  0
03000:  CALL   2014
.................... 
....................           TxD_Buff[19] = CRC_Hi ;
03004:  MOVFF  F3,8D
....................           TxD_Buff[20] = CRC_Lo ;
03008:  MOVFF  F2,8E
.................... 
....................         
....................          output_bit(P485ctrl,1);
0300C:  BSF    F8A.3
0300E:  BCF    F93.3
....................          restart_wdt();
03010:  CLRWDT
....................          delay_ms(4);
03012:  MOVLW  04
03014:  MOVLB  1
03016:  MOVWF  xC6
03018:  MOVLB  0
0301A:  CALL   05B2
....................          restart_wdt();
0301E:  CLRWDT
....................          
....................          
....................          
....................          putc(TxD_Buff[0]) ;               //Address
03020:  MOVF   x7A,W
03022:  CALL   2064
....................          putc(TxD_Buff[1]) ;               //Function Code
03026:  MOVF   x7B,W
03028:  CALL   2064
....................          putc(TxD_Buff[2]) ;               //Byte Count
0302C:  MOVF   x7C,W
0302E:  CALL   2064
....................          putc(TxD_Buff[3]) ;
03032:  MOVF   x7D,W
03034:  CALL   2064
....................          putc(TxD_Buff[4]) ;
03038:  MOVF   x7E,W
0303A:  CALL   2064
....................          putc(TxD_Buff[5]) ;
0303E:  MOVF   x7F,W
03040:  CALL   2064
....................          putc(TxD_Buff[6]) ;
03044:  MOVF   x80,W
03046:  CALL   2064
....................          putc(TxD_Buff[7]) ;
0304A:  MOVF   x81,W
0304C:  CALL   2064
....................          putc(TxD_Buff[8]) ;
03050:  MOVF   x82,W
03052:  CALL   2064
....................          putc(TxD_Buff[9]) ;
03056:  MOVF   x83,W
03058:  CALL   2064
....................          putc(TxD_Buff[10]) ;
0305C:  MOVF   x84,W
0305E:  CALL   2064
....................          putc(TxD_Buff[11]) ;
03062:  MOVF   x85,W
03064:  CALL   2064
....................          putc(TxD_Buff[12]) ;
03068:  MOVF   x86,W
0306A:  CALL   2064
....................          putc(TxD_Buff[13]) ;
0306E:  MOVF   x87,W
03070:  CALL   2064
....................          putc(TxD_Buff[14]) ;
03074:  MOVF   x88,W
03076:  CALL   2064
....................          putc(TxD_Buff[15]) ;
0307A:  MOVF   x89,W
0307C:  CALL   2064
....................          putc(TxD_Buff[16]) ;
03080:  MOVF   x8A,W
03082:  CALL   2064
....................          putc(TxD_Buff[17]) ;
03086:  MOVF   x8B,W
03088:  CALL   2064
....................          putc(TxD_Buff[18]) ;
0308C:  MOVF   x8C,W
0308E:  CALL   2064
....................          putc(TxD_Buff[19]) ;
03092:  MOVF   x8D,W
03094:  CALL   2064
....................          putc(TxD_Buff[20]) ;
03098:  MOVF   x8E,W
0309A:  CALL   2064
.................... 
....................          restart_wdt();
0309E:  CLRWDT
....................          delay_ms(3);
030A0:  MOVLW  03
030A2:  MOVLB  1
030A4:  MOVWF  xC6
030A6:  MOVLB  0
030A8:  CALL   05B2
....................          restart_wdt();
030AC:  CLRWDT
....................          output_bit(P485ctrl,0);
030AE:  BCF    F8A.3
030B0:  BCF    F93.3
....................            
....................         
....................          /////////////////////////////////////////
....................          
....................         enable_interrupts(INT_TIMER2); 
030B2:  BSF    F9D.1
....................      
....................        }
030B4:  GOTO   3E26
....................       /////////////////////////////////////////////////////////////////
.................... 
....................          /*-------------jack----
....................          //else if(RxD_Buff[1] == 0x02)/////////// READ INPUT /////////////////////
....................          if(RxD_Buff[1] == 0x02)///////////// READ INPUT /////////////////////
....................          {
....................             //Do Read Input
....................             Start_Address = RxD_Buff[2] ;
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
....................             No_PointCount = RxD_Buff[4] ;
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;      //No. of Point 16 bit
.................... 
....................             //if(Start_Address < 0x10 && (Start_Address + No_PointCount) < 0x11)  //Valid point 0-15
....................             if(Start_Address == 0x00 && No_PointCount == 0x28)  //Valid point 0-40
....................             {
....................             
....................                //\* //----JACK Comment --------//
....................                if(No_PointCount < 9) Data_ByteCount = 0x01 ;
....................                else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
....................                else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
.................... 
....................                if(Data_ByteCount == 0x01)
....................                {
....................                   if(Start_Address < 0x09)
....................                   {
....................                      Data_Buff[0] = Input1_8 >> Start_Address ;
....................                      DataTemp = Input9_16 << (0x08 - Start_Address) ;
....................                      Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte
....................                   }
....................                   else if(Start_Address > 0x08 && Start_Address < 0x10)
....................                   {
....................                      Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
....................                   }
.................... 
.................... 
....................                   if(No_PointCount == 0x08)
....................                   {
....................                      Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                   }
....................                   else if(No_PointCount == 0x07)
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
....................                   }
....................                   else if(No_PointCount == 0x06)
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
....................                   }
....................                   else if(No_PointCount == 0x05)
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
....................                   }
....................                   else if(No_PointCount == 0x04)
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
....................                   }
....................                   else if(No_PointCount == 0x03)
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
....................                   }
....................                   else if(No_PointCount == 0x02)
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
....................                   }
....................                   else if(No_PointCount == 0x01)
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
....................                   TxD_Buff[1] = 0x02 ;         //Function Code
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
....................                   TxD_Buff[3] = Data_Buff[0] ;   //Data
.................... 
....................                   CRC(TxD_Buff,4)   ;            //Cal CRC 4 Byte
.................... 
....................                   TxD_Buff[4] = CRC_Hi ;
....................                   TxD_Buff[5] = CRC_Lo ;
.................... 
....................                   TxD_DataLen = 0x06 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................         //*\///----JACK Comment --------//
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
....................                   TxD_Buff[1] = 0x02 ;         //Function Code
....................                   TxD_Buff[2] = 0x05 ;   //Byte Count
....................                   TxD_Buff[3] = Input1_8 ;   //Data
....................                   TxD_Buff[4] = Input9_16 ;   //Data
....................                   TxD_Buff[5] = Input17_24 ;   //Data
....................                   TxD_Buff[6] = Input25_32 ;   //Data
....................                   TxD_Buff[7] = Input33_40 ;   //Data
.................... 
....................                   CRC(TxD_Buff,8);            //Cal CRC 4 Byte
.................... 
....................                   TxD_Buff[8] = CRC_Hi ;
....................                   TxD_Buff[9] = CRC_Lo ;
.................... 
....................                   output_bit(P485ctrl,1);
....................                   restart_wdt();
....................                   delay_ms(4);
....................                   restart_wdt();
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
....................                   putc(TxD_Buff[1]) ;               //Function Code
....................                   putc(TxD_Buff[2]) ;               //Byte Count
....................                   putc(TxD_Buff[3]) ;
....................                   putc(TxD_Buff[4]) ;
....................                   putc(TxD_Buff[5]) ;
....................                   putc(TxD_Buff[6]) ;
....................                   putc(TxD_Buff[7]) ;
....................                   putc(TxD_Buff[8]) ;
....................                   putc(TxD_Buff[9]) ;
.................... 
....................                   delay_ms(3);
....................                   output_bit(P485ctrl,0);
.................... 
....................                /*}
....................                else if(Data_ByteCount == 0x02)
....................                {
....................                   Data_Buff[1] = ~input[1] >> Start_Address ;
....................                   DataTemp = ~input[1] << (0x08 - Start_Address) ;
....................                   Data_Buff[0] = (~input[0] >> Start_Address) | DataTemp;   //Low Byte
.................... 
....................                   if((No_PointCount - 0x08) == 0x08)
....................                   {
....................                      Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                   }
....................                   else if((No_PointCount - 0x08) == 0x07)
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
....................                   }
....................                   else if((No_PointCount - 0x08) == 0x06)
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
....................                   }
....................                   else if((No_PointCount - 0x08) == 0x05)
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
....................                   }
....................                   else if((No_PointCount - 0x08) == 0x04)
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
....................                   }
....................                   else if((No_PointCount - 0x08) == 0x03)
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
....................                   }
....................                   else if((No_PointCount - 0x08) == 0x02)
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
....................                   }
....................                   else if((No_PointCount - 0x08) == 0x01)
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
....................                   TxD_Buff[1] = 0x02 ;         //Function Code
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
.................... 
....................                   CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
.................... 
....................                   TxD_Buff[5] = CRC_Hi ;
....................                   TxD_Buff[6] = CRC_Lo ;
.................... 
....................                   TxD_DataLen = 0x07 ;
....................                   rs485_ctrl = 1;
....................                   dmsec(4);
....................                   send = 1;
....................                   TI=1;
....................                }//
....................             }
....................             else
....................             {
....................                //Invalid function
....................                TxD_Buff[0] = Address ;         //Address
....................                TxD_Buff[1] = 0x81 ;         //Function Code
....................                TxD_Buff[2] = 0x01 ;         //illegal function
.................... 
....................                CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
.................... 
....................                TxD_Buff[3] = CRC_Hi ;
....................                TxD_Buff[4] = CRC_Lo ;
.................... 
....................                output_bit(P485ctrl,1);
....................                delay_ms(10);
.................... 
....................                putc(Txd_Buff[0]);
....................                putc(Txd_Buff[1]);
....................                putc(Txd_Buff[2]);
....................                putc(Txd_Buff[3]);
....................                putc(Txd_Buff[4]);
.................... 
....................                delay_ms(3);
....................                output_bit(P485ctrl,0);
....................             }
.................... 
....................          }
....................       }
....................       
....................       */
....................        else if(RxD_Buff[1] == 0x05)///////////// FORCE COIL /////////////////////
030B8:  MOVF   xB7,W
030BA:  SUBLW  05
030BC:  BTFSS  FD8.2
030BE:  BRA    358A
....................        {
....................             //Do Force Coil
....................             Start_Address = RxD_Buff[2] ;
030C0:  CLRF   xF7
030C2:  MOVFF  B8,F6
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Coil Address 16 bit
030C6:  MOVFF  F6,F7
030CA:  MOVLB  1
030CC:  CLRF   xBE
030CE:  MOVF   xBE,W
030D0:  MOVLB  0
030D2:  IORWF  xB9,W
030D4:  MOVWF  xF6
030D6:  MOVLB  0
....................             No_PointCount = RxD_Buff[4] ;
030D8:  CLRF   xF9
030DA:  MOVFF  BA,F8
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //Force Data 16 bit FF00 = ON, 00FF = OFF
030DE:  MOVFF  F8,F9
030E2:  MOVLB  1
030E4:  CLRF   xBE
030E6:  MOVF   xBE,W
030E8:  MOVLB  0
030EA:  IORWF  xBB,W
030EC:  MOVWF  xF8
030EE:  MOVLB  0
.................... 
....................             if(Start_Address == 0x00)   ////// Acknowlegde //////
030F0:  MOVF   xF6,F
030F2:  BNZ   318E
030F4:  MOVF   xF7,F
030F6:  BNZ   318E
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
030F8:  MOVF   xF8,F
030FA:  BNZ   318C
030FC:  INCFSZ xF9,W
030FE:  BRA    318C
....................                {
....................                   //Modbus_ACK = 1 ;
....................                   AutoAckFlag = 1;
03100:  BSF    1A.2
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
03102:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
03106:  MOVLW  05
03108:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0310A:  MOVFF  B8,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
0310E:  MOVFF  B9,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03112:  MOVFF  BA,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03116:  MOVFF  BB,7F
.................... 
....................                   CRC(TxD_Buff,6);            //Cal CRC 6 Byte
0311A:  MOVLB  1
0311C:  CLRF   xC0
0311E:  MOVLW  7A
03120:  MOVWF  xBF
03122:  MOVLW  06
03124:  MOVWF  xC1
03126:  MOVLB  0
03128:  CALL   2014
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
0312C:  MOVFF  F3,80
....................                   TxD_Buff[7] = CRC_Lo ;
03130:  MOVFF  F2,81
.................... 
....................                   //TxD_DataLen = 0x08 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................               output_bit(P485ctrl,1);
03134:  BSF    F8A.3
03136:  BCF    F93.3
....................                   restart_wdt();
03138:  CLRWDT
....................                   delay_ms(4);
0313A:  MOVLW  04
0313C:  MOVLB  1
0313E:  MOVWF  xC6
03140:  MOVLB  0
03142:  CALL   05B2
....................                   restart_wdt();
03146:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
03148:  MOVF   x7A,W
0314A:  CALL   2064
....................                   putc(TxD_Buff[1]) ;               //Function Code
0314E:  MOVF   x7B,W
03150:  CALL   2064
....................                   putc(TxD_Buff[2]) ;               //Byte Count
03154:  MOVF   x7C,W
03156:  CALL   2064
....................                   putc(TxD_Buff[3]) ;
0315A:  MOVF   x7D,W
0315C:  CALL   2064
....................                   putc(TxD_Buff[4]) ;
03160:  MOVF   x7E,W
03162:  CALL   2064
....................                   putc(TxD_Buff[5]) ;
03166:  MOVF   x7F,W
03168:  CALL   2064
....................                   putc(TxD_Buff[6]) ;
0316C:  MOVF   x80,W
0316E:  CALL   2064
....................                   putc(TxD_Buff[7]) ;
03172:  MOVF   x81,W
03174:  CALL   2064
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
03178:  CLRWDT
....................                   delay_ms(3);
0317A:  MOVLW  03
0317C:  MOVLB  1
0317E:  MOVWF  xC6
03180:  MOVLB  0
03182:  CALL   05B2
....................                   restart_wdt();
03186:  CLRWDT
....................                   output_bit(P485ctrl,0);
03188:  BCF    F8A.3
0318A:  BCF    F93.3
....................               
....................                }
....................             }
0318C:  BRA    3586
....................             else if(Start_Address == 0x01)   ///// Reset //////
0318E:  DECFSZ xF6,W
03190:  BRA    322C
03192:  MOVF   xF7,F
03194:  BNZ   322C
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
03196:  MOVF   xF8,F
03198:  BNZ   322A
0319A:  INCFSZ xF9,W
0319C:  BRA    322A
....................                {
....................                   //Modbus_RET = 1 ;
....................                   AutoResetFlag = 1;
0319E:  BSF    1A.3
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
031A0:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
031A4:  MOVLW  05
031A6:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
031A8:  MOVFF  B8,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
031AC:  MOVFF  B9,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
031B0:  MOVFF  BA,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
031B4:  MOVFF  BB,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
031B8:  MOVLB  1
031BA:  CLRF   xC0
031BC:  MOVLW  7A
031BE:  MOVWF  xBF
031C0:  MOVLW  06
031C2:  MOVWF  xC1
031C4:  MOVLB  0
031C6:  CALL   2014
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
031CA:  MOVFF  F3,80
....................                   TxD_Buff[7] = CRC_Lo ;
031CE:  MOVFF  F2,81
.................... 
....................                   //TxD_DataLen = 0x08 ;
....................                   //rs485_ctrl = 1;
....................                  //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
031D2:  BSF    F8A.3
031D4:  BCF    F93.3
....................                   restart_wdt();
031D6:  CLRWDT
....................                   delay_ms(4);
031D8:  MOVLW  04
031DA:  MOVLB  1
031DC:  MOVWF  xC6
031DE:  MOVLB  0
031E0:  CALL   05B2
....................                   restart_wdt();
031E4:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
031E6:  MOVF   x7A,W
031E8:  CALL   2064
....................                   putc(TxD_Buff[1]) ;               //Function Code
031EC:  MOVF   x7B,W
031EE:  CALL   2064
....................                   putc(TxD_Buff[2]) ;               //Byte Count
031F2:  MOVF   x7C,W
031F4:  CALL   2064
....................                   putc(TxD_Buff[3]) ;
031F8:  MOVF   x7D,W
031FA:  CALL   2064
....................                   putc(TxD_Buff[4]) ;
031FE:  MOVF   x7E,W
03200:  CALL   2064
....................                   putc(TxD_Buff[5]) ;
03204:  MOVF   x7F,W
03206:  CALL   2064
....................                   putc(TxD_Buff[6]) ;
0320A:  MOVF   x80,W
0320C:  CALL   2064
....................                   putc(TxD_Buff[7]) ;
03210:  MOVF   x81,W
03212:  CALL   2064
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
03216:  CLRWDT
....................                   delay_ms(3);
03218:  MOVLW  03
0321A:  MOVLB  1
0321C:  MOVWF  xC6
0321E:  MOVLB  0
03220:  CALL   05B2
....................                   restart_wdt();
03224:  CLRWDT
....................                   output_bit(P485ctrl,0);
03226:  BCF    F8A.3
03228:  BCF    F93.3
....................               
....................                }
....................             }
0322A:  BRA    3586
....................             else if(Start_Address == 0x02)   ///// Test //////
0322C:  MOVF   xF6,W
0322E:  SUBLW  02
03230:  BTFSS  FD8.2
03232:  BRA    3376
03234:  MOVF   xF7,F
03236:  BTFSS  FD8.2
03238:  BRA    3376
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
0323A:  MOVF   xF8,F
0323C:  BNZ   32D0
0323E:  INCFSZ xF9,W
03240:  BRA    32D0
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   AutoTestFlag = 1;
03242:  BSF    1A.4
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
03244:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
03248:  MOVLW  05
0324A:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0324C:  MOVFF  B8,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
03250:  MOVFF  B9,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03254:  MOVFF  BA,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03258:  MOVFF  BB,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
0325C:  MOVLB  1
0325E:  CLRF   xC0
03260:  MOVLW  7A
03262:  MOVWF  xBF
03264:  MOVLW  06
03266:  MOVWF  xC1
03268:  MOVLB  0
0326A:  CALL   2014
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
0326E:  MOVFF  F3,80
....................                   TxD_Buff[7] = CRC_Lo ;
03272:  MOVFF  F2,81
.................... 
....................                  //TxD_DataLen = 0x08 ;
....................                  //rs485_ctrl = 1;
....................                  //dmsec(4);
....................                  //send = 1;
....................                  //TI=1;
....................                   output_bit(P485ctrl,1);
03276:  BSF    F8A.3
03278:  BCF    F93.3
....................                   restart_wdt();
0327A:  CLRWDT
....................                   delay_ms(4);
0327C:  MOVLW  04
0327E:  MOVLB  1
03280:  MOVWF  xC6
03282:  MOVLB  0
03284:  CALL   05B2
....................                   restart_wdt();
03288:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
0328A:  MOVF   x7A,W
0328C:  CALL   2064
....................                   putc(TxD_Buff[1]) ;               //Function Code
03290:  MOVF   x7B,W
03292:  CALL   2064
....................                   putc(TxD_Buff[2]) ;               //Byte Count
03296:  MOVF   x7C,W
03298:  CALL   2064
....................                   putc(TxD_Buff[3]) ;
0329C:  MOVF   x7D,W
0329E:  CALL   2064
....................                   putc(TxD_Buff[4]) ;
032A2:  MOVF   x7E,W
032A4:  CALL   2064
....................                   putc(TxD_Buff[5]) ;
032A8:  MOVF   x7F,W
032AA:  CALL   2064
....................                   putc(TxD_Buff[6]) ;
032AE:  MOVF   x80,W
032B0:  CALL   2064
....................                   putc(TxD_Buff[7]) ;
032B4:  MOVF   x81,W
032B6:  CALL   2064
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
032BA:  CLRWDT
....................                   delay_ms(3);
032BC:  MOVLW  03
032BE:  MOVLB  1
032C0:  MOVWF  xC6
032C2:  MOVLB  0
032C4:  CALL   05B2
....................                   restart_wdt();
032C8:  CLRWDT
....................                   output_bit(P485ctrl,0);
032CA:  BCF    F8A.3
032CC:  BCF    F93.3
....................              
....................                }
032CE:  BRA    3374
....................                else if(No_PointCount == 0x00)   //OFF
032D0:  MOVF   xF8,F
032D2:  BNZ   3374
032D4:  MOVF   xF9,F
032D6:  BNZ   3374
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   AutoTestFlag = 0;
032D8:  BCF    1A.4
....................                   Read_input();
032DA:  CALL   1332
....................                   AutoAckFlag = 1;
032DE:  BSF    1A.2
....................                   check_ack();
032E0:  CALL   233C
....................                   AutoResetFlag = 1;
032E4:  BSF    1A.3
....................                   check_reset();
032E6:  CALL   248A
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
032EA:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
032EE:  MOVLW  05
032F0:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
032F2:  MOVFF  B8,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
032F6:  MOVFF  B9,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
032FA:  MOVFF  BA,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
032FE:  MOVFF  BB,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
03302:  MOVLB  1
03304:  CLRF   xC0
03306:  MOVLW  7A
03308:  MOVWF  xBF
0330A:  MOVLW  06
0330C:  MOVWF  xC1
0330E:  MOVLB  0
03310:  CALL   2014
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
03314:  MOVFF  F3,80
....................                   TxD_Buff[7] = CRC_Lo ;
03318:  MOVFF  F2,81
.................... 
....................                   //TxD_DataLen = 0x08 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
0331C:  BSF    F8A.3
0331E:  BCF    F93.3
....................                   restart_wdt();
03320:  CLRWDT
....................                   delay_ms(4);
03322:  MOVLW  04
03324:  MOVLB  1
03326:  MOVWF  xC6
03328:  MOVLB  0
0332A:  CALL   05B2
....................                   restart_wdt();
0332E:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
03330:  MOVF   x7A,W
03332:  CALL   2064
....................                   putc(TxD_Buff[1]) ;               //Function Code
03336:  MOVF   x7B,W
03338:  CALL   2064
....................                   putc(TxD_Buff[2]) ;               //Byte Count
0333C:  MOVF   x7C,W
0333E:  CALL   2064
....................                   putc(TxD_Buff[3]) ;
03342:  MOVF   x7D,W
03344:  CALL   2064
....................                   putc(TxD_Buff[4]) ;
03348:  MOVF   x7E,W
0334A:  CALL   2064
....................                   putc(TxD_Buff[5]) ;
0334E:  MOVF   x7F,W
03350:  CALL   2064
....................                   putc(TxD_Buff[6]) ;
03354:  MOVF   x80,W
03356:  CALL   2064
....................                   putc(TxD_Buff[7]) ;
0335A:  MOVF   x81,W
0335C:  CALL   2064
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
03360:  CLRWDT
....................                   delay_ms(3);
03362:  MOVLW  03
03364:  MOVLB  1
03366:  MOVWF  xC6
03368:  MOVLB  0
0336A:  CALL   05B2
....................                   restart_wdt();
0336E:  CLRWDT
....................                   output_bit(P485ctrl,0);
03370:  BCF    F8A.3
03372:  BCF    F93.3
....................                   
....................                }
....................             }
03374:  BRA    3586
....................             else if(Start_Address == 0x03)   ///// Function Test //////
03376:  MOVF   xF6,W
03378:  SUBLW  03
0337A:  BTFSS  FD8.2
0337C:  BRA    34C0
0337E:  MOVF   xF7,F
03380:  BTFSS  FD8.2
03382:  BRA    34C0
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
03384:  MOVF   xF8,F
03386:  BNZ   341A
03388:  INCFSZ xF9,W
0338A:  BRA    341A
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   Test_fault = 1 ;
0338C:  BSF    1A.5
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
0338E:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
03392:  MOVLW  05
03394:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
03396:  MOVFF  B8,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
0339A:  MOVFF  B9,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
0339E:  MOVFF  BA,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
033A2:  MOVFF  BB,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
033A6:  MOVLB  1
033A8:  CLRF   xC0
033AA:  MOVLW  7A
033AC:  MOVWF  xBF
033AE:  MOVLW  06
033B0:  MOVWF  xC1
033B2:  MOVLB  0
033B4:  CALL   2014
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
033B8:  MOVFF  F3,80
....................                   TxD_Buff[7] = CRC_Lo ;
033BC:  MOVFF  F2,81
.................... 
....................                   output_bit(P485ctrl,1);
033C0:  BSF    F8A.3
033C2:  BCF    F93.3
....................                   restart_wdt();
033C4:  CLRWDT
....................                   delay_ms(4);
033C6:  MOVLW  04
033C8:  MOVLB  1
033CA:  MOVWF  xC6
033CC:  MOVLB  0
033CE:  CALL   05B2
....................                   restart_wdt();
033D2:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
033D4:  MOVF   x7A,W
033D6:  CALL   2064
....................                   putc(TxD_Buff[1]) ;               //Function Code
033DA:  MOVF   x7B,W
033DC:  CALL   2064
....................                   putc(TxD_Buff[2]) ;               //Byte Count
033E0:  MOVF   x7C,W
033E2:  CALL   2064
....................                   putc(TxD_Buff[3]) ;
033E6:  MOVF   x7D,W
033E8:  CALL   2064
....................                   putc(TxD_Buff[4]) ;
033EC:  MOVF   x7E,W
033EE:  CALL   2064
....................                   putc(TxD_Buff[5]) ;
033F2:  MOVF   x7F,W
033F4:  CALL   2064
....................                   putc(TxD_Buff[6]) ;
033F8:  MOVF   x80,W
033FA:  CALL   2064
....................                   putc(TxD_Buff[7]) ;
033FE:  MOVF   x81,W
03400:  CALL   2064
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
03404:  CLRWDT
....................                   delay_ms(10);
03406:  MOVLW  0A
03408:  MOVLB  1
0340A:  MOVWF  xC6
0340C:  MOVLB  0
0340E:  CALL   05B2
....................                   restart_wdt();
03412:  CLRWDT
....................                   output_bit(P485ctrl,0);
03414:  BCF    F8A.3
03416:  BCF    F93.3
....................                }
03418:  BRA    34BE
....................                else if(No_PointCount == 0x00)   //OFF
0341A:  MOVF   xF8,F
0341C:  BNZ   34BE
0341E:  MOVF   xF9,F
03420:  BNZ   34BE
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   Test_fault = 0;
03422:  BCF    1A.5
....................                   Read_input();
03424:  CALL   1332
....................                   AutoAckFlag = 1;
03428:  BSF    1A.2
....................                   check_ack();
0342A:  CALL   233C
....................                   AutoResetFlag = 1;
0342E:  BSF    1A.3
....................                   check_reset();
03430:  CALL   248A
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
03434:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
03438:  MOVLW  05
0343A:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0343C:  MOVFF  B8,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
03440:  MOVFF  B9,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03444:  MOVFF  BA,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03448:  MOVFF  BB,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
0344C:  MOVLB  1
0344E:  CLRF   xC0
03450:  MOVLW  7A
03452:  MOVWF  xBF
03454:  MOVLW  06
03456:  MOVWF  xC1
03458:  MOVLB  0
0345A:  CALL   2014
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
0345E:  MOVFF  F3,80
....................                   TxD_Buff[7] = CRC_Lo ;
03462:  MOVFF  F2,81
.................... 
....................                   //TxD_DataLen = 0x08 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
03466:  BSF    F8A.3
03468:  BCF    F93.3
....................                   restart_wdt();
0346A:  CLRWDT
....................                   delay_ms(4);
0346C:  MOVLW  04
0346E:  MOVLB  1
03470:  MOVWF  xC6
03472:  MOVLB  0
03474:  CALL   05B2
....................                   restart_wdt();
03478:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
0347A:  MOVF   x7A,W
0347C:  CALL   2064
....................                   putc(TxD_Buff[1]) ;               //Function Code
03480:  MOVF   x7B,W
03482:  CALL   2064
....................                   putc(TxD_Buff[2]) ;               //Byte Count
03486:  MOVF   x7C,W
03488:  CALL   2064
....................                   putc(TxD_Buff[3]) ;
0348C:  MOVF   x7D,W
0348E:  CALL   2064
....................                   putc(TxD_Buff[4]) ;
03492:  MOVF   x7E,W
03494:  CALL   2064
....................                   putc(TxD_Buff[5]) ;
03498:  MOVF   x7F,W
0349A:  CALL   2064
....................                   putc(TxD_Buff[6]) ;
0349E:  MOVF   x80,W
034A0:  CALL   2064
....................                   putc(TxD_Buff[7]) ;
034A4:  MOVF   x81,W
034A6:  CALL   2064
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
034AA:  CLRWDT
....................                   delay_ms(3);
034AC:  MOVLW  03
034AE:  MOVLB  1
034B0:  MOVWF  xC6
034B2:  MOVLB  0
034B4:  CALL   05B2
....................                   restart_wdt();
034B8:  CLRWDT
....................                   output_bit(P485ctrl,0);
034BA:  BCF    F8A.3
034BC:  BCF    F93.3
....................                   
....................                }
....................             }
034BE:  BRA    3586
....................             else if(Start_Address == 0x64)   ///// Change Modbus Addr //////
034C0:  MOVF   xF6,W
034C2:  SUBLW  64
034C4:  BNZ   3586
034C6:  MOVF   xF7,F
034C8:  BNZ   3586
....................             {
....................                Address = No_PointCount;
034CA:  MOVFF  F8,78
....................                write_eeprom(0x1D,Address);   //Communication Address
034CE:  MOVF   FF2,W
034D0:  MOVWF  00
034D2:  BCF    FF2.7
034D4:  CLRF   FAA
034D6:  MOVLW  1D
034D8:  MOVWF  FA9
034DA:  MOVFF  78,FA8
034DE:  BCF    FA6.6
034E0:  BCF    FA6.7
034E2:  BSF    FA6.2
034E4:  MOVLB  F
034E6:  MOVLW  55
034E8:  MOVWF  FA7
034EA:  MOVLW  AA
034EC:  MOVWF  FA7
034EE:  BSF    FA6.1
034F0:  BTFSC  FA6.1
034F2:  BRA    34F0
034F4:  BCF    FA6.2
034F6:  MOVF   00,W
034F8:  IORWF  FF2,F
....................                
....................                TxD_Buff[0] = Address ;         //Address
034FA:  MOVFF  78,7A
....................                TxD_Buff[1] = 0x05 ;         //Function Code
034FE:  MOVLW  05
03500:  MOVLB  0
03502:  MOVWF  x7B
....................                TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
03504:  MOVFF  B8,7C
....................                TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
03508:  MOVFF  B9,7D
....................                TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
0350C:  MOVFF  BA,7E
....................                TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03510:  MOVFF  BB,7F
.................... 
....................                CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
03514:  MOVLB  1
03516:  CLRF   xC0
03518:  MOVLW  7A
0351A:  MOVWF  xBF
0351C:  MOVLW  06
0351E:  MOVWF  xC1
03520:  MOVLB  0
03522:  CALL   2014
.................... 
....................                TxD_Buff[6] = CRC_Hi ;
03526:  MOVFF  F3,80
....................                TxD_Buff[7] = CRC_Lo ;
0352A:  MOVFF  F2,81
.................... 
....................                //TxD_DataLen = 0x08 ;
....................                //rs485_ctrl = 1;
....................                //dmsec(4);
....................                //send = 1;
....................                //TI=1;
....................                output_bit(P485ctrl,1);
0352E:  BSF    F8A.3
03530:  BCF    F93.3
....................                restart_wdt();
03532:  CLRWDT
....................                delay_ms(4);
03534:  MOVLW  04
03536:  MOVLB  1
03538:  MOVWF  xC6
0353A:  MOVLB  0
0353C:  CALL   05B2
....................                restart_wdt();
03540:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
03542:  MOVF   x7A,W
03544:  CALL   2064
....................                putc(TxD_Buff[1]) ;               //Function Code
03548:  MOVF   x7B,W
0354A:  CALL   2064
....................                putc(TxD_Buff[2]) ;               //Byte Count
0354E:  MOVF   x7C,W
03550:  CALL   2064
....................                putc(TxD_Buff[3]) ;
03554:  MOVF   x7D,W
03556:  CALL   2064
....................                putc(TxD_Buff[4]) ;
0355A:  MOVF   x7E,W
0355C:  CALL   2064
....................                putc(TxD_Buff[5]) ;
03560:  MOVF   x7F,W
03562:  CALL   2064
....................                putc(TxD_Buff[6]) ;
03566:  MOVF   x80,W
03568:  CALL   2064
....................                putc(TxD_Buff[7]) ;
0356C:  MOVF   x81,W
0356E:  CALL   2064
....................                //putc(TxD_Buff[8]) ;
....................                //putc(TxD_Buff[9]) ;
.................... 
....................                restart_wdt();
03572:  CLRWDT
....................                delay_ms(3);
03574:  MOVLW  03
03576:  MOVLB  1
03578:  MOVWF  xC6
0357A:  MOVLB  0
0357C:  CALL   05B2
....................                restart_wdt();
03580:  CLRWDT
....................                output_bit(P485ctrl,0);
03582:  BCF    F8A.3
03584:  BCF    F93.3
.................... 
.................... 
....................                //save_addr();
....................             }
....................          }
03586:  GOTO   3E26
....................          //--------------------------------------------------//
....................          /*
....................          else if(RxD_Buff[1] == 0x20)///////////// READ SETTING /////////////////////
....................          {
....................             TxD_Buff[0] = Address ;         //Address
....................             TxD_Buff[1] = 0x20 ;            //function code
....................             TxD_Buff[2] = 0x1C ;            //16 Byte//Data Byte count
....................             TxD_Buff[3] = InputType1_8 ;
....................             TxD_Buff[4] = InputType9_16 ;
....................             TxD_Buff[5] = InputType17_24 ;
....................             
....................             TxD_Buff[6] = FaultType1_8 ;
....................             TxD_Buff[7] = FaultType9_16 ;
....................             TxD_Buff[8] = FaultType17_24 ;
....................             
....................             TxD_Buff[9] = OutputType1_8 ;
....................             TxD_Buff[10] = OutputType9_16 ;
....................             TxD_Buff[11] = OutputType17_24 ;
....................             
....................             TxD_Buff[12] = OutputBoth1_8 ;
....................             TxD_Buff[13] = OutputBoth9_16 ;
....................             TxD_Buff[14] = OutputBoth17_24 ;
....................            
....................             TxD_Buff[15] = Alarm_Indicator1_8 ;
....................             TxD_Buff[16] = Alarm_Indicator9_16 ;
....................             TxD_Buff[17] = Alarm_Indicator17_24 ;
....................            
....................             TxD_Buff[18] = Red1_8;
....................             TxD_Buff[19] = Red9_10;
....................             TxD_Buff[20] = Red11_18;
....................             TxD_Buff[21] = Red19_20;
....................             TxD_Buff[22] = Green1_8;
....................             TxD_Buff[23] = Green9_10;
....................             TxD_Buff[24] = Green11_18;
....................             TxD_Buff[25] = Green19_20;
....................          
....................          
....................             TxD_Buff[26] = AutoAck ;
....................             TxD_Buff[27] = AutoAckTime ;
....................             TxD_Buff[28] = FlashingRate ;
....................             TxD_Buff[29] = NoOfPoint ;
....................             TxD_Buff[30] = FaultDelayTime ;
....................             TxD_Buff[31] = Address ;
.................... 
.................... 
....................             CRC(TxD_Buff,32)   ; //Cal CRC 49 byte
.................... 
....................             TxD_Buff[32] = CRC_Hi ;
....................             TxD_Buff[33] = CRC_Lo ;
.................... 
....................             output_bit(P485ctrl,1);
....................             delay_ms(10);
.................... 
....................             putc(Txd_Buff[0]);
....................             putc(Txd_Buff[1]);
....................             putc(Txd_Buff[2]);
....................             putc(Txd_Buff[3]);
....................             putc(Txd_Buff[4]);
....................             putc(Txd_Buff[5]);
....................             putc(Txd_Buff[6]);
....................             putc(Txd_Buff[7]);
....................             putc(Txd_Buff[8]);
....................             putc(Txd_Buff[9]);
....................             putc(Txd_Buff[10]);
....................             putc(Txd_Buff[11]);
....................             putc(Txd_Buff[12]);
....................             putc(Txd_Buff[13]);
....................             putc(Txd_Buff[14]);
....................             putc(Txd_Buff[15]);
....................             putc(Txd_Buff[16]);
....................             putc(Txd_Buff[17]);
....................             putc(Txd_Buff[18]);
....................             putc(Txd_Buff[19]);
....................             putc(Txd_Buff[20]);
....................             putc(Txd_Buff[21]);
....................             putc(Txd_Buff[22]);
....................             putc(Txd_Buff[23]);
....................             putc(Txd_Buff[24]);
....................             putc(Txd_Buff[25]);
....................             putc(Txd_Buff[26]);
....................             putc(Txd_Buff[27]);
....................             putc(Txd_Buff[28]);
....................             putc(Txd_Buff[29]);
....................             putc(Txd_Buff[30]);
....................             putc(Txd_Buff[31]);
....................             putc(Txd_Buff[32]);
....................             putc(Txd_Buff[33]);
....................           
.................... 
.................... 
....................             delay_ms(3);
....................             output_bit(P485ctrl,0);
....................          }
....................          */
....................          else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
0358A:  MOVF   xB7,W
0358C:  SUBLW  21
0358E:  BTFSS  FD8.2
03590:  GOTO   3E26
....................          {
.................... 
....................             write_eeprom(0x00,0x0F);
03594:  MOVF   FF2,W
03596:  MOVWF  00
03598:  BCF    FF2.7
0359A:  CLRF   FAA
0359C:  CLRF   FA9
0359E:  MOVLW  0F
035A0:  MOVWF  FA8
035A2:  BCF    FA6.6
035A4:  BCF    FA6.7
035A6:  BSF    FA6.2
035A8:  MOVLB  F
035AA:  MOVLW  55
035AC:  MOVWF  FA7
035AE:  MOVLW  AA
035B0:  MOVWF  FA7
035B2:  BSF    FA6.1
035B4:  BTFSC  FA6.1
035B6:  BRA    35B4
035B8:  BCF    FA6.2
035BA:  MOVF   00,W
035BC:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x01,RxD_Buff[3]);   //Input Type
035BE:  MOVFF  FF2,00
035C2:  BCF    FF2.7
035C4:  CLRF   FAA
035C6:  MOVLW  01
035C8:  MOVWF  FA9
035CA:  MOVFF  B9,FA8
035CE:  BCF    FA6.6
035D0:  BCF    FA6.7
035D2:  BSF    FA6.2
035D4:  MOVLW  55
035D6:  MOVWF  FA7
035D8:  MOVLW  AA
035DA:  MOVWF  FA7
035DC:  BSF    FA6.1
035DE:  BTFSC  FA6.1
035E0:  BRA    35DE
035E2:  BCF    FA6.2
035E4:  MOVF   00,W
035E6:  IORWF  FF2,F
....................             write_eeprom(0x02,RxD_Buff[4]);
035E8:  MOVFF  FF2,00
035EC:  BCF    FF2.7
035EE:  CLRF   FAA
035F0:  MOVLW  02
035F2:  MOVWF  FA9
035F4:  MOVFF  BA,FA8
035F8:  BCF    FA6.6
035FA:  BCF    FA6.7
035FC:  BSF    FA6.2
035FE:  MOVLW  55
03600:  MOVWF  FA7
03602:  MOVLW  AA
03604:  MOVWF  FA7
03606:  BSF    FA6.1
03608:  BTFSC  FA6.1
0360A:  BRA    3608
0360C:  BCF    FA6.2
0360E:  MOVF   00,W
03610:  IORWF  FF2,F
....................             write_eeprom(0x03,RxD_Buff[5]);
03612:  MOVFF  FF2,00
03616:  BCF    FF2.7
03618:  CLRF   FAA
0361A:  MOVLW  03
0361C:  MOVWF  FA9
0361E:  MOVFF  BB,FA8
03622:  BCF    FA6.6
03624:  BCF    FA6.7
03626:  BSF    FA6.2
03628:  MOVLW  55
0362A:  MOVWF  FA7
0362C:  MOVLW  AA
0362E:  MOVWF  FA7
03630:  BSF    FA6.1
03632:  BTFSC  FA6.1
03634:  BRA    3632
03636:  BCF    FA6.2
03638:  MOVF   00,W
0363A:  IORWF  FF2,F
....................            // write_eeprom(0x04,RxD_Buff[6]);
....................            // write_eeprom(0x05,RxD_Buff[7]);
....................            // write_eeprom(0x06,RxD_Buff[8]);
....................            // write_eeprom(0x07,RxD_Buff[9]);
....................            // write_eeprom(0x08,RxD_Buff[10]);
.................... 
....................             write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
0363C:  MOVFF  FF2,00
03640:  BCF    FF2.7
03642:  CLRF   FAA
03644:  MOVLW  04
03646:  MOVWF  FA9
03648:  MOVFF  BC,FA8
0364C:  BCF    FA6.6
0364E:  BCF    FA6.7
03650:  BSF    FA6.2
03652:  MOVLW  55
03654:  MOVWF  FA7
03656:  MOVLW  AA
03658:  MOVWF  FA7
0365A:  BSF    FA6.1
0365C:  BTFSC  FA6.1
0365E:  BRA    365C
03660:  BCF    FA6.2
03662:  MOVF   00,W
03664:  IORWF  FF2,F
....................             write_eeprom(0x05,RxD_Buff[7]);
03666:  MOVFF  FF2,00
0366A:  BCF    FF2.7
0366C:  CLRF   FAA
0366E:  MOVLW  05
03670:  MOVWF  FA9
03672:  MOVFF  BD,FA8
03676:  BCF    FA6.6
03678:  BCF    FA6.7
0367A:  BSF    FA6.2
0367C:  MOVLW  55
0367E:  MOVWF  FA7
03680:  MOVLW  AA
03682:  MOVWF  FA7
03684:  BSF    FA6.1
03686:  BTFSC  FA6.1
03688:  BRA    3686
0368A:  BCF    FA6.2
0368C:  MOVF   00,W
0368E:  IORWF  FF2,F
....................             write_eeprom(0x06,RxD_Buff[8]);
03690:  MOVFF  FF2,00
03694:  BCF    FF2.7
03696:  CLRF   FAA
03698:  MOVLW  06
0369A:  MOVWF  FA9
0369C:  MOVFF  BE,FA8
036A0:  BCF    FA6.6
036A2:  BCF    FA6.7
036A4:  BSF    FA6.2
036A6:  MOVLW  55
036A8:  MOVWF  FA7
036AA:  MOVLW  AA
036AC:  MOVWF  FA7
036AE:  BSF    FA6.1
036B0:  BTFSC  FA6.1
036B2:  BRA    36B0
036B4:  BCF    FA6.2
036B6:  MOVF   00,W
036B8:  IORWF  FF2,F
....................             //write_eeprom(0x0C,RxD_Buff[14]);
....................            // write_eeprom(0x0D,RxD_Buff[15]);
....................             //write_eeprom(0x0E,RxD_Buff[16]);
....................            // write_eeprom(0x0F,RxD_Buff[17]);
....................            // write_eeprom(0x10,RxD_Buff[18]);
.................... 
....................             write_eeprom(0x07,RxD_Buff[9]);   //Output Type
036BA:  MOVFF  FF2,00
036BE:  BCF    FF2.7
036C0:  CLRF   FAA
036C2:  MOVLW  07
036C4:  MOVWF  FA9
036C6:  MOVFF  BF,FA8
036CA:  BCF    FA6.6
036CC:  BCF    FA6.7
036CE:  BSF    FA6.2
036D0:  MOVLW  55
036D2:  MOVWF  FA7
036D4:  MOVLW  AA
036D6:  MOVWF  FA7
036D8:  BSF    FA6.1
036DA:  BTFSC  FA6.1
036DC:  BRA    36DA
036DE:  BCF    FA6.2
036E0:  MOVF   00,W
036E2:  IORWF  FF2,F
....................             write_eeprom(0x08,RxD_Buff[10]);
036E4:  MOVFF  FF2,00
036E8:  BCF    FF2.7
036EA:  CLRF   FAA
036EC:  MOVLW  08
036EE:  MOVWF  FA9
036F0:  MOVFF  C0,FA8
036F4:  BCF    FA6.6
036F6:  BCF    FA6.7
036F8:  BSF    FA6.2
036FA:  MOVLW  55
036FC:  MOVWF  FA7
036FE:  MOVLW  AA
03700:  MOVWF  FA7
03702:  BSF    FA6.1
03704:  BTFSC  FA6.1
03706:  BRA    3704
03708:  BCF    FA6.2
0370A:  MOVF   00,W
0370C:  IORWF  FF2,F
....................             write_eeprom(0x09,RxD_Buff[11]);
0370E:  MOVFF  FF2,00
03712:  BCF    FF2.7
03714:  CLRF   FAA
03716:  MOVLW  09
03718:  MOVWF  FA9
0371A:  MOVFF  C1,FA8
0371E:  BCF    FA6.6
03720:  BCF    FA6.7
03722:  BSF    FA6.2
03724:  MOVLW  55
03726:  MOVWF  FA7
03728:  MOVLW  AA
0372A:  MOVWF  FA7
0372C:  BSF    FA6.1
0372E:  BTFSC  FA6.1
03730:  BRA    372E
03732:  BCF    FA6.2
03734:  MOVF   00,W
03736:  IORWF  FF2,F
....................            // write_eeprom(0x14,RxD_Buff[22]);
....................            // write_eeprom(0x15,RxD_Buff[23]);
....................           //  write_eeprom(0x16,RxD_Buff[24]);
....................            // write_eeprom(0x17,RxD_Buff[25]);
....................            // write_eeprom(0x18,RxD_Buff[26]);
.................... 
....................             write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
03738:  MOVFF  FF2,00
0373C:  BCF    FF2.7
0373E:  CLRF   FAA
03740:  MOVLW  0A
03742:  MOVWF  FA9
03744:  MOVFF  C2,FA8
03748:  BCF    FA6.6
0374A:  BCF    FA6.7
0374C:  BSF    FA6.2
0374E:  MOVLW  55
03750:  MOVWF  FA7
03752:  MOVLW  AA
03754:  MOVWF  FA7
03756:  BSF    FA6.1
03758:  BTFSC  FA6.1
0375A:  BRA    3758
0375C:  BCF    FA6.2
0375E:  MOVF   00,W
03760:  IORWF  FF2,F
....................             write_eeprom(0x0B,RxD_Buff[13]);
03762:  MOVFF  FF2,00
03766:  BCF    FF2.7
03768:  CLRF   FAA
0376A:  MOVLW  0B
0376C:  MOVWF  FA9
0376E:  MOVFF  C3,FA8
03772:  BCF    FA6.6
03774:  BCF    FA6.7
03776:  BSF    FA6.2
03778:  MOVLW  55
0377A:  MOVWF  FA7
0377C:  MOVLW  AA
0377E:  MOVWF  FA7
03780:  BSF    FA6.1
03782:  BTFSC  FA6.1
03784:  BRA    3782
03786:  BCF    FA6.2
03788:  MOVF   00,W
0378A:  IORWF  FF2,F
....................             write_eeprom(0x0C,RxD_Buff[14]);
0378C:  MOVFF  FF2,00
03790:  BCF    FF2.7
03792:  CLRF   FAA
03794:  MOVLW  0C
03796:  MOVWF  FA9
03798:  MOVFF  C4,FA8
0379C:  BCF    FA6.6
0379E:  BCF    FA6.7
037A0:  BSF    FA6.2
037A2:  MOVLW  55
037A4:  MOVWF  FA7
037A6:  MOVLW  AA
037A8:  MOVWF  FA7
037AA:  BSF    FA6.1
037AC:  BTFSC  FA6.1
037AE:  BRA    37AC
037B0:  BCF    FA6.2
037B2:  MOVF   00,W
037B4:  IORWF  FF2,F
....................            // write_eeprom(0x1C,RxD_Buff[30]);
....................            // write_eeprom(0x1D,RxD_Buff[31]);
....................            // write_eeprom(0x1E,RxD_Buff[32]);
....................            // write_eeprom(0x1F,RxD_Buff[33]);
....................            // write_eeprom(0x20,RxD_Buff[34]);
.................... 
....................             write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
037B6:  MOVFF  FF2,00
037BA:  BCF    FF2.7
037BC:  CLRF   FAA
037BE:  MOVLW  0D
037C0:  MOVWF  FA9
037C2:  MOVFF  C5,FA8
037C6:  BCF    FA6.6
037C8:  BCF    FA6.7
037CA:  BSF    FA6.2
037CC:  MOVLW  55
037CE:  MOVWF  FA7
037D0:  MOVLW  AA
037D2:  MOVWF  FA7
037D4:  BSF    FA6.1
037D6:  BTFSC  FA6.1
037D8:  BRA    37D6
037DA:  BCF    FA6.2
037DC:  MOVF   00,W
037DE:  IORWF  FF2,F
....................             write_eeprom(0x0E,RxD_Buff[16]);
037E0:  MOVFF  FF2,00
037E4:  BCF    FF2.7
037E6:  CLRF   FAA
037E8:  MOVLW  0E
037EA:  MOVWF  FA9
037EC:  MOVFF  C6,FA8
037F0:  BCF    FA6.6
037F2:  BCF    FA6.7
037F4:  BSF    FA6.2
037F6:  MOVLW  55
037F8:  MOVWF  FA7
037FA:  MOVLW  AA
037FC:  MOVWF  FA7
037FE:  BSF    FA6.1
03800:  BTFSC  FA6.1
03802:  BRA    3800
03804:  BCF    FA6.2
03806:  MOVF   00,W
03808:  IORWF  FF2,F
....................             write_eeprom(0x0F,RxD_Buff[17]);
0380A:  MOVFF  FF2,00
0380E:  BCF    FF2.7
03810:  CLRF   FAA
03812:  MOVLW  0F
03814:  MOVWF  FA9
03816:  MOVFF  C7,FA8
0381A:  BCF    FA6.6
0381C:  BCF    FA6.7
0381E:  BSF    FA6.2
03820:  MOVLW  55
03822:  MOVWF  FA7
03824:  MOVLW  AA
03826:  MOVWF  FA7
03828:  BSF    FA6.1
0382A:  BTFSC  FA6.1
0382C:  BRA    382A
0382E:  BCF    FA6.2
03830:  MOVF   00,W
03832:  IORWF  FF2,F
....................            // write_eeprom(0x24,RxD_Buff[38]);
....................            // write_eeprom(0x25,RxD_Buff[39]);
....................            // write_eeprom(0x26,RxD_Buff[40]);
....................            // write_eeprom(0x27,RxD_Buff[41]);
....................            // write_eeprom(0x28,RxD_Buff[42]);
....................          
....................             // LED Colour Config
....................             write_eeprom(0x10,RxD_Buff[18]); //Red1_8
03834:  MOVFF  FF2,00
03838:  BCF    FF2.7
0383A:  CLRF   FAA
0383C:  MOVLW  10
0383E:  MOVWF  FA9
03840:  MOVFF  C8,FA8
03844:  BCF    FA6.6
03846:  BCF    FA6.7
03848:  BSF    FA6.2
0384A:  MOVLW  55
0384C:  MOVWF  FA7
0384E:  MOVLW  AA
03850:  MOVWF  FA7
03852:  BSF    FA6.1
03854:  BTFSC  FA6.1
03856:  BRA    3854
03858:  BCF    FA6.2
0385A:  MOVF   00,W
0385C:  IORWF  FF2,F
....................             write_eeprom(0x11,RxD_Buff[19]); //Red9_10
0385E:  MOVFF  FF2,00
03862:  BCF    FF2.7
03864:  CLRF   FAA
03866:  MOVLW  11
03868:  MOVWF  FA9
0386A:  MOVFF  C9,FA8
0386E:  BCF    FA6.6
03870:  BCF    FA6.7
03872:  BSF    FA6.2
03874:  MOVLW  55
03876:  MOVWF  FA7
03878:  MOVLW  AA
0387A:  MOVWF  FA7
0387C:  BSF    FA6.1
0387E:  BTFSC  FA6.1
03880:  BRA    387E
03882:  BCF    FA6.2
03884:  MOVF   00,W
03886:  IORWF  FF2,F
....................             write_eeprom(0x12,RxD_Buff[20]); //Red11_18
03888:  MOVFF  FF2,00
0388C:  BCF    FF2.7
0388E:  CLRF   FAA
03890:  MOVLW  12
03892:  MOVWF  FA9
03894:  MOVFF  CA,FA8
03898:  BCF    FA6.6
0389A:  BCF    FA6.7
0389C:  BSF    FA6.2
0389E:  MOVLW  55
038A0:  MOVWF  FA7
038A2:  MOVLW  AA
038A4:  MOVWF  FA7
038A6:  BSF    FA6.1
038A8:  BTFSC  FA6.1
038AA:  BRA    38A8
038AC:  BCF    FA6.2
038AE:  MOVF   00,W
038B0:  IORWF  FF2,F
....................             write_eeprom(0x13,RxD_Buff[21]); //Red19_20
038B2:  MOVFF  FF2,00
038B6:  BCF    FF2.7
038B8:  CLRF   FAA
038BA:  MOVLW  13
038BC:  MOVWF  FA9
038BE:  MOVFF  CB,FA8
038C2:  BCF    FA6.6
038C4:  BCF    FA6.7
038C6:  BSF    FA6.2
038C8:  MOVLW  55
038CA:  MOVWF  FA7
038CC:  MOVLW  AA
038CE:  MOVWF  FA7
038D0:  BSF    FA6.1
038D2:  BTFSC  FA6.1
038D4:  BRA    38D2
038D6:  BCF    FA6.2
038D8:  MOVF   00,W
038DA:  IORWF  FF2,F
....................             write_eeprom(0x14,RxD_Buff[22]); //Green1_8
038DC:  MOVFF  FF2,00
038E0:  BCF    FF2.7
038E2:  CLRF   FAA
038E4:  MOVLW  14
038E6:  MOVWF  FA9
038E8:  MOVFF  CC,FA8
038EC:  BCF    FA6.6
038EE:  BCF    FA6.7
038F0:  BSF    FA6.2
038F2:  MOVLW  55
038F4:  MOVWF  FA7
038F6:  MOVLW  AA
038F8:  MOVWF  FA7
038FA:  BSF    FA6.1
038FC:  BTFSC  FA6.1
038FE:  BRA    38FC
03900:  BCF    FA6.2
03902:  MOVF   00,W
03904:  IORWF  FF2,F
....................             write_eeprom(0x15,RxD_Buff[23]); //Green9_10
03906:  MOVFF  FF2,00
0390A:  BCF    FF2.7
0390C:  CLRF   FAA
0390E:  MOVLW  15
03910:  MOVWF  FA9
03912:  MOVFF  CD,FA8
03916:  BCF    FA6.6
03918:  BCF    FA6.7
0391A:  BSF    FA6.2
0391C:  MOVLW  55
0391E:  MOVWF  FA7
03920:  MOVLW  AA
03922:  MOVWF  FA7
03924:  BSF    FA6.1
03926:  BTFSC  FA6.1
03928:  BRA    3926
0392A:  BCF    FA6.2
0392C:  MOVF   00,W
0392E:  IORWF  FF2,F
....................             write_eeprom(0x16,RxD_Buff[24]); //Green11_18
03930:  MOVFF  FF2,00
03934:  BCF    FF2.7
03936:  CLRF   FAA
03938:  MOVLW  16
0393A:  MOVWF  FA9
0393C:  MOVFF  CE,FA8
03940:  BCF    FA6.6
03942:  BCF    FA6.7
03944:  BSF    FA6.2
03946:  MOVLW  55
03948:  MOVWF  FA7
0394A:  MOVLW  AA
0394C:  MOVWF  FA7
0394E:  BSF    FA6.1
03950:  BTFSC  FA6.1
03952:  BRA    3950
03954:  BCF    FA6.2
03956:  MOVF   00,W
03958:  IORWF  FF2,F
....................             write_eeprom(0x17,RxD_Buff[25]); //Green19_20
0395A:  MOVFF  FF2,00
0395E:  BCF    FF2.7
03960:  CLRF   FAA
03962:  MOVLW  17
03964:  MOVWF  FA9
03966:  MOVFF  CF,FA8
0396A:  BCF    FA6.6
0396C:  BCF    FA6.7
0396E:  BSF    FA6.2
03970:  MOVLW  55
03972:  MOVWF  FA7
03974:  MOVLW  AA
03976:  MOVWF  FA7
03978:  BSF    FA6.1
0397A:  BTFSC  FA6.1
0397C:  BRA    397A
0397E:  BCF    FA6.2
03980:  MOVF   00,W
03982:  IORWF  FF2,F
....................                
....................             write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
03984:  MOVFF  FF2,00
03988:  BCF    FF2.7
0398A:  CLRF   FAA
0398C:  MOVLW  18
0398E:  MOVWF  FA9
03990:  MOVFF  D0,FA8
03994:  BCF    FA6.6
03996:  BCF    FA6.7
03998:  BSF    FA6.2
0399A:  MOVLW  55
0399C:  MOVWF  FA7
0399E:  MOVLW  AA
039A0:  MOVWF  FA7
039A2:  BSF    FA6.1
039A4:  BTFSC  FA6.1
039A6:  BRA    39A4
039A8:  BCF    FA6.2
039AA:  MOVF   00,W
039AC:  IORWF  FF2,F
....................             write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
039AE:  MOVFF  FF2,00
039B2:  BCF    FF2.7
039B4:  CLRF   FAA
039B6:  MOVLW  19
039B8:  MOVWF  FA9
039BA:  MOVFF  D1,FA8
039BE:  BCF    FA6.6
039C0:  BCF    FA6.7
039C2:  BSF    FA6.2
039C4:  MOVLW  55
039C6:  MOVWF  FA7
039C8:  MOVLW  AA
039CA:  MOVWF  FA7
039CC:  BSF    FA6.1
039CE:  BTFSC  FA6.1
039D0:  BRA    39CE
039D2:  BCF    FA6.2
039D4:  MOVF   00,W
039D6:  IORWF  FF2,F
....................             write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
039D8:  MOVFF  FF2,00
039DC:  BCF    FF2.7
039DE:  CLRF   FAA
039E0:  MOVLW  1A
039E2:  MOVWF  FA9
039E4:  MOVFF  D2,FA8
039E8:  BCF    FA6.6
039EA:  BCF    FA6.7
039EC:  BSF    FA6.2
039EE:  MOVLW  55
039F0:  MOVWF  FA7
039F2:  MOVLW  AA
039F4:  MOVWF  FA7
039F6:  BSF    FA6.1
039F8:  BTFSC  FA6.1
039FA:  BRA    39F8
039FC:  BCF    FA6.2
039FE:  MOVF   00,W
03A00:  IORWF  FF2,F
....................             write_eeprom(0x1B,RxD_Buff[29]);   //No of point
03A02:  MOVFF  FF2,00
03A06:  BCF    FF2.7
03A08:  CLRF   FAA
03A0A:  MOVLW  1B
03A0C:  MOVWF  FA9
03A0E:  MOVFF  D3,FA8
03A12:  BCF    FA6.6
03A14:  BCF    FA6.7
03A16:  BSF    FA6.2
03A18:  MOVLW  55
03A1A:  MOVWF  FA7
03A1C:  MOVLW  AA
03A1E:  MOVWF  FA7
03A20:  BSF    FA6.1
03A22:  BTFSC  FA6.1
03A24:  BRA    3A22
03A26:  BCF    FA6.2
03A28:  MOVF   00,W
03A2A:  IORWF  FF2,F
....................             write_eeprom(0x1C,RxD_Buff[30]);   //Master / Slave
03A2C:  MOVFF  FF2,00
03A30:  BCF    FF2.7
03A32:  CLRF   FAA
03A34:  MOVLW  1C
03A36:  MOVWF  FA9
03A38:  MOVFF  D4,FA8
03A3C:  BCF    FA6.6
03A3E:  BCF    FA6.7
03A40:  BSF    FA6.2
03A42:  MOVLW  55
03A44:  MOVWF  FA7
03A46:  MOVLW  AA
03A48:  MOVWF  FA7
03A4A:  BSF    FA6.1
03A4C:  BTFSC  FA6.1
03A4E:  BRA    3A4C
03A50:  BCF    FA6.2
03A52:  MOVF   00,W
03A54:  IORWF  FF2,F
....................             write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
03A56:  MOVFF  FF2,00
03A5A:  BCF    FF2.7
03A5C:  CLRF   FAA
03A5E:  MOVLW  1D
03A60:  MOVWF  FA9
03A62:  MOVFF  D5,FA8
03A66:  BCF    FA6.6
03A68:  BCF    FA6.7
03A6A:  BSF    FA6.2
03A6C:  MOVLW  55
03A6E:  MOVWF  FA7
03A70:  MOVLW  AA
03A72:  MOVWF  FA7
03A74:  BSF    FA6.1
03A76:  BTFSC  FA6.1
03A78:  BRA    3A76
03A7A:  BCF    FA6.2
03A7C:  MOVF   00,W
03A7E:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x1E,RxD_Buff[32]);   //Communication Address
03A80:  MOVFF  FF2,00
03A84:  BCF    FF2.7
03A86:  CLRF   FAA
03A88:  MOVLW  1E
03A8A:  MOVWF  FA9
03A8C:  MOVFF  D6,FA8
03A90:  BCF    FA6.6
03A92:  BCF    FA6.7
03A94:  BSF    FA6.2
03A96:  MOVLW  55
03A98:  MOVWF  FA7
03A9A:  MOVLW  AA
03A9C:  MOVWF  FA7
03A9E:  BSF    FA6.1
03AA0:  BTFSC  FA6.1
03AA2:  BRA    3AA0
03AA4:  BCF    FA6.2
03AA6:  MOVF   00,W
03AA8:  IORWF  FF2,F
....................             write_eeprom(0x1F,RxD_Buff[33]);   //Communication Address
03AAA:  MOVFF  FF2,00
03AAE:  BCF    FF2.7
03AB0:  CLRF   FAA
03AB2:  MOVLW  1F
03AB4:  MOVWF  FA9
03AB6:  MOVFF  D7,FA8
03ABA:  BCF    FA6.6
03ABC:  BCF    FA6.7
03ABE:  BSF    FA6.2
03AC0:  MOVLW  55
03AC2:  MOVWF  FA7
03AC4:  MOVLW  AA
03AC6:  MOVWF  FA7
03AC8:  BSF    FA6.1
03ACA:  BTFSC  FA6.1
03ACC:  BRA    3ACA
03ACE:  BCF    FA6.2
03AD0:  MOVF   00,W
03AD2:  IORWF  FF2,F
....................             write_eeprom(0x20,RxD_Buff[34]);   //Communication Address
03AD4:  MOVFF  FF2,00
03AD8:  BCF    FF2.7
03ADA:  CLRF   FAA
03ADC:  MOVLW  20
03ADE:  MOVWF  FA9
03AE0:  MOVFF  D8,FA8
03AE4:  BCF    FA6.6
03AE6:  BCF    FA6.7
03AE8:  BSF    FA6.2
03AEA:  MOVLW  55
03AEC:  MOVWF  FA7
03AEE:  MOVLW  AA
03AF0:  MOVWF  FA7
03AF2:  BSF    FA6.1
03AF4:  BTFSC  FA6.1
03AF6:  BRA    3AF4
03AF8:  BCF    FA6.2
03AFA:  MOVF   00,W
03AFC:  IORWF  FF2,F
....................             write_eeprom(0x21,RxD_Buff[35]);   //Communication Address
03AFE:  MOVFF  FF2,00
03B02:  BCF    FF2.7
03B04:  CLRF   FAA
03B06:  MOVLW  21
03B08:  MOVWF  FA9
03B0A:  MOVFF  D9,FA8
03B0E:  BCF    FA6.6
03B10:  BCF    FA6.7
03B12:  BSF    FA6.2
03B14:  MOVLW  55
03B16:  MOVWF  FA7
03B18:  MOVLW  AA
03B1A:  MOVWF  FA7
03B1C:  BSF    FA6.1
03B1E:  BTFSC  FA6.1
03B20:  BRA    3B1E
03B22:  BCF    FA6.2
03B24:  MOVF   00,W
03B26:  IORWF  FF2,F
....................             write_eeprom(0x22,RxD_Buff[36]);   //Communication Address
03B28:  MOVFF  FF2,00
03B2C:  BCF    FF2.7
03B2E:  CLRF   FAA
03B30:  MOVLW  22
03B32:  MOVWF  FA9
03B34:  MOVFF  DA,FA8
03B38:  BCF    FA6.6
03B3A:  BCF    FA6.7
03B3C:  BSF    FA6.2
03B3E:  MOVLW  55
03B40:  MOVWF  FA7
03B42:  MOVLW  AA
03B44:  MOVWF  FA7
03B46:  BSF    FA6.1
03B48:  BTFSC  FA6.1
03B4A:  BRA    3B48
03B4C:  BCF    FA6.2
03B4E:  MOVF   00,W
03B50:  IORWF  FF2,F
....................             write_eeprom(0x23,RxD_Buff[37]);   //Communication Address
03B52:  MOVFF  FF2,00
03B56:  BCF    FF2.7
03B58:  CLRF   FAA
03B5A:  MOVLW  23
03B5C:  MOVWF  FA9
03B5E:  MOVFF  DB,FA8
03B62:  BCF    FA6.6
03B64:  BCF    FA6.7
03B66:  BSF    FA6.2
03B68:  MOVLW  55
03B6A:  MOVWF  FA7
03B6C:  MOVLW  AA
03B6E:  MOVWF  FA7
03B70:  BSF    FA6.1
03B72:  BTFSC  FA6.1
03B74:  BRA    3B72
03B76:  BCF    FA6.2
03B78:  MOVF   00,W
03B7A:  IORWF  FF2,F
....................             write_eeprom(0x24,RxD_Buff[38]);   //Communication Address
03B7C:  MOVFF  FF2,00
03B80:  BCF    FF2.7
03B82:  CLRF   FAA
03B84:  MOVLW  24
03B86:  MOVWF  FA9
03B88:  MOVFF  DC,FA8
03B8C:  BCF    FA6.6
03B8E:  BCF    FA6.7
03B90:  BSF    FA6.2
03B92:  MOVLW  55
03B94:  MOVWF  FA7
03B96:  MOVLW  AA
03B98:  MOVWF  FA7
03B9A:  BSF    FA6.1
03B9C:  BTFSC  FA6.1
03B9E:  BRA    3B9C
03BA0:  BCF    FA6.2
03BA2:  MOVF   00,W
03BA4:  IORWF  FF2,F
....................             write_eeprom(0x25,RxD_Buff[39]);   //Communication Address
03BA6:  MOVFF  FF2,00
03BAA:  BCF    FF2.7
03BAC:  CLRF   FAA
03BAE:  MOVLW  25
03BB0:  MOVWF  FA9
03BB2:  MOVFF  DD,FA8
03BB6:  BCF    FA6.6
03BB8:  BCF    FA6.7
03BBA:  BSF    FA6.2
03BBC:  MOVLW  55
03BBE:  MOVWF  FA7
03BC0:  MOVLW  AA
03BC2:  MOVWF  FA7
03BC4:  BSF    FA6.1
03BC6:  BTFSC  FA6.1
03BC8:  BRA    3BC6
03BCA:  BCF    FA6.2
03BCC:  MOVF   00,W
03BCE:  IORWF  FF2,F
....................             write_eeprom(0x26,RxD_Buff[40]);   //Communication Address
03BD0:  MOVFF  FF2,00
03BD4:  BCF    FF2.7
03BD6:  CLRF   FAA
03BD8:  MOVLW  26
03BDA:  MOVWF  FA9
03BDC:  MOVFF  DE,FA8
03BE0:  BCF    FA6.6
03BE2:  BCF    FA6.7
03BE4:  BSF    FA6.2
03BE6:  MOVLW  55
03BE8:  MOVWF  FA7
03BEA:  MOVLW  AA
03BEC:  MOVWF  FA7
03BEE:  BSF    FA6.1
03BF0:  BTFSC  FA6.1
03BF2:  BRA    3BF0
03BF4:  BCF    FA6.2
03BF6:  MOVF   00,W
03BF8:  IORWF  FF2,F
....................             write_eeprom(0x27,RxD_Buff[41]);   //Communication Address
03BFA:  MOVFF  FF2,00
03BFE:  BCF    FF2.7
03C00:  CLRF   FAA
03C02:  MOVLW  27
03C04:  MOVWF  FA9
03C06:  MOVFF  DF,FA8
03C0A:  BCF    FA6.6
03C0C:  BCF    FA6.7
03C0E:  BSF    FA6.2
03C10:  MOVLW  55
03C12:  MOVWF  FA7
03C14:  MOVLW  AA
03C16:  MOVWF  FA7
03C18:  BSF    FA6.1
03C1A:  BTFSC  FA6.1
03C1C:  BRA    3C1A
03C1E:  BCF    FA6.2
03C20:  MOVF   00,W
03C22:  IORWF  FF2,F
....................             write_eeprom(0x28,RxD_Buff[42]);   //Communication Address
03C24:  MOVFF  FF2,00
03C28:  BCF    FF2.7
03C2A:  CLRF   FAA
03C2C:  MOVLW  28
03C2E:  MOVWF  FA9
03C30:  MOVFF  E0,FA8
03C34:  BCF    FA6.6
03C36:  BCF    FA6.7
03C38:  BSF    FA6.2
03C3A:  MOVLW  55
03C3C:  MOVWF  FA7
03C3E:  MOVLW  AA
03C40:  MOVWF  FA7
03C42:  BSF    FA6.1
03C44:  BTFSC  FA6.1
03C46:  BRA    3C44
03C48:  BCF    FA6.2
03C4A:  MOVF   00,W
03C4C:  IORWF  FF2,F
....................             write_eeprom(0x29,RxD_Buff[43]);   //Communication Address
03C4E:  MOVFF  FF2,00
03C52:  BCF    FF2.7
03C54:  CLRF   FAA
03C56:  MOVLW  29
03C58:  MOVWF  FA9
03C5A:  MOVFF  E1,FA8
03C5E:  BCF    FA6.6
03C60:  BCF    FA6.7
03C62:  BSF    FA6.2
03C64:  MOVLW  55
03C66:  MOVWF  FA7
03C68:  MOVLW  AA
03C6A:  MOVWF  FA7
03C6C:  BSF    FA6.1
03C6E:  BTFSC  FA6.1
03C70:  BRA    3C6E
03C72:  BCF    FA6.2
03C74:  MOVF   00,W
03C76:  IORWF  FF2,F
....................             write_eeprom(0x2A,RxD_Buff[44]);   //Communication Address
03C78:  MOVFF  FF2,00
03C7C:  BCF    FF2.7
03C7E:  CLRF   FAA
03C80:  MOVLW  2A
03C82:  MOVWF  FA9
03C84:  MOVFF  E2,FA8
03C88:  BCF    FA6.6
03C8A:  BCF    FA6.7
03C8C:  BSF    FA6.2
03C8E:  MOVLW  55
03C90:  MOVWF  FA7
03C92:  MOVLW  AA
03C94:  MOVWF  FA7
03C96:  BSF    FA6.1
03C98:  BTFSC  FA6.1
03C9A:  BRA    3C98
03C9C:  BCF    FA6.2
03C9E:  MOVF   00,W
03CA0:  IORWF  FF2,F
....................             write_eeprom(0x2B,RxD_Buff[45]);   //Communication Address
03CA2:  MOVFF  FF2,00
03CA6:  BCF    FF2.7
03CA8:  CLRF   FAA
03CAA:  MOVLW  2B
03CAC:  MOVWF  FA9
03CAE:  MOVFF  E3,FA8
03CB2:  BCF    FA6.6
03CB4:  BCF    FA6.7
03CB6:  BSF    FA6.2
03CB8:  MOVLW  55
03CBA:  MOVWF  FA7
03CBC:  MOVLW  AA
03CBE:  MOVWF  FA7
03CC0:  BSF    FA6.1
03CC2:  BTFSC  FA6.1
03CC4:  BRA    3CC2
03CC6:  BCF    FA6.2
03CC8:  MOVF   00,W
03CCA:  IORWF  FF2,F
....................             write_eeprom(0x2C,RxD_Buff[46]);   //Communication Address
03CCC:  MOVFF  FF2,00
03CD0:  BCF    FF2.7
03CD2:  CLRF   FAA
03CD4:  MOVLW  2C
03CD6:  MOVWF  FA9
03CD8:  MOVFF  E4,FA8
03CDC:  BCF    FA6.6
03CDE:  BCF    FA6.7
03CE0:  BSF    FA6.2
03CE2:  MOVLW  55
03CE4:  MOVWF  FA7
03CE6:  MOVLW  AA
03CE8:  MOVWF  FA7
03CEA:  BSF    FA6.1
03CEC:  BTFSC  FA6.1
03CEE:  BRA    3CEC
03CF0:  BCF    FA6.2
03CF2:  MOVF   00,W
03CF4:  IORWF  FF2,F
....................             write_eeprom(0x2D,RxD_Buff[47]);   //Communication Address
03CF6:  MOVFF  FF2,00
03CFA:  BCF    FF2.7
03CFC:  CLRF   FAA
03CFE:  MOVLW  2D
03D00:  MOVWF  FA9
03D02:  MOVFF  E5,FA8
03D06:  BCF    FA6.6
03D08:  BCF    FA6.7
03D0A:  BSF    FA6.2
03D0C:  MOVLW  55
03D0E:  MOVWF  FA7
03D10:  MOVLW  AA
03D12:  MOVWF  FA7
03D14:  BSF    FA6.1
03D16:  BTFSC  FA6.1
03D18:  BRA    3D16
03D1A:  BCF    FA6.2
03D1C:  MOVF   00,W
03D1E:  IORWF  FF2,F
....................             write_eeprom(0x2E,RxD_Buff[48]);   //Communication Address
03D20:  MOVFF  FF2,00
03D24:  BCF    FF2.7
03D26:  CLRF   FAA
03D28:  MOVLW  2E
03D2A:  MOVWF  FA9
03D2C:  MOVFF  E6,FA8
03D30:  BCF    FA6.6
03D32:  BCF    FA6.7
03D34:  BSF    FA6.2
03D36:  MOVLW  55
03D38:  MOVWF  FA7
03D3A:  MOVLW  AA
03D3C:  MOVWF  FA7
03D3E:  BSF    FA6.1
03D40:  BTFSC  FA6.1
03D42:  BRA    3D40
03D44:  BCF    FA6.2
03D46:  MOVF   00,W
03D48:  IORWF  FF2,F
....................             write_eeprom(0x2F,RxD_Buff[49]);   //Communication Address
03D4A:  MOVFF  FF2,00
03D4E:  BCF    FF2.7
03D50:  CLRF   FAA
03D52:  MOVLW  2F
03D54:  MOVWF  FA9
03D56:  MOVFF  E7,FA8
03D5A:  BCF    FA6.6
03D5C:  BCF    FA6.7
03D5E:  BSF    FA6.2
03D60:  MOVLW  55
03D62:  MOVWF  FA7
03D64:  MOVLW  AA
03D66:  MOVWF  FA7
03D68:  BSF    FA6.1
03D6A:  BTFSC  FA6.1
03D6C:  BRA    3D6A
03D6E:  BCF    FA6.2
03D70:  MOVF   00,W
03D72:  IORWF  FF2,F
....................             write_eeprom(0x30,RxD_Buff[50]);   //Communication Address
03D74:  MOVFF  FF2,00
03D78:  BCF    FF2.7
03D7A:  CLRF   FAA
03D7C:  MOVLW  30
03D7E:  MOVWF  FA9
03D80:  MOVFF  E8,FA8
03D84:  BCF    FA6.6
03D86:  BCF    FA6.7
03D88:  BSF    FA6.2
03D8A:  MOVLW  55
03D8C:  MOVWF  FA7
03D8E:  MOVLW  AA
03D90:  MOVWF  FA7
03D92:  BSF    FA6.1
03D94:  BTFSC  FA6.1
03D96:  BRA    3D94
03D98:  BCF    FA6.2
03D9A:  MOVF   00,W
03D9C:  IORWF  FF2,F
....................             write_eeprom(0x31,RxD_Buff[51]);   //Communication Address
03D9E:  MOVFF  FF2,00
03DA2:  BCF    FF2.7
03DA4:  CLRF   FAA
03DA6:  MOVLW  31
03DA8:  MOVWF  FA9
03DAA:  MOVFF  E9,FA8
03DAE:  BCF    FA6.6
03DB0:  BCF    FA6.7
03DB2:  BSF    FA6.2
03DB4:  MOVLW  55
03DB6:  MOVWF  FA7
03DB8:  MOVLW  AA
03DBA:  MOVWF  FA7
03DBC:  BSF    FA6.1
03DBE:  BTFSC  FA6.1
03DC0:  BRA    3DBE
03DC2:  BCF    FA6.2
03DC4:  MOVF   00,W
03DC6:  IORWF  FF2,F
....................          
....................          
....................             TxD_Buff[0] = Address ;         //Address
03DC8:  MOVFF  78,7A
....................             TxD_Buff[1] = 0x21 ;            //return function code
03DCC:  MOVLW  21
03DCE:  MOVLB  0
03DD0:  MOVWF  x7B
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
03DD2:  MOVLB  1
03DD4:  CLRF   xC0
03DD6:  MOVLW  7A
03DD8:  MOVWF  xBF
03DDA:  MOVLW  02
03DDC:  MOVWF  xC1
03DDE:  MOVLB  0
03DE0:  CALL   2014
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
03DE4:  MOVFF  F3,7C
....................             TxD_Buff[3] = CRC_Lo ;
03DE8:  MOVFF  F2,7D
.................... 
....................             output_bit(P485ctrl,1);
03DEC:  BSF    F8A.3
03DEE:  BCF    F93.3
....................             delay_ms(10);
03DF0:  MOVLW  0A
03DF2:  MOVLB  1
03DF4:  MOVWF  xC6
03DF6:  MOVLB  0
03DF8:  CALL   05B2
.................... 
....................             putc(Txd_Buff[0]);
03DFC:  MOVF   x7A,W
03DFE:  CALL   2064
....................             putc(Txd_Buff[1]);
03E02:  MOVF   x7B,W
03E04:  CALL   2064
....................             putc(Txd_Buff[2]);
03E08:  MOVF   x7C,W
03E0A:  CALL   2064
....................             putc(Txd_Buff[3]);
03E0E:  MOVF   x7D,W
03E10:  CALL   2064
.................... 
....................             delay_ms(3);
03E14:  MOVLW  03
03E16:  MOVLB  1
03E18:  MOVWF  xC6
03E1A:  MOVLB  0
03E1C:  CALL   05B2
....................             output_bit(P485ctrl,0);
03E20:  BCF    F8A.3
03E22:  BCF    F93.3
....................             
....................             reset_cpu();
03E24:  RESET
....................             //Read_Config(); //jj
....................          }
.................... 
....................          if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
03E26:  MOVF   xB7,W
03E28:  SUBLW  03
03E2A:  BNZ   3EB4
....................          {
....................             //Data_Buff[0] = Input9_16; //>> Start_Address ;
....................             //Data_Buff[1] = Input1_8;// >> Start_Address ;
....................             //Data_Buff[2] = Input25_32;
....................             //Data_Buff[3] = Input17_24;// >> Start_Address ;
....................             Data_Buff[0] = Input9_16;
03E2C:  MOVFF  4A,FB
....................             Data_Buff[1] = Input1_8;
03E30:  MOVFF  49,FC
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
03E34:  MOVFF  78,7A
....................             TxD_Buff[1] = 0x03 ;           //Function Code
03E38:  MOVLW  03
03E3A:  MOVWF  x7B
....................             TxD_Buff[2] = 0x02 ;          //Byte Count
03E3C:  MOVLW  02
03E3E:  MOVWF  x7C
....................             TxD_Buff[3] = Data_Buff[0];   //first byte Data
03E40:  MOVFF  FB,7D
....................             TxD_Buff[4] = Data_Buff[1];   //first byte Data
03E44:  MOVFF  FC,7E
.................... 
....................             CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
03E48:  MOVLB  1
03E4A:  CLRF   xC0
03E4C:  MOVLW  7A
03E4E:  MOVWF  xBF
03E50:  MOVLW  05
03E52:  MOVWF  xC1
03E54:  MOVLB  0
03E56:  CALL   2014
.................... 
....................             TxD_Buff[5] = CRC_Hi ;
03E5A:  MOVFF  F3,7F
....................             TxD_Buff[6] = CRC_Lo ;
03E5E:  MOVFF  F2,80
.................... 
....................             //TxD_DataLen = 0x07 ;
....................             //rs485_ctrl = 1;
....................             //dmsec(4);
....................             //send = 1;
....................             //TI=1;
....................             output_bit(P485ctrl,1);
03E62:  BSF    F8A.3
03E64:  BCF    F93.3
....................             restart_wdt();
03E66:  CLRWDT
....................             delay_ms(4);
03E68:  MOVLW  04
03E6A:  MOVLB  1
03E6C:  MOVWF  xC6
03E6E:  MOVLB  0
03E70:  CALL   05B2
....................             restart_wdt();
03E74:  CLRWDT
.................... 
....................             putc(TxD_Buff[0]) ;               //Address
03E76:  MOVF   x7A,W
03E78:  CALL   2064
....................             putc(TxD_Buff[1]) ;               //Function Code
03E7C:  MOVF   x7B,W
03E7E:  CALL   2064
....................             putc(TxD_Buff[2]) ;               //Byte Count
03E82:  MOVF   x7C,W
03E84:  CALL   2064
....................             putc(TxD_Buff[3]) ;
03E88:  MOVF   x7D,W
03E8A:  CALL   2064
....................             putc(TxD_Buff[4]) ;
03E8E:  MOVF   x7E,W
03E90:  CALL   2064
....................             putc(TxD_Buff[5]) ;
03E94:  MOVF   x7F,W
03E96:  CALL   2064
....................             putc(TxD_Buff[6]) ;
03E9A:  MOVF   x80,W
03E9C:  CALL   2064
....................             //putc(TxD_Buff[7]) ;
....................             //putc(TxD_Buff[8]) ;
....................             //putc(TxD_Buff[9]) ;
.................... 
....................             restart_wdt();
03EA0:  CLRWDT
....................             delay_ms(3);
03EA2:  MOVLW  03
03EA4:  MOVLB  1
03EA6:  MOVWF  xC6
03EA8:  MOVLB  0
03EAA:  CALL   05B2
....................             restart_wdt();
03EAE:  CLRWDT
....................             output_bit(P485ctrl,0);
03EB0:  BCF    F8A.3
03EB2:  BCF    F93.3
....................          /*
....................             //Do Read Holding Register
....................             Start_Address = RxD_Buff[2] ;
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
....................             No_PointCount = RxD_Buff[4] ;
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;      //No. of Point 16 bit
.................... 
....................             if(Start_Address < 0x02 && (Start_Address + No_PointCount) <= 0x03)  //Valid point 0-1
....................             {
....................                if(No_PointCount == 1) Data_ByteCount = 0x01 ;         // 1 point
....................                else if(No_PointCount == 2) Data_ByteCount = 0x02 ;    // 2 point
.................... 
....................                if(Data_ByteCount == 0x01)
....................                {
....................                   if(Start_Address == 0x00)
....................                   {
....................                       TxD_Buff[0] = Address ;         //Address
....................                   TxD_Buff[1] = 0x03 ;         //Function Code
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
....................                   TxD_Buff[5] = Data_Buff[2] ;  
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 5 Byte
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
....................                   TxD_Buff[7] = CRC_Lo ;
.................... 
....................                   //TxD_DataLen = 0x07 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
....................                   restart_wdt();
....................                   delay_ms(4);
....................                   restart_wdt();
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
....................                   putc(TxD_Buff[1]) ;               //Function Code
....................                   putc(TxD_Buff[2]) ;               //Byte Count
....................                   putc(TxD_Buff[3]) ;
....................                   putc(TxD_Buff[4]) ;
....................                   putc(TxD_Buff[5]) ;
....................                   putc(TxD_Buff[6]) ;
....................                   putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
....................                   delay_ms(3);
....................                   restart_wdt();
....................                   output_bit(P485ctrl,0);
....................                   }
....................                   else if(Start_Address == 0x01)
....................                   {
....................                       TxD_Buff[0] = Address ;         //Address
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
....................                   TxD_Buff[5] = Data_Buff[2] ;  
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 5 Byte
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
....................                   TxD_Buff[7] = CRC_Lo ;
.................... 
....................                   //TxD_DataLen = 0x07 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
....................                   restart_wdt();
....................                   delay_ms(4);
....................                   restart_wdt();
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
....................                   putc(TxD_Buff[1]) ;               //Function Code
....................                   putc(TxD_Buff[2]) ;               //Byte Count
....................                   putc(TxD_Buff[3]) ;
....................                   putc(TxD_Buff[4]) ;
....................                   putc(TxD_Buff[5]) ;
....................                   putc(TxD_Buff[6]) ;
....................                   putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
....................                   delay_ms(3);
....................                   restart_wdt();
....................                   output_bit(P485ctrl,0);
....................                   }
....................                }
....................                else if(Data_ByteCount == 0x02)
....................                {
....................                   if(Start_Address == 0x00)
....................                   {
....................                       TxD_Buff[0] = Address ;         //Address
....................                   TxD_Buff[1] = 0x03 ;         //Function Code
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
....................                   TxD_Buff[5] = Data_Buff[2] ;  
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 5 Byte
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
....................                   TxD_Buff[7] = CRC_Lo ;
.................... 
....................                   //TxD_DataLen = 0x07 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
....................                   restart_wdt();
....................                   delay_ms(4);
....................                   restart_wdt();
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
....................                   putc(TxD_Buff[1]) ;               //Function Code
....................                   putc(TxD_Buff[2]) ;               //Byte Count
....................                   putc(TxD_Buff[3]) ;
....................                   putc(TxD_Buff[4]) ;
....................                   putc(TxD_Buff[5]) ;
....................                   putc(TxD_Buff[6]) ;
....................                   putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
....................                   delay_ms(3);
....................                   restart_wdt();
....................                   output_bit(P485ctrl,0);
....................                   }
....................                }
....................             }
....................             else
....................             {
....................                //invalid parameter
....................                TxD_Buff[0] = Address ;         //Address
....................                TxD_Buff[1] = 0x81 ;         //Function Code
....................                TxD_Buff[2] = 0x02 ;         //illegal data address
.................... 
....................                CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
.................... 
....................                TxD_Buff[3] = CRC_Hi ;
....................                TxD_Buff[4] = CRC_Lo ;
.................... 
....................                output_bit(P485ctrl,1);
....................                delay_ms(10);
.................... 
....................                putc(Txd_Buff[0]);
....................                putc(Txd_Buff[1]);
....................                putc(Txd_Buff[2]);
....................                putc(Txd_Buff[3]);
....................                putc(Txd_Buff[4]);
.................... 
....................                delay_ms(3);
....................                output_bit(P485ctrl,0);
....................             }
....................             */
....................          }
....................        
....................        /*-----JACK Comment 18/6/58----------//
....................          else
....................          {
....................             //Invalid function
....................             TxD_Buff[0] = Address ;         //Address
....................             TxD_Buff[1] = 0x81 ;         //Function Code
....................             TxD_Buff[2] = 0x01 ;         //illegal function
.................... 
....................             CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
.................... 
....................             TxD_Buff[3] = CRC_Hi ;
....................             TxD_Buff[4] = CRC_Lo ;
.................... 
....................             output_bit(P485ctrl,1);
....................             delay_ms(10);
.................... 
....................             putc(Txd_Buff[0]);
....................             putc(Txd_Buff[1]);
....................             putc(Txd_Buff[2]);
....................             putc(Txd_Buff[3]);
....................             putc(Txd_Buff[4]);
.................... 
....................             delay_ms(3);
....................             output_bit(P485ctrl,0);
....................          }
....................        *///-----JACK Comment----------//
....................       }  
.................... 
....................       Send_check_Time = 500; //5 Second
03EB4:  MOVLW  01
03EB6:  MOVWF  xF5
03EB8:  MOVLW  F4
03EBA:  MOVWF  xF4
....................    }
.................... 
....................    recieve_completed = 0 ;
03EBC:  BCF    30.4
....................    sequence = end_sq ;
03EBE:  MOVFF  6F,77
....................    T_timeout = 0x00;
03EC2:  MOVLB  1
03EC4:  CLRF   x16
....................    RxD_DataLen = 0x00 ;
03EC6:  MOVLB  0
03EC8:  CLRF   x79
....................    output_bit(P485ctrl,0);
03ECA:  BCF    F8A.3
03ECC:  BCF    F93.3
03ECE:  GOTO   6AC0 (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void Read_Input(void)
.................... {
.................... 
....................    int8 MCP23s17_1_A;
....................    int8 MCP23s17_1_B;
....................    int8 MCP23s17_2_A;
....................    int8 MCP23s17_2_B;
....................    
....................    //if(NoOfPoint >= 10)
....................    //{
....................       // if(NoOfPoint >= 20)
....................    //{   
....................      
....................       ///////////////////////--Edit--///////////////////
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
*
01332:  MOVLW  02
01334:  MOVLB  1
01336:  MOVWF  xC3
01338:  MOVLB  0
0133A:  RCALL  1202
0133C:  MOVFF  01,114
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01340:  BTFSS  1A.4
01342:  BRA    134A
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;   
01344:  MOVLB  1
01346:  COMF   x14,F
01348:  MOVLB  0
....................       }
....................       
....................       
....................      // FaultNow[11] = MCP23s17_Ip_dat;
....................       FaultNow[1] = MCP23s17_Ip_dat >> 1;
0134A:  BCF    FD8.0
0134C:  MOVLB  1
0134E:  RRCF   x14,W
01350:  BCF    x3B.1
01352:  BTFSC  FE8.0
01354:  BSF    x3B.1
....................       FaultNow[2] = MCP23s17_Ip_dat >> 2;
01356:  RRCF   x14,W
01358:  MOVWF  00
0135A:  RRCF   00,F
0135C:  MOVLW  3F
0135E:  ANDWF  00,F
01360:  BCF    x3B.2
01362:  BTFSC  00.0
01364:  BSF    x3B.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 3;
01366:  RRCF   x14,W
01368:  MOVWF  00
0136A:  RRCF   00,F
0136C:  RRCF   00,F
0136E:  MOVLW  1F
01370:  ANDWF  00,F
01372:  BCF    x3B.3
01374:  BTFSC  00.0
01376:  BSF    x3B.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 4;
01378:  SWAPF  x14,W
0137A:  MOVWF  00
0137C:  MOVLW  0F
0137E:  ANDWF  00,F
01380:  BCF    x3B.4
01382:  BTFSC  00.0
01384:  BSF    x3B.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 5;
01386:  SWAPF  x14,W
01388:  MOVWF  00
0138A:  RRCF   00,F
0138C:  MOVLW  07
0138E:  ANDWF  00,F
01390:  BCF    x3B.5
01392:  BTFSC  00.0
01394:  BSF    x3B.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 6;
01396:  SWAPF  x14,W
01398:  MOVWF  00
0139A:  RRCF   00,F
0139C:  RRCF   00,F
0139E:  MOVLW  03
013A0:  ANDWF  00,F
013A2:  BCF    x3B.6
013A4:  BTFSC  00.0
013A6:  BSF    x3B.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 7;
013A8:  CLRF   00
013AA:  BTFSC  x14.7
013AC:  BSF    00.0
013AE:  BCF    x3B.7
013B0:  BTFSC  00.0
013B2:  BSF    x3B.7
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
013B4:  MOVLW  02
013B6:  MOVWF  xC3
013B8:  MOVLB  0
013BA:  RCALL  121E
013BC:  MOVFF  01,114
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
013C0:  BTFSS  1A.4
013C2:  BRA    13CA
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
013C4:  MOVLB  1
013C6:  COMF   x14,F
013C8:  MOVLB  0
....................       }
....................       
....................       FaultNow[8] = MCP23s17_Ip_dat;
013CA:  MOVLB  1
013CC:  BCF    x3C.0
013CE:  BTFSC  x14.0
013D0:  BSF    x3C.0
....................       
....................       
....................        MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_0);
013D2:  CLRF   xC3
013D4:  MOVLB  0
013D6:  RCALL  1202
013D8:  MOVFF  01,114
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
013DC:  BTFSS  1A.4
013DE:  BRA    13E6
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;         
013E0:  MOVLB  1
013E2:  COMF   x14,F
013E4:  MOVLB  0
....................       }
....................       
....................       // FaultNow[11] = MCP23s17_Ip_dat;
....................       FaultNow[9] = MCP23s17_Ip_dat >> 1;
013E6:  BCF    FD8.0
013E8:  MOVLB  1
013EA:  RRCF   x14,W
013EC:  BCF    x3C.1
013EE:  BTFSC  FE8.0
013F0:  BSF    x3C.1
....................       FaultNow[10] = MCP23s17_Ip_dat >> 2;
013F2:  RRCF   x14,W
013F4:  MOVWF  00
013F6:  RRCF   00,F
013F8:  MOVLW  3F
013FA:  ANDWF  00,F
013FC:  BCF    x3C.2
013FE:  BTFSC  00.0
01400:  BSF    x3C.2
....................       FaultNow[11] = MCP23s17_Ip_dat >> 3;
01402:  RRCF   x14,W
01404:  MOVWF  00
01406:  RRCF   00,F
01408:  RRCF   00,F
0140A:  MOVLW  1F
0140C:  ANDWF  00,F
0140E:  BCF    x3C.3
01410:  BTFSC  00.0
01412:  BSF    x3C.3
....................       FaultNow[12] = MCP23s17_Ip_dat >> 4;
01414:  SWAPF  x14,W
01416:  MOVWF  00
01418:  MOVLW  0F
0141A:  ANDWF  00,F
0141C:  BCF    x3C.4
0141E:  BTFSC  00.0
01420:  BSF    x3C.4
....................       FaultNow[13] = MCP23s17_Ip_dat >> 5;
01422:  SWAPF  x14,W
01424:  MOVWF  00
01426:  RRCF   00,F
01428:  MOVLW  07
0142A:  ANDWF  00,F
0142C:  BCF    x3C.5
0142E:  BTFSC  00.0
01430:  BSF    x3C.5
....................       FaultNow[14] = MCP23s17_Ip_dat >> 6;
01432:  SWAPF  x14,W
01434:  MOVWF  00
01436:  RRCF   00,F
01438:  RRCF   00,F
0143A:  MOVLW  03
0143C:  ANDWF  00,F
0143E:  BCF    x3C.6
01440:  BTFSC  00.0
01442:  BSF    x3C.6
....................       FaultNow[15] = MCP23s17_Ip_dat >> 7;
01444:  CLRF   00
01446:  BTFSC  x14.7
01448:  BSF    00.0
0144A:  BCF    x3C.7
0144C:  BTFSC  00.0
0144E:  BSF    x3C.7
....................       
....................        MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
01450:  CLRF   xC3
01452:  MOVLB  0
01454:  RCALL  121E
01456:  MOVFF  01,114
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
0145A:  BTFSS  1A.4
0145C:  BRA    1464
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
0145E:  MOVLB  1
01460:  COMF   x14,F
01462:  MOVLB  0
....................       }
....................       
....................       
....................       FaultNow[16] = MCP23s17_Ip_dat;
01464:  MOVLB  1
01466:  BCF    x3D.0
01468:  BTFSC  x14.0
0146A:  BSF    x3D.0
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=16; i++)
0146C:  MOVLW  01
0146E:  MOVWF  xC2
01470:  MOVF   xC2,W
01472:  SUBLW  10
01474:  BTFSS  FD8.0
01476:  BRA    19E0
....................       {
....................          if(FaultNCNO[i] ==NO)
01478:  MOVFF  1C2,1C6
0147C:  MOVLW  01
0147E:  MOVWF  xC8
01480:  MOVLW  B7
01482:  MOVWF  xC7
01484:  MOVLB  0
01486:  RCALL  123A
01488:  MOVF   01,W
0148A:  ANDLW  01
0148C:  SUBLW  01
0148E:  BTFSS  FD8.2
01490:  BRA    1728
....................          {
....................              if(FaultNow[i]==0)
01492:  MOVFF  1C2,1C6
01496:  MOVLW  01
01498:  MOVLB  1
0149A:  MOVWF  xC8
0149C:  MOVLW  3B
0149E:  MOVWF  xC7
014A0:  MOVLB  0
014A2:  RCALL  123A
014A4:  MOVF   01,W
014A6:  ANDLW  01
014A8:  BTFSS  FD8.2
014AA:  BRA    15EA
....................              {   
....................                if(FaultAgo[i]==0)
014AC:  MOVFF  1C2,1C6
014B0:  MOVLW  01
014B2:  MOVLB  1
014B4:  MOVWF  xC8
014B6:  MOVLW  37
014B8:  MOVWF  xC7
014BA:  MOVLB  0
014BC:  RCALL  123A
014BE:  MOVF   01,W
014C0:  ANDLW  01
014C2:  BTFSS  FD8.2
014C4:  BRA    15CE
....................                {
....................                    ReleaseTime[i]++;
014C6:  BCF    FD8.0
014C8:  MOVLB  1
014CA:  RLCF   xC2,W
014CC:  CLRF   03
014CE:  ADDLW  3F
014D0:  MOVWF  FE9
014D2:  MOVLW  01
014D4:  ADDWFC 03,W
014D6:  MOVWF  FEA
014D8:  MOVLW  01
014DA:  ADDWF  FEE,F
014DC:  BNC   14E0
014DE:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
014E0:  BCF    FD8.0
014E2:  RLCF   xC2,W
014E4:  CLRF   03
014E6:  ADDLW  3F
014E8:  MOVWF  FE9
014EA:  MOVLW  01
014EC:  ADDWFC 03,W
014EE:  MOVWF  FEA
014F0:  MOVFF  FEC,1C4
014F4:  MOVF   FED,F
014F6:  MOVFF  FEF,1C3
014FA:  BCF    FD8.0
014FC:  RLCF   xC2,W
014FE:  CLRF   03
01500:  ADDLW  7B
01502:  MOVWF  FE9
01504:  MOVLW  01
01506:  ADDWFC 03,W
01508:  MOVWF  FEA
0150A:  MOVFF  FEC,1C8
0150E:  MOVF   FED,F
01510:  MOVFF  FEF,1C7
01514:  CLRF   xCA
01516:  MOVLW  4B
01518:  MOVWF  xC9
0151A:  MOVLB  0
0151C:  RCALL  1270
0151E:  MOVFF  02,1C6
01522:  MOVFF  01,1C5
01526:  MOVLW  0F
01528:  MOVLB  1
0152A:  ADDWF  01,W
0152C:  MOVWF  01
0152E:  MOVLW  00
01530:  ADDWFC 02,W
01532:  MOVWF  03
01534:  MOVF   03,W
01536:  SUBWF  xC4,W
01538:  BNC   15CA
0153A:  BNZ   1542
0153C:  MOVF   01,W
0153E:  SUBWF  xC3,W
01540:  BNC   15CA
....................                    {   
....................                      ReleaseTime[i] = 0;
01542:  BCF    FD8.0
01544:  RLCF   xC2,W
01546:  CLRF   03
01548:  ADDLW  3F
0154A:  MOVWF  FE9
0154C:  MOVLW  01
0154E:  ADDWFC 03,W
01550:  MOVWF  FEA
01552:  CLRF   FEC
01554:  MOVF   FED,F
01556:  CLRF   FEF
....................                      switch(i)
01558:  MOVLW  01
0155A:  SUBWF  xC2,W
0155C:  ADDLW  F0
0155E:  BC    15CA
01560:  ADDLW  10
01562:  MOVLB  0
01564:  GOTO   1B58
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
01568:  MOVLB  1
0156A:  BCF    x1B.0
....................                         break;
0156C:  BRA    15CA
....................                         case 2:
....................                            Inputt.B2 = 0; 
0156E:  MOVLB  1
01570:  BCF    x1B.1
....................                         break;
01572:  BRA    15CA
....................                         case 3:
....................                            Inputt.B3 = 0; 
01574:  MOVLB  1
01576:  BCF    x1B.2
....................                         break;
01578:  BRA    15CA
....................                         case 4:
....................                            Inputt.B4 = 0; 
0157A:  MOVLB  1
0157C:  BCF    x1B.3
....................                         break;
0157E:  BRA    15CA
....................                         case 5:
....................                            Inputt.B5 = 0; 
01580:  MOVLB  1
01582:  BCF    x1B.4
....................                         break;
01584:  BRA    15CA
....................                         case 6:
....................                            Inputt.B6 = 0; 
01586:  MOVLB  1
01588:  BCF    x1B.5
....................                         break;
0158A:  BRA    15CA
....................                         case 7:
....................                            Inputt.B7 = 0; 
0158C:  MOVLB  1
0158E:  BCF    x1B.6
....................                          break;
01590:  BRA    15CA
....................                          case 8:
....................                            Inputt.B8 = 0; 
01592:  MOVLB  1
01594:  BCF    x1B.7
....................                         break;
01596:  BRA    15CA
....................                         case 9:
....................                            Inputt.B9 = 0; 
01598:  MOVLB  1
0159A:  BCF    x1C.0
....................                         break;
0159C:  BRA    15CA
....................                         case 10:
....................                            Inputt.B10 = 0; 
0159E:  MOVLB  1
015A0:  BCF    x1C.1
....................                         break;
015A2:  BRA    15CA
....................                         case 11:
....................                            Inputt.B11 = 0; 
015A4:  MOVLB  1
015A6:  BCF    x1C.2
....................                         break;
015A8:  BRA    15CA
....................                         case 12:
....................                            Inputt.B12 = 0; 
015AA:  MOVLB  1
015AC:  BCF    x1C.3
....................                         break;
015AE:  BRA    15CA
....................                         case 13:
....................                            Inputt.B13 = 0; 
015B0:  MOVLB  1
015B2:  BCF    x1C.4
....................                         break;
015B4:  BRA    15CA
....................                         case 14:
....................                            Inputt.B14 = 0; 
015B6:  MOVLB  1
015B8:  BCF    x1C.5
....................                         break;
015BA:  BRA    15CA
....................                         case 15:
....................                            Inputt.B15 = 0; 
015BC:  MOVLB  1
015BE:  BCF    x1C.6
....................                         break;
015C0:  BRA    15CA
....................                         case 16:
....................                             Inputt.B16 = 0; 
015C2:  MOVLB  1
015C4:  BCF    x1C.7
....................                          break;
015C6:  BRA    15CA
015C8:  MOVLB  1
....................                                    
....................                      }                 
....................                    }
....................                }
015CA:  BRA    15E6
015CC:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
015CE:  BCF    FD8.0
015D0:  MOVLB  1
015D2:  RLCF   xC2,W
015D4:  CLRF   03
015D6:  ADDLW  3F
015D8:  MOVWF  FE9
015DA:  MOVLW  01
015DC:  ADDWFC 03,W
015DE:  MOVWF  FEA
015E0:  CLRF   FEC
015E2:  MOVF   FED,F
015E4:  CLRF   FEF
....................                }
....................              }
015E6:  BRA    1726
015E8:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
015EA:  MOVFF  1C2,1C6
015EE:  MOVLW  01
015F0:  MOVLB  1
015F2:  MOVWF  xC8
015F4:  MOVLW  37
015F6:  MOVWF  xC7
015F8:  MOVLB  0
015FA:  RCALL  123A
015FC:  MOVF   01,W
015FE:  ANDLW  01
01600:  SUBLW  01
01602:  BTFSS  FD8.2
01604:  BRA    170E
....................                {
....................                    ReleaseTime[i]++;
01606:  BCF    FD8.0
01608:  MOVLB  1
0160A:  RLCF   xC2,W
0160C:  CLRF   03
0160E:  ADDLW  3F
01610:  MOVWF  FE9
01612:  MOVLW  01
01614:  ADDWFC 03,W
01616:  MOVWF  FEA
01618:  MOVLW  01
0161A:  ADDWF  FEE,F
0161C:  BNC   1620
0161E:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01620:  BCF    FD8.0
01622:  RLCF   xC2,W
01624:  CLRF   03
01626:  ADDLW  3F
01628:  MOVWF  FE9
0162A:  MOVLW  01
0162C:  ADDWFC 03,W
0162E:  MOVWF  FEA
01630:  MOVFF  FEC,1C4
01634:  MOVF   FED,F
01636:  MOVFF  FEF,1C3
0163A:  BCF    FD8.0
0163C:  RLCF   xC2,W
0163E:  CLRF   03
01640:  ADDLW  7B
01642:  MOVWF  FE9
01644:  MOVLW  01
01646:  ADDWFC 03,W
01648:  MOVWF  FEA
0164A:  MOVFF  FEC,1C8
0164E:  MOVF   FED,F
01650:  MOVFF  FEF,1C7
01654:  CLRF   xCA
01656:  MOVLW  4B
01658:  MOVWF  xC9
0165A:  MOVLB  0
0165C:  RCALL  1270
0165E:  MOVFF  02,1C6
01662:  MOVFF  01,1C5
01666:  MOVLW  0F
01668:  MOVLB  1
0166A:  ADDWF  01,W
0166C:  MOVWF  01
0166E:  MOVLW  00
01670:  ADDWFC 02,W
01672:  MOVWF  03
01674:  MOVF   03,W
01676:  SUBWF  xC4,W
01678:  BNC   170A
0167A:  BNZ   1682
0167C:  MOVF   01,W
0167E:  SUBWF  xC3,W
01680:  BNC   170A
....................                    {   
....................                      ReleaseTime[i] = 1;
01682:  BCF    FD8.0
01684:  RLCF   xC2,W
01686:  CLRF   03
01688:  ADDLW  3F
0168A:  MOVWF  FE9
0168C:  MOVLW  01
0168E:  ADDWFC 03,W
01690:  MOVWF  FEA
01692:  CLRF   FEC
01694:  MOVF   FED,F
01696:  MOVLW  01
01698:  MOVWF  FEF
....................                      switch(i)
0169A:  SUBWF  xC2,W
0169C:  ADDLW  F0
0169E:  BC    170A
016A0:  ADDLW  10
016A2:  MOVLB  0
016A4:  GOTO   1B92
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
016A8:  MOVLB  1
016AA:  BSF    x1B.0
....................                         break;
016AC:  BRA    170A
....................                         case 2:
....................                            Inputt.B2 = 1; 
016AE:  MOVLB  1
016B0:  BSF    x1B.1
....................                         break;
016B2:  BRA    170A
....................                         case 3:
....................                            Inputt.B3 = 1; 
016B4:  MOVLB  1
016B6:  BSF    x1B.2
....................                         break;
016B8:  BRA    170A
....................                         case 4:
....................                            Inputt.B4 = 1; 
016BA:  MOVLB  1
016BC:  BSF    x1B.3
....................                         break;
016BE:  BRA    170A
....................                         case 5:
....................                            Inputt.B5 = 1; 
016C0:  MOVLB  1
016C2:  BSF    x1B.4
....................                         break;
016C4:  BRA    170A
....................                         case 6:
....................                            Inputt.B6 = 1; 
016C6:  MOVLB  1
016C8:  BSF    x1B.5
....................                         break;
016CA:  BRA    170A
....................                         case 7:
....................                            Inputt.B7 = 1; 
016CC:  MOVLB  1
016CE:  BSF    x1B.6
....................                          break;
016D0:  BRA    170A
....................                          case 8:
....................                          Inputt.B8 = 1; 
016D2:  MOVLB  1
016D4:  BSF    x1B.7
....................                         break;
016D6:  BRA    170A
....................                         case 9:
....................                            Inputt.B9 = 1; 
016D8:  MOVLB  1
016DA:  BSF    x1C.0
....................                         break;
016DC:  BRA    170A
....................                         case 10:
....................                            Inputt.B10 = 1; 
016DE:  MOVLB  1
016E0:  BSF    x1C.1
....................                         break;
016E2:  BRA    170A
....................                         case 11:
....................                            Inputt.B11 = 1; 
016E4:  MOVLB  1
016E6:  BSF    x1C.2
....................                         break;
016E8:  BRA    170A
....................                         case 12:
....................                            Inputt.B12 = 1; 
016EA:  MOVLB  1
016EC:  BSF    x1C.3
....................                         break;
016EE:  BRA    170A
....................                         case 13:
....................                            Inputt.B13 = 1; 
016F0:  MOVLB  1
016F2:  BSF    x1C.4
....................                         break;
016F4:  BRA    170A
....................                         case 14:
....................                            Inputt.B14 = 1; 
016F6:  MOVLB  1
016F8:  BSF    x1C.5
....................                         break;
016FA:  BRA    170A
....................                         case 15:
....................                            Inputt.B15 = 1; 
016FC:  MOVLB  1
016FE:  BSF    x1C.6
....................                         break;
01700:  BRA    170A
....................                         case 16:
....................                             Inputt.B16 = 1;
01702:  MOVLB  1
01704:  BSF    x1C.7
....................                          break;
01706:  BRA    170A
01708:  MOVLB  1
....................                                    
....................                      }                 
....................                    }
....................                }
0170A:  BRA    1726
0170C:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
0170E:  BCF    FD8.0
01710:  MOVLB  1
01712:  RLCF   xC2,W
01714:  CLRF   03
01716:  ADDLW  3F
01718:  MOVWF  FE9
0171A:  MOVLW  01
0171C:  ADDWFC 03,W
0171E:  MOVWF  FEA
01720:  CLRF   FEC
01722:  MOVF   FED,F
01724:  CLRF   FEF
....................                }
....................              
....................              /*
....................                   ReleaseTime[i] = 0;
....................                   switch(i)
....................                   {
....................                       case 1:
....................                          Inputt.B1 = 1; 
....................                       break;
....................                       case 2:
....................                          Inputt.B2 = 1; 
....................                       break;
....................                       case 3:
....................                          Inputt.B3 = 1; 
....................                       break;
....................                       case 4:
....................                          Inputt.B4 = 1; 
....................                       break;
....................                       case 5:
....................                          Inputt.B5 = 1; 
....................                       break;
....................                       case 6:
....................                          Inputt.B6 = 1; 
....................                       break;
....................                       case 7:
....................                          Inputt.B7 = 1; 
....................                       break;
....................                       case 8:
....................                          Inputt.B8 = 1; 
....................                       break;
....................                       case 9:
....................                          Inputt.B9 = 1; 
....................                       break;
....................                       case 10:
....................                          Inputt.B10 = 1; 
....................                       break;
....................                       case 11:
....................                          Inputt.B11 = 1; 
....................                       break;
....................                       case 12:
....................                          Inputt.B12 = 1; 
....................                       break;
....................                       case 13:
....................                          Inputt.B13 = 1; 
....................                       break;
....................                       case 14:
....................                          Inputt.B14 = 1; 
....................                       break;
....................                       case 15:
....................                          Inputt.B15 = 1; 
....................                       break;
....................                       case 16:
....................                          Inputt.B16 = 1; 
....................                       break;
....................                          
....................                   }
....................                   */
....................              }
....................           }
01726:  BRA    19D8
....................           else if(FaultNCNO[i] ==NC)
01728:  MOVFF  1C2,1C6
0172C:  MOVLW  01
0172E:  MOVLB  1
01730:  MOVWF  xC8
01732:  MOVLW  B7
01734:  MOVWF  xC7
01736:  MOVLB  0
01738:  RCALL  123A
0173A:  MOVF   01,W
0173C:  ANDLW  01
0173E:  BTFSS  FD8.2
01740:  BRA    19DA
....................           {
....................              if(FaultNow[i]==1)
01742:  MOVFF  1C2,1C6
01746:  MOVLW  01
01748:  MOVLB  1
0174A:  MOVWF  xC8
0174C:  MOVLW  3B
0174E:  MOVWF  xC7
01750:  MOVLB  0
01752:  RCALL  123A
01754:  MOVF   01,W
01756:  ANDLW  01
01758:  SUBLW  01
0175A:  BTFSS  FD8.2
0175C:  BRA    189E
....................              {
....................                if(FaultAgo[i]==1)
0175E:  MOVFF  1C2,1C6
01762:  MOVLW  01
01764:  MOVLB  1
01766:  MOVWF  xC8
01768:  MOVLW  37
0176A:  MOVWF  xC7
0176C:  MOVLB  0
0176E:  RCALL  123A
01770:  MOVF   01,W
01772:  ANDLW  01
01774:  SUBLW  01
01776:  BTFSS  FD8.2
01778:  BRA    1882
....................                {
....................                    ReleaseTime[i]++;
0177A:  BCF    FD8.0
0177C:  MOVLB  1
0177E:  RLCF   xC2,W
01780:  CLRF   03
01782:  ADDLW  3F
01784:  MOVWF  FE9
01786:  MOVLW  01
01788:  ADDWFC 03,W
0178A:  MOVWF  FEA
0178C:  MOVLW  01
0178E:  ADDWF  FEE,F
01790:  BNC   1794
01792:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01794:  BCF    FD8.0
01796:  RLCF   xC2,W
01798:  CLRF   03
0179A:  ADDLW  3F
0179C:  MOVWF  FE9
0179E:  MOVLW  01
017A0:  ADDWFC 03,W
017A2:  MOVWF  FEA
017A4:  MOVFF  FEC,1C4
017A8:  MOVF   FED,F
017AA:  MOVFF  FEF,1C3
017AE:  BCF    FD8.0
017B0:  RLCF   xC2,W
017B2:  CLRF   03
017B4:  ADDLW  7B
017B6:  MOVWF  FE9
017B8:  MOVLW  01
017BA:  ADDWFC 03,W
017BC:  MOVWF  FEA
017BE:  MOVFF  FEC,1C8
017C2:  MOVF   FED,F
017C4:  MOVFF  FEF,1C7
017C8:  CLRF   xCA
017CA:  MOVLW  4B
017CC:  MOVWF  xC9
017CE:  MOVLB  0
017D0:  RCALL  1270
017D2:  MOVFF  02,1C6
017D6:  MOVFF  01,1C5
017DA:  MOVLW  0F
017DC:  MOVLB  1
017DE:  ADDWF  01,W
017E0:  MOVWF  01
017E2:  MOVLW  00
017E4:  ADDWFC 02,W
017E6:  MOVWF  03
017E8:  MOVF   03,W
017EA:  SUBWF  xC4,W
017EC:  BNC   187E
017EE:  BNZ   17F6
017F0:  MOVF   01,W
017F2:  SUBWF  xC3,W
017F4:  BNC   187E
....................                    {   
....................                      ReleaseTime[i] = 0;
017F6:  BCF    FD8.0
017F8:  RLCF   xC2,W
017FA:  CLRF   03
017FC:  ADDLW  3F
017FE:  MOVWF  FE9
01800:  MOVLW  01
01802:  ADDWFC 03,W
01804:  MOVWF  FEA
01806:  CLRF   FEC
01808:  MOVF   FED,F
0180A:  CLRF   FEF
....................                      switch(i)
0180C:  MOVLW  01
0180E:  SUBWF  xC2,W
01810:  ADDLW  F0
01812:  BC    187E
01814:  ADDLW  10
01816:  MOVLB  0
01818:  GOTO   1BCC
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
0181C:  MOVLB  1
0181E:  BSF    x1B.0
....................                         break;
01820:  BRA    187E
....................                         case 2:
....................                            Inputt.B2 = 1; 
01822:  MOVLB  1
01824:  BSF    x1B.1
....................                         break;
01826:  BRA    187E
....................                         case 3:
....................                            Inputt.B3 = 1; 
01828:  MOVLB  1
0182A:  BSF    x1B.2
....................                         break;
0182C:  BRA    187E
....................                         case 4:
....................                            Inputt.B4 = 1; 
0182E:  MOVLB  1
01830:  BSF    x1B.3
....................                         break;
01832:  BRA    187E
....................                         case 5:
....................                            Inputt.B5 = 1; 
01834:  MOVLB  1
01836:  BSF    x1B.4
....................                         break;
01838:  BRA    187E
....................                         case 6:
....................                            Inputt.B6 = 1; 
0183A:  MOVLB  1
0183C:  BSF    x1B.5
....................                         break;
0183E:  BRA    187E
....................                         case 7:
....................                            Inputt.B7 = 1; 
01840:  MOVLB  1
01842:  BSF    x1B.6
....................                          break;
01844:  BRA    187E
....................                          case 8:
....................                            Inputt.B8 = 1; 
01846:  MOVLB  1
01848:  BSF    x1B.7
....................                         break;
0184A:  BRA    187E
....................                         case 9:
....................                            Inputt.B9 = 1; 
0184C:  MOVLB  1
0184E:  BSF    x1C.0
....................                         break;
01850:  BRA    187E
....................                         case 10:
....................                            Inputt.B10 = 1; 
01852:  MOVLB  1
01854:  BSF    x1C.1
....................                         break;
01856:  BRA    187E
....................                         case 11:
....................                            Inputt.B11 = 1; 
01858:  MOVLB  1
0185A:  BSF    x1C.2
....................                         break;
0185C:  BRA    187E
....................                         case 12:
....................                            Inputt.B12 = 1; 
0185E:  MOVLB  1
01860:  BSF    x1C.3
....................                         break;
01862:  BRA    187E
....................                         case 13:
....................                            Inputt.B13 = 1; 
01864:  MOVLB  1
01866:  BSF    x1C.4
....................                         break;
01868:  BRA    187E
....................                         case 14:
....................                            Inputt.B14 = 1; 
0186A:  MOVLB  1
0186C:  BSF    x1C.5
....................                         break;
0186E:  BRA    187E
....................                         case 15:
....................                            Inputt.B15 = 1; 
01870:  MOVLB  1
01872:  BSF    x1C.6
....................                         break;
01874:  BRA    187E
....................                         case 16:
....................                             Inputt.B16 = 1; 
01876:  MOVLB  1
01878:  BSF    x1C.7
....................                          break;
0187A:  BRA    187E
0187C:  MOVLB  1
....................                                                                    
....................                      }                 
....................                   }
....................                }
0187E:  BRA    189A
01880:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01882:  BCF    FD8.0
01884:  MOVLB  1
01886:  RLCF   xC2,W
01888:  CLRF   03
0188A:  ADDLW  3F
0188C:  MOVWF  FE9
0188E:  MOVLW  01
01890:  ADDWFC 03,W
01892:  MOVWF  FEA
01894:  CLRF   FEC
01896:  MOVF   FED,F
01898:  CLRF   FEF
....................                }
....................              }
0189A:  BRA    19D8
0189C:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
0189E:  MOVFF  1C2,1C6
018A2:  MOVLW  01
018A4:  MOVLB  1
018A6:  MOVWF  xC8
018A8:  MOVLW  37
018AA:  MOVWF  xC7
018AC:  MOVLB  0
018AE:  RCALL  123A
018B0:  MOVF   01,W
018B2:  ANDLW  01
018B4:  BTFSS  FD8.2
018B6:  BRA    19C0
....................                {
....................                    ReleaseTime[i]++;
018B8:  BCF    FD8.0
018BA:  MOVLB  1
018BC:  RLCF   xC2,W
018BE:  CLRF   03
018C0:  ADDLW  3F
018C2:  MOVWF  FE9
018C4:  MOVLW  01
018C6:  ADDWFC 03,W
018C8:  MOVWF  FEA
018CA:  MOVLW  01
018CC:  ADDWF  FEE,F
018CE:  BNC   18D2
018D0:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
018D2:  BCF    FD8.0
018D4:  RLCF   xC2,W
018D6:  CLRF   03
018D8:  ADDLW  3F
018DA:  MOVWF  FE9
018DC:  MOVLW  01
018DE:  ADDWFC 03,W
018E0:  MOVWF  FEA
018E2:  MOVFF  FEC,1C4
018E6:  MOVF   FED,F
018E8:  MOVFF  FEF,1C3
018EC:  BCF    FD8.0
018EE:  RLCF   xC2,W
018F0:  CLRF   03
018F2:  ADDLW  7B
018F4:  MOVWF  FE9
018F6:  MOVLW  01
018F8:  ADDWFC 03,W
018FA:  MOVWF  FEA
018FC:  MOVFF  FEC,1C8
01900:  MOVF   FED,F
01902:  MOVFF  FEF,1C7
01906:  CLRF   xCA
01908:  MOVLW  4B
0190A:  MOVWF  xC9
0190C:  MOVLB  0
0190E:  RCALL  1270
01910:  MOVFF  02,1C6
01914:  MOVFF  01,1C5
01918:  MOVLW  0F
0191A:  MOVLB  1
0191C:  ADDWF  01,W
0191E:  MOVWF  01
01920:  MOVLW  00
01922:  ADDWFC 02,W
01924:  MOVWF  03
01926:  MOVF   03,W
01928:  SUBWF  xC4,W
0192A:  BNC   19BC
0192C:  BNZ   1934
0192E:  MOVF   01,W
01930:  SUBWF  xC3,W
01932:  BNC   19BC
....................                    {   
....................                      ReleaseTime[i] = 0;
01934:  BCF    FD8.0
01936:  RLCF   xC2,W
01938:  CLRF   03
0193A:  ADDLW  3F
0193C:  MOVWF  FE9
0193E:  MOVLW  01
01940:  ADDWFC 03,W
01942:  MOVWF  FEA
01944:  CLRF   FEC
01946:  MOVF   FED,F
01948:  CLRF   FEF
....................                      switch(i)
0194A:  MOVLW  01
0194C:  SUBWF  xC2,W
0194E:  ADDLW  F0
01950:  BC    19BC
01952:  ADDLW  10
01954:  MOVLB  0
01956:  GOTO   1C06
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
0195A:  MOVLB  1
0195C:  BCF    x1B.0
....................                         break;
0195E:  BRA    19BC
....................                         case 2:
....................                            Inputt.B2 = 0; 
01960:  MOVLB  1
01962:  BCF    x1B.1
....................                         break;
01964:  BRA    19BC
....................                         case 3:
....................                            Inputt.B3 = 0; 
01966:  MOVLB  1
01968:  BCF    x1B.2
....................                         break;
0196A:  BRA    19BC
....................                         case 4:
....................                            Inputt.B4 = 0; 
0196C:  MOVLB  1
0196E:  BCF    x1B.3
....................                         break;
01970:  BRA    19BC
....................                         case 5:
....................                            Inputt.B5 = 0; 
01972:  MOVLB  1
01974:  BCF    x1B.4
....................                         break;
01976:  BRA    19BC
....................                         case 6:
....................                            Inputt.B6 = 0; 
01978:  MOVLB  1
0197A:  BCF    x1B.5
....................                         break;
0197C:  BRA    19BC
....................                         case 7:
....................                            Inputt.B7 = 0; 
0197E:  MOVLB  1
01980:  BCF    x1B.6
....................                          break;
01982:  BRA    19BC
....................                          case 8:
....................                            Inputt.B8 = 0; 
01984:  MOVLB  1
01986:  BCF    x1B.7
....................                         break;
01988:  BRA    19BC
....................                         case 9:
....................                            Inputt.B9 = 0; 
0198A:  MOVLB  1
0198C:  BCF    x1C.0
....................                         break;
0198E:  BRA    19BC
....................                         case 10:
....................                            Inputt.B10 = 0; 
01990:  MOVLB  1
01992:  BCF    x1C.1
....................                         break;
01994:  BRA    19BC
....................                         case 11:
....................                            Inputt.B11 = 0; 
01996:  MOVLB  1
01998:  BCF    x1C.2
....................                         break;
0199A:  BRA    19BC
....................                         case 12:
....................                            Inputt.B12 = 0; 
0199C:  MOVLB  1
0199E:  BCF    x1C.3
....................                         break;
019A0:  BRA    19BC
....................                         case 13:
....................                            Inputt.B13 = 0; 
019A2:  MOVLB  1
019A4:  BCF    x1C.4
....................                         break;
019A6:  BRA    19BC
....................                         case 14:
....................                            Inputt.B14 = 0; 
019A8:  MOVLB  1
019AA:  BCF    x1C.5
....................                         break;
019AC:  BRA    19BC
....................                         case 15:
....................                            Inputt.B15 = 0; 
019AE:  MOVLB  1
019B0:  BCF    x1C.6
....................                         break;
019B2:  BRA    19BC
....................                         case 16:
....................                             Inputt.B16 = 0;
019B4:  MOVLB  1
019B6:  BCF    x1C.7
....................                          break;
019B8:  BRA    19BC
019BA:  MOVLB  1
....................                                    
....................                      }                 
....................                    }
....................                }
019BC:  BRA    19D8
019BE:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
019C0:  BCF    FD8.0
019C2:  MOVLB  1
019C4:  RLCF   xC2,W
019C6:  CLRF   03
019C8:  ADDLW  3F
019CA:  MOVWF  FE9
019CC:  MOVLW  01
019CE:  ADDWFC 03,W
019D0:  MOVWF  FEA
019D2:  CLRF   FEC
019D4:  MOVF   FED,F
019D6:  CLRF   FEF
019D8:  MOVLB  0
....................                }
....................                   /*
....................                   ReleaseTime[i] = 0;
....................                   switch(i)
....................                   {
....................                       case 1:
....................                          Inputt.B1 = 0; 
....................                       break;
....................                       case 2:
....................                          Inputt.B2 = 0; 
....................                       break;
....................                       case 3:
....................                          Inputt.B3 = 0; 
....................                       break;
....................                       case 4:
....................                          Inputt.B4 = 0; 
....................                       break;
....................                       case 5:
....................                          Inputt.B5 = 0; 
....................                       break;
....................                       case 6:
....................                          Inputt.B6 = 0; 
....................                       break;
....................                       case 7:
....................                          Inputt.B7 = 0; 
....................                       break;
....................                       case 8:
....................                          Inputt.B8 = 0; 
....................                       break;
....................                       case 9:
....................                          Inputt.B9 = 0; 
....................                       break;
....................                       case 10:
....................                          Inputt.B10 = 0; 
....................                       break;
....................                       case 11:
....................                          Inputt.B11 = 0; 
....................                       break;
....................                       case 12:
....................                          Inputt.B12 = 0; 
....................                       break;
....................                       case 13:
....................                          Inputt.B13 = 0; 
....................                       break;
....................                       case 14:
....................                          Inputt.B14 = 0; 
....................                       break;
....................                       case 15:
....................                          Inputt.B15 = 0; 
....................                       break;
....................                       case 16:
....................                          Inputt.B16 = 0; 
....................                       break;
....................                              
....................                   }
....................                   */
....................              }
....................           }
019DA:  MOVLB  1
019DC:  INCF   xC2,F
019DE:  BRA    1470
....................       }
....................       
....................       StoreReleaseFault();
019E0:  MOVLB  0
019E2:  BRA    12D4
....................       
....................       Input11_18 = 0x00;
019E4:  CLRF   4C
....................       Input11_18 = Input11_18 | ~Inputt.B16;
019E6:  MOVLW  00
019E8:  MOVLB  1
019EA:  BTFSS  x1C.7
019EC:  MOVLW  01
019EE:  IORWF  4C,F
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B16;
019F0:  BCF    FD8.0
019F2:  RLCF   4C,W
019F4:  MOVWF  xC3
019F6:  MOVLW  00
019F8:  BTFSS  x1C.7
019FA:  MOVLW  01
019FC:  IORWF  xC3,W
019FE:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B16;
01A00:  BCF    FD8.0
01A02:  RLCF   4C,W
01A04:  MOVWF  xC3
01A06:  MOVLW  00
01A08:  BTFSS  x1C.7
01A0A:  MOVLW  01
01A0C:  IORWF  xC3,W
01A0E:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B15;
01A10:  BCF    FD8.0
01A12:  RLCF   4C,W
01A14:  MOVWF  xC3
01A16:  MOVLW  00
01A18:  BTFSS  x1C.6
01A1A:  MOVLW  01
01A1C:  IORWF  xC3,W
01A1E:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B14;
01A20:  BCF    FD8.0
01A22:  RLCF   4C,W
01A24:  MOVWF  xC3
01A26:  MOVLW  00
01A28:  BTFSS  x1C.5
01A2A:  MOVLW  01
01A2C:  IORWF  xC3,W
01A2E:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B13;
01A30:  BCF    FD8.0
01A32:  RLCF   4C,W
01A34:  MOVWF  xC3
01A36:  MOVLW  00
01A38:  BTFSS  x1C.4
01A3A:  MOVLW  01
01A3C:  IORWF  xC3,W
01A3E:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B12;
01A40:  BCF    FD8.0
01A42:  RLCF   4C,W
01A44:  MOVWF  xC3
01A46:  MOVLW  00
01A48:  BTFSS  x1C.3
01A4A:  MOVLW  01
01A4C:  IORWF  xC3,W
01A4E:  MOVWF  4C
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B11;
01A50:  BCF    FD8.0
01A52:  RLCF   4C,W
01A54:  MOVWF  xC3
01A56:  MOVLW  00
01A58:  BTFSS  x1C.2
01A5A:  MOVLW  01
01A5C:  IORWF  xC3,W
01A5E:  MOVWF  4C
....................       
....................    
....................       Input1_8 = 0x00;
01A60:  CLRF   49
....................       Input1_8 = Input1_8 | ~Inputt.B8;
01A62:  MOVLW  00
01A64:  BTFSS  x1B.7
01A66:  MOVLW  01
01A68:  IORWF  49,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
01A6A:  BCF    FD8.0
01A6C:  RLCF   49,W
01A6E:  MOVWF  xC3
01A70:  MOVLW  00
01A72:  BTFSS  x1B.6
01A74:  MOVLW  01
01A76:  IORWF  xC3,W
01A78:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
01A7A:  BCF    FD8.0
01A7C:  RLCF   49,W
01A7E:  MOVWF  xC3
01A80:  MOVLW  00
01A82:  BTFSS  x1B.5
01A84:  MOVLW  01
01A86:  IORWF  xC3,W
01A88:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
01A8A:  BCF    FD8.0
01A8C:  RLCF   49,W
01A8E:  MOVWF  xC3
01A90:  MOVLW  00
01A92:  BTFSS  x1B.4
01A94:  MOVLW  01
01A96:  IORWF  xC3,W
01A98:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
01A9A:  BCF    FD8.0
01A9C:  RLCF   49,W
01A9E:  MOVWF  xC3
01AA0:  MOVLW  00
01AA2:  BTFSS  x1B.3
01AA4:  MOVLW  01
01AA6:  IORWF  xC3,W
01AA8:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
01AAA:  BCF    FD8.0
01AAC:  RLCF   49,W
01AAE:  MOVWF  xC3
01AB0:  MOVLW  00
01AB2:  BTFSS  x1B.2
01AB4:  MOVLW  01
01AB6:  IORWF  xC3,W
01AB8:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
01ABA:  BCF    FD8.0
01ABC:  RLCF   49,W
01ABE:  MOVWF  xC3
01AC0:  MOVLW  00
01AC2:  BTFSS  x1B.1
01AC4:  MOVLW  01
01AC6:  IORWF  xC3,W
01AC8:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
01ACA:  BCF    FD8.0
01ACC:  RLCF   49,W
01ACE:  MOVWF  xC3
01AD0:  MOVLW  00
01AD2:  BTFSS  x1B.0
01AD4:  MOVLW  01
01AD6:  IORWF  xC3,W
01AD8:  MOVWF  49
....................     
....................       //Input9_10 = 0x00;
....................       //Input9_10 = Input9_10 | ~Inputt.B10;
....................       //Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
....................       
....................       Input9_16 = 0x00;
01ADA:  CLRF   4A
....................       Input9_16 = Input9_16 | ~Inputt.B16;
01ADC:  MOVLW  00
01ADE:  BTFSS  x1C.7
01AE0:  MOVLW  01
01AE2:  IORWF  4A,F
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B15;
01AE4:  BCF    FD8.0
01AE6:  RLCF   4A,W
01AE8:  MOVWF  xC3
01AEA:  MOVLW  00
01AEC:  BTFSS  x1C.6
01AEE:  MOVLW  01
01AF0:  IORWF  xC3,W
01AF2:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B14;
01AF4:  BCF    FD8.0
01AF6:  RLCF   4A,W
01AF8:  MOVWF  xC3
01AFA:  MOVLW  00
01AFC:  BTFSS  x1C.5
01AFE:  MOVLW  01
01B00:  IORWF  xC3,W
01B02:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B13;
01B04:  BCF    FD8.0
01B06:  RLCF   4A,W
01B08:  MOVWF  xC3
01B0A:  MOVLW  00
01B0C:  BTFSS  x1C.4
01B0E:  MOVLW  01
01B10:  IORWF  xC3,W
01B12:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B12;
01B14:  BCF    FD8.0
01B16:  RLCF   4A,W
01B18:  MOVWF  xC3
01B1A:  MOVLW  00
01B1C:  BTFSS  x1C.3
01B1E:  MOVLW  01
01B20:  IORWF  xC3,W
01B22:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B11;
01B24:  BCF    FD8.0
01B26:  RLCF   4A,W
01B28:  MOVWF  xC3
01B2A:  MOVLW  00
01B2C:  BTFSS  x1C.2
01B2E:  MOVLW  01
01B30:  IORWF  xC3,W
01B32:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B10;
01B34:  BCF    FD8.0
01B36:  RLCF   4A,W
01B38:  MOVWF  xC3
01B3A:  MOVLW  00
01B3C:  BTFSS  x1C.1
01B3E:  MOVLW  01
01B40:  IORWF  xC3,W
01B42:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B9;
01B44:  BCF    FD8.0
01B46:  RLCF   4A,W
01B48:  MOVWF  xC3
01B4A:  MOVLW  00
01B4C:  BTFSS  x1C.0
01B4E:  MOVLW  01
01B50:  IORWF  xC3,W
01B52:  MOVWF  4A
01B54:  MOVLB  0
01B56:  RETURN 0
....................       
....................       ///////////////---Anal Fault---//////////////////
....................       
....................       ///////////////////////--Edit--///////////////////
....................       
....................       /*
....................       Inputt.B11 = MCP23s17_Ip_dat;
....................       Inputt.B12 = MCP23s17_Ip_dat >> 1;
....................       Inputt.B13 = MCP23s17_Ip_dat >> 2;
....................       Inputt.B14 = MCP23s17_Ip_dat >> 3;
....................       Inputt.B15 = MCP23s17_Ip_dat >> 4;
....................       Inputt.B16 = MCP23s17_Ip_dat >> 5;
....................       Inputt.B17 = MCP23s17_Ip_dat >> 6;
....................       Inputt.B18 = MCP23s17_Ip_dat >> 7;
.................... 
....................       Input11_18 = 0x00;
....................       Input11_18 = Input1_8 | ~Inputt.B18;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B17;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B16;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B15;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B14;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B13;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B12;
....................       Input11_18 = (Input1_8 << 1) | ~Inputt.B11;
....................       
....................       */
....................     /*
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................       }
....................       
....................       Inputt.B19 = MCP23s17_Ip_dat;
....................       Inputt.B20 = MCP23s17_Ip_dat >> 1;
....................       
.................... 
....................       Input19_20 = 0x00;
....................       Input19_20 = Input9_10 | ~Inputt.B20;
....................       Input19_20 = (Input9_10 << 1) | ~Inputt.B19;
....................    //}
....................    
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................          
....................       }
....................       
....................       Inputt.B1 = MCP23s17_Ip_dat;
....................       Inputt.B2 = MCP23s17_Ip_dat >> 1;
....................       Inputt.B3 = MCP23s17_Ip_dat >> 2;
....................       Inputt.B4 = MCP23s17_Ip_dat >> 3;
....................       Inputt.B5 = MCP23s17_Ip_dat >> 4;
....................       Inputt.B6 = MCP23s17_Ip_dat >> 5;
....................       Inputt.B7 = MCP23s17_Ip_dat >> 6;
....................       Inputt.B8 = MCP23s17_Ip_dat >> 7;
.................... 
....................       Input1_8 = 0x00;
....................       Input1_8 = Input1_8 | ~Inputt.B8;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
....................     
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
....................       }
....................       
....................       Inputt.B9 = MCP23s17_Ip_dat;
....................       Inputt.B10 = MCP23s17_Ip_dat >> 1;
....................       
.................... 
....................       Input9_10 = 0x00;
....................       Input9_10 = Input9_10 | ~Inputt.B10;
....................       Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
....................       */
....................       //+++++++++++++++++++++++++++++++++++++++++++
....................    //}
....................    
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Input type 1-8
*
006D0:  MOVFF  FF2,1BE
006D4:  BCF    FF2.7
006D6:  CLRF   FAA
006D8:  MOVLW  01
006DA:  MOVWF  FA9
006DC:  BCF    FA6.6
006DE:  BCF    FA6.7
006E0:  BSF    FA6.0
006E2:  MOVF   FA8,W
006E4:  MOVLB  1
006E6:  BTFSC  xBE.7
006E8:  BSF    FF2.7
006EA:  MOVWF  39
....................    InputType1_8 = EEpDat;
006EC:  MOVFF  39,3A
.................... 
....................    InputType.B1 = EEpDat;
006F0:  BCF    x1F.0
006F2:  BTFSC  39.0
006F4:  BSF    x1F.0
....................    InputType.B2 = EEpDat >> 1;
006F6:  BCF    FD8.0
006F8:  RRCF   39,W
006FA:  BCF    x1F.1
006FC:  BTFSC  FE8.0
006FE:  BSF    x1F.1
....................    InputType.B3 = EEpDat >> 2;
00700:  RRCF   39,W
00702:  MOVWF  00
00704:  RRCF   00,F
00706:  MOVLW  3F
00708:  ANDWF  00,F
0070A:  BCF    x1F.2
0070C:  BTFSC  00.0
0070E:  BSF    x1F.2
....................    InputType.B4 = EEpDat >> 3;
00710:  RRCF   39,W
00712:  MOVWF  00
00714:  RRCF   00,F
00716:  RRCF   00,F
00718:  MOVLW  1F
0071A:  ANDWF  00,F
0071C:  BCF    x1F.3
0071E:  BTFSC  00.0
00720:  BSF    x1F.3
....................    InputType.B5 = EEpDat >> 4;
00722:  SWAPF  39,W
00724:  MOVWF  00
00726:  MOVLW  0F
00728:  ANDWF  00,F
0072A:  BCF    x1F.4
0072C:  BTFSC  00.0
0072E:  BSF    x1F.4
....................    InputType.B6 = EEpDat >> 5;
00730:  SWAPF  39,W
00732:  MOVWF  00
00734:  RRCF   00,F
00736:  MOVLW  07
00738:  ANDWF  00,F
0073A:  BCF    x1F.5
0073C:  BTFSC  00.0
0073E:  BSF    x1F.5
....................    InputType.B7 = EEpDat >> 6;
00740:  SWAPF  39,W
00742:  MOVWF  00
00744:  RRCF   00,F
00746:  RRCF   00,F
00748:  MOVLW  03
0074A:  ANDWF  00,F
0074C:  BCF    x1F.6
0074E:  BTFSC  00.0
00750:  BSF    x1F.6
....................    InputType.B8 = EEpDat >> 7;
00752:  CLRF   00
00754:  BTFSC  39.7
00756:  BSF    00.0
00758:  BCF    x1F.7
0075A:  BTFSC  00.0
0075C:  BSF    x1F.7
.................... 
....................    EEpDat = read_eeprom(0x02);   // Input type 9-16
0075E:  MOVFF  FF2,1BE
00762:  BCF    FF2.7
00764:  CLRF   FAA
00766:  MOVLW  02
00768:  MOVWF  FA9
0076A:  BCF    FA6.6
0076C:  BCF    FA6.7
0076E:  BSF    FA6.0
00770:  MOVF   FA8,W
00772:  BTFSC  xBE.7
00774:  BSF    FF2.7
00776:  MOVWF  39
....................    InputType9_16 = EEpDat;
00778:  MOVFF  39,3B
.................... 
....................    InputType.B9 = EEpDat;
0077C:  BCF    x20.0
0077E:  BTFSC  39.0
00780:  BSF    x20.0
....................    InputType.B10 = EEpDat >> 1;
00782:  BCF    FD8.0
00784:  RRCF   39,W
00786:  BCF    x20.1
00788:  BTFSC  FE8.0
0078A:  BSF    x20.1
....................    InputType.B11 = EEpDat >> 2;
0078C:  RRCF   39,W
0078E:  MOVWF  00
00790:  RRCF   00,F
00792:  MOVLW  3F
00794:  ANDWF  00,F
00796:  BCF    x20.2
00798:  BTFSC  00.0
0079A:  BSF    x20.2
....................    InputType.B12 = EEpDat >> 3;
0079C:  RRCF   39,W
0079E:  MOVWF  00
007A0:  RRCF   00,F
007A2:  RRCF   00,F
007A4:  MOVLW  1F
007A6:  ANDWF  00,F
007A8:  BCF    x20.3
007AA:  BTFSC  00.0
007AC:  BSF    x20.3
....................    InputType.B13 = EEpDat >> 4;
007AE:  SWAPF  39,W
007B0:  MOVWF  00
007B2:  MOVLW  0F
007B4:  ANDWF  00,F
007B6:  BCF    x20.4
007B8:  BTFSC  00.0
007BA:  BSF    x20.4
....................    InputType.B14 = EEpDat >> 5;
007BC:  SWAPF  39,W
007BE:  MOVWF  00
007C0:  RRCF   00,F
007C2:  MOVLW  07
007C4:  ANDWF  00,F
007C6:  BCF    x20.5
007C8:  BTFSC  00.0
007CA:  BSF    x20.5
....................    InputType.B15 = EEpDat >> 6;
007CC:  SWAPF  39,W
007CE:  MOVWF  00
007D0:  RRCF   00,F
007D2:  RRCF   00,F
007D4:  MOVLW  03
007D6:  ANDWF  00,F
007D8:  BCF    x20.6
007DA:  BTFSC  00.0
007DC:  BSF    x20.6
....................    InputType.B16 = EEpDat >> 7;
007DE:  CLRF   00
007E0:  BTFSC  39.7
007E2:  BSF    00.0
007E4:  BCF    x20.7
007E6:  BTFSC  00.0
007E8:  BSF    x20.7
....................    
....................    FaultNCNO[1] = InputType.B1;
007EA:  BCF    xB7.1
007EC:  BTFSC  x1F.0
007EE:  BSF    xB7.1
....................    FaultNCNO[2] = InputType.B2;
007F0:  BCF    xB7.2
007F2:  BTFSC  x1F.1
007F4:  BSF    xB7.2
....................    FaultNCNO[3] = InputType.B3;
007F6:  BCF    xB7.3
007F8:  BTFSC  x1F.2
007FA:  BSF    xB7.3
....................    FaultNCNO[4] = InputType.B4;
007FC:  BCF    xB7.4
007FE:  BTFSC  x1F.3
00800:  BSF    xB7.4
....................    FaultNCNO[5] = InputType.B5;
00802:  BCF    xB7.5
00804:  BTFSC  x1F.4
00806:  BSF    xB7.5
....................    FaultNCNO[6] = InputType.B6;
00808:  BCF    xB7.6
0080A:  BTFSC  x1F.5
0080C:  BSF    xB7.6
....................    FaultNCNO[7] = InputType.B7;
0080E:  BCF    xB7.7
00810:  BTFSC  x1F.6
00812:  BSF    xB7.7
....................    FaultNCNO[8] = InputType.B8;
00814:  BCF    xB8.0
00816:  BTFSC  x1F.7
00818:  BSF    xB8.0
....................    FaultNCNO[9] = InputType.B9;
0081A:  BCF    xB8.1
0081C:  BTFSC  x20.0
0081E:  BSF    xB8.1
....................    FaultNCNO[10] = InputType.B10;
00820:  BCF    xB8.2
00822:  BTFSC  x20.1
00824:  BSF    xB8.2
....................    FaultNCNO[11] = InputType.B11;
00826:  BCF    xB8.3
00828:  BTFSC  x20.2
0082A:  BSF    xB8.3
....................    FaultNCNO[12] = InputType.B12;
0082C:  BCF    xB8.4
0082E:  BTFSC  x20.3
00830:  BSF    xB8.4
....................    FaultNCNO[13] = InputType.B13;
00832:  BCF    xB8.5
00834:  BTFSC  x20.4
00836:  BSF    xB8.5
....................    FaultNCNO[14] = InputType.B14;
00838:  BCF    xB8.6
0083A:  BTFSC  x20.5
0083C:  BSF    xB8.6
....................    FaultNCNO[15] = InputType.B15;
0083E:  BCF    xB8.7
00840:  BTFSC  x20.6
00842:  BSF    xB8.7
....................    FaultNCNO[16] = InputType.B16;
00844:  BCF    xB9.0
00846:  BTFSC  x20.7
00848:  BSF    xB9.0
....................    
.................... /*
....................    EEpDat = read_eeprom(0x03);   // Input type 9-16
....................    InputType17_24 = EEpDat;
.................... 
....................    InputType.B17 = EEpDat;
....................    InputType.B18 = EEpDat >> 1;
....................    InputType.B19 = EEpDat >> 2;
....................    InputType.B20 = EEpDat >> 3;
....................    InputType.B21 = EEpDat >> 4;
....................    InputType.B22 = EEpDat >> 5;
....................    InputType.B23 = EEpDat >> 6;
....................    InputType.B24 = EEpDat >> 7;
.................... */
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
0084A:  MOVFF  FF2,1BE
0084E:  BCF    FF2.7
00850:  CLRF   FAA
00852:  MOVLW  04
00854:  MOVWF  FA9
00856:  BCF    FA6.6
00858:  BCF    FA6.7
0085A:  BSF    FA6.0
0085C:  MOVF   FA8,W
0085E:  BTFSC  xBE.7
00860:  BSF    FF2.7
00862:  MOVWF  39
....................    FaultType1_8 = EEpDat;
00864:  MOVFF  39,3D
.................... 
....................    FaultType.B1 = EEpDat;
00868:  BCF    x21.0
0086A:  BTFSC  39.0
0086C:  BSF    x21.0
....................    FaultType.B2 = EEpDat >> 1;
0086E:  BCF    FD8.0
00870:  RRCF   39,W
00872:  BCF    x21.1
00874:  BTFSC  FE8.0
00876:  BSF    x21.1
....................    FaultType.B3 = EEpDat >> 2;
00878:  RRCF   39,W
0087A:  MOVWF  00
0087C:  RRCF   00,F
0087E:  MOVLW  3F
00880:  ANDWF  00,F
00882:  BCF    x21.2
00884:  BTFSC  00.0
00886:  BSF    x21.2
....................    FaultType.B4 = EEpDat >> 3;
00888:  RRCF   39,W
0088A:  MOVWF  00
0088C:  RRCF   00,F
0088E:  RRCF   00,F
00890:  MOVLW  1F
00892:  ANDWF  00,F
00894:  BCF    x21.3
00896:  BTFSC  00.0
00898:  BSF    x21.3
....................    FaultType.B5 = EEpDat >> 4;
0089A:  SWAPF  39,W
0089C:  MOVWF  00
0089E:  MOVLW  0F
008A0:  ANDWF  00,F
008A2:  BCF    x21.4
008A4:  BTFSC  00.0
008A6:  BSF    x21.4
....................    FaultType.B6 = EEpDat >> 5;
008A8:  SWAPF  39,W
008AA:  MOVWF  00
008AC:  RRCF   00,F
008AE:  MOVLW  07
008B0:  ANDWF  00,F
008B2:  BCF    x21.5
008B4:  BTFSC  00.0
008B6:  BSF    x21.5
....................    FaultType.B7 = EEpDat >> 6;
008B8:  SWAPF  39,W
008BA:  MOVWF  00
008BC:  RRCF   00,F
008BE:  RRCF   00,F
008C0:  MOVLW  03
008C2:  ANDWF  00,F
008C4:  BCF    x21.6
008C6:  BTFSC  00.0
008C8:  BSF    x21.6
....................    FaultType.B8 = EEpDat >> 7;
008CA:  CLRF   00
008CC:  BTFSC  39.7
008CE:  BSF    00.0
008D0:  BCF    x21.7
008D2:  BTFSC  00.0
008D4:  BSF    x21.7
.................... 
....................    EEpDat = read_eeprom(0x05);   // Fault type 9-16
008D6:  MOVFF  FF2,1BE
008DA:  BCF    FF2.7
008DC:  CLRF   FAA
008DE:  MOVLW  05
008E0:  MOVWF  FA9
008E2:  BCF    FA6.6
008E4:  BCF    FA6.7
008E6:  BSF    FA6.0
008E8:  MOVF   FA8,W
008EA:  BTFSC  xBE.7
008EC:  BSF    FF2.7
008EE:  MOVWF  39
....................    FaultType9_16 = EEpDat;
008F0:  MOVFF  39,3E
.................... 
....................    FaultType.B9 = EEpDat;
008F4:  BCF    x22.0
008F6:  BTFSC  39.0
008F8:  BSF    x22.0
....................    FaultType.B10 = EEpDat >> 1;
008FA:  BCF    FD8.0
008FC:  RRCF   39,W
008FE:  BCF    x22.1
00900:  BTFSC  FE8.0
00902:  BSF    x22.1
....................    FaultType.B11 = EEpDat >> 2;
00904:  RRCF   39,W
00906:  MOVWF  00
00908:  RRCF   00,F
0090A:  MOVLW  3F
0090C:  ANDWF  00,F
0090E:  BCF    x22.2
00910:  BTFSC  00.0
00912:  BSF    x22.2
....................    FaultType.B12 = EEpDat >> 3;
00914:  RRCF   39,W
00916:  MOVWF  00
00918:  RRCF   00,F
0091A:  RRCF   00,F
0091C:  MOVLW  1F
0091E:  ANDWF  00,F
00920:  BCF    x22.3
00922:  BTFSC  00.0
00924:  BSF    x22.3
....................    FaultType.B13 = EEpDat >> 4;
00926:  SWAPF  39,W
00928:  MOVWF  00
0092A:  MOVLW  0F
0092C:  ANDWF  00,F
0092E:  BCF    x22.4
00930:  BTFSC  00.0
00932:  BSF    x22.4
....................    FaultType.B14 = EEpDat >> 5;
00934:  SWAPF  39,W
00936:  MOVWF  00
00938:  RRCF   00,F
0093A:  MOVLW  07
0093C:  ANDWF  00,F
0093E:  BCF    x22.5
00940:  BTFSC  00.0
00942:  BSF    x22.5
....................    FaultType.B15 = EEpDat >> 6;
00944:  SWAPF  39,W
00946:  MOVWF  00
00948:  RRCF   00,F
0094A:  RRCF   00,F
0094C:  MOVLW  03
0094E:  ANDWF  00,F
00950:  BCF    x22.6
00952:  BTFSC  00.0
00954:  BSF    x22.6
....................    FaultType.B16 = EEpDat >> 7;
00956:  CLRF   00
00958:  BTFSC  39.7
0095A:  BSF    00.0
0095C:  BCF    x22.7
0095E:  BTFSC  00.0
00960:  BSF    x22.7
.................... /*   
....................    EEpDat = read_eeprom(0x06);   // Fault type 9-16
....................    FaultType17_24 = EEpDat;
.................... 
....................    FaultType.B17 = EEpDat;
....................    FaultType.B18 = EEpDat >> 1;
....................    FaultType.B19 = EEpDat >> 2;
....................    FaultType.B20 = EEpDat >> 3;
....................    FaultType.B21 = EEpDat >> 4;
....................    FaultType.B22 = EEpDat >> 5;
....................    FaultType.B23 = EEpDat >> 6;
....................    FaultType.B24 = EEpDat >> 7;
.................... */
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00962:  MOVFF  FF2,1BE
00966:  BCF    FF2.7
00968:  CLRF   FAA
0096A:  MOVLW  07
0096C:  MOVWF  FA9
0096E:  BCF    FA6.6
00970:  BCF    FA6.7
00972:  BSF    FA6.0
00974:  MOVF   FA8,W
00976:  BTFSC  xBE.7
00978:  BSF    FF2.7
0097A:  MOVWF  39
....................    OutputType1_8 = EEpDat;
0097C:  MOVFF  39,40
.................... 
....................    OutputType.B1 = EEpDat;
00980:  BCF    x23.0
00982:  BTFSC  39.0
00984:  BSF    x23.0
....................    OutputType.B2 = EEpDat >> 1;
00986:  BCF    FD8.0
00988:  RRCF   39,W
0098A:  BCF    x23.1
0098C:  BTFSC  FE8.0
0098E:  BSF    x23.1
....................    OutputType.B3 = EEpDat >> 2;
00990:  RRCF   39,W
00992:  MOVWF  00
00994:  RRCF   00,F
00996:  MOVLW  3F
00998:  ANDWF  00,F
0099A:  BCF    x23.2
0099C:  BTFSC  00.0
0099E:  BSF    x23.2
....................    OutputType.B4 = EEpDat >> 3;
009A0:  RRCF   39,W
009A2:  MOVWF  00
009A4:  RRCF   00,F
009A6:  RRCF   00,F
009A8:  MOVLW  1F
009AA:  ANDWF  00,F
009AC:  BCF    x23.3
009AE:  BTFSC  00.0
009B0:  BSF    x23.3
....................    OutputType.B5 = EEpDat >> 4;
009B2:  SWAPF  39,W
009B4:  MOVWF  00
009B6:  MOVLW  0F
009B8:  ANDWF  00,F
009BA:  BCF    x23.4
009BC:  BTFSC  00.0
009BE:  BSF    x23.4
....................    OutputType.B6 = EEpDat >> 5;
009C0:  SWAPF  39,W
009C2:  MOVWF  00
009C4:  RRCF   00,F
009C6:  MOVLW  07
009C8:  ANDWF  00,F
009CA:  BCF    x23.5
009CC:  BTFSC  00.0
009CE:  BSF    x23.5
....................    OutputType.B7 = EEpDat >> 6;
009D0:  SWAPF  39,W
009D2:  MOVWF  00
009D4:  RRCF   00,F
009D6:  RRCF   00,F
009D8:  MOVLW  03
009DA:  ANDWF  00,F
009DC:  BCF    x23.6
009DE:  BTFSC  00.0
009E0:  BSF    x23.6
....................    OutputType.B8 = EEpDat >> 7;
009E2:  CLRF   00
009E4:  BTFSC  39.7
009E6:  BSF    00.0
009E8:  BCF    x23.7
009EA:  BTFSC  00.0
009EC:  BSF    x23.7
.................... 
....................    EEpDat = read_eeprom(0x08);   // Output type 9-16
009EE:  MOVFF  FF2,1BE
009F2:  BCF    FF2.7
009F4:  CLRF   FAA
009F6:  MOVLW  08
009F8:  MOVWF  FA9
009FA:  BCF    FA6.6
009FC:  BCF    FA6.7
009FE:  BSF    FA6.0
00A00:  MOVF   FA8,W
00A02:  BTFSC  xBE.7
00A04:  BSF    FF2.7
00A06:  MOVWF  39
....................    OutputType9_16 = EEpDat;
00A08:  MOVFF  39,41
.................... 
....................    OutputType.B9 = EEpDat;
00A0C:  BCF    x24.0
00A0E:  BTFSC  39.0
00A10:  BSF    x24.0
....................    OutputType.B10 = EEpDat >> 1;
00A12:  BCF    FD8.0
00A14:  RRCF   39,W
00A16:  BCF    x24.1
00A18:  BTFSC  FE8.0
00A1A:  BSF    x24.1
....................    OutputType.B11 = EEpDat >> 2;
00A1C:  RRCF   39,W
00A1E:  MOVWF  00
00A20:  RRCF   00,F
00A22:  MOVLW  3F
00A24:  ANDWF  00,F
00A26:  BCF    x24.2
00A28:  BTFSC  00.0
00A2A:  BSF    x24.2
....................    OutputType.B12 = EEpDat >> 3;
00A2C:  RRCF   39,W
00A2E:  MOVWF  00
00A30:  RRCF   00,F
00A32:  RRCF   00,F
00A34:  MOVLW  1F
00A36:  ANDWF  00,F
00A38:  BCF    x24.3
00A3A:  BTFSC  00.0
00A3C:  BSF    x24.3
....................    OutputType.B13 = EEpDat >> 4;
00A3E:  SWAPF  39,W
00A40:  MOVWF  00
00A42:  MOVLW  0F
00A44:  ANDWF  00,F
00A46:  BCF    x24.4
00A48:  BTFSC  00.0
00A4A:  BSF    x24.4
....................    OutputType.B14 = EEpDat >> 5;
00A4C:  SWAPF  39,W
00A4E:  MOVWF  00
00A50:  RRCF   00,F
00A52:  MOVLW  07
00A54:  ANDWF  00,F
00A56:  BCF    x24.5
00A58:  BTFSC  00.0
00A5A:  BSF    x24.5
....................    OutputType.B15 = EEpDat >> 6;
00A5C:  SWAPF  39,W
00A5E:  MOVWF  00
00A60:  RRCF   00,F
00A62:  RRCF   00,F
00A64:  MOVLW  03
00A66:  ANDWF  00,F
00A68:  BCF    x24.6
00A6A:  BTFSC  00.0
00A6C:  BSF    x24.6
....................    OutputType.B16 = EEpDat >> 7;
00A6E:  CLRF   00
00A70:  BTFSC  39.7
00A72:  BSF    00.0
00A74:  BCF    x24.7
00A76:  BTFSC  00.0
00A78:  BSF    x24.7
.................... /*   
....................    EEpDat = read_eeprom(0x09);   // Output type 9-16
....................    OutputType17_24 = EEpDat;
.................... 
....................    OutputType.B17 = EEpDat;
....................    OutputType.B18 = EEpDat >> 1;
....................    OutputType.B19 = EEpDat >> 2;
....................    OutputType.B20 = EEpDat >> 3;
....................    OutputType.B21 = EEpDat >> 4;
....................    OutputType.B22 = EEpDat >> 5;
....................    OutputType.B23 = EEpDat >> 6;
....................    OutputType.B24 = EEpDat >> 7;
.................... */
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
00A7A:  MOVFF  FF2,1BE
00A7E:  BCF    FF2.7
00A80:  CLRF   FAA
00A82:  MOVLW  0A
00A84:  MOVWF  FA9
00A86:  BCF    FA6.6
00A88:  BCF    FA6.7
00A8A:  BSF    FA6.0
00A8C:  MOVF   FA8,W
00A8E:  BTFSC  xBE.7
00A90:  BSF    FF2.7
00A92:  MOVWF  39
....................    OutputBoth1_8 = EEpDat;
00A94:  MOVFF  39,43
.................... 
....................    OutputBoth.B1 = EEpDat;
00A98:  BCF    x25.0
00A9A:  BTFSC  39.0
00A9C:  BSF    x25.0
....................    OutputBoth.B2 = EEpDat >> 1;
00A9E:  BCF    FD8.0
00AA0:  RRCF   39,W
00AA2:  BCF    x25.1
00AA4:  BTFSC  FE8.0
00AA6:  BSF    x25.1
....................    OutputBoth.B3 = EEpDat >> 2;
00AA8:  RRCF   39,W
00AAA:  MOVWF  00
00AAC:  RRCF   00,F
00AAE:  MOVLW  3F
00AB0:  ANDWF  00,F
00AB2:  BCF    x25.2
00AB4:  BTFSC  00.0
00AB6:  BSF    x25.2
....................    OutputBoth.B4 = EEpDat >> 3;
00AB8:  RRCF   39,W
00ABA:  MOVWF  00
00ABC:  RRCF   00,F
00ABE:  RRCF   00,F
00AC0:  MOVLW  1F
00AC2:  ANDWF  00,F
00AC4:  BCF    x25.3
00AC6:  BTFSC  00.0
00AC8:  BSF    x25.3
....................    OutputBoth.B5 = EEpDat >> 4;
00ACA:  SWAPF  39,W
00ACC:  MOVWF  00
00ACE:  MOVLW  0F
00AD0:  ANDWF  00,F
00AD2:  BCF    x25.4
00AD4:  BTFSC  00.0
00AD6:  BSF    x25.4
....................    OutputBoth.B6 = EEpDat >> 5;
00AD8:  SWAPF  39,W
00ADA:  MOVWF  00
00ADC:  RRCF   00,F
00ADE:  MOVLW  07
00AE0:  ANDWF  00,F
00AE2:  BCF    x25.5
00AE4:  BTFSC  00.0
00AE6:  BSF    x25.5
....................    OutputBoth.B7 = EEpDat >> 6;
00AE8:  SWAPF  39,W
00AEA:  MOVWF  00
00AEC:  RRCF   00,F
00AEE:  RRCF   00,F
00AF0:  MOVLW  03
00AF2:  ANDWF  00,F
00AF4:  BCF    x25.6
00AF6:  BTFSC  00.0
00AF8:  BSF    x25.6
....................    OutputBoth.B8 = EEpDat >> 7;
00AFA:  CLRF   00
00AFC:  BTFSC  39.7
00AFE:  BSF    00.0
00B00:  BCF    x25.7
00B02:  BTFSC  00.0
00B04:  BSF    x25.7
.................... 
....................    EEpDat = read_eeprom(0x0B);   // Output Both 9-16
00B06:  MOVFF  FF2,1BE
00B0A:  BCF    FF2.7
00B0C:  CLRF   FAA
00B0E:  MOVLW  0B
00B10:  MOVWF  FA9
00B12:  BCF    FA6.6
00B14:  BCF    FA6.7
00B16:  BSF    FA6.0
00B18:  MOVF   FA8,W
00B1A:  BTFSC  xBE.7
00B1C:  BSF    FF2.7
00B1E:  MOVWF  39
....................    OutputBoth9_16 = EEpDat;
00B20:  MOVFF  39,44
.................... 
....................    OutputBoth.B9 = EEpDat;
00B24:  BCF    x26.0
00B26:  BTFSC  39.0
00B28:  BSF    x26.0
....................    OutputBoth.B10 = EEpDat >> 1;
00B2A:  BCF    FD8.0
00B2C:  RRCF   39,W
00B2E:  BCF    x26.1
00B30:  BTFSC  FE8.0
00B32:  BSF    x26.1
....................    OutputBoth.B11 = EEpDat >> 2;
00B34:  RRCF   39,W
00B36:  MOVWF  00
00B38:  RRCF   00,F
00B3A:  MOVLW  3F
00B3C:  ANDWF  00,F
00B3E:  BCF    x26.2
00B40:  BTFSC  00.0
00B42:  BSF    x26.2
....................    OutputBoth.B12 = EEpDat >> 3;
00B44:  RRCF   39,W
00B46:  MOVWF  00
00B48:  RRCF   00,F
00B4A:  RRCF   00,F
00B4C:  MOVLW  1F
00B4E:  ANDWF  00,F
00B50:  BCF    x26.3
00B52:  BTFSC  00.0
00B54:  BSF    x26.3
....................    OutputBoth.B13 = EEpDat >> 4;
00B56:  SWAPF  39,W
00B58:  MOVWF  00
00B5A:  MOVLW  0F
00B5C:  ANDWF  00,F
00B5E:  BCF    x26.4
00B60:  BTFSC  00.0
00B62:  BSF    x26.4
....................    OutputBoth.B14 = EEpDat >> 5;
00B64:  SWAPF  39,W
00B66:  MOVWF  00
00B68:  RRCF   00,F
00B6A:  MOVLW  07
00B6C:  ANDWF  00,F
00B6E:  BCF    x26.5
00B70:  BTFSC  00.0
00B72:  BSF    x26.5
....................    OutputBoth.B15 = EEpDat >> 6;
00B74:  SWAPF  39,W
00B76:  MOVWF  00
00B78:  RRCF   00,F
00B7A:  RRCF   00,F
00B7C:  MOVLW  03
00B7E:  ANDWF  00,F
00B80:  BCF    x26.6
00B82:  BTFSC  00.0
00B84:  BSF    x26.6
....................    OutputBoth.B16 = EEpDat >> 7;
00B86:  CLRF   00
00B88:  BTFSC  39.7
00B8A:  BSF    00.0
00B8C:  BCF    x26.7
00B8E:  BTFSC  00.0
00B90:  BSF    x26.7
.................... /*   
....................    EEpDat = read_eeprom(0x0C);   // Output Both 9-16
....................    OutputBoth17_24 = EEpDat;
.................... 
....................    OutputBoth.B17 = EEpDat;
....................    OutputBoth.B18 = EEpDat >> 1;
....................    OutputBoth.B19 = EEpDat >> 2;
....................    OutputBoth.B20 = EEpDat >> 3;
....................    OutputBoth.B21 = EEpDat >> 4;
....................    OutputBoth.B22 = EEpDat >> 5;
....................    OutputBoth.B23 = EEpDat >> 6;
....................    OutputBoth.B24 = EEpDat >> 7;
.................... */
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
00B92:  MOVFF  FF2,1BE
00B96:  BCF    FF2.7
00B98:  CLRF   FAA
00B9A:  MOVLW  0D
00B9C:  MOVWF  FA9
00B9E:  BCF    FA6.6
00BA0:  BCF    FA6.7
00BA2:  BSF    FA6.0
00BA4:  MOVF   FA8,W
00BA6:  BTFSC  xBE.7
00BA8:  BSF    FF2.7
00BAA:  MOVWF  39
....................    Alarm_Indicator1_8 = EEpDat;
00BAC:  MOVFF  39,46
.................... 
....................    AlarmIndicator.B1 = EEpDat;
00BB0:  BCF    x27.0
00BB2:  BTFSC  39.0
00BB4:  BSF    x27.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
00BB6:  BCF    FD8.0
00BB8:  RRCF   39,W
00BBA:  BCF    x27.1
00BBC:  BTFSC  FE8.0
00BBE:  BSF    x27.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
00BC0:  RRCF   39,W
00BC2:  MOVWF  00
00BC4:  RRCF   00,F
00BC6:  MOVLW  3F
00BC8:  ANDWF  00,F
00BCA:  BCF    x27.2
00BCC:  BTFSC  00.0
00BCE:  BSF    x27.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
00BD0:  RRCF   39,W
00BD2:  MOVWF  00
00BD4:  RRCF   00,F
00BD6:  RRCF   00,F
00BD8:  MOVLW  1F
00BDA:  ANDWF  00,F
00BDC:  BCF    x27.3
00BDE:  BTFSC  00.0
00BE0:  BSF    x27.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
00BE2:  SWAPF  39,W
00BE4:  MOVWF  00
00BE6:  MOVLW  0F
00BE8:  ANDWF  00,F
00BEA:  BCF    x27.4
00BEC:  BTFSC  00.0
00BEE:  BSF    x27.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
00BF0:  SWAPF  39,W
00BF2:  MOVWF  00
00BF4:  RRCF   00,F
00BF6:  MOVLW  07
00BF8:  ANDWF  00,F
00BFA:  BCF    x27.5
00BFC:  BTFSC  00.0
00BFE:  BSF    x27.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
00C00:  SWAPF  39,W
00C02:  MOVWF  00
00C04:  RRCF   00,F
00C06:  RRCF   00,F
00C08:  MOVLW  03
00C0A:  ANDWF  00,F
00C0C:  BCF    x27.6
00C0E:  BTFSC  00.0
00C10:  BSF    x27.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
00C12:  CLRF   00
00C14:  BTFSC  39.7
00C16:  BSF    00.0
00C18:  BCF    x27.7
00C1A:  BTFSC  00.0
00C1C:  BSF    x27.7
.................... 
....................    EEpDat = read_eeprom(0x0E);   // AlarmIndicator 9-16
00C1E:  MOVFF  FF2,1BE
00C22:  BCF    FF2.7
00C24:  CLRF   FAA
00C26:  MOVLW  0E
00C28:  MOVWF  FA9
00C2A:  BCF    FA6.6
00C2C:  BCF    FA6.7
00C2E:  BSF    FA6.0
00C30:  MOVF   FA8,W
00C32:  BTFSC  xBE.7
00C34:  BSF    FF2.7
00C36:  MOVWF  39
....................    Alarm_Indicator9_16 = EEpDat;
00C38:  MOVFF  39,47
.................... 
....................    AlarmIndicator.B9 = EEpDat;
00C3C:  BCF    x28.0
00C3E:  BTFSC  39.0
00C40:  BSF    x28.0
....................    AlarmIndicator.B10 = EEpDat >> 1;
00C42:  BCF    FD8.0
00C44:  RRCF   39,W
00C46:  BCF    x28.1
00C48:  BTFSC  FE8.0
00C4A:  BSF    x28.1
....................    AlarmIndicator.B11 = EEpDat >> 2;
00C4C:  RRCF   39,W
00C4E:  MOVWF  00
00C50:  RRCF   00,F
00C52:  MOVLW  3F
00C54:  ANDWF  00,F
00C56:  BCF    x28.2
00C58:  BTFSC  00.0
00C5A:  BSF    x28.2
....................    AlarmIndicator.B12 = EEpDat >> 3;
00C5C:  RRCF   39,W
00C5E:  MOVWF  00
00C60:  RRCF   00,F
00C62:  RRCF   00,F
00C64:  MOVLW  1F
00C66:  ANDWF  00,F
00C68:  BCF    x28.3
00C6A:  BTFSC  00.0
00C6C:  BSF    x28.3
....................    AlarmIndicator.B13 = EEpDat >> 4;
00C6E:  SWAPF  39,W
00C70:  MOVWF  00
00C72:  MOVLW  0F
00C74:  ANDWF  00,F
00C76:  BCF    x28.4
00C78:  BTFSC  00.0
00C7A:  BSF    x28.4
....................    AlarmIndicator.B14 = EEpDat >> 5;
00C7C:  SWAPF  39,W
00C7E:  MOVWF  00
00C80:  RRCF   00,F
00C82:  MOVLW  07
00C84:  ANDWF  00,F
00C86:  BCF    x28.5
00C88:  BTFSC  00.0
00C8A:  BSF    x28.5
....................    AlarmIndicator.B15 = EEpDat >> 6;
00C8C:  SWAPF  39,W
00C8E:  MOVWF  00
00C90:  RRCF   00,F
00C92:  RRCF   00,F
00C94:  MOVLW  03
00C96:  ANDWF  00,F
00C98:  BCF    x28.6
00C9A:  BTFSC  00.0
00C9C:  BSF    x28.6
....................    AlarmIndicator.B16 = EEpDat >> 7;
00C9E:  CLRF   00
00CA0:  BTFSC  39.7
00CA2:  BSF    00.0
00CA4:  BCF    x28.7
00CA6:  BTFSC  00.0
00CA8:  BSF    x28.7
.................... /*  
....................    EEpDat = read_eeprom(0x0F);   // AlarmIndicator 9-16
....................    Alarm_Indicator17_24 = EEpDat;
.................... 
....................    AlarmIndicator.B17 = EEpDat;
....................    AlarmIndicator.B18 = EEpDat >> 1;
....................    AlarmIndicator.B19 = EEpDat >> 2;
....................    AlarmIndicator.B20 = EEpDat >> 3;
....................    AlarmIndicator.B21 = EEpDat >> 4;
....................    AlarmIndicator.B22 = EEpDat >> 5;
....................    AlarmIndicator.B23 = EEpDat >> 6;
....................    AlarmIndicator.B24 = EEpDat >> 7;
.................... */
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
00CAA:  MOVFF  FF2,1BE
00CAE:  BCF    FF2.7
00CB0:  CLRF   FAA
00CB2:  MOVLW  10
00CB4:  MOVWF  FA9
00CB6:  BCF    FA6.6
00CB8:  BCF    FA6.7
00CBA:  BSF    FA6.0
00CBC:  MOVF   FA8,W
00CBE:  BTFSC  xBE.7
00CC0:  BSF    FF2.7
00CC2:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
00CC4:  BCF    x33.0
00CC6:  BTFSC  39.0
00CC8:  BSF    x33.0
....................    RED_Colour.B2 = EEpDat >> 1;
00CCA:  BCF    FD8.0
00CCC:  RRCF   39,W
00CCE:  BCF    x33.1
00CD0:  BTFSC  FE8.0
00CD2:  BSF    x33.1
....................    RED_Colour.B3 = EEpDat >> 2;
00CD4:  RRCF   39,W
00CD6:  MOVWF  00
00CD8:  RRCF   00,F
00CDA:  MOVLW  3F
00CDC:  ANDWF  00,F
00CDE:  BCF    x33.2
00CE0:  BTFSC  00.0
00CE2:  BSF    x33.2
....................    RED_Colour.B4 = EEpDat >> 3;
00CE4:  RRCF   39,W
00CE6:  MOVWF  00
00CE8:  RRCF   00,F
00CEA:  RRCF   00,F
00CEC:  MOVLW  1F
00CEE:  ANDWF  00,F
00CF0:  BCF    x33.3
00CF2:  BTFSC  00.0
00CF4:  BSF    x33.3
....................    RED_Colour.B5 = EEpDat >> 4;
00CF6:  SWAPF  39,W
00CF8:  MOVWF  00
00CFA:  MOVLW  0F
00CFC:  ANDWF  00,F
00CFE:  BCF    x33.4
00D00:  BTFSC  00.0
00D02:  BSF    x33.4
....................    RED_Colour.B6 = EEpDat >> 5;
00D04:  SWAPF  39,W
00D06:  MOVWF  00
00D08:  RRCF   00,F
00D0A:  MOVLW  07
00D0C:  ANDWF  00,F
00D0E:  BCF    x33.5
00D10:  BTFSC  00.0
00D12:  BSF    x33.5
....................    RED_Colour.B7 = EEpDat >> 6;
00D14:  SWAPF  39,W
00D16:  MOVWF  00
00D18:  RRCF   00,F
00D1A:  RRCF   00,F
00D1C:  MOVLW  03
00D1E:  ANDWF  00,F
00D20:  BCF    x33.6
00D22:  BTFSC  00.0
00D24:  BSF    x33.6
....................    RED_Colour.B8 = EEpDat >> 7;
00D26:  CLRF   00
00D28:  BTFSC  39.7
00D2A:  BSF    00.0
00D2C:  BCF    x33.7
00D2E:  BTFSC  00.0
00D30:  BSF    x33.7
....................    
....................    EEpDat = read_eeprom(0x11);
00D32:  MOVFF  FF2,1BE
00D36:  BCF    FF2.7
00D38:  CLRF   FAA
00D3A:  MOVLW  11
00D3C:  MOVWF  FA9
00D3E:  BCF    FA6.6
00D40:  BCF    FA6.7
00D42:  BSF    FA6.0
00D44:  MOVF   FA8,W
00D46:  BTFSC  xBE.7
00D48:  BSF    FF2.7
00D4A:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
00D4C:  BCF    x34.0
00D4E:  BTFSC  39.0
00D50:  BSF    x34.0
....................    RED_Colour.B10 = EEpDat >> 1;
00D52:  BCF    FD8.0
00D54:  RRCF   39,W
00D56:  BCF    x34.1
00D58:  BTFSC  FE8.0
00D5A:  BSF    x34.1
....................    
....................    EEpDat = read_eeprom(0x12);
00D5C:  MOVFF  FF2,1BE
00D60:  BCF    FF2.7
00D62:  CLRF   FAA
00D64:  MOVLW  12
00D66:  MOVWF  FA9
00D68:  BCF    FA6.6
00D6A:  BCF    FA6.7
00D6C:  BSF    FA6.0
00D6E:  MOVF   FA8,W
00D70:  BTFSC  xBE.7
00D72:  BSF    FF2.7
00D74:  MOVWF  39
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
00D76:  BCF    x34.2
00D78:  BTFSC  39.0
00D7A:  BSF    x34.2
....................    RED_Colour.B12 = EEpDat >> 1;
00D7C:  BCF    FD8.0
00D7E:  RRCF   39,W
00D80:  BCF    x34.3
00D82:  BTFSC  FE8.0
00D84:  BSF    x34.3
....................    RED_Colour.B13 = EEpDat >> 2;
00D86:  RRCF   39,W
00D88:  MOVWF  00
00D8A:  RRCF   00,F
00D8C:  MOVLW  3F
00D8E:  ANDWF  00,F
00D90:  BCF    x34.4
00D92:  BTFSC  00.0
00D94:  BSF    x34.4
....................    RED_Colour.B14 = EEpDat >> 3;
00D96:  RRCF   39,W
00D98:  MOVWF  00
00D9A:  RRCF   00,F
00D9C:  RRCF   00,F
00D9E:  MOVLW  1F
00DA0:  ANDWF  00,F
00DA2:  BCF    x34.5
00DA4:  BTFSC  00.0
00DA6:  BSF    x34.5
....................    RED_Colour.B15 = EEpDat >> 4;
00DA8:  SWAPF  39,W
00DAA:  MOVWF  00
00DAC:  MOVLW  0F
00DAE:  ANDWF  00,F
00DB0:  BCF    x34.6
00DB2:  BTFSC  00.0
00DB4:  BSF    x34.6
....................    RED_Colour.B16 = EEpDat >> 5;
00DB6:  SWAPF  39,W
00DB8:  MOVWF  00
00DBA:  RRCF   00,F
00DBC:  MOVLW  07
00DBE:  ANDWF  00,F
00DC0:  BCF    x34.7
00DC2:  BTFSC  00.0
00DC4:  BSF    x34.7
....................    //RED_Colour.B17 = EEpDat >> 6;
....................    //RED_Colour.B18 = EEpDat >> 7;
....................    
....................    //EEpDat = read_eeprom(0x13);
....................    //RED_Colour.B19 = EEpDat;
....................    //RED_Colour.B20 = EEpDat >> 1;
....................    
....................    
....................    EEpDat = read_eeprom(0x14);
00DC6:  MOVFF  FF2,1BE
00DCA:  BCF    FF2.7
00DCC:  CLRF   FAA
00DCE:  MOVLW  14
00DD0:  MOVWF  FA9
00DD2:  BCF    FA6.6
00DD4:  BCF    FA6.7
00DD6:  BSF    FA6.0
00DD8:  MOVF   FA8,W
00DDA:  BTFSC  xBE.7
00DDC:  BSF    FF2.7
00DDE:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
00DE0:  BCF    x35.0
00DE2:  BTFSC  39.0
00DE4:  BSF    x35.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
00DE6:  BCF    FD8.0
00DE8:  RRCF   39,W
00DEA:  BCF    x35.1
00DEC:  BTFSC  FE8.0
00DEE:  BSF    x35.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
00DF0:  RRCF   39,W
00DF2:  MOVWF  00
00DF4:  RRCF   00,F
00DF6:  MOVLW  3F
00DF8:  ANDWF  00,F
00DFA:  BCF    x35.2
00DFC:  BTFSC  00.0
00DFE:  BSF    x35.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
00E00:  RRCF   39,W
00E02:  MOVWF  00
00E04:  RRCF   00,F
00E06:  RRCF   00,F
00E08:  MOVLW  1F
00E0A:  ANDWF  00,F
00E0C:  BCF    x35.3
00E0E:  BTFSC  00.0
00E10:  BSF    x35.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
00E12:  SWAPF  39,W
00E14:  MOVWF  00
00E16:  MOVLW  0F
00E18:  ANDWF  00,F
00E1A:  BCF    x35.4
00E1C:  BTFSC  00.0
00E1E:  BSF    x35.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
00E20:  SWAPF  39,W
00E22:  MOVWF  00
00E24:  RRCF   00,F
00E26:  MOVLW  07
00E28:  ANDWF  00,F
00E2A:  BCF    x35.5
00E2C:  BTFSC  00.0
00E2E:  BSF    x35.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
00E30:  SWAPF  39,W
00E32:  MOVWF  00
00E34:  RRCF   00,F
00E36:  RRCF   00,F
00E38:  MOVLW  03
00E3A:  ANDWF  00,F
00E3C:  BCF    x35.6
00E3E:  BTFSC  00.0
00E40:  BSF    x35.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
00E42:  CLRF   00
00E44:  BTFSC  39.7
00E46:  BSF    00.0
00E48:  BCF    x35.7
00E4A:  BTFSC  00.0
00E4C:  BSF    x35.7
....................    
....................    EEpDat = read_eeprom(0x15);
00E4E:  MOVFF  FF2,1BE
00E52:  BCF    FF2.7
00E54:  CLRF   FAA
00E56:  MOVLW  15
00E58:  MOVWF  FA9
00E5A:  BCF    FA6.6
00E5C:  BCF    FA6.7
00E5E:  BSF    FA6.0
00E60:  MOVF   FA8,W
00E62:  BTFSC  xBE.7
00E64:  BSF    FF2.7
00E66:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
00E68:  BCF    x36.0
00E6A:  BTFSC  39.0
00E6C:  BSF    x36.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
00E6E:  BCF    FD8.0
00E70:  RRCF   39,W
00E72:  BCF    x36.1
00E74:  BTFSC  FE8.0
00E76:  BSF    x36.1
....................    
....................    
....................    EEpDat = read_eeprom(0x16);
00E78:  MOVFF  FF2,1BE
00E7C:  BCF    FF2.7
00E7E:  CLRF   FAA
00E80:  MOVLW  16
00E82:  MOVWF  FA9
00E84:  BCF    FA6.6
00E86:  BCF    FA6.7
00E88:  BSF    FA6.0
00E8A:  MOVF   FA8,W
00E8C:  BTFSC  xBE.7
00E8E:  BSF    FF2.7
00E90:  MOVWF  39
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
00E92:  BCF    x36.2
00E94:  BTFSC  39.0
00E96:  BSF    x36.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
00E98:  BCF    FD8.0
00E9A:  RRCF   39,W
00E9C:  BCF    x36.3
00E9E:  BTFSC  FE8.0
00EA0:  BSF    x36.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
00EA2:  RRCF   39,W
00EA4:  MOVWF  00
00EA6:  RRCF   00,F
00EA8:  MOVLW  3F
00EAA:  ANDWF  00,F
00EAC:  BCF    x36.4
00EAE:  BTFSC  00.0
00EB0:  BSF    x36.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
00EB2:  RRCF   39,W
00EB4:  MOVWF  00
00EB6:  RRCF   00,F
00EB8:  RRCF   00,F
00EBA:  MOVLW  1F
00EBC:  ANDWF  00,F
00EBE:  BCF    x36.5
00EC0:  BTFSC  00.0
00EC2:  BSF    x36.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
00EC4:  SWAPF  39,W
00EC6:  MOVWF  00
00EC8:  MOVLW  0F
00ECA:  ANDWF  00,F
00ECC:  BCF    x36.6
00ECE:  BTFSC  00.0
00ED0:  BSF    x36.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
00ED2:  SWAPF  39,W
00ED4:  MOVWF  00
00ED6:  RRCF   00,F
00ED8:  MOVLW  07
00EDA:  ANDWF  00,F
00EDC:  BCF    x36.7
00EDE:  BTFSC  00.0
00EE0:  BSF    x36.7
....................    //GREEN_Colour.B17 = EEpDat >> 6;
....................    //GREEN_Colour.B18 = EEpDat >> 7;
....................    
....................    //EEpDat = read_eeprom(0x17);
....................    //GREEN_Colour.B19 = EEpDat;
....................    //GREEN_Colour.B20 = EEpDat >> 1;
....................   
....................    //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
00EE2:  MOVFF  FF2,1BE
00EE6:  BCF    FF2.7
00EE8:  CLRF   FAA
00EEA:  MOVLW  18
00EEC:  MOVWF  FA9
00EEE:  BCF    FA6.6
00EF0:  BCF    FA6.7
00EF2:  BSF    FA6.0
00EF4:  MOVF   FA8,W
00EF6:  BTFSC  xBE.7
00EF8:  BSF    FF2.7
00EFA:  MOVLB  0
00EFC:  MOVWF  x6A
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
00EFE:  MOVFF  FF2,1BE
00F02:  BCF    FF2.7
00F04:  CLRF   FAA
00F06:  MOVLW  19
00F08:  MOVWF  FA9
00F0A:  BCF    FA6.6
00F0C:  BCF    FA6.7
00F0E:  BSF    FA6.0
00F10:  MOVF   FA8,W
00F12:  MOVLB  1
00F14:  BTFSC  xBE.7
00F16:  BSF    FF2.7
00F18:  MOVLB  0
00F1A:  MOVWF  x6B
....................    FlashingRate = read_eeprom(0x1A); // Flashing rate
00F1C:  MOVFF  FF2,1BE
00F20:  BCF    FF2.7
00F22:  CLRF   FAA
00F24:  MOVLW  1A
00F26:  MOVWF  FA9
00F28:  BCF    FA6.6
00F2A:  BCF    FA6.7
00F2C:  BSF    FA6.0
00F2E:  MOVF   FA8,W
00F30:  MOVLB  1
00F32:  BTFSC  xBE.7
00F34:  BSF    FF2.7
00F36:  MOVLB  0
00F38:  MOVWF  x6C
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
00F3A:  MOVFF  FF2,1BE
00F3E:  BCF    FF2.7
00F40:  CLRF   FAA
00F42:  MOVLW  1B
00F44:  MOVWF  FA9
00F46:  BCF    FA6.6
00F48:  BCF    FA6.7
00F4A:  BSF    FA6.0
00F4C:  MOVF   FA8,W
00F4E:  MOVLB  1
00F50:  BTFSC  xBE.7
00F52:  BSF    FF2.7
00F54:  MOVLB  0
00F56:  MOVWF  x6D
....................    
....................    FaultDelayTime[0] = read_eeprom(0x1C);  // Master or slave sync(flashing)
00F58:  MOVFF  FF2,1BE
00F5C:  BCF    FF2.7
00F5E:  CLRF   FAA
00F60:  MOVLW  1C
00F62:  MOVWF  FA9
00F64:  BCF    FA6.6
00F66:  BCF    FA6.7
00F68:  BSF    FA6.0
00F6A:  MOVF   FA8,W
00F6C:  MOVLB  1
00F6E:  BTFSC  xBE.7
00F70:  BSF    FF2.7
00F72:  CLRF   x7C
00F74:  MOVWF  x7B
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
00F76:  MOVFF  FF2,1BE
00F7A:  BCF    FF2.7
00F7C:  CLRF   FAA
00F7E:  MOVLW  1D
00F80:  MOVWF  FA9
00F82:  BCF    FA6.6
00F84:  BCF    FA6.7
00F86:  BSF    FA6.0
00F88:  MOVF   FA8,W
00F8A:  BTFSC  xBE.7
00F8C:  BSF    FF2.7
00F8E:  MOVLB  0
00F90:  MOVWF  x78
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
00F92:  MOVFF  FF2,1BE
00F96:  BCF    FF2.7
00F98:  CLRF   FAA
00F9A:  MOVLW  1E
00F9C:  MOVWF  FA9
00F9E:  BCF    FA6.6
00FA0:  BCF    FA6.7
00FA2:  BSF    FA6.0
00FA4:  MOVF   FA8,W
00FA6:  MOVLB  1
00FA8:  BTFSC  xBE.7
00FAA:  BSF    FF2.7
00FAC:  CLRF   x7E
00FAE:  MOVWF  x7D
....................    FaultDelayTime[2] = read_eeprom(0x1F);
00FB0:  MOVFF  FF2,1BE
00FB4:  BCF    FF2.7
00FB6:  CLRF   FAA
00FB8:  MOVLW  1F
00FBA:  MOVWF  FA9
00FBC:  BCF    FA6.6
00FBE:  BCF    FA6.7
00FC0:  BSF    FA6.0
00FC2:  MOVF   FA8,W
00FC4:  BTFSC  xBE.7
00FC6:  BSF    FF2.7
00FC8:  CLRF   x80
00FCA:  MOVWF  x7F
....................    FaultDelayTime[3] = read_eeprom(0x20);
00FCC:  MOVFF  FF2,1BE
00FD0:  BCF    FF2.7
00FD2:  CLRF   FAA
00FD4:  MOVLW  20
00FD6:  MOVWF  FA9
00FD8:  BCF    FA6.6
00FDA:  BCF    FA6.7
00FDC:  BSF    FA6.0
00FDE:  MOVF   FA8,W
00FE0:  BTFSC  xBE.7
00FE2:  BSF    FF2.7
00FE4:  CLRF   x82
00FE6:  MOVWF  x81
....................    FaultDelayTime[4] = read_eeprom(0x21);
00FE8:  MOVFF  FF2,1BE
00FEC:  BCF    FF2.7
00FEE:  CLRF   FAA
00FF0:  MOVLW  21
00FF2:  MOVWF  FA9
00FF4:  BCF    FA6.6
00FF6:  BCF    FA6.7
00FF8:  BSF    FA6.0
00FFA:  MOVF   FA8,W
00FFC:  BTFSC  xBE.7
00FFE:  BSF    FF2.7
01000:  CLRF   x84
01002:  MOVWF  x83
....................    FaultDelayTime[5] = read_eeprom(0x22);
01004:  MOVFF  FF2,1BE
01008:  BCF    FF2.7
0100A:  CLRF   FAA
0100C:  MOVLW  22
0100E:  MOVWF  FA9
01010:  BCF    FA6.6
01012:  BCF    FA6.7
01014:  BSF    FA6.0
01016:  MOVF   FA8,W
01018:  BTFSC  xBE.7
0101A:  BSF    FF2.7
0101C:  CLRF   x86
0101E:  MOVWF  x85
....................    FaultDelayTime[6] = read_eeprom(0x23);
01020:  MOVFF  FF2,1BE
01024:  BCF    FF2.7
01026:  CLRF   FAA
01028:  MOVLW  23
0102A:  MOVWF  FA9
0102C:  BCF    FA6.6
0102E:  BCF    FA6.7
01030:  BSF    FA6.0
01032:  MOVF   FA8,W
01034:  BTFSC  xBE.7
01036:  BSF    FF2.7
01038:  CLRF   x88
0103A:  MOVWF  x87
....................    FaultDelayTime[7] = read_eeprom(0x24);
0103C:  MOVFF  FF2,1BE
01040:  BCF    FF2.7
01042:  CLRF   FAA
01044:  MOVLW  24
01046:  MOVWF  FA9
01048:  BCF    FA6.6
0104A:  BCF    FA6.7
0104C:  BSF    FA6.0
0104E:  MOVF   FA8,W
01050:  BTFSC  xBE.7
01052:  BSF    FF2.7
01054:  CLRF   x8A
01056:  MOVWF  x89
....................    FaultDelayTime[8] = read_eeprom(0x25);
01058:  MOVFF  FF2,1BE
0105C:  BCF    FF2.7
0105E:  CLRF   FAA
01060:  MOVLW  25
01062:  MOVWF  FA9
01064:  BCF    FA6.6
01066:  BCF    FA6.7
01068:  BSF    FA6.0
0106A:  MOVF   FA8,W
0106C:  BTFSC  xBE.7
0106E:  BSF    FF2.7
01070:  CLRF   x8C
01072:  MOVWF  x8B
....................    FaultDelayTime[9] = read_eeprom(0x26);
01074:  MOVFF  FF2,1BE
01078:  BCF    FF2.7
0107A:  CLRF   FAA
0107C:  MOVLW  26
0107E:  MOVWF  FA9
01080:  BCF    FA6.6
01082:  BCF    FA6.7
01084:  BSF    FA6.0
01086:  MOVF   FA8,W
01088:  BTFSC  xBE.7
0108A:  BSF    FF2.7
0108C:  CLRF   x8E
0108E:  MOVWF  x8D
....................    FaultDelayTime[10] = read_eeprom(0x27);
01090:  MOVFF  FF2,1BE
01094:  BCF    FF2.7
01096:  CLRF   FAA
01098:  MOVLW  27
0109A:  MOVWF  FA9
0109C:  BCF    FA6.6
0109E:  BCF    FA6.7
010A0:  BSF    FA6.0
010A2:  MOVF   FA8,W
010A4:  BTFSC  xBE.7
010A6:  BSF    FF2.7
010A8:  CLRF   x90
010AA:  MOVWF  x8F
....................    FaultDelayTime[11] = read_eeprom(0x28);
010AC:  MOVFF  FF2,1BE
010B0:  BCF    FF2.7
010B2:  CLRF   FAA
010B4:  MOVLW  28
010B6:  MOVWF  FA9
010B8:  BCF    FA6.6
010BA:  BCF    FA6.7
010BC:  BSF    FA6.0
010BE:  MOVF   FA8,W
010C0:  BTFSC  xBE.7
010C2:  BSF    FF2.7
010C4:  CLRF   x92
010C6:  MOVWF  x91
....................    FaultDelayTime[12] = read_eeprom(0x29);
010C8:  MOVFF  FF2,1BE
010CC:  BCF    FF2.7
010CE:  CLRF   FAA
010D0:  MOVLW  29
010D2:  MOVWF  FA9
010D4:  BCF    FA6.6
010D6:  BCF    FA6.7
010D8:  BSF    FA6.0
010DA:  MOVF   FA8,W
010DC:  BTFSC  xBE.7
010DE:  BSF    FF2.7
010E0:  CLRF   x94
010E2:  MOVWF  x93
....................    FaultDelayTime[13] = read_eeprom(0x2A);
010E4:  MOVFF  FF2,1BE
010E8:  BCF    FF2.7
010EA:  CLRF   FAA
010EC:  MOVLW  2A
010EE:  MOVWF  FA9
010F0:  BCF    FA6.6
010F2:  BCF    FA6.7
010F4:  BSF    FA6.0
010F6:  MOVF   FA8,W
010F8:  BTFSC  xBE.7
010FA:  BSF    FF2.7
010FC:  CLRF   x96
010FE:  MOVWF  x95
....................    FaultDelayTime[14] = read_eeprom(0x2B);
01100:  MOVFF  FF2,1BE
01104:  BCF    FF2.7
01106:  CLRF   FAA
01108:  MOVLW  2B
0110A:  MOVWF  FA9
0110C:  BCF    FA6.6
0110E:  BCF    FA6.7
01110:  BSF    FA6.0
01112:  MOVF   FA8,W
01114:  BTFSC  xBE.7
01116:  BSF    FF2.7
01118:  CLRF   x98
0111A:  MOVWF  x97
....................    FaultDelayTime[15] = read_eeprom(0x2C);
0111C:  MOVFF  FF2,1BE
01120:  BCF    FF2.7
01122:  CLRF   FAA
01124:  MOVLW  2C
01126:  MOVWF  FA9
01128:  BCF    FA6.6
0112A:  BCF    FA6.7
0112C:  BSF    FA6.0
0112E:  MOVF   FA8,W
01130:  BTFSC  xBE.7
01132:  BSF    FF2.7
01134:  CLRF   x9A
01136:  MOVWF  x99
....................    FaultDelayTime[16] = read_eeprom(0x2D);
01138:  MOVFF  FF2,1BE
0113C:  BCF    FF2.7
0113E:  CLRF   FAA
01140:  MOVLW  2D
01142:  MOVWF  FA9
01144:  BCF    FA6.6
01146:  BCF    FA6.7
01148:  BSF    FA6.0
0114A:  MOVF   FA8,W
0114C:  BTFSC  xBE.7
0114E:  BSF    FF2.7
01150:  CLRF   x9C
01152:  MOVWF  x9B
....................    FaultDelayTime[17] = read_eeprom(0x2E);
01154:  MOVFF  FF2,1BE
01158:  BCF    FF2.7
0115A:  CLRF   FAA
0115C:  MOVLW  2E
0115E:  MOVWF  FA9
01160:  BCF    FA6.6
01162:  BCF    FA6.7
01164:  BSF    FA6.0
01166:  MOVF   FA8,W
01168:  BTFSC  xBE.7
0116A:  BSF    FF2.7
0116C:  CLRF   x9E
0116E:  MOVWF  x9D
....................    FaultDelayTime[18] = read_eeprom(0x2F);
01170:  MOVFF  FF2,1BE
01174:  BCF    FF2.7
01176:  CLRF   FAA
01178:  MOVLW  2F
0117A:  MOVWF  FA9
0117C:  BCF    FA6.6
0117E:  BCF    FA6.7
01180:  BSF    FA6.0
01182:  MOVF   FA8,W
01184:  BTFSC  xBE.7
01186:  BSF    FF2.7
01188:  CLRF   xA0
0118A:  MOVWF  x9F
....................    FaultDelayTime[19] = read_eeprom(0x30);
0118C:  MOVFF  FF2,1BE
01190:  BCF    FF2.7
01192:  CLRF   FAA
01194:  MOVLW  30
01196:  MOVWF  FA9
01198:  BCF    FA6.6
0119A:  BCF    FA6.7
0119C:  BSF    FA6.0
0119E:  MOVF   FA8,W
011A0:  BTFSC  xBE.7
011A2:  BSF    FF2.7
011A4:  CLRF   xA2
011A6:  MOVWF  xA1
....................    FaultDelayTime[20] = read_eeprom(0x31);
011A8:  MOVFF  FF2,1BE
011AC:  BCF    FF2.7
011AE:  CLRF   FAA
011B0:  MOVLW  31
011B2:  MOVWF  FA9
011B4:  BCF    FA6.6
011B6:  BCF    FA6.7
011B8:  BSF    FA6.0
011BA:  MOVF   FA8,W
011BC:  BTFSC  xBE.7
011BE:  BSF    FF2.7
011C0:  CLRF   xA4
011C2:  MOVWF  xA3
011C4:  MOVLB  0
011C6:  GOTO   656C (RETURN)
....................    
....................    //BuadRate = read_eeprom(0x61);         //Buad Rate
....................    //NoOfbit = read_eeprom(0x62);
....................    //Parity = read_eeprom(0x63);
....................    //Stopbit = read_eeprom(0x64);
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
.................... 
....................    //Data = getc();
....................    //putc(Data);
....................    SBUF = getc();
*
00510:  BTFSS  F9E.5
00512:  BRA    0510
00514:  MOVFF  FAE,2E
....................    checkCommand();
00518:  BRA    02DA
.................... }
.................... 
0051A:  BCF    F9E.5
0051C:  GOTO   006C
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
00520:  INCF   19,F
.................... 
....................    if(T_timeout != 0)
00522:  MOVLB  1
00524:  MOVF   x16,F
00526:  BZ    0536
....................    {
....................       T_timeout--;
00528:  DECF   x16,F
....................       if(T_timeout == 0)
0052A:  MOVF   x16,F
0052C:  BNZ   0536
....................       {
....................          //sequence = stop_sq;         //timeout
....................          sequence = end_sq;         //timeout   
0052E:  MOVFF  6F,77
....................          output_bit(P485ctrl,0);
00532:  BCF    F8A.3
00534:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
00536:  MOVF   1C,F
00538:  BZ    0552
....................    {
....................       TimeBase1s--;
0053A:  DECF   1C,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
0053C:  MOVF   1C,F
0053E:  BNZ   0552
....................       {
....................          if(AutoAckDelayTime != 0x00)
00540:  MOVF   1D,F
00542:  BZ    054C
....................          {
....................             AutoAckDelayTime--;
00544:  DECF   1D,F
....................             if(AutoAckDelayTime == 0x00)
00546:  MOVF   1D,F
00548:  BNZ   054C
....................             {
....................                AutoAckFlag = 1 ;
0054A:  BSF    1A.2
....................             }
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
0054C:  BSF    30.3
....................          TimeBase1s = 100;
0054E:  MOVLW  64
00550:  MOVWF  1C
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 50)    //500mS
00552:  MOVF   19,W
00554:  SUBLW  32
00556:  BNZ   0580
....................    {
....................       StatusTime = 0;
00558:  CLRF   19
....................       if(HearthbeatInd == 0)
0055A:  BTFSC  1A.0
0055C:  BRA    0566
....................       {
....................          HearthbeatInd = 1;
0055E:  BSF    1A.0
....................          output_bit(Pled,1);
00560:  BSF    F8A.5
00562:  BCF    F93.5
....................       }
00564:  BRA    056C
....................       else
....................       {
....................          HearthbeatInd = 0;
00566:  BCF    1A.0
....................          output_bit(Pled,0); 
00568:  BCF    F8A.5
0056A:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................     if(Test == 1)            //Test function
0056C:  BTFSS  1A.6
0056E:  BRA    057E
....................    {
....................        if(T_test > 0x00) T_test --;
00570:  MOVF   2F,F
00572:  BZ    0576
00574:  DECF   2F,F
....................        if(T_test == 0x00) Test_fault = 1;
00576:  MOVF   2F,F
00578:  BNZ   057C
0057A:  BSF    1A.5
....................     }
0057C:  BRA    0580
....................     else
....................     {
....................        //Test = 0;
....................        T_test = 0x00;
0057E:  CLRF   2F
....................     }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
00580:  MOVF   1B,F
00582:  BZ    05AA
....................    {
....................       FlashingRateTime--;
00584:  DECF   1B,F
....................       if(FlashingRateTime == 0)
00586:  MOVF   1B,F
00588:  BNZ   059E
....................       {
....................          outmcp23 = 0xff;
0058A:  SETF   x18
....................          
....................          if(SyncStatus == 0)
0058C:  BTFSC  30.1
0058E:  BRA    059A
....................          {
....................             if(FlashingFlag == 1)
00590:  BTFSS  1A.1
00592:  BRA    0598
....................             {
....................                FlashingFlag = 0;
00594:  BCF    1A.1
....................                //output_bit(PSyncS,0);
....................             }
00596:  BRA    059A
....................             else
....................             {
.................... 
....................                FlashingFlag = 1;
00598:  BSF    1A.1
....................                //output_bit(PSyncS,1);
....................             }
....................          }
....................          //FlashingFlag = ~FlashingFlag;
....................          FlashingRateTime = FlashingRate;      //reload value
0059A:  MOVFF  6C,1B
....................       }
.................... 
....................       if(Synctimer != 0x00)
0059E:  MOVF   31,F
005A0:  BZ    05AA
....................       {
....................          Synctimer--;
005A2:  DECF   31,F
....................          if(Synctimer == 0x00)
005A4:  MOVF   31,F
005A6:  BNZ   05AA
....................          {
....................             SyncStatus = 0;
005A8:  BCF    30.1
....................          }
....................       }
.................... 
....................    }
....................    
005AA:  BCF    F9E.1
005AC:  MOVLB  0
005AE:  GOTO   006C
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
04734:  MOVLB  1
04736:  BTFSS  x27.0
04738:  BRA    47AC
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
0473A:  MOVLW  00
0473C:  BTFSC  x1B.0
0473E:  MOVLW  01
04740:  MOVWF  xC7
04742:  MOVLW  00
04744:  BTFSC  x1F.0
04746:  MOVLW  01
04748:  XORWF  xC7,W
0474A:  SUBLW  01
0474C:  BNZ   4752
0474E:  BTFSC  x21.0
04750:  BRA    4756
04752:  BTFSS  x2B.0
04754:  BRA    47A4
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
04756:  BTFSC  x29.0
04758:  BRA    47A2
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0475A:  BTFSC  x2B.0
0475C:  BRA    4776
0475E:  MOVLB  0
04760:  MOVF   x6A,W
04762:  SUBLW  0F
04764:  BTFSC  FD8.2
04766:  BRA    476C
04768:  MOVLB  1
0476A:  BRA    4776
....................             {
....................                TimeBase1s = 100 ;            //reload again
0476C:  MOVLW  64
0476E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04770:  MOVFF  6B,1D
04774:  MOVLB  1
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
04776:  BSF    x2B.0
....................             if(FlashingFlag == 0)
04778:  BTFSC  1A.1
0477A:  BRA    4780
....................             {
....................                Output.B1 = 0;           //Flash output1
0477C:  BCF    x1D.0
....................             }
0477E:  BRA    4782
....................             else
....................             {
....................                Output.B1 = 1;
04780:  BSF    x1D.0
....................             }
.................... 
....................             if (~AutoTestFlag)
04782:  BTFSC  1A.4
04784:  BRA    47A2
....................             {
....................                if(OutputBoth.B1 == 0)                  //Both output
04786:  BTFSC  x25.0
04788:  BRA    4794
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0478A:  BSF    F89.4
0478C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0478E:  BSF    F89.3
04790:  BCF    F92.3
....................                }
04792:  BRA    47A2
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
04794:  BTFSS  x23.0
04796:  BRA    479E
04798:  BSF    F89.4
0479A:  BCF    F92.4
0479C:  BRA    47A2
....................                   else output_bit(Pbell,1);                          //Bell
0479E:  BSF    F89.3
047A0:  BCF    F92.3
....................                }
....................             }
....................         }
....................       }
047A2:  BRA    47AA
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
047A4:  BTFSS  x21.0
047A6:  BRA    47AA
047A8:  BCF    x29.0
....................    }
047AA:  BRA    47C6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
047AC:  MOVLW  00
047AE:  BTFSC  x1B.0
047B0:  MOVLW  01
047B2:  MOVWF  xC7
047B4:  MOVLW  00
047B6:  BTFSC  x1F.0
047B8:  MOVLW  01
047BA:  XORWF  xC7,W
047BC:  SUBLW  01
047BE:  BNZ   47C4
....................       {
....................          Output.B1 = 0;
047C0:  BCF    x1D.0
....................       }
047C2:  BRA    47C6
....................       else
....................       {
....................          Output.B1 = 1;
047C4:  BSF    x1D.0
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
047C6:  BTFSS  x27.1
047C8:  BRA    483C
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
047CA:  MOVLW  00
047CC:  BTFSC  x1B.1
047CE:  MOVLW  01
047D0:  MOVWF  xC7
047D2:  MOVLW  00
047D4:  BTFSC  x1F.1
047D6:  MOVLW  01
047D8:  XORWF  xC7,W
047DA:  SUBLW  01
047DC:  BNZ   47E2
047DE:  BTFSC  x21.1
047E0:  BRA    47E6
047E2:  BTFSS  x2B.1
047E4:  BRA    4834
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
047E6:  BTFSC  x29.1
047E8:  BRA    4832
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
047EA:  BTFSC  x2B.1
047EC:  BRA    4806
047EE:  MOVLB  0
047F0:  MOVF   x6A,W
047F2:  SUBLW  0F
047F4:  BTFSC  FD8.2
047F6:  BRA    47FC
047F8:  MOVLB  1
047FA:  BRA    4806
....................             {
....................                TimeBase1s = 100 ;            //reload again
047FC:  MOVLW  64
047FE:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04800:  MOVFF  6B,1D
04804:  MOVLB  1
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
04806:  BSF    x2B.1
....................             if(FlashingFlag == 0)
04808:  BTFSC  1A.1
0480A:  BRA    4810
....................             {
....................                Output.B2 = 0;           //Flash output1
0480C:  BCF    x1D.1
....................             }
0480E:  BRA    4812
....................             else
....................             {
....................                Output.B2 = 1;
04810:  BSF    x1D.1
....................             }
.................... 
....................             if (~AutoTestFlag)
04812:  BTFSC  1A.4
04814:  BRA    4832
....................             {
....................                if(OutputBoth.B2 == 0)                  //Both output
04816:  BTFSC  x25.1
04818:  BRA    4824
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0481A:  BSF    F89.4
0481C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0481E:  BSF    F89.3
04820:  BCF    F92.3
....................                }
04822:  BRA    4832
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
04824:  BTFSS  x23.1
04826:  BRA    482E
04828:  BSF    F89.4
0482A:  BCF    F92.4
0482C:  BRA    4832
....................                   else output_bit(Pbell,1);                          //Bell
0482E:  BSF    F89.3
04830:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
04832:  BRA    483A
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
04834:  BTFSS  x21.1
04836:  BRA    483A
04838:  BCF    x29.1
....................    }
0483A:  BRA    4856
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
0483C:  MOVLW  00
0483E:  BTFSC  x1B.1
04840:  MOVLW  01
04842:  MOVWF  xC7
04844:  MOVLW  00
04846:  BTFSC  x1F.1
04848:  MOVLW  01
0484A:  XORWF  xC7,W
0484C:  SUBLW  01
0484E:  BNZ   4854
....................       {
....................          Output.B2 = 0;
04850:  BCF    x1D.1
....................       }
04852:  BRA    4856
....................       else
....................       {
....................          Output.B2 = 1;
04854:  BSF    x1D.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
04856:  BTFSS  x27.2
04858:  BRA    48CC
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
0485A:  MOVLW  00
0485C:  BTFSC  x1B.2
0485E:  MOVLW  01
04860:  MOVWF  xC7
04862:  MOVLW  00
04864:  BTFSC  x1F.2
04866:  MOVLW  01
04868:  XORWF  xC7,W
0486A:  SUBLW  01
0486C:  BNZ   4872
0486E:  BTFSC  x21.2
04870:  BRA    4876
04872:  BTFSS  x2B.2
04874:  BRA    48C4
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
04876:  BTFSC  x29.2
04878:  BRA    48C2
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0487A:  BTFSC  x2B.2
0487C:  BRA    4896
0487E:  MOVLB  0
04880:  MOVF   x6A,W
04882:  SUBLW  0F
04884:  BTFSC  FD8.2
04886:  BRA    488C
04888:  MOVLB  1
0488A:  BRA    4896
....................             {
....................                TimeBase1s = 100 ;            //reload again
0488C:  MOVLW  64
0488E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04890:  MOVFF  6B,1D
04894:  MOVLB  1
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
04896:  BSF    x2B.2
....................             if(FlashingFlag == 0)
04898:  BTFSC  1A.1
0489A:  BRA    48A0
....................             {
....................                Output.B3 = 0;           //Flash output1
0489C:  BCF    x1D.2
....................             }
0489E:  BRA    48A2
....................             else
....................             {
....................                Output.B3 = 1;
048A0:  BSF    x1D.2
....................             }
.................... 
....................             if (~AutoTestFlag)
048A2:  BTFSC  1A.4
048A4:  BRA    48C2
....................             {
....................                if(OutputBoth.B3 == 0)                  //Both output
048A6:  BTFSC  x25.2
048A8:  BRA    48B4
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
048AA:  BSF    F89.4
048AC:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
048AE:  BSF    F89.3
048B0:  BCF    F92.3
....................                }
048B2:  BRA    48C2
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
048B4:  BTFSS  x23.2
048B6:  BRA    48BE
048B8:  BSF    F89.4
048BA:  BCF    F92.4
048BC:  BRA    48C2
....................                   else output_bit(Pbell,1);                          //Bell
048BE:  BSF    F89.3
048C0:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
048C2:  BRA    48CA
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
048C4:  BTFSS  x21.2
048C6:  BRA    48CA
048C8:  BCF    x29.2
....................    }
048CA:  BRA    48E6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
048CC:  MOVLW  00
048CE:  BTFSC  x1B.2
048D0:  MOVLW  01
048D2:  MOVWF  xC7
048D4:  MOVLW  00
048D6:  BTFSC  x1F.2
048D8:  MOVLW  01
048DA:  XORWF  xC7,W
048DC:  SUBLW  01
048DE:  BNZ   48E4
....................       {
....................          Output.B3 = 0;
048E0:  BCF    x1D.2
....................       }
048E2:  BRA    48E6
....................       else
....................       {
....................          Output.B3 = 1;
048E4:  BSF    x1D.2
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
048E6:  BTFSS  x27.3
048E8:  BRA    495C
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
048EA:  MOVLW  00
048EC:  BTFSC  x1B.3
048EE:  MOVLW  01
048F0:  MOVWF  xC7
048F2:  MOVLW  00
048F4:  BTFSC  x1F.3
048F6:  MOVLW  01
048F8:  XORWF  xC7,W
048FA:  SUBLW  01
048FC:  BNZ   4902
048FE:  BTFSC  x21.3
04900:  BRA    4906
04902:  BTFSS  x2B.3
04904:  BRA    4954
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
04906:  BTFSC  x29.3
04908:  BRA    4952
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0490A:  BTFSC  x2B.3
0490C:  BRA    4926
0490E:  MOVLB  0
04910:  MOVF   x6A,W
04912:  SUBLW  0F
04914:  BTFSC  FD8.2
04916:  BRA    491C
04918:  MOVLB  1
0491A:  BRA    4926
....................             {
....................                TimeBase1s = 100 ;            //reload again
0491C:  MOVLW  64
0491E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04920:  MOVFF  6B,1D
04924:  MOVLB  1
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
04926:  BSF    x2B.3
....................             if(FlashingFlag == 0)
04928:  BTFSC  1A.1
0492A:  BRA    4930
....................             {
....................                Output.B4 = 0;           //Flash output1
0492C:  BCF    x1D.3
....................             }
0492E:  BRA    4932
....................             else
....................             {
....................                Output.B4 = 1;
04930:  BSF    x1D.3
....................             }
.................... 
....................             if (~AutoTestFlag)
04932:  BTFSC  1A.4
04934:  BRA    4952
....................             {
....................                if(OutputBoth.B4 == 0)                  //Both output
04936:  BTFSC  x25.3
04938:  BRA    4944
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0493A:  BSF    F89.4
0493C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0493E:  BSF    F89.3
04940:  BCF    F92.3
....................                }
04942:  BRA    4952
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
04944:  BTFSS  x23.3
04946:  BRA    494E
04948:  BSF    F89.4
0494A:  BCF    F92.4
0494C:  BRA    4952
....................                   else output_bit(Pbell,1);                          //Bell
0494E:  BSF    F89.3
04950:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
04952:  BRA    495A
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
04954:  BTFSS  x21.3
04956:  BRA    495A
04958:  BCF    x29.3
....................    }
0495A:  BRA    4976
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
0495C:  MOVLW  00
0495E:  BTFSC  x1B.3
04960:  MOVLW  01
04962:  MOVWF  xC7
04964:  MOVLW  00
04966:  BTFSC  x1F.3
04968:  MOVLW  01
0496A:  XORWF  xC7,W
0496C:  SUBLW  01
0496E:  BNZ   4974
....................       {
....................          Output.B4 = 0;
04970:  BCF    x1D.3
....................       }
04972:  BRA    4976
....................       else
....................       {
....................          Output.B4 = 1;
04974:  BSF    x1D.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
04976:  BTFSS  x27.4
04978:  BRA    49EC
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
0497A:  MOVLW  00
0497C:  BTFSC  x1B.4
0497E:  MOVLW  01
04980:  MOVWF  xC7
04982:  MOVLW  00
04984:  BTFSC  x1F.4
04986:  MOVLW  01
04988:  XORWF  xC7,W
0498A:  SUBLW  01
0498C:  BNZ   4992
0498E:  BTFSC  x21.4
04990:  BRA    4996
04992:  BTFSS  x2B.4
04994:  BRA    49E4
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
04996:  BTFSC  x29.4
04998:  BRA    49E2
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0499A:  BTFSC  x2B.4
0499C:  BRA    49B6
0499E:  MOVLB  0
049A0:  MOVF   x6A,W
049A2:  SUBLW  0F
049A4:  BTFSC  FD8.2
049A6:  BRA    49AC
049A8:  MOVLB  1
049AA:  BRA    49B6
....................             {
....................                TimeBase1s = 100 ;            //reload again
049AC:  MOVLW  64
049AE:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
049B0:  MOVFF  6B,1D
049B4:  MOVLB  1
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
049B6:  BSF    x2B.4
....................             if(FlashingFlag == 0)
049B8:  BTFSC  1A.1
049BA:  BRA    49C0
....................             {
....................                Output.B5 = 0;           //Flash output1
049BC:  BCF    x1D.4
....................             }
049BE:  BRA    49C2
....................             else
....................             {
....................                Output.B5 = 1;
049C0:  BSF    x1D.4
....................             }
.................... 
....................             if (~AutoTestFlag)
049C2:  BTFSC  1A.4
049C4:  BRA    49E2
....................             {
....................                if(OutputBoth.B5 == 0)                  //Both output
049C6:  BTFSC  x25.4
049C8:  BRA    49D4
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
049CA:  BSF    F89.4
049CC:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
049CE:  BSF    F89.3
049D0:  BCF    F92.3
....................                }
049D2:  BRA    49E2
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
049D4:  BTFSS  x23.4
049D6:  BRA    49DE
049D8:  BSF    F89.4
049DA:  BCF    F92.4
049DC:  BRA    49E2
....................                   else output_bit(Pbell,1);                          //Bell
049DE:  BSF    F89.3
049E0:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
049E2:  BRA    49EA
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
049E4:  BTFSS  x21.4
049E6:  BRA    49EA
049E8:  BCF    x29.4
....................    }
049EA:  BRA    4A06
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
049EC:  MOVLW  00
049EE:  BTFSC  x1B.4
049F0:  MOVLW  01
049F2:  MOVWF  xC7
049F4:  MOVLW  00
049F6:  BTFSC  x1F.4
049F8:  MOVLW  01
049FA:  XORWF  xC7,W
049FC:  SUBLW  01
049FE:  BNZ   4A04
....................       {
....................          Output.B5 = 0;
04A00:  BCF    x1D.4
....................       }
04A02:  BRA    4A06
....................       else
....................       {
....................          Output.B5 = 1;
04A04:  BSF    x1D.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
04A06:  BTFSS  x27.5
04A08:  BRA    4A7C
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
04A0A:  MOVLW  00
04A0C:  BTFSC  x1B.5
04A0E:  MOVLW  01
04A10:  MOVWF  xC7
04A12:  MOVLW  00
04A14:  BTFSC  x1F.5
04A16:  MOVLW  01
04A18:  XORWF  xC7,W
04A1A:  SUBLW  01
04A1C:  BNZ   4A22
04A1E:  BTFSC  x21.5
04A20:  BRA    4A26
04A22:  BTFSS  x2B.5
04A24:  BRA    4A74
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
04A26:  BTFSC  x29.5
04A28:  BRA    4A72
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04A2A:  BTFSC  x2B.5
04A2C:  BRA    4A46
04A2E:  MOVLB  0
04A30:  MOVF   x6A,W
04A32:  SUBLW  0F
04A34:  BTFSC  FD8.2
04A36:  BRA    4A3C
04A38:  MOVLB  1
04A3A:  BRA    4A46
....................             {
....................                TimeBase1s = 100 ;            //reload again
04A3C:  MOVLW  64
04A3E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04A40:  MOVFF  6B,1D
04A44:  MOVLB  1
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
04A46:  BSF    x2B.5
....................             if(FlashingFlag == 0)
04A48:  BTFSC  1A.1
04A4A:  BRA    4A50
....................             {
....................                Output.B6 = 0;           //Flash output1
04A4C:  BCF    x1D.5
....................             }
04A4E:  BRA    4A52
....................             else
....................             {
....................                Output.B6 = 1;
04A50:  BSF    x1D.5
....................             }
.................... 
....................             if (~AutoTestFlag)
04A52:  BTFSC  1A.4
04A54:  BRA    4A72
....................             {
....................                if(OutputBoth.B6 == 0)                  //Both output
04A56:  BTFSC  x25.5
04A58:  BRA    4A64
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04A5A:  BSF    F89.4
04A5C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04A5E:  BSF    F89.3
04A60:  BCF    F92.3
....................                }
04A62:  BRA    4A72
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
04A64:  BTFSS  x23.5
04A66:  BRA    4A6E
04A68:  BSF    F89.4
04A6A:  BCF    F92.4
04A6C:  BRA    4A72
....................                   else output_bit(Pbell,1);                          //Bell
04A6E:  BSF    F89.3
04A70:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
04A72:  BRA    4A7A
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
04A74:  BTFSS  x21.5
04A76:  BRA    4A7A
04A78:  BCF    x29.5
....................    }
04A7A:  BRA    4A96
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
04A7C:  MOVLW  00
04A7E:  BTFSC  x1B.5
04A80:  MOVLW  01
04A82:  MOVWF  xC7
04A84:  MOVLW  00
04A86:  BTFSC  x1F.5
04A88:  MOVLW  01
04A8A:  XORWF  xC7,W
04A8C:  SUBLW  01
04A8E:  BNZ   4A94
....................       {
....................          Output.B6 = 0;
04A90:  BCF    x1D.5
....................       }
04A92:  BRA    4A96
....................       else
....................       {
....................          Output.B6 = 1;
04A94:  BSF    x1D.5
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
04A96:  BTFSS  x27.6
04A98:  BRA    4B0C
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
04A9A:  MOVLW  00
04A9C:  BTFSC  x1B.6
04A9E:  MOVLW  01
04AA0:  MOVWF  xC7
04AA2:  MOVLW  00
04AA4:  BTFSC  x1F.6
04AA6:  MOVLW  01
04AA8:  XORWF  xC7,W
04AAA:  SUBLW  01
04AAC:  BNZ   4AB2
04AAE:  BTFSC  x21.6
04AB0:  BRA    4AB6
04AB2:  BTFSS  x2B.6
04AB4:  BRA    4B04
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
04AB6:  BTFSC  x29.6
04AB8:  BRA    4B02
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04ABA:  BTFSC  x2B.6
04ABC:  BRA    4AD6
04ABE:  MOVLB  0
04AC0:  MOVF   x6A,W
04AC2:  SUBLW  0F
04AC4:  BTFSC  FD8.2
04AC6:  BRA    4ACC
04AC8:  MOVLB  1
04ACA:  BRA    4AD6
....................             {
....................                TimeBase1s = 100 ;            //reload again
04ACC:  MOVLW  64
04ACE:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04AD0:  MOVFF  6B,1D
04AD4:  MOVLB  1
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
04AD6:  BSF    x2B.6
....................             if(FlashingFlag == 0)
04AD8:  BTFSC  1A.1
04ADA:  BRA    4AE0
....................             {
....................                Output.B7 = 0;           //Flash output1
04ADC:  BCF    x1D.6
....................             }
04ADE:  BRA    4AE2
....................             else
....................             {
....................                Output.B7 = 1;
04AE0:  BSF    x1D.6
....................             }
.................... 
....................             if (~AutoTestFlag)
04AE2:  BTFSC  1A.4
04AE4:  BRA    4B02
....................             {
....................                if(OutputBoth.B7 == 0)                  //Both output
04AE6:  BTFSC  x25.6
04AE8:  BRA    4AF4
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04AEA:  BSF    F89.4
04AEC:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04AEE:  BSF    F89.3
04AF0:  BCF    F92.3
....................                }
04AF2:  BRA    4B02
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
04AF4:  BTFSS  x23.6
04AF6:  BRA    4AFE
04AF8:  BSF    F89.4
04AFA:  BCF    F92.4
04AFC:  BRA    4B02
....................                   else output_bit(Pbell,1);                          //Bell
04AFE:  BSF    F89.3
04B00:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
04B02:  BRA    4B0A
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
04B04:  BTFSS  x21.6
04B06:  BRA    4B0A
04B08:  BCF    x29.6
....................    }
04B0A:  BRA    4B26
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
04B0C:  MOVLW  00
04B0E:  BTFSC  x1B.6
04B10:  MOVLW  01
04B12:  MOVWF  xC7
04B14:  MOVLW  00
04B16:  BTFSC  x1F.6
04B18:  MOVLW  01
04B1A:  XORWF  xC7,W
04B1C:  SUBLW  01
04B1E:  BNZ   4B24
....................       {
....................          Output.B7 = 0;
04B20:  BCF    x1D.6
....................       }
04B22:  BRA    4B26
....................       else
....................       {
....................          Output.B7 = 1;
04B24:  BSF    x1D.6
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
04B26:  BTFSS  x27.7
04B28:  BRA    4B9C
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
04B2A:  MOVLW  00
04B2C:  BTFSC  x1B.7
04B2E:  MOVLW  01
04B30:  MOVWF  xC7
04B32:  MOVLW  00
04B34:  BTFSC  x1F.7
04B36:  MOVLW  01
04B38:  XORWF  xC7,W
04B3A:  SUBLW  01
04B3C:  BNZ   4B42
04B3E:  BTFSC  x21.7
04B40:  BRA    4B46
04B42:  BTFSS  x2B.7
04B44:  BRA    4B94
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
04B46:  BTFSC  x29.7
04B48:  BRA    4B92
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04B4A:  BTFSC  x2B.7
04B4C:  BRA    4B66
04B4E:  MOVLB  0
04B50:  MOVF   x6A,W
04B52:  SUBLW  0F
04B54:  BTFSC  FD8.2
04B56:  BRA    4B5C
04B58:  MOVLB  1
04B5A:  BRA    4B66
....................             {
....................                TimeBase1s = 100 ;            //reload again
04B5C:  MOVLW  64
04B5E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04B60:  MOVFF  6B,1D
04B64:  MOVLB  1
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
04B66:  BSF    x2B.7
....................             if(FlashingFlag == 0)
04B68:  BTFSC  1A.1
04B6A:  BRA    4B70
....................             {
....................                Output.B8 = 0;           //Flash output1
04B6C:  BCF    x1D.7
....................             }
04B6E:  BRA    4B72
....................             else
....................             {
....................                Output.B8 = 1;
04B70:  BSF    x1D.7
....................             }
.................... 
....................             if (~AutoTestFlag)
04B72:  BTFSC  1A.4
04B74:  BRA    4B92
....................             {
....................                if(OutputBoth.B8 == 0)                  //Both output
04B76:  BTFSC  x25.7
04B78:  BRA    4B84
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04B7A:  BSF    F89.4
04B7C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04B7E:  BSF    F89.3
04B80:  BCF    F92.3
....................                }
04B82:  BRA    4B92
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
04B84:  BTFSS  x23.7
04B86:  BRA    4B8E
04B88:  BSF    F89.4
04B8A:  BCF    F92.4
04B8C:  BRA    4B92
....................                   else output_bit(Pbell,1);                          //Bell
04B8E:  BSF    F89.3
04B90:  BCF    F92.3
....................                }
....................             }
....................        }
.................... 
....................       }
04B92:  BRA    4B9A
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
04B94:  BTFSS  x21.7
04B96:  BRA    4B9A
04B98:  BCF    x29.7
....................    }
04B9A:  BRA    4BB6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
04B9C:  MOVLW  00
04B9E:  BTFSC  x1B.7
04BA0:  MOVLW  01
04BA2:  MOVWF  xC7
04BA4:  MOVLW  00
04BA6:  BTFSC  x1F.7
04BA8:  MOVLW  01
04BAA:  XORWF  xC7,W
04BAC:  SUBLW  01
04BAE:  BNZ   4BB4
....................       {
....................          Output.B8 = 0;
04BB0:  BCF    x1D.7
....................       }
04BB2:  BRA    4BB6
....................       else
....................       {
....................          Output.B8 = 1;
04BB4:  BSF    x1D.7
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if(AlarmIndicator.B9 == 1)    // Alarm Function
04BB6:  BTFSS  x28.0
04BB8:  BRA    4C2C
....................    {
....................       if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 1))|| In.B9 == 1)    // alarm1 occure and "Lock type"
04BBA:  MOVLW  00
04BBC:  BTFSC  x1C.0
04BBE:  MOVLW  01
04BC0:  MOVWF  xC7
04BC2:  MOVLW  00
04BC4:  BTFSC  x20.0
04BC6:  MOVLW  01
04BC8:  XORWF  xC7,W
04BCA:  SUBLW  01
04BCC:  BNZ   4BD2
04BCE:  BTFSC  x22.0
04BD0:  BRA    4BD6
04BD2:  BTFSS  x2C.0
04BD4:  BRA    4C24
....................       //if(Inputt.B9 == 0)
....................       {
....................          if(Ack.B9 == 0)
04BD6:  BTFSC  x2A.0
04BD8:  BRA    4C22
....................          {
....................             if(In.B9 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04BDA:  BTFSC  x2C.0
04BDC:  BRA    4BF6
04BDE:  MOVLB  0
04BE0:  MOVF   x6A,W
04BE2:  SUBLW  0F
04BE4:  BTFSC  FD8.2
04BE6:  BRA    4BEC
04BE8:  MOVLB  1
04BEA:  BRA    4BF6
....................             {
....................                TimeBase1s = 100 ;            //reload again
04BEC:  MOVLW  64
04BEE:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04BF0:  MOVFF  6B,1D
04BF4:  MOVLB  1
....................             }
.................... 
....................             In.B9 = 1;                                 // setbit in1
04BF6:  BSF    x2C.0
....................             if(FlashingFlag == 0)
04BF8:  BTFSC  1A.1
04BFA:  BRA    4C00
....................             {
....................                Output.B9 = 0;           //Flash output1
04BFC:  BCF    x1E.0
....................             }
04BFE:  BRA    4C02
....................             else
....................             {
....................                Output.B9 = 1;
04C00:  BSF    x1E.0
....................             }
.................... 
....................             if (~AutoTestFlag)
04C02:  BTFSC  1A.4
04C04:  BRA    4C22
....................             {
....................                if(OutputBoth.B9 == 0)                  //Both output
04C06:  BTFSC  x26.0
04C08:  BRA    4C14
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04C0A:  BSF    F89.4
04C0C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04C0E:  BSF    F89.3
04C10:  BCF    F92.3
....................                }
04C12:  BRA    4C22
....................                else
....................                {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
04C14:  BTFSS  x24.0
04C16:  BRA    4C1E
04C18:  BSF    F89.4
04C1A:  BCF    F92.4
04C1C:  BRA    4C22
....................                   else output_bit(Pbell,1);                          //Bell
04C1E:  BSF    F89.3
04C20:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
04C22:  BRA    4C2A
....................       else if(FaultType.B9 == 1) Ack.B9 = 0;
04C24:  BTFSS  x22.0
04C26:  BRA    4C2A
04C28:  BCF    x2A.0
....................    }
04C2A:  BRA    4C46
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B9 ^ InputType.B9) == 1)
04C2C:  MOVLW  00
04C2E:  BTFSC  x1C.0
04C30:  MOVLW  01
04C32:  MOVWF  xC7
04C34:  MOVLW  00
04C36:  BTFSC  x20.0
04C38:  MOVLW  01
04C3A:  XORWF  xC7,W
04C3C:  SUBLW  01
04C3E:  BNZ   4C44
....................       {
....................          Output.B9 = 0;
04C40:  BCF    x1E.0
....................       }
04C42:  BRA    4C46
....................       else
....................       {
....................          Output.B9 = 1;
04C44:  BSF    x1E.0
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if(AlarmIndicator.B10 == 1)    // Alarm Function
04C46:  BTFSS  x28.1
04C48:  BRA    4CBC
....................    {
....................       if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 1))|| In.B10 == 1)    // alarm1 occure and "Lock type"
04C4A:  MOVLW  00
04C4C:  BTFSC  x1C.1
04C4E:  MOVLW  01
04C50:  MOVWF  xC7
04C52:  MOVLW  00
04C54:  BTFSC  x20.1
04C56:  MOVLW  01
04C58:  XORWF  xC7,W
04C5A:  SUBLW  01
04C5C:  BNZ   4C62
04C5E:  BTFSC  x22.1
04C60:  BRA    4C66
04C62:  BTFSS  x2C.1
04C64:  BRA    4CB4
....................       //if(Inputt.B10 == 0)
....................       {
....................          if(Ack.B10 == 0)
04C66:  BTFSC  x2A.1
04C68:  BRA    4CB2
....................          {
....................             if(In.B10 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04C6A:  BTFSC  x2C.1
04C6C:  BRA    4C86
04C6E:  MOVLB  0
04C70:  MOVF   x6A,W
04C72:  SUBLW  0F
04C74:  BTFSC  FD8.2
04C76:  BRA    4C7C
04C78:  MOVLB  1
04C7A:  BRA    4C86
....................             {
....................                TimeBase1s = 100 ;            //reload again
04C7C:  MOVLW  64
04C7E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04C80:  MOVFF  6B,1D
04C84:  MOVLB  1
....................             }
.................... 
....................             In.B10 = 1;                                 // setbit in1
04C86:  BSF    x2C.1
....................             if(FlashingFlag == 0)
04C88:  BTFSC  1A.1
04C8A:  BRA    4C90
....................             {
....................                Output.B10 = 0;           //Flash output1
04C8C:  BCF    x1E.1
....................             }
04C8E:  BRA    4C92
....................             else
....................             {
....................                Output.B10 = 1;
04C90:  BSF    x1E.1
....................             }
.................... 
....................             if (~AutoTestFlag)
04C92:  BTFSC  1A.4
04C94:  BRA    4CB2
....................             {
....................                if(OutputBoth.B10 == 0)                  //Both output
04C96:  BTFSC  x26.1
04C98:  BRA    4CA4
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04C9A:  BSF    F89.4
04C9C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04C9E:  BSF    F89.3
04CA0:  BCF    F92.3
....................                }
04CA2:  BRA    4CB2
....................                else
....................                {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
04CA4:  BTFSS  x24.1
04CA6:  BRA    4CAE
04CA8:  BSF    F89.4
04CAA:  BCF    F92.4
04CAC:  BRA    4CB2
....................                   else output_bit(Pbell,1);                          //Bell
04CAE:  BSF    F89.3
04CB0:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
04CB2:  BRA    4CBA
....................       else if(FaultType.B10 == 1) Ack.B10 = 0;
04CB4:  BTFSS  x22.1
04CB6:  BRA    4CBA
04CB8:  BCF    x2A.1
....................    }
04CBA:  BRA    4CD6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B10 ^ InputType.B10) == 1)
04CBC:  MOVLW  00
04CBE:  BTFSC  x1C.1
04CC0:  MOVLW  01
04CC2:  MOVWF  xC7
04CC4:  MOVLW  00
04CC6:  BTFSC  x20.1
04CC8:  MOVLW  01
04CCA:  XORWF  xC7,W
04CCC:  SUBLW  01
04CCE:  BNZ   4CD4
....................       {
....................          Output.B10 = 0;
04CD0:  BCF    x1E.1
....................       }
04CD2:  BRA    4CD6
....................       else
....................       {
....................          Output.B10 = 1;
04CD4:  BSF    x1E.1
....................       }
....................    }
.................... //}
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if(AlarmIndicator.B11 == 1)    // Alarm Function
04CD6:  BTFSS  x28.2
04CD8:  BRA    4D4C
....................    {
....................       if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 1))|| In.B11 == 1)    // alarm1 occure and "Lock type"
04CDA:  MOVLW  00
04CDC:  BTFSC  x1C.2
04CDE:  MOVLW  01
04CE0:  MOVWF  xC7
04CE2:  MOVLW  00
04CE4:  BTFSC  x20.2
04CE6:  MOVLW  01
04CE8:  XORWF  xC7,W
04CEA:  SUBLW  01
04CEC:  BNZ   4CF2
04CEE:  BTFSC  x22.2
04CF0:  BRA    4CF6
04CF2:  BTFSS  x2C.2
04CF4:  BRA    4D44
....................       //if(Inputt.B11 == 0)
....................       {
....................          if(Ack.B11 == 0)
04CF6:  BTFSC  x2A.2
04CF8:  BRA    4D42
....................          {
....................             if(In.B11 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04CFA:  BTFSC  x2C.2
04CFC:  BRA    4D16
04CFE:  MOVLB  0
04D00:  MOVF   x6A,W
04D02:  SUBLW  0F
04D04:  BTFSC  FD8.2
04D06:  BRA    4D0C
04D08:  MOVLB  1
04D0A:  BRA    4D16
....................             {
....................                TimeBase1s = 100 ;            //reload again
04D0C:  MOVLW  64
04D0E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04D10:  MOVFF  6B,1D
04D14:  MOVLB  1
....................             }
.................... 
....................             In.B11 = 1;                                 // setbit in1
04D16:  BSF    x2C.2
....................             if(FlashingFlag == 0)
04D18:  BTFSC  1A.1
04D1A:  BRA    4D20
....................             {
....................                Output.B11 = 0;           //Flash output1
04D1C:  BCF    x1E.2
....................             }
04D1E:  BRA    4D22
....................             else
....................             {
....................                Output.B11 = 1;
04D20:  BSF    x1E.2
....................             }
.................... 
....................             if (~AutoTestFlag)
04D22:  BTFSC  1A.4
04D24:  BRA    4D42
....................             {
....................                if(OutputBoth.B11 == 0)                  //Both output
04D26:  BTFSC  x26.2
04D28:  BRA    4D34
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04D2A:  BSF    F89.4
04D2C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04D2E:  BSF    F89.3
04D30:  BCF    F92.3
....................                }
04D32:  BRA    4D42
....................                else
....................                {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,1);     //Buzzer
04D34:  BTFSS  x24.2
04D36:  BRA    4D3E
04D38:  BSF    F89.4
04D3A:  BCF    F92.4
04D3C:  BRA    4D42
....................                   else output_bit(Pbell,1);                          //Bell
04D3E:  BSF    F89.3
04D40:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
04D42:  BRA    4D4A
....................       else if(FaultType.B11 == 1) Ack.B11 = 0;
04D44:  BTFSS  x22.2
04D46:  BRA    4D4A
04D48:  BCF    x2A.2
....................    }
04D4A:  BRA    4D66
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B11 ^ InputType.B11) == 1)
04D4C:  MOVLW  00
04D4E:  BTFSC  x1C.2
04D50:  MOVLW  01
04D52:  MOVWF  xC7
04D54:  MOVLW  00
04D56:  BTFSC  x20.2
04D58:  MOVLW  01
04D5A:  XORWF  xC7,W
04D5C:  SUBLW  01
04D5E:  BNZ   4D64
....................       {
....................          Output.B11 = 0;
04D60:  BCF    x1E.2
....................       }
04D62:  BRA    4D66
....................       else
....................       {
....................          Output.B11 = 1;
04D64:  BSF    x1E.2
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if(AlarmIndicator.B12 == 1)    // Alarm Function
04D66:  BTFSS  x28.3
04D68:  BRA    4DDC
....................    {
....................       if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 1))|| In.B12 == 1)    // alarm1 occure and "Lock type"
04D6A:  MOVLW  00
04D6C:  BTFSC  x1C.3
04D6E:  MOVLW  01
04D70:  MOVWF  xC7
04D72:  MOVLW  00
04D74:  BTFSC  x20.3
04D76:  MOVLW  01
04D78:  XORWF  xC7,W
04D7A:  SUBLW  01
04D7C:  BNZ   4D82
04D7E:  BTFSC  x22.3
04D80:  BRA    4D86
04D82:  BTFSS  x2C.3
04D84:  BRA    4DD4
....................       //if(Inputt.B12 == 0)
....................       {
....................          if(Ack.B12 == 0)
04D86:  BTFSC  x2A.3
04D88:  BRA    4DD2
....................          {
....................             if(In.B12 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04D8A:  BTFSC  x2C.3
04D8C:  BRA    4DA6
04D8E:  MOVLB  0
04D90:  MOVF   x6A,W
04D92:  SUBLW  0F
04D94:  BTFSC  FD8.2
04D96:  BRA    4D9C
04D98:  MOVLB  1
04D9A:  BRA    4DA6
....................             {
....................                TimeBase1s = 100 ;            //reload again
04D9C:  MOVLW  64
04D9E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04DA0:  MOVFF  6B,1D
04DA4:  MOVLB  1
....................             }
.................... 
....................             In.B12 = 1;                                 // setbit in1
04DA6:  BSF    x2C.3
....................             if(FlashingFlag == 0)
04DA8:  BTFSC  1A.1
04DAA:  BRA    4DB0
....................             {
....................                Output.B12 = 0;           //Flash output1
04DAC:  BCF    x1E.3
....................             }
04DAE:  BRA    4DB2
....................             else
....................             {
....................                Output.B12 = 1;
04DB0:  BSF    x1E.3
....................             }
.................... 
....................             if (~AutoTestFlag)
04DB2:  BTFSC  1A.4
04DB4:  BRA    4DD2
....................             {
....................                if(OutputBoth.B12 == 0)                  //Both output
04DB6:  BTFSC  x26.3
04DB8:  BRA    4DC4
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04DBA:  BSF    F89.4
04DBC:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04DBE:  BSF    F89.3
04DC0:  BCF    F92.3
....................                }
04DC2:  BRA    4DD2
....................                else
....................                {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,1);     //Buzzer
04DC4:  BTFSS  x24.3
04DC6:  BRA    4DCE
04DC8:  BSF    F89.4
04DCA:  BCF    F92.4
04DCC:  BRA    4DD2
....................                   else output_bit(Pbell,1);                          //Bell
04DCE:  BSF    F89.3
04DD0:  BCF    F92.3
....................                }
....................             }
....................         }
.................... 
....................       }
04DD2:  BRA    4DDA
....................       else if(FaultType.B12 == 1) Ack.B12 = 0;
04DD4:  BTFSS  x22.3
04DD6:  BRA    4DDA
04DD8:  BCF    x2A.3
....................    }
04DDA:  BRA    4DF6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B12 ^ InputType.B12) == 1)
04DDC:  MOVLW  00
04DDE:  BTFSC  x1C.3
04DE0:  MOVLW  01
04DE2:  MOVWF  xC7
04DE4:  MOVLW  00
04DE6:  BTFSC  x20.3
04DE8:  MOVLW  01
04DEA:  XORWF  xC7,W
04DEC:  SUBLW  01
04DEE:  BNZ   4DF4
....................       {
....................          Output.B12 = 0;
04DF0:  BCF    x1E.3
....................       }
04DF2:  BRA    4DF6
....................       else
....................       {
....................          Output.B12 = 1;
04DF4:  BSF    x1E.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if(AlarmIndicator.B13 == 1)    // Alarm Function
04DF6:  BTFSS  x28.4
04DF8:  BRA    4E6C
....................    {
....................       if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 1))|| In.B13 == 1)    // alarm1 occure and "Lock type"
04DFA:  MOVLW  00
04DFC:  BTFSC  x1C.4
04DFE:  MOVLW  01
04E00:  MOVWF  xC7
04E02:  MOVLW  00
04E04:  BTFSC  x20.4
04E06:  MOVLW  01
04E08:  XORWF  xC7,W
04E0A:  SUBLW  01
04E0C:  BNZ   4E12
04E0E:  BTFSC  x22.4
04E10:  BRA    4E16
04E12:  BTFSS  x2C.4
04E14:  BRA    4E64
....................       //if(Inputt.B13 == 0)
....................       {
....................          if(Ack.B13 == 0)
04E16:  BTFSC  x2A.4
04E18:  BRA    4E62
....................          {
....................             if(In.B13 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04E1A:  BTFSC  x2C.4
04E1C:  BRA    4E36
04E1E:  MOVLB  0
04E20:  MOVF   x6A,W
04E22:  SUBLW  0F
04E24:  BTFSC  FD8.2
04E26:  BRA    4E2C
04E28:  MOVLB  1
04E2A:  BRA    4E36
....................             {
....................                TimeBase1s = 100 ;            //reload again
04E2C:  MOVLW  64
04E2E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04E30:  MOVFF  6B,1D
04E34:  MOVLB  1
....................             }
.................... 
....................             In.B13 = 1;                                 // setbit in1
04E36:  BSF    x2C.4
....................             if(FlashingFlag == 0)
04E38:  BTFSC  1A.1
04E3A:  BRA    4E40
....................             {
....................                Output.B13 = 0;           //Flash output1
04E3C:  BCF    x1E.4
....................             }
04E3E:  BRA    4E42
....................             else
....................             {
....................                Output.B13 = 1;
04E40:  BSF    x1E.4
....................             }
.................... 
....................             if (~AutoTestFlag)
04E42:  BTFSC  1A.4
04E44:  BRA    4E62
....................             {
....................                if(OutputBoth.B13 == 0)                  //Both output
04E46:  BTFSC  x26.4
04E48:  BRA    4E54
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04E4A:  BSF    F89.4
04E4C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04E4E:  BSF    F89.3
04E50:  BCF    F92.3
....................                }
04E52:  BRA    4E62
....................                else
....................                {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,1);     //Buzzer
04E54:  BTFSS  x24.4
04E56:  BRA    4E5E
04E58:  BSF    F89.4
04E5A:  BCF    F92.4
04E5C:  BRA    4E62
....................                   else output_bit(Pbell,1);                          //Bell
04E5E:  BSF    F89.3
04E60:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
04E62:  BRA    4E6A
....................       else if(FaultType.B13 == 1) Ack.B13 = 0;
04E64:  BTFSS  x22.4
04E66:  BRA    4E6A
04E68:  BCF    x2A.4
....................    }
04E6A:  BRA    4E86
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B13 ^ InputType.B13) == 1)
04E6C:  MOVLW  00
04E6E:  BTFSC  x1C.4
04E70:  MOVLW  01
04E72:  MOVWF  xC7
04E74:  MOVLW  00
04E76:  BTFSC  x20.4
04E78:  MOVLW  01
04E7A:  XORWF  xC7,W
04E7C:  SUBLW  01
04E7E:  BNZ   4E84
....................       {
....................          Output.B13 = 0;
04E80:  BCF    x1E.4
....................       }
04E82:  BRA    4E86
....................       else
....................       {
....................          Output.B13 = 1;
04E84:  BSF    x1E.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if(AlarmIndicator.B14 == 1)    // Alarm Function
04E86:  BTFSS  x28.5
04E88:  BRA    4EFC
....................    {
....................       if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 1))|| In.B14 == 1)    // alarm1 occure and "Lock type"
04E8A:  MOVLW  00
04E8C:  BTFSC  x1C.5
04E8E:  MOVLW  01
04E90:  MOVWF  xC7
04E92:  MOVLW  00
04E94:  BTFSC  x20.5
04E96:  MOVLW  01
04E98:  XORWF  xC7,W
04E9A:  SUBLW  01
04E9C:  BNZ   4EA2
04E9E:  BTFSC  x22.5
04EA0:  BRA    4EA6
04EA2:  BTFSS  x2C.5
04EA4:  BRA    4EF4
....................       //if(Inputt.B14 == 0)
....................       {
....................          if(Ack.B14 == 0)
04EA6:  BTFSC  x2A.5
04EA8:  BRA    4EF2
....................          {
....................             if(In.B14 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04EAA:  BTFSC  x2C.5
04EAC:  BRA    4EC6
04EAE:  MOVLB  0
04EB0:  MOVF   x6A,W
04EB2:  SUBLW  0F
04EB4:  BTFSC  FD8.2
04EB6:  BRA    4EBC
04EB8:  MOVLB  1
04EBA:  BRA    4EC6
....................             {
....................                TimeBase1s = 100 ;            //reload again
04EBC:  MOVLW  64
04EBE:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04EC0:  MOVFF  6B,1D
04EC4:  MOVLB  1
....................             }
.................... 
....................             In.B14 = 1;                                 // setbit in1
04EC6:  BSF    x2C.5
....................             if(FlashingFlag == 0)
04EC8:  BTFSC  1A.1
04ECA:  BRA    4ED0
....................             {
....................                Output.B14 = 0;           //Flash output1
04ECC:  BCF    x1E.5
....................             }
04ECE:  BRA    4ED2
....................             else
....................             {
....................                Output.B14 = 1;
04ED0:  BSF    x1E.5
....................             }
.................... 
....................             if (~AutoTestFlag)
04ED2:  BTFSC  1A.4
04ED4:  BRA    4EF2
....................             {
....................                if(OutputBoth.B14 == 0)                  //Both output
04ED6:  BTFSC  x26.5
04ED8:  BRA    4EE4
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04EDA:  BSF    F89.4
04EDC:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04EDE:  BSF    F89.3
04EE0:  BCF    F92.3
....................                }
04EE2:  BRA    4EF2
....................                else
....................                {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,1);     //Buzzer
04EE4:  BTFSS  x24.5
04EE6:  BRA    4EEE
04EE8:  BSF    F89.4
04EEA:  BCF    F92.4
04EEC:  BRA    4EF2
....................                   else output_bit(Pbell,1);                          //Bell
04EEE:  BSF    F89.3
04EF0:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
04EF2:  BRA    4EFA
....................       else if(FaultType.B14 == 1) Ack.B14 = 0;
04EF4:  BTFSS  x22.5
04EF6:  BRA    4EFA
04EF8:  BCF    x2A.5
....................    }
04EFA:  BRA    4F16
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B14 ^ InputType.B14) == 1)
04EFC:  MOVLW  00
04EFE:  BTFSC  x1C.5
04F00:  MOVLW  01
04F02:  MOVWF  xC7
04F04:  MOVLW  00
04F06:  BTFSC  x20.5
04F08:  MOVLW  01
04F0A:  XORWF  xC7,W
04F0C:  SUBLW  01
04F0E:  BNZ   4F14
....................       {
....................          Output.B14 = 0;
04F10:  BCF    x1E.5
....................       }
04F12:  BRA    4F16
....................       else
....................       {
....................          Output.B14 = 1;
04F14:  BSF    x1E.5
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if(AlarmIndicator.B15 == 1)    // Alarm Function
04F16:  BTFSS  x28.6
04F18:  BRA    4F8C
....................    {
....................       if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 1))|| In.B15 == 1)    // alarm1 occure and "Lock type"
04F1A:  MOVLW  00
04F1C:  BTFSC  x1C.6
04F1E:  MOVLW  01
04F20:  MOVWF  xC7
04F22:  MOVLW  00
04F24:  BTFSC  x20.6
04F26:  MOVLW  01
04F28:  XORWF  xC7,W
04F2A:  SUBLW  01
04F2C:  BNZ   4F32
04F2E:  BTFSC  x22.6
04F30:  BRA    4F36
04F32:  BTFSS  x2C.6
04F34:  BRA    4F84
....................       //if(Inputt.B15 == 0)
....................       {
....................          if(Ack.B15 == 0)
04F36:  BTFSC  x2A.6
04F38:  BRA    4F82
....................          {
....................             if(In.B15 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04F3A:  BTFSC  x2C.6
04F3C:  BRA    4F56
04F3E:  MOVLB  0
04F40:  MOVF   x6A,W
04F42:  SUBLW  0F
04F44:  BTFSC  FD8.2
04F46:  BRA    4F4C
04F48:  MOVLB  1
04F4A:  BRA    4F56
....................             {
....................                TimeBase1s = 100 ;            //reload again
04F4C:  MOVLW  64
04F4E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04F50:  MOVFF  6B,1D
04F54:  MOVLB  1
....................             }
.................... 
....................             In.B15 = 1;                                 // setbit in1
04F56:  BSF    x2C.6
....................             if(FlashingFlag == 0)
04F58:  BTFSC  1A.1
04F5A:  BRA    4F60
....................             {
....................                Output.B15 = 0;           //Flash output1
04F5C:  BCF    x1E.6
....................             }
04F5E:  BRA    4F62
....................             else
....................             {
....................                Output.B15 = 1;
04F60:  BSF    x1E.6
....................             }
.................... 
....................             if (~AutoTestFlag)
04F62:  BTFSC  1A.4
04F64:  BRA    4F82
....................             {
....................                if(OutputBoth.B15 == 0)                  //Both output
04F66:  BTFSC  x26.6
04F68:  BRA    4F74
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04F6A:  BSF    F89.4
04F6C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04F6E:  BSF    F89.3
04F70:  BCF    F92.3
....................                }
04F72:  BRA    4F82
....................                else
....................                {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,1);     //Buzzer
04F74:  BTFSS  x24.6
04F76:  BRA    4F7E
04F78:  BSF    F89.4
04F7A:  BCF    F92.4
04F7C:  BRA    4F82
....................                   else output_bit(Pbell,1);                          //Bell
04F7E:  BSF    F89.3
04F80:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
04F82:  BRA    4F8A
....................       else if(FaultType.B15 == 1) Ack.B15 = 0;
04F84:  BTFSS  x22.6
04F86:  BRA    4F8A
04F88:  BCF    x2A.6
....................    }
04F8A:  BRA    4FA6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B15 ^ InputType.B15) == 1)
04F8C:  MOVLW  00
04F8E:  BTFSC  x1C.6
04F90:  MOVLW  01
04F92:  MOVWF  xC7
04F94:  MOVLW  00
04F96:  BTFSC  x20.6
04F98:  MOVLW  01
04F9A:  XORWF  xC7,W
04F9C:  SUBLW  01
04F9E:  BNZ   4FA4
....................       {
....................          Output.B15 = 0;
04FA0:  BCF    x1E.6
....................       }
04FA2:  BRA    4FA6
....................       else
....................       {
....................          Output.B15 = 1;
04FA4:  BSF    x1E.6
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if(AlarmIndicator.B16 == 1)    // Alarm Function
04FA6:  BTFSS  x28.7
04FA8:  BRA    501C
....................    {
....................       if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 1))|| In.B16 == 1)    // alarm1 occure and "Lock type"
04FAA:  MOVLW  00
04FAC:  BTFSC  x1C.7
04FAE:  MOVLW  01
04FB0:  MOVWF  xC7
04FB2:  MOVLW  00
04FB4:  BTFSC  x20.7
04FB6:  MOVLW  01
04FB8:  XORWF  xC7,W
04FBA:  SUBLW  01
04FBC:  BNZ   4FC2
04FBE:  BTFSC  x22.7
04FC0:  BRA    4FC6
04FC2:  BTFSS  x2C.7
04FC4:  BRA    5014
....................       //if(Inputt.B16 == 0)
....................       {
....................          if(Ack.B16 == 0)
04FC6:  BTFSC  x2A.7
04FC8:  BRA    5012
....................          {
....................             if(In.B16 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04FCA:  BTFSC  x2C.7
04FCC:  BRA    4FE6
04FCE:  MOVLB  0
04FD0:  MOVF   x6A,W
04FD2:  SUBLW  0F
04FD4:  BTFSC  FD8.2
04FD6:  BRA    4FDC
04FD8:  MOVLB  1
04FDA:  BRA    4FE6
....................             {
....................                TimeBase1s = 100 ;            //reload again
04FDC:  MOVLW  64
04FDE:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04FE0:  MOVFF  6B,1D
04FE4:  MOVLB  1
....................             }
.................... 
....................             In.B16 = 1;                                 // setbit in1
04FE6:  BSF    x2C.7
....................             if(FlashingFlag == 0)
04FE8:  BTFSC  1A.1
04FEA:  BRA    4FF0
....................             {
....................                Output.B16 = 0;           //Flash output1
04FEC:  BCF    x1E.7
....................             }
04FEE:  BRA    4FF2
....................             else
....................             {
....................                Output.B16 = 1;
04FF0:  BSF    x1E.7
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
04FF2:  BTFSC  1A.4
04FF4:  BRA    5012
....................             {
....................                if(OutputBoth.B16 == 0)                  //Both output
04FF6:  BTFSC  x26.7
04FF8:  BRA    5004
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04FFA:  BSF    F89.4
04FFC:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04FFE:  BSF    F89.3
05000:  BCF    F92.3
....................                }
05002:  BRA    5012
....................                else
....................                {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,1);     //Buzzer
05004:  BTFSS  x24.7
05006:  BRA    500E
05008:  BSF    F89.4
0500A:  BCF    F92.4
0500C:  BRA    5012
....................                   else output_bit(Pbell,1);                          //Bell
0500E:  BSF    F89.3
05010:  BCF    F92.3
....................                }
....................             }
....................           }
.................... 
....................       }
05012:  BRA    501A
....................       else if(FaultType.B16 == 1) Ack.B16 = 0;
05014:  BTFSS  x22.7
05016:  BRA    501A
05018:  BCF    x2A.7
....................    }
0501A:  BRA    5036
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B16 ^ InputType.B16) == 1)
0501C:  MOVLW  00
0501E:  BTFSC  x1C.7
05020:  MOVLW  01
05022:  MOVWF  xC7
05024:  MOVLW  00
05026:  BTFSC  x20.7
05028:  MOVLW  01
0502A:  XORWF  xC7,W
0502C:  SUBLW  01
0502E:  BNZ   5034
....................       {
....................          Output.B16 = 0;
05030:  BCF    x1E.7
....................       }
05032:  BRA    5036
....................       else
....................       {
....................          Output.B16 = 1;
05034:  BSF    x1E.7
....................       }
....................    }
.................... //}
.................... /*
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input17
....................    
....................    if(AlarmIndicator.B17 == 1)    // Alarm Function
....................    {
....................       if((((Inputt.B17 ^ InputType.B17) == 1) && (FaultType.B17 == 1))|| In.B17 == 1)    // alarm1 occure and "Lock type"
....................       //if(Inputt.B17 == 0)
....................       {
....................          if(Ack.B17 == 0)
....................          {
....................             if(In.B17 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
....................             {
....................                TimeBase1s = 100 ;            //reload again
....................                AutoAckDelayTime = AutoAckTime ;
....................             }
.................... 
....................             In.B17 = 1;                                 // setbit in1
....................             if(FlashingFlag == 0)
....................             {
....................                Output.B17 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B17 = 1;
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
....................             {
....................                if(OutputBoth.B17 == 0)                  //Both output
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
....................                   output_bit(Pbell,1);     //Bell
....................                }
....................                else
....................                {
....................                   if(OutputType.B17 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                   else output_bit(Pbell,1);                          //Bell
....................                }
....................             }
....................           }
.................... 
....................       }
....................       else if(FaultType.B17 == 1) Ack.B17 = 0;
....................    }
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B17 ^ InputType.B17) == 1)
....................       {
....................          Output.B17 = 0;
....................       }
....................       else
....................       {
....................          Output.B17 = 1;
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... //input18
....................    if(AlarmIndicator.B18 == 1)    // Alarm Function
....................    {
....................       if((((Inputt.B18 ^ InputType.B18) == 1) && (FaultType.B18 == 1))|| In.B18 == 1)    // alarm1 occure and "Lock type"
....................       //if(Inputt.B18 == 0)
....................       {
....................          if(Ack.B18 == 0)
....................          {
....................             if(In.B18 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
....................             {
....................                TimeBase1s = 100 ;            //reload again
....................                AutoAckDelayTime = AutoAckTime ;
....................             }
.................... 
....................             In.B18 = 1;                                 // setbit in1
....................             if(FlashingFlag == 0)
....................             {
....................                Output.B18 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B18 = 1;
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
....................             {
....................                if(OutputBoth.B18 == 0)                  //Both output
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
....................                   output_bit(Pbell,1);     //Bell
....................                }
....................                else
....................                {
....................                   if(OutputType.B18 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                   else output_bit(Pbell,1);                          //Bell
....................                }
....................             }
....................           }
.................... 
....................       }
....................       else if(FaultType.B18 == 1) Ack.B18 = 0;
....................    }
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B18 ^ InputType.B18) == 1)
....................       {
....................          Output.B18 = 0;
....................       }
....................       else
....................       {
....................          Output.B18 = 1;
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input19
....................    if(AlarmIndicator.B19 == 1)    // Alarm Function
....................    {
....................       if((((Inputt.B19 ^ InputType.B19) == 1) && (FaultType.B19 == 1))|| In.B19 == 1)    // alarm1 occure and "Lock type"
....................       //if(Inputt.B19 == 0)
....................       {
....................          if(Ack.B19 == 0)
....................          {
....................             if(In.B19 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
....................             {
....................                TimeBase1s = 100 ;            //reload again
....................                AutoAckDelayTime = AutoAckTime ;
....................             }
.................... 
....................             In.B19 = 1;                                 // setbit in1
....................             if(FlashingFlag == 0)
....................             {
....................                Output.B19 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B19 = 1;
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
....................             {
....................                if(OutputBoth.B19 == 0)                  //Both output
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
....................                   output_bit(Pbell,1);     //Bell
....................                }
....................                else
....................                {
....................                   if(OutputType.B19 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                   else output_bit(Pbell,1);                          //Bell
....................                }
....................             }
....................           }
.................... 
....................       }
....................       else if(FaultType.B19 == 1) Ack.B19 = 0;
....................    }
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B19 ^ InputType.B19) == 1)
....................       {
....................          Output.B19 = 0;
....................       }
....................       else
....................       {
....................          Output.B19 = 1;
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input20
....................    if(AlarmIndicator.B20 == 1)    // Alarm Function
....................    {
....................       if((((Inputt.B20 ^ InputType.B20) == 1) && (FaultType.B20 == 1))|| In.B20 == 1)    // alarm1 occure and "Lock type"
....................       //if(Inputt.B18 == 0)
....................       {
....................          if(Ack.B20 == 0)
....................          {
....................             if(In.B20 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
....................             {
....................                TimeBase1s = 100 ;            //reload again
....................                AutoAckDelayTime = AutoAckTime ;
....................             }
.................... 
....................             In.B20 = 1;                                 // setbit in1
....................             if(FlashingFlag == 0)
....................             {
....................                Output.B20 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B20 = 1;
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
....................             {
....................                if(OutputBoth.B20 == 0)                  //Both output
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
....................                   output_bit(Pbell,1);     //Bell
....................                }
....................                else
....................                {
....................                   if(OutputType.B20 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                   else output_bit(Pbell,1);                          //Bell
....................                }
....................             }
....................           }
.................... 
....................       }
....................       else if(FaultType.B20 == 1) Ack.B20 = 0;
....................    }
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B20 ^ InputType.B20) == 1)
....................       {
....................          Output.B20 = 0;
....................       }
....................       else
....................       {
....................          Output.B20 = 1;
....................       }
....................    }
....................  */  
.................... //}
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
.................... 
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// AUTO RESET ///////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05036:  MOVLW  00
05038:  BTFSC  x1B.0
0503A:  MOVLW  01
0503C:  MOVWF  xC7
0503E:  MOVLW  00
05040:  BTFSC  x1F.0
05042:  MOVLW  01
05044:  XORWF  xC7,W
05046:  SUBLW  01
05048:  BNZ   504E
0504A:  BTFSS  x21.0
0504C:  BRA    5052
0504E:  BTFSS  1A.5
05050:  BRA    50AC
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
05052:  BTFSC  x2D.0
05054:  BRA    5072
05056:  MOVLB  0
05058:  MOVF   x6A,W
0505A:  SUBLW  0F
0505C:  BTFSC  FD8.2
0505E:  BRA    5064
05060:  MOVLB  1
05062:  BRA    5072
05064:  MOVLB  1
05066:  BTFSC  x29.0
05068:  BRA    5072
....................       {
....................             TimeBase1s = 100 ;            //reload again
0506A:  MOVLW  64
0506C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0506E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B1 = 1;
05072:  BSF    x2D.0
....................       if(Ack.B1 == 0)
05074:  BTFSC  x29.0
05076:  BRA    50A6
....................       {
....................          if(FlashingFlag == 0)
05078:  BTFSC  1A.1
0507A:  BRA    5080
....................             {
....................                Output.B1 = 0;           //Flash output1
0507C:  BCF    x1D.0
....................             }
0507E:  BRA    5082
....................             else
....................             {
....................                Output.B1 = 1;
05080:  BSF    x1D.0
....................             }
....................          if (~AutoTestFlag)
05082:  BTFSC  1A.4
05084:  BRA    50A6
....................          {
....................             if(AlarmIndicator.B1 == 1){
05086:  BTFSS  x27.0
05088:  BRA    50A6
....................                 if(OutputBoth.B1 == 0)        //Both output
0508A:  BTFSC  x25.0
0508C:  BRA    5098
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0508E:  BSF    F89.4
05090:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05092:  BSF    F89.3
05094:  BCF    F92.3
....................                 }
05096:  BRA    50A6
....................                 else
....................                 {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
05098:  BTFSS  x23.0
0509A:  BRA    50A2
0509C:  BSF    F89.4
0509E:  BCF    F92.4
050A0:  BRA    50A6
....................                   else output_bit(Pbell,1);                          //Bell
050A2:  BSF    F89.3
050A4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
050A6:  MOVLW  01
050A8:  MOVWF  xBB
....................    }
050AA:  BRA    5142
....................    else if(FaultType.B1 == 0)
050AC:  BTFSC  x21.0
050AE:  BRA    5142
....................    {
....................       In2.B1 = 0x00;
050B0:  BCF    x2D.0
....................       Ack.B1 = 0;
050B2:  BCF    x29.0
....................       Output.B1 = 1;      //Off LED
050B4:  BSF    x1D.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0)&& inputflag ==0)      //If Buzzer or Both
050B6:  BTFSC  x23.0
050B8:  BRA    50BE
050BA:  BTFSC  x25.0
050BC:  BRA    50D8
050BE:  MOVF   xBB,F
050C0:  BNZ   50D8
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
050C2:  MOVLW  01
050C4:  MOVWF  xC6
050C6:  MOVLB  0
050C8:  CALL   3FAC
050CC:  DECFSZ 01,W
050CE:  BRA    50D2
050D0:  BRA    50D6
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
050D2:  BCF    F89.4
050D4:  BCF    F92.4
050D6:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0)&& inputflag ==0)  //If Bell or Both
050D8:  BTFSS  x23.0
050DA:  BRA    50E0
050DC:  BTFSC  x25.0
050DE:  BRA    50FA
050E0:  MOVF   xBB,F
050E2:  BNZ   50FA
....................       {
....................          if(CheckAutoReset(0x02) == 1);
050E4:  MOVLW  02
050E6:  MOVWF  xC6
050E8:  MOVLB  0
050EA:  CALL   3FAC
050EE:  DECFSZ 01,W
050F0:  BRA    50F4
050F2:  BRA    50F8
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
050F4:  BCF    F89.3
050F6:  BCF    F92.3
050F8:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
050FA:  BTFSC  x2D.0
050FC:  BRA    5142
050FE:  BTFSC  x2D.1
05100:  BRA    5142
05102:  BTFSC  x2D.2
05104:  BRA    5142
05106:  BTFSC  x2D.3
05108:  BRA    5142
0510A:  BTFSC  x2D.4
0510C:  BRA    5142
0510E:  BTFSC  x2D.5
05110:  BRA    5142
05112:  BTFSC  x2D.6
05114:  BRA    5142
05116:  BTFSC  x2D.7
05118:  BRA    5142
0511A:  BTFSC  x2E.0
0511C:  BRA    5142
0511E:  BTFSC  x2E.1
05120:  BRA    5142
05122:  BTFSC  x2E.2
05124:  BRA    5142
05126:  BTFSC  x2E.3
05128:  BRA    5142
0512A:  BTFSC  x2E.4
0512C:  BRA    5142
0512E:  BTFSC  x2E.5
05130:  BRA    5142
05132:  BTFSC  x2E.6
05134:  BRA    5142
05136:  BTFSC  x2E.7
05138:  BRA    5142
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0513A:  BCF    F89.3
0513C:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0513E:  BCF    F89.4
05140:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05142:  MOVLW  00
05144:  BTFSC  x1B.1
05146:  MOVLW  01
05148:  MOVWF  xC7
0514A:  MOVLW  00
0514C:  BTFSC  x1F.1
0514E:  MOVLW  01
05150:  XORWF  xC7,W
05152:  SUBLW  01
05154:  BNZ   515A
05156:  BTFSS  x21.1
05158:  BRA    515E
0515A:  BTFSS  1A.5
0515C:  BRA    51B8
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
0515E:  BTFSC  x2D.1
05160:  BRA    517E
05162:  MOVLB  0
05164:  MOVF   x6A,W
05166:  SUBLW  0F
05168:  BTFSC  FD8.2
0516A:  BRA    5170
0516C:  MOVLB  1
0516E:  BRA    517E
05170:  MOVLB  1
05172:  BTFSC  x29.1
05174:  BRA    517E
....................       {
....................             TimeBase1s = 100 ;            //reload again
05176:  MOVLW  64
05178:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0517A:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B2 = 1;
0517E:  BSF    x2D.1
....................       if(Ack.B2 == 0)
05180:  BTFSC  x29.1
05182:  BRA    51B2
....................       {
....................          if(FlashingFlag == 0)
05184:  BTFSC  1A.1
05186:  BRA    518C
....................             {
....................                Output.B2 = 0;           //Flash output1
05188:  BCF    x1D.1
....................             }
0518A:  BRA    518E
....................             else
....................             {
....................                Output.B2 = 1;
0518C:  BSF    x1D.1
....................             }
....................          if (~AutoTestFlag)
0518E:  BTFSC  1A.4
05190:  BRA    51B2
....................          {
....................             if(AlarmIndicator.B2 == 1){
05192:  BTFSS  x27.1
05194:  BRA    51B2
....................                 if(OutputBoth.B2 == 0)        //Both output
05196:  BTFSC  x25.1
05198:  BRA    51A4
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0519A:  BSF    F89.4
0519C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0519E:  BSF    F89.3
051A0:  BCF    F92.3
....................                 }
051A2:  BRA    51B2
....................                 else
....................                 {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
051A4:  BTFSS  x23.1
051A6:  BRA    51AE
051A8:  BSF    F89.4
051AA:  BCF    F92.4
051AC:  BRA    51B2
....................                   else output_bit(Pbell,1);                          //Bell
051AE:  BSF    F89.3
051B0:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
051B2:  MOVLW  01
051B4:  MOVWF  xBB
....................    }
051B6:  BRA    524E
....................    else if(FaultType.B2 == 0)
051B8:  BTFSC  x21.1
051BA:  BRA    524E
....................    {
....................       In2.B2 = 0x00;
051BC:  BCF    x2D.1
....................       Ack.B2 = 0;
051BE:  BCF    x29.1
....................       Output.B2 = 1;      //Off LED
051C0:  BSF    x1D.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0)&& inputflag ==0)      //If Buzzer or Both
051C2:  BTFSC  x23.1
051C4:  BRA    51CA
051C6:  BTFSC  x25.1
051C8:  BRA    51E4
051CA:  MOVF   xBB,F
051CC:  BNZ   51E4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
051CE:  MOVLW  01
051D0:  MOVWF  xC6
051D2:  MOVLB  0
051D4:  CALL   3FAC
051D8:  DECFSZ 01,W
051DA:  BRA    51DE
051DC:  BRA    51E2
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
051DE:  BCF    F89.4
051E0:  BCF    F92.4
051E2:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0)&& inputflag ==0)  //If Bell or Both
051E4:  BTFSS  x23.1
051E6:  BRA    51EC
051E8:  BTFSC  x25.1
051EA:  BRA    5206
051EC:  MOVF   xBB,F
051EE:  BNZ   5206
....................       {
....................          if(CheckAutoReset(0x02) == 1);
051F0:  MOVLW  02
051F2:  MOVWF  xC6
051F4:  MOVLB  0
051F6:  CALL   3FAC
051FA:  DECFSZ 01,W
051FC:  BRA    5200
051FE:  BRA    5204
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
05200:  BCF    F89.3
05202:  BCF    F92.3
05204:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
05206:  BTFSC  x2D.0
05208:  BRA    524E
0520A:  BTFSC  x2D.1
0520C:  BRA    524E
0520E:  BTFSC  x2D.2
05210:  BRA    524E
05212:  BTFSC  x2D.3
05214:  BRA    524E
05216:  BTFSC  x2D.4
05218:  BRA    524E
0521A:  BTFSC  x2D.5
0521C:  BRA    524E
0521E:  BTFSC  x2D.6
05220:  BRA    524E
05222:  BTFSC  x2D.7
05224:  BRA    524E
05226:  BTFSC  x2E.0
05228:  BRA    524E
0522A:  BTFSC  x2E.1
0522C:  BRA    524E
0522E:  BTFSC  x2E.2
05230:  BRA    524E
05232:  BTFSC  x2E.3
05234:  BRA    524E
05236:  BTFSC  x2E.4
05238:  BRA    524E
0523A:  BTFSC  x2E.5
0523C:  BRA    524E
0523E:  BTFSC  x2E.6
05240:  BRA    524E
05242:  BTFSC  x2E.7
05244:  BRA    524E
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
05246:  BCF    F89.3
05248:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0524A:  BCF    F89.4
0524C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0524E:  MOVLW  00
05250:  BTFSC  x1B.2
05252:  MOVLW  01
05254:  MOVWF  xC7
05256:  MOVLW  00
05258:  BTFSC  x1F.2
0525A:  MOVLW  01
0525C:  XORWF  xC7,W
0525E:  SUBLW  01
05260:  BNZ   5266
05262:  BTFSS  x21.2
05264:  BRA    526A
05266:  BTFSS  1A.5
05268:  BRA    52C4
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
0526A:  BTFSC  x2D.2
0526C:  BRA    528A
0526E:  MOVLB  0
05270:  MOVF   x6A,W
05272:  SUBLW  0F
05274:  BTFSC  FD8.2
05276:  BRA    527C
05278:  MOVLB  1
0527A:  BRA    528A
0527C:  MOVLB  1
0527E:  BTFSC  x29.2
05280:  BRA    528A
....................       {
....................             TimeBase1s = 100 ;            //reload again
05282:  MOVLW  64
05284:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05286:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B3 = 1;
0528A:  BSF    x2D.2
....................       if(Ack.B3 == 0)
0528C:  BTFSC  x29.2
0528E:  BRA    52BE
....................       {
....................          if(FlashingFlag == 0)
05290:  BTFSC  1A.1
05292:  BRA    5298
....................             {
....................                Output.B3 = 0;           //Flash output1
05294:  BCF    x1D.2
....................             }
05296:  BRA    529A
....................             else
....................             {
....................                Output.B3 = 1;
05298:  BSF    x1D.2
....................             }
....................          if (~AutoTestFlag)
0529A:  BTFSC  1A.4
0529C:  BRA    52BE
....................          {
....................             if(AlarmIndicator.B3 == 1){
0529E:  BTFSS  x27.2
052A0:  BRA    52BE
....................                 if(OutputBoth.B3 == 0)        //Both output
052A2:  BTFSC  x25.2
052A4:  BRA    52B0
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
052A6:  BSF    F89.4
052A8:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
052AA:  BSF    F89.3
052AC:  BCF    F92.3
....................                 }
052AE:  BRA    52BE
....................                 else
....................                 {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
052B0:  BTFSS  x23.2
052B2:  BRA    52BA
052B4:  BSF    F89.4
052B6:  BCF    F92.4
052B8:  BRA    52BE
....................                   else output_bit(Pbell,1);                          //Bell
052BA:  BSF    F89.3
052BC:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
052BE:  MOVLW  01
052C0:  MOVWF  xBB
....................    }
052C2:  BRA    535A
....................    else if(FaultType.B3 == 0)
052C4:  BTFSC  x21.2
052C6:  BRA    535A
....................    {
....................       In2.B3 = 0x00;
052C8:  BCF    x2D.2
....................       Ack.B3 = 0;
052CA:  BCF    x29.2
....................       Output.B3 = 1;      //Off LED
052CC:  BSF    x1D.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0)&& inputflag ==0)      //If Buzzer or Both
052CE:  BTFSC  x23.2
052D0:  BRA    52D6
052D2:  BTFSC  x25.2
052D4:  BRA    52F0
052D6:  MOVF   xBB,F
052D8:  BNZ   52F0
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
052DA:  MOVLW  01
052DC:  MOVWF  xC6
052DE:  MOVLB  0
052E0:  CALL   3FAC
052E4:  DECFSZ 01,W
052E6:  BRA    52EA
052E8:  BRA    52EE
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
052EA:  BCF    F89.4
052EC:  BCF    F92.4
052EE:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0)&& inputflag ==0)  //If Bell or Both
052F0:  BTFSS  x23.2
052F2:  BRA    52F8
052F4:  BTFSC  x25.2
052F6:  BRA    5312
052F8:  MOVF   xBB,F
052FA:  BNZ   5312
....................       {
....................          if(CheckAutoReset(0x02) == 1);
052FC:  MOVLW  02
052FE:  MOVWF  xC6
05300:  MOVLB  0
05302:  CALL   3FAC
05306:  DECFSZ 01,W
05308:  BRA    530C
0530A:  BRA    5310
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0530C:  BCF    F89.3
0530E:  BCF    F92.3
05310:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 )
05312:  BTFSC  x2D.0
05314:  BRA    535A
05316:  BTFSC  x2D.1
05318:  BRA    535A
0531A:  BTFSC  x2D.2
0531C:  BRA    535A
0531E:  BTFSC  x2D.3
05320:  BRA    535A
05322:  BTFSC  x2D.4
05324:  BRA    535A
05326:  BTFSC  x2D.5
05328:  BRA    535A
0532A:  BTFSC  x2D.6
0532C:  BRA    535A
0532E:  BTFSC  x2D.7
05330:  BRA    535A
05332:  BTFSC  x2E.0
05334:  BRA    535A
05336:  BTFSC  x2E.1
05338:  BRA    535A
0533A:  BTFSC  x2E.2
0533C:  BRA    535A
0533E:  BTFSC  x2E.3
05340:  BRA    535A
05342:  BTFSC  x2E.4
05344:  BRA    535A
05346:  BTFSC  x2E.5
05348:  BRA    535A
0534A:  BTFSC  x2E.6
0534C:  BRA    535A
0534E:  BTFSC  x2E.7
05350:  BRA    535A
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
05352:  BCF    F89.3
05354:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
05356:  BCF    F89.4
05358:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0535A:  MOVLW  00
0535C:  BTFSC  x1B.3
0535E:  MOVLW  01
05360:  MOVWF  xC7
05362:  MOVLW  00
05364:  BTFSC  x1F.3
05366:  MOVLW  01
05368:  XORWF  xC7,W
0536A:  SUBLW  01
0536C:  BNZ   5372
0536E:  BTFSS  x21.3
05370:  BRA    5376
05372:  BTFSS  1A.5
05374:  BRA    53D0
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
05376:  BTFSC  x2D.3
05378:  BRA    5396
0537A:  MOVLB  0
0537C:  MOVF   x6A,W
0537E:  SUBLW  0F
05380:  BTFSC  FD8.2
05382:  BRA    5388
05384:  MOVLB  1
05386:  BRA    5396
05388:  MOVLB  1
0538A:  BTFSC  x29.3
0538C:  BRA    5396
....................       {
....................             TimeBase1s = 100 ;            //reload again
0538E:  MOVLW  64
05390:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05392:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B4 = 1;
05396:  BSF    x2D.3
....................       if(Ack.B4 == 0)
05398:  BTFSC  x29.3
0539A:  BRA    53CA
....................       {
....................          if(FlashingFlag == 0)
0539C:  BTFSC  1A.1
0539E:  BRA    53A4
....................             {
....................                Output.B4 = 0;           //Flash output1
053A0:  BCF    x1D.3
....................             }
053A2:  BRA    53A6
....................             else
....................             {
....................                Output.B4 = 1;
053A4:  BSF    x1D.3
....................             }
....................          if (~AutoTestFlag)
053A6:  BTFSC  1A.4
053A8:  BRA    53CA
....................          {
....................             if(AlarmIndicator.B4 == 1){
053AA:  BTFSS  x27.3
053AC:  BRA    53CA
....................                 if(OutputBoth.B4 == 0)        //Both output
053AE:  BTFSC  x25.3
053B0:  BRA    53BC
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
053B2:  BSF    F89.4
053B4:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
053B6:  BSF    F89.3
053B8:  BCF    F92.3
....................                 }
053BA:  BRA    53CA
....................                 else
....................                 {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
053BC:  BTFSS  x23.3
053BE:  BRA    53C6
053C0:  BSF    F89.4
053C2:  BCF    F92.4
053C4:  BRA    53CA
....................                   else output_bit(Pbell,1);                          //Bell
053C6:  BSF    F89.3
053C8:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
053CA:  MOVLW  01
053CC:  MOVWF  xBB
....................    }
053CE:  BRA    5466
....................    else if(FaultType.B4 == 0)
053D0:  BTFSC  x21.3
053D2:  BRA    5466
....................    {
....................       In2.B4 = 0x00;
053D4:  BCF    x2D.3
....................       Ack.B4 = 0;
053D6:  BCF    x29.3
....................       Output.B4 = 1;      //Off LED
053D8:  BSF    x1D.3
.................... 
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0)&& inputflag ==0)      //If Buzzer or Both
053DA:  BTFSC  x23.3
053DC:  BRA    53E2
053DE:  BTFSC  x25.3
053E0:  BRA    53FC
053E2:  MOVF   xBB,F
053E4:  BNZ   53FC
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
053E6:  MOVLW  01
053E8:  MOVWF  xC6
053EA:  MOVLB  0
053EC:  CALL   3FAC
053F0:  DECFSZ 01,W
053F2:  BRA    53F6
053F4:  BRA    53FA
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
053F6:  BCF    F89.4
053F8:  BCF    F92.4
053FA:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0)&& inputflag ==0)  //If Bell or Both
053FC:  BTFSS  x23.3
053FE:  BRA    5404
05400:  BTFSC  x25.3
05402:  BRA    541E
05404:  MOVF   xBB,F
05406:  BNZ   541E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05408:  MOVLW  02
0540A:  MOVWF  xC6
0540C:  MOVLB  0
0540E:  CALL   3FAC
05412:  DECFSZ 01,W
05414:  BRA    5418
05416:  BRA    541C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
05418:  BCF    F89.3
0541A:  BCF    F92.3
0541C:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0541E:  BTFSC  x2D.0
05420:  BRA    5466
05422:  BTFSC  x2D.1
05424:  BRA    5466
05426:  BTFSC  x2D.2
05428:  BRA    5466
0542A:  BTFSC  x2D.3
0542C:  BRA    5466
0542E:  BTFSC  x2D.4
05430:  BRA    5466
05432:  BTFSC  x2D.5
05434:  BRA    5466
05436:  BTFSC  x2D.6
05438:  BRA    5466
0543A:  BTFSC  x2D.7
0543C:  BRA    5466
0543E:  BTFSC  x2E.0
05440:  BRA    5466
05442:  BTFSC  x2E.1
05444:  BRA    5466
05446:  BTFSC  x2E.2
05448:  BRA    5466
0544A:  BTFSC  x2E.3
0544C:  BRA    5466
0544E:  BTFSC  x2E.4
05450:  BRA    5466
05452:  BTFSC  x2E.5
05454:  BRA    5466
05456:  BTFSC  x2E.6
05458:  BRA    5466
0545A:  BTFSC  x2E.7
0545C:  BRA    5466
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0545E:  BCF    F89.3
05460:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
05462:  BCF    F89.4
05464:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05466:  MOVLW  00
05468:  BTFSC  x1B.4
0546A:  MOVLW  01
0546C:  MOVWF  xC7
0546E:  MOVLW  00
05470:  BTFSC  x1F.4
05472:  MOVLW  01
05474:  XORWF  xC7,W
05476:  SUBLW  01
05478:  BNZ   547E
0547A:  BTFSS  x21.4
0547C:  BRA    5482
0547E:  BTFSS  1A.5
05480:  BRA    54DC
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
05482:  BTFSC  x2D.4
05484:  BRA    54A2
05486:  MOVLB  0
05488:  MOVF   x6A,W
0548A:  SUBLW  0F
0548C:  BTFSC  FD8.2
0548E:  BRA    5494
05490:  MOVLB  1
05492:  BRA    54A2
05494:  MOVLB  1
05496:  BTFSC  x29.4
05498:  BRA    54A2
....................       {
....................             TimeBase1s = 100 ;            //reload again
0549A:  MOVLW  64
0549C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0549E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B5 = 1;
054A2:  BSF    x2D.4
....................       if(Ack.B5 == 0)
054A4:  BTFSC  x29.4
054A6:  BRA    54D6
....................       {
....................          if(FlashingFlag == 0)
054A8:  BTFSC  1A.1
054AA:  BRA    54B0
....................             {
....................                Output.B5 = 0;           //Flash output1
054AC:  BCF    x1D.4
....................             }
054AE:  BRA    54B2
....................             else
....................             {
....................                Output.B5 = 1;
054B0:  BSF    x1D.4
....................             }
....................          if (~AutoTestFlag)
054B2:  BTFSC  1A.4
054B4:  BRA    54D6
....................          {
....................             if(AlarmIndicator.B5 == 1){
054B6:  BTFSS  x27.4
054B8:  BRA    54D6
....................                 if(OutputBoth.B5 == 0)        //Both output
054BA:  BTFSC  x25.4
054BC:  BRA    54C8
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
054BE:  BSF    F89.4
054C0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
054C2:  BSF    F89.3
054C4:  BCF    F92.3
....................                 }
054C6:  BRA    54D6
....................                 else
....................                 {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
054C8:  BTFSS  x23.4
054CA:  BRA    54D2
054CC:  BSF    F89.4
054CE:  BCF    F92.4
054D0:  BRA    54D6
....................                   else output_bit(Pbell,1);                          //Bell
054D2:  BSF    F89.3
054D4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
054D6:  MOVLW  01
054D8:  MOVWF  xBB
....................    }
054DA:  BRA    5572
....................    else if(FaultType.B5 == 0)
054DC:  BTFSC  x21.4
054DE:  BRA    5572
....................    {
....................       In2.B5 = 0x00;
054E0:  BCF    x2D.4
....................       Ack.B5 = 0;
054E2:  BCF    x29.4
....................       Output.B5 = 1;      //Off LED
054E4:  BSF    x1D.4
.................... 
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0)&& inputflag ==0)      //If Buzzer or Both
054E6:  BTFSC  x23.4
054E8:  BRA    54EE
054EA:  BTFSC  x25.4
054EC:  BRA    5508
054EE:  MOVF   xBB,F
054F0:  BNZ   5508
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
054F2:  MOVLW  01
054F4:  MOVWF  xC6
054F6:  MOVLB  0
054F8:  CALL   3FAC
054FC:  DECFSZ 01,W
054FE:  BRA    5502
05500:  BRA    5506
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
05502:  BCF    F89.4
05504:  BCF    F92.4
05506:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0)&& inputflag ==0)  //If Bell or Both
05508:  BTFSS  x23.4
0550A:  BRA    5510
0550C:  BTFSC  x25.4
0550E:  BRA    552A
05510:  MOVF   xBB,F
05512:  BNZ   552A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05514:  MOVLW  02
05516:  MOVWF  xC6
05518:  MOVLB  0
0551A:  CALL   3FAC
0551E:  DECFSZ 01,W
05520:  BRA    5524
05522:  BRA    5528
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
05524:  BCF    F89.3
05526:  BCF    F92.3
05528:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0552A:  BTFSC  x2D.0
0552C:  BRA    5572
0552E:  BTFSC  x2D.1
05530:  BRA    5572
05532:  BTFSC  x2D.2
05534:  BRA    5572
05536:  BTFSC  x2D.3
05538:  BRA    5572
0553A:  BTFSC  x2D.4
0553C:  BRA    5572
0553E:  BTFSC  x2D.5
05540:  BRA    5572
05542:  BTFSC  x2D.6
05544:  BRA    5572
05546:  BTFSC  x2D.7
05548:  BRA    5572
0554A:  BTFSC  x2E.0
0554C:  BRA    5572
0554E:  BTFSC  x2E.1
05550:  BRA    5572
05552:  BTFSC  x2E.2
05554:  BRA    5572
05556:  BTFSC  x2E.3
05558:  BRA    5572
0555A:  BTFSC  x2E.4
0555C:  BRA    5572
0555E:  BTFSC  x2E.5
05560:  BRA    5572
05562:  BTFSC  x2E.6
05564:  BRA    5572
05566:  BTFSC  x2E.7
05568:  BRA    5572
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0556A:  BCF    F89.3
0556C:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0556E:  BCF    F89.4
05570:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05572:  MOVLW  00
05574:  BTFSC  x1B.5
05576:  MOVLW  01
05578:  MOVWF  xC7
0557A:  MOVLW  00
0557C:  BTFSC  x1F.5
0557E:  MOVLW  01
05580:  XORWF  xC7,W
05582:  SUBLW  01
05584:  BNZ   558A
05586:  BTFSS  x21.5
05588:  BRA    558E
0558A:  BTFSS  1A.5
0558C:  BRA    55E8
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
0558E:  BTFSC  x2D.5
05590:  BRA    55AE
05592:  MOVLB  0
05594:  MOVF   x6A,W
05596:  SUBLW  0F
05598:  BTFSC  FD8.2
0559A:  BRA    55A0
0559C:  MOVLB  1
0559E:  BRA    55AE
055A0:  MOVLB  1
055A2:  BTFSC  x29.5
055A4:  BRA    55AE
....................       {
....................             TimeBase1s = 100 ;            //reload again
055A6:  MOVLW  64
055A8:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
055AA:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B6 = 1;
055AE:  BSF    x2D.5
....................       if(Ack.B6 == 0)
055B0:  BTFSC  x29.5
055B2:  BRA    55E2
....................       {
....................          if(FlashingFlag == 0)
055B4:  BTFSC  1A.1
055B6:  BRA    55BC
....................             {
....................                Output.B6 = 0;           //Flash output1
055B8:  BCF    x1D.5
....................             }
055BA:  BRA    55BE
....................             else
....................             {
....................                Output.B6 = 1;
055BC:  BSF    x1D.5
....................             }
....................          if (~AutoTestFlag)
055BE:  BTFSC  1A.4
055C0:  BRA    55E2
....................          {
....................             if(AlarmIndicator.B6 == 1){
055C2:  BTFSS  x27.5
055C4:  BRA    55E2
....................                 if(OutputBoth.B6 == 0)        //Both output
055C6:  BTFSC  x25.5
055C8:  BRA    55D4
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
055CA:  BSF    F89.4
055CC:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
055CE:  BSF    F89.3
055D0:  BCF    F92.3
....................                 }
055D2:  BRA    55E2
....................                 else
....................                 {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
055D4:  BTFSS  x23.5
055D6:  BRA    55DE
055D8:  BSF    F89.4
055DA:  BCF    F92.4
055DC:  BRA    55E2
....................                   else output_bit(Pbell,1);                          //Bell
055DE:  BSF    F89.3
055E0:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
055E2:  MOVLW  01
055E4:  MOVWF  xBB
....................    }
055E6:  BRA    567E
....................    else if(FaultType.B6 == 0)
055E8:  BTFSC  x21.5
055EA:  BRA    567E
....................    {
....................       In2.B6 = 0x00;
055EC:  BCF    x2D.5
....................       Ack.B6 = 0;
055EE:  BCF    x29.5
....................       Output.B6 = 1;      //Off LED
055F0:  BSF    x1D.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)      //If Buzzer or Both
055F2:  BTFSC  x23.5
055F4:  BRA    55FA
055F6:  BTFSC  x25.5
055F8:  BRA    5614
055FA:  MOVF   xBB,F
055FC:  BNZ   5614
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
055FE:  MOVLW  01
05600:  MOVWF  xC6
05602:  MOVLB  0
05604:  CALL   3FAC
05608:  DECFSZ 01,W
0560A:  BRA    560E
0560C:  BRA    5612
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0560E:  BCF    F89.4
05610:  BCF    F92.4
05612:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)  //If Bell or Both
05614:  BTFSS  x23.5
05616:  BRA    561C
05618:  BTFSC  x25.5
0561A:  BRA    5636
0561C:  MOVF   xBB,F
0561E:  BNZ   5636
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05620:  MOVLW  02
05622:  MOVWF  xC6
05624:  MOVLB  0
05626:  CALL   3FAC
0562A:  DECFSZ 01,W
0562C:  BRA    5630
0562E:  BRA    5634
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
05630:  BCF    F89.3
05632:  BCF    F92.3
05634:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
05636:  BTFSC  x2D.0
05638:  BRA    567E
0563A:  BTFSC  x2D.1
0563C:  BRA    567E
0563E:  BTFSC  x2D.2
05640:  BRA    567E
05642:  BTFSC  x2D.3
05644:  BRA    567E
05646:  BTFSC  x2D.4
05648:  BRA    567E
0564A:  BTFSC  x2D.5
0564C:  BRA    567E
0564E:  BTFSC  x2D.6
05650:  BRA    567E
05652:  BTFSC  x2D.7
05654:  BRA    567E
05656:  BTFSC  x2E.0
05658:  BRA    567E
0565A:  BTFSC  x2E.1
0565C:  BRA    567E
0565E:  BTFSC  x2E.2
05660:  BRA    567E
05662:  BTFSC  x2E.3
05664:  BRA    567E
05666:  BTFSC  x2E.4
05668:  BRA    567E
0566A:  BTFSC  x2E.5
0566C:  BRA    567E
0566E:  BTFSC  x2E.6
05670:  BRA    567E
05672:  BTFSC  x2E.7
05674:  BRA    567E
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
05676:  BCF    F89.3
05678:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0567A:  BCF    F89.4
0567C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0567E:  MOVLW  00
05680:  BTFSC  x1B.6
05682:  MOVLW  01
05684:  MOVWF  xC7
05686:  MOVLW  00
05688:  BTFSC  x1F.6
0568A:  MOVLW  01
0568C:  XORWF  xC7,W
0568E:  SUBLW  01
05690:  BNZ   5696
05692:  BTFSS  x21.6
05694:  BRA    569A
05696:  BTFSS  1A.5
05698:  BRA    56F4
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
0569A:  BTFSC  x2D.6
0569C:  BRA    56BA
0569E:  MOVLB  0
056A0:  MOVF   x6A,W
056A2:  SUBLW  0F
056A4:  BTFSC  FD8.2
056A6:  BRA    56AC
056A8:  MOVLB  1
056AA:  BRA    56BA
056AC:  MOVLB  1
056AE:  BTFSC  x29.6
056B0:  BRA    56BA
....................       {
....................             TimeBase1s = 100 ;            //reload again
056B2:  MOVLW  64
056B4:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
056B6:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B7 = 1;
056BA:  BSF    x2D.6
....................       if(Ack.B7 == 0)
056BC:  BTFSC  x29.6
056BE:  BRA    56EE
....................       {
....................          if(FlashingFlag == 0)
056C0:  BTFSC  1A.1
056C2:  BRA    56C8
....................             {
....................                Output.B7 = 0;           //Flash output1
056C4:  BCF    x1D.6
....................             }
056C6:  BRA    56CA
....................             else
....................             {
....................                Output.B7 = 1;
056C8:  BSF    x1D.6
....................             }
....................          if (~AutoTestFlag)
056CA:  BTFSC  1A.4
056CC:  BRA    56EE
....................          {
....................             if(AlarmIndicator.B7 == 1){
056CE:  BTFSS  x27.6
056D0:  BRA    56EE
....................                 if(OutputBoth.B7 == 0)        //Both output
056D2:  BTFSC  x25.6
056D4:  BRA    56E0
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
056D6:  BSF    F89.4
056D8:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
056DA:  BSF    F89.3
056DC:  BCF    F92.3
....................                 }
056DE:  BRA    56EE
....................                 else
....................                 {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
056E0:  BTFSS  x23.6
056E2:  BRA    56EA
056E4:  BSF    F89.4
056E6:  BCF    F92.4
056E8:  BRA    56EE
....................                   else output_bit(Pbell,1);                          //Bell
056EA:  BSF    F89.3
056EC:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
056EE:  MOVLW  01
056F0:  MOVWF  xBB
....................    }
056F2:  BRA    578A
....................    else if(FaultType.B7 == 0)
056F4:  BTFSC  x21.6
056F6:  BRA    578A
....................    {
....................       In2.B7 = 0x00;
056F8:  BCF    x2D.6
....................       Ack.B7 = 0;
056FA:  BCF    x29.6
....................       Output.B7 = 1;      //Off LED
056FC:  BSF    x1D.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)      //If Buzzer or Both
056FE:  BTFSC  x23.6
05700:  BRA    5706
05702:  BTFSC  x25.6
05704:  BRA    5720
05706:  MOVF   xBB,F
05708:  BNZ   5720
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0570A:  MOVLW  01
0570C:  MOVWF  xC6
0570E:  MOVLB  0
05710:  CALL   3FAC
05714:  DECFSZ 01,W
05716:  BRA    571A
05718:  BRA    571E
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0571A:  BCF    F89.4
0571C:  BCF    F92.4
0571E:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)  //If Bell or Both
05720:  BTFSS  x23.6
05722:  BRA    5728
05724:  BTFSC  x25.6
05726:  BRA    5742
05728:  MOVF   xBB,F
0572A:  BNZ   5742
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0572C:  MOVLW  02
0572E:  MOVWF  xC6
05730:  MOVLB  0
05732:  CALL   3FAC
05736:  DECFSZ 01,W
05738:  BRA    573C
0573A:  BRA    5740
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0573C:  BCF    F89.3
0573E:  BCF    F92.3
05740:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
05742:  BTFSC  x2D.0
05744:  BRA    578A
05746:  BTFSC  x2D.1
05748:  BRA    578A
0574A:  BTFSC  x2D.2
0574C:  BRA    578A
0574E:  BTFSC  x2D.3
05750:  BRA    578A
05752:  BTFSC  x2D.4
05754:  BRA    578A
05756:  BTFSC  x2D.5
05758:  BRA    578A
0575A:  BTFSC  x2D.6
0575C:  BRA    578A
0575E:  BTFSC  x2D.7
05760:  BRA    578A
05762:  BTFSC  x2E.0
05764:  BRA    578A
05766:  BTFSC  x2E.1
05768:  BRA    578A
0576A:  BTFSC  x2E.2
0576C:  BRA    578A
0576E:  BTFSC  x2E.3
05770:  BRA    578A
05772:  BTFSC  x2E.4
05774:  BRA    578A
05776:  BTFSC  x2E.5
05778:  BRA    578A
0577A:  BTFSC  x2E.6
0577C:  BRA    578A
0577E:  BTFSC  x2E.7
05780:  BRA    578A
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
05782:  BCF    F89.3
05784:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
05786:  BCF    F89.4
05788:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0578A:  MOVLW  00
0578C:  BTFSC  x1B.7
0578E:  MOVLW  01
05790:  MOVWF  xC7
05792:  MOVLW  00
05794:  BTFSC  x1F.7
05796:  MOVLW  01
05798:  XORWF  xC7,W
0579A:  SUBLW  01
0579C:  BNZ   57A2
0579E:  BTFSS  x21.7
057A0:  BRA    57A6
057A2:  BTFSS  1A.5
057A4:  BRA    5800
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
057A6:  BTFSC  x2D.7
057A8:  BRA    57C6
057AA:  MOVLB  0
057AC:  MOVF   x6A,W
057AE:  SUBLW  0F
057B0:  BTFSC  FD8.2
057B2:  BRA    57B8
057B4:  MOVLB  1
057B6:  BRA    57C6
057B8:  MOVLB  1
057BA:  BTFSC  x29.7
057BC:  BRA    57C6
....................       {
....................             TimeBase1s = 100 ;            //reload again
057BE:  MOVLW  64
057C0:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
057C2:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B8 = 1;
057C6:  BSF    x2D.7
....................       if(Ack.B8 == 0)
057C8:  BTFSC  x29.7
057CA:  BRA    57FA
....................       {
....................          if(FlashingFlag == 0)
057CC:  BTFSC  1A.1
057CE:  BRA    57D4
....................             {
....................                Output.B8 = 0;           //Flash output1
057D0:  BCF    x1D.7
....................             }
057D2:  BRA    57D6
....................             else
....................             {
....................                Output.B8 = 1;
057D4:  BSF    x1D.7
....................             }
....................          if (~AutoTestFlag)
057D6:  BTFSC  1A.4
057D8:  BRA    57FA
....................          {
....................             if(AlarmIndicator.B8 == 1){
057DA:  BTFSS  x27.7
057DC:  BRA    57FA
....................                 if(OutputBoth.B8 == 0)        //Both output
057DE:  BTFSC  x25.7
057E0:  BRA    57EC
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
057E2:  BSF    F89.4
057E4:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
057E6:  BSF    F89.3
057E8:  BCF    F92.3
....................                 }
057EA:  BRA    57FA
....................                 else
....................                 {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
057EC:  BTFSS  x23.7
057EE:  BRA    57F6
057F0:  BSF    F89.4
057F2:  BCF    F92.4
057F4:  BRA    57FA
....................                   else output_bit(Pbell,1);                          //Bell
057F6:  BSF    F89.3
057F8:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
057FA:  MOVLW  01
057FC:  MOVWF  xBB
....................    }
057FE:  BRA    5896
....................    else if(FaultType.B8 == 0)
05800:  BTFSC  x21.7
05802:  BRA    5896
....................    {
....................       In2.B8 = 0x00;
05804:  BCF    x2D.7
....................       Ack.B8 = 0;
05806:  BCF    x29.7
....................       Output.B8 = 1;      //Off LED
05808:  BSF    x1D.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)      //If Buzzer or Both
0580A:  BTFSC  x23.7
0580C:  BRA    5812
0580E:  BTFSC  x25.7
05810:  BRA    582C
05812:  MOVF   xBB,F
05814:  BNZ   582C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
05816:  MOVLW  01
05818:  MOVWF  xC6
0581A:  MOVLB  0
0581C:  CALL   3FAC
05820:  DECFSZ 01,W
05822:  BRA    5826
05824:  BRA    582A
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
05826:  BCF    F89.4
05828:  BCF    F92.4
0582A:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)  //If Bell or Both
0582C:  BTFSS  x23.7
0582E:  BRA    5834
05830:  BTFSC  x25.7
05832:  BRA    584E
05834:  MOVF   xBB,F
05836:  BNZ   584E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05838:  MOVLW  02
0583A:  MOVWF  xC6
0583C:  MOVLB  0
0583E:  CALL   3FAC
05842:  DECFSZ 01,W
05844:  BRA    5848
05846:  BRA    584C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
05848:  BCF    F89.3
0584A:  BCF    F92.3
0584C:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0584E:  BTFSC  x2D.0
05850:  BRA    5896
05852:  BTFSC  x2D.1
05854:  BRA    5896
05856:  BTFSC  x2D.2
05858:  BRA    5896
0585A:  BTFSC  x2D.3
0585C:  BRA    5896
0585E:  BTFSC  x2D.4
05860:  BRA    5896
05862:  BTFSC  x2D.5
05864:  BRA    5896
05866:  BTFSC  x2D.6
05868:  BRA    5896
0586A:  BTFSC  x2D.7
0586C:  BRA    5896
0586E:  BTFSC  x2E.0
05870:  BRA    5896
05872:  BTFSC  x2E.1
05874:  BRA    5896
05876:  BTFSC  x2E.2
05878:  BRA    5896
0587A:  BTFSC  x2E.3
0587C:  BRA    5896
0587E:  BTFSC  x2E.4
05880:  BRA    5896
05882:  BTFSC  x2E.5
05884:  BRA    5896
05886:  BTFSC  x2E.6
05888:  BRA    5896
0588A:  BTFSC  x2E.7
0588C:  BRA    5896
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0588E:  BCF    F89.3
05890:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
05892:  BCF    F89.4
05894:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05896:  MOVLW  00
05898:  BTFSC  x1C.0
0589A:  MOVLW  01
0589C:  MOVWF  xC7
0589E:  MOVLW  00
058A0:  BTFSC  x20.0
058A2:  MOVLW  01
058A4:  XORWF  xC7,W
058A6:  SUBLW  01
058A8:  BNZ   58AE
058AA:  BTFSS  x22.0
058AC:  BRA    58B2
058AE:  BTFSS  1A.5
058B0:  BRA    590C
....................    {
....................       if(In2.B9 == 0 && AutoAck == 0x0F && Ack.B9 == 0)   //use auto acknowlegde
058B2:  BTFSC  x2E.0
058B4:  BRA    58D2
058B6:  MOVLB  0
058B8:  MOVF   x6A,W
058BA:  SUBLW  0F
058BC:  BTFSC  FD8.2
058BE:  BRA    58C4
058C0:  MOVLB  1
058C2:  BRA    58D2
058C4:  MOVLB  1
058C6:  BTFSC  x2A.0
058C8:  BRA    58D2
....................       {
....................             TimeBase1s = 100 ;            //reload again
058CA:  MOVLW  64
058CC:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
058CE:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B9 = 1;
058D2:  BSF    x2E.0
....................       if(Ack.B9 == 0)
058D4:  BTFSC  x2A.0
058D6:  BRA    5906
....................       {
....................          if(FlashingFlag == 0)
058D8:  BTFSC  1A.1
058DA:  BRA    58E0
....................             {
....................                Output.B9 = 0;           //Flash output1
058DC:  BCF    x1E.0
....................             }
058DE:  BRA    58E2
....................             else
....................             {
....................                Output.B9 = 1;
058E0:  BSF    x1E.0
....................             }
....................          if (~AutoTestFlag)
058E2:  BTFSC  1A.4
058E4:  BRA    5906
....................          {
....................             if(AlarmIndicator.B9 == 1){
058E6:  BTFSS  x28.0
058E8:  BRA    5906
....................                 if(OutputBoth.B9 == 0)        //Both output
058EA:  BTFSC  x26.0
058EC:  BRA    58F8
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
058EE:  BSF    F89.4
058F0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
058F2:  BSF    F89.3
058F4:  BCF    F92.3
....................                 }
058F6:  BRA    5906
....................                 else
....................                 {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
058F8:  BTFSS  x24.0
058FA:  BRA    5902
058FC:  BSF    F89.4
058FE:  BCF    F92.4
05900:  BRA    5906
....................                   else output_bit(Pbell,1);                          //Bell
05902:  BSF    F89.3
05904:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05906:  MOVLW  01
05908:  MOVWF  xBB
....................    }
0590A:  BRA    59A2
....................    else if(FaultType.B9 == 0)
0590C:  BTFSC  x22.0
0590E:  BRA    59A2
....................    {
....................       In2.B9 = 0x00;
05910:  BCF    x2E.0
....................       Ack.B9 = 0;
05912:  BCF    x2A.0
....................       Output.B9 = 1;      //Off LED
05914:  BSF    x1E.0
.................... 
....................       if((OutputType.B9 == 1 || OutputBoth.B9 == 0)&& inputflag ==0)      //If Buzzer or Both
05916:  BTFSC  x24.0
05918:  BRA    591E
0591A:  BTFSC  x26.0
0591C:  BRA    5938
0591E:  MOVF   xBB,F
05920:  BNZ   5938
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
05922:  MOVLW  01
05924:  MOVWF  xC6
05926:  MOVLB  0
05928:  CALL   3FAC
0592C:  DECFSZ 01,W
0592E:  BRA    5932
05930:  BRA    5936
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
05932:  BCF    F89.4
05934:  BCF    F92.4
05936:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B9 == 0 || OutputBoth.B9 == 0)&& inputflag ==0)  //If Bell or Both
05938:  BTFSS  x24.0
0593A:  BRA    5940
0593C:  BTFSC  x26.0
0593E:  BRA    595A
05940:  MOVF   xBB,F
05942:  BNZ   595A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05944:  MOVLW  02
05946:  MOVWF  xC6
05948:  MOVLB  0
0594A:  CALL   3FAC
0594E:  DECFSZ 01,W
05950:  BRA    5954
05952:  BRA    5958
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
05954:  BCF    F89.3
05956:  BCF    F92.3
05958:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
0595A:  BTFSC  x2D.0
0595C:  BRA    59A2
0595E:  BTFSC  x2D.1
05960:  BRA    59A2
05962:  BTFSC  x2D.2
05964:  BRA    59A2
05966:  BTFSC  x2D.3
05968:  BRA    59A2
0596A:  BTFSC  x2D.4
0596C:  BRA    59A2
0596E:  BTFSC  x2D.5
05970:  BRA    59A2
05972:  BTFSC  x2D.6
05974:  BRA    59A2
05976:  BTFSC  x2D.7
05978:  BRA    59A2
0597A:  BTFSC  x2E.0
0597C:  BRA    59A2
0597E:  BTFSC  x2E.1
05980:  BRA    59A2
05982:  BTFSC  x2E.2
05984:  BRA    59A2
05986:  BTFSC  x2E.3
05988:  BRA    59A2
0598A:  BTFSC  x2E.4
0598C:  BRA    59A2
0598E:  BTFSC  x2E.5
05990:  BRA    59A2
05992:  BTFSC  x2E.6
05994:  BRA    59A2
05996:  BTFSC  x2E.7
05998:  BRA    59A2
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0599A:  BCF    F89.3
0599C:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0599E:  BCF    F89.4
059A0:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
059A2:  MOVLW  00
059A4:  BTFSC  x1C.1
059A6:  MOVLW  01
059A8:  MOVWF  xC7
059AA:  MOVLW  00
059AC:  BTFSC  x20.1
059AE:  MOVLW  01
059B0:  XORWF  xC7,W
059B2:  SUBLW  01
059B4:  BNZ   59BA
059B6:  BTFSS  x22.1
059B8:  BRA    59BE
059BA:  BTFSS  1A.5
059BC:  BRA    5A18
....................    {
....................       if(In2.B10 == 0 && AutoAck == 0x0F && Ack.B10 == 0)   //use auto acknowlegde
059BE:  BTFSC  x2E.1
059C0:  BRA    59DE
059C2:  MOVLB  0
059C4:  MOVF   x6A,W
059C6:  SUBLW  0F
059C8:  BTFSC  FD8.2
059CA:  BRA    59D0
059CC:  MOVLB  1
059CE:  BRA    59DE
059D0:  MOVLB  1
059D2:  BTFSC  x2A.1
059D4:  BRA    59DE
....................       {
....................             TimeBase1s = 100 ;            //reload again
059D6:  MOVLW  64
059D8:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
059DA:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B10 = 1;
059DE:  BSF    x2E.1
....................       if(Ack.B10 == 0)
059E0:  BTFSC  x2A.1
059E2:  BRA    5A12
....................       {
....................          if(FlashingFlag == 0)
059E4:  BTFSC  1A.1
059E6:  BRA    59EC
....................             {
....................                Output.B10 = 0;           //Flash output1
059E8:  BCF    x1E.1
....................             }
059EA:  BRA    59EE
....................             else
....................             {
....................                Output.B10 = 1;
059EC:  BSF    x1E.1
....................             }
....................          if (~AutoTestFlag)
059EE:  BTFSC  1A.4
059F0:  BRA    5A12
....................          {
....................             if(AlarmIndicator.B10 == 1){
059F2:  BTFSS  x28.1
059F4:  BRA    5A12
....................                 if(OutputBoth.B10 == 0)        //Both output
059F6:  BTFSC  x26.1
059F8:  BRA    5A04
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
059FA:  BSF    F89.4
059FC:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
059FE:  BSF    F89.3
05A00:  BCF    F92.3
....................                 }
05A02:  BRA    5A12
....................                 else
....................                 {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
05A04:  BTFSS  x24.1
05A06:  BRA    5A0E
05A08:  BSF    F89.4
05A0A:  BCF    F92.4
05A0C:  BRA    5A12
....................                   else output_bit(Pbell,1);                          //Bell
05A0E:  BSF    F89.3
05A10:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05A12:  MOVLW  01
05A14:  MOVWF  xBB
....................    }
05A16:  BRA    5AAE
....................    else if(FaultType.B10 == 0)
05A18:  BTFSC  x22.1
05A1A:  BRA    5AAE
....................    {
....................       In2.B10 = 0x00;
05A1C:  BCF    x2E.1
....................       Ack.B10 = 0;
05A1E:  BCF    x2A.1
....................       Output.B10 = 1;      //Off LED
05A20:  BSF    x1E.1
.................... 
....................       if((OutputType.B10 == 1 || OutputBoth.B10 == 0)&& inputflag ==0)      //If Buzzer or Both
05A22:  BTFSC  x24.1
05A24:  BRA    5A2A
05A26:  BTFSC  x26.1
05A28:  BRA    5A44
05A2A:  MOVF   xBB,F
05A2C:  BNZ   5A44
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
05A2E:  MOVLW  01
05A30:  MOVWF  xC6
05A32:  MOVLB  0
05A34:  CALL   3FAC
05A38:  DECFSZ 01,W
05A3A:  BRA    5A3E
05A3C:  BRA    5A42
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
05A3E:  BCF    F89.4
05A40:  BCF    F92.4
05A42:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B10 == 0 || OutputBoth.B10 == 0)&& inputflag ==0)  //If Bell or Both
05A44:  BTFSS  x24.1
05A46:  BRA    5A4C
05A48:  BTFSC  x26.1
05A4A:  BRA    5A66
05A4C:  MOVF   xBB,F
05A4E:  BNZ   5A66
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05A50:  MOVLW  02
05A52:  MOVWF  xC6
05A54:  MOVLB  0
05A56:  CALL   3FAC
05A5A:  DECFSZ 01,W
05A5C:  BRA    5A60
05A5E:  BRA    5A64
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
05A60:  BCF    F89.3
05A62:  BCF    F92.3
05A64:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
05A66:  BTFSC  x2D.0
05A68:  BRA    5AAE
05A6A:  BTFSC  x2D.1
05A6C:  BRA    5AAE
05A6E:  BTFSC  x2D.2
05A70:  BRA    5AAE
05A72:  BTFSC  x2D.3
05A74:  BRA    5AAE
05A76:  BTFSC  x2D.4
05A78:  BRA    5AAE
05A7A:  BTFSC  x2D.5
05A7C:  BRA    5AAE
05A7E:  BTFSC  x2D.6
05A80:  BRA    5AAE
05A82:  BTFSC  x2D.7
05A84:  BRA    5AAE
05A86:  BTFSC  x2E.0
05A88:  BRA    5AAE
05A8A:  BTFSC  x2E.1
05A8C:  BRA    5AAE
05A8E:  BTFSC  x2E.2
05A90:  BRA    5AAE
05A92:  BTFSC  x2E.3
05A94:  BRA    5AAE
05A96:  BTFSC  x2E.4
05A98:  BRA    5AAE
05A9A:  BTFSC  x2E.5
05A9C:  BRA    5AAE
05A9E:  BTFSC  x2E.6
05AA0:  BRA    5AAE
05AA2:  BTFSC  x2E.7
05AA4:  BRA    5AAE
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
05AA6:  BCF    F89.3
05AA8:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
05AAA:  BCF    F89.4
05AAC:  BCF    F92.4
....................       }
....................    }
....................    
.................... //}
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05AAE:  MOVLW  00
05AB0:  BTFSC  x1C.2
05AB2:  MOVLW  01
05AB4:  MOVWF  xC7
05AB6:  MOVLW  00
05AB8:  BTFSC  x20.2
05ABA:  MOVLW  01
05ABC:  XORWF  xC7,W
05ABE:  SUBLW  01
05AC0:  BNZ   5AC6
05AC2:  BTFSS  x22.2
05AC4:  BRA    5ACA
05AC6:  BTFSS  1A.5
05AC8:  BRA    5B24
....................    {
....................       if(In2.B11 == 0 && AutoAck == 0x0F && Ack.B11 == 0)   //use auto acknowlegde
05ACA:  BTFSC  x2E.2
05ACC:  BRA    5AEA
05ACE:  MOVLB  0
05AD0:  MOVF   x6A,W
05AD2:  SUBLW  0F
05AD4:  BTFSC  FD8.2
05AD6:  BRA    5ADC
05AD8:  MOVLB  1
05ADA:  BRA    5AEA
05ADC:  MOVLB  1
05ADE:  BTFSC  x2A.2
05AE0:  BRA    5AEA
....................       {
....................             TimeBase1s = 100 ;            //reload again
05AE2:  MOVLW  64
05AE4:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05AE6:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B11 = 1;
05AEA:  BSF    x2E.2
....................       if(Ack.B11 == 0)
05AEC:  BTFSC  x2A.2
05AEE:  BRA    5B1E
....................       {
....................          if(FlashingFlag == 0)
05AF0:  BTFSC  1A.1
05AF2:  BRA    5AF8
....................             {
....................                Output.B11 = 0;           //Flash output1
05AF4:  BCF    x1E.2
....................             }
05AF6:  BRA    5AFA
....................             else
....................             {
....................                Output.B11 = 1;
05AF8:  BSF    x1E.2
....................             }
....................          if (~AutoTestFlag)
05AFA:  BTFSC  1A.4
05AFC:  BRA    5B1E
....................          {
....................             if(AlarmIndicator.B11 == 1){
05AFE:  BTFSS  x28.2
05B00:  BRA    5B1E
....................                 if(OutputBoth.B11 == 0)        //Both output
05B02:  BTFSC  x26.2
05B04:  BRA    5B10
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05B06:  BSF    F89.4
05B08:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05B0A:  BSF    F89.3
05B0C:  BCF    F92.3
....................                 }
05B0E:  BRA    5B1E
....................                 else
....................                 {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,1);     //Buzzer
05B10:  BTFSS  x24.2
05B12:  BRA    5B1A
05B14:  BSF    F89.4
05B16:  BCF    F92.4
05B18:  BRA    5B1E
....................                   else output_bit(Pbell,1);                          //Bell
05B1A:  BSF    F89.3
05B1C:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05B1E:  MOVLW  01
05B20:  MOVWF  xBB
....................    }
05B22:  BRA    5BBA
....................    else if(FaultType.B11 == 0)
05B24:  BTFSC  x22.2
05B26:  BRA    5BBA
....................    {
....................       In2.B11 = 0x00;
05B28:  BCF    x2E.2
....................       Ack.B11 = 0;
05B2A:  BCF    x2A.2
....................       Output.B11 = 1;      //Off LED
05B2C:  BSF    x1E.2
.................... 
....................       if((OutputType.B11 == 1 || OutputBoth.B11 == 0)&& inputflag ==0)      //If Buzzer or Both
05B2E:  BTFSC  x24.2
05B30:  BRA    5B36
05B32:  BTFSC  x26.2
05B34:  BRA    5B50
05B36:  MOVF   xBB,F
05B38:  BNZ   5B50
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
05B3A:  MOVLW  01
05B3C:  MOVWF  xC6
05B3E:  MOVLB  0
05B40:  CALL   3FAC
05B44:  DECFSZ 01,W
05B46:  BRA    5B4A
05B48:  BRA    5B4E
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
05B4A:  BCF    F89.4
05B4C:  BCF    F92.4
05B4E:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B11 == 0 || OutputBoth.B11 == 0)&& inputflag ==0)  //If Bell or Both
05B50:  BTFSS  x24.2
05B52:  BRA    5B58
05B54:  BTFSC  x26.2
05B56:  BRA    5B72
05B58:  MOVF   xBB,F
05B5A:  BNZ   5B72
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05B5C:  MOVLW  02
05B5E:  MOVWF  xC6
05B60:  MOVLB  0
05B62:  CALL   3FAC
05B66:  DECFSZ 01,W
05B68:  BRA    5B6C
05B6A:  BRA    5B70
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
05B6C:  BCF    F89.3
05B6E:  BCF    F92.3
05B70:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
05B72:  BTFSC  x2D.0
05B74:  BRA    5BBA
05B76:  BTFSC  x2D.1
05B78:  BRA    5BBA
05B7A:  BTFSC  x2D.2
05B7C:  BRA    5BBA
05B7E:  BTFSC  x2D.3
05B80:  BRA    5BBA
05B82:  BTFSC  x2D.4
05B84:  BRA    5BBA
05B86:  BTFSC  x2D.5
05B88:  BRA    5BBA
05B8A:  BTFSC  x2D.6
05B8C:  BRA    5BBA
05B8E:  BTFSC  x2D.7
05B90:  BRA    5BBA
05B92:  BTFSC  x2E.0
05B94:  BRA    5BBA
05B96:  BTFSC  x2E.1
05B98:  BRA    5BBA
05B9A:  BTFSC  x2E.2
05B9C:  BRA    5BBA
05B9E:  BTFSC  x2E.3
05BA0:  BRA    5BBA
05BA2:  BTFSC  x2E.4
05BA4:  BRA    5BBA
05BA6:  BTFSC  x2E.5
05BA8:  BRA    5BBA
05BAA:  BTFSC  x2E.6
05BAC:  BRA    5BBA
05BAE:  BTFSC  x2E.7
05BB0:  BRA    5BBA
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
05BB2:  BCF    F89.3
05BB4:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
05BB6:  BCF    F89.4
05BB8:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05BBA:  MOVLW  00
05BBC:  BTFSC  x1C.3
05BBE:  MOVLW  01
05BC0:  MOVWF  xC7
05BC2:  MOVLW  00
05BC4:  BTFSC  x20.3
05BC6:  MOVLW  01
05BC8:  XORWF  xC7,W
05BCA:  SUBLW  01
05BCC:  BNZ   5BD2
05BCE:  BTFSS  x22.3
05BD0:  BRA    5BD6
05BD2:  BTFSS  1A.5
05BD4:  BRA    5C30
....................    {
....................       if(In2.B12 == 0 && AutoAck == 0x0F && Ack.B12 == 0)   //use auto acknowlegde
05BD6:  BTFSC  x2E.3
05BD8:  BRA    5BF6
05BDA:  MOVLB  0
05BDC:  MOVF   x6A,W
05BDE:  SUBLW  0F
05BE0:  BTFSC  FD8.2
05BE2:  BRA    5BE8
05BE4:  MOVLB  1
05BE6:  BRA    5BF6
05BE8:  MOVLB  1
05BEA:  BTFSC  x2A.3
05BEC:  BRA    5BF6
....................       {
....................             TimeBase1s = 100 ;            //reload again
05BEE:  MOVLW  64
05BF0:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05BF2:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B12 = 1;
05BF6:  BSF    x2E.3
....................       if(Ack.B12 == 0)
05BF8:  BTFSC  x2A.3
05BFA:  BRA    5C2A
....................       {
....................          if(FlashingFlag == 0)
05BFC:  BTFSC  1A.1
05BFE:  BRA    5C04
....................             {
....................                Output.B12 = 0;           //Flash output1
05C00:  BCF    x1E.3
....................             }
05C02:  BRA    5C06
....................             else
....................             {
....................                Output.B12 = 1;
05C04:  BSF    x1E.3
....................             }
....................          if (~AutoTestFlag)
05C06:  BTFSC  1A.4
05C08:  BRA    5C2A
....................          {
....................             if(AlarmIndicator.B12 == 1){
05C0A:  BTFSS  x28.3
05C0C:  BRA    5C2A
....................                 if(OutputBoth.B12 == 0)        //Both output
05C0E:  BTFSC  x26.3
05C10:  BRA    5C1C
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05C12:  BSF    F89.4
05C14:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05C16:  BSF    F89.3
05C18:  BCF    F92.3
....................                 }
05C1A:  BRA    5C2A
....................                 else
....................                 {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,1);     //Buzzer
05C1C:  BTFSS  x24.3
05C1E:  BRA    5C26
05C20:  BSF    F89.4
05C22:  BCF    F92.4
05C24:  BRA    5C2A
....................                   else output_bit(Pbell,1);                          //Bell
05C26:  BSF    F89.3
05C28:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05C2A:  MOVLW  01
05C2C:  MOVWF  xBB
....................    }
05C2E:  BRA    5CC6
....................    else if(FaultType.B12 == 0)
05C30:  BTFSC  x22.3
05C32:  BRA    5CC6
....................    {
....................       In2.B12 = 0x00;
05C34:  BCF    x2E.3
....................       Ack.B12 = 0;
05C36:  BCF    x2A.3
....................       Output.B12 = 1;      //Off LED
05C38:  BSF    x1E.3
.................... 
....................       if((OutputType.B12 == 1 || OutputBoth.B12 == 0)&& inputflag ==0)      //If Buzzer or Both
05C3A:  BTFSC  x24.3
05C3C:  BRA    5C42
05C3E:  BTFSC  x26.3
05C40:  BRA    5C5C
05C42:  MOVF   xBB,F
05C44:  BNZ   5C5C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
05C46:  MOVLW  01
05C48:  MOVWF  xC6
05C4A:  MOVLB  0
05C4C:  CALL   3FAC
05C50:  DECFSZ 01,W
05C52:  BRA    5C56
05C54:  BRA    5C5A
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
05C56:  BCF    F89.4
05C58:  BCF    F92.4
05C5A:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B12 == 0 || OutputBoth.B12 == 0)&& inputflag ==0)  //If Bell or Both
05C5C:  BTFSS  x24.3
05C5E:  BRA    5C64
05C60:  BTFSC  x26.3
05C62:  BRA    5C7E
05C64:  MOVF   xBB,F
05C66:  BNZ   5C7E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05C68:  MOVLW  02
05C6A:  MOVWF  xC6
05C6C:  MOVLB  0
05C6E:  CALL   3FAC
05C72:  DECFSZ 01,W
05C74:  BRA    5C78
05C76:  BRA    5C7C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
05C78:  BCF    F89.3
05C7A:  BCF    F92.3
05C7C:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
05C7E:  BTFSC  x2D.0
05C80:  BRA    5CC6
05C82:  BTFSC  x2D.1
05C84:  BRA    5CC6
05C86:  BTFSC  x2D.2
05C88:  BRA    5CC6
05C8A:  BTFSC  x2D.3
05C8C:  BRA    5CC6
05C8E:  BTFSC  x2D.4
05C90:  BRA    5CC6
05C92:  BTFSC  x2D.5
05C94:  BRA    5CC6
05C96:  BTFSC  x2D.6
05C98:  BRA    5CC6
05C9A:  BTFSC  x2D.7
05C9C:  BRA    5CC6
05C9E:  BTFSC  x2E.0
05CA0:  BRA    5CC6
05CA2:  BTFSC  x2E.1
05CA4:  BRA    5CC6
05CA6:  BTFSC  x2E.2
05CA8:  BRA    5CC6
05CAA:  BTFSC  x2E.3
05CAC:  BRA    5CC6
05CAE:  BTFSC  x2E.4
05CB0:  BRA    5CC6
05CB2:  BTFSC  x2E.5
05CB4:  BRA    5CC6
05CB6:  BTFSC  x2E.6
05CB8:  BRA    5CC6
05CBA:  BTFSC  x2E.7
05CBC:  BRA    5CC6
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
05CBE:  BCF    F89.3
05CC0:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
05CC2:  BCF    F89.4
05CC4:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05CC6:  MOVLW  00
05CC8:  BTFSC  x1C.4
05CCA:  MOVLW  01
05CCC:  MOVWF  xC7
05CCE:  MOVLW  00
05CD0:  BTFSC  x20.4
05CD2:  MOVLW  01
05CD4:  XORWF  xC7,W
05CD6:  SUBLW  01
05CD8:  BNZ   5CDE
05CDA:  BTFSS  x22.4
05CDC:  BRA    5CE2
05CDE:  BTFSS  1A.5
05CE0:  BRA    5D3C
....................    {
....................       if(In2.B13 == 0 && AutoAck == 0x0F && Ack.B13 == 0)   //use auto acknowlegde
05CE2:  BTFSC  x2E.4
05CE4:  BRA    5D02
05CE6:  MOVLB  0
05CE8:  MOVF   x6A,W
05CEA:  SUBLW  0F
05CEC:  BTFSC  FD8.2
05CEE:  BRA    5CF4
05CF0:  MOVLB  1
05CF2:  BRA    5D02
05CF4:  MOVLB  1
05CF6:  BTFSC  x2A.4
05CF8:  BRA    5D02
....................       {
....................             TimeBase1s = 100 ;            //reload again
05CFA:  MOVLW  64
05CFC:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05CFE:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B13 = 1;
05D02:  BSF    x2E.4
....................       if(Ack.B13 == 0)
05D04:  BTFSC  x2A.4
05D06:  BRA    5D36
....................       {
....................          if(FlashingFlag == 0)
05D08:  BTFSC  1A.1
05D0A:  BRA    5D10
....................             {
....................                Output.B13 = 0;           //Flash output1
05D0C:  BCF    x1E.4
....................             }
05D0E:  BRA    5D12
....................             else
....................             {
....................                Output.B13 = 1;
05D10:  BSF    x1E.4
....................             }
....................          if (~AutoTestFlag)
05D12:  BTFSC  1A.4
05D14:  BRA    5D36
....................          {
....................             if(AlarmIndicator.B13 == 1){
05D16:  BTFSS  x28.4
05D18:  BRA    5D36
....................                 if(OutputBoth.B13 == 0)        //Both output
05D1A:  BTFSC  x26.4
05D1C:  BRA    5D28
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05D1E:  BSF    F89.4
05D20:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05D22:  BSF    F89.3
05D24:  BCF    F92.3
....................                 }
05D26:  BRA    5D36
....................                 else
....................                 {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,1);     //Buzzer
05D28:  BTFSS  x24.4
05D2A:  BRA    5D32
05D2C:  BSF    F89.4
05D2E:  BCF    F92.4
05D30:  BRA    5D36
....................                   else output_bit(Pbell,1);                          //Bell
05D32:  BSF    F89.3
05D34:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05D36:  MOVLW  01
05D38:  MOVWF  xBB
....................    }
05D3A:  BRA    5DD2
....................    else if(FaultType.B13 == 0)
05D3C:  BTFSC  x22.4
05D3E:  BRA    5DD2
....................    {
....................       In2.B13 = 0x00;
05D40:  BCF    x2E.4
....................       Ack.B13 = 0;
05D42:  BCF    x2A.4
....................       Output.B13 = 1;      //Off LED
05D44:  BSF    x1E.4
.................... 
....................       if((OutputType.B13 == 1 || OutputBoth.B13 == 0)&& inputflag ==0)      //If Buzzer or Both
05D46:  BTFSC  x24.4
05D48:  BRA    5D4E
05D4A:  BTFSC  x26.4
05D4C:  BRA    5D68
05D4E:  MOVF   xBB,F
05D50:  BNZ   5D68
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
05D52:  MOVLW  01
05D54:  MOVWF  xC6
05D56:  MOVLB  0
05D58:  CALL   3FAC
05D5C:  DECFSZ 01,W
05D5E:  BRA    5D62
05D60:  BRA    5D66
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
05D62:  BCF    F89.4
05D64:  BCF    F92.4
05D66:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B13 == 0 || OutputBoth.B13 == 0)&& inputflag ==0)  //If Bell or Both
05D68:  BTFSS  x24.4
05D6A:  BRA    5D70
05D6C:  BTFSC  x26.4
05D6E:  BRA    5D8A
05D70:  MOVF   xBB,F
05D72:  BNZ   5D8A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05D74:  MOVLW  02
05D76:  MOVWF  xC6
05D78:  MOVLB  0
05D7A:  CALL   3FAC
05D7E:  DECFSZ 01,W
05D80:  BRA    5D84
05D82:  BRA    5D88
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
05D84:  BCF    F89.3
05D86:  BCF    F92.3
05D88:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
05D8A:  BTFSC  x2D.0
05D8C:  BRA    5DD2
05D8E:  BTFSC  x2D.1
05D90:  BRA    5DD2
05D92:  BTFSC  x2D.2
05D94:  BRA    5DD2
05D96:  BTFSC  x2D.3
05D98:  BRA    5DD2
05D9A:  BTFSC  x2D.4
05D9C:  BRA    5DD2
05D9E:  BTFSC  x2D.5
05DA0:  BRA    5DD2
05DA2:  BTFSC  x2D.6
05DA4:  BRA    5DD2
05DA6:  BTFSC  x2D.7
05DA8:  BRA    5DD2
05DAA:  BTFSC  x2E.0
05DAC:  BRA    5DD2
05DAE:  BTFSC  x2E.1
05DB0:  BRA    5DD2
05DB2:  BTFSC  x2E.2
05DB4:  BRA    5DD2
05DB6:  BTFSC  x2E.3
05DB8:  BRA    5DD2
05DBA:  BTFSC  x2E.4
05DBC:  BRA    5DD2
05DBE:  BTFSC  x2E.5
05DC0:  BRA    5DD2
05DC2:  BTFSC  x2E.6
05DC4:  BRA    5DD2
05DC6:  BTFSC  x2E.7
05DC8:  BRA    5DD2
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
05DCA:  BCF    F89.3
05DCC:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
05DCE:  BCF    F89.4
05DD0:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05DD2:  MOVLW  00
05DD4:  BTFSC  x1C.5
05DD6:  MOVLW  01
05DD8:  MOVWF  xC7
05DDA:  MOVLW  00
05DDC:  BTFSC  x20.5
05DDE:  MOVLW  01
05DE0:  XORWF  xC7,W
05DE2:  SUBLW  01
05DE4:  BNZ   5DEA
05DE6:  BTFSS  x22.5
05DE8:  BRA    5DEE
05DEA:  BTFSS  1A.5
05DEC:  BRA    5E48
....................    {
....................       if(In2.B14 == 0 && AutoAck == 0x0F && Ack.B14 == 0)   //use auto acknowlegde
05DEE:  BTFSC  x2E.5
05DF0:  BRA    5E0E
05DF2:  MOVLB  0
05DF4:  MOVF   x6A,W
05DF6:  SUBLW  0F
05DF8:  BTFSC  FD8.2
05DFA:  BRA    5E00
05DFC:  MOVLB  1
05DFE:  BRA    5E0E
05E00:  MOVLB  1
05E02:  BTFSC  x2A.5
05E04:  BRA    5E0E
....................       {
....................             TimeBase1s = 100 ;            //reload again
05E06:  MOVLW  64
05E08:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05E0A:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B14 = 1;
05E0E:  BSF    x2E.5
....................       if(Ack.B14 == 0)
05E10:  BTFSC  x2A.5
05E12:  BRA    5E42
....................       {
....................          if(FlashingFlag == 0)
05E14:  BTFSC  1A.1
05E16:  BRA    5E1C
....................             {
....................                Output.B14 = 0;           //Flash output1
05E18:  BCF    x1E.5
....................             }
05E1A:  BRA    5E1E
....................             else
....................             {
....................                Output.B14 = 1;
05E1C:  BSF    x1E.5
....................             }
....................          if (~AutoTestFlag)
05E1E:  BTFSC  1A.4
05E20:  BRA    5E42
....................          {
....................             if(AlarmIndicator.B14 == 1){
05E22:  BTFSS  x28.5
05E24:  BRA    5E42
....................                 if(OutputBoth.B14 == 0)        //Both output
05E26:  BTFSC  x26.5
05E28:  BRA    5E34
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05E2A:  BSF    F89.4
05E2C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05E2E:  BSF    F89.3
05E30:  BCF    F92.3
....................                 }
05E32:  BRA    5E42
....................                 else
....................                 {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,1);     //Buzzer
05E34:  BTFSS  x24.5
05E36:  BRA    5E3E
05E38:  BSF    F89.4
05E3A:  BCF    F92.4
05E3C:  BRA    5E42
....................                   else output_bit(Pbell,1);                          //Bell
05E3E:  BSF    F89.3
05E40:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05E42:  MOVLW  01
05E44:  MOVWF  xBB
....................    }
05E46:  BRA    5EDE
....................    else if(FaultType.B14 == 0)
05E48:  BTFSC  x22.5
05E4A:  BRA    5EDE
....................    {
....................       In2.B14 = 0x00;
05E4C:  BCF    x2E.5
....................       Ack.B14 = 0;
05E4E:  BCF    x2A.5
....................       Output.B14 = 1;      //Off LED
05E50:  BSF    x1E.5
.................... 
....................       if((OutputType.B14 == 1 || OutputBoth.B14 == 0)&& inputflag ==0)      //If Buzzer or Both
05E52:  BTFSC  x24.5
05E54:  BRA    5E5A
05E56:  BTFSC  x26.5
05E58:  BRA    5E74
05E5A:  MOVF   xBB,F
05E5C:  BNZ   5E74
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
05E5E:  MOVLW  01
05E60:  MOVWF  xC6
05E62:  MOVLB  0
05E64:  CALL   3FAC
05E68:  DECFSZ 01,W
05E6A:  BRA    5E6E
05E6C:  BRA    5E72
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
05E6E:  BCF    F89.4
05E70:  BCF    F92.4
05E72:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B14 == 0 || OutputBoth.B14 == 0)&& inputflag ==0)  //If Bell or Both
05E74:  BTFSS  x24.5
05E76:  BRA    5E7C
05E78:  BTFSC  x26.5
05E7A:  BRA    5E96
05E7C:  MOVF   xBB,F
05E7E:  BNZ   5E96
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05E80:  MOVLW  02
05E82:  MOVWF  xC6
05E84:  MOVLB  0
05E86:  CALL   3FAC
05E8A:  DECFSZ 01,W
05E8C:  BRA    5E90
05E8E:  BRA    5E94
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
05E90:  BCF    F89.3
05E92:  BCF    F92.3
05E94:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
05E96:  BTFSC  x2D.0
05E98:  BRA    5EDE
05E9A:  BTFSC  x2D.1
05E9C:  BRA    5EDE
05E9E:  BTFSC  x2D.2
05EA0:  BRA    5EDE
05EA2:  BTFSC  x2D.3
05EA4:  BRA    5EDE
05EA6:  BTFSC  x2D.4
05EA8:  BRA    5EDE
05EAA:  BTFSC  x2D.5
05EAC:  BRA    5EDE
05EAE:  BTFSC  x2D.6
05EB0:  BRA    5EDE
05EB2:  BTFSC  x2D.7
05EB4:  BRA    5EDE
05EB6:  BTFSC  x2E.0
05EB8:  BRA    5EDE
05EBA:  BTFSC  x2E.1
05EBC:  BRA    5EDE
05EBE:  BTFSC  x2E.2
05EC0:  BRA    5EDE
05EC2:  BTFSC  x2E.3
05EC4:  BRA    5EDE
05EC6:  BTFSC  x2E.4
05EC8:  BRA    5EDE
05ECA:  BTFSC  x2E.5
05ECC:  BRA    5EDE
05ECE:  BTFSC  x2E.6
05ED0:  BRA    5EDE
05ED2:  BTFSC  x2E.7
05ED4:  BRA    5EDE
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
05ED6:  BCF    F89.3
05ED8:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
05EDA:  BCF    F89.4
05EDC:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05EDE:  MOVLW  00
05EE0:  BTFSC  x1C.6
05EE2:  MOVLW  01
05EE4:  MOVWF  xC7
05EE6:  MOVLW  00
05EE8:  BTFSC  x20.6
05EEA:  MOVLW  01
05EEC:  XORWF  xC7,W
05EEE:  SUBLW  01
05EF0:  BNZ   5EF6
05EF2:  BTFSS  x22.6
05EF4:  BRA    5EFA
05EF6:  BTFSS  1A.5
05EF8:  BRA    5F54
....................    {
....................       if(In2.B15 == 0 && AutoAck == 0x0F && Ack.B15 == 0)   //use auto acknowlegde
05EFA:  BTFSC  x2E.6
05EFC:  BRA    5F1A
05EFE:  MOVLB  0
05F00:  MOVF   x6A,W
05F02:  SUBLW  0F
05F04:  BTFSC  FD8.2
05F06:  BRA    5F0C
05F08:  MOVLB  1
05F0A:  BRA    5F1A
05F0C:  MOVLB  1
05F0E:  BTFSC  x2A.6
05F10:  BRA    5F1A
....................       {
....................             TimeBase1s = 100 ;            //reload again
05F12:  MOVLW  64
05F14:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05F16:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B15 = 1;
05F1A:  BSF    x2E.6
....................       if(Ack.B15 == 0)
05F1C:  BTFSC  x2A.6
05F1E:  BRA    5F4E
....................       {
....................          if(FlashingFlag == 0)
05F20:  BTFSC  1A.1
05F22:  BRA    5F28
....................             {
....................                Output.B15 = 0;           //Flash output1
05F24:  BCF    x1E.6
....................             }
05F26:  BRA    5F2A
....................             else
....................             {
....................                Output.B15 = 1;
05F28:  BSF    x1E.6
....................             }
....................          if (~AutoTestFlag)
05F2A:  BTFSC  1A.4
05F2C:  BRA    5F4E
....................          {
....................             if(AlarmIndicator.B15 == 1){
05F2E:  BTFSS  x28.6
05F30:  BRA    5F4E
....................                 if(OutputBoth.B15 == 0)        //Both output
05F32:  BTFSC  x26.6
05F34:  BRA    5F40
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05F36:  BSF    F89.4
05F38:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05F3A:  BSF    F89.3
05F3C:  BCF    F92.3
....................                 }
05F3E:  BRA    5F4E
....................                 else
....................                 {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,1);     //Buzzer
05F40:  BTFSS  x24.6
05F42:  BRA    5F4A
05F44:  BSF    F89.4
05F46:  BCF    F92.4
05F48:  BRA    5F4E
....................                   else output_bit(Pbell,1);                          //Bell
05F4A:  BSF    F89.3
05F4C:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05F4E:  MOVLW  01
05F50:  MOVWF  xBB
....................    }
05F52:  BRA    5FEA
....................    else if(FaultType.B15 == 0)
05F54:  BTFSC  x22.6
05F56:  BRA    5FEA
....................    {
....................       In2.B15 = 0x00;
05F58:  BCF    x2E.6
....................       Ack.B15 = 0;
05F5A:  BCF    x2A.6
....................       Output.B15 = 1;      //Off LED
05F5C:  BSF    x1E.6
.................... 
....................       if((OutputType.B15 == 1 || OutputBoth.B15 == 0)&& inputflag ==0)      //If Buzzer or Both
05F5E:  BTFSC  x24.6
05F60:  BRA    5F66
05F62:  BTFSC  x26.6
05F64:  BRA    5F80
05F66:  MOVF   xBB,F
05F68:  BNZ   5F80
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
05F6A:  MOVLW  01
05F6C:  MOVWF  xC6
05F6E:  MOVLB  0
05F70:  CALL   3FAC
05F74:  DECFSZ 01,W
05F76:  BRA    5F7A
05F78:  BRA    5F7E
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
05F7A:  BCF    F89.4
05F7C:  BCF    F92.4
05F7E:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B15 == 0 || OutputBoth.B15 == 0)&& inputflag ==0)  //If Bell or Both
05F80:  BTFSS  x24.6
05F82:  BRA    5F88
05F84:  BTFSC  x26.6
05F86:  BRA    5FA2
05F88:  MOVF   xBB,F
05F8A:  BNZ   5FA2
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05F8C:  MOVLW  02
05F8E:  MOVWF  xC6
05F90:  MOVLB  0
05F92:  CALL   3FAC
05F96:  DECFSZ 01,W
05F98:  BRA    5F9C
05F9A:  BRA    5FA0
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
05F9C:  BCF    F89.3
05F9E:  BCF    F92.3
05FA0:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
05FA2:  BTFSC  x2D.0
05FA4:  BRA    5FEA
05FA6:  BTFSC  x2D.1
05FA8:  BRA    5FEA
05FAA:  BTFSC  x2D.2
05FAC:  BRA    5FEA
05FAE:  BTFSC  x2D.3
05FB0:  BRA    5FEA
05FB2:  BTFSC  x2D.4
05FB4:  BRA    5FEA
05FB6:  BTFSC  x2D.5
05FB8:  BRA    5FEA
05FBA:  BTFSC  x2D.6
05FBC:  BRA    5FEA
05FBE:  BTFSC  x2D.7
05FC0:  BRA    5FEA
05FC2:  BTFSC  x2E.0
05FC4:  BRA    5FEA
05FC6:  BTFSC  x2E.1
05FC8:  BRA    5FEA
05FCA:  BTFSC  x2E.2
05FCC:  BRA    5FEA
05FCE:  BTFSC  x2E.3
05FD0:  BRA    5FEA
05FD2:  BTFSC  x2E.4
05FD4:  BRA    5FEA
05FD6:  BTFSC  x2E.5
05FD8:  BRA    5FEA
05FDA:  BTFSC  x2E.6
05FDC:  BRA    5FEA
05FDE:  BTFSC  x2E.7
05FE0:  BRA    5FEA
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
05FE2:  BCF    F89.3
05FE4:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
05FE6:  BCF    F89.4
05FE8:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05FEA:  MOVLW  00
05FEC:  BTFSC  x1C.7
05FEE:  MOVLW  01
05FF0:  MOVWF  xC7
05FF2:  MOVLW  00
05FF4:  BTFSC  x20.7
05FF6:  MOVLW  01
05FF8:  XORWF  xC7,W
05FFA:  SUBLW  01
05FFC:  BNZ   6002
05FFE:  BTFSS  x22.7
06000:  BRA    6006
06002:  BTFSS  1A.5
06004:  BRA    6060
....................    {
....................       if(In2.B16 == 0 && AutoAck == 0x0F && Ack.B16 == 0)   //use auto acknowlegde
06006:  BTFSC  x2E.7
06008:  BRA    6026
0600A:  MOVLB  0
0600C:  MOVF   x6A,W
0600E:  SUBLW  0F
06010:  BTFSC  FD8.2
06012:  BRA    6018
06014:  MOVLB  1
06016:  BRA    6026
06018:  MOVLB  1
0601A:  BTFSC  x2A.7
0601C:  BRA    6026
....................       {
....................             TimeBase1s = 100 ;            //reload again
0601E:  MOVLW  64
06020:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06022:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B16 = 1;
06026:  BSF    x2E.7
....................       if(Ack.B16 == 0)
06028:  BTFSC  x2A.7
0602A:  BRA    605A
....................       {
....................          if(FlashingFlag == 0)
0602C:  BTFSC  1A.1
0602E:  BRA    6034
....................             {
....................                Output.B16 = 0;         //Flash output1
06030:  BCF    x1E.7
....................             }
06032:  BRA    6036
....................             else
....................             {
....................                Output.B16 = 1;
06034:  BSF    x1E.7
....................             }
....................          if (~AutoTestFlag)
06036:  BTFSC  1A.4
06038:  BRA    605A
....................          {
....................             if(AlarmIndicator.B16 == 1){
0603A:  BTFSS  x28.7
0603C:  BRA    605A
....................                 if(OutputBoth.B16 == 0)        //Both output
0603E:  BTFSC  x26.7
06040:  BRA    604C
....................                 {
....................                   output_bit(Pbuzzer,1);   //Buzzer
06042:  BSF    F89.4
06044:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
06046:  BSF    F89.3
06048:  BCF    F92.3
....................                 }
0604A:  BRA    605A
....................                 else
....................                 {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,1);     //Buzzer
0604C:  BTFSS  x24.7
0604E:  BRA    6056
06050:  BSF    F89.4
06052:  BCF    F92.4
06054:  BRA    605A
....................                   else output_bit(Pbell,1);                          //Bell
06056:  BSF    F89.3
06058:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0605A:  MOVLW  01
0605C:  MOVWF  xBB
....................    }
0605E:  BRA    60F6
....................    else if(FaultType.B16 == 0)
06060:  BTFSC  x22.7
06062:  BRA    60F6
....................    {
....................       In2.B16 = 0x00;
06064:  BCF    x2E.7
....................       Ack.B16 = 0;
06066:  BCF    x2A.7
....................       Output.B16 = 1;      //Off LED
06068:  BSF    x1E.7
.................... 
....................       if((OutputType.B16 == 1 || OutputBoth.B16 == 0)&& inputflag ==0)      //If Buzzer or Both
0606A:  BTFSC  x24.7
0606C:  BRA    6072
0606E:  BTFSC  x26.7
06070:  BRA    608C
06072:  MOVF   xBB,F
06074:  BNZ   608C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06076:  MOVLW  01
06078:  MOVWF  xC6
0607A:  MOVLB  0
0607C:  CALL   3FAC
06080:  DECFSZ 01,W
06082:  BRA    6086
06084:  BRA    608A
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06086:  BCF    F89.4
06088:  BCF    F92.4
0608A:  MOVLB  1
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B16 == 0 || OutputBoth.B16 == 0)&& inputflag ==0)  //If Bell or Both
0608C:  BTFSS  x24.7
0608E:  BRA    6094
06090:  BTFSC  x26.7
06092:  BRA    60AE
06094:  MOVF   xBB,F
06096:  BNZ   60AE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06098:  MOVLW  02
0609A:  MOVWF  xC6
0609C:  MOVLB  0
0609E:  CALL   3FAC
060A2:  DECFSZ 01,W
060A4:  BRA    60A8
060A6:  BRA    60AC
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
060A8:  BCF    F89.3
060AA:  BCF    F92.3
060AC:  MOVLB  1
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0)
060AE:  BTFSC  x2D.0
060B0:  BRA    60F6
060B2:  BTFSC  x2D.1
060B4:  BRA    60F6
060B6:  BTFSC  x2D.2
060B8:  BRA    60F6
060BA:  BTFSC  x2D.3
060BC:  BRA    60F6
060BE:  BTFSC  x2D.4
060C0:  BRA    60F6
060C2:  BTFSC  x2D.5
060C4:  BRA    60F6
060C6:  BTFSC  x2D.6
060C8:  BRA    60F6
060CA:  BTFSC  x2D.7
060CC:  BRA    60F6
060CE:  BTFSC  x2E.0
060D0:  BRA    60F6
060D2:  BTFSC  x2E.1
060D4:  BRA    60F6
060D6:  BTFSC  x2E.2
060D8:  BRA    60F6
060DA:  BTFSC  x2E.3
060DC:  BRA    60F6
060DE:  BTFSC  x2E.4
060E0:  BRA    60F6
060E2:  BTFSC  x2E.5
060E4:  BRA    60F6
060E6:  BTFSC  x2E.6
060E8:  BRA    60F6
060EA:  BTFSC  x2E.7
060EC:  BRA    60F6
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
060EE:  BCF    F89.3
060F0:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
060F2:  BCF    F89.4
060F4:  BCF    F92.4
....................       }
....................    }
060F6:  MOVLB  0
060F8:  RETURN 0
....................    
....................    /*
.................... //input17
....................    if(((Inputt.B17 ^ InputType.B17) == 1) && (FaultType.B17 == 0))    // alarm1 occure and " Non Lock type"
....................    {
....................       if(In2.B17 == 0 && AutoAck == 0x0F && Ack.B17 == 0)   //use auto acknowlegde
....................       {
....................             TimeBase1s = 100 ;            //reload again
....................             AutoAckDelayTime = AutoAckTime ;
....................       }
.................... 
....................       In2.B17 = 1;
....................       if(Ack.B17 == 0)
....................       {
....................          if(FlashingFlag == 0)
....................             {
....................                Output.B17 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B17 = 1;
....................             }
....................          if (~AutoTestFlag)
....................          {
....................              if(OutputBoth.B17 == 0)        //Both output
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
....................                output_bit(Pbell,1);     //Bell
....................              }
....................              else
....................              {
....................                if(OutputType.B17 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                else output_bit(Pbell,1);                          //Bell
....................              }
....................          }
....................        }
.................... 
....................    }
....................    else if(FaultType.B17 == 0)
....................    {
....................       In2.B17 = 0x00;
....................       Ack.B17 = 0;
....................       Output.B17 = 1;      //Off LED
.................... 
....................       if(OutputType.B17 == 1 || OutputBoth.B17 == 0)      //If Buzzer or Both
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
....................          }
....................       }
.................... 
.................... 
....................       if(OutputType.B17 == 0 || OutputBoth.B17 == 0)  //If Bell or Both
....................       {
....................          if(CheckAutoReset(0x02) == 1);
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
....................          }
....................       }
....................    }
.................... //input18
....................    if(((Inputt.B18 ^ InputType.B18) == 1) && (FaultType.B18 == 0))    // alarm1 occure and " Non Lock type"
....................    {
....................       if(In2.B18 == 0 && AutoAck == 0x0F && Ack.B18 == 0)   //use auto acknowlegde
....................       {
....................             TimeBase1s = 100 ;            //reload again
....................             AutoAckDelayTime = AutoAckTime ;
....................       }
.................... 
....................       In2.B18 = 1;
....................       if(Ack.B18 == 0)
....................       {
....................          if(FlashingFlag == 0)
....................             {
....................                Output.B18 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B18 = 1;
....................             }
....................          if (~AutoTestFlag)
....................          {
....................              if(OutputBoth.B18 == 0)        //Both output
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
....................                output_bit(Pbell,1);     //Bell
....................              }
....................              else
....................              {
....................                if(OutputType.B18 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                else output_bit(Pbell,1);                          //Bell
....................              }
....................          }
....................        }
.................... 
....................    }
....................    else if(FaultType.B18 == 0)
....................    {
....................       In2.B18 = 0x00;
....................       Ack.B18 = 0;
....................       Output.B18 = 1;      //Off LED
.................... 
....................       if(OutputType.B18== 1 || OutputBoth.B18 == 0)      //If Buzzer or Both
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
....................          }
....................       }
.................... 
.................... 
....................       if(OutputType.B18 == 0 || OutputBoth.B18 == 0)  //If Bell or Both
....................       {
....................          if(CheckAutoReset(0x02) == 1);
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
....................          }
....................       }
....................    }
.................... //input19
....................    if(((Inputt.B19 ^ InputType.B19) == 1) && (FaultType.B19 == 0))    // alarm1 occure and " Non Lock type"
....................    {
....................       if(In2.B19 == 0 && AutoAck == 0x0F && Ack.B19 == 0)   //use auto acknowlegde
....................       {
....................             TimeBase1s = 100 ;            //reload again
....................             AutoAckDelayTime = AutoAckTime ;
....................       }
.................... 
....................       In2.B19 = 1;
....................       if(Ack.B19 == 0)
....................       {
....................          if(FlashingFlag == 0)
....................             {
....................                Output.B19 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B19 = 1;
....................             }
....................          if (~AutoTestFlag)
....................          {
....................              if(OutputBoth.B19 == 0)        //Both output
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
....................                output_bit(Pbell,1);     //Bell
....................              }
....................              else
....................              {
....................                if(OutputType.B19 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                else output_bit(Pbell,1);                          //Bell
....................              }
....................          }
....................        }
.................... 
....................    }
....................    else if(FaultType.B19 == 0)
....................    {
....................       In2.B19 = 0x00;
....................       Ack.B19 = 0;
....................       Output.B19 = 1;      //Off LED
.................... 
....................       if(OutputType.B19== 1 || OutputBoth.B19 == 0)      //If Buzzer or Both
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
....................          }
....................       }
.................... 
.................... 
....................       if(OutputType.B19 == 0 || OutputBoth.B19== 0)  //If Bell or Both
....................       {
....................          if(CheckAutoReset(0x02) == 1);
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
....................          }
....................       }
....................    }
....................    //input20
....................    if(((Inputt.B20 ^ InputType.B20) == 1) && (FaultType.B20 == 0))    // alarm1 occure and " Non Lock type"
....................    {
....................       if(In2.B20 == 0 && AutoAck == 0x0F && Ack.B20 == 0)   //use auto acknowlegde
....................       {
....................             TimeBase1s = 100 ;            //reload again
....................             AutoAckDelayTime = AutoAckTime ;
....................       }
.................... 
....................       In2.B20 = 1;
....................       if(Ack.B20 == 0)
....................       {
....................          if(FlashingFlag == 0)
....................             {
....................                Output.B20 = 0;           //Flash output1
....................             }
....................             else
....................             {
....................                Output.B20 = 1;
....................             }
....................          if (~AutoTestFlag)
....................          {
....................              if(OutputBoth.B20 == 0)        //Both output
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
....................                output_bit(Pbell,1);     //Bell
....................              }
....................              else
....................              {
....................                if(OutputType.B20 == 1) output_bit(Pbuzzer,1);     //Buzzer
....................                else output_bit(Pbell,1);                          //Bell
....................              }
....................          }
....................        }
.................... 
....................    }
....................    else if(FaultType.B20 == 0)
....................    {
....................       In2.B20 = 0x00;
....................       Ack.B20 = 0;
....................       Output.B20 = 1;      //Off LED
.................... 
....................       if(OutputType.B20== 1 || OutputBoth.B20 == 0)      //If Buzzer or Both
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
....................          }
....................       }
.................... 
.................... 
....................       if(OutputType.B20 == 0 || OutputBoth.B20 == 0)  //If Bell or Both
....................       {
....................          if(CheckAutoReset(0x02) == 1);
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
....................          }
....................       }
....................    }
....................    */
....................  //}
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Send_Ouput(void)
.................... {
....................     Red1_7 = 0;
*
01C6C:  CLRF   4E
....................     Red8_8 = 0;
01C6E:  CLRF   4F
....................     Red9_15 = 0;
01C70:  CLRF   50
....................     Red16_16 = 0;
01C72:  CLRF   51
.................... 
....................     Green1_7 = 0;
01C74:  CLRF   52
....................     Green8_8 = 0;
01C76:  CLRF   53
....................     Green9_15 = 0;
01C78:  CLRF   54
....................     Green16_16 = 0;
01C7A:  CLRF   55
.................... 
....................    if(T_test == 0x00)
01C7C:  MOVF   2F,F
01C7E:  BTFSS  FD8.2
01C80:  BRA    2012
....................    {
....................       //if(NoOfPoint >= 10)
....................       //{
....................       
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
01C82:  MOVLB  1
01C84:  BTFSS  x1D.0
01C86:  BRA    1C8E
....................            {
....................              bit_clear(Red1_7,1); bit_clear(Green1_7,1);
01C88:  BCF    4E.1
01C8A:  BCF    52.1
....................            }
01C8C:  BRA    1CB6
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
01C8E:  BTFSS  x33.0
01C90:  BRA    1C9C
01C92:  BTFSC  x35.0
01C94:  BRA    1C9C
....................              {
....................                bit_set(Red1_7,1); bit_clear(Green1_7,1);
01C96:  BSF    4E.1
01C98:  BCF    52.1
....................              }
01C9A:  BRA    1CB6
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
01C9C:  BTFSC  x33.0
01C9E:  BRA    1CAA
01CA0:  BTFSS  x35.0
01CA2:  BRA    1CAA
....................              {
....................                bit_clear(Red1_7,1); bit_set(Green1_7,1); 
01CA4:  BCF    4E.1
01CA6:  BSF    52.1
....................              }
01CA8:  BRA    1CB6
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
01CAA:  BTFSS  x33.0
01CAC:  BRA    1CB6
01CAE:  BTFSS  x35.0
01CB0:  BRA    1CB6
....................              {
....................                bit_set(Red1_7,1); bit_set(Green1_7,1) ; 
01CB2:  BSF    4E.1
01CB4:  BSF    52.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
01CB6:  BTFSS  x1D.1
01CB8:  BRA    1CC0
....................            {
....................              bit_clear(Red1_7,2); bit_clear(Green1_7,2);
01CBA:  BCF    4E.2
01CBC:  BCF    52.2
....................            }
01CBE:  BRA    1CE8
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
01CC0:  BTFSS  x33.1
01CC2:  BRA    1CCE
01CC4:  BTFSC  x35.1
01CC6:  BRA    1CCE
....................              {
....................                bit_set(Red1_7,2); bit_clear(Green1_7,2);
01CC8:  BSF    4E.2
01CCA:  BCF    52.2
....................              }
01CCC:  BRA    1CE8
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
01CCE:  BTFSC  x33.1
01CD0:  BRA    1CDC
01CD2:  BTFSS  x35.1
01CD4:  BRA    1CDC
....................              {
....................                bit_clear(Red1_7,2); bit_set(Green1_7,2); 
01CD6:  BCF    4E.2
01CD8:  BSF    52.2
....................              }
01CDA:  BRA    1CE8
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
01CDC:  BTFSS  x33.1
01CDE:  BRA    1CE8
01CE0:  BTFSS  x35.1
01CE2:  BRA    1CE8
....................              {
....................                bit_set(Red1_7,2); bit_set(Green1_7,2) ; 
01CE4:  BSF    4E.2
01CE6:  BSF    52.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
01CE8:  BTFSS  x1D.2
01CEA:  BRA    1CF2
....................            {
....................              bit_clear(Red1_7,3); bit_clear(Green1_7,3);
01CEC:  BCF    4E.3
01CEE:  BCF    52.3
....................            }
01CF0:  BRA    1D1A
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
01CF2:  BTFSS  x33.2
01CF4:  BRA    1D00
01CF6:  BTFSC  x35.2
01CF8:  BRA    1D00
....................              {
....................                bit_set(Red1_7,3); bit_clear(Green1_7,3);
01CFA:  BSF    4E.3
01CFC:  BCF    52.3
....................              }
01CFE:  BRA    1D1A
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
01D00:  BTFSC  x33.2
01D02:  BRA    1D0E
01D04:  BTFSS  x35.2
01D06:  BRA    1D0E
....................              {
....................                bit_clear(Red1_7,3); bit_set(Green1_7,3); 
01D08:  BCF    4E.3
01D0A:  BSF    52.3
....................              }
01D0C:  BRA    1D1A
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
01D0E:  BTFSS  x33.2
01D10:  BRA    1D1A
01D12:  BTFSS  x35.2
01D14:  BRA    1D1A
....................              {
....................                bit_set(Red1_7,3); bit_set(Green1_7,3) ; 
01D16:  BSF    4E.3
01D18:  BSF    52.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
01D1A:  BTFSS  x1D.3
01D1C:  BRA    1D24
....................            {
....................              bit_clear(Red1_7,4); bit_clear(Green1_7,4);
01D1E:  BCF    4E.4
01D20:  BCF    52.4
....................            }
01D22:  BRA    1D4C
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
01D24:  BTFSS  x33.3
01D26:  BRA    1D32
01D28:  BTFSC  x35.3
01D2A:  BRA    1D32
....................              {
....................                bit_set(Red1_7,4); bit_clear(Green1_7,4);
01D2C:  BSF    4E.4
01D2E:  BCF    52.4
....................              }
01D30:  BRA    1D4C
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
01D32:  BTFSC  x33.3
01D34:  BRA    1D40
01D36:  BTFSS  x35.3
01D38:  BRA    1D40
....................              {
....................                bit_clear(Red1_7,4); bit_set(Green1_7,4); 
01D3A:  BCF    4E.4
01D3C:  BSF    52.4
....................              }
01D3E:  BRA    1D4C
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
01D40:  BTFSS  x33.3
01D42:  BRA    1D4C
01D44:  BTFSS  x35.3
01D46:  BRA    1D4C
....................              {
....................                bit_set(Red1_7,4); bit_set(Green1_7,4) ; 
01D48:  BSF    4E.4
01D4A:  BSF    52.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
01D4C:  BTFSS  x1D.4
01D4E:  BRA    1D56
....................            {
....................              bit_clear(Red1_7,5); bit_clear(Green1_7,5);
01D50:  BCF    4E.5
01D52:  BCF    52.5
....................            }
01D54:  BRA    1D7E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
01D56:  BTFSS  x33.4
01D58:  BRA    1D64
01D5A:  BTFSC  x35.4
01D5C:  BRA    1D64
....................              {
....................                bit_set(Red1_7,5); bit_clear(Green1_7,5);
01D5E:  BSF    4E.5
01D60:  BCF    52.5
....................              }
01D62:  BRA    1D7E
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
01D64:  BTFSC  x33.4
01D66:  BRA    1D72
01D68:  BTFSS  x35.4
01D6A:  BRA    1D72
....................              {
....................                bit_clear(Red1_7,5); bit_set(Green1_7,5); 
01D6C:  BCF    4E.5
01D6E:  BSF    52.5
....................              }
01D70:  BRA    1D7E
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
01D72:  BTFSS  x33.4
01D74:  BRA    1D7E
01D76:  BTFSS  x35.4
01D78:  BRA    1D7E
....................              {
....................                bit_set(Red1_7,5); bit_set(Green1_7,5) ; 
01D7A:  BSF    4E.5
01D7C:  BSF    52.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
01D7E:  BTFSS  x1D.5
01D80:  BRA    1D88
....................            {
....................              bit_clear(Red1_7,6); bit_clear(Green1_7,6);
01D82:  BCF    4E.6
01D84:  BCF    52.6
....................            }
01D86:  BRA    1DB0
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
01D88:  BTFSS  x33.5
01D8A:  BRA    1D96
01D8C:  BTFSC  x35.5
01D8E:  BRA    1D96
....................              {
....................                bit_set(Red1_7,6); bit_clear(Green1_7,6);
01D90:  BSF    4E.6
01D92:  BCF    52.6
....................              }
01D94:  BRA    1DB0
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
01D96:  BTFSC  x33.5
01D98:  BRA    1DA4
01D9A:  BTFSS  x35.5
01D9C:  BRA    1DA4
....................              {
....................                bit_clear(Red1_7,6); bit_set(Green1_7,6); 
01D9E:  BCF    4E.6
01DA0:  BSF    52.6
....................              }
01DA2:  BRA    1DB0
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
01DA4:  BTFSS  x33.5
01DA6:  BRA    1DB0
01DA8:  BTFSS  x35.5
01DAA:  BRA    1DB0
....................              {
....................                bit_set(Red1_7,6); bit_set(Green1_7,6) ; 
01DAC:  BSF    4E.6
01DAE:  BSF    52.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
01DB0:  BTFSS  x1D.6
01DB2:  BRA    1DBA
....................            {
....................              bit_clear(Red1_7,7); bit_clear(Green1_7,7);
01DB4:  BCF    4E.7
01DB6:  BCF    52.7
....................            }
01DB8:  BRA    1DE2
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
01DBA:  BTFSS  x33.6
01DBC:  BRA    1DC8
01DBE:  BTFSC  x35.6
01DC0:  BRA    1DC8
....................              {
....................                bit_set(Red1_7,7); bit_clear(Green1_7,7);
01DC2:  BSF    4E.7
01DC4:  BCF    52.7
....................              }
01DC6:  BRA    1DE2
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
01DC8:  BTFSC  x33.6
01DCA:  BRA    1DD6
01DCC:  BTFSS  x35.6
01DCE:  BRA    1DD6
....................              {
....................                bit_clear(Red1_7,7); bit_set(Green1_7,7); 
01DD0:  BCF    4E.7
01DD2:  BSF    52.7
....................              }
01DD4:  BRA    1DE2
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
01DD6:  BTFSS  x33.6
01DD8:  BRA    1DE2
01DDA:  BTFSS  x35.6
01DDC:  BRA    1DE2
....................              {
....................                bit_set(Red1_7,7); bit_set(Green
01DDE:  BSF    4E.7
01DE0:  BSF    52.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
01DE2:  BTFSS  x1D.7
01DE4:  BRA    1DEC
....................            {
....................              bit_clear(Red8_8,0); bit_clear(Green8_8,0);
01DE6:  BCF    4F.0
01DE8:  BCF    53.0
....................            }
01DEA:  BRA    1E14
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
01DEC:  BTFSS  x33.7
01DEE:  BRA    1DFA
01DF0:  BTFSC  x35.7
01DF2:  BRA    1DFA
....................              {
....................                bit_set(Red8_8,0); bit_clear(Green8_8,0);
01DF4:  BSF    4F.0
01DF6:  BCF    53.0
....................              }
01DF8:  BRA    1E14
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
01DFA:  BTFSC  x33.7
01DFC:  BRA    1E08
01DFE:  BTFSS  x35.7
01E00:  BRA    1E08
....................              {
....................                bit_clear(Red8_8,0); bit_set(Green8_8,0); 
01E02:  BCF    4F.0
01E04:  BSF    53.0
....................              }
01E06:  BRA    1E14
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
01E08:  BTFSS  x33.7
01E0A:  BRA    1E14
01E0C:  BTFSS  x35.7
01E0E:  BRA    1E14
....................              {
....................                bit_set(Red8_8,0); bit_set(Green8_8,0) ; 
01E10:  BSF    4F.0
01E12:  BSF    53.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            ////////////////////////////////////////////////////////
....................            if(Output.B9)//++++++++++++B9+++++++++++++++++++++
01E14:  BTFSS  x1E.0
01E16:  BRA    1E1E
....................            {
....................              bit_clear(Red9_15,1); bit_clear(Green9_15,1);
01E18:  BCF    50.1
01E1A:  BCF    54.1
....................            }
01E1C:  BRA    1E46
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B9 )&&(GREEN_Colour.B9 ==0 ))//Red
01E1E:  BTFSS  x34.0
01E20:  BRA    1E2C
01E22:  BTFSC  x36.0
01E24:  BRA    1E2C
....................              {
....................                bit_set(Red9_15,1); bit_clear(Green9_15,1);
01E26:  BSF    50.1
01E28:  BCF    54.1
....................              }
01E2A:  BRA    1E46
....................              else if((RED_Colour.B9==0 )&&(GREEN_Colour.B9))//Green
01E2C:  BTFSC  x34.0
01E2E:  BRA    1E3A
01E30:  BTFSS  x36.0
01E32:  BRA    1E3A
....................              {
....................                bit_clear(Red9_15,1); bit_set(Green9_15,1); 
01E34:  BCF    50.1
01E36:  BSF    54.1
....................              }
01E38:  BRA    1E46
....................              else if((RED_Colour.B9)&&(GREEN_Colour.B9))//Ambian
01E3A:  BTFSS  x34.0
01E3C:  BRA    1E46
01E3E:  BTFSS  x36.0
01E40:  BRA    1E46
....................              {
....................                bit_set(Red9_15,1); bit_set(Green9_15,1) ; 
01E42:  BSF    50.1
01E44:  BSF    54.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B10)//++++++++++++B10+++++++++++++++++++++
01E46:  BTFSS  x1E.1
01E48:  BRA    1E50
....................            {
....................              bit_clear(Red9_15,2); bit_clear(Green9_15,2);
01E4A:  BCF    50.2
01E4C:  BCF    54.2
....................            }
01E4E:  BRA    1E78
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B10 )&&(GREEN_Colour.B10 ==0 ))//Red
01E50:  BTFSS  x34.1
01E52:  BRA    1E5E
01E54:  BTFSC  x36.1
01E56:  BRA    1E5E
....................              {
....................                bit_set(Red9_15,2); bit_clear(Green9_15,2);
01E58:  BSF    50.2
01E5A:  BCF    54.2
....................              }
01E5C:  BRA    1E78
....................              else if((RED_Colour.B10==0 )&&(GREEN_Colour.B10))//Green
01E5E:  BTFSC  x34.1
01E60:  BRA    1E6C
01E62:  BTFSS  x36.1
01E64:  BRA    1E6C
....................              {
....................                bit_clear(Red9_15,2); bit_set(Green9_15,2); 
01E66:  BCF    50.2
01E68:  BSF    54.2
....................              }
01E6A:  BRA    1E78
....................              else if((RED_Colour.B10)&&(GREEN_Colour.B10))//Ambian
01E6C:  BTFSS  x34.1
01E6E:  BRA    1E78
01E70:  BTFSS  x36.1
01E72:  BRA    1E78
....................              {
....................                bit_set(Red9_15,2); bit_set(Green9_15,2) ; 
01E74:  BSF    50.2
01E76:  BSF    54.2
....................              }  
....................            }
....................            
....................        // }
....................         
....................        // if(NoOfPoint >= 20)
....................       //{   
....................            ////////////////////////////////////////////////////////
....................             if(Output.B11)//++++++++++++B11+++++++++++++++++++++
01E78:  BTFSS  x1E.2
01E7A:  BRA    1E82
....................            {
....................              bit_clear(Red9_15,3); bit_clear(Green9_15,3);
01E7C:  BCF    50.3
01E7E:  BCF    54.3
....................            }
01E80:  BRA    1EAA
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B11 )&&(GREEN_Colour.B11 ==0 ))//Red
01E82:  BTFSS  x34.2
01E84:  BRA    1E90
01E86:  BTFSC  x36.2
01E88:  BRA    1E90
....................              {
....................                bit_set(Red9_15,3); bit_clear(Green9_15,3);
01E8A:  BSF    50.3
01E8C:  BCF    54.3
....................              }
01E8E:  BRA    1EAA
....................              else if((RED_Colour.B11==0 )&&(GREEN_Colour.B11))//Green
01E90:  BTFSC  x34.2
01E92:  BRA    1E9E
01E94:  BTFSS  x36.2
01E96:  BRA    1E9E
....................              {
....................                bit_clear(Red9_15,3); bit_set(Green9_15,3); 
01E98:  BCF    50.3
01E9A:  BSF    54.3
....................              }
01E9C:  BRA    1EAA
....................              else if((RED_Colour.B11)&&(GREEN_Colour.B11))//Ambian
01E9E:  BTFSS  x34.2
01EA0:  BRA    1EAA
01EA2:  BTFSS  x36.2
01EA4:  BRA    1EAA
....................              {
....................                bit_set(Red9_15,3); bit_set(Green9_15,3) ; 
01EA6:  BSF    50.3
01EA8:  BSF    54.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B12)//++++++++++++B12+++++++++++++++++++++
01EAA:  BTFSS  x1E.3
01EAC:  BRA    1EB4
....................            {
....................              bit_clear(Red9_15,4); bit_clear(Green9_15,4);
01EAE:  BCF    50.4
01EB0:  BCF    54.4
....................            }
01EB2:  BRA    1EDC
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B12 )&&(GREEN_Colour.B12 ==0 ))//Red
01EB4:  BTFSS  x34.3
01EB6:  BRA    1EC2
01EB8:  BTFSC  x36.3
01EBA:  BRA    1EC2
....................              {
....................                bit_set(Red9_15,4); bit_clear(Green9_15,4);
01EBC:  BSF    50.4
01EBE:  BCF    54.4
....................              }
01EC0:  BRA    1EDC
....................              else if((RED_Colour.B12==0 )&&(GREEN_Colour.B12))//Green
01EC2:  BTFSC  x34.3
01EC4:  BRA    1ED0
01EC6:  BTFSS  x36.3
01EC8:  BRA    1ED0
....................              {
....................                bit_clear(Red9_15,4); bit_set(Green9_15,4); 
01ECA:  BCF    50.4
01ECC:  BSF    54.4
....................              }
01ECE:  BRA    1EDC
....................              else if((RED_Colour.B12)&&(GREEN_Colour.B12))//Ambian
01ED0:  BTFSS  x34.3
01ED2:  BRA    1EDC
01ED4:  BTFSS  x36.3
01ED6:  BRA    1EDC
....................              {
....................                bit_set(Red9_15,4); bit_set(Green9_15,4) ; 
01ED8:  BSF    50.4
01EDA:  BSF    54.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B13)//++++++++++++B13+++++++++++++++++++++
01EDC:  BTFSS  x1E.4
01EDE:  BRA    1EE6
....................            {
....................              bit_clear(Red9_15,5); bit_clear(Green9_15,5);
01EE0:  BCF    50.5
01EE2:  BCF    54.5
....................            }
01EE4:  BRA    1F0E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B13 )&&(GREEN_Colour.B13 ==0 ))//Red
01EE6:  BTFSS  x34.4
01EE8:  BRA    1EF4
01EEA:  BTFSC  x36.4
01EEC:  BRA    1EF4
....................              {
....................                bit_set(Red9_15,5); bit_clear(Green9_15,5);
01EEE:  BSF    50.5
01EF0:  BCF    54.5
....................              }
01EF2:  BRA    1F0E
....................              else if((RED_Colour.B13==0 )&&(GREEN_Colour.B13))//Green
01EF4:  BTFSC  x34.4
01EF6:  BRA    1F02
01EF8:  BTFSS  x36.4
01EFA:  BRA    1F02
....................              {
....................                bit_clear(Red9_15,5); bit_set(Green9_15,5); 
01EFC:  BCF    50.5
01EFE:  BSF    54.5
....................              }
01F00:  BRA    1F0E
....................              else if((RED_Colour.B13)&&(GREEN_Colour.B13))//Ambian
01F02:  BTFSS  x34.4
01F04:  BRA    1F0E
01F06:  BTFSS  x36.4
01F08:  BRA    1F0E
....................              {
....................                bit_set(Red9_15,5); bit_set(Green9_15,5) ; 
01F0A:  BSF    50.5
01F0C:  BSF    54.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B14)//++++++++++++B14+++++++++++++++++++++
01F0E:  BTFSS  x1E.5
01F10:  BRA    1F18
....................            {
....................              bit_clear(Red9_15,6); bit_clear(Green9_15,6);
01F12:  BCF    50.6
01F14:  BCF    54.6
....................            }
01F16:  BRA    1F40
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B14 )&&(GREEN_Colour.B14 ==0 ))//Red
01F18:  BTFSS  x34.5
01F1A:  BRA    1F26
01F1C:  BTFSC  x36.5
01F1E:  BRA    1F26
....................              {
....................                bit_set(Red9_15,6); bit_clear(Green9_15,6);
01F20:  BSF    50.6
01F22:  BCF    54.6
....................              }
01F24:  BRA    1F40
....................              else if((RED_Colour.B14==0 )&&(GREEN_Colour.B14))//Green
01F26:  BTFSC  x34.5
01F28:  BRA    1F34
01F2A:  BTFSS  x36.5
01F2C:  BRA    1F34
....................              {
....................                bit_clear(Red9_15,6); bit_set(Green9_15,6); 
01F2E:  BCF    50.6
01F30:  BSF    54.6
....................              }
01F32:  BRA    1F40
....................              else if((RED_Colour.B14)&&(GREEN_Colour.B14))//Ambian
01F34:  BTFSS  x34.5
01F36:  BRA    1F40
01F38:  BTFSS  x36.5
01F3A:  BRA    1F40
....................              {
....................                bit_set(Red9_15,6); bit_set(Green9_15,6) ; 
01F3C:  BSF    50.6
01F3E:  BSF    54.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B15)//++++++++++++B15+++++++++++++++++++++
01F40:  BTFSS  x1E.6
01F42:  BRA    1F4A
....................            {
....................              bit_clear(Red9_15,7); bit_clear(Green9_15,7);
01F44:  BCF    50.7
01F46:  BCF    54.7
....................            }
01F48:  BRA    1F72
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B15 )&&(GREEN_Colour.B15 ==0 ))//Red
01F4A:  BTFSS  x34.6
01F4C:  BRA    1F58
01F4E:  BTFSC  x36.6
01F50:  BRA    1F58
....................              {
....................                bit_set(Red9_15,7); bit_clear(Green9_15,7);
01F52:  BSF    50.7
01F54:  BCF    54.7
....................              }
01F56:  BRA    1F72
....................              else if((RED_Colour.B15==0 )&&(GREEN_Colour.B15))//Green
01F58:  BTFSC  x34.6
01F5A:  BRA    1F66
01F5C:  BTFSS  x36.6
01F5E:  BRA    1F66
....................              {
....................                bit_clear(Red9_15,7); bit_set(Green9_15,7); 
01F60:  BCF    50.7
01F62:  BSF    54.7
....................              }
01F64:  BRA    1F72
....................              else if((RED_Colour.B15)&&(GREEN_Colour.B15))//Ambian
01F66:  BTFSS  x34.6
01F68:  BRA    1F72
01F6A:  BTFSS  x36.6
01F6C:  BRA    1F72
....................              {
....................                bit_set(Red9_15,7); bit_set(Green9_15,7) ; 
01F6E:  BSF    50.7
01F70:  BSF    54.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B16)//++++++++++++B16+++++++++++++++++++++
01F72:  BTFSS  x1E.7
01F74:  BRA    1F7C
....................            {
....................              bit_clear(Red16_16,0); bit_clear(Green16_16,0);
01F76:  BCF    51.0
01F78:  BCF    55.0
....................            }
01F7A:  BRA    1FA4
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B16 )&&(GREEN_Colour.B16 ==0 ))//Red
01F7C:  BTFSS  x34.7
01F7E:  BRA    1F8A
01F80:  BTFSC  x36.7
01F82:  BRA    1F8A
....................              {
....................                bit_set(Red16_16,0); bit_clear(Green16_16,0);
01F84:  BSF    51.0
01F86:  BCF    55.0
....................              }
01F88:  BRA    1FA4
....................              else if((RED_Colour.B16==0 )&&(GREEN_Colour.B16))//Green
01F8A:  BTFSC  x34.7
01F8C:  BRA    1F98
01F8E:  BTFSS  x36.7
01F90:  BRA    1F98
....................              {
....................                bit_clear(Red16_16,0); bit_set(Green16_16,0); 
01F92:  BCF    51.0
01F94:  BSF    55.0
....................              }
01F96:  BRA    1FA4
....................              else if((RED_Colour.B16)&&(GREEN_Colour.B16))//Ambian
01F98:  BTFSS  x34.7
01F9A:  BRA    1FA4
01F9C:  BTFSS  x36.7
01F9E:  BRA    1FA4
....................              {
....................                bit_set(Red16_16,0); bit_set(Green16_16,0) ; 
01FA0:  BSF    51.0
01FA2:  BSF    55.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            
....................             /*
....................           
....................           
....................            ////////////////////////////////////////////////////////
....................            if(Output.B17)//++++++++++++B17+++++++++++++++++++++
....................            {
....................              bit_clear(Green11_18,6); bit_clear(Red11_18,6);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B17 )&&(GREEN_Colour.B17 ==0 ))//Red
....................              {
....................                bit_set(Red11_18,6); bit_clear(Green11_18,6);
....................              }
....................              else if((RED_Colour.B17==0 )&&(GREEN_Colour.B17))//Green
....................              {
....................                bit_clear(Red11_18,6); bit_set(Green11_18,6); 
....................              }
....................              else if((RED_Colour.B17)&&(GREEN_Colour.B17))//Ambian
....................              {
....................                bit_set(Red11_18,6); bit_set(Green11_18,6) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B18)//++++++++++++B18+++++++++++++++++++++
....................            {
....................              bit_clear(Green11_18,7); bit_clear(Red11_18,7);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B18 )&&(GREEN_Colour.B18 ==0 ))//Red
....................              {
....................                bit_set(Red11_18,7); bit_clear(Green11_18,7);
....................              }
....................              else if((RED_Colour.B18==0 )&&(GREEN_Colour.B18))//Green
....................              {
....................                bit_clear(Red11_18,7); bit_set(Green11_18,7); 
....................              }
....................              else if((RED_Colour.B18)&&(GREEN_Colour.B18))//Ambian
....................              {
....................                bit_set(Red11_18,7); bit_set(Green11_18,7) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B19)//++++++++++++B19+++++++++++++++++++++
....................            {
....................              bit_clear(Green19_20,0); bit_clear(Red19_20,0);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B19 )&&(GREEN_Colour.B19 ==0 ))//Red
....................              {
....................                bit_set(Red19_20,0); bit_clear(Green19_20,0);
....................              }
....................              else if((RED_Colour.B19==0 )&&(GREEN_Colour.B19))//Green
....................              {
....................                bit_clear(Red19_20,0); bit_set(Green19_20,0); 
....................              }
....................              else if((RED_Colour.B19)&&(GREEN_Colour.B19))//Ambian
....................              {
....................                bit_set(Red19_20,0); bit_set(Green19_20,0) ; 
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B20)//++++++++++++B20+++++++++++++++++++++
....................            {
....................              bit_clear(Green19_20,1); bit_clear(Red19_20,1);
....................            }
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B20 )&&(GREEN_Colour.B20 ==0 ))//Red
....................              {
....................                bit_set(Red19_20,1); bit_clear(Green19_20,1);
....................              }
....................              else if((RED_Colour.B20==0 )&&(GREEN_Colour.B20))//Green
....................              {
....................                bit_clear(Red19_20,1); bit_set(Green19_20,1); 
....................              }
....................              else if((RED_Colour.B20)&&(GREEN_Colour.B20))//Ambian
....................              {
....................                bit_set(Red19_20,1); bit_set(Green19_20,1) ; 
....................              }  
....................            }
....................            
....................            
....................            ////////////////////////////////////////////////////////
....................          
....................       //} 
.................... 
....................         */
....................         
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_7);
01FA4:  MOVLW  04
01FA6:  MOVWF  xC6
01FA8:  MOVFF  4E,1C7
01FAC:  MOVLB  0
01FAE:  RCALL  1C40
....................            IO_OUTPUT_B(IO_DEVICE_2, Red8_8);
01FB0:  MOVLW  04
01FB2:  MOVLB  1
01FB4:  MOVWF  xC6
01FB6:  MOVFF  4F,1C7
01FBA:  MOVLB  0
01FBC:  RCALL  1C56
....................                       
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_7);
01FBE:  MOVLW  06
01FC0:  MOVLB  1
01FC2:  MOVWF  xC6
01FC4:  MOVFF  52,1C7
01FC8:  MOVLB  0
01FCA:  RCALL  1C40
....................            IO_OUTPUT_B(IO_DEVICE_3, Green8_8);
01FCC:  MOVLW  06
01FCE:  MOVLB  1
01FD0:  MOVWF  xC6
01FD2:  MOVFF  53,1C7
01FD6:  MOVLB  0
01FD8:  RCALL  1C56
....................            
....................            IO_OUTPUT_A(IO_DEVICE_5, Red9_15);                                                                                                                                      
01FDA:  MOVLW  0A
01FDC:  MOVLB  1
01FDE:  MOVWF  xC6
01FE0:  MOVFF  50,1C7
01FE4:  MOVLB  0
01FE6:  RCALL  1C40
....................            IO_OUTPUT_B(IO_DEVICE_5, Red16_16);
01FE8:  MOVLW  0A
01FEA:  MOVLB  1
01FEC:  MOVWF  xC6
01FEE:  MOVFF  51,1C7
01FF2:  MOVLB  0
01FF4:  RCALL  1C56
....................                      
....................            IO_OUTPUT_A(IO_DEVICE_4, Green9_15);
01FF6:  MOVLW  08
01FF8:  MOVLB  1
01FFA:  MOVWF  xC6
01FFC:  MOVFF  54,1C7
02000:  MOVLB  0
02002:  RCALL  1C40
....................            IO_OUTPUT_B(IO_DEVICE_4, Green16_16);
02004:  MOVLW  08
02006:  MOVLB  1
02008:  MOVWF  xC6
0200A:  MOVFF  55,1C7
0200E:  MOVLB  0
02010:  RCALL  1C56
....................            
....................                                 
....................            //IO_OUTPUT_A(IO_DEVICE_4, Red1_8); //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_4, Red9_10); //jj test
....................            
....................            //IO_OUTPUT_A(IO_DEVICE_5, Green1_8);  //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_5, Green9_10); //jj test
....................                                            
....................            
....................    }
02012:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
....................    if(NoOfPoint == 8)
*
03ED2:  MOVF   x6D,W
03ED4:  SUBLW  08
03ED6:  BNZ   3F1E
....................    {
....................       Inputt.B1 = ~InputType.B1;
03ED8:  MOVLB  1
03EDA:  BCF    x1B.0
03EDC:  BTFSS  x1F.0
03EDE:  BSF    x1B.0
....................       Inputt.B2 = ~InputType.B2;
03EE0:  BCF    x1B.1
03EE2:  BTFSS  x1F.1
03EE4:  BSF    x1B.1
....................       Inputt.B3 = ~InputType.B3;
03EE6:  BCF    x1B.2
03EE8:  BTFSS  x1F.2
03EEA:  BSF    x1B.2
....................       Inputt.B4 = ~InputType.B4;
03EEC:  BCF    x1B.3
03EEE:  BTFSS  x1F.3
03EF0:  BSF    x1B.3
....................       Inputt.B5 = ~InputType.B5;
03EF2:  BCF    x1B.4
03EF4:  BTFSS  x1F.4
03EF6:  BSF    x1B.4
....................       Inputt.B6 = ~InputType.B6;
03EF8:  BCF    x1B.5
03EFA:  BTFSS  x1F.5
03EFC:  BSF    x1B.5
....................       Inputt.B7 = ~InputType.B7;
03EFE:  BCF    x1B.6
03F00:  BTFSS  x1F.6
03F02:  BSF    x1B.6
....................       Inputt.B8 = ~InputType.B8;
03F04:  BCF    x1B.7
03F06:  BTFSS  x1F.7
03F08:  BSF    x1B.7
....................       Ack.B1 = 0;
03F0A:  BCF    x29.0
....................       Ack.B2 = 0;
03F0C:  BCF    x29.1
....................       Ack.B3 = 0;
03F0E:  BCF    x29.2
....................       Ack.B4 = 0;
03F10:  BCF    x29.3
....................       Ack.B5 = 0;
03F12:  BCF    x29.4
....................       Ack.B6 = 0;
03F14:  BCF    x29.5
....................       Ack.B7 = 0;
03F16:  BCF    x29.6
....................       Ack.B8 = 0;
03F18:  BCF    x29.7
....................    }
03F1A:  BRA    3FA6
03F1C:  MOVLB  0
....................    else if(NoOfPoint == 16)
03F1E:  MOVF   x6D,W
03F20:  SUBLW  10
03F22:  BNZ   3FA6
....................    {
....................       Inputt.B1 = ~InputType.B1;
03F24:  MOVLB  1
03F26:  BCF    x1B.0
03F28:  BTFSS  x1F.0
03F2A:  BSF    x1B.0
....................       Inputt.B2 = ~InputType.B2;
03F2C:  BCF    x1B.1
03F2E:  BTFSS  x1F.1
03F30:  BSF    x1B.1
....................       Inputt.B3 = ~InputType.B3;
03F32:  BCF    x1B.2
03F34:  BTFSS  x1F.2
03F36:  BSF    x1B.2
....................       Inputt.B4 = ~InputType.B4;
03F38:  BCF    x1B.3
03F3A:  BTFSS  x1F.3
03F3C:  BSF    x1B.3
....................       Inputt.B5 = ~InputType.B5;
03F3E:  BCF    x1B.4
03F40:  BTFSS  x1F.4
03F42:  BSF    x1B.4
....................       Inputt.B6 = ~InputType.B6;
03F44:  BCF    x1B.5
03F46:  BTFSS  x1F.5
03F48:  BSF    x1B.5
....................       Inputt.B7 = ~InputType.B7;
03F4A:  BCF    x1B.6
03F4C:  BTFSS  x1F.6
03F4E:  BSF    x1B.6
....................       Inputt.B8 = ~InputType.B8;
03F50:  BCF    x1B.7
03F52:  BTFSS  x1F.7
03F54:  BSF    x1B.7
....................       Inputt.B9 = ~InputType.B9;
03F56:  BCF    x1C.0
03F58:  BTFSS  x20.0
03F5A:  BSF    x1C.0
....................       Inputt.B10 = ~InputType.B10;
03F5C:  BCF    x1C.1
03F5E:  BTFSS  x20.1
03F60:  BSF    x1C.1
....................       Inputt.B11 = ~InputType.B11;
03F62:  BCF    x1C.2
03F64:  BTFSS  x20.2
03F66:  BSF    x1C.2
....................       Inputt.B12 = ~InputType.B12;
03F68:  BCF    x1C.3
03F6A:  BTFSS  x20.3
03F6C:  BSF    x1C.3
....................       Inputt.B13 = ~InputType.B13;
03F6E:  BCF    x1C.4
03F70:  BTFSS  x20.4
03F72:  BSF    x1C.4
....................       Inputt.B14 = ~InputType.B14;
03F74:  BCF    x1C.5
03F76:  BTFSS  x20.5
03F78:  BSF    x1C.5
....................       Inputt.B15 = ~InputType.B15;
03F7A:  BCF    x1C.6
03F7C:  BTFSS  x20.6
03F7E:  BSF    x1C.6
....................       Inputt.B16 = ~InputType.B16;
03F80:  BCF    x1C.7
03F82:  BTFSS  x20.7
03F84:  BSF    x1C.7
....................       Ack.B1 = 0;
03F86:  BCF    x29.0
....................       Ack.B2 = 0;
03F88:  BCF    x29.1
....................       Ack.B3 = 0;
03F8A:  BCF    x29.2
....................       Ack.B4 = 0;
03F8C:  BCF    x29.3
....................       Ack.B5 = 0;
03F8E:  BCF    x29.4
....................       Ack.B6 = 0;
03F90:  BCF    x29.5
....................       Ack.B7 = 0;
03F92:  BCF    x29.6
....................       Ack.B8 = 0;
03F94:  BCF    x29.7
....................       Ack.B9 = 0;
03F96:  BCF    x2A.0
....................       Ack.B10 = 0;
03F98:  BCF    x2A.1
....................       Ack.B11 = 0;
03F9A:  BCF    x2A.2
....................       Ack.B12 = 0;
03F9C:  BCF    x2A.3
....................       Ack.B13 = 0;
03F9E:  BCF    x2A.4
....................       Ack.B14 = 0;
03FA0:  BCF    x2A.5
....................       Ack.B15 = 0;
03FA2:  BCF    x2A.6
....................       Ack.B16 = 0;
03FA4:  BCF    x2A.7
03FA6:  MOVLB  0
....................    }
03FA8:  GOTO   61CE (RETURN)
....................   
.................... }
.................... 
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
*
060FA:  MOVFF  32,1BE
....................    output_temp[1] = output9_16;
060FE:  MOVFF  33,1BF
.................... 
.................... 
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
06102:  BSF    F94.2
06104:  BTFSC  F82.2
06106:  BRA    610C
06108:  BTFSS  1A.6
0610A:  BRA    6110
0610C:  BTFSS  1A.4
0610E:  BRA    611C
06110:  MOVLW  32
06112:  MOVLB  1
06114:  MOVWF  xC6
06116:  MOVLB  0
06118:  CALL   05B2
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
0611C:  BSF    F94.2
0611E:  BTFSC  F82.2
06120:  BRA    6126
06122:  BTFSS  1A.6
06124:  BRA    612A
06126:  BTFSS  1A.4
06128:  BRA    61B6
....................        {
....................            if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
0612A:  BSF    F94.2
0612C:  BTFSC  F82.2
0612E:  BRA    6134
06130:  BTFSS  1A.6
06132:  BRA    6138
06134:  BTFSS  1A.4
06136:  BRA    61B4
....................            {
....................              restart_wdt();
06138:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
0613A:  MOVF   2F,F
0613C:  BNZ   6142
0613E:  MOVLW  06
06140:  MOVWF  2F
....................              Test = 1;
06142:  BSF    1A.6
....................               //if(NoOfPoint >= 16)
....................              // {
....................              
....................                  IO_OUTPUT_A(IO_DEVICE_2, 0xFF);
06144:  MOVLW  04
06146:  MOVLB  1
06148:  MOVWF  xC6
0614A:  SETF   xC7
0614C:  MOVLB  0
0614E:  CALL   1C40
....................                  IO_OUTPUT_B(IO_DEVICE_2, 0xFF);
06152:  MOVLW  04
06154:  MOVLB  1
06156:  MOVWF  xC6
06158:  SETF   xC7
0615A:  MOVLB  0
0615C:  CALL   1C56
....................                             
....................                  IO_OUTPUT_A(IO_DEVICE_3, 0xFF);
06160:  MOVLW  06
06162:  MOVLB  1
06164:  MOVWF  xC6
06166:  SETF   xC7
06168:  MOVLB  0
0616A:  CALL   1C40
....................                  IO_OUTPUT_B(IO_DEVICE_3, 0xFF);
0616E:  MOVLW  06
06170:  MOVLB  1
06172:  MOVWF  xC6
06174:  SETF   xC7
06176:  MOVLB  0
06178:  CALL   1C56
....................                  
....................                  IO_OUTPUT_A(IO_DEVICE_4, 0xFF);
0617C:  MOVLW  08
0617E:  MOVLB  1
06180:  MOVWF  xC6
06182:  SETF   xC7
06184:  MOVLB  0
06186:  CALL   1C40
....................                  IO_OUTPUT_B(IO_DEVICE_4, 0xFF);
0618A:  MOVLW  08
0618C:  MOVLB  1
0618E:  MOVWF  xC6
06190:  SETF   xC7
06192:  MOVLB  0
06194:  CALL   1C56
....................                            
....................                  IO_OUTPUT_A(IO_DEVICE_5, 0xFF);
06198:  MOVLW  0A
0619A:  MOVLB  1
0619C:  MOVWF  xC6
0619E:  SETF   xC7
061A0:  MOVLB  0
061A2:  CALL   1C40
....................                  IO_OUTPUT_B(IO_DEVICE_5, 0xFF);
061A6:  MOVLW  0A
061A8:  MOVLB  1
061AA:  MOVWF  xC6
061AC:  SETF   xC7
061AE:  MOVLB  0
061B0:  CALL   1C56
....................                  //PCF8575_write(0xFF,0x00,Input1_8_Wr_addr);
....................                  //PCF8575_write(0xFF,0x00,Input9_16_Wr_addr);
....................                  //IO_OUTPUT_B(IO_DEVICE_0, 0x00);
....................                  //IO_OUTPUT_B(IO_DEVICE_1, 0x00);
....................              // }
....................              
....................            }
....................        }
061B4:  BRA    61C6
....................        else if(input(Ptest) == 1 && Test == 1)
061B6:  BSF    F94.2
061B8:  BTFSS  F82.2
061BA:  BRA    61C6
061BC:  BTFSS  1A.6
061BE:  BRA    61C6
....................        {
....................            T_test = 0x00;
061C0:  CLRF   2F
....................            Test = 0;
061C2:  BCF    1A.6
....................            Test_fault = 0;
061C4:  BCF    1A.5
....................        }
.................... 
.................... 
....................        if(Test_fault == 1)
061C6:  BTFSS  1A.5
061C8:  BRA    61DC
....................        {
....................           ForceAllAlarm();
061CA:  GOTO   3ED2
....................           Anal_Function();
061CE:  CALL   4734
....................           if(input(Ptest) == 1)
061D2:  BSF    F94.2
061D4:  BTFSS  F82.2
061D6:  BRA    61DA
....................           {
....................             Test_fault = 0;
061D8:  BCF    1A.5
....................           }
....................        }
061DA:  BRA    61F2
....................       
....................        else if(input(Ptest) == 1 && Test == 1)
061DC:  BSF    F94.2
061DE:  BTFSS  F82.2
061E0:  BRA    61F2
061E2:  BTFSS  1A.6
061E4:  BRA    61F2
....................        {
....................           if(NoOfPoint >= 16)
061E6:  MOVF   x6D,W
061E8:  SUBLW  0F
061EA:  BC    61EC
....................           {
....................              //PCF8575_write(0xFF,output_temp[0],Input1_8_Wr_addr);
....................              //PCF8575_write(0xFF,output_temp[1],Input9_16_Wr_addr);
....................              //IO_OUTPUT_B(IO_DEVICE_0, output_temp[0]);
....................              //IO_OUTPUT_B(IO_DEVICE_1, output_temp[1]); 
....................           }
....................           
.................... 
....................           T_test = 0x00;
061EC:  CLRF   2F
....................           Test = 0;
061EE:  BCF    1A.6
....................           Test_fault = 0;
061F0:  BCF    1A.5
....................        }
061F2:  GOTO   6AD2 (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
0233C:  BSF    F94.0
0233E:  BTFSC  F82.0
02340:  BRA    2346
02342:  BTFSS  1A.7
02344:  BRA    234A
02346:  BTFSS  1A.2
02348:  BRA    2356
0234A:  MOVLW  32
0234C:  MOVLB  1
0234E:  MOVWF  xC6
02350:  MOVLB  0
02352:  CALL   05B2
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
02356:  BSF    F94.0
02358:  BTFSC  F82.0
0235A:  BRA    2360
0235C:  BTFSS  1A.7
0235E:  BRA    2364
02360:  BTFSS  1A.2
02362:  BRA    2478
....................    {
....................             AutoAckFlag = 0;
02364:  BCF    1A.2
....................             AutoAckDelayTime = 0x00;
02366:  CLRF   1D
....................       
....................                   //if(In.B1 == 1 || ((Inputt.B1 ^ InputType.B1) == 1))
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
02368:  MOVLB  1
0236A:  BTFSC  x2B.0
0236C:  BRA    2372
0236E:  BTFSS  x2D.0
02370:  BRA    237A
....................            {
....................              Ack.B1 = 1;
02372:  BSF    x29.0
....................              In.B1 = 0;
02374:  BCF    x2B.0
....................              In2.B1 = 0;      //for auto reset
02376:  BCF    x2D.0
....................              Output.B1 = 0;
02378:  BCF    x1D.0
....................            }
....................            //if(In.B2 == 1 || ((Inputt.B2 ^ InputType.B2) == 1))
....................            if((In.B2 == 1)||(In2.B2 == 1))
0237A:  BTFSC  x2B.1
0237C:  BRA    2382
0237E:  BTFSS  x2D.1
02380:  BRA    238A
....................            {
....................              Ack.B2 = 1;
02382:  BSF    x29.1
....................              In.B2 = 0;
02384:  BCF    x2B.1
....................              In2.B2 = 0;      //for auto reset
02386:  BCF    x2D.1
....................              Output.B2 = 0;
02388:  BCF    x1D.1
....................            }
....................            //if(In.B3 == 1 || ((Inputt.B3 ^ InputType.B3) == 1))
....................            if((In.B3 == 1)||(In2.B3 == 1))
0238A:  BTFSC  x2B.2
0238C:  BRA    2392
0238E:  BTFSS  x2D.2
02390:  BRA    239A
....................            {
....................              Ack.B3 = 1;
02392:  BSF    x29.2
....................              In.B3 = 0;
02394:  BCF    x2B.2
....................              In2.B3 = 0;      //for auto reset
02396:  BCF    x2D.2
....................              Output.B3 = 0;
02398:  BCF    x1D.2
....................            }
....................            //if(In.B4 == 1 || ((Inputt.B4 ^ InputType.B4) == 1))
....................            if((In.B4 == 1)||(In2.B4 == 1))
0239A:  BTFSC  x2B.3
0239C:  BRA    23A2
0239E:  BTFSS  x2D.3
023A0:  BRA    23AA
....................            {
....................              Ack.B4 = 1;
023A2:  BSF    x29.3
....................              In.B4 = 0;
023A4:  BCF    x2B.3
....................              In2.B4 = 0;      //for auto reset
023A6:  BCF    x2D.3
....................              Output.B4 = 0;
023A8:  BCF    x1D.3
....................            }
....................            //if(In.B5 == 1 || ((Inputt.B5 ^ InputType.B5) == 1))
....................            if((In.B5 == 1)||(In2.B5 == 1))
023AA:  BTFSC  x2B.4
023AC:  BRA    23B2
023AE:  BTFSS  x2D.4
023B0:  BRA    23BA
....................            {
....................              Ack.B5 = 1;
023B2:  BSF    x29.4
....................              In.B5 = 0;
023B4:  BCF    x2B.4
....................              In2.B5 = 0;      //for auto reset
023B6:  BCF    x2D.4
....................              Output.B5 = 0;
023B8:  BCF    x1D.4
....................            }
....................            //if(In.B6 == 1 || ((Inputt.B6 ^ InputType.B6) == 1))
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
023BA:  BTFSC  x2B.5
023BC:  BRA    23C2
023BE:  BTFSS  x2D.5
023C0:  BRA    23CA
....................            {
....................              Ack.B6 = 1;
023C2:  BSF    x29.5
....................              In.B6 = 0;
023C4:  BCF    x2B.5
....................              In2.B6 = 0;      //for auto reset
023C6:  BCF    x2D.5
....................              Output.B6 = 0;
023C8:  BCF    x1D.5
....................            }
....................            //if(In.B7 == 1 || ((Inputt.B7 ^ InputType.B7) == 1))
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
023CA:  BTFSC  x2B.6
023CC:  BRA    23D2
023CE:  BTFSS  x2D.6
023D0:  BRA    23DA
....................            {
....................              Ack.B7 = 1;
023D2:  BSF    x29.6
....................              In.B7 = 0;
023D4:  BCF    x2B.6
....................              In2.B7 = 0;      //for auto reset
023D6:  BCF    x2D.6
....................              Output.B7 = 0;
023D8:  BCF    x1D.6
....................            }
....................            //if(In.B8 == 1 || ((Inputt.B8 ^ InputType.B8) == 1))
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
023DA:  BTFSC  x2B.7
023DC:  BRA    23E2
023DE:  BTFSS  x2D.7
023E0:  BRA    23EA
....................            {
....................              Ack.B8 = 1;
023E2:  BSF    x29.7
....................              In.B8 = 0;
023E4:  BCF    x2B.7
....................              In2.B8 = 0;      //for auto reset
023E6:  BCF    x2D.7
....................              Output.B8 = 0;
023E8:  BCF    x1D.7
....................            }
....................           // if(In.B9 == 1 || ((Inputt.B9 ^ InputType.B9) == 1))
....................            if((In.B9 == 1 )||(In2.B9 == 1 ))
023EA:  BTFSC  x2C.0
023EC:  BRA    23F2
023EE:  BTFSS  x2E.0
023F0:  BRA    23FA
....................            {
....................              Ack.B9 = 1;
023F2:  BSF    x2A.0
....................              In.B9 = 0;
023F4:  BCF    x2C.0
....................              In2.B9 = 0;      //for auto reset
023F6:  BCF    x2E.0
....................              Output.B9 = 0;
023F8:  BCF    x1E.0
....................            }
....................            //if(In.B10 == 1 || ((Inputt.B10 ^ InputType.B10) == 1))
....................            if((In.B10 == 1)||(In2.B10 == 1))
023FA:  BTFSC  x2C.1
023FC:  BRA    2402
023FE:  BTFSS  x2E.1
02400:  BRA    240A
....................            {
....................              Ack.B10 = 1;
02402:  BSF    x2A.1
....................              In.B10 = 0;
02404:  BCF    x2C.1
....................              In2.B10 = 0;      //for auto reset
02406:  BCF    x2E.1
....................              Output.B10 = 0;
02408:  BCF    x1E.1
....................            }
....................            //if(In.B11 == 1 || ((Inputt.B11 ^ InputType.B11) == 1))
....................            if((In.B11 == 1)||(In2.B11 == 1))
0240A:  BTFSC  x2C.2
0240C:  BRA    2412
0240E:  BTFSS  x2E.2
02410:  BRA    241A
....................            {
....................              Ack.B11 = 1;
02412:  BSF    x2A.2
....................              In.B11 = 0;
02414:  BCF    x2C.2
....................              In2.B11 = 0;      //for auto reset
02416:  BCF    x2E.2
....................              Output.B11 = 0;
02418:  BCF    x1E.2
....................            }
....................            //if(In.B12 == 1 || ((Inputt.B12 ^ InputType.B12) == 1))
....................            if((In.B12 == 1)||(In2.B12 == 1))
0241A:  BTFSC  x2C.3
0241C:  BRA    2422
0241E:  BTFSS  x2E.3
02420:  BRA    242A
....................            {
....................              Ack.B12 = 1;
02422:  BSF    x2A.3
....................              In.B12 = 0;
02424:  BCF    x2C.3
....................              In2.B12 = 0;      //for auto reset
02426:  BCF    x2E.3
....................              Output.B12 = 0;
02428:  BCF    x1E.3
....................            }
....................            //if(In.B13 == 1 || ((Inputt.B13 ^ InputType.B13) == 1))
....................            if((In.B13 == 1 )||(In2.B13 == 1 ))
0242A:  BTFSC  x2C.4
0242C:  BRA    2432
0242E:  BTFSS  x2E.4
02430:  BRA    243A
....................            {
....................              Ack.B13 = 1;
02432:  BSF    x2A.4
....................              In.B13 = 0;
02434:  BCF    x2C.4
....................              In2.B13 = 0;      //for auto reset
02436:  BCF    x2E.4
....................              Output.B13 = 0;
02438:  BCF    x1E.4
....................            }
....................            //if(In.B14 == 1 || ((Inputt.B14 ^ InputType.B14) == 1))
....................            if((In.B14 == 1)||(In2.B14 == 1))
0243A:  BTFSC  x2C.5
0243C:  BRA    2442
0243E:  BTFSS  x2E.5
02440:  BRA    244A
....................            {
....................              Ack.B14 = 1;
02442:  BSF    x2A.5
....................              In.B14 = 0;
02444:  BCF    x2C.5
....................              In2.B14 = 0;      //for auto reset
02446:  BCF    x2E.5
....................              Output.B14 = 0;
02448:  BCF    x1E.5
....................            }
....................            //if(In.B15 == 1 || ((Inputt.B15 ^ InputType.B15) == 1))
....................            if((In.B15 == 1)||(In2.B15 == 1))
0244A:  BTFSC  x2C.6
0244C:  BRA    2452
0244E:  BTFSS  x2E.6
02450:  BRA    245A
....................            {
....................              Ack.B15 = 1;
02452:  BSF    x2A.6
....................              In.B15 = 0;
02454:  BCF    x2C.6
....................              In2.B15 = 0;      //for auto reset
02456:  BCF    x2E.6
....................              Output.B15 = 0;
02458:  BCF    x1E.6
....................            }
....................            //if(In.B16 == 1 || ((Inputt.B16 ^ InputType.B16) == 1))
....................            if((In.B16 == 1)||(In2.B16 == 1))
0245A:  BTFSC  x2C.7
0245C:  BRA    2462
0245E:  BTFSS  x2E.7
02460:  BRA    246A
....................            {
....................              Ack.B16 = 1;
02462:  BSF    x2A.7
....................              In.B16 = 0;
02464:  BCF    x2C.7
....................              In2.B16 = 0;      //for auto reset
02466:  BCF    x2E.7
....................              Output.B16 = 0;
02468:  BCF    x1E.7
....................            }     
....................       
....................             Ack_F = 1;
0246A:  BSF    1A.7
....................             output_bit(Pbuzzer,0);   //Buzzer
0246C:  BCF    F89.4
0246E:  BCF    F92.4
....................             output_bit(Pbell,0);     //Bell
02470:  BCF    F89.3
02472:  BCF    F92.3
....................    }
02474:  BRA    2486
02476:  MOVLB  0
....................    else if(input(Pack) == 1 && Ack_F == 1)
02478:  BSF    F94.0
0247A:  BTFSS  F82.0
0247C:  BRA    2484
0247E:  BTFSS  1A.7
02480:  BRA    2484
....................    {
....................       Ack_F = 0;
02482:  BCF    1A.7
02484:  MOVLB  1
....................    }
02486:  MOVLB  0
02488:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
0248A:  BSF    F94.1
0248C:  BTFSC  F82.1
0248E:  BRA    2494
02490:  BTFSS  30.0
02492:  BRA    2498
02494:  BTFSS  1A.3
02496:  BRA    24A4
02498:  MOVLW  32
0249A:  MOVLB  1
0249C:  MOVWF  xC6
0249E:  MOVLB  0
024A0:  CALL   05B2
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
024A4:  BSF    F94.1
024A6:  BTFSC  F82.1
024A8:  BRA    24AE
024AA:  BTFSS  30.0
024AC:  BRA    24B2
024AE:  BTFSS  1A.3
024B0:  BRA    263C
....................     {
....................        AutoResetFlag = 0;
024B2:  BCF    1A.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
024B4:  MOVLW  00
024B6:  MOVLB  1
024B8:  BTFSC  x1B.0
024BA:  MOVLW  01
024BC:  MOVWF  xBF
024BE:  MOVLW  00
024C0:  BTFSC  x1F.0
024C2:  MOVLW  01
024C4:  XORWF  xBF,W
024C6:  BNZ   24CE
024C8:  BTFSC  x2B.0
024CA:  BRA    24CE
024CC:  BSF    x1D.0
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
024CE:  MOVLW  00
024D0:  BTFSC  x1B.1
024D2:  MOVLW  01
024D4:  MOVWF  xBF
024D6:  MOVLW  00
024D8:  BTFSC  x1F.1
024DA:  MOVLW  01
024DC:  XORWF  xBF,W
024DE:  BNZ   24E6
024E0:  BTFSC  x2B.1
024E2:  BRA    24E6
024E4:  BSF    x1D.1
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
024E6:  MOVLW  00
024E8:  BTFSC  x1B.2
024EA:  MOVLW  01
024EC:  MOVWF  xBF
024EE:  MOVLW  00
024F0:  BTFSC  x1F.2
024F2:  MOVLW  01
024F4:  XORWF  xBF,W
024F6:  BNZ   24FE
024F8:  BTFSC  x2B.2
024FA:  BRA    24FE
024FC:  BSF    x1D.2
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
024FE:  MOVLW  00
02500:  BTFSC  x1B.3
02502:  MOVLW  01
02504:  MOVWF  xBF
02506:  MOVLW  00
02508:  BTFSC  x1F.3
0250A:  MOVLW  01
0250C:  XORWF  xBF,W
0250E:  BNZ   2516
02510:  BTFSC  x2B.3
02512:  BRA    2516
02514:  BSF    x1D.3
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
02516:  MOVLW  00
02518:  BTFSC  x1B.4
0251A:  MOVLW  01
0251C:  MOVWF  xBF
0251E:  MOVLW  00
02520:  BTFSC  x1F.4
02522:  MOVLW  01
02524:  XORWF  xBF,W
02526:  BNZ   252E
02528:  BTFSC  x2B.4
0252A:  BRA    252E
0252C:  BSF    x1D.4
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
0252E:  MOVLW  00
02530:  BTFSC  x1B.5
02532:  MOVLW  01
02534:  MOVWF  xBF
02536:  MOVLW  00
02538:  BTFSC  x1F.5
0253A:  MOVLW  01
0253C:  XORWF  xBF,W
0253E:  BNZ   2546
02540:  BTFSC  x2B.5
02542:  BRA    2546
02544:  BSF    x1D.5
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
02546:  MOVLW  00
02548:  BTFSC  x1B.6
0254A:  MOVLW  01
0254C:  MOVWF  xBF
0254E:  MOVLW  00
02550:  BTFSC  x1F.6
02552:  MOVLW  01
02554:  XORWF  xBF,W
02556:  BNZ   255E
02558:  BTFSC  x2B.6
0255A:  BRA    255E
0255C:  BSF    x1D.6
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
0255E:  MOVLW  00
02560:  BTFSC  x1B.7
02562:  MOVLW  01
02564:  MOVWF  xBF
02566:  MOVLW  00
02568:  BTFSC  x1F.7
0256A:  MOVLW  01
0256C:  XORWF  xBF,W
0256E:  BNZ   2576
02570:  BTFSC  x2B.7
02572:  BRA    2576
02574:  BSF    x1D.7
....................        if((Inputt.B9 ^ InputType.B9) == 0 && In.B9 == 0) Output.B9 = 1;
02576:  MOVLW  00
02578:  BTFSC  x1C.0
0257A:  MOVLW  01
0257C:  MOVWF  xBF
0257E:  MOVLW  00
02580:  BTFSC  x20.0
02582:  MOVLW  01
02584:  XORWF  xBF,W
02586:  BNZ   258E
02588:  BTFSC  x2C.0
0258A:  BRA    258E
0258C:  BSF    x1E.0
....................        if((Inputt.B10 ^ InputType.B10) == 0 && In.B10 == 0) Output.B10 = 1;
0258E:  MOVLW  00
02590:  BTFSC  x1C.1
02592:  MOVLW  01
02594:  MOVWF  xBF
02596:  MOVLW  00
02598:  BTFSC  x20.1
0259A:  MOVLW  01
0259C:  XORWF  xBF,W
0259E:  BNZ   25A6
025A0:  BTFSC  x2C.1
025A2:  BRA    25A6
025A4:  BSF    x1E.1
....................        if((Inputt.B11 ^ InputType.B11) == 0 && In.B11 == 0) Output.B11 = 1;
025A6:  MOVLW  00
025A8:  BTFSC  x1C.2
025AA:  MOVLW  01
025AC:  MOVWF  xBF
025AE:  MOVLW  00
025B0:  BTFSC  x20.2
025B2:  MOVLW  01
025B4:  XORWF  xBF,W
025B6:  BNZ   25BE
025B8:  BTFSC  x2C.2
025BA:  BRA    25BE
025BC:  BSF    x1E.2
....................        if((Inputt.B12 ^ InputType.B12) == 0 && In.B12 == 0) Output.B12 = 1;
025BE:  MOVLW  00
025C0:  BTFSC  x1C.3
025C2:  MOVLW  01
025C4:  MOVWF  xBF
025C6:  MOVLW  00
025C8:  BTFSC  x20.3
025CA:  MOVLW  01
025CC:  XORWF  xBF,W
025CE:  BNZ   25D6
025D0:  BTFSC  x2C.3
025D2:  BRA    25D6
025D4:  BSF    x1E.3
....................        if((Inputt.B13 ^ InputType.B13) == 0 && In.B13 == 0) Output.B13 = 1;
025D6:  MOVLW  00
025D8:  BTFSC  x1C.4
025DA:  MOVLW  01
025DC:  MOVWF  xBF
025DE:  MOVLW  00
025E0:  BTFSC  x20.4
025E2:  MOVLW  01
025E4:  XORWF  xBF,W
025E6:  BNZ   25EE
025E8:  BTFSC  x2C.4
025EA:  BRA    25EE
025EC:  BSF    x1E.4
....................        if((Inputt.B14 ^ InputType.B14) == 0 && In.B14 == 0) Output.B14 = 1;
025EE:  MOVLW  00
025F0:  BTFSC  x1C.5
025F2:  MOVLW  01
025F4:  MOVWF  xBF
025F6:  MOVLW  00
025F8:  BTFSC  x20.5
025FA:  MOVLW  01
025FC:  XORWF  xBF,W
025FE:  BNZ   2606
02600:  BTFSC  x2C.5
02602:  BRA    2606
02604:  BSF    x1E.5
....................        if((Inputt.B15 ^ InputType.B15) == 0 && In.B15 == 0) Output.B15 = 1;
02606:  MOVLW  00
02608:  BTFSC  x1C.6
0260A:  MOVLW  01
0260C:  MOVWF  xBF
0260E:  MOVLW  00
02610:  BTFSC  x20.6
02612:  MOVLW  01
02614:  XORWF  xBF,W
02616:  BNZ   261E
02618:  BTFSC  x2C.6
0261A:  BRA    261E
0261C:  BSF    x1E.6
....................        if((Inputt.B16 ^ InputType.B16) == 0 && In.B16 == 0) Output.B16 = 1;
0261E:  MOVLW  00
02620:  BTFSC  x1C.7
02622:  MOVLW  01
02624:  MOVWF  xBF
02626:  MOVLW  00
02628:  BTFSC  x20.7
0262A:  MOVLW  01
0262C:  XORWF  xBF,W
0262E:  BNZ   2636
02630:  BTFSC  x2C.7
02632:  BRA    2636
02634:  BSF    x1E.7
....................        /*
....................        if((Inputt.B17 ^ InputType.B17) == 0 && In.B17 == 0) Output.B17 = 1;
....................        if((Inputt.B18 ^ InputType.B18) == 0 && In.B18 == 0) Output.B18 = 1;
....................        if((Inputt.B19 ^ InputType.B19) == 0 && In.B19 == 0) Output.B19 = 1;
....................        if((Inputt.B20 ^ InputType.B20) == 0 && In.B20 == 0) Output.B20 = 1;
....................        */
.................... 
....................        Reset_F = 1;
02636:  BSF    30.0
....................     }
02638:  BRA    264A
0263A:  MOVLB  0
....................     else if(input(Preset) == 1 && Reset_F == 1)
0263C:  BSF    F94.1
0263E:  BTFSS  F82.1
02640:  BRA    2648
02642:  BTFSS  30.0
02644:  BRA    2648
....................     {
....................        Reset_F = 0;
02646:  BCF    30.0
02648:  MOVLB  1
....................     }
0264A:  MOVLB  0
0264C:  RETURN 0
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////// Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
03FAC:  MOVLB  1
03FAE:  DECFSZ xC6,W
03FB0:  BRA    436A
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
03FB2:  MOVLW  00
03FB4:  BTFSC  x2B.0
03FB6:  MOVLW  01
03FB8:  MOVWF  xC9
03FBA:  MOVLW  00
03FBC:  BTFSC  x2D.0
03FBE:  MOVLW  01
03FC0:  IORWF  xC9,W
03FC2:  MOVWF  xC8
03FC4:  MOVLW  00
03FC6:  BTFSS  x29.0
03FC8:  MOVLW  01
03FCA:  ANDWF  xC8,F
03FCC:  MOVLW  00
03FCE:  BTFSC  x23.0
03FD0:  MOVLW  01
03FD2:  MOVWF  xCB
03FD4:  MOVLW  00
03FD6:  BTFSC  x25.0
03FD8:  MOVLW  01
03FDA:  IORWF  xCB,W
03FDC:  ANDWF  xC8,W
03FDE:  BCF    xC7.0
03FE0:  BTFSC  FE8.0
03FE2:  BSF    xC7.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
03FE4:  MOVLW  00
03FE6:  BTFSC  xC7.0
03FE8:  MOVLW  01
03FEA:  MOVWF  xC8
03FEC:  MOVLW  00
03FEE:  BTFSC  x2B.1
03FF0:  MOVLW  01
03FF2:  MOVWF  xCA
03FF4:  MOVLW  00
03FF6:  BTFSC  x2D.1
03FF8:  MOVLW  01
03FFA:  IORWF  xCA,W
03FFC:  MOVWF  xC9
03FFE:  MOVLW  00
04000:  BTFSS  x29.1
04002:  MOVLW  01
04004:  ANDWF  xC9,F
04006:  MOVLW  00
04008:  BTFSC  x23.1
0400A:  MOVLW  01
0400C:  MOVWF  xCC
0400E:  MOVLW  00
04010:  BTFSC  x25.1
04012:  MOVLW  01
04014:  IORWF  xCC,W
04016:  ANDWF  xC9,W
04018:  IORWF  xC8,W
0401A:  BCF    xC7.0
0401C:  BTFSC  FE8.0
0401E:  BSF    xC7.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
04020:  MOVLW  00
04022:  BTFSC  xC7.0
04024:  MOVLW  01
04026:  MOVWF  xC8
04028:  MOVLW  00
0402A:  BTFSC  x2B.2
0402C:  MOVLW  01
0402E:  MOVWF  xCA
04030:  MOVLW  00
04032:  BTFSC  x2D.2
04034:  MOVLW  01
04036:  IORWF  xCA,W
04038:  MOVWF  xC9
0403A:  MOVLW  00
0403C:  BTFSS  x29.2
0403E:  MOVLW  01
04040:  ANDWF  xC9,F
04042:  MOVLW  00
04044:  BTFSC  x23.2
04046:  MOVLW  01
04048:  MOVWF  xCC
0404A:  MOVLW  00
0404C:  BTFSC  x25.2
0404E:  MOVLW  01
04050:  IORWF  xCC,W
04052:  ANDWF  xC9,W
04054:  IORWF  xC8,W
04056:  BCF    xC7.0
04058:  BTFSC  FE8.0
0405A:  BSF    xC7.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
0405C:  MOVLW  00
0405E:  BTFSC  xC7.0
04060:  MOVLW  01
04062:  MOVWF  xC8
04064:  MOVLW  00
04066:  BTFSC  x2B.3
04068:  MOVLW  01
0406A:  MOVWF  xCA
0406C:  MOVLW  00
0406E:  BTFSC  x2D.3
04070:  MOVLW  01
04072:  IORWF  xCA,W
04074:  MOVWF  xC9
04076:  MOVLW  00
04078:  BTFSS  x29.3
0407A:  MOVLW  01
0407C:  ANDWF  xC9,F
0407E:  MOVLW  00
04080:  BTFSC  x23.3
04082:  MOVLW  01
04084:  MOVWF  xCC
04086:  MOVLW  00
04088:  BTFSC  x25.3
0408A:  MOVLW  01
0408C:  IORWF  xCC,W
0408E:  ANDWF  xC9,W
04090:  IORWF  xC8,W
04092:  BCF    xC7.0
04094:  BTFSC  FE8.0
04096:  BSF    xC7.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
04098:  MOVLW  00
0409A:  BTFSC  xC7.0
0409C:  MOVLW  01
0409E:  MOVWF  xC8
040A0:  MOVLW  00
040A2:  BTFSC  x2B.4
040A4:  MOVLW  01
040A6:  MOVWF  xCA
040A8:  MOVLW  00
040AA:  BTFSC  x2D.4
040AC:  MOVLW  01
040AE:  IORWF  xCA,W
040B0:  MOVWF  xC9
040B2:  MOVLW  00
040B4:  BTFSS  x29.4
040B6:  MOVLW  01
040B8:  ANDWF  xC9,F
040BA:  MOVLW  00
040BC:  BTFSC  x23.4
040BE:  MOVLW  01
040C0:  MOVWF  xCC
040C2:  MOVLW  00
040C4:  BTFSC  x25.4
040C6:  MOVLW  01
040C8:  IORWF  xCC,W
040CA:  ANDWF  xC9,W
040CC:  IORWF  xC8,W
040CE:  BCF    xC7.0
040D0:  BTFSC  FE8.0
040D2:  BSF    xC7.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
040D4:  MOVLW  00
040D6:  BTFSC  xC7.0
040D8:  MOVLW  01
040DA:  MOVWF  xC8
040DC:  MOVLW  00
040DE:  BTFSC  x2B.5
040E0:  MOVLW  01
040E2:  MOVWF  xCA
040E4:  MOVLW  00
040E6:  BTFSC  x2D.5
040E8:  MOVLW  01
040EA:  IORWF  xCA,W
040EC:  MOVWF  xC9
040EE:  MOVLW  00
040F0:  BTFSS  x29.5
040F2:  MOVLW  01
040F4:  ANDWF  xC9,F
040F6:  MOVLW  00
040F8:  BTFSC  x23.5
040FA:  MOVLW  01
040FC:  MOVWF  xCC
040FE:  MOVLW  00
04100:  BTFSC  x25.5
04102:  MOVLW  01
04104:  IORWF  xCC,W
04106:  ANDWF  xC9,W
04108:  IORWF  xC8,W
0410A:  BCF    xC7.0
0410C:  BTFSC  FE8.0
0410E:  BSF    xC7.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
04110:  MOVLW  00
04112:  BTFSC  xC7.0
04114:  MOVLW  01
04116:  MOVWF  xC8
04118:  MOVLW  00
0411A:  BTFSC  x2B.6
0411C:  MOVLW  01
0411E:  MOVWF  xCA
04120:  MOVLW  00
04122:  BTFSC  x2D.6
04124:  MOVLW  01
04126:  IORWF  xCA,W
04128:  MOVWF  xC9
0412A:  MOVLW  00
0412C:  BTFSS  x29.6
0412E:  MOVLW  01
04130:  ANDWF  xC9,F
04132:  MOVLW  00
04134:  BTFSC  x23.6
04136:  MOVLW  01
04138:  MOVWF  xCC
0413A:  MOVLW  00
0413C:  BTFSC  x25.6
0413E:  MOVLW  01
04140:  IORWF  xCC,W
04142:  ANDWF  xC9,W
04144:  IORWF  xC8,W
04146:  BCF    xC7.0
04148:  BTFSC  FE8.0
0414A:  BSF    xC7.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
0414C:  MOVLW  00
0414E:  BTFSC  xC7.0
04150:  MOVLW  01
04152:  MOVWF  xC8
04154:  MOVLW  00
04156:  BTFSC  x2B.7
04158:  MOVLW  01
0415A:  MOVWF  xCA
0415C:  MOVLW  00
0415E:  BTFSC  x2D.7
04160:  MOVLW  01
04162:  IORWF  xCA,W
04164:  MOVWF  xC9
04166:  MOVLW  00
04168:  BTFSS  x29.7
0416A:  MOVLW  01
0416C:  ANDWF  xC9,F
0416E:  MOVLW  00
04170:  BTFSC  x23.7
04172:  MOVLW  01
04174:  MOVWF  xCC
04176:  MOVLW  00
04178:  BTFSC  x25.7
0417A:  MOVLW  01
0417C:  IORWF  xCC,W
0417E:  ANDWF  xC9,W
04180:  IORWF  xC8,W
04182:  BCF    xC7.0
04184:  BTFSC  FE8.0
04186:  BSF    xC7.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (OutputType.B9 | OutputBoth.B9));
04188:  MOVLW  00
0418A:  BTFSC  xC7.0
0418C:  MOVLW  01
0418E:  MOVWF  xC8
04190:  MOVLW  00
04192:  BTFSC  x2C.0
04194:  MOVLW  01
04196:  MOVWF  xCA
04198:  MOVLW  00
0419A:  BTFSC  x2E.0
0419C:  MOVLW  01
0419E:  IORWF  xCA,W
041A0:  MOVWF  xC9
041A2:  MOVLW  00
041A4:  BTFSS  x2A.0
041A6:  MOVLW  01
041A8:  ANDWF  xC9,F
041AA:  MOVLW  00
041AC:  BTFSC  x24.0
041AE:  MOVLW  01
041B0:  MOVWF  xCC
041B2:  MOVLW  00
041B4:  BTFSC  x26.0
041B6:  MOVLW  01
041B8:  IORWF  xCC,W
041BA:  ANDWF  xC9,W
041BC:  IORWF  xC8,W
041BE:  BCF    xC7.0
041C0:  BTFSC  FE8.0
041C2:  BSF    xC7.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (OutputType.B10 | OutputBoth.B10));
041C4:  MOVLW  00
041C6:  BTFSC  xC7.0
041C8:  MOVLW  01
041CA:  MOVWF  xC8
041CC:  MOVLW  00
041CE:  BTFSC  x2C.1
041D0:  MOVLW  01
041D2:  MOVWF  xCA
041D4:  MOVLW  00
041D6:  BTFSC  x2E.1
041D8:  MOVLW  01
041DA:  IORWF  xCA,W
041DC:  MOVWF  xC9
041DE:  MOVLW  00
041E0:  BTFSS  x2A.1
041E2:  MOVLW  01
041E4:  ANDWF  xC9,F
041E6:  MOVLW  00
041E8:  BTFSC  x24.1
041EA:  MOVLW  01
041EC:  MOVWF  xCC
041EE:  MOVLW  00
041F0:  BTFSC  x26.1
041F2:  MOVLW  01
041F4:  IORWF  xCC,W
041F6:  ANDWF  xC9,W
041F8:  IORWF  xC8,W
041FA:  BCF    xC7.0
041FC:  BTFSC  FE8.0
041FE:  BSF    xC7.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (OutputType.B11 | OutputBoth.B11));
04200:  MOVLW  00
04202:  BTFSC  xC7.0
04204:  MOVLW  01
04206:  MOVWF  xC8
04208:  MOVLW  00
0420A:  BTFSC  x2C.2
0420C:  MOVLW  01
0420E:  MOVWF  xCA
04210:  MOVLW  00
04212:  BTFSC  x2E.2
04214:  MOVLW  01
04216:  IORWF  xCA,W
04218:  MOVWF  xC9
0421A:  MOVLW  00
0421C:  BTFSS  x2A.2
0421E:  MOVLW  01
04220:  ANDWF  xC9,F
04222:  MOVLW  00
04224:  BTFSC  x24.2
04226:  MOVLW  01
04228:  MOVWF  xCC
0422A:  MOVLW  00
0422C:  BTFSC  x26.2
0422E:  MOVLW  01
04230:  IORWF  xCC,W
04232:  ANDWF  xC9,W
04234:  IORWF  xC8,W
04236:  BCF    xC7.0
04238:  BTFSC  FE8.0
0423A:  BSF    xC7.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (OutputType.B12 | OutputBoth.B12));
0423C:  MOVLW  00
0423E:  BTFSC  xC7.0
04240:  MOVLW  01
04242:  MOVWF  xC8
04244:  MOVLW  00
04246:  BTFSC  x2C.3
04248:  MOVLW  01
0424A:  MOVWF  xCA
0424C:  MOVLW  00
0424E:  BTFSC  x2E.3
04250:  MOVLW  01
04252:  IORWF  xCA,W
04254:  MOVWF  xC9
04256:  MOVLW  00
04258:  BTFSS  x2A.3
0425A:  MOVLW  01
0425C:  ANDWF  xC9,F
0425E:  MOVLW  00
04260:  BTFSC  x24.3
04262:  MOVLW  01
04264:  MOVWF  xCC
04266:  MOVLW  00
04268:  BTFSC  x26.3
0426A:  MOVLW  01
0426C:  IORWF  xCC,W
0426E:  ANDWF  xC9,W
04270:  IORWF  xC8,W
04272:  BCF    xC7.0
04274:  BTFSC  FE8.0
04276:  BSF    xC7.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (OutputType.B13 | OutputBoth.B13));
04278:  MOVLW  00
0427A:  BTFSC  xC7.0
0427C:  MOVLW  01
0427E:  MOVWF  xC8
04280:  MOVLW  00
04282:  BTFSC  x2C.4
04284:  MOVLW  01
04286:  MOVWF  xCA
04288:  MOVLW  00
0428A:  BTFSC  x2E.4
0428C:  MOVLW  01
0428E:  IORWF  xCA,W
04290:  MOVWF  xC9
04292:  MOVLW  00
04294:  BTFSS  x2A.4
04296:  MOVLW  01
04298:  ANDWF  xC9,F
0429A:  MOVLW  00
0429C:  BTFSC  x24.4
0429E:  MOVLW  01
042A0:  MOVWF  xCC
042A2:  MOVLW  00
042A4:  BTFSC  x26.4
042A6:  MOVLW  01
042A8:  IORWF  xCC,W
042AA:  ANDWF  xC9,W
042AC:  IORWF  xC8,W
042AE:  BCF    xC7.0
042B0:  BTFSC  FE8.0
042B2:  BSF    xC7.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (OutputType.B14 | OutputBoth.B14));
042B4:  MOVLW  00
042B6:  BTFSC  xC7.0
042B8:  MOVLW  01
042BA:  MOVWF  xC8
042BC:  MOVLW  00
042BE:  BTFSC  x2C.5
042C0:  MOVLW  01
042C2:  MOVWF  xCA
042C4:  MOVLW  00
042C6:  BTFSC  x2E.5
042C8:  MOVLW  01
042CA:  IORWF  xCA,W
042CC:  MOVWF  xC9
042CE:  MOVLW  00
042D0:  BTFSS  x2A.5
042D2:  MOVLW  01
042D4:  ANDWF  xC9,F
042D6:  MOVLW  00
042D8:  BTFSC  x24.5
042DA:  MOVLW  01
042DC:  MOVWF  xCC
042DE:  MOVLW  00
042E0:  BTFSC  x26.5
042E2:  MOVLW  01
042E4:  IORWF  xCC,W
042E6:  ANDWF  xC9,W
042E8:  IORWF  xC8,W
042EA:  BCF    xC7.0
042EC:  BTFSC  FE8.0
042EE:  BSF    xC7.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (OutputType.B15 | OutputBoth.B15));
042F0:  MOVLW  00
042F2:  BTFSC  xC7.0
042F4:  MOVLW  01
042F6:  MOVWF  xC8
042F8:  MOVLW  00
042FA:  BTFSC  x2C.6
042FC:  MOVLW  01
042FE:  MOVWF  xCA
04300:  MOVLW  00
04302:  BTFSC  x2E.6
04304:  MOVLW  01
04306:  IORWF  xCA,W
04308:  MOVWF  xC9
0430A:  MOVLW  00
0430C:  BTFSS  x2A.6
0430E:  MOVLW  01
04310:  ANDWF  xC9,F
04312:  MOVLW  00
04314:  BTFSC  x24.6
04316:  MOVLW  01
04318:  MOVWF  xCC
0431A:  MOVLW  00
0431C:  BTFSC  x26.6
0431E:  MOVLW  01
04320:  IORWF  xCC,W
04322:  ANDWF  xC9,W
04324:  IORWF  xC8,W
04326:  BCF    xC7.0
04328:  BTFSC  FE8.0
0432A:  BSF    xC7.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (OutputType.B16 | OutputBoth.B16));
0432C:  MOVLW  00
0432E:  BTFSC  xC7.0
04330:  MOVLW  01
04332:  MOVWF  xC8
04334:  MOVLW  00
04336:  BTFSC  x2C.7
04338:  MOVLW  01
0433A:  MOVWF  xCA
0433C:  MOVLW  00
0433E:  BTFSC  x2E.7
04340:  MOVLW  01
04342:  IORWF  xCA,W
04344:  MOVWF  xC9
04346:  MOVLW  00
04348:  BTFSS  x2A.7
0434A:  MOVLW  01
0434C:  ANDWF  xC9,F
0434E:  MOVLW  00
04350:  BTFSC  x24.7
04352:  MOVLW  01
04354:  MOVWF  xCC
04356:  MOVLW  00
04358:  BTFSC  x26.7
0435A:  MOVLW  01
0435C:  IORWF  xCC,W
0435E:  ANDWF  xC9,W
04360:  IORWF  xC8,W
04362:  BCF    xC7.0
04364:  BTFSC  FE8.0
04366:  BSF    xC7.0
....................       /*
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (OutputType.B17 | OutputBoth.B17));
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (OutputType.B18 | OutputBoth.B18));
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (OutputType.B19 | OutputBoth.B19));
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (OutputType.B20 | OutputBoth.B20));
....................       */
....................      
....................    }
04368:  BRA    4728
....................    else if(DatType == 0x02)             //Bell
0436A:  MOVF   xC6,W
0436C:  SUBLW  02
0436E:  BTFSS  FD8.2
04370:  BRA    4728
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
04372:  MOVLW  00
04374:  BTFSC  x2B.0
04376:  MOVLW  01
04378:  MOVWF  xC9
0437A:  MOVLW  00
0437C:  BTFSC  x2D.0
0437E:  MOVLW  01
04380:  IORWF  xC9,W
04382:  MOVWF  xC8
04384:  MOVLW  00
04386:  BTFSS  x29.0
04388:  MOVLW  01
0438A:  ANDWF  xC8,F
0438C:  MOVLW  00
0438E:  BTFSS  x23.0
04390:  MOVLW  01
04392:  MOVWF  xCB
04394:  MOVLW  00
04396:  BTFSC  x25.0
04398:  MOVLW  01
0439A:  IORWF  xCB,W
0439C:  ANDWF  xC8,W
0439E:  BCF    xC7.0
043A0:  BTFSC  FE8.0
043A2:  BSF    xC7.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
043A4:  MOVLW  00
043A6:  BTFSC  xC7.0
043A8:  MOVLW  01
043AA:  MOVWF  xC8
043AC:  MOVLW  00
043AE:  BTFSC  x2B.1
043B0:  MOVLW  01
043B2:  MOVWF  xCA
043B4:  MOVLW  00
043B6:  BTFSC  x2D.1
043B8:  MOVLW  01
043BA:  IORWF  xCA,W
043BC:  MOVWF  xC9
043BE:  MOVLW  00
043C0:  BTFSS  x29.1
043C2:  MOVLW  01
043C4:  ANDWF  xC9,F
043C6:  MOVLW  00
043C8:  BTFSS  x23.1
043CA:  MOVLW  01
043CC:  MOVWF  xCC
043CE:  MOVLW  00
043D0:  BTFSC  x25.1
043D2:  MOVLW  01
043D4:  IORWF  xCC,W
043D6:  ANDWF  xC9,W
043D8:  IORWF  xC8,W
043DA:  BCF    xC7.0
043DC:  BTFSC  FE8.0
043DE:  BSF    xC7.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
043E0:  MOVLW  00
043E2:  BTFSC  xC7.0
043E4:  MOVLW  01
043E6:  MOVWF  xC8
043E8:  MOVLW  00
043EA:  BTFSC  x2B.2
043EC:  MOVLW  01
043EE:  MOVWF  xCA
043F0:  MOVLW  00
043F2:  BTFSC  x2D.2
043F4:  MOVLW  01
043F6:  IORWF  xCA,W
043F8:  MOVWF  xC9
043FA:  MOVLW  00
043FC:  BTFSS  x29.2
043FE:  MOVLW  01
04400:  ANDWF  xC9,F
04402:  MOVLW  00
04404:  BTFSS  x23.2
04406:  MOVLW  01
04408:  MOVWF  xCC
0440A:  MOVLW  00
0440C:  BTFSC  x25.2
0440E:  MOVLW  01
04410:  IORWF  xCC,W
04412:  ANDWF  xC9,W
04414:  IORWF  xC8,W
04416:  BCF    xC7.0
04418:  BTFSC  FE8.0
0441A:  BSF    xC7.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
0441C:  MOVLW  00
0441E:  BTFSC  xC7.0
04420:  MOVLW  01
04422:  MOVWF  xC8
04424:  MOVLW  00
04426:  BTFSC  x2B.3
04428:  MOVLW  01
0442A:  MOVWF  xCA
0442C:  MOVLW  00
0442E:  BTFSC  x2D.3
04430:  MOVLW  01
04432:  IORWF  xCA,W
04434:  MOVWF  xC9
04436:  MOVLW  00
04438:  BTFSS  x29.3
0443A:  MOVLW  01
0443C:  ANDWF  xC9,F
0443E:  MOVLW  00
04440:  BTFSS  x23.3
04442:  MOVLW  01
04444:  MOVWF  xCC
04446:  MOVLW  00
04448:  BTFSC  x25.3
0444A:  MOVLW  01
0444C:  IORWF  xCC,W
0444E:  ANDWF  xC9,W
04450:  IORWF  xC8,W
04452:  BCF    xC7.0
04454:  BTFSC  FE8.0
04456:  BSF    xC7.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
04458:  MOVLW  00
0445A:  BTFSC  xC7.0
0445C:  MOVLW  01
0445E:  MOVWF  xC8
04460:  MOVLW  00
04462:  BTFSC  x2B.4
04464:  MOVLW  01
04466:  MOVWF  xCA
04468:  MOVLW  00
0446A:  BTFSC  x2D.4
0446C:  MOVLW  01
0446E:  IORWF  xCA,W
04470:  MOVWF  xC9
04472:  MOVLW  00
04474:  BTFSS  x29.4
04476:  MOVLW  01
04478:  ANDWF  xC9,F
0447A:  MOVLW  00
0447C:  BTFSS  x23.4
0447E:  MOVLW  01
04480:  MOVWF  xCC
04482:  MOVLW  00
04484:  BTFSC  x25.4
04486:  MOVLW  01
04488:  IORWF  xCC,W
0448A:  ANDWF  xC9,W
0448C:  IORWF  xC8,W
0448E:  BCF    xC7.0
04490:  BTFSC  FE8.0
04492:  BSF    xC7.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
04494:  MOVLW  00
04496:  BTFSC  xC7.0
04498:  MOVLW  01
0449A:  MOVWF  xC8
0449C:  MOVLW  00
0449E:  BTFSC  x2B.5
044A0:  MOVLW  01
044A2:  MOVWF  xCA
044A4:  MOVLW  00
044A6:  BTFSC  x2D.5
044A8:  MOVLW  01
044AA:  IORWF  xCA,W
044AC:  MOVWF  xC9
044AE:  MOVLW  00
044B0:  BTFSS  x29.5
044B2:  MOVLW  01
044B4:  ANDWF  xC9,F
044B6:  MOVLW  00
044B8:  BTFSS  x23.5
044BA:  MOVLW  01
044BC:  MOVWF  xCC
044BE:  MOVLW  00
044C0:  BTFSC  x25.5
044C2:  MOVLW  01
044C4:  IORWF  xCC,W
044C6:  ANDWF  xC9,W
044C8:  IORWF  xC8,W
044CA:  BCF    xC7.0
044CC:  BTFSC  FE8.0
044CE:  BSF    xC7.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
044D0:  MOVLW  00
044D2:  BTFSC  xC7.0
044D4:  MOVLW  01
044D6:  MOVWF  xC8
044D8:  MOVLW  00
044DA:  BTFSC  x2B.6
044DC:  MOVLW  01
044DE:  MOVWF  xCA
044E0:  MOVLW  00
044E2:  BTFSC  x2D.6
044E4:  MOVLW  01
044E6:  IORWF  xCA,W
044E8:  MOVWF  xC9
044EA:  MOVLW  00
044EC:  BTFSS  x29.6
044EE:  MOVLW  01
044F0:  ANDWF  xC9,F
044F2:  MOVLW  00
044F4:  BTFSS  x23.6
044F6:  MOVLW  01
044F8:  MOVWF  xCC
044FA:  MOVLW  00
044FC:  BTFSC  x25.6
044FE:  MOVLW  01
04500:  IORWF  xCC,W
04502:  ANDWF  xC9,W
04504:  IORWF  xC8,W
04506:  BCF    xC7.0
04508:  BTFSC  FE8.0
0450A:  BSF    xC7.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
0450C:  MOVLW  00
0450E:  BTFSC  xC7.0
04510:  MOVLW  01
04512:  MOVWF  xC8
04514:  MOVLW  00
04516:  BTFSC  x2B.7
04518:  MOVLW  01
0451A:  MOVWF  xCA
0451C:  MOVLW  00
0451E:  BTFSC  x2D.7
04520:  MOVLW  01
04522:  IORWF  xCA,W
04524:  MOVWF  xC9
04526:  MOVLW  00
04528:  BTFSS  x29.7
0452A:  MOVLW  01
0452C:  ANDWF  xC9,F
0452E:  MOVLW  00
04530:  BTFSS  x23.7
04532:  MOVLW  01
04534:  MOVWF  xCC
04536:  MOVLW  00
04538:  BTFSC  x25.7
0453A:  MOVLW  01
0453C:  IORWF  xCC,W
0453E:  ANDWF  xC9,W
04540:  IORWF  xC8,W
04542:  BCF    xC7.0
04544:  BTFSC  FE8.0
04546:  BSF    xC7.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (~OutputType.B9 | OutputBoth.B9));
04548:  MOVLW  00
0454A:  BTFSC  xC7.0
0454C:  MOVLW  01
0454E:  MOVWF  xC8
04550:  MOVLW  00
04552:  BTFSC  x2C.0
04554:  MOVLW  01
04556:  MOVWF  xCA
04558:  MOVLW  00
0455A:  BTFSC  x2E.0
0455C:  MOVLW  01
0455E:  IORWF  xCA,W
04560:  MOVWF  xC9
04562:  MOVLW  00
04564:  BTFSS  x2A.0
04566:  MOVLW  01
04568:  ANDWF  xC9,F
0456A:  MOVLW  00
0456C:  BTFSS  x24.0
0456E:  MOVLW  01
04570:  MOVWF  xCC
04572:  MOVLW  00
04574:  BTFSC  x26.0
04576:  MOVLW  01
04578:  IORWF  xCC,W
0457A:  ANDWF  xC9,W
0457C:  IORWF  xC8,W
0457E:  BCF    xC7.0
04580:  BTFSC  FE8.0
04582:  BSF    xC7.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (~OutputType.B10 | OutputBoth.B10));
04584:  MOVLW  00
04586:  BTFSC  xC7.0
04588:  MOVLW  01
0458A:  MOVWF  xC8
0458C:  MOVLW  00
0458E:  BTFSC  x2C.1
04590:  MOVLW  01
04592:  MOVWF  xCA
04594:  MOVLW  00
04596:  BTFSC  x2E.1
04598:  MOVLW  01
0459A:  IORWF  xCA,W
0459C:  MOVWF  xC9
0459E:  MOVLW  00
045A0:  BTFSS  x2A.1
045A2:  MOVLW  01
045A4:  ANDWF  xC9,F
045A6:  MOVLW  00
045A8:  BTFSS  x24.1
045AA:  MOVLW  01
045AC:  MOVWF  xCC
045AE:  MOVLW  00
045B0:  BTFSC  x26.1
045B2:  MOVLW  01
045B4:  IORWF  xCC,W
045B6:  ANDWF  xC9,W
045B8:  IORWF  xC8,W
045BA:  BCF    xC7.0
045BC:  BTFSC  FE8.0
045BE:  BSF    xC7.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (~OutputType.B11 | OutputBoth.B11));
045C0:  MOVLW  00
045C2:  BTFSC  xC7.0
045C4:  MOVLW  01
045C6:  MOVWF  xC8
045C8:  MOVLW  00
045CA:  BTFSC  x2C.2
045CC:  MOVLW  01
045CE:  MOVWF  xCA
045D0:  MOVLW  00
045D2:  BTFSC  x2E.2
045D4:  MOVLW  01
045D6:  IORWF  xCA,W
045D8:  MOVWF  xC9
045DA:  MOVLW  00
045DC:  BTFSS  x2A.2
045DE:  MOVLW  01
045E0:  ANDWF  xC9,F
045E2:  MOVLW  00
045E4:  BTFSS  x24.2
045E6:  MOVLW  01
045E8:  MOVWF  xCC
045EA:  MOVLW  00
045EC:  BTFSC  x26.2
045EE:  MOVLW  01
045F0:  IORWF  xCC,W
045F2:  ANDWF  xC9,W
045F4:  IORWF  xC8,W
045F6:  BCF    xC7.0
045F8:  BTFSC  FE8.0
045FA:  BSF    xC7.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (~OutputType.B12 | OutputBoth.B12));
045FC:  MOVLW  00
045FE:  BTFSC  xC7.0
04600:  MOVLW  01
04602:  MOVWF  xC8
04604:  MOVLW  00
04606:  BTFSC  x2C.3
04608:  MOVLW  01
0460A:  MOVWF  xCA
0460C:  MOVLW  00
0460E:  BTFSC  x2E.3
04610:  MOVLW  01
04612:  IORWF  xCA,W
04614:  MOVWF  xC9
04616:  MOVLW  00
04618:  BTFSS  x2A.3
0461A:  MOVLW  01
0461C:  ANDWF  xC9,F
0461E:  MOVLW  00
04620:  BTFSS  x24.3
04622:  MOVLW  01
04624:  MOVWF  xCC
04626:  MOVLW  00
04628:  BTFSC  x26.3
0462A:  MOVLW  01
0462C:  IORWF  xCC,W
0462E:  ANDWF  xC9,W
04630:  IORWF  xC8,W
04632:  BCF    xC7.0
04634:  BTFSC  FE8.0
04636:  BSF    xC7.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (~OutputType.B13 | OutputBoth.B13));
04638:  MOVLW  00
0463A:  BTFSC  xC7.0
0463C:  MOVLW  01
0463E:  MOVWF  xC8
04640:  MOVLW  00
04642:  BTFSC  x2C.4
04644:  MOVLW  01
04646:  MOVWF  xCA
04648:  MOVLW  00
0464A:  BTFSC  x2E.4
0464C:  MOVLW  01
0464E:  IORWF  xCA,W
04650:  MOVWF  xC9
04652:  MOVLW  00
04654:  BTFSS  x2A.4
04656:  MOVLW  01
04658:  ANDWF  xC9,F
0465A:  MOVLW  00
0465C:  BTFSS  x24.4
0465E:  MOVLW  01
04660:  MOVWF  xCC
04662:  MOVLW  00
04664:  BTFSC  x26.4
04666:  MOVLW  01
04668:  IORWF  xCC,W
0466A:  ANDWF  xC9,W
0466C:  IORWF  xC8,W
0466E:  BCF    xC7.0
04670:  BTFSC  FE8.0
04672:  BSF    xC7.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (~OutputType.B14 | OutputBoth.B14));
04674:  MOVLW  00
04676:  BTFSC  xC7.0
04678:  MOVLW  01
0467A:  MOVWF  xC8
0467C:  MOVLW  00
0467E:  BTFSC  x2C.5
04680:  MOVLW  01
04682:  MOVWF  xCA
04684:  MOVLW  00
04686:  BTFSC  x2E.5
04688:  MOVLW  01
0468A:  IORWF  xCA,W
0468C:  MOVWF  xC9
0468E:  MOVLW  00
04690:  BTFSS  x2A.5
04692:  MOVLW  01
04694:  ANDWF  xC9,F
04696:  MOVLW  00
04698:  BTFSS  x24.5
0469A:  MOVLW  01
0469C:  MOVWF  xCC
0469E:  MOVLW  00
046A0:  BTFSC  x26.5
046A2:  MOVLW  01
046A4:  IORWF  xCC,W
046A6:  ANDWF  xC9,W
046A8:  IORWF  xC8,W
046AA:  BCF    xC7.0
046AC:  BTFSC  FE8.0
046AE:  BSF    xC7.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (~OutputType.B15 | OutputBoth.B15));
046B0:  MOVLW  00
046B2:  BTFSC  xC7.0
046B4:  MOVLW  01
046B6:  MOVWF  xC8
046B8:  MOVLW  00
046BA:  BTFSC  x2C.6
046BC:  MOVLW  01
046BE:  MOVWF  xCA
046C0:  MOVLW  00
046C2:  BTFSC  x2E.6
046C4:  MOVLW  01
046C6:  IORWF  xCA,W
046C8:  MOVWF  xC9
046CA:  MOVLW  00
046CC:  BTFSS  x2A.6
046CE:  MOVLW  01
046D0:  ANDWF  xC9,F
046D2:  MOVLW  00
046D4:  BTFSS  x24.6
046D6:  MOVLW  01
046D8:  MOVWF  xCC
046DA:  MOVLW  00
046DC:  BTFSC  x26.6
046DE:  MOVLW  01
046E0:  IORWF  xCC,W
046E2:  ANDWF  xC9,W
046E4:  IORWF  xC8,W
046E6:  BCF    xC7.0
046E8:  BTFSC  FE8.0
046EA:  BSF    xC7.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (~OutputType.B16 | OutputBoth.B16));
046EC:  MOVLW  00
046EE:  BTFSC  xC7.0
046F0:  MOVLW  01
046F2:  MOVWF  xC8
046F4:  MOVLW  00
046F6:  BTFSC  x2C.7
046F8:  MOVLW  01
046FA:  MOVWF  xCA
046FC:  MOVLW  00
046FE:  BTFSC  x2E.7
04700:  MOVLW  01
04702:  IORWF  xCA,W
04704:  MOVWF  xC9
04706:  MOVLW  00
04708:  BTFSS  x2A.7
0470A:  MOVLW  01
0470C:  ANDWF  xC9,F
0470E:  MOVLW  00
04710:  BTFSS  x24.7
04712:  MOVLW  01
04714:  MOVWF  xCC
04716:  MOVLW  00
04718:  BTFSC  x26.7
0471A:  MOVLW  01
0471C:  IORWF  xCC,W
0471E:  ANDWF  xC9,W
04720:  IORWF  xC8,W
04722:  BCF    xC7.0
04724:  BTFSC  FE8.0
04726:  BSF    xC7.0
....................       /*
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (~OutputType.B17 | OutputBoth.B17));
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (~OutputType.B18 | OutputBoth.B18));
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (~OutputType.B19 | OutputBoth.B19));
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (~OutputType.B20 | OutputBoth.B20));
....................       */
.................... 
....................    }
....................    return(check);
04728:  MOVLW  00
0472A:  BTFSC  xC7.0
0472C:  MOVLW  01
0472E:  MOVWF  01
04730:  MOVLB  0
04732:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... void main()
*
06308:  CLRF   FF8
0630A:  BCF    FD0.7
0630C:  BSF    07.7
0630E:  MOVLW  70
06310:  MOVWF  FD3
06312:  BCF    F9B.6
06314:  BCF    F9B.7
06316:  BSF    FB8.3
06318:  MOVLW  A0
0631A:  MOVWF  FAF
0631C:  MOVLW  01
0631E:  MOVWF  FB0
06320:  MOVLW  A6
06322:  MOVWF  FAC
06324:  MOVLW  90
06326:  MOVWF  FAB
06328:  CLRF   19
0632A:  BCF    1A.0
0632C:  MOVLW  19
0632E:  MOVWF  1B
06330:  BCF    1A.1
06332:  MOVLW  64
06334:  MOVWF  1C
06336:  CLRF   1D
06338:  BCF    1A.2
0633A:  BCF    1A.3
0633C:  BCF    1A.4
0633E:  CLRF   2E
06340:  BCF    1A.5
06342:  CLRF   2F
06344:  BCF    1A.6
06346:  BCF    1A.7
06348:  BCF    30.0
0634A:  BCF    30.1
0634C:  BCF    30.2
0634E:  CLRF   31
06350:  BCF    30.3
06352:  MOVLW  11
06354:  MOVWF  x6F
06356:  MOVLW  12
06358:  MOVWF  x70
0635A:  MOVLW  13
0635C:  MOVWF  x71
0635E:  MOVLW  14
06360:  MOVWF  x72
06362:  MOVLW  16
06364:  MOVWF  x73
06366:  MOVLW  17
06368:  MOVWF  x74
0636A:  MOVLW  19
0636C:  MOVWF  x75
0636E:  MOVLW  20
06370:  MOVWF  x76
06372:  BCF    30.4
06374:  CLRF   x79
06376:  MOVLW  01
06378:  MOVWF  xF5
0637A:  MOVLW  F4
0637C:  MOVWF  xF4
0637E:  CLRF   xF7
06380:  CLRF   xF6
06382:  CLRF   xF9
06384:  CLRF   xF8
06386:  CLRF   xFA
06388:  MOVLB  1
0638A:  CLRF   x17
0638C:  CLRF   x18
0638E:  CLRF   x1A
06390:  CLRF   x19
06392:  MOVLB  F
06394:  CLRF   x38
06396:  CLRF   x39
06398:  CLRF   x3A
0639A:  CLRF   F77
0639C:  CLRF   F78
0639E:  CLRF   F79
063A0:  MOVLB  1
063A2:  CLRF   xBB
.................... {
....................    
....................    
....................    delay_ms(50);
063A4:  MOVLW  32
063A6:  MOVWF  xC6
063A8:  MOVLB  0
063AA:  CALL   05B2
....................    output_bit(Pled,0);   //power on watchdog signal
063AE:  BCF    F8A.5
063B0:  BCF    F93.5
.................... 
....................    //jj
....................    //setup_adc_ports(NO_ANALOGS|VSS_VDD);
....................    //setup_adc(ADC_OFF|ADC_TAD_MUL_0);
....................    
....................    //setup_spi(FALSE);
....................    
....................    setup_timer_0(RTCC_INTERNAL);
063B2:  MOVLW  80
063B4:  MOVWF  FD5
....................    //setup_timer_1(T1_DISABLED);
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
063B6:  MOVLW  78
063B8:  IORLW  06
063BA:  MOVWF  FBA
063BC:  MOVLW  C4
063BE:  MOVWF  FBB
....................    //setup_timer_3(T3_DISABLED|T3_DIV_BY_1);
....................    //setup_comparator(NC_NC_NC_NC);
....................    //setup_vref(FALSE);
....................    enable_interrupts(INT_TIMER2);
063C0:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
063C2:  BSF    F9D.5
....................    
....................    //setup_oscillator(False);
....................    
.................... 
....................    //  set_tris_c (0b01010111);
....................    //setup_spi(SPI_MASTER | SPI_XMIT_L_TO_H |SPI_SS_DISABLED|SPI_H_TO_L  | SPI_CLK_DIV_4  );
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L  | SPI_CLK_DIV_4 |SPI_SS_DISABLED); // Initial SPI
....................    //setup_spi(SPI_MASTER|SPI_H_TO_L|SPI_SS_DISABLED|SPI_CLK_DIV_16);
....................    //setup_spi2( FALSE );
....................    //setup_spi( FALSE );
....................    
....................   // setup_spi(SPI_MASTER |SPI_SS_DISABLED | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //masterOK
....................    
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_64); //master1 jj
063C4:  BCF    FC6.5
063C6:  BCF    F94.5
063C8:  BSF    F94.4
063CA:  BCF    F94.3
063CC:  MOVLW  22
063CE:  MOVWF  FC6
063D0:  MOVLW  40
063D2:  MOVWF  FC7
.................... 
....................     //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 ); //master2
....................     //setup_spi(SPI_MASTER |SPI_SS_DISABLED |SPI_SAMPLE_AT_END | SPI_H_TO_L | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //master1.1
....................    //spi_init(SPI1_MODE0, TRUE);
....................    //spi_init(250000);
....................    //setup_spi(SPI_MASTER | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_SS_DISABLED  | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_T2 | SPI_XMIT_L_TO_H);
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L| SPI_SAMPLE_AT_END | SPI_CLK_DIV_64);//master3
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED| SPI_L_TO_H | SPI_SAMPLE_AT_END | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4);
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_CLK_DIV_4);
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_DIV_16);
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED| spi_L_to_H| SPI_XMIT_L_TO_H|SPI_CLK_DIV_4 );
....................   
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
063D4:  GOTO   0614
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
063D8:  MOVLB  1
063DA:  CLRF   xBE
063DC:  SETF   xBF
063DE:  MOVLB  0
063E0:  CALL   06AA
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
063E4:  MOVLB  1
063E6:  CLRF   xBE
063E8:  SETF   xBF
063EA:  MOVLB  0
063EC:  CALL   06BC
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
063F0:  MOVLW  02
063F2:  MOVLB  1
063F4:  MOVWF  xBE
063F6:  SETF   xBF
063F8:  MOVLB  0
063FA:  CALL   06AA
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input 
063FE:  MOVLW  02
06400:  MOVLB  1
06402:  MOVWF  xBE
06404:  SETF   xBF
06406:  MOVLB  0
06408:  CALL   06BC
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
0640C:  MOVLB  1
0640E:  CLRF   xC8
06410:  MOVLW  06
06412:  MOVWF  xC9
06414:  SETF   xCA
06416:  MOVLB  0
06418:  CALL   05E2
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
0641C:  MOVLB  1
0641E:  CLRF   xC8
06420:  MOVLW  16
06422:  MOVWF  xC9
06424:  SETF   xCA
06426:  MOVLB  0
06428:  CALL   05E2
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
0642C:  MOVLW  02
0642E:  MOVLB  1
06430:  MOVWF  xC8
06432:  MOVLW  06
06434:  MOVWF  xC9
06436:  SETF   xCA
06438:  MOVLB  0
0643A:  CALL   05E2
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
0643E:  MOVLW  02
06440:  MOVLB  1
06442:  MOVWF  xC8
06444:  MOVLW  16
06446:  MOVWF  xC9
06448:  SETF   xCA
0644A:  MOVLB  0
0644C:  CALL   05E2
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
06450:  MOVLW  04
06452:  MOVLB  1
06454:  MOVWF  xBE
06456:  CLRF   xBF
06458:  MOVLB  0
0645A:  CALL   06AA
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
0645E:  MOVLW  04
06460:  MOVLB  1
06462:  MOVWF  xBE
06464:  CLRF   xBF
06466:  MOVLB  0
06468:  CALL   06BC
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
0646C:  MOVLW  06
0646E:  MOVLB  1
06470:  MOVWF  xBE
06472:  CLRF   xBF
06474:  MOVLB  0
06476:  CALL   06AA
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
0647A:  MOVLW  06
0647C:  MOVLB  1
0647E:  MOVWF  xBE
06480:  CLRF   xBF
06482:  MOVLB  0
06484:  CALL   06BC
....................    IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
06488:  MOVLW  08
0648A:  MOVLB  1
0648C:  MOVWF  xBE
0648E:  CLRF   xBF
06490:  MOVLB  0
06492:  CALL   06AA
....................    IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
06496:  MOVLW  08
06498:  MOVLB  1
0649A:  MOVWF  xBE
0649C:  CLRF   xBF
0649E:  MOVLB  0
064A0:  CALL   06BC
....................    IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
064A4:  MOVLW  0A
064A6:  MOVLB  1
064A8:  MOVWF  xBE
064AA:  CLRF   xBF
064AC:  MOVLB  0
064AE:  CALL   06AA
....................    IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
064B2:  MOVLW  0A
064B4:  MOVLB  1
064B6:  MOVWF  xBE
064B8:  CLRF   xBF
064BA:  MOVLB  0
064BC:  CALL   06BC
....................    
....................    FlashingFlag = 1;
064C0:  BSF    1A.1
....................    //output_bit(P485ctrl,0);
....................    sequence = end_sq;
064C2:  MOVFF  6F,77
....................    Address = 1;
064C6:  MOVLW  01
064C8:  MOVWF  x78
.................... 
....................    Output.B1 = 1;
064CA:  MOVLB  1
064CC:  BSF    x1D.0
....................    Output.B2 = 1;
064CE:  BSF    x1D.1
....................    Output.B3 = 1;
064D0:  BSF    x1D.2
....................    Output.B4 = 1;
064D2:  BSF    x1D.3
....................    Output.B5 = 1;
064D4:  BSF    x1D.4
....................    Output.B6 = 1;
064D6:  BSF    x1D.5
....................    Output.B7 = 1;
064D8:  BSF    x1D.6
....................    Output.B8 = 1;
064DA:  BSF    x1D.7
....................    Output.B9 = 1;
064DC:  BSF    x1E.0
....................    Output.B10 = 1;
064DE:  BSF    x1E.1
....................    Output.B11 = 1;
064E0:  BSF    x1E.2
....................    Output.B12 = 1;
064E2:  BSF    x1E.3
....................    Output.B13 = 1;
064E4:  BSF    x1E.4
....................    Output.B14 = 1;
064E6:  BSF    x1E.5
....................    Output.B15 = 1;
064E8:  BSF    x1E.6
....................    Output.B16 = 1;
064EA:  BSF    x1E.7
....................    
....................    //Output.B17 = 1;
....................    //Output.B18 = 1;
....................    //Output.B19 = 1;
....................    //Output.B20 = 1;
....................    
....................    ////////////////////
....................    In.B1 = 0;
064EC:  BCF    x2B.0
....................    In.B2 = 0;
064EE:  BCF    x2B.1
....................    In.B3 = 0;
064F0:  BCF    x2B.2
....................    In.B4 = 0;
064F2:  BCF    x2B.3
....................    In.B5 = 0;
064F4:  BCF    x2B.4
....................    In.B6 = 0;
064F6:  BCF    x2B.5
....................    In.B7 = 0;
064F8:  BCF    x2B.6
....................    In.B8 = 0;
064FA:  BCF    x2B.7
....................    In.B9 = 0;
064FC:  BCF    x2C.0
....................    In.B10 = 0;
064FE:  BCF    x2C.1
....................    In.B11 = 0;
06500:  BCF    x2C.2
....................    In.B12 = 0;
06502:  BCF    x2C.3
....................    In.B13 = 0;
06504:  BCF    x2C.4
....................    In.B14 = 0;
06506:  BCF    x2C.5
....................    In.B15 = 0;
06508:  BCF    x2C.6
....................    In.B16 = 0;
0650A:  BCF    x2C.7
....................    //In.B17 = 0;
....................    //In.B18 = 0;
....................    //In.B19 = 0;
....................    //In.B20 = 0;
....................     ////////////////////
....................    In2.B1 = 0;
0650C:  BCF    x2D.0
....................    In2.B2 = 0;
0650E:  BCF    x2D.1
....................    In2.B3 = 0;
06510:  BCF    x2D.2
....................    In2.B4 = 0;
06512:  BCF    x2D.3
....................    In2.B5 = 0;
06514:  BCF    x2D.4
....................    In2.B6 = 0;
06516:  BCF    x2D.5
....................    In2.B7 = 0;
06518:  BCF    x2D.6
....................    In2.B8 = 0;
0651A:  BCF    x2D.7
....................    In2.B9 = 0;
0651C:  BCF    x2E.0
....................    In2.B10 = 0;
0651E:  BCF    x2E.1
....................    In2.B11 = 0;
06520:  BCF    x2E.2
....................    In2.B12 = 0;
06522:  BCF    x2E.3
....................    In2.B13 = 0;
06524:  BCF    x2E.4
....................    In2.B14 = 0;
06526:  BCF    x2E.5
....................    In2.B15 = 0;
06528:  BCF    x2E.6
....................    In2.B16 = 0;
0652A:  BCF    x2E.7
....................    
....................    /*
....................    //  jj
....................    //Input
....................    if(FaultNCNO[i] ==NO)
....................    {
....................       Inputt.B1 = 1;
....................       Inputt.B2 = 1;
....................       Inputt.B3 = 1;
....................       Inputt.B4 = 1;
....................       Inputt.B5 = 1;
....................       Inputt.B6 = 1;
....................       Inputt.B7 = 1;
....................       Inputt.B8 = 1;
....................       Inputt.B9 = 1;
....................       Inputt.B10 = 1;
....................       Inputt.B11 = 1;
....................       Inputt.B12 = 1;
....................       Inputt.B13 = 1;
....................       Inputt.B14 = 1;
....................       Inputt.B15 = 1;
....................       Inputt.B16 = 1;
....................       //In.B17 = 1;
....................       //In.B18 = 1;
....................       //In.B19 = 1;
....................       //In.B20 = 1;
....................    }
....................    else
....................    {
....................       
....................    }
....................    */
....................     ////////////////////
....................    
....................    ////////////////////////
....................    Ack.B1 = 0;
0652C:  BCF    x29.0
....................    Ack.B2 = 0;
0652E:  BCF    x29.1
....................    Ack.B3 = 0;
06530:  BCF    x29.2
....................    Ack.B4 = 0;
06532:  BCF    x29.3
....................    Ack.B5 = 0;
06534:  BCF    x29.4
....................    Ack.B6 = 0;
06536:  BCF    x29.5
....................    Ack.B7 = 0;
06538:  BCF    x29.6
....................    Ack.B8 = 0;
0653A:  BCF    x29.7
....................    Ack.B9 = 0;
0653C:  BCF    x2A.0
....................    Ack.B10 = 0;
0653E:  BCF    x2A.1
....................    Ack.B11 = 0;
06540:  BCF    x2A.2
....................    Ack.B12 = 0;
06542:  BCF    x2A.3
....................    Ack.B13 = 0;
06544:  BCF    x2A.4
....................    Ack.B14 = 0;
06546:  BCF    x2A.5
....................    Ack.B15 = 0;
06548:  BCF    x2A.6
....................    Ack.B16 = 0;
0654A:  BCF    x2A.7
....................    //Ack.B17 = 0;
....................    //Ack.B18 = 0;
....................    //Ack.B19 = 0;
....................    //Ack.B20 = 0;
....................  
.................... 
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0x0F)
0654C:  MOVFF  FF2,1BE
06550:  BCF    FF2.7
06552:  CLRF   FAA
06554:  CLRF   FA9
06556:  BCF    FA6.6
06558:  BCF    FA6.7
0655A:  BSF    FA6.0
0655C:  MOVF   FA8,W
0655E:  BTFSC  xBE.7
06560:  BSF    FF2.7
06562:  SUBLW  0F
06564:  BNZ   6570
....................    {
....................       Read_Config();
06566:  MOVLB  0
06568:  GOTO   06D0
....................    }
0656C:  BRA    68B0
0656E:  MOVLB  1
....................    else
....................    {
....................       FlashingRateTime = 25;
06570:  MOVLW  19
06572:  MOVWF  1B
....................       AutoAck = 0xF0; //not use auto ack
06574:  MOVLW  F0
06576:  MOVLB  0
06578:  MOVWF  x6A
....................       Address = 0x01;
0657A:  MOVLW  01
0657C:  MOVWF  x78
.................... 
....................       AutoAckTime = 5;
0657E:  MOVLW  05
06580:  MOVWF  x6B
....................       FlashingRate = 25;
06582:  MOVLW  19
06584:  MOVWF  x6C
....................       NoOfPoint = 16;
06586:  MOVLW  10
06588:  MOVWF  x6D
....................       char i;
....................       for(i =0; i<=NoOfPoint; i++)
0658A:  MOVLB  1
0658C:  CLRF   xBC
0658E:  MOVF   xBC,W
06590:  MOVLB  0
06592:  SUBWF  x6D,W
06594:  BNC   65B4
....................       {
....................          FaultDelayTime[i] = 0;
06596:  BCF    FD8.0
06598:  MOVLB  1
0659A:  RLCF   xBC,W
0659C:  CLRF   03
0659E:  ADDLW  7B
065A0:  MOVWF  FE9
065A2:  MOVLW  01
065A4:  ADDWFC 03,W
065A6:  MOVWF  FEA
065A8:  CLRF   FEC
065AA:  MOVF   FED,F
065AC:  CLRF   FEF
065AE:  INCF   xBC,F
065B0:  BRA    658E
065B2:  MOVLB  0
....................       }
.................... 
.................... 
....................       InputType.B1 = 1;
065B4:  MOVLB  1
065B6:  BSF    x1F.0
....................       InputType.B2 = 1;
065B8:  BSF    x1F.1
....................       InputType.B3 = 1;
065BA:  BSF    x1F.2
....................       InputType.B4 = 1;
065BC:  BSF    x1F.3
....................       InputType.B5 = 1;
065BE:  BSF    x1F.4
....................       InputType.B6 = 1;
065C0:  BSF    x1F.5
....................       InputType.B7 = 1;
065C2:  BSF    x1F.6
....................       InputType.B8 = 1;
065C4:  BSF    x1F.7
....................       InputType.B9 = 1;
065C6:  BSF    x20.0
....................       InputType.B10 = 1;
065C8:  BSF    x20.1
....................       InputType.B11 = 1;
065CA:  BSF    x20.2
....................       InputType.B12 = 1;
065CC:  BSF    x20.3
....................       InputType.B13 = 1;
065CE:  BSF    x20.4
....................       InputType.B14 = 1;
065D0:  BSF    x20.5
....................       InputType.B15 = 1;
065D2:  BSF    x20.6
....................       InputType.B16 = 1;
065D4:  BSF    x20.7
....................       
....................       FaultNCNO[1] = 1;
065D6:  BSF    xB7.1
....................       FaultNCNO[2] = 1;
065D8:  BSF    xB7.2
....................       FaultNCNO[3] = 1;
065DA:  BSF    xB7.3
....................       FaultNCNO[4] = 1;
065DC:  BSF    xB7.4
....................       FaultNCNO[5] = 1;
065DE:  BSF    xB7.5
....................       FaultNCNO[6] = 1;
065E0:  BSF    xB7.6
....................       FaultNCNO[7] = 1;
065E2:  BSF    xB7.7
....................       FaultNCNO[8] = 1;
065E4:  BSF    xB8.0
....................       FaultNCNO[9] = 1;
065E6:  BSF    xB8.1
....................       FaultNCNO[10] = 1;
065E8:  BSF    xB8.2
....................       FaultNCNO[11] = 1;
065EA:  BSF    xB8.3
....................       FaultNCNO[12] = 1;
065EC:  BSF    xB8.4
....................       FaultNCNO[13] = 1;
065EE:  BSF    xB8.5
....................       FaultNCNO[14] = 1;
065F0:  BSF    xB8.6
....................       FaultNCNO[15] = 1;
065F2:  BSF    xB8.7
....................       FaultNCNO[16] = 1;
065F4:  BSF    xB9.0
....................       
....................       /////////////////////////////
....................       FaultType.B1 = 1;
065F6:  BSF    x21.0
....................       FaultType.B2= 1;
065F8:  BSF    x21.1
....................       FaultType.B3 = 1;
065FA:  BSF    x21.2
....................       FaultType.B4 = 1;
065FC:  BSF    x21.3
....................       FaultType.B5 = 1;
065FE:  BSF    x21.4
....................       FaultType.B6 = 1;
06600:  BSF    x21.5
....................       FaultType.B7 = 1;
06602:  BSF    x21.6
....................       FaultType.B8 = 1;
06604:  BSF    x21.7
....................       FaultType.B9 = 1;
06606:  BSF    x22.0
....................       FaultType.B10 = 1;
06608:  BSF    x22.1
....................       FaultType.B11 = 1;
0660A:  BSF    x22.2
....................       FaultType.B12 = 1;
0660C:  BSF    x22.3
....................       FaultType.B13 = 1;
0660E:  BSF    x22.4
....................       FaultType.B14 = 1;
06610:  BSF    x22.5
....................       FaultType.B15 = 1;
06612:  BSF    x22.6
....................       FaultType.B16 = 1;
06614:  BSF    x22.7
....................       //FaultType.B17 = 1;
....................       //FaultType.B18 = 1;
....................       //FaultType.B19 = 1;
....................       //FaultType.B20 = 1;
....................       
....................       ////////////////////////////
....................       OutputType.B1 = 1;
06616:  BSF    x23.0
....................       OutputType.B2 = 1;
06618:  BSF    x23.1
....................       OutputType.B3 = 1;
0661A:  BSF    x23.2
....................       OutputType.B4 = 1;
0661C:  BSF    x23.3
....................       OutputType.B5 = 1;
0661E:  BSF    x23.4
....................       OutputType.B6 = 1;
06620:  BSF    x23.5
....................       OutputType.B7 = 1;
06622:  BSF    x23.6
....................       OutputType.B8 = 1;
06624:  BSF    x23.7
....................       OutputType.B9 = 1;
06626:  BSF    x24.0
....................       OutputType.B10 = 1;
06628:  BSF    x24.1
....................       OutputType.B11 = 1;
0662A:  BSF    x24.2
....................       OutputType.B12 = 1;
0662C:  BSF    x24.3
....................       OutputType.B13 = 1;
0662E:  BSF    x24.4
....................       OutputType.B14 = 1;
06630:  BSF    x24.5
....................       OutputType.B15 = 1;
06632:  BSF    x24.6
....................       OutputType.B16 = 1;
06634:  BSF    x24.7
....................       //OutputType.B17 = 1;
....................       //OutputType.B18 = 1;
....................       //OutputType.B19 = 1;
....................       //OutputType.B20 = 1;
....................  
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
06636:  BSF    x25.0
....................       OutputBoth.B2 = 1;
06638:  BSF    x25.1
....................       OutputBoth.B3 = 1;
0663A:  BSF    x25.2
....................       OutputBoth.B4 = 1;
0663C:  BSF    x25.3
....................       OutputBoth.B5 = 1;
0663E:  BSF    x25.4
....................       OutputBoth.B6 = 1;
06640:  BSF    x25.5
....................       OutputBoth.B7 = 1;
06642:  BSF    x25.6
....................       OutputBoth.B8 = 1;
06644:  BSF    x25.7
....................       OutputBoth.B9 = 1;
06646:  BSF    x26.0
....................       OutputBoth.B10 = 1;
06648:  BSF    x26.1
....................       OutputBoth.B11 = 1;
0664A:  BSF    x26.2
....................       OutputBoth.B12 = 1;
0664C:  BSF    x26.3
....................       OutputBoth.B13 = 1;
0664E:  BSF    x26.4
....................       OutputBoth.B14 = 1;
06650:  BSF    x26.5
....................       OutputBoth.B15 = 1;
06652:  BSF    x26.6
....................       OutputBoth.B16 = 1;
06654:  BSF    x26.7
....................       //OutputBoth.B17 = 1;
....................       //OutputBoth.B18 = 1;
....................       //OutputBoth.B19 = 1;
....................       //OutputBoth.B20 = 1;
....................       
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
06656:  BSF    x27.0
....................       AlarmIndicator.B2 = 1;
06658:  BSF    x27.1
....................       AlarmIndicator.B3 = 1;
0665A:  BSF    x27.2
....................       AlarmIndicator.B4 = 1;
0665C:  BSF    x27.3
....................       AlarmIndicator.B5 = 1;
0665E:  BSF    x27.4
....................       AlarmIndicator.B6 = 1;
06660:  BSF    x27.5
....................       AlarmIndicator.B7 = 1;
06662:  BSF    x27.6
....................       AlarmIndicator.B8 = 1;
06664:  BSF    x27.7
....................       AlarmIndicator.B9 = 1;
06666:  BSF    x28.0
....................       AlarmIndicator.B10 = 1;
06668:  BSF    x28.1
....................       AlarmIndicator.B11 = 1;
0666A:  BSF    x28.2
....................       AlarmIndicator.B12 = 1;
0666C:  BSF    x28.3
....................       AlarmIndicator.B13 = 1;
0666E:  BSF    x28.4
....................       AlarmIndicator.B14 = 1;
06670:  BSF    x28.5
....................       AlarmIndicator.B15 = 1;
06672:  BSF    x28.6
....................       AlarmIndicator.B16 = 1;
06674:  BSF    x28.7
....................       //AlarmIndicator.B17 = 1;
....................       //AlarmIndicator.B18 = 1;
....................       //AlarmIndicator.B19 = 1;
....................       //AlarmIndicator.B20 = 1;
....................       
....................       ///////////// JACK///////////////////
....................    EEpDat = read_eeprom(0x10);
06676:  MOVFF  FF2,1BE
0667A:  BCF    FF2.7
0667C:  CLRF   FAA
0667E:  MOVLW  10
06680:  MOVWF  FA9
06682:  BCF    FA6.6
06684:  BCF    FA6.7
06686:  BSF    FA6.0
06688:  MOVF   FA8,W
0668A:  BTFSC  xBE.7
0668C:  BSF    FF2.7
0668E:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
06690:  BCF    x33.0
06692:  BTFSC  39.0
06694:  BSF    x33.0
....................    RED_Colour.B2 = EEpDat >> 1;
06696:  BCF    FD8.0
06698:  RRCF   39,W
0669A:  BCF    x33.1
0669C:  BTFSC  FE8.0
0669E:  BSF    x33.1
....................    RED_Colour.B3 = EEpDat >> 2;
066A0:  RRCF   39,W
066A2:  MOVWF  00
066A4:  RRCF   00,F
066A6:  MOVLW  3F
066A8:  ANDWF  00,F
066AA:  BCF    x33.2
066AC:  BTFSC  00.0
066AE:  BSF    x33.2
....................    RED_Colour.B4 = EEpDat >> 3;
066B0:  RRCF   39,W
066B2:  MOVWF  00
066B4:  RRCF   00,F
066B6:  RRCF   00,F
066B8:  MOVLW  1F
066BA:  ANDWF  00,F
066BC:  BCF    x33.3
066BE:  BTFSC  00.0
066C0:  BSF    x33.3
....................    RED_Colour.B5 = EEpDat >> 4;
066C2:  SWAPF  39,W
066C4:  MOVWF  00
066C6:  MOVLW  0F
066C8:  ANDWF  00,F
066CA:  BCF    x33.4
066CC:  BTFSC  00.0
066CE:  BSF    x33.4
....................    RED_Colour.B6 = EEpDat >> 5;
066D0:  SWAPF  39,W
066D2:  MOVWF  00
066D4:  RRCF   00,F
066D6:  MOVLW  07
066D8:  ANDWF  00,F
066DA:  BCF    x33.5
066DC:  BTFSC  00.0
066DE:  BSF    x33.5
....................    RED_Colour.B7 = EEpDat >> 6;
066E0:  SWAPF  39,W
066E2:  MOVWF  00
066E4:  RRCF   00,F
066E6:  RRCF   00,F
066E8:  MOVLW  03
066EA:  ANDWF  00,F
066EC:  BCF    x33.6
066EE:  BTFSC  00.0
066F0:  BSF    x33.6
....................    RED_Colour.B8 = EEpDat >> 7;
066F2:  CLRF   00
066F4:  BTFSC  39.7
066F6:  BSF    00.0
066F8:  BCF    x33.7
066FA:  BTFSC  00.0
066FC:  BSF    x33.7
....................    
....................    EEpDat = read_eeprom(0x11);
066FE:  MOVFF  FF2,1BE
06702:  BCF    FF2.7
06704:  CLRF   FAA
06706:  MOVLW  11
06708:  MOVWF  FA9
0670A:  BCF    FA6.6
0670C:  BCF    FA6.7
0670E:  BSF    FA6.0
06710:  MOVF   FA8,W
06712:  BTFSC  xBE.7
06714:  BSF    FF2.7
06716:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
06718:  BCF    x34.0
0671A:  BTFSC  39.0
0671C:  BSF    x34.0
....................    RED_Colour.B10 = EEpDat >> 1;
0671E:  BCF    FD8.0
06720:  RRCF   39,W
06722:  BCF    x34.1
06724:  BTFSC  FE8.0
06726:  BSF    x34.1
....................    
....................    
....................    EEpDat = read_eeprom(0x12);
06728:  MOVFF  FF2,1BE
0672C:  BCF    FF2.7
0672E:  CLRF   FAA
06730:  MOVLW  12
06732:  MOVWF  FA9
06734:  BCF    FA6.6
06736:  BCF    FA6.7
06738:  BSF    FA6.0
0673A:  MOVF   FA8,W
0673C:  BTFSC  xBE.7
0673E:  BSF    FF2.7
06740:  MOVWF  39
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
06742:  BCF    x34.2
06744:  BTFSC  39.0
06746:  BSF    x34.2
....................    RED_Colour.B12 = EEpDat >> 1;
06748:  BCF    FD8.0
0674A:  RRCF   39,W
0674C:  BCF    x34.3
0674E:  BTFSC  FE8.0
06750:  BSF    x34.3
....................    RED_Colour.B13 = EEpDat >> 2;
06752:  RRCF   39,W
06754:  MOVWF  00
06756:  RRCF   00,F
06758:  MOVLW  3F
0675A:  ANDWF  00,F
0675C:  BCF    x34.4
0675E:  BTFSC  00.0
06760:  BSF    x34.4
....................    RED_Colour.B14 = EEpDat >> 3;
06762:  RRCF   39,W
06764:  MOVWF  00
06766:  RRCF   00,F
06768:  RRCF   00,F
0676A:  MOVLW  1F
0676C:  ANDWF  00,F
0676E:  BCF    x34.5
06770:  BTFSC  00.0
06772:  BSF    x34.5
....................    RED_Colour.B15 = EEpDat >> 4;
06774:  SWAPF  39,W
06776:  MOVWF  00
06778:  MOVLW  0F
0677A:  ANDWF  00,F
0677C:  BCF    x34.6
0677E:  BTFSC  00.0
06780:  BSF    x34.6
....................    RED_Colour.B16 = EEpDat >> 5;
06782:  SWAPF  39,W
06784:  MOVWF  00
06786:  RRCF   00,F
06788:  MOVLW  07
0678A:  ANDWF  00,F
0678C:  BCF    x34.7
0678E:  BTFSC  00.0
06790:  BSF    x34.7
....................    //RED_Colour.B17 = EEpDat >> 6;
....................    //RED_Colour.B18 = EEpDat >> 7;
....................    
....................    //EEpDat = read_eeprom(0x13);
....................    //Red19_20 = EEpDat;
....................    //RED_Colour.B19 = EEpDat;
....................    //RED_Colour.B20 = EEpDat >> 1;
....................    
....................    
....................    EEpDat = read_eeprom(0x14);
06792:  MOVFF  FF2,1BE
06796:  BCF    FF2.7
06798:  CLRF   FAA
0679A:  MOVLW  14
0679C:  MOVWF  FA9
0679E:  BCF    FA6.6
067A0:  BCF    FA6.7
067A2:  BSF    FA6.0
067A4:  MOVF   FA8,W
067A6:  BTFSC  xBE.7
067A8:  BSF    FF2.7
067AA:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
067AC:  BCF    x35.0
067AE:  BTFSC  39.0
067B0:  BSF    x35.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
067B2:  BCF    FD8.0
067B4:  RRCF   39,W
067B6:  BCF    x35.1
067B8:  BTFSC  FE8.0
067BA:  BSF    x35.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
067BC:  RRCF   39,W
067BE:  MOVWF  00
067C0:  RRCF   00,F
067C2:  MOVLW  3F
067C4:  ANDWF  00,F
067C6:  BCF    x35.2
067C8:  BTFSC  00.0
067CA:  BSF    x35.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
067CC:  RRCF   39,W
067CE:  MOVWF  00
067D0:  RRCF   00,F
067D2:  RRCF   00,F
067D4:  MOVLW  1F
067D6:  ANDWF  00,F
067D8:  BCF    x35.3
067DA:  BTFSC  00.0
067DC:  BSF    x35.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
067DE:  SWAPF  39,W
067E0:  MOVWF  00
067E2:  MOVLW  0F
067E4:  ANDWF  00,F
067E6:  BCF    x35.4
067E8:  BTFSC  00.0
067EA:  BSF    x35.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
067EC:  SWAPF  39,W
067EE:  MOVWF  00
067F0:  RRCF   00,F
067F2:  MOVLW  07
067F4:  ANDWF  00,F
067F6:  BCF    x35.5
067F8:  BTFSC  00.0
067FA:  BSF    x35.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
067FC:  SWAPF  39,W
067FE:  MOVWF  00
06800:  RRCF   00,F
06802:  RRCF   00,F
06804:  MOVLW  03
06806:  ANDWF  00,F
06808:  BCF    x35.6
0680A:  BTFSC  00.0
0680C:  BSF    x35.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
0680E:  CLRF   00
06810:  BTFSC  39.7
06812:  BSF    00.0
06814:  BCF    x35.7
06816:  BTFSC  00.0
06818:  BSF    x35.7
....................    
....................    EEpDat = read_eeprom(0x15);
0681A:  MOVFF  FF2,1BE
0681E:  BCF    FF2.7
06820:  CLRF   FAA
06822:  MOVLW  15
06824:  MOVWF  FA9
06826:  BCF    FA6.6
06828:  BCF    FA6.7
0682A:  BSF    FA6.0
0682C:  MOVF   FA8,W
0682E:  BTFSC  xBE.7
06830:  BSF    FF2.7
06832:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
06834:  BCF    x36.0
06836:  BTFSC  39.0
06838:  BSF    x36.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
0683A:  BCF    FD8.0
0683C:  RRCF   39,W
0683E:  BCF    x36.1
06840:  BTFSC  FE8.0
06842:  BSF    x36.1
....................    
....................    
....................    EEpDat = read_eeprom(0x16);
06844:  MOVFF  FF2,1BE
06848:  BCF    FF2.7
0684A:  CLRF   FAA
0684C:  MOVLW  16
0684E:  MOVWF  FA9
06850:  BCF    FA6.6
06852:  BCF    FA6.7
06854:  BSF    FA6.0
06856:  MOVF   FA8,W
06858:  BTFSC  xBE.7
0685A:  BSF    FF2.7
0685C:  MOVWF  39
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
0685E:  BCF    x36.2
06860:  BTFSC  39.0
06862:  BSF    x36.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
06864:  BCF    FD8.0
06866:  RRCF   39,W
06868:  BCF    x36.3
0686A:  BTFSC  FE8.0
0686C:  BSF    x36.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
0686E:  RRCF   39,W
06870:  MOVWF  00
06872:  RRCF   00,F
06874:  MOVLW  3F
06876:  ANDWF  00,F
06878:  BCF    x36.4
0687A:  BTFSC  00.0
0687C:  BSF    x36.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
0687E:  RRCF   39,W
06880:  MOVWF  00
06882:  RRCF   00,F
06884:  RRCF   00,F
06886:  MOVLW  1F
06888:  ANDWF  00,F
0688A:  BCF    x36.5
0688C:  BTFSC  00.0
0688E:  BSF    x36.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
06890:  SWAPF  39,W
06892:  MOVWF  00
06894:  MOVLW  0F
06896:  ANDWF  00,F
06898:  BCF    x36.6
0689A:  BTFSC  00.0
0689C:  BSF    x36.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
0689E:  SWAPF  39,W
068A0:  MOVWF  00
068A2:  RRCF   00,F
068A4:  MOVLW  07
068A6:  ANDWF  00,F
068A8:  BCF    x36.7
068AA:  BTFSC  00.0
068AC:  BSF    x36.7
068AE:  MOVLB  0
....................    //GREEN_Colour.B17 = EEpDat >> 6;
....................    //GREEN_Colour.B18 = EEpDat >> 7;
....................    
....................    //EEpDat = read_eeprom(0x17);
....................    //Green19_20 = EEpDat;
....................    //GREEN_Colour.B19 = EEpDat;
....................    //GREEN_Colour.B20 = EEpDat >> 1;
....................    
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
....................    
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
068B0:  MOVLW  00
068B2:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
068B4:  MOVWF  F93
....................    enable_interrupts(GLOBAL);
068B6:  MOVLW  C0
068B8:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
068BA:  BSF    FD1.0
....................    Read_input(); restart_wdt();
068BC:  CALL   1332
068C0:  CLRWDT
....................    
....................    output_bit(Pbuzzer,0);   //Clear Buzzer
068C2:  BCF    F89.4
068C4:  BCF    F92.4
....................    output_bit(Pbell,0);      //Clear Bell
068C6:  BCF    F89.3
068C8:  BCF    F92.3
....................    output_bit(P485ctrl,0);
068CA:  BCF    F8A.3
068CC:  BCF    F93.3
....................    //output_bit(P485ctrl,0);
....................    output_bit(PIN_B4,1); //jj
068CE:  BSF    F8A.4
068D0:  BCF    F93.4
....................    Send_Ouput();
068D2:  CALL   1C6C
....................    
....................    IO_OUTPUT_A(IO_DEVICE_2, 0xff);
068D6:  MOVLW  04
068D8:  MOVLB  1
068DA:  MOVWF  xC6
068DC:  SETF   xC7
068DE:  MOVLB  0
068E0:  CALL   1C40
....................    IO_OUTPUT_B(IO_DEVICE_2, 0xff);
068E4:  MOVLW  04
068E6:  MOVLB  1
068E8:  MOVWF  xC6
068EA:  SETF   xC7
068EC:  MOVLB  0
068EE:  CALL   1C56
....................             
....................    IO_OUTPUT_A(IO_DEVICE_3, 0xff);
068F2:  MOVLW  06
068F4:  MOVLB  1
068F6:  MOVWF  xC6
068F8:  SETF   xC7
068FA:  MOVLB  0
068FC:  CALL   1C40
....................    IO_OUTPUT_B(IO_DEVICE_3, 0xff);
06900:  MOVLW  06
06902:  MOVLB  1
06904:  MOVWF  xC6
06906:  SETF   xC7
06908:  MOVLB  0
0690A:  CALL   1C56
....................   
....................    IO_OUTPUT_A(IO_DEVICE_5, 0xff);  
0690E:  MOVLW  0A
06910:  MOVLB  1
06912:  MOVWF  xC6
06914:  SETF   xC7
06916:  MOVLB  0
06918:  CALL   1C40
....................    IO_OUTPUT_B(IO_DEVICE_5, 0xff);
0691C:  MOVLW  0A
0691E:  MOVLB  1
06920:  MOVWF  xC6
06922:  SETF   xC7
06924:  MOVLB  0
06926:  CALL   1C56
....................             
....................    IO_OUTPUT_A(IO_DEVICE_4, 0xff);
0692A:  MOVLW  08
0692C:  MOVLB  1
0692E:  MOVWF  xC6
06930:  SETF   xC7
06932:  MOVLB  0
06934:  CALL   1C40
....................    IO_OUTPUT_B(IO_DEVICE_4, 0xff);
06938:  MOVLW  08
0693A:  MOVLB  1
0693C:  MOVWF  xC6
0693E:  SETF   xC7
06940:  MOVLB  0
06942:  CALL   1C56
....................    
....................    
....................    
....................    delay_ms(500);
06946:  MOVLW  02
06948:  MOVLB  1
0694A:  MOVWF  xBE
0694C:  MOVLW  FA
0694E:  MOVWF  xC6
06950:  MOVLB  0
06952:  CALL   05B2
06956:  MOVLB  1
06958:  DECFSZ xBE,F
0695A:  BRA    694C
....................    
....................    // jj
....................    char i;
....................    for(i=1;i<=16;i++)
0695C:  MOVLW  01
0695E:  MOVWF  xBD
06960:  MOVF   xBD,W
06962:  SUBLW  10
06964:  BTFSS  FD8.0
06966:  BRA    6AB4
....................    {
....................       FaultAgo[i] = 0;
06968:  MOVFF  1BD,1C6
0696C:  CLRF   xC7
0696E:  MOVLW  01
06970:  MOVWF  xC9
06972:  MOVLW  37
06974:  MOVWF  xC8
06976:  MOVLB  0
06978:  CALL   1292
....................       FaultNow[i] = 0;
0697C:  MOVFF  1BD,1C6
06980:  MOVLB  1
06982:  CLRF   xC7
06984:  MOVLW  01
06986:  MOVWF  xC9
06988:  MOVLW  3B
0698A:  MOVWF  xC8
0698C:  MOVLB  0
0698E:  CALL   1292
....................       ReleaseTime[i] = 0;
06992:  BCF    FD8.0
06994:  MOVLB  1
06996:  RLCF   xBD,W
06998:  CLRF   03
0699A:  ADDLW  3F
0699C:  MOVWF  FE9
0699E:  MOVLW  01
069A0:  ADDWFC 03,W
069A2:  MOVWF  FEA
069A4:  CLRF   FEC
069A6:  MOVF   FED,F
069A8:  CLRF   FEF
....................       if(FaultNCNO[i] ==NO)
069AA:  MOVFF  1BD,1C6
069AE:  MOVLW  01
069B0:  MOVWF  xC8
069B2:  MOVLW  B7
069B4:  MOVWF  xC7
069B6:  MOVLB  0
069B8:  CALL   123A
069BC:  MOVF   01,W
069BE:  ANDLW  01
069C0:  SUBLW  01
069C2:  BNZ   6A3C
....................       {
....................          switch(i)
069C4:  MOVLW  01
069C6:  MOVLB  1
069C8:  SUBWF  xBD,W
069CA:  ADDLW  F0
069CC:  BC    6A38
069CE:  ADDLW  10
069D0:  MOVLB  0
069D2:  GOTO   6C18
....................          {
....................             case 1:
....................                Inputt.B1 = 1; 
069D6:  MOVLB  1
069D8:  BSF    x1B.0
....................             break;
069DA:  BRA    6A38
....................             case 2:
....................                Inputt.B2 = 1; 
069DC:  MOVLB  1
069DE:  BSF    x1B.1
....................             break;
069E0:  BRA    6A38
....................             case 3:
....................                Inputt.B3 = 1; 
069E2:  MOVLB  1
069E4:  BSF    x1B.2
....................             break;
069E6:  BRA    6A38
....................             case 4:
....................                Inputt.B4 = 1; 
069E8:  MOVLB  1
069EA:  BSF    x1B.3
....................             break;
069EC:  BRA    6A38
....................             case 5:
....................                Inputt.B5 = 1; 
069EE:  MOVLB  1
069F0:  BSF    x1B.4
....................             break;
069F2:  BRA    6A38
....................             case 6:
....................                Inputt.B6 = 1; 
069F4:  MOVLB  1
069F6:  BSF    x1B.5
....................             break;
069F8:  BRA    6A38
....................             case 7:
....................                Inputt.B7 = 1; 
069FA:  MOVLB  1
069FC:  BSF    x1B.6
....................              break;
069FE:  BRA    6A38
....................              case 8:
....................                Inputt.B8 = 1; 
06A00:  MOVLB  1
06A02:  BSF    x1B.7
....................             break;
06A04:  BRA    6A38
....................             case 9:
....................                Inputt.B9 = 1; 
06A06:  MOVLB  1
06A08:  BSF    x1C.0
....................             break;
06A0A:  BRA    6A38
....................             case 10:
....................                Inputt.B10 = 1; 
06A0C:  MOVLB  1
06A0E:  BSF    x1C.1
....................             break;
06A10:  BRA    6A38
....................             case 11:
....................                Inputt.B11 = 1; 
06A12:  MOVLB  1
06A14:  BSF    x1C.2
....................             break;
06A16:  BRA    6A38
....................             case 12:
....................                Inputt.B12 = 1; 
06A18:  MOVLB  1
06A1A:  BSF    x1C.3
....................             break;
06A1C:  BRA    6A38
....................             case 13:
....................                Inputt.B13 = 1; 
06A1E:  MOVLB  1
06A20:  BSF    x1C.4
....................             break;
06A22:  BRA    6A38
....................             case 14:
....................                Inputt.B14 = 1; 
06A24:  MOVLB  1
06A26:  BSF    x1C.5
....................             break;
06A28:  BRA    6A38
....................             case 15:
....................                Inputt.B15 = 1; 
06A2A:  MOVLB  1
06A2C:  BSF    x1C.6
....................             break;
06A2E:  BRA    6A38
....................             case 16:
....................                 Inputt.B16 = 1;
06A30:  MOVLB  1
06A32:  BSF    x1C.7
....................              break;
06A34:  BRA    6A38
06A36:  MOVLB  1
....................                        
....................          }                 
....................       }
06A38:  BRA    6AB0
06A3A:  MOVLB  0
....................       else
....................       {
....................          switch(i)
06A3C:  MOVLW  01
06A3E:  MOVLB  1
06A40:  SUBWF  xBD,W
06A42:  ADDLW  F0
06A44:  BC    6AB0
06A46:  ADDLW  10
06A48:  MOVLB  0
06A4A:  GOTO   6C52
....................          {
....................             case 1:
....................                Inputt.B1 = 0; 
06A4E:  MOVLB  1
06A50:  BCF    x1B.0
....................             break;
06A52:  BRA    6AB0
....................             case 2:
....................                Inputt.B2 = 0; 
06A54:  MOVLB  1
06A56:  BCF    x1B.1
....................             break;
06A58:  BRA    6AB0
....................             case 3:
....................                Inputt.B3 = 0; 
06A5A:  MOVLB  1
06A5C:  BCF    x1B.2
....................             break;
06A5E:  BRA    6AB0
....................             case 4:
....................                Inputt.B4 = 0; 
06A60:  MOVLB  1
06A62:  BCF    x1B.3
....................             break;
06A64:  BRA    6AB0
....................             case 5:
....................                Inputt.B5 = 0; 
06A66:  MOVLB  1
06A68:  BCF    x1B.4
....................             break;
06A6A:  BRA    6AB0
....................             case 6:
....................                Inputt.B6 = 0; 
06A6C:  MOVLB  1
06A6E:  BCF    x1B.5
....................             break;
06A70:  BRA    6AB0
....................             case 7:
....................                Inputt.B7 = 0; 
06A72:  MOVLB  1
06A74:  BCF    x1B.6
....................              break;
06A76:  BRA    6AB0
....................              case 8:
....................                Inputt.B8 = 0; 
06A78:  MOVLB  1
06A7A:  BCF    x1B.7
....................             break;
06A7C:  BRA    6AB0
....................             case 9:
....................                Inputt.B9 = 0; 
06A7E:  MOVLB  1
06A80:  BCF    x1C.0
....................             break;
06A82:  BRA    6AB0
....................             case 10:
....................                Inputt.B10 = 0; 
06A84:  MOVLB  1
06A86:  BCF    x1C.1
....................             break;
06A88:  BRA    6AB0
....................             case 11:
....................                Inputt.B11 = 0; 
06A8A:  MOVLB  1
06A8C:  BCF    x1C.2
....................             break;
06A8E:  BRA    6AB0
....................             case 12:
....................                Inputt.B12 = 0; 
06A90:  MOVLB  1
06A92:  BCF    x1C.3
....................             break;
06A94:  BRA    6AB0
....................             case 13:
....................                Inputt.B13 = 0; 
06A96:  MOVLB  1
06A98:  BCF    x1C.4
....................             break;
06A9A:  BRA    6AB0
....................             case 14:
....................                Inputt.B14 = 0; 
06A9C:  MOVLB  1
06A9E:  BCF    x1C.5
....................             break;
06AA0:  BRA    6AB0
....................             case 15:
....................                Inputt.B15 = 0; 
06AA2:  MOVLB  1
06AA4:  BCF    x1C.6
....................             break;
06AA6:  BRA    6AB0
....................             case 16:
....................                 Inputt.B16 = 0;
06AA8:  MOVLB  1
06AAA:  BCF    x1C.7
....................              break;
06AAC:  BRA    6AB0
06AAE:  MOVLB  1
....................                        
....................          }                 
....................       }
06AB0:  INCF   xBD,F
06AB2:  BRA    6960
....................       
....................    }
.................... 
....................   /*
....................    //Start-Up UART1
....................   fprintf(CH1,"\n\n\n\r");
....................   fprintf(CH1,"Demo UART1 ET-BASE PIC40/46K22(ICD2)\n\r");
....................   fprintf(CH1,"Run 64.00 MHz(Internal 16 MHz + PLL)\n\r");  
....................   fprintf(CH1,"UART1>");
....................   
....................   //Start-Up UART2
....................   fprintf(CH2,"\n\n\n\r");
....................   fprintf(CH2,"Demo UART2 ET-BASE PIC40/46K22(ICD2)\n\r");
....................   fprintf(CH2,"Run 64.00 MHz(Internal 16 MHz + PLL)\n\r");  
....................   fprintf(CH2,"UART2>");
....................  */
....................  
....................    while(TRUE)
....................    {
.................... 
....................       
....................       restart_wdt();
06AB4:  CLRWDT
.................... 
....................       if(recieve_completed == 1)
06AB6:  BTFSS  30.4
06AB8:  BRA    6AC4
....................       {
....................          Modbus_Function();
06ABA:  MOVLB  0
06ABC:  GOTO   264E
....................          recieve_completed = 0;
06AC0:  BCF    30.4
06AC2:  MOVLB  1
....................       }
....................       
.................... 
....................    /*
....................       if(input(PSyncR) != SyncFlag)      //Check Sync
....................       {
....................          FlashingFlag = input(PSyncR);
....................          SyncFlag = input(PSyncR);
....................          output_bit(PSyncS,SyncFlag);
....................          SyncStatus = 1;
....................          Synctimer = 200;
....................       }
....................    */
....................    
.................... 
....................       check_ack();
06AC4:  MOVLB  0
06AC6:  CALL   233C
....................       check_reset();
06ACA:  CALL   248A
....................       check_test();
06ACE:  GOTO   60FA
....................       
....................       restart_wdt();
06AD2:  CLRWDT
....................       
....................       /*
....................       if((FaultDelayTime == 0)||(FaultDelayTime == 0xff))
....................       {
....................          Read_input(); restart_wdt();
....................       }
....................       else
....................       {
....................          if(ReadIn_flag)
....................          {
....................                ReadIn_flag = 0;
....................                Read_input(); restart_wdt();
....................          }
....................       }
....................       */
....................       Read_input(); restart_wdt();// Must be first
06AD4:  CALL   1332
06AD8:  CLRWDT
....................       Anal_Function(); restart_wdt();
06ADA:  CALL   4734
06ADE:  CLRWDT
....................       Send_Ouput(); restart_wdt();
06AE0:  CALL   1C6C
06AE4:  CLRWDT
....................       
....................       Driver595(); restart_wdt();
06AE6:  GOTO   61F6
06AEA:  CLRWDT
....................       
....................       
....................       output_toggle(PIN_A0);
06AEC:  BCF    F92.0
06AEE:  BTG    F89.0
....................       
....................       
....................       if(RefreshConfigData)
06AF0:  BTFSS  30.3
06AF2:  BRA    6BDE
....................       {
....................          RefreshConfigData =0;
06AF4:  BCF    30.3
....................          //Read_Config();
....................          //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................   
....................          IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
06AF6:  MOVLB  1
06AF8:  CLRF   xBE
06AFA:  SETF   xBF
06AFC:  MOVLB  0
06AFE:  CALL   06AA
....................          IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
06B02:  MOVLB  1
06B04:  CLRF   xBE
06B06:  SETF   xBF
06B08:  MOVLB  0
06B0A:  CALL   06BC
....................          IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
06B0E:  MOVLW  02
06B10:  MOVLB  1
06B12:  MOVWF  xBE
06B14:  SETF   xBF
06B16:  MOVLB  0
06B18:  CALL   06AA
....................          IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input 
06B1C:  MOVLW  02
06B1E:  MOVLB  1
06B20:  MOVWF  xBE
06B22:  SETF   xBF
06B24:  MOVLB  0
06B26:  CALL   06BC
....................          //  jj
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
06B2A:  MOVLB  1
06B2C:  CLRF   xC8
06B2E:  MOVLW  06
06B30:  MOVWF  xC9
06B32:  SETF   xCA
06B34:  MOVLB  0
06B36:  CALL   05E2
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
06B3A:  MOVLB  1
06B3C:  CLRF   xC8
06B3E:  MOVLW  16
06B40:  MOVWF  xC9
06B42:  SETF   xCA
06B44:  MOVLB  0
06B46:  CALL   05E2
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
06B4A:  MOVLW  02
06B4C:  MOVLB  1
06B4E:  MOVWF  xC8
06B50:  MOVLW  06
06B52:  MOVWF  xC9
06B54:  SETF   xCA
06B56:  MOVLB  0
06B58:  CALL   05E2
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
06B5C:  MOVLW  02
06B5E:  MOVLB  1
06B60:  MOVWF  xC8
06B62:  MOVLW  16
06B64:  MOVWF  xC9
06B66:  SETF   xCA
06B68:  MOVLB  0
06B6A:  CALL   05E2
....................          //  jj
....................          IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
06B6E:  MOVLW  04
06B70:  MOVLB  1
06B72:  MOVWF  xBE
06B74:  CLRF   xBF
06B76:  MOVLB  0
06B78:  CALL   06AA
....................          IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
06B7C:  MOVLW  04
06B7E:  MOVLB  1
06B80:  MOVWF  xBE
06B82:  CLRF   xBF
06B84:  MOVLB  0
06B86:  CALL   06BC
....................          IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
06B8A:  MOVLW  06
06B8C:  MOVLB  1
06B8E:  MOVWF  xBE
06B90:  CLRF   xBF
06B92:  MOVLB  0
06B94:  CALL   06AA
....................          IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
06B98:  MOVLW  06
06B9A:  MOVLB  1
06B9C:  MOVWF  xBE
06B9E:  CLRF   xBF
06BA0:  MOVLB  0
06BA2:  CALL   06BC
....................          IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
06BA6:  MOVLW  08
06BA8:  MOVLB  1
06BAA:  MOVWF  xBE
06BAC:  CLRF   xBF
06BAE:  MOVLB  0
06BB0:  CALL   06AA
....................          IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
06BB4:  MOVLW  08
06BB6:  MOVLB  1
06BB8:  MOVWF  xBE
06BBA:  CLRF   xBF
06BBC:  MOVLB  0
06BBE:  CALL   06BC
....................          IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
06BC2:  MOVLW  0A
06BC4:  MOVLB  1
06BC6:  MOVWF  xBE
06BC8:  CLRF   xBF
06BCA:  MOVLB  0
06BCC:  CALL   06AA
....................          IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
06BD0:  MOVLW  0A
06BD2:  MOVLB  1
06BD4:  MOVWF  xBE
06BD6:  CLRF   xBF
06BD8:  MOVLB  0
06BDA:  CALL   06BC
....................          
....................         
....................       }
....................       
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
06BDE:  MOVLB  1
06BE0:  CLRF   xC6
06BE2:  SETF   xC7
06BE4:  MOVLB  0
06BE6:  CALL   1C40
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
06BEA:  MOVLB  1
06BEC:  CLRF   xC6
06BEE:  SETF   xC7
06BF0:  MOVLB  0
06BF2:  CALL   1C56
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
06BF6:  MOVLW  02
06BF8:  MOVLB  1
06BFA:  MOVWF  xC6
06BFC:  SETF   xC7
06BFE:  MOVLB  0
06C00:  CALL   1C40
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
06C04:  MOVLW  02
06C06:  MOVLB  1
06C08:  MOVWF  xC6
06C0A:  SETF   xC7
06C0C:  MOVLB  0
06C0E:  CALL   1C56
06C12:  MOVLB  1
06C14:  BRA    6AB4
....................       
....................       
....................       /*        
....................       if(outmcp23)
....................       {
....................          outmcp23 = 0;
....................          FlashingRateTime = 1; //100 time per sec.
....................          
....................          MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_0);
....................          restart_wdt();
....................                   
....................          MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
....................          restart_wdt();
....................                 
....................          IO_OUTPUT_A(IO_DEVICE_1, MCP23s17_Ip_dat);
....................          restart_wdt();
....................          
....................          IO_OUTPUT_B(IO_DEVICE_1, MCP23s17_Ip_dat);
....................          restart_wdt();   
....................         
....................       }
....................       */
....................    }
....................    
.................... }
06C16:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
